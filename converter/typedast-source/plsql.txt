@package ru.barsopen.plsqlconverter.ast.typed
@tokenVocab ru.barsopen.plsqlconverter.PLSQLPrinter
@parserClass parser

compilation_unit: COMPILATION_UNIT unit_statement*;

sql_script: SQL_SCRIPT sql_script_item+;

sql_script_item => unit_statement sql_plus_command;
    
sql_plus_command => whenever_command exit_command prompt_command set_command;

whenever_command: WHENEVER_VK @any+;

set_command: SET_VK @any;

exit_command: EXIT_VK;

prompt_command: PROMPT;

unit_statement => alter_function alter_package alter_procedure alter_sequence alter_trigger alter_type
          create_function_body create_procedure_body create_package create_sequence create_trigger
          create_type drop_function drop_package drop_procedure drop_sequence drop_trigger drop_type;

// $<DDL -> SQL Statements for Stored PL/SQL Units

// $<Function DDLs

drop_function: DROP_FUNCTION function_name;

alter_function: ALTER_FUNCTION function_name DEBUG_VK? REUSE_VK? compiler_parameters_clause*;

create_function_body:
  CREATE_FUNCTION SQL92_RESERVED_CREATE? REPLACE_VK? function_name type_spec parameters
  invoker_rights_clause* parallel_enable_clause* result_cache_clause* DETERMINISTIC_VK* PIPELINED_VK?
  function_impl;

parameters: PARAMETERS parameter*;

function_impl => function_impl_using call_mode body_mode;
function_impl_using: USING_MODE AGGREGATE_VK? implementation_type_name;
call_mode: CALL_MODE call_spec;
body_mode: BODY_MODE block;

// $<Creation Function - Specific Clauses

parallel_enable_clause: PARALLEL_ENABLE_VK partition_by_clause?;

partition_by_clause: PARTITION_VK @any*;

result_cache_clause: RESULT_CACHE_VK relies_on_part?;

relies_on_part: RELIES_ON_VK tableview_name+;

streaming_clause: STREAMING_CLAUSE @any*;
//    :    ^(STREAMING_CLAUSE (SQL92_RESERVED_ORDER|CLUSTER_VK) expression ^(COLUMNS column_name+)) 
// $>
// $>

// $<Package DDLs

drop_package: DROP_PACKAGE package_name BODY_VK?;

alter_package: ALTER_PACKAGE @any*;
//    :    ^(ALTER_PACKAGE package_name DEBUG_VK? REUSE_VK? 
//                (PACKAGE_VK|BODY_VK|SPECIFICATION_VK)? compiler_parameters_clause*)
//    ->   template() "not implemented: alter_package"
//    ;

create_package => create_package_spec create_package_body;


create_package_spec: CREATE_PACKAGE_SPEC REPLACE_VK? package_name invoker_rights_clause? package_obj_spec*;

create_package_body: CREATE_PACKAGE_BODY REPLACE_VK? package_name package_obj_body* seq_of_statements? exception_clause?;

// $<Create Package - Specific Clauses

package_obj_spec => variable_declaration subtype_declaration cursor_declaration exception_declaration
record_declaration table_declaration  procedure_spec function_spec pragma_declaration;

procedure_spec: PROCEDURE_SPEC procedure_name parameters call_mode?;

function_spec: FUNCTION_SPEC function_name type_spec parameters PIPELINED_VK? RESULT_CACHE_VK? DETERMINISTIC_VK?;

package_obj_body =>
    procedure_spec
    function_spec 
    variable_declaration
    subtype_declaration 
    cursor_declaration 
    exception_declaration
    record_declaration 
    table_declaration 
    create_procedure_body
    create_function_body 
    create_type 
    ;

// $>

// $>

// $<Procedure DDLs

drop_procedure: DROP_PROCEDURE procedure_name;

alter_procedure: ALTER_PROCEDURE procedure_name DEBUG_VK? REUSE_VK? compiler_parameters_clause*;

create_procedure_body:
    CREATE_PROCEDURE SQL92_RESERVED_CREATE? REPLACE_VK? procedure_name parameters invoker_rights_clause?
           create_procedure_body_impl;
    
create_procedure_body_impl => create_procedure_body_impl_external call_mode body_mode;

create_procedure_body_impl_external: EXTERNAL_VK;

// $>

// $<Trigger DDLs

drop_trigger: DROP_TRIGGER trigger_name;

alter_trigger: ALTER_TRIGGER @any*;
/*    :    ^(ALTER_TRIGGER trigger_name 
            (    (ENABLE_VK|DISABLE_VK)
            |    ^(RENAME_VK trigger_name)
            |    DEBUG_VK? REUSE_VK? compiler_parameters_clause*
            )
        )
    ->   template() "not implemented: alter_trigger"
    ;*/

create_trigger: CREATE_TRIGGER @any*;/*
    :    ^(CREATE_TRIGGER REPLACE_VK? trigger_name  
            simple_dml_trigger? compound_dml_trigger? non_dml_trigger?
            trigger_follows_clause? (ENABLE_VK|DISABLE_VK)? trigger_when_clause? trigger_body)
    ->   template() "not implemented: create_trigger"
    ;*/

trigger_follows_clause: FOLLOWS_VK @any*; /*
    :    ^(FOLLOWS_VK trigger_name+)
    ->   template() "not implemented: trigger_follows_clause"
    ;*/

trigger_when_clause: SQL92_RESERVED_WHEN @any*; /*
    :    ^(SQL92_RESERVED_WHEN expression)
    ->   template() "not implemented: trigger_when_clause"
    ;*/

// $<Create Trigger- Specific Clauses
simple_dml_trigger: SIMPLE_DML;/*
    :    ^(SIMPLE_DML (BEFORE_VK|AFTER_VK|INSTEAD_VK) FOR_EACH_ROW? referencing_clause? dml_event_clause)
    ->   template() "not implemented: simple_dml_trigger"
    ;*/

compound_dml_trigger: COMPOUND_DML;/*
    :    ^(COMPOUND_DML referencing_clause? dml_event_clause)
    ->   template() "not implemented: compound_dml_trigger"
    ;*/

non_dml_trigger: NON_DML @any*; /*
    :    ^(NON_DML (BEFORE_VK|AFTER_VK) non_dml_event+ (DATABASE_VK|schema_name? SCHEMA_VK))
    ->   template() "not implemented: non_dml_trigger"
    ;*/

trigger_body: NON_DML @any*; /*
    :    ^(COMPOUND_VK trigger_name declare_spec* timing_point_section+)
    ->   template() "not implemented: trigger_body"
    |    ^(CALL_VK routine_name function_argument?) 
    ->   template() "not implemented: trigger_body"
    |    ^(BODY_MODE block)
    ->   template() "not implemented: trigger_body"
    ;*/

timing_point_section: NON_DML @any*; /*
    :    ^(BEFORE_STATEMENT block)
    ->   template() "not implemented: timing_point_section"
    |    ^(BEFORE_EACH_ROW block)
    ->   template() "not implemented: timing_point_section"
    |    ^(AFTER_STATEMENT block)
    ->   template() "not implemented: timing_point_section"
    |    ^(AFTER_EACH_ROW block)
    ->   template() "not implemented: timing_point_section"
    ;*/

non_dml_event: NON_DML @any*; /*
    :    SQL92_RESERVED_ALTER
    ->   template() "not implemented: non_dml_event"
    |    ANALYZE_VK
    ->   template() "not implemented: non_dml_event"
    |    ASSOCIATE_VK STATISTICS_VK
    ->   template() "not implemented: non_dml_event"
    |    AUDIT_VK
    ->   template() "not implemented: non_dml_event"
    |    COMMENT_VK
    ->   template() "not implemented: non_dml_event"
    |    SQL92_RESERVED_CREATE
    ->   template() "not implemented: non_dml_event"
    |    DISASSOCIATE_VK STATISTICS_VK
    ->   template() "not implemented: non_dml_event"
    |    SQL92_RESERVED_DROP
    ->   template() "not implemented: non_dml_event"
    |    SQL92_RESERVED_GRANT
    ->   template() "not implemented: non_dml_event"
    |    NOAUDIT_VK
    ->   template() "not implemented: non_dml_event"
    |    RENAME_VK
    ->   template() "not implemented: non_dml_event"
    |    SQL92_RESERVED_REVOKE
    ->   template() "not implemented: non_dml_event"
    |    TRUNCATE_VK
    ->   template() "not implemented: non_dml_event"
    |    DDL_VK
    ->   template() "not implemented: non_dml_event"
    |    STARTUP_VK
    ->   template() "not implemented: non_dml_event"
    |    SHUTDOWN_VK
    ->   template() "not implemented: non_dml_event"
    |    DB_ROLE_CHANGE_VK
    ->   template() "not implemented: non_dml_event"
    |    LOGON_VK
    ->   template() "not implemented: non_dml_event"
    |    LOGOFF_VK
    ->   template() "not implemented: non_dml_event"
    |    SERVERERROR_VK
    ->   template() "not implemented: non_dml_event"
    |    SUSPEND_VK
    ->   template() "not implemented: non_dml_event"
    |    DATABASE_VK
    ->   template() "not implemented: non_dml_event"
    |    SCHEMA_VK
    ->   template() "not implemented: non_dml_event"
    |    FOLLOWS_VK
    ->   template() "not implemented: non_dml_event"
    ;*/

dml_event_clause: NON_DML @any*; /*
    :    ^(DML_EVENT dml_event_element+ ^(SQL92_RESERVED_ON tableview_name dml_event_nested_clause?))  
    ->   template() "not implemented: dml_event_clause"
    ;*/

dml_event_element: NON_DML @any*; /*
    :    ^(DML_EVENT_ELEMENT (SQL92_RESERVED_DELETE|SQL92_RESERVED_INSERT|SQL92_RESERVED_UPDATE) ^(COLUMNS column_name*))
    ->   template() "not implemented: dml_event_element"
    ;*/

dml_event_nested_clause : NON_DML @any*;/*
    :    ^(NESTED_VK tableview_name)
    ->   template() "not implemented: dml_event_nested_clause"
    ;*/

referencing_clause: NON_DML @any*; /*
    :    ^(REFERENCING_VK referencing_element+)
    ->   template() "not implemented: referencing_clause"
    ;*/

referencing_element: NON_DML @any*; /*
    :    ^((NEW_VK|OLD_VK|PARENT_VK) alias)
    ->   template() "not implemented: referencing_element"
    ;*/

// $>
// $>

// $<Type DDLs

drop_type: NON_DML @any*; /*
    :    ^(DROP_TYPE type_name BODY_VK? FORCE_VK? VALIDATE_VK?)
    ->   template() "not implemented: drop_type"
    ;*/

alter_type: NON_DML @any*; /*
    :    ^(ALTER_TYPE type_name 
            (    ^(REPLACE_VK ^(OBJECT_MEMBERS element_spec+) invoker_rights_clause?)
            |    ^(ALTER_ATTRIBUTE (ADD_VK|MODIFY_VK|SQL92_RESERVED_DROP) ^(ATTRIBUTES attribute_definition+))
            |    ^(ALTER_METHOD alter_method_element+)
            |    alter_collection_clauses
            |    modifier_clause
            |    ^(COMPILE_VK (SPECIFICATION_VK|BODY_VK)? DEBUG_VK? REUSE_VK? compiler_parameters_clause*)
            ) 
            dependent_handling_clause?
        )
    ->   template() "not implemented: alter_type"
    ;*/

// $<Alter Type - Specific Clauses

alter_method_element: NON_DML @any*; /*
    :    ^(ALTER_METHOD_ELEMENT (ADD_VK|SQL92_RESERVED_DROP) map_order_function_spec? subprogram_spec?)
    ->   template() "not implemented: alter_method_element"
    ;*/

attribute_definition: NON_DML @any*; /*
    :    ^(ATTRIBUTE attribute_name type_spec?)
    ->   template() "not implemented: attribute_definition"
    ;*/

alter_collection_clauses: NON_DML @any*; /*
    :    ^(ALTER_COLLECTION 
            (    ^(TYPE_VK type_spec)
            |    ^(LIMIT_VK expression)
            )
        ) 
    ->   template() "not implemented: alter_collection_clauses"
    ;*/

dependent_handling_clause: NON_DML @any*; /*
    :    ^(DEPENDENT_HANDLING 
            (    INVALIDATE_VK
            |    ^(CASCADE_VK 
                    (    CONVERT_VK
                    |    SQL92_RESERVED_NOT? INCLUDING_VK
                    )?
                )
            )
        )
    ->   template() "not implemented: dependent_handling_clause"
    ;*/

dependent_exceptions_part: NON_DML @any*; /*
    :    ^(EXCEPTIONS_VK FORCE_VK? tableview_name)
    ->   template() "not implemented: dependent_exceptions_part"
    ;*/

// $>

create_type => create_type_body create_type_spec;

create_type_body: CREATE_TYPE_BODY SQL92_RESERVED_CREATE? REPLACE_VK? type_name create_type_body_elements;

create_type_body_elements: TYPE_BODY_ELEMENTS {[]elements}=type_body_elements+;

create_type_spec: CREATE_TYPE_SPEC SQL92_RESERVED_CREATE? REPLACE_VK? type_name CHAR_STRING? object_type_def?;

object_type_def: OBJECT_TYPE_DEF @any*; /*
    :    ^(OBJECT_TYPE_DEF (object_as_part|object_under_part) invoker_rights_clause?
             sqlj_object_type? modifier_clause* ^(OBJECT_MEMBERS element_spec*))  
    ->   template() "not implemented: object_type_def"
    ;*/

object_as_part : OBJECT_AS @any*;/*
    :    ^(OBJECT_AS (OBJECT_VK|varray_type_def|nested_table_type_def))
    ->   template() "not implemented: object_as_part"
    ;*/

object_under_part: UNDER_VK @any*; /*
    :    ^(UNDER_VK type_spec)
    ->   template() "not implemented: object_under_part"
    ;*/

nested_table_type_def: NESTED_TABLE_TYPE_DEF @any*; /*
    :    ^(NESTED_TABLE_TYPE_DEF type_spec SQL92_RESERVED_NULL? table_indexed_by_part?)
    ->   nested_table_type_def(
          type_spec={$type_spec.st}, is_not_null={$SQL92_RESERVED_NULL != null},
          table_indexed_by_part={$table_indexed_by_part.st}
        )
    ;*/

sqlj_object_type: JAVA_VK @any*; /*
    :    ^(JAVA_VK expression (SQLDATA_VK|CUSTOMDATUM_VK|ORADATA_VK))
    ->   template() "not implemented: sqlj_object_type"
    ;*/

type_body_elements => map_order_func_declaration subprog_decl_in_type;

map_order_func_declaration: NON_DML @any*; /*
    :    ^((MAP_VK|SQL92_RESERVED_ORDER) create_function_body)
    ->   template() "not implemented: map_order_func_declaration"
    ;*/

subprog_decl_in_type: NON_DML @any*; /*
    :    ^((MEMBER_VK|STATIC_VK)
            (    create_procedure_body
            |    create_function_body
            |    constructor_declaration
            )
        )
    ->   template() "not implemented: subprog_decl_in_type"
    ;*/

constructor_declaration: NON_DML @any*; /*
    :    ^(CONSTRUCTOR_VK type_spec FINAL_VK? INSTANTIABLE_VK? ^(PARAMETERS type_elements_parameter*) 
            (    ^(CALL_MODE call_spec)
            |    ^(BODY_MODE block)
            )
        )
    ->   template() "not implemented: constructor_declaration"
    ;*/

// $>

// $<Common Type Clauses

modifier_clause : NON_DML @any*;/*
    :    ^(MODIFIER SQL92_RESERVED_NOT? (INSTANTIABLE_VK|FINAL_VK|OVERRIDING_VK))
    ->   template() "not implemented: modifier_clause"
    ;*/

sqlj_object_type_attr: NON_DML @any*; /*
    :    ^(EXTERNAL_VK expression)
    ->   template() "not implemented: sqlj_object_type_attr"
    ;*/

element_spec: NON_DML @any*; /*
    :    ^(ELEMENT_SPEC element_spec_options+ modifier_clause? pragma_clause?)
    ->   template() "not implemented: element_spec"
    ;*/

element_spec_options: NON_DML @any*; /*
    :    subprogram_spec
    ->   template() "not implemented: element_spec_options"
    |    constructor_spec
    ->   template() "not implemented: element_spec_options"
    |    map_order_function_spec
    ->   template() "not implemented: element_spec_options"
    |    ^(FIELD_SPEC id type_spec sqlj_object_type_attr?)
    ->   template() "not implemented: element_spec_options"
    ;*/

subprogram_spec: NON_DML @any*; /*
    :    ^((MEMBER_VK|STATIC_VK)
            (    procedure_spec
            |    function_spec
            )
        )
    ->   template() "not implemented: subprogram_spec"
    ;*/

constructor_spec: NON_DML @any*; /*
    :    ^(CONSTRUCTOR_SPEC type_spec FINAL_VK? INSTANTIABLE_VK? ^(PARAMETERS type_elements_parameter*) constructor_call_mode?)
    ->   template() "not implemented: constructor_spec"
    ;*/

constructor_call_mode: NON_DML @any*; /*
    :    ^(CALL_MODE call_spec)
    ->   template() "not implemented: constructor_call_mode"
    ;*/

map_order_function_spec: NON_DML @any*; /*
    :    ^((MAP_VK|SQL92_RESERVED_ORDER) function_spec)
    ->   template() "not implemented: map_order_function_spec"
    ;*/

pragma_clause: NON_DML @any*; /*
    :    ^(PRAGMA_VK pragma_elements+)
    ->   template() "not implemented: pragma_clause"
    ;*/

pragma_elements: NON_DML @any*; /*
    :    id
    ->   template() "not implemented: pragma_elements"
    |    SQL92_RESERVED_DEFAULT
    ->   template() "not implemented: pragma_elements"
    ;*/

type_elements_parameter: NON_DML @any*; /*
    :    ^(PARAMETER parameter_name type_spec)
    ->   template() "not implemented: type_elements_parameter"
    ;*/

// $>
// $>


// $<Sequence DDLs

drop_sequence: NON_DML @any*; /*
    :   ^(DROP_SEQUENCE sequence_name)
    ->   template() "not implemented: drop_sequence"
    ;*/

alter_sequence: NON_DML @any*; /*
    :    ^(ALTER_SEQUENCE sequence_name sequence_spec+)
    ->   template() "not implemented: alter_sequence"
    ;*/

create_sequence: NON_DML @any*; /*
    :    ^(CREATE_SEQUENCE sequence_name sequence_spec*)
    ->   template() "not implemented: create_sequence"
    ;*/

// $<Common Sequence

sequence_spec: NON_DML @any*; /*
    :    ^(START_VK UNSIGNED_INTEGER)
    ->   template() "not implemented: sequence_spec"
    |    ^(INCREMENT_VK UNSIGNED_INTEGER)
    ->   template() "not implemented: sequence_spec"
    |    ^(MAXVALUE_VK UNSIGNED_INTEGER)
    ->   template() "not implemented: sequence_spec"
    |    ^(MINVALUE_VK UNSIGNED_INTEGER)
    ->   template() "not implemented: sequence_spec"
    |    ^(CACHE_VK UNSIGNED_INTEGER)
    ->   template() "not implemented: sequence_spec"
    |    NOMAXVALUE_VK
    ->   template() "not implemented: sequence_spec"
    |    NOMINVALUE_VK
    ->   template() "not implemented: sequence_spec"
    |    CYCLE_VK
    ->   template() "not implemented: sequence_spec"
    |    NOCYCLE_VK
    ->   template() "not implemented: sequence_spec"
    |    NOCACHE_VK
    ->   template() "not implemented: sequence_spec"
    |    ORDER_VK
    ->   template() "not implemented: sequence_spec"
    |    NOORDER_VK
    ->   template() "not implemented: sequence_spec"
    ;*/

// $>
// $>


// $<Common DDL Clauses

invoker_rights_clause: NON_DML @any*; /*
    :    ^(AUTHID_VK (CURRENT_USER_VK|DEFINER_VK))
    ->   template() "not implemented: invoker_rights_clause"
    ;*/

compiler_parameters_clause: NON_DML @any*; /*
    :    ^(COMPILER_PARAMETER ^(ASSIGN id expression))
    ->   template() "not implemented: compiler_parameters_clause"
    ;*/

call_spec: LANGUAGE_VK call_spec_decl;
    
call_spec_decl => java_spec c_spec;

// $<Call Spec - Specific Clauses

java_spec: JAVA_VK CHAR_STRING;

c_spec: C_VK @any*; /*CHAR_STRING? CONTEXT_VK? ^(LIBRARY_VK id) c_agent_in_clause? c_parameters_clause?)
    ->   template() "not implemented: c_spec"
    ;*/

c_agent_in_clause: AGENT_VK; /*
    :    ^(AGENT_VK expression+)
    ->   template() "not implemented: c_agent_in_clause"
    ;*/

c_parameters_clause: PARAMETERS_VK; /*
    :    ^(PARAMETERS_VK (THREE_DOTS|expression+))
    ->   template() "not implemented: c_parameters_clause"
    ;*/

// $>

parameter: PARAMETER parameter_name parameter_dir_spec* type_spec? default_value_part?;
    
parameter_dir_spec => parameter_in parameter_out parameter_inout;

parameter_in: SQL92_RESERVED_IN;
parameter_out: OUT_VK;
parameter_inout: INOUT_VK;

default_value_part: DEFAULT_VALUE expression;

// $>

// $>

// $<PL/SQL Elements Declarations

declare_spec =>
    variable_declaration
    subtype_declaration
    cursor_declaration
    exception_declaration
    pragma_declaration
    record_declaration
    table_declaration
    create_procedure_body
    create_function_body
    create_type
    ;

//incorporates constant_declaration
variable_declaration: VARIABLE_DECLARE variable_name type_spec CONSTANT_VK? SQL92_RESERVED_NULL? default_value_part?;

subtype_declaration: SUBTYPE_DECLARE type_name type_spec SQL92_RESERVED_NULL? subtype_range?;

subtype_range: RANGE_VK {e1}=expression {e2}=expression;

//cursor_declaration incorportates curscursor_body and cursor_spec
cursor_declaration: CURSOR_DECLARE cursor_name type_spec? select_statement? parameters;

exception_declaration: EXCEPTION_DECLARE exception_name;

pragma_declaration: PRAGMA_DECLARE pragma_declaration_impl;
    
pragma_declaration_impl => pragma_declaration_serially_reusable pragma_declaration_autonomous_transaction
pragma_declaration_exception_init pragma_declaration_inline pragma_declaration_restrict_references;

pragma_declaration_serially_reusable: SERIALLY_REUSABLE_VK;
pragma_declaration_autonomous_transaction: AUTONOMOUS_TRANSACTION_VK;
pragma_declaration_exception_init: EXCEPTION_INIT_VK exception_name constant;
pragma_declaration_inline: INLINE_VK id expression;
pragma_declaration_restrict_references: RESTRICT_REFERENCES_VK SQL92_RESERVED_DEFAULT? id+;
   

record_declaration => record_type_dec record_var_dec;

// $<Record Declaration - Specific Clauses

//incorporates ref_cursor_type_definition
record_type_dec => record_type_dec_record record_type_dec_refcursor;
record_type_dec_record: RECORD_TYPE_DECLARE_FIELDS type_name field_spec+;
    
record_type_dec_refcursor: RECORD_TYPE_DECLARE_REFCURSOR type_name type_spec?;

field_spec: FIELD_SPEC column_name type_spec? SQL92_RESERVED_NULL? default_value_part?;

record_var_dec: RECORD_VAR_DECLARE record_name type_name percent_type_or_rowtype;

percent_type_or_rowtype => percent_type percent_rowtype;
percent_type: PERCENT_TYPE_VK;
percent_rowtype: PERCENT_ROWTYPE_VK;

// $>

table_declaration => table_type_dec table_var_dec;

table_type_dec: TABLE_TYPE_DECLARE type_name SQL92_RESERVED_NULL? table_type_dec_impl;
    
table_type_dec_impl =>  table_type_dec_table_of varray_type_def;
    
table_type_dec_table_of: SQL92_RESERVED_TABLE type_spec table_indexed_by_part?;

table_indexed_by_part: INDEXED_BY type_spec;

varray_type_def: VARR_ARRAY_DEF expression type_spec;

table_var_dec: TABLE_VAR_DECLARE table_var_name type_spec;

// $>

// $<PL/SQL Statements

seq_of_statements: STATEMENTS stat_or_label+;
    
stat_or_label => statement labeled_statement;
    
labeled_statement: LABEL_DECLARE label_name statement;

statement =>
    assignment_statement
    continue_statement
    exit_statement
    goto_statement
    if_statement
    loop_statement
    forall_statement
    null_statement
    raise_statement
    return_statement
    pipe_row_statement
    case_statement
    sql_statement
    perform_statement
    general_element
    body
    block
    ;

assignment_statement: ASSIGN assignment_target expression;
    
assignment_target => general_element hosted_variable_name;

continue_statement: CONTINUE_VK label_name? general_when?;

general_when: SQL92_RESERVED_WHEN expression;

exit_statement: EXIT_VK label_name? general_when?;

goto_statement: SQL92_RESERVED_GOTO label_name;

if_statement: PLSQL_RESERVED_IF expression seq_of_statements elsif_part* else_part?;

elsif_part: PLSQL_NON_RESERVED_ELSIF expression seq_of_statements;

else_part: SQL92_RESERVED_ELSE seq_of_statements;

loop_statement => while_loop for_loop simple_loop;

while_loop: WHILE_LOOP expression seq_of_statements;
for_loop: FOR_LOOP cursor_loop_param seq_of_statements;
simple_loop: LOOP_VK seq_of_statements;

// $<Loop - Specific Clause

cursor_loop_param => indexed_for cursor_based_for select_based_for;

indexed_for: INDEXED_FOR index_name REVERSE_VK? indexed_for_bounds;
cursor_based_for: CURSOR_BASED_FOR record_name general_element;
select_based_for: SELECT_BASED_FOR record_name select_statement;

indexed_for_bounds: SIMPLE_BOUND {b1}=expression {b2}=expression;

// $>

forall_statement: FORALL_VK index_name bounds_clause sql_statement EXCEPTIONS_VK?;

bounds_clause: SIMPLE_BOUND;/*
    :    ^(SIMPLE_BOUND expression expression)
    ->   template() "not implemented: bounds_clause"
    |    ^(INDICES_BOUND collection_name between_bound?)
    ->   template() "not implemented: bounds_clause"
    |    ^(VALUES_BOUND index_name) 
    ->   template() "not implemented: bounds_clause"
    ;*/

between_bound: SQL92_RESERVED_BETWEEN;/*
    :    ^(SQL92_RESERVED_BETWEEN expression expression)
    ->   template() "not implemented: between_bound"
    ;*/

null_statement: SQL92_RESERVED_NULL;

raise_statement: RAISE_VK exception_name?;

return_statement: RETURN_VK expression?;

body: BODY label_name? seq_of_statements exception_clause?;

// $<Body - Specific Clause

exception_clause: SQL92_RESERVED_EXCEPTION exception_handler+;

exception_handler: SQL92_RESERVED_WHEN exception_name+ seq_of_statements;

// $>

block: BLOCK declare_spec* body;

// $>

perform_statement: PGSQL_PERFORM {inner}=general_element_or_dml_statement;

general_element_or_dml_statement => general_element data_manipulation_language_statements;

// $<SQL PL/SQL Statements

sql_statement => execute_immediate data_manipulation_language_statements cursor_manipulation_statements transaction_control_statements;

execute_immediate: EXECUTE_VK expression into_clause? using_clause? dynamic_returning_clause?;

// $<Execute Immediate - Specific Clause
dynamic_returning_clause: DYNAMIC_RETURN into_clause;
// $>


// $<DML SQL PL/SQL Statements

data_manipulation_language_statements =>
  merge_statement lock_table_statement select_statement update_statement delete_statement insert_statement;

select_statement: SELECT_STATEMENT subquery_factoring_clause? subquery order_by_clause? for_update_clause?;

// $<Select - Specific Clauses
subquery_factoring_clause: SQL92_RESERVED_WITH RECURSIVE_VK? factoring_element+;

factoring_element: FACTORING query_name column_name* subquery order_by_clause? /*search_clause? cycle_clause?*/;

subquery: SUBQUERY subquery_basic_elements subquery_operation_part*;

subquery_operation_part => subquery_operation_union subquery_operation_intersect subquery_operation_minus;

subquery_operation_union: SQL92_RESERVED_UNION SQL92_RESERVED_ALL? subquery_basic_elements;
subquery_operation_intersect: SQL92_RESERVED_INTERSECT SQL92_RESERVED_ALL? subquery_basic_elements;
subquery_operation_minus: PLSQL_RESERVED_MINUS SQL92_RESERVED_ALL? subquery_basic_elements;


subquery_basic_elements => query_block subquery;

query_block: SQL92_RESERVED_SELECT 
            from_clause 
            SQL92_RESERVED_DISTINCT?
            SQL92_RESERVED_UNIQUE?
            SQL92_RESERVED_ALL? 
            query_block_projection
            into_clause? where_clause? hierarchical_query_clause? 
            group_by_clause? model_clause?;
    
query_block_projection => projection_asterisk projection_list;

projection_asterisk: ASTERISK;
projection_list: SELECT_LIST selected_element+;

selected_element: SELECT_ITEM expression alias?;

from_clause: SQL92_RESERVED_FROM table_ref+;

table_ref: TABLE_REF table_ref_aux join_clause*;

table_ref_aux:
  TABLE_REF_ELEMENT alias? dml_table_expression_clause
  ONLY_VK?
  pivot_clause?
  unpivot_clause?
  flashback_query_clause*;

join_clause: JOIN_DEF
            {qpc1}=query_partition_clause?
            CROSS_VK?
            NATURAL_VK?
            INNER_VK?
            FULL_VK?
            LEFT_VK?
            RIGHT_VK?
            table_ref_aux
            {qpc2}=query_partition_clause?
            join_on_part?
            join_using_part?;

join_on_part: SQL92_RESERVED_ON expression;

join_using_part: PLSQL_NON_RESERVED_USING column_name+;

query_partition_clause: PARTITION_VK query_partition_clause_spec;
    
query_partition_clause_spec => subquery expression_list query_partition_clause_spec_expressions;

query_partition_clause_spec_expressions: QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS expression+;

flashback_query_clause => flashback_query_clause_versions flashback_query_clause_as;

flashback_query_clause_versions: VERSIONS_VK SCN_VK? TIMESTAMP_VK? expression;
flashback_query_clause_as: SQL92_RESERVED_AS SCN_VK? TIMESTAMP_VK? expression;

pivot_clause: PIVOT_VK XML_VK? pivot_element+ pivot_for_clause pivot_in_clause;

pivot_element: PIVOT_ELEMENT alias? expression;

pivot_for_clause: SQL92_RESERVED_FOR column_name+;

pivot_in_clause: SQL92_RESERVED_IN; /*
    :    ^(SQL92_RESERVED_IN 
        (    subquery
        |    ^(ANY_MODE SQL92_RESERVED_ANY+)
        |    ^(ELEMENTS_MODE pivot_in_clause_element+)
        )
        )
    ->   template() "not implemented: pivot_in_clause"
    ;*/

pivot_in_clause_element: PIVOT_IN_ELEMENT; /*
    :    ^(PIVOT_IN_ELEMENT alias? (expression|expression_list))
    ->   template() "not implemented: pivot_in_clause_element"
    ;*/

unpivot_clause: UNPIVOT_VK; /*
    :    ^(UNPIVOT_VK ((INCLUDE_VK|EXCLUDE_VK) NULLS_VK?)? column_name+ pivot_for_clause unpivot_in_clause)
    ->   template() "not implemented: unpivot_clause"
    ;*/

unpivot_in_clause: UNPIVOT_VK; /*
    :    ^(SQL92_RESERVED_IN unpivot_in_element+)
    ->   template() "not implemented: unpivot_in_clause"
    ;*/

unpivot_in_element: UNPIVOT_VK; /*
    :    ^(UNPIVOT_IN_ELEMENT column_name+ ^(PIVOT_ALIAS (expression|expression_list)))
    ->   template() "not implemented: unpivot_in_element"
    ;*/

hierarchical_query_clause: HIERARCHICAL start_part? hierarchical_query_clause_connect;
    
hierarchical_query_clause_connect: SQL92_RESERVED_CONNECT NOCYCLE_VK? expression;

start_part: PLSQL_RESERVED_START expression;

group_by_clause: SQL92_RESERVED_GROUP group_by_element+ having_clause?;

group_by_element: GROUP_BY_ELEMENT group_by_elements;

group_by_elements => group_by_elements_grouping grouping_element;

group_by_elements_grouping: GROUPING_VK groupin_set+;

groupin_set: GROUPIN_SET grouping_element;

grouping_element => grouping_element_rollup grouping_element_cube expression_list expression;

grouping_element_rollup: ROLLUP_VK grouping_element+;
grouping_element_cube: CUBE_VK grouping_element+;

having_clause: SQL92_RESERVED_HAVING expression;

model_clause: PLSQL_NON_RESERVED_MODEL main_model cell_reference_options* return_rows_clause? reference_model*;

cell_reference_options: IGNORE_VK; /*
    :    ^((IGNORE_VK|KEEP_VK) NAV_VK)
    |    ^(SQL92_RESERVED_UNIQUE (DIMENSION_VK|SINGLE_VK))
    ->   template() "not implemented: cell_reference_options"
    ;*/

return_rows_clause: RETURN_VK UPDATED_VK? SQL92_RESERVED_ALL?;

reference_model: REFERENCE_VK reference_model_name subquery model_column_clauses cell_reference_options*;

main_model: MAIN_MODEL main_model_name? model_column_clauses model_rules_clause cell_reference_options*;

model_column_clauses: MODEL_COLUMN model_column_clauses_dimension model_column_clauses_measures model_column_partition_part?;

model_column_clauses_dimension: DIMENSION_VK model_column_list;
model_column_clauses_measures: MEASURES_VK model_column_list;

model_column_partition_part: PARTITION_VK model_column_list;

model_column_list: MODEL_COLUMNS model_column+;

model_column: MODEL_COLUMN alias? expression;

model_rules_clause: MODEL_RULES model_rules_element+ model_rules_part?;

model_rules_part: RULES_VK; /*
    :    ^(RULES_VK 
            (SQL92_RESERVED_UPDATE|UPSERT_VK SQL92_RESERVED_ALL?)? 
            (AUTOMATIC_VK|SEQUENTIAL_VK)? 
            model_iterate_clause?
        )
    ->   template() "not implemented: model_rules_part"
    ;*/

model_rules_element: MODEL_RULE; /*
    :    ^(MODEL_RULE 
            ^(ASSIGN model_expression expression) 
            (SQL92_RESERVED_UPDATE|UPSERT_VK SQL92_RESERVED_ALL?)? 
            order_by_clause?
        )
    ->   template() "not implemented: model_rules_element"
    ;*/

model_iterate_clause: ITERATE_VK expression until_part?;

until_part: UNTIL_VK expression;

order_by_clause: SQL92_RESERVED_ORDER SIBLINGS_VK? order_by_elements_list;
    
order_by_elements_list: ORDER_BY_ELEMENTS {[]elements}=order_by_elements+;

order_by_elements: ORDER_BY_ELEMENT expression SQL92_RESERVED_ASC? SQL92_RESERVED_DESC? NULLS_VK? FIRST_VK? LAST_VK?;

for_update_clause: SQL92_RESERVED_FOR for_update_of_part? for_update_options?;

for_update_of_part: SQL92_RESERVED_OF column_name+;

for_update_options => for_update_options_skip for_update_options_nowait for_update_options_wait;

for_update_options_skip: SKIP_VK;
for_update_options_nowait: PLSQL_RESERVED_NOWAIT;
for_update_options_wait: WAIT_VK expression;

// $>

update_statement: SQL92_RESERVED_UPDATE general_table_ref
            update_statement_set
            where_clause? static_returning_clause? error_logging_clause?;
    
update_statement_set: SET_VK update_set_elements+;

// $<Update - Specific Clauses

update_set_elements => update_set_elements_assign update_set_elements_value;

update_set_elements_assign: ASSIGN column_name+ expression_or_subquery;

expression_or_subquery => expression subquery;

update_set_elements_value: VALUE_VK char_set_name? id expression;

// $>

delete_statement: SQL92_RESERVED_DELETE general_table_ref
            where_clause? static_returning_clause? error_logging_clause?;

insert_statement: SQL92_RESERVED_INSERT insert_statement_spec;
    
insert_statement_spec => single_table_insert multi_table_insert;

// $<Insert - Specific Clauses

single_table_insert:
  SINGLE_TABLE_MODE insert_into_clause values_clause? static_returning_clause? select_statement? error_logging_clause?;

multi_table_insert: MULTI_TABLE_MODE select_statement conditional_insert_clause? multi_table_element*;

multi_table_element: TABLE_ELEMENT insert_into_clause values_clause? error_logging_clause?;

conditional_insert_clause:
  CONDITIONAL_INSERT SQL92_RESERVED_ALL? FIRST_VK? conditional_insert_when_part+ conditional_insert_else_part?;

conditional_insert_when_part: SQL92_RESERVED_WHEN expression multi_table_element+;

conditional_insert_else_part: SQL92_RESERVED_ELSE multi_table_element+;

insert_into_clause: SQL92_RESERVED_INTO general_table_ref insert_into_clause_columns;

insert_into_clause_columns: COLUMNS column_name*;

values_clause: SQL92_RESERVED_VALUES expression_or_expression_list;

expression_or_expression_list => expression expression_list;

// $>
merge_statement: MERGE_VK alias? tableview_name 
            merge_using_clause merge_update_clause? merge_insert_clause? error_logging_clause?;
    
merge_using_clause: PLSQL_NON_RESERVED_USING selected_tableview expression;

// $<Merge - Specific Clauses

merge_update_clause: MERGE_UPDATE merge_element+ where_clause? merge_update_delete_part?;

merge_element: ASSIGN column_name expression;

merge_update_delete_part: SQL92_RESERVED_DELETE where_clause;

merge_insert_clause: MERGE_INSERT insert_into_clause_columns expression_list where_clause?;

selected_tableview: SELECTED_TABLEVIEW
            alias?
            selected_tableview_src;
    
selected_tableview_src => tableview_name select_statement;

// $>

lock_table_statement: PLSQL_RESERVED_LOCK lock_table_element+ lock_mode wait_nowait_part?;

wait_nowait_part: WAIT_VK; /*
    :    ^(WAIT_VK expression)
    ->   template() "not implemented: wait_nowait_part"
    |    PLSQL_RESERVED_NOWAIT
    ->   template() "not implemented: wait_nowait_part"
    ;*/

// $<Lock - Specific Clauses

lock_table_element: LOCK_TABLE_ELEMENT tableview_name partition_extension_clause?;

lock_mode: ROW_VK; /*
    :    ROW_VK PLSQL_RESERVED_SHARE
    ->   template() "not implemented: lock_mode"
    |    ROW_VK PLSQL_RESERVED_EXCLUSIVE
    ->   template() "not implemented: lock_mode"
    |    PLSQL_RESERVED_SHARE SQL92_RESERVED_UPDATE?
    ->   template() "not implemented: lock_mode"
    |    PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE
    ->   template() "not implemented: lock_mode"
    |    PLSQL_RESERVED_EXCLUSIVE
    ->   template() "not implemented: lock_mode"
    ;*/
// $>

// $<Common DDL Clauses

general_table_ref: TABLE_REF alias? dml_table_expression_clause ONLY_VK?;

static_returning_clause: STATIC_RETURNING expression+ into_clause;

error_logging_clause: LOG_VK error_logging_into_part? expression? error_logging_reject_part?;

error_logging_into_part: SQL92_RESERVED_INTO tableview_name;

error_logging_reject_part: REJECT_VK UNLIMITED_VK? expression?;

dml_table_expression_clause => table_expression table_ref;

table_expression: TABLE_EXPRESSION table_expression_element;

table_expression_element => collection_mode select_mode direct_mode general_element standard_function;

collection_mode: COLLECTION_MODE table_collection_expression;
select_mode: SELECT_MODE select_statement subquery_restriction_clause?;
direct_mode: DIRECT_MODE tableview_name sample_clause?;

table_collection_expression => expression subquery outer_join_sign_table_expr;

outer_join_sign_table_expr: OUTER_JOIN_SIGN expression_or_subquery;

subquery_restriction_clause: SQL92_RESERVED_WITH; /*
    :    ^(SQL92_RESERVED_WITH (READ_VK|SQL92_RESERVED_CHECK constraint_name?))
    ->   template() "not implemented: subquery_restriction_clause"
    ;*/

sample_clause: SAMPLE_VK BLOCK_VK? expression seed_part?;

seed_part: SEED_VK expression;

// $>

// $>

// $<Cursor Manipulation SQL PL/SQL Statements

cursor_manipulation_statements => close_statement open_statement fetch_statement open_for_statement;

close_statement: CLOSE_VK cursor_name;

open_statement: OPEN_VK cursor_name expression_list?;

fetch_statement: SQL92_RESERVED_FETCH cursor_name into_clause;

open_for_statement: OPEN_FOR variable_name expression_or_select_statement using_clause?;

expression_or_select_statement => expression select_statement;

// $>

// $<Transaction Control SQL PL/SQL Statements

transaction_control_statements => set_transaction_command set_constraint_command commit_statement rollback_statement savepoint_statement;

set_transaction_command: SET_TRANSACTION; /*
    :    ^(SET_TRANSACTION CHAR_STRING?
            (    ^(READ_VK (ONLY_VK|WRITE_VK))
            |    ^(ISOLATION_VK (SERIALIZABLE_VK|COMMITTED_VK))
            |    ^(ROLLBACK_VK rollback_segment_name)
            )?
        )
    ->   template() "not implemented: set_transaction_command"
    ;*/

set_constraint_command: SET_CONSTRAINT;/*
    :    ^(SET_CONSTRAINT (SQL92_RESERVED_ALL|constraint_name+) (IMMEDIATE_VK|DEFERRED_VK))
    ->   template() "not implemented: set_constraint_command"
    ;*/

commit_statement: COMMIT_VK WORK_VK? commit_statement_additional? write_clause?;
    
commit_statement_additional => commit_comment commit_force;
    
commit_comment: COMMENT_VK {comment_expr}=expression;
    
commit_force: FORCE_VK commit_force_content;
    
commit_force_content => commit_force_xid commit_force_xid_all commit_force_exprs;
commit_force_xid: CORRUPT_XID_VK expression;
commit_force_xid_all: CORRUPT_XID_ALL_VK;
commit_force_exprs => expression; // TODO: expr1=expression expr2=expression?


write_clause: WRITE_VK WAIT_VK? PLSQL_RESERVED_NOWAIT? IMMEDIATE_VK? BATCH_VK?;

rollback_statement: ROLLBACK_VK WORK_VK? rollback_statement_additional?;

rollback_statement_additional => rollback_statement_to rollback_statement_force;

rollback_statement_to: SQL92_RESERVED_TO savepoint_name;
rollback_statement_force: FORCE_VK CHAR_STRING;

savepoint_statement: SAVEPOINT_VK savepoint_name;
    
pipe_row_statement: PIPE_ROW expression;

// $>

// $<Expression & Condition

expression_list: EXPR_LIST expression*;

expression => logic_expression general_expression;

logic_expression: LOGIC_EXPR expression_element;
general_expression: EXPR expression_element;

expression_element => case_statement constant general_element hosted_variable_name subquery
  expression_element_or expression_element_and expression_element_eq
  expression_element_neq expression_element_lt expression_element_gt
  expression_element_lte expression_element_gte expression_element_concat
  expression_element_plus expression_element_minus expression_element_asterisk
  expression_element_solidus expression_element_percent expression_element_mod
  expression_element_div expression_element_not expression_element_not_null
  expression_element_null expression_element_not_nan expression_element_nan
  expression_element_not_present expression_element_present expression_element_not_infinite
  expression_element_infinite expression_element_not_a_set expression_element_a_set
  expression_element_not_empty expression_element_empty
  expression_element_not_in expression_element_in
  expression_element_not_between expression_element_between
  expression_element_like expression_element_likec
  expression_element_like2 expression_element_like4
  expression_element_not_like expression_element_unary_plus expression_element_unary_minus
  expression_element_prior expression_element_stanrd
  expression_element_some expression_element_exists
  expression_element_all expression_element_any
  expression_element_dot_asterisk expression_element_found
  expression_element_notfound expression_element_rowcount
  expression_element_isopen expression_element_outer_join_sign;

expression_element_or: SQL92_RESERVED_OR {lhs}=expression_element {rhs}=expression_element;
expression_element_and: SQL92_RESERVED_AND {lhs}=expression_element {rhs}=expression_element;
expression_element_eq: EQUALS_OP  {lhs}=expression_element {rhs}=expression_element;
expression_element_neq: NOT_EQUAL_OP {lhs}=expression_element {rhs}=expression_element;
expression_element_lt: LESS_THAN_OP {lhs}=expression_element {rhs}=expression_element;
expression_element_gt: GREATER_THAN_OP {lhs}=expression_element {rhs}=expression_element;
expression_element_lte: LESS_THAN_OR_EQUALS_OP {lhs}=expression_element {rhs}=expression_element;
expression_element_gte: GREATER_THAN_OR_EQUALS_OP {lhs}=expression_element {rhs}=expression_element;
expression_element_concat: CONCATENATION_OP {lhs}=expression_element {rhs}=expression_element;
expression_element_plus: PLUS_SIGN {lhs}=expression_element {rhs}=expression_element;
expression_element_minus: MINUS_SIGN {lhs}=expression_element {rhs}=expression_element;
expression_element_asterisk: ASTERISK {lhs}=expression_element {rhs}=expression_element;
expression_element_solidus: SOLIDUS {lhs}=expression_element {rhs}=expression_element;
expression_element_percent: PERCENT {lhs}=expression_element {rhs}=expression_element;
expression_element_mod: MOD_VK {lhs}=expression_element {rhs}=expression_element;
expression_element_div: DIV_VK  {lhs}=expression_element {rhs}=expression_element;
expression_element_not: SQL92_RESERVED_NOT {arg}=expression_element;
expression_element_not_null: IS_NOT_NULL {arg}=expression_element;
expression_element_null: IS_NULL {arg}=expression_element;
expression_element_not_nan: IS_NOT_NAN {arg}=expression_element;
expression_element_nan: IS_NAN {arg}=expression_element;
expression_element_not_present: IS_NOT_PRESENT {arg}=expression_element;
expression_element_present: IS_PRESENT {arg}=expression_element;
expression_element_not_infinite: IS_NOT_INFINITE {arg}=expression_element;
expression_element_infinite: IS_INFINITE {arg}=expression_element;
expression_element_not_a_set: IS_NOT_A_SET {arg}=expression_element;
expression_element_a_set: IS_A_SET {arg}=expression_element;
expression_element_not_empty: IS_NOT_EMPTY {arg}=expression_element;
expression_element_empty: IS_EMPTY {arg}=expression_element;
expression_element_not_in: NOT_IN {arg}=expression_element in_elements;
expression_element_in: SQL92_RESERVED_IN {arg}=expression_element in_elements;
expression_element_not_between: NOT_BETWEEN {arg}=expression_element {expr_low}=expression_element {expr_high}=expression_element;
expression_element_between: SQL92_RESERVED_BETWEEN {arg}=expression_element {expr_low}=expression_element {expr_high}=expression_element;
expression_element_like: SQL92_RESERVED_LIKE {text}=expression_element {pattern}=expression_element {escape}=expression_element?;
expression_element_likec: LIKEC_VK {text}=expression_element {pattern}=expression_element {escape}=expression_element?;
expression_element_like2: LIKE2_VK {text}=expression_element {pattern}=expression_element {escape}=expression_element?;
expression_element_like4: LIKE4_VK {text}=expression_element {pattern}=expression_element {escape}=expression_element?;
expression_element_not_like: NOT_LIKE {text}=expression_element {pattern}=expression_element {escape}=expression_element?;
expression_element_unary_plus: UNARY_PLUS {op}=@tokenText {arg}=expression_element;
expression_element_unary_minus: UNARY_MINUS {op}=@tokenText {arg}=expression_element;
expression_element_prior: SQL92_RESERVED_PRIOR {arg}=expression_element;
expression_element_stanrd: STANDARD_FUNCTION standard_function;
expression_element_some: SOME_VK expression_or_subquery;
expression_element_exists: SQL92_RESERVED_EXISTS expression_or_subquery;
expression_element_all: SQL92_RESERVED_ALL expression_or_subquery;
expression_element_any: SQL92_RESERVED_ANY expression_or_subquery;
expression_element_dot_asterisk: DOT_ASTERISK tableview_name;
expression_element_found: PERCENT_FOUND_VK cursor_name;
expression_element_notfound: PERCENT_NOTFOUND_VK cursor_name;
expression_element_rowcount: PERCENT_ROWCOUNT_VK cursor_name;
expression_element_isopen: PERCENT_ISOPEN_VK cursor_name;
expression_element_outer_join_sign: OUTER_JOIN_SIGN {expr}=expression_element;
// TODO
/*
    |    ^(IS_NOT_OF_TYPE expression_element type_spec+)
    ->   template() "not implemented: expression_element"
    |    ^(IS_OF_TYPE expression_element type_spec+)
    ->   template() "not implemented: expression_element"

    |    ^((MEMBER_VK|SUBMULTISET_VK) expression_element expression_element)
    ->   template() "not implemented: expression_element"
    |    ^(PIPE_VK expression_element expression_element)
    ->   template() "not implemented: expression_element"
    |    ^(NEW_VK expression)
    ->   template() "not implemented: expression_element"
    |    ^(SQL92_RESERVED_DISTINCT expression_element)
    ->   template() "not implemented: expression_element"
    |    ^(VECTOR_EXPR expression_element+)
    ->   template() "not implemented: expression_element"

    |    ^(DATETIME_OP expression_element datetime_element)
    ->   template() "not implemented: expression_element"
    |    model_expression
    ->   template() "not implemented: expression_element"
    |    ^(KEEP_VK expression_element DENSE_RANK_VK (FIRST_VK|LAST_VK) order_by_clause over_clause?)
    ->   template() "not implemented: expression_element"
    */

in_elements => subquery expression expression_list;

datetime_element: AT_VK; /*
    :    ^(AT_VK expression_element (LOCAL_VK|TIME_VK expression))
    ->   template() "not implemented: datetime_element"
    |    ^(DAY_VK SECOND_VK expression*)
    ->   template() "not implemented: datetime_element"
    |    ^(YEAR_VK MONTH_VK expression)
    ->   template() "not implemented: datetime_element"
    ;*/

model_expression: MODEL_EXPRESSION expression_element model_expression_element+;

model_expression_element: SQL92_RESERVED_ANY; /*
    :    SQL92_RESERVED_ANY
    ->   template() "not implemented: model_expression_element"
    |    expression
    ->   template() "not implemented: model_expression_element"
    |    ^(FOR_SINGLE_COLUMN column_name for_single_column_element for_like_part?)
    ->   template() "not implemented: model_expression_element"
    |    ^(FOR_MULTI_COLUMN column_name+ ^(SQL92_RESERVED_IN (subquery|expression_list+)))
    ->   template() "not implemented: model_expression_element"
    ;*/

for_single_column_element: SQL92_RESERVED_IN; /*
    :    ^(SQL92_RESERVED_IN expression_list)
    ->   template() "not implemented: for_single_column_element"
    |    ^(SQL92_RESERVED_FROM expression) 
    ->   template() "not implemented: for_single_column_element"
    |    ^(SQL92_RESERVED_TO expression) 
    ->   template() "not implemented: for_single_column_element"
    |    ^((INCREMENT_VK|DECREMENT_VK) expression) 
    ->   template() "not implemented: for_single_column_element"
    ;*/

for_like_part: SQL92_RESERVED_LIKE; /*
    :    ^(SQL92_RESERVED_LIKE expression)
    ->   template() "not implemented: for_like_part"
    ;*/

case_statement => case_statement_simple case_statement_searched;

case_statement_simple: SIMPLE_CASE expression case_when_part+ case_else_part?;
case_statement_searched: SEARCHED_CASE case_when_part+ case_else_part?;

// $<CASE - Specific Clauses

case_when_part: SQL92_RESERVED_WHEN {condition}=expression expression_or_seq_of_statements;

expression_or_seq_of_statements => expression seq_of_statements;

case_else_part: SQL92_RESERVED_ELSE expression_or_seq_of_statements;
// $>

standard_function => 
  standard_function_enabling_over standard_function_count
  standard_function_xmlcast standard_function_case
  standard_function_enabling_within_or_over standard_function_extract
  standard_function_translate standard_function_trim
  standard_function_xmlagg standard_function_xmlparse
  standard_function_root standard_function_table
  standard_function_xmlelement;

standard_function_enabling_over: FUNCTION_ENABLING_OVER {name}=@tokenText function_argument over_clause?;
standard_function_count: COUNT_VK SQL92_RESERVED_DISTINCT? SQL92_RESERVED_UNIQUE? SQL92_RESERVED_ALL? ASTERISK? expression? over_clause?;
standard_function_xmlcast: XMLCAST_VK expression type_spec;
standard_function_case: CAST_VK expression_or_subquery type_spec;
standard_function_enabling_within_or_over: FUNCTION_ENABLING_WITHIN_OR_OVER {name}=@tokenText
            function_argument within_clause? over_clause?;
standard_function_extract: EXTRACT_VK extract_part expression;
standard_function_translate: TRANSLATE_VK /*(CHAR_CS_VK|NCHAR_CS_VK)?*/ {expr}=expression {expr_from}=expression {expr_to}=expression;
standard_function_trim: TRIM_VK
            {text_expr}=expression_element
              {trim_char_expr}=expression_element?
              LEADING_VK?
              TRAILING_VK?
              BOTH_VK?;
standard_function_xmlagg: XMLAGG_VK expression order_by_clause?;
standard_function_xmlparse: XMLPARSE_VK xmlparse_document_or_content expression WELLFORMED_VK?;
xmlparse_document_or_content => xmlparse_document xmlparse_content;
xmlparse_document: DOCUMENT_VK;
xmlparse_content: CONTENT_VK;
standard_function_root: XMLROOT_VK expression xml_param_version_part xmlroot_param_standalone_part?;
standard_function_table: XMLTABLE_VK xml_namespaces_clause? expression xml_passing_clause? xml_table_column*;
standard_function_xmlelement: XMLELEMENT_VK ENTITYESCAPING_VK? NOENTITYESCAPING_VK?
            NAME_VK? EVALNAME_VK? expression
            xml_attributes_clause? xmlelement_value_expr*
    ;
    // TODO
    /*
    |    ^(FUNCTION_ENABLING_USING function_argument using_clause?)
    ->   template() "not implemented: standard_function"
    |    ^(CHR_VK expression NCHAR_CS_VK)
    ->   template() "not implemented: standard_function"
    |    ^(COLLECT_VK (SQL92_RESERVED_DISTINCT|SQL92_RESERVED_UNIQUE)? column_name collect_order_by_part?)
    ->   template() "not implemented: standard_function"
    |    ^(XMLPI_VK
                (    NAME_VK char_set_name? id
                |    EVALNAME_VK expression
                )
                expression?
        )
    ->   template() "not implemented: standard_function"
    |    ^(XMLSERIALIZE_VK
                (DOCUMENT_VK|CONTENT_VK)
                expression type_spec?
                xmlserialize_param_enconding_part?
                xml_param_version_part?
                xmlserialize_param_ident_part?
                ((HIDE_VK|SHOW_VK) DEFAULTS_VK)?
        )
    ->   template() "not implemented: standard_function"
    |    ^(XMLQUERY_VK expression xml_passing_clause? SQL92_RESERVED_NULL?)
    ->   template() "not implemented: standard_function"
    |    ^((XMLCOLATTVAL_VK|XMLFOREST_VK) xml_multiuse_expression_element+)
    ->   template() "not implemented: standard_function"
    |    ^(XMLEXISTS_VK expression xml_passing_clause?)
    ->   template() "not implemented: standard_function"
    |    ^(DECOMPOSE_VK expression (CANONICAL_VK|COMPATIBILITY_VK)?) 
    ->   template() "not implemented: standard_function"
    |    ^((FIRST_VALUE_VK|LAST_VALUE_VK) expression NULLS_VK? over_clause) 
    ->   template() "not implemented: standard_function"
    |    ^(PREDICTION_FUNCTION expression+ cost_matrix_clause? using_clause?)
    ->   template() "not implemented: standard_function"
    |    ^(TREAT_VK expression REF_VK? type_spec)
    ->   template() "not implemented: standard_function"
    */
extract_part =>
  extract_part_year
  extract_part_month
  extract_part_day
  extract_part_hour
  extract_part_minute
  extract_part_second
  extract_part_tzhour
  extract_part_tzminute
  extract_part_tzabbr
  extract_part_tz_region;

extract_part_year: YEAR_VK;
extract_part_month: MONTH_VK;
extract_part_day: DAY_VK;
extract_part_hour: HOUR_VK;
extract_part_minute: MINUTE_VK;
extract_part_second: SECOND_VK;
extract_part_tzhour: TIMEZONE_HOUR_VK;
extract_part_tzminute: TIMEZONE_MINUTE_VK;
extract_part_tzabbr: TIMEZONE_ABBR_VK;
extract_part_tz_region: TIMEZONE_REGION_VK;
    
xmlelement_value_expr => expression;
// TODO: fix AST
/*
xmlelement_value_expr    :   expression alias?
    ->  xmlelement_value_expr(expression={$expression.st}, alias={$alias.st})
    ;*/

over_clause: OVER_VK query_partition_clause? order_by_clause? windowing_clause?;

windowing_clause => windowing_clause_rows windowing_clause_range;
windowing_clause_rows: ROWS_VK windowing_clause_spec;
windowing_clause_range: RANGE_VK windowing_clause_spec;

windowing_clause_spec => windowing_clause_between windowing_elements ;
windowing_clause_between: SQL92_RESERVED_BETWEEN {e1}=windowing_elements {e2}=windowing_elements;

windowing_elements => windowing_elements_unbounded_preceding windowing_elements_current_row
  windowing_elements_preceding windowing_elements_following;

windowing_elements_unbounded_preceding: UNBOUNDED_VK PRECEDING_VK;
windowing_elements_current_row: CURRENT_VK ROW_VK;
windowing_elements_preceding: PRECEDING_VK expression;
windowing_elements_following: FOLLOWING_VK expression;

using_clause: PLSQL_NON_RESERVED_USING using_element+;

using_element => using_element_element using_element_asterisk;

using_element_element: ELEMENT SQL92_RESERVED_IN? OUT_VK? expression alias?;
using_element_asterisk: ASTERISK;

collect_order_by_part: SQL92_RESERVED_ORDER expression;

within_clause: WITHIN_VK order_by_clause;

cost_matrix_clause: COST_VK; /*
    :    ^(COST_VK
            (    PLSQL_NON_RESERVED_MODEL AUTO_VK?
            |    cost_class_name+ expression_list
            )
        )
    ->   template() "not implemented: cost_matrix_clause"
    ;*/

xml_passing_clause: PASSING_VK VALUE_VK? xml_passing_clause_expr;
    
xml_passing_clause_expr => expression;

// TODO fix ast
/*
xml_passing_clause_expr
    :   expression alias?
    ->  xml_passing_clause_expr(expression={$expression.st}, alias={$alias.st})
    ;
    */

xml_attributes_clause: XMLATTRIBUTES_VK
            ENTITYESCAPING_VK? NOENTITYESCAPING_VK?
            SCHEMACHECK_VK? NOSCHEMACHECK_VK?
            xml_multiuse_expression_element+;

xml_namespaces_clause: XMLNAMESPACES_VK; /*
    :    ^(XMLNAMESPACES_VK
            (expression alias?)* xml_general_default_part?
        )
    ->   template() "not implemented: xml_namespaces_clause"
    ;*/

xml_table_column: XML_COLUMN xml_column_name ORDINALITY_VK? type_spec? expression? xml_general_default_part?;

xml_general_default_part: SQL92_RESERVED_DEFAULT expression;

xml_multiuse_expression_element: XML_ELEMENT expression xml_alias?;

xml_alias: XML_ALIAS id_or_evalname;
    
id_or_evalname => id xml_alias_evalname;
  
xml_alias_evalname: EVALNAME_VK expression;

xml_param_version_part: VERSION_VK NO_VK? VALUE_VK? expression?;

xmlroot_param_standalone_part: STANDALONE_VK YES_VK? NO_VK? VALUE_VK?;

xmlserialize_param_enconding_part: ENCODING_VK expression;

xmlserialize_param_ident_part: INDENT_VK; /*
    :    NO_VK INDENT_VK
    ->   template() "not implemented: xmlserialize_param_ident_part"
    |    ^(INDENT_VK expression?)
    ->   template() "not implemented: xmlserialize_param_ident_part"
    ;*/

// $>

// $<Common SQL PL/SQL Clauses/Parts

partition_extension_clause: PARTITION_VK; /*
    :    ^((SUBPARTITION_VK|PARTITION_VK) expression_list)
    ->   template() "not implemented: partition_extension_clause"
    ;*/

alias => column_alias table_alias;
column_alias: COLUMN_ALIAS char_set_name? id;
table_alias: TABLE_ALIAS char_set_name? id;

where_clause: SQL92_RESERVED_WHERE expression;

into_clause => into_clause_normal into_clause_bulk;

into_clause_normal: SQL92_RESERVED_INTO general_element+;
into_clause_bulk: BULK_VK general_element+;

// $>

// $<Common PL/SQL Named Elements

xml_column_name: XML_COLUMN_NAME char_set_name? id;
cost_class_name: COST_CLASS_NAME char_set_name? id;
attribute_name: ATTRIBUTE_NAME char_set_name? id;
savepoint_name: SAVEPOINT_NAME char_set_name? id;
rollback_segment_name: ROLLBACK_SEGMENT_NAME char_set_name? id;
table_var_name: TABLE_VAR_NAME char_set_name? id;
schema_name: SCHEMA_NAME char_set_name? id;
routine_name: ROUTINE_NAME char_set_name? id+ link_name?;
package_name: PACKAGE_NAME char_set_name? id+;
implementation_type_name: IMPLEMENTATION_TYPE_NAME char_set_name? id+;
parameter_name: PARAMETER_NAME char_set_name? id;
reference_model_name: REFERENCE_MODEL_NAME char_set_name? id;
main_model_name: MAIN_MODEL_NAME char_set_name? id;
query_name: QUERY_NAME char_set_name? id;
constraint_name: CONSTRAINT_NAME char_set_name? id+ link_name?;
label_name: LABEL_NAME id;
type_name: TYPE_NAME id+;
sequence_name: SEQUENCE_NAME id+;
exception_name: EXCEPTION_NAME char_set_name? id+;
function_name: FUNCTION_NAME char_set_name? id+;
procedure_name: PROCEDURE_NAME char_set_name? id+;
trigger_name: TRIGGER_NAME char_set_name? id+;
hosted_variable_name: HOSTED_VARIABLE_NAME BINDVAR? UNSIGNED_INTEGER?;
variable_name: VARIABLE_NAME char_set_name? id+;
index_name: INDEX_NAME char_set_name? id;
cursor_name: CURSOR_NAME char_set_name? id;
record_name: RECORD_NAME char_set_name? id;
collection_name: COLLECTION_NAME char_set_name? id+;
link_name: LINK_NAME char_set_name? id;
column_name: COLUMN_NAME char_set_name? id+;
tableview_name: TABLEVIEW_NAME char_set_name? id+ link_name? partition_extension_clause?;
char_set_name: CHAR_SET_NAME id+;

// $>

// $<Common PL/SQL Specs

function_argument: ARGUMENTS argument*;
argument: ARGUMENT expression parameter_name?;

type_spec => type_spec_custom native_datatype_spec type_spec_interval;

type_spec_custom: CUSTOM_TYPE type_name REF_VK? percent_type_or_rowtype?;
type_spec_interval: INTERVAL_DATATYPE interval_type_spec_first interval_type_spec_second;

interval_type_spec_first => interval_type_spec_first_year interval_type_spec_first_day;
interval_type_spec_first_year: YEAR_VK expression?;
interval_type_spec_first_day: DAY_VK expression?;

interval_type_spec_second => interval_type_spec_second_month interval_type_spec_second_second;
interval_type_spec_second_month: MONTH_VK expression?;
interval_type_spec_second_second: SECOND_VK expression?;


type_precision: PRECISION {size1}=constant {size2}=constant? CHAR_VK? BYTE_VK?;
native_datatype_spec: NATIVE_DATATYPE {name}=@any type_precision? TIME_VK? LOCAL_VK?;
    /*(    BFILE_VK { typeBaseName = "bfile"; }
    |    BINARY_FLOAT_VK { typeBaseName = "binary_float"; }
    |    BINARY_INTEGER_VK { typeBaseName = "binary_integer"; }
    |    BLOB_VK { typeBaseName = "blob"; }
    |    BOOLEAN_VK { typeBaseName = "boolean"; }
    |    CHARACTER_VK  { typeBaseName = "character"; }
    |    CHAR_VK { typeBaseName = "char"; }
    |    CLOB_VK { typeBaseName = "clob"; }
    |    DATE_VK { typeBaseName = "date"; }
    |    SQL92_RESERVED_DATE { typeBaseName = "date"; }
    |    DAY_VK
    |    DECIMAL_VK  { typeBaseName = "decimal"; }
    |    DEC_VK { typeBaseName = "dec"; }
    |    DOUBLE_VK { typeBaseName = "double"; }

    |    DSINTERVAL_UNCONSTRAINED_VK
    |    FLOAT_VK { typeBaseName = "float"; }
    |    HOUR_VK
    |    INTEGER_VK { typeBaseName = "integer"; }
    |    INT_VK { typeBaseName = "int"; }
    |    LONG_VK { typeBaseName = "long"; }
    |    LONG_RAW { typeBaseName = "long raw"; }
    |    MINUTE_VK
    |    MLSLABEL_VK
    |    MONTH_VK
    |    NATURALN_VK
    |    NATURAL_VK
    |    NCHAR_VK { typeBaseName = "nchar"; }
    |    NCLOB_VK { typeBaseName = "nclob"; }
    |    NUMBER_VK { typeBaseName = "number"; }
    |    NUMERIC_VK { typeBaseName = "numeric"; }
    |    NVARCHAR2_VK { typeBaseName = "nvarchar2"; }
    |    PLS_INTEGER_VK { typeBaseName = "pls_integer"; }
    |    POSITIVEN_VK
    |    POSITIVE_VK
    |    RAW_VK { typeBaseName = "raw"; }
    |    REAL_VK
    |    ROWID_VK { typeBaseName = "rowid"; }
    |    SECOND_VK
    |    SIGNTYPE_VK
    |    SIMPLE_INTEGER_VK
    |    SMALLINT_VK { typeBaseName = "smallint"; }
    |    STRING_VK
    |    TIMESTAMP_LTZ_UNCONSTRAINED_VK
    |    TIMESTAMP_TZ_UNCONSTRAINED_VK
    |    TIMESTAMP_UNCONSTRAINED_VK
    |    TIMESTAMP_VK { typeBaseName = "timestamp"; }
    |    TIMEZONE_ABBR_VK
    |    TIMEZONE_HOUR_VK
    |    TIMEZONE_MINUTE_VK
    |    TIMEZONE_REGION_VK
    |    UROWID_VK { typeBaseName = "urowid"; }
    |    VARCHAR2_VK { typeBaseName = "varchar2"; }
    |    VARCHAR_VK { typeBaseName = "varchar"; }
    |    YEAR_VK
    |    YMINTERVAL_UNCONSTRAINED_VK)*/

general_element: CASCATED_ELEMENT general_element_item+;
    
general_element_item => general_element_id function_argument;
 
general_element_id: ANY_ELEMENT id;

// $>

// $<Lexer Mappings

constant => 
  constant_unsigned
  constant_negated
  constant_exact_num
  constant_approx_num
  constant_char_string
  constant_null
  constant_true
  constant_false
  constant_dbtimezone
  constant_sessiontimezone
  constant_minvalue
  constant_maxvalue
  constant_default;

constant_unsigned: UNSIGNED_INTEGER {value}=@tokenText;
constant_negated: CONSTANT_NEGATED constant_unsigned;
constant_exact_num: EXACT_NUM_LIT {value}=@tokenText;
constant_approx_num: APPROXIMATE_NUM_LIT {value}=@tokenText;
constant_char_string: CHAR_STRING {value}=@tokenText;
constant_null: SQL92_RESERVED_NULL;
constant_true: SQL92_RESERVED_TRUE;
constant_false: SQL92_RESERVED_FALSE;
constant_dbtimezone: DBTIMEZONE_VK;
constant_sessiontimezone: SESSIONTIMEZONE_VK;
constant_minvalue: MINVALUE_VK;
constant_maxvalue: MAXVALUE_VK;
constant_default: SQL92_RESERVED_DEFAULT;
    
// $>

id: ID {value}=@tokenText;
