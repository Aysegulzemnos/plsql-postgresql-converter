// $ANTLR 3.5.2 PLSQLPrinter.g 2014-09-10 15:49:57

/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2014 Bars Group
 */
package parser;


import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.stringtemplate.*;
import org.antlr.stringtemplate.language.*;
import java.util.HashMap;
/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2014 Bars Group
 */
@SuppressWarnings("all")
public class PLSQLPrinter extends TreeParser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "AMPERSAND", "APPROXIMATE_NUM_LIT", 
		"ASSIGN_OP", "ASTERISK", "AT_SIGN", "B", "BINDVAR", "BIT_STRING_LIT", 
		"C", "CARRET_OPERATOR_PART", "CHAR_STRING", "CHAR_STRING_PERL", "COLON", 
		"COMMA", "COMMENT", "CONCATENATION_OP", "D", "DELIMITED_ID", "DOUBLE_ASTERISK", 
		"DOUBLE_PERIOD", "E", "EQUALS_OP", "EXACT_NUM_LIT", "EXCLAMATION_OPERATOR_PART", 
		"F", "G", "GREATER_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "H", "HEX_STRING_LIT", 
		"I", "INTRODUCER", "J", "K", "L", "LEFT_BRACKET", "LEFT_PAREN", "LESS_THAN_OP", 
		"LESS_THAN_OR_EQUALS_OP", "M", "MINUS_SIGN", "N", "NATIONAL_CHAR_STRING_LIT", 
		"NEWLINE", "NOT_EQUAL_OP", "O", "P", "PERCENT", "PERIOD", "PLSQL_NON_RESERVED_CONNECT_BY_ROOT", 
		"PLSQL_NON_RESERVED_ELSIF", "PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_PIVOT", 
		"PLSQL_NON_RESERVED_UNPIVOT", "PLSQL_NON_RESERVED_USING", "PLSQL_RESERVED_CLUSTERS", 
		"PLSQL_RESERVED_COLAUTH", "PLSQL_RESERVED_COMPRESS", "PLSQL_RESERVED_CRASH", 
		"PLSQL_RESERVED_EXCLUSIVE", "PLSQL_RESERVED_IDENTIFIED", "PLSQL_RESERVED_IF", 
		"PLSQL_RESERVED_INDEX", "PLSQL_RESERVED_INDEXES", "PLSQL_RESERVED_LOCK", 
		"PLSQL_RESERVED_MINUS", "PLSQL_RESERVED_MODE", "PLSQL_RESERVED_NOCOMPRESS", 
		"PLSQL_RESERVED_NOWAIT", "PLSQL_RESERVED_RESOURCE", "PLSQL_RESERVED_SHARE", 
		"PLSQL_RESERVED_START", "PLSQL_RESERVED_TABAUTH", "PLSQL_RESERVED_VIEWS", 
		"PLUS_SIGN", "PROMPT", "Q", "QS_ANGLE", "QS_BRACE", "QS_BRACK", "QS_OTHER", 
		"QS_OTHER_CH", "QS_PAREN", "QUESTION_MARK", "QUOTE", "R", "REGULAR_ID", 
		"RIGHT_BRACKET", "RIGHT_PAREN", "S", "SEMICOLON", "SEPARATOR", "SIMPLE_LETTER", 
		"SOLIDUS", "SPACE", "SQL92_RESERVED_ALL", "SQL92_RESERVED_ALTER", "SQL92_RESERVED_AND", 
		"SQL92_RESERVED_ANY", "SQL92_RESERVED_AS", "SQL92_RESERVED_ASC", "SQL92_RESERVED_BEGIN", 
		"SQL92_RESERVED_BETWEEN", "SQL92_RESERVED_BY", "SQL92_RESERVED_CASE", 
		"SQL92_RESERVED_CHECK", "SQL92_RESERVED_CONNECT", "SQL92_RESERVED_CREATE", 
		"SQL92_RESERVED_CURRENT", "SQL92_RESERVED_CURSOR", "SQL92_RESERVED_DATE", 
		"SQL92_RESERVED_DECLARE", "SQL92_RESERVED_DEFAULT", "SQL92_RESERVED_DELETE", 
		"SQL92_RESERVED_DESC", "SQL92_RESERVED_DISTINCT", "SQL92_RESERVED_DROP", 
		"SQL92_RESERVED_ELSE", "SQL92_RESERVED_END", "SQL92_RESERVED_EXCEPTION", 
		"SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE", "SQL92_RESERVED_FETCH", 
		"SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", "SQL92_RESERVED_GOTO", "SQL92_RESERVED_GRANT", 
		"SQL92_RESERVED_GROUP", "SQL92_RESERVED_HAVING", "SQL92_RESERVED_IN", 
		"SQL92_RESERVED_INSERT", "SQL92_RESERVED_INTERSECT", "SQL92_RESERVED_INTO", 
		"SQL92_RESERVED_IS", "SQL92_RESERVED_LIKE", "SQL92_RESERVED_NOT", "SQL92_RESERVED_NULL", 
		"SQL92_RESERVED_OF", "SQL92_RESERVED_ON", "SQL92_RESERVED_OPTION", "SQL92_RESERVED_OR", 
		"SQL92_RESERVED_ORDER", "SQL92_RESERVED_OVERLAPS", "SQL92_RESERVED_PRIOR", 
		"SQL92_RESERVED_PROCEDURE", "SQL92_RESERVED_PUBLIC", "SQL92_RESERVED_REVOKE", 
		"SQL92_RESERVED_SELECT", "SQL92_RESERVED_SIZE", "SQL92_RESERVED_TABLE", 
		"SQL92_RESERVED_THE", "SQL92_RESERVED_THEN", "SQL92_RESERVED_TO", "SQL92_RESERVED_TRUE", 
		"SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", "SQL92_RESERVED_UPDATE", 
		"SQL92_RESERVED_VALUES", "SQL92_RESERVED_VIEW", "SQL92_RESERVED_WHEN", 
		"SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH", "T", "TILDE_OPERATOR_PART", 
		"U", "UNDERSCORE", "UNSIGNED_INTEGER", "V", "VERTICAL_BAR", "W", "X", 
		"Y", "Z", "ZV", "ADD_VK", "AFTER_EACH_ROW", "AFTER_STATEMENT", "AFTER_VK", 
		"AGENT_VK", "AGGREGATE_VK", "ALIAS", "ALTER_ATTRIBUTE", "ALTER_COLLECTION", 
		"ALTER_FUNCTION", "ALTER_METHOD", "ALTER_METHOD_ELEMENT", "ALTER_PACKAGE", 
		"ALTER_PROCEDURE", "ALTER_SEQUENCE", "ALTER_TRIGGER", "ALTER_TYPE", "ANALYZE_VK", 
		"ANY_ELEMENT", "ANY_MODE", "ARGUMENT", "ARGUMENTS", "ASSIGN", "ASSOCIATE_VK", 
		"ATTRIBUTE", "ATTRIBUTES", "ATTRIBUTE_NAME", "AT_VK", "AUDIT_VK", "AUTHID_VK", 
		"AUTOMATIC_VK", "AUTONOMOUS_TRANSACTION_VK", "AUTO_VK", "BATCH_VK", "BEFORE_EACH_ROW", 
		"BEFORE_STATEMENT", "BEFORE_VK", "BFILE_VK", "BINARY_DOUBLE_VK", "BINARY_FLOAT_VK", 
		"BINARY_INTEGER_VK", "BIT_VK", "BLOB_VK", "BLOCK", "BLOCK_VK", "BODY", 
		"BODY_MODE", "BODY_VK", "BOOLEAN_VK", "BOTH_VK", "BREADTH_VK", "BULK_VK", 
		"BYTE_VK", "CACHE_VK", "CALL_MODE", "CALL_VK", "CANONICAL_VK", "CASCADE_VK", 
		"CASCATED_ELEMENT", "CAST_VK", "CHARACTER_VK", "CHAR_CS_VK", "CHAR_SET_NAME", 
		"CHAR_VK", "CHR_VK", "CLOB_VK", "CLOSE_VK", "CLUSTER_VK", "COLLECTION_MODE", 
		"COLLECTION_NAME", "COLLECT_VK", "COLUMNS", "COLUMN_NAME", "COMMENT_VK", 
		"COMMITTED_VK", "COMMIT_VK", "COMPATIBILITY_VK", "COMPILATION_UNIT", "COMPILER_PARAMETER", 
		"COMPILE_VK", "COMPOUND_DML", "COMPOUND_VK", "CONDITIONAL_INSERT", "CONSTANT_VK", 
		"CONSTRAINT_NAME", "CONSTRUCTOR_SPEC", "CONSTRUCTOR_VK", "CONTENT_VK", 
		"CONTEXT_VK", "CONTINUE_VK", "CONVERT_VK", "CORRUPT_XID_ALL_VK", "CORRUPT_XID_VK", 
		"COST_CLASS_NAME", "COST_VK", "COUNT_VK", "CREATE_FUNCTION", "CREATE_PACKAGE_BODY", 
		"CREATE_PACKAGE_SPEC", "CREATE_PROCEDURE", "CREATE_SEQUENCE", "CREATE_TRIGGER", 
		"CREATE_TYPE_BODY", "CREATE_TYPE_SPEC", "CROSS_VK", "CUBE_VK", "CURRENT_USER_VK", 
		"CURRENT_VK", "CURSOR_BASED_FOR", "CURSOR_DECLARE", "CURSOR_NAME", "CUSTOMDATUM_VK", 
		"CUSTOM_TYPE", "CYCLE_VK", "C_VK", "DATABASE_VK", "DATETIME_OP", "DAY_VK", 
		"DBTIMEZONE_VK", "DB_ROLE_CHANGE_VK", "DDL_VK", "DEBUG_VK", "DECIMAL_VK", 
		"DECOMPOSE_VK", "DECREMENT_VK", "DEC_VK", "DEFAULTS_VK", "DEFAULT_VALUE", 
		"DEFERRED_VK", "DEFINER_VK", "DENSE_RANK_VK", "DEPENDENT_HANDLING", "DEPTH_VK", 
		"DETERMINISTIC_VK", "DIMENSION_VK", "DIRECT_MODE", "DISABLE_VK", "DISASSOCIATE_VK", 
		"DIV_VK", "DML_EVENT", "DML_EVENT_ELEMENT", "DOCUMENT_VK", "DOT_ASTERISK", 
		"DOUBLE_VK", "DROP_FUNCTION", "DROP_PACKAGE", "DROP_PROCEDURE", "DROP_SEQUENCE", 
		"DROP_TRIGGER", "DROP_TYPE", "DSINTERVAL_UNCONSTRAINED_VK", "DYNAMIC_RETURN", 
		"ELEMENT", "ELEMENTS_MODE", "ELEMENT_SPEC", "ENABLE_VK", "ENCODING_VK", 
		"ENTITYESCAPING_VK", "EVALNAME_VK", "EXCEPTIONS_VK", "EXCEPTION_DECLARE", 
		"EXCEPTION_INIT_VK", "EXCEPTION_NAME", "EXCLUDE_VK", "EXECUTE_VK", "EXIT_VK", 
		"EXPLAIN_STATEMENT", "EXPR", "EXPR_LIST", "EXTERNAL_MODE", "EXTERNAL_VK", 
		"EXTRACT_VK", "FACTORING", "FIELDS", "FIELD_SPEC", "FINAL_VK", "FIRST_VALUE_VK", 
		"FIRST_VK", "FLOAT_VK", "FOLLOWING_VK", "FOLLOWS_VK", "FORALL_VK", "FORCE_VK", 
		"FOR_EACH_ROW", "FOR_LOOP", "FOR_MULTI_COLUMN", "FOR_SINGLE_COLUMN", "FULL_VK", 
		"FUNCTION_ENABLING_OVER", "FUNCTION_ENABLING_USING", "FUNCTION_ENABLING_WITHIN_OR_OVER", 
		"FUNCTION_NAME", "FUNCTION_SPEC", "GROUPING_VK", "GROUPIN_SET", "GROUP_BY_ELEMENT", 
		"HASH_VK", "HIDE_VK", "HIERARCHICAL", "HOSTED_VARIABLE", "HOSTED_VARIABLE_NAME", 
		"HOSTED_VARIABLE_ROUTINE_CALL", "HOUR_VK", "ID", "IGNORE_VK", "IMMEDIATE_VK", 
		"IMPLEMENTATION_TYPE_NAME", "INCLUDE_VK", "INCLUDING_VK", "INCREMENT_VK", 
		"INDENT_VK", "INDEXED_BY", "INDEXED_FOR", "INDEX_NAME", "INDICES_BOUND", 
		"INLINE_VK", "INNER_VK", "INOUT_VK", "INSTANTIABLE_VK", "INSTEAD_VK", 
		"INTEGER_VK", "INTERVAL_DATATYPE", "INT_VK", "INVALIDATE_VK", "ISOLATION_VK", 
		"IS_A_SET", "IS_EMPTY", "IS_INFINITE", "IS_NAN", "IS_NOT_A_SET", "IS_NOT_EMPTY", 
		"IS_NOT_INFINITE", "IS_NOT_NAN", "IS_NOT_NULL", "IS_NOT_OF_TYPE", "IS_NOT_PRESENT", 
		"IS_NULL", "IS_OF_TYPE", "IS_PRESENT", "ITERATE_VK", "JAVA_VK", "JOIN_DEF", 
		"KEEP_VK", "LABEL_DECLARE", "LABEL_NAME", "LANGUAGE_VK", "LAST_VALUE_VK", 
		"LAST_VK", "LEADING_VK", "LEFT_VK", "LIBRARY_VK", "LIKE2_VK", "LIKE4_VK", 
		"LIKEC_VK", "LIMIT_VK", "LINK_NAME", "LOCAL_VK", "LOCK_TABLE_ELEMENT", 
		"LOGIC_EXPR", "LOGOFF_VK", "LOGON_VK", "LOG_VK", "LONG_VK", "LOOP_VK", 
		"MAIN_MODEL", "MAIN_MODEL_NAME", "MAP_VK", "MAXVALUE_VK", "MEASURES_VK", 
		"MEMBER_VK", "MERGE_INSERT", "MERGE_UPDATE", "MERGE_VK", "MINUTE_VK", 
		"MINVALUE_VK", "MLSLABEL_VK", "MODEL_COLUMN", "MODEL_COLUMNS", "MODEL_EXPRESSION", 
		"MODEL_RULE", "MODEL_RULES", "MODIFIER", "MODIFY_VK", "MOD_VK", "MONTH_VK", 
		"MULTI_TABLE_MODE", "NAME_VK", "NATIVE_DATATYPE", "NATURALN_VK", "NATURAL_VK", 
		"NAV_VK", "NCHAR_CS_VK", "NCHAR_VK", "NCLOB_VK", "NESTED_TABLE_TYPE_DEF", 
		"NESTED_VK", "NEW_VK", "NOAUDIT_VK", "NOCACHE_VK", "NOCOPY_VK", "NOCYCLE_VK", 
		"NOENTITYESCAPING_VK", "NOMAXVALUE_VK", "NOMINVALUE_VK", "NON_DML", "NOORDER_VK", 
		"NOSCHEMACHECK_VK", "NOT_BETWEEN", "NOT_IN", "NOT_LIKE", "NO_VK", "NULLS_VK", 
		"NUMBER_VK", "NUMERIC_VK", "NVARCHAR2_VK", "OBJECT_AS", "OBJECT_MEMBERS", 
		"OBJECT_TYPE_DEF", "OBJECT_VK", "OFF_VK", "OLD_VK", "ONLY_VK", "OPEN_VK", 
		"ORADATA_VK", "ORDER_BY_ELEMENT", "ORDER_BY_ELEMENTS", "ORDINALITY_VK", 
		"OUTER_JOIN_SIGN", "OUT_VK", "OVERRIDING_VK", "OVER_VK", "PACKAGE_NAME", 
		"PACKAGE_VK", "PARALLEL_ENABLE_VK", "PARAMETER", "PARAMETERS", "PARAMETERS_VK", 
		"PARAMETER_NAME", "PARENT_VK", "PARTITION_VK", "PASSING_VK", "PERCENT_FOUND_VK", 
		"PERCENT_ISOPEN_VK", "PERCENT_NOTFOUND_VK", "PERCENT_ROWCOUNT_VK", "PERCENT_ROWTYPE_VK", 
		"PERCENT_TYPE_VK", "PIPELINED_VK", "PIPE_ROW", "PIPE_VK", "PIVOT_ALIAS", 
		"PIVOT_ELEMENT", "PIVOT_IN_ELEMENT", "PIVOT_VK", "PLS_INTEGER_VK", "POSITIVEN_VK", 
		"POSITIVE_VK", "PRAGMA_DECLARE", "PRAGMA_VK", "PRECEDING_VK", "PRECISION", 
		"PRECISION_VK", "PREDICTION_FUNCTION", "PROCEDURE_NAME", "PROCEDURE_SPEC", 
		"QUERY_NAME", "RAISE_VK", "RANGE_VK", "RAW_VK", "READ_VK", "REAL_VK", 
		"RECORD_NAME", "RECORD_TYPE_DECLARE", "RECORD_VAR_DECLARE", "REFERENCE_MODEL_NAME", 
		"REFERENCE_VK", "REFERENCING_VK", "REF_VK", "REJECT_VK", "RELIES_ON_VK", 
		"RENAME_VK", "REPLACE_VK", "RESPECT_VK", "RESTRICT_REFERENCES_VK", "RESULT_CACHE_VK", 
		"RETURN_VK", "REUSE_VK", "REVERSE_VK", "RIGHT_VK", "ROLLBACK_SEGMENT_NAME", 
		"ROLLBACK_VK", "ROLLUP_VK", "ROUTINE_CALL", "ROUTINE_NAME", "ROWID_VK", 
		"ROWS_VK", "ROW_VK", "RULES_VK", "SAMPLE_VK", "SAVEPOINT_NAME", "SAVEPOINT_VK", 
		"SCHEMACHECK_VK", "SCHEMA_NAME", "SCHEMA_VK", "SCN_VK", "SEARCHED_CASE", 
		"SEARCH_VK", "SECOND_VK", "SEED_VK", "SELECTED_TABLEVIEW", "SELECT_BASED_FOR", 
		"SELECT_ITEM", "SELECT_LIST", "SELECT_MODE", "SELECT_STATEMENT", "SELF_VK", 
		"SEQUENCE_NAME", "SEQUENCE_VK", "SEQUENTIAL_VK", "SERIALIZABLE_VK", "SERIALLY_REUSABLE_VK", 
		"SERVERERROR_VK", "SESSIONTIMEZONE_VK", "SET_CONSTRAINT", "SET_SERVEROUTPUT", 
		"SET_TRANSACTION", "SET_VK", "SHOW_VK", "SHUTDOWN_VK", "SIBLINGS_VK", 
		"SIGNTYPE_VK", "SIMPLE_BOUND", "SIMPLE_CASE", "SIMPLE_DML", "SIMPLE_INTEGER_VK", 
		"SINGLE_TABLE_MODE", "SINGLE_VK", "SKIP_VK", "SMALLINT_VK", "SOME_VK", 
		"SPECIFICATION_VK", "SQLDATA_VK", "SQL_SCRIPT", "STANDALONE_VK", "STANDARD_FUNCTION", 
		"STARTUP_VK", "STATEMENTS", "STATIC_RETURNING", "STATIC_VK", "STATISTICS_VK", 
		"STREAMING_CLAUSE", "STRING_VK", "SUBMULTISET_VK", "SUBPARTITION_VK", 
		"SUBQUERY", "SUBTYPE_DECLARE", "SUSPEND_VK", "TABLEVIEW_NAME", "TABLE_ELEMENT", 
		"TABLE_EXPRESSION", "TABLE_REF", "TABLE_REF_ELEMENT", "TABLE_TYPE_DECLARE", 
		"TABLE_VAR_DECLARE", "TABLE_VAR_NAME", "THREE_DOTS", "TIMESTAMP_LTZ_UNCONSTRAINED_VK", 
		"TIMESTAMP_TZ_UNCONSTRAINED_VK", "TIMESTAMP_UNCONSTRAINED_VK", "TIMESTAMP_VK", 
		"TIMEZONE_ABBR_VK", "TIMEZONE_HOUR_VK", "TIMEZONE_MINUTE_VK", "TIMEZONE_REGION_VK", 
		"TIME_VK", "TRAILING_VK", "TRANSLATE_VK", "TREAT_VK", "TRIGGER_NAME", 
		"TRIM_VK", "TRUNCATE_VK", "TYPE_BODY_ELEMENTS", "TYPE_NAME", "TYPE_VK", 
		"UNARY_OPERATOR", "UNBOUNDED_VK", "UNDER_VK", "UNLIMITED_VK", "UNPIVOT_IN_ELEMENT", 
		"UNPIVOT_VK", "UNTIL_VK", "UPDATED_VK", "UPSERT_VK", "UROWID_VK", "USING_MODE", 
		"VALIDATE_VK", "VALUES_BOUND", "VALUE_VK", "VARCHAR2_VK", "VARCHAR_VK", 
		"VARIABLE_DECLARE", "VARIABLE_NAME", "VARR_ARRAY_DEF", "VECTOR_EXPR", 
		"VERSIONS_VK", "VERSION_VK", "WAIT_VK", "WELLFORMED_VK", "WHILE_LOOP", 
		"WITHIN_VK", "WORK_VK", "WRITE_VK", "XMLAGG_VK", "XMLATTRIBUTES_VK", "XMLCAST_VK", 
		"XMLCOLATTVAL_VK", "XMLELEMENT_VK", "XMLEXISTS_VK", "XMLFOREST_VK", "XMLNAMESPACES_VK", 
		"XMLPARSE_VK", "XMLPI_VK", "XMLQUERY_VK", "XMLROOT_VK", "XMLSERIALIZE_VK", 
		"XMLTABLE_VK", "XML_ALIAS", "XML_COLUMN", "XML_COLUMN_NAME", "XML_ELEMENT", 
		"XML_VK", "YEAR_VK", "YES_VK", "YMINTERVAL_UNCONSTRAINED_VK", "DATE_VK", 
		"ORDER_VK", "START_VK"
	};
	public static final int EOF=-1;
	public static final int A=4;
	public static final int AMPERSAND=5;
	public static final int APPROXIMATE_NUM_LIT=6;
	public static final int ASSIGN_OP=7;
	public static final int ASTERISK=8;
	public static final int AT_SIGN=9;
	public static final int B=10;
	public static final int BINDVAR=11;
	public static final int BIT_STRING_LIT=12;
	public static final int C=13;
	public static final int CARRET_OPERATOR_PART=14;
	public static final int CHAR_STRING=15;
	public static final int CHAR_STRING_PERL=16;
	public static final int COLON=17;
	public static final int COMMA=18;
	public static final int COMMENT=19;
	public static final int CONCATENATION_OP=20;
	public static final int D=21;
	public static final int DELIMITED_ID=22;
	public static final int DOUBLE_ASTERISK=23;
	public static final int DOUBLE_PERIOD=24;
	public static final int E=25;
	public static final int EQUALS_OP=26;
	public static final int EXACT_NUM_LIT=27;
	public static final int EXCLAMATION_OPERATOR_PART=28;
	public static final int F=29;
	public static final int G=30;
	public static final int GREATER_THAN_OP=31;
	public static final int GREATER_THAN_OR_EQUALS_OP=32;
	public static final int H=33;
	public static final int HEX_STRING_LIT=34;
	public static final int I=35;
	public static final int INTRODUCER=36;
	public static final int J=37;
	public static final int K=38;
	public static final int L=39;
	public static final int LEFT_BRACKET=40;
	public static final int LEFT_PAREN=41;
	public static final int LESS_THAN_OP=42;
	public static final int LESS_THAN_OR_EQUALS_OP=43;
	public static final int M=44;
	public static final int MINUS_SIGN=45;
	public static final int N=46;
	public static final int NATIONAL_CHAR_STRING_LIT=47;
	public static final int NEWLINE=48;
	public static final int NOT_EQUAL_OP=49;
	public static final int O=50;
	public static final int P=51;
	public static final int PERCENT=52;
	public static final int PERIOD=53;
	public static final int PLSQL_NON_RESERVED_CONNECT_BY_ROOT=54;
	public static final int PLSQL_NON_RESERVED_ELSIF=55;
	public static final int PLSQL_NON_RESERVED_MODEL=56;
	public static final int PLSQL_NON_RESERVED_PIVOT=57;
	public static final int PLSQL_NON_RESERVED_UNPIVOT=58;
	public static final int PLSQL_NON_RESERVED_USING=59;
	public static final int PLSQL_RESERVED_CLUSTERS=60;
	public static final int PLSQL_RESERVED_COLAUTH=61;
	public static final int PLSQL_RESERVED_COMPRESS=62;
	public static final int PLSQL_RESERVED_CRASH=63;
	public static final int PLSQL_RESERVED_EXCLUSIVE=64;
	public static final int PLSQL_RESERVED_IDENTIFIED=65;
	public static final int PLSQL_RESERVED_IF=66;
	public static final int PLSQL_RESERVED_INDEX=67;
	public static final int PLSQL_RESERVED_INDEXES=68;
	public static final int PLSQL_RESERVED_LOCK=69;
	public static final int PLSQL_RESERVED_MINUS=70;
	public static final int PLSQL_RESERVED_MODE=71;
	public static final int PLSQL_RESERVED_NOCOMPRESS=72;
	public static final int PLSQL_RESERVED_NOWAIT=73;
	public static final int PLSQL_RESERVED_RESOURCE=74;
	public static final int PLSQL_RESERVED_SHARE=75;
	public static final int PLSQL_RESERVED_START=76;
	public static final int PLSQL_RESERVED_TABAUTH=77;
	public static final int PLSQL_RESERVED_VIEWS=78;
	public static final int PLUS_SIGN=79;
	public static final int PROMPT=80;
	public static final int Q=81;
	public static final int QS_ANGLE=82;
	public static final int QS_BRACE=83;
	public static final int QS_BRACK=84;
	public static final int QS_OTHER=85;
	public static final int QS_OTHER_CH=86;
	public static final int QS_PAREN=87;
	public static final int QUESTION_MARK=88;
	public static final int QUOTE=89;
	public static final int R=90;
	public static final int REGULAR_ID=91;
	public static final int RIGHT_BRACKET=92;
	public static final int RIGHT_PAREN=93;
	public static final int S=94;
	public static final int SEMICOLON=95;
	public static final int SEPARATOR=96;
	public static final int SIMPLE_LETTER=97;
	public static final int SOLIDUS=98;
	public static final int SPACE=99;
	public static final int SQL92_RESERVED_ALL=100;
	public static final int SQL92_RESERVED_ALTER=101;
	public static final int SQL92_RESERVED_AND=102;
	public static final int SQL92_RESERVED_ANY=103;
	public static final int SQL92_RESERVED_AS=104;
	public static final int SQL92_RESERVED_ASC=105;
	public static final int SQL92_RESERVED_BEGIN=106;
	public static final int SQL92_RESERVED_BETWEEN=107;
	public static final int SQL92_RESERVED_BY=108;
	public static final int SQL92_RESERVED_CASE=109;
	public static final int SQL92_RESERVED_CHECK=110;
	public static final int SQL92_RESERVED_CONNECT=111;
	public static final int SQL92_RESERVED_CREATE=112;
	public static final int SQL92_RESERVED_CURRENT=113;
	public static final int SQL92_RESERVED_CURSOR=114;
	public static final int SQL92_RESERVED_DATE=115;
	public static final int SQL92_RESERVED_DECLARE=116;
	public static final int SQL92_RESERVED_DEFAULT=117;
	public static final int SQL92_RESERVED_DELETE=118;
	public static final int SQL92_RESERVED_DESC=119;
	public static final int SQL92_RESERVED_DISTINCT=120;
	public static final int SQL92_RESERVED_DROP=121;
	public static final int SQL92_RESERVED_ELSE=122;
	public static final int SQL92_RESERVED_END=123;
	public static final int SQL92_RESERVED_EXCEPTION=124;
	public static final int SQL92_RESERVED_EXISTS=125;
	public static final int SQL92_RESERVED_FALSE=126;
	public static final int SQL92_RESERVED_FETCH=127;
	public static final int SQL92_RESERVED_FOR=128;
	public static final int SQL92_RESERVED_FROM=129;
	public static final int SQL92_RESERVED_GOTO=130;
	public static final int SQL92_RESERVED_GRANT=131;
	public static final int SQL92_RESERVED_GROUP=132;
	public static final int SQL92_RESERVED_HAVING=133;
	public static final int SQL92_RESERVED_IN=134;
	public static final int SQL92_RESERVED_INSERT=135;
	public static final int SQL92_RESERVED_INTERSECT=136;
	public static final int SQL92_RESERVED_INTO=137;
	public static final int SQL92_RESERVED_IS=138;
	public static final int SQL92_RESERVED_LIKE=139;
	public static final int SQL92_RESERVED_NOT=140;
	public static final int SQL92_RESERVED_NULL=141;
	public static final int SQL92_RESERVED_OF=142;
	public static final int SQL92_RESERVED_ON=143;
	public static final int SQL92_RESERVED_OPTION=144;
	public static final int SQL92_RESERVED_OR=145;
	public static final int SQL92_RESERVED_ORDER=146;
	public static final int SQL92_RESERVED_OVERLAPS=147;
	public static final int SQL92_RESERVED_PRIOR=148;
	public static final int SQL92_RESERVED_PROCEDURE=149;
	public static final int SQL92_RESERVED_PUBLIC=150;
	public static final int SQL92_RESERVED_REVOKE=151;
	public static final int SQL92_RESERVED_SELECT=152;
	public static final int SQL92_RESERVED_SIZE=153;
	public static final int SQL92_RESERVED_TABLE=154;
	public static final int SQL92_RESERVED_THE=155;
	public static final int SQL92_RESERVED_THEN=156;
	public static final int SQL92_RESERVED_TO=157;
	public static final int SQL92_RESERVED_TRUE=158;
	public static final int SQL92_RESERVED_UNION=159;
	public static final int SQL92_RESERVED_UNIQUE=160;
	public static final int SQL92_RESERVED_UPDATE=161;
	public static final int SQL92_RESERVED_VALUES=162;
	public static final int SQL92_RESERVED_VIEW=163;
	public static final int SQL92_RESERVED_WHEN=164;
	public static final int SQL92_RESERVED_WHERE=165;
	public static final int SQL92_RESERVED_WITH=166;
	public static final int T=167;
	public static final int TILDE_OPERATOR_PART=168;
	public static final int U=169;
	public static final int UNDERSCORE=170;
	public static final int UNSIGNED_INTEGER=171;
	public static final int V=172;
	public static final int VERTICAL_BAR=173;
	public static final int W=174;
	public static final int X=175;
	public static final int Y=176;
	public static final int Z=177;
	public static final int ZV=178;
	public static final int ADD_VK=179;
	public static final int AFTER_EACH_ROW=180;
	public static final int AFTER_STATEMENT=181;
	public static final int AFTER_VK=182;
	public static final int AGENT_VK=183;
	public static final int AGGREGATE_VK=184;
	public static final int ALIAS=185;
	public static final int ALTER_ATTRIBUTE=186;
	public static final int ALTER_COLLECTION=187;
	public static final int ALTER_FUNCTION=188;
	public static final int ALTER_METHOD=189;
	public static final int ALTER_METHOD_ELEMENT=190;
	public static final int ALTER_PACKAGE=191;
	public static final int ALTER_PROCEDURE=192;
	public static final int ALTER_SEQUENCE=193;
	public static final int ALTER_TRIGGER=194;
	public static final int ALTER_TYPE=195;
	public static final int ANALYZE_VK=196;
	public static final int ANY_ELEMENT=197;
	public static final int ANY_MODE=198;
	public static final int ARGUMENT=200;
	public static final int ARGUMENTS=201;
	public static final int ASSIGN=202;
	public static final int ASSOCIATE_VK=203;
	public static final int ATTRIBUTE=205;
	public static final int ATTRIBUTES=206;
	public static final int ATTRIBUTE_NAME=207;
	public static final int AT_VK=209;
	public static final int AUDIT_VK=210;
	public static final int AUTHID_VK=211;
	public static final int AUTOMATIC_VK=212;
	public static final int AUTONOMOUS_TRANSACTION_VK=213;
	public static final int AUTO_VK=214;
	public static final int BATCH_VK=215;
	public static final int BEFORE_EACH_ROW=216;
	public static final int BEFORE_STATEMENT=217;
	public static final int BEFORE_VK=218;
	public static final int BFILE_VK=219;
	public static final int BINARY_DOUBLE_VK=220;
	public static final int BINARY_FLOAT_VK=221;
	public static final int BINARY_INTEGER_VK=222;
	public static final int BIT_VK=224;
	public static final int BLOB_VK=225;
	public static final int BLOCK=226;
	public static final int BLOCK_VK=227;
	public static final int BODY=228;
	public static final int BODY_MODE=229;
	public static final int BODY_VK=230;
	public static final int BOOLEAN_VK=231;
	public static final int BOTH_VK=232;
	public static final int BREADTH_VK=233;
	public static final int BULK_VK=234;
	public static final int BYTE_VK=235;
	public static final int CACHE_VK=236;
	public static final int CALL_MODE=237;
	public static final int CALL_VK=238;
	public static final int CANONICAL_VK=239;
	public static final int CASCADE_VK=241;
	public static final int CASCATED_ELEMENT=242;
	public static final int CAST_VK=243;
	public static final int CHARACTER_VK=244;
	public static final int CHAR_CS_VK=245;
	public static final int CHAR_SET_NAME=246;
	public static final int CHAR_VK=249;
	public static final int CHR_VK=250;
	public static final int CLOB_VK=251;
	public static final int CLOSE_VK=252;
	public static final int CLUSTER_VK=253;
	public static final int COLLECTION_MODE=254;
	public static final int COLLECTION_NAME=255;
	public static final int COLLECT_VK=256;
	public static final int COLUMNS=258;
	public static final int COLUMN_NAME=259;
	public static final int COMMENT_VK=261;
	public static final int COMMITTED_VK=262;
	public static final int COMMIT_VK=263;
	public static final int COMPATIBILITY_VK=264;
	public static final int COMPILATION_UNIT=265;
	public static final int COMPILER_PARAMETER=266;
	public static final int COMPILE_VK=267;
	public static final int COMPOUND_DML=268;
	public static final int COMPOUND_VK=269;
	public static final int CONDITIONAL_INSERT=271;
	public static final int CONSTANT_VK=272;
	public static final int CONSTRAINT_NAME=273;
	public static final int CONSTRUCTOR_SPEC=274;
	public static final int CONSTRUCTOR_VK=275;
	public static final int CONTENT_VK=276;
	public static final int CONTEXT_VK=277;
	public static final int CONTINUE_VK=278;
	public static final int CONVERT_VK=279;
	public static final int CORRUPT_XID_ALL_VK=280;
	public static final int CORRUPT_XID_VK=281;
	public static final int COST_CLASS_NAME=282;
	public static final int COST_VK=283;
	public static final int COUNT_VK=284;
	public static final int CREATE_FUNCTION=285;
	public static final int CREATE_PACKAGE_BODY=286;
	public static final int CREATE_PACKAGE_SPEC=287;
	public static final int CREATE_PROCEDURE=288;
	public static final int CREATE_SEQUENCE=289;
	public static final int CREATE_TRIGGER=290;
	public static final int CREATE_TYPE_BODY=291;
	public static final int CREATE_TYPE_SPEC=292;
	public static final int CROSS_VK=293;
	public static final int CUBE_VK=294;
	public static final int CURRENT_USER_VK=295;
	public static final int CURRENT_VK=296;
	public static final int CURSOR_BASED_FOR=297;
	public static final int CURSOR_DECLARE=298;
	public static final int CURSOR_NAME=299;
	public static final int CUSTOMDATUM_VK=300;
	public static final int CUSTOM_TYPE=301;
	public static final int CYCLE_VK=302;
	public static final int C_VK=303;
	public static final int DATABASE_VK=304;
	public static final int DATETIME_OP=305;
	public static final int DAY_VK=306;
	public static final int DBTIMEZONE_VK=307;
	public static final int DB_ROLE_CHANGE_VK=308;
	public static final int DDL_VK=309;
	public static final int DEBUG_VK=310;
	public static final int DECIMAL_VK=311;
	public static final int DECOMPOSE_VK=312;
	public static final int DECREMENT_VK=313;
	public static final int DEC_VK=314;
	public static final int DEFAULTS_VK=315;
	public static final int DEFAULT_VALUE=316;
	public static final int DEFERRED_VK=317;
	public static final int DEFINER_VK=318;
	public static final int DENSE_RANK_VK=320;
	public static final int DEPENDENT_HANDLING=321;
	public static final int DEPTH_VK=322;
	public static final int DETERMINISTIC_VK=323;
	public static final int DIMENSION_VK=324;
	public static final int DIRECT_MODE=325;
	public static final int DISABLE_VK=326;
	public static final int DISASSOCIATE_VK=327;
	public static final int DIV_VK=328;
	public static final int DML_EVENT=329;
	public static final int DML_EVENT_ELEMENT=330;
	public static final int DOCUMENT_VK=331;
	public static final int DOT_ASTERISK=332;
	public static final int DOUBLE_VK=333;
	public static final int DROP_FUNCTION=334;
	public static final int DROP_PACKAGE=335;
	public static final int DROP_PROCEDURE=336;
	public static final int DROP_SEQUENCE=337;
	public static final int DROP_TRIGGER=338;
	public static final int DROP_TYPE=339;
	public static final int DSINTERVAL_UNCONSTRAINED_VK=340;
	public static final int DYNAMIC_RETURN=341;
	public static final int ELEMENT=342;
	public static final int ELEMENTS_MODE=343;
	public static final int ELEMENT_SPEC=344;
	public static final int ENABLE_VK=345;
	public static final int ENCODING_VK=346;
	public static final int ENTITYESCAPING_VK=347;
	public static final int EVALNAME_VK=349;
	public static final int EXCEPTIONS_VK=351;
	public static final int EXCEPTION_DECLARE=352;
	public static final int EXCEPTION_INIT_VK=353;
	public static final int EXCEPTION_NAME=354;
	public static final int EXCLUDE_VK=356;
	public static final int EXECUTE_VK=357;
	public static final int EXIT_VK=358;
	public static final int EXPLAIN_STATEMENT=359;
	public static final int EXPR=360;
	public static final int EXPR_LIST=361;
	public static final int EXTERNAL_MODE=362;
	public static final int EXTERNAL_VK=363;
	public static final int EXTRACT_VK=364;
	public static final int FACTORING=365;
	public static final int FIELDS=366;
	public static final int FIELD_SPEC=367;
	public static final int FINAL_VK=368;
	public static final int FIRST_VALUE_VK=369;
	public static final int FIRST_VK=370;
	public static final int FLOAT_VK=371;
	public static final int FOLLOWING_VK=372;
	public static final int FOLLOWS_VK=373;
	public static final int FORALL_VK=374;
	public static final int FORCE_VK=375;
	public static final int FOR_EACH_ROW=376;
	public static final int FOR_LOOP=377;
	public static final int FOR_MULTI_COLUMN=378;
	public static final int FOR_SINGLE_COLUMN=379;
	public static final int FULL_VK=380;
	public static final int FUNCTION_ENABLING_OVER=381;
	public static final int FUNCTION_ENABLING_USING=382;
	public static final int FUNCTION_ENABLING_WITHIN_OR_OVER=383;
	public static final int FUNCTION_NAME=384;
	public static final int FUNCTION_SPEC=385;
	public static final int GROUPING_VK=388;
	public static final int GROUPIN_SET=389;
	public static final int GROUP_BY_ELEMENT=390;
	public static final int HASH_VK=391;
	public static final int HIDE_VK=392;
	public static final int HIERARCHICAL=393;
	public static final int HOSTED_VARIABLE=394;
	public static final int HOSTED_VARIABLE_NAME=395;
	public static final int HOSTED_VARIABLE_ROUTINE_CALL=396;
	public static final int HOUR_VK=397;
	public static final int ID=398;
	public static final int IGNORE_VK=399;
	public static final int IMMEDIATE_VK=400;
	public static final int IMPLEMENTATION_TYPE_NAME=401;
	public static final int INCLUDE_VK=402;
	public static final int INCLUDING_VK=403;
	public static final int INCREMENT_VK=404;
	public static final int INDENT_VK=405;
	public static final int INDEXED_BY=406;
	public static final int INDEXED_FOR=407;
	public static final int INDEX_NAME=408;
	public static final int INDICES_BOUND=409;
	public static final int INLINE_VK=410;
	public static final int INNER_VK=411;
	public static final int INOUT_VK=412;
	public static final int INSTANTIABLE_VK=413;
	public static final int INSTEAD_VK=414;
	public static final int INTEGER_VK=415;
	public static final int INTERVAL_DATATYPE=416;
	public static final int INT_VK=418;
	public static final int INVALIDATE_VK=419;
	public static final int ISOLATION_VK=420;
	public static final int IS_A_SET=421;
	public static final int IS_EMPTY=422;
	public static final int IS_INFINITE=423;
	public static final int IS_NAN=424;
	public static final int IS_NOT_A_SET=425;
	public static final int IS_NOT_EMPTY=426;
	public static final int IS_NOT_INFINITE=427;
	public static final int IS_NOT_NAN=428;
	public static final int IS_NOT_NULL=429;
	public static final int IS_NOT_OF_TYPE=430;
	public static final int IS_NOT_PRESENT=431;
	public static final int IS_NULL=432;
	public static final int IS_OF_TYPE=433;
	public static final int IS_PRESENT=434;
	public static final int ITERATE_VK=435;
	public static final int JAVA_VK=436;
	public static final int JOIN_DEF=437;
	public static final int KEEP_VK=438;
	public static final int LABEL_DECLARE=439;
	public static final int LABEL_NAME=440;
	public static final int LANGUAGE_VK=441;
	public static final int LAST_VALUE_VK=442;
	public static final int LAST_VK=443;
	public static final int LEADING_VK=444;
	public static final int LEFT_VK=447;
	public static final int LIBRARY_VK=450;
	public static final int LIKE2_VK=451;
	public static final int LIKE4_VK=452;
	public static final int LIKEC_VK=453;
	public static final int LIMIT_VK=454;
	public static final int LINK_NAME=455;
	public static final int LOCAL_VK=456;
	public static final int LOCK_TABLE_ELEMENT=457;
	public static final int LOGIC_EXPR=458;
	public static final int LOGOFF_VK=459;
	public static final int LOGON_VK=460;
	public static final int LOG_VK=461;
	public static final int LONG_VK=462;
	public static final int LOOP_VK=463;
	public static final int MAIN_MODEL=464;
	public static final int MAIN_MODEL_NAME=465;
	public static final int MAP_VK=466;
	public static final int MAXVALUE_VK=467;
	public static final int MEASURES_VK=468;
	public static final int MEMBER_VK=469;
	public static final int MERGE_INSERT=470;
	public static final int MERGE_UPDATE=471;
	public static final int MERGE_VK=472;
	public static final int MINUTE_VK=474;
	public static final int MINVALUE_VK=475;
	public static final int MLSLABEL_VK=476;
	public static final int MODEL_COLUMN=477;
	public static final int MODEL_COLUMNS=478;
	public static final int MODEL_EXPRESSION=479;
	public static final int MODEL_RULE=480;
	public static final int MODEL_RULES=481;
	public static final int MODIFIER=482;
	public static final int MODIFY_VK=483;
	public static final int MOD_VK=484;
	public static final int MONTH_VK=485;
	public static final int MULTI_TABLE_MODE=486;
	public static final int NAME_VK=487;
	public static final int NATIVE_DATATYPE=489;
	public static final int NATURALN_VK=490;
	public static final int NATURAL_VK=491;
	public static final int NAV_VK=492;
	public static final int NCHAR_CS_VK=493;
	public static final int NCHAR_VK=494;
	public static final int NCLOB_VK=495;
	public static final int NESTED_TABLE_TYPE_DEF=496;
	public static final int NESTED_VK=497;
	public static final int NEW_VK=498;
	public static final int NOAUDIT_VK=499;
	public static final int NOCACHE_VK=500;
	public static final int NOCOPY_VK=501;
	public static final int NOCYCLE_VK=502;
	public static final int NOENTITYESCAPING_VK=503;
	public static final int NOMAXVALUE_VK=504;
	public static final int NOMINVALUE_VK=505;
	public static final int NON_DML=506;
	public static final int NOORDER_VK=507;
	public static final int NOSCHEMACHECK_VK=508;
	public static final int NOT_BETWEEN=509;
	public static final int NOT_IN=511;
	public static final int NOT_LIKE=512;
	public static final int NO_VK=513;
	public static final int NULLS_VK=514;
	public static final int NUMBER_VK=515;
	public static final int NUMERIC_VK=516;
	public static final int NVARCHAR2_VK=517;
	public static final int OBJECT_AS=518;
	public static final int OBJECT_MEMBERS=519;
	public static final int OBJECT_TYPE_DEF=520;
	public static final int OBJECT_VK=521;
	public static final int OFF_VK=522;
	public static final int OLD_VK=523;
	public static final int ONLY_VK=524;
	public static final int OPEN_VK=525;
	public static final int ORADATA_VK=526;
	public static final int ORDER_BY_ELEMENT=527;
	public static final int ORDER_BY_ELEMENTS=528;
	public static final int ORDINALITY_VK=529;
	public static final int OUTER_JOIN_SIGN=530;
	public static final int OUT_VK=531;
	public static final int OVERRIDING_VK=532;
	public static final int OVER_VK=533;
	public static final int PACKAGE_NAME=534;
	public static final int PACKAGE_VK=535;
	public static final int PARALLEL_ENABLE_VK=536;
	public static final int PARAMETER=537;
	public static final int PARAMETERS=538;
	public static final int PARAMETERS_VK=539;
	public static final int PARAMETER_NAME=540;
	public static final int PARENT_VK=541;
	public static final int PARTITION_VK=542;
	public static final int PASSING_VK=543;
	public static final int PERCENT_FOUND_VK=545;
	public static final int PERCENT_ISOPEN_VK=546;
	public static final int PERCENT_NOTFOUND_VK=547;
	public static final int PERCENT_ROWCOUNT_VK=548;
	public static final int PERCENT_ROWTYPE_VK=549;
	public static final int PERCENT_TYPE_VK=550;
	public static final int PIPELINED_VK=552;
	public static final int PIPE_ROW=553;
	public static final int PIPE_VK=554;
	public static final int PIVOT_ALIAS=555;
	public static final int PIVOT_ELEMENT=556;
	public static final int PIVOT_IN_ELEMENT=557;
	public static final int PIVOT_VK=558;
	public static final int PLS_INTEGER_VK=573;
	public static final int POSITIVEN_VK=575;
	public static final int POSITIVE_VK=576;
	public static final int PRAGMA_DECLARE=577;
	public static final int PRAGMA_VK=578;
	public static final int PRECEDING_VK=579;
	public static final int PRECISION=580;
	public static final int PRECISION_VK=581;
	public static final int PREDICTION_FUNCTION=582;
	public static final int PROCEDURE_NAME=583;
	public static final int PROCEDURE_SPEC=584;
	public static final int QUERY_NAME=586;
	public static final int RAISE_VK=587;
	public static final int RANGE_VK=588;
	public static final int RAW_VK=589;
	public static final int READ_VK=590;
	public static final int REAL_VK=591;
	public static final int RECORD_NAME=592;
	public static final int RECORD_TYPE_DECLARE=593;
	public static final int RECORD_VAR_DECLARE=594;
	public static final int REFERENCE_MODEL_NAME=595;
	public static final int REFERENCE_VK=596;
	public static final int REFERENCING_VK=597;
	public static final int REF_VK=598;
	public static final int REJECT_VK=600;
	public static final int RELIES_ON_VK=601;
	public static final int RENAME_VK=602;
	public static final int REPLACE_VK=603;
	public static final int RESPECT_VK=604;
	public static final int RESTRICT_REFERENCES_VK=605;
	public static final int RESULT_CACHE_VK=606;
	public static final int RETURN_VK=607;
	public static final int REUSE_VK=608;
	public static final int REVERSE_VK=609;
	public static final int RIGHT_VK=612;
	public static final int ROLLBACK_SEGMENT_NAME=613;
	public static final int ROLLBACK_VK=614;
	public static final int ROLLUP_VK=615;
	public static final int ROUTINE_CALL=616;
	public static final int ROUTINE_NAME=617;
	public static final int ROWID_VK=618;
	public static final int ROWS_VK=619;
	public static final int ROW_VK=620;
	public static final int RULES_VK=621;
	public static final int SAMPLE_VK=622;
	public static final int SAVEPOINT_NAME=623;
	public static final int SAVEPOINT_VK=624;
	public static final int SCHEMACHECK_VK=625;
	public static final int SCHEMA_NAME=626;
	public static final int SCHEMA_VK=627;
	public static final int SCN_VK=628;
	public static final int SEARCHED_CASE=629;
	public static final int SEARCH_VK=630;
	public static final int SECOND_VK=631;
	public static final int SEED_VK=632;
	public static final int SELECTED_TABLEVIEW=633;
	public static final int SELECT_BASED_FOR=634;
	public static final int SELECT_ITEM=635;
	public static final int SELECT_LIST=636;
	public static final int SELECT_MODE=637;
	public static final int SELECT_STATEMENT=638;
	public static final int SELF_VK=639;
	public static final int SEQUENCE_NAME=641;
	public static final int SEQUENCE_VK=642;
	public static final int SEQUENTIAL_VK=643;
	public static final int SERIALIZABLE_VK=644;
	public static final int SERIALLY_REUSABLE_VK=645;
	public static final int SERVERERROR_VK=646;
	public static final int SESSIONTIMEZONE_VK=647;
	public static final int SET_CONSTRAINT=648;
	public static final int SET_SERVEROUTPUT=649;
	public static final int SET_TRANSACTION=650;
	public static final int SET_VK=651;
	public static final int SHOW_VK=652;
	public static final int SHUTDOWN_VK=653;
	public static final int SIBLINGS_VK=654;
	public static final int SIGNTYPE_VK=655;
	public static final int SIMPLE_BOUND=656;
	public static final int SIMPLE_CASE=657;
	public static final int SIMPLE_DML=658;
	public static final int SIMPLE_INTEGER_VK=659;
	public static final int SINGLE_TABLE_MODE=660;
	public static final int SINGLE_VK=661;
	public static final int SKIP_VK=662;
	public static final int SMALLINT_VK=663;
	public static final int SOME_VK=665;
	public static final int SPECIFICATION_VK=666;
	public static final int SQLDATA_VK=731;
	public static final int SQL_SCRIPT=732;
	public static final int STANDALONE_VK=733;
	public static final int STANDARD_FUNCTION=734;
	public static final int STARTUP_VK=735;
	public static final int STATEMENTS=736;
	public static final int STATIC_RETURNING=737;
	public static final int STATIC_VK=738;
	public static final int STATISTICS_VK=739;
	public static final int STREAMING_CLAUSE=740;
	public static final int STRING_VK=741;
	public static final int SUBMULTISET_VK=742;
	public static final int SUBPARTITION_VK=743;
	public static final int SUBQUERY=744;
	public static final int SUBTYPE_DECLARE=745;
	public static final int SUSPEND_VK=746;
	public static final int TABLEVIEW_NAME=747;
	public static final int TABLE_ELEMENT=748;
	public static final int TABLE_EXPRESSION=749;
	public static final int TABLE_REF=750;
	public static final int TABLE_REF_ELEMENT=751;
	public static final int TABLE_TYPE_DECLARE=752;
	public static final int TABLE_VAR_DECLARE=753;
	public static final int TABLE_VAR_NAME=754;
	public static final int THREE_DOTS=755;
	public static final int TIMESTAMP_LTZ_UNCONSTRAINED_VK=756;
	public static final int TIMESTAMP_TZ_UNCONSTRAINED_VK=757;
	public static final int TIMESTAMP_UNCONSTRAINED_VK=758;
	public static final int TIMESTAMP_VK=759;
	public static final int TIMEZONE_ABBR_VK=760;
	public static final int TIMEZONE_HOUR_VK=761;
	public static final int TIMEZONE_MINUTE_VK=762;
	public static final int TIMEZONE_REGION_VK=763;
	public static final int TIME_VK=764;
	public static final int TRAILING_VK=765;
	public static final int TRANSLATE_VK=766;
	public static final int TREAT_VK=767;
	public static final int TRIGGER_NAME=768;
	public static final int TRIM_VK=769;
	public static final int TRUNCATE_VK=770;
	public static final int TYPE_BODY_ELEMENTS=771;
	public static final int TYPE_NAME=772;
	public static final int TYPE_VK=773;
	public static final int UNARY_OPERATOR=774;
	public static final int UNBOUNDED_VK=775;
	public static final int UNDER_VK=776;
	public static final int UNLIMITED_VK=777;
	public static final int UNPIVOT_IN_ELEMENT=778;
	public static final int UNPIVOT_VK=779;
	public static final int UNTIL_VK=781;
	public static final int UPDATED_VK=782;
	public static final int UPSERT_VK=783;
	public static final int UROWID_VK=784;
	public static final int USING_MODE=785;
	public static final int VALIDATE_VK=786;
	public static final int VALUES_BOUND=787;
	public static final int VALUE_VK=788;
	public static final int VARCHAR2_VK=789;
	public static final int VARCHAR_VK=790;
	public static final int VARIABLE_DECLARE=791;
	public static final int VARIABLE_NAME=792;
	public static final int VARR_ARRAY_DEF=793;
	public static final int VECTOR_EXPR=794;
	public static final int VERSIONS_VK=795;
	public static final int VERSION_VK=796;
	public static final int WAIT_VK=798;
	public static final int WELLFORMED_VK=799;
	public static final int WHILE_LOOP=800;
	public static final int WITHIN_VK=801;
	public static final int WORK_VK=802;
	public static final int WRITE_VK=803;
	public static final int XMLAGG_VK=804;
	public static final int XMLATTRIBUTES_VK=805;
	public static final int XMLCAST_VK=806;
	public static final int XMLCOLATTVAL_VK=807;
	public static final int XMLELEMENT_VK=808;
	public static final int XMLEXISTS_VK=809;
	public static final int XMLFOREST_VK=810;
	public static final int XMLNAMESPACES_VK=811;
	public static final int XMLPARSE_VK=812;
	public static final int XMLPI_VK=813;
	public static final int XMLQUERY_VK=814;
	public static final int XMLROOT_VK=815;
	public static final int XMLSERIALIZE_VK=816;
	public static final int XMLTABLE_VK=817;
	public static final int XML_ALIAS=818;
	public static final int XML_COLUMN=819;
	public static final int XML_COLUMN_NAME=820;
	public static final int XML_ELEMENT=821;
	public static final int XML_VK=822;
	public static final int YEAR_VK=823;
	public static final int YES_VK=824;
	public static final int YMINTERVAL_UNCONSTRAINED_VK=825;
	public static final int DATE_VK=826;
	public static final int ORDER_VK=827;
	public static final int START_VK=828;

	// delegates
	public TreeParser[] getDelegates() {
		return new TreeParser[] {};
	}

	// delegators


	public PLSQLPrinter(TreeNodeStream input) {
		this(input, new RecognizerSharedState());
	}
	public PLSQLPrinter(TreeNodeStream input, RecognizerSharedState state) {
		super(input, state);
	}

	protected StringTemplateGroup templateLib =
	  new StringTemplateGroup("PLSQLPrinterTemplates", AngleBracketTemplateLexer.class);

	public void setTemplateLib(StringTemplateGroup templateLib) {
	  this.templateLib = templateLib;
	}
	public StringTemplateGroup getTemplateLib() {
	  return templateLib;
	}
	/** allows convenient multi-value initialization:
	 *  "new STAttrMap().put(...).put(...)"
	 */
	@SuppressWarnings("serial")
	public static class STAttrMap extends HashMap<String, Object> {
		public STAttrMap put(String attrName, Object value) {
			super.put(attrName, value);
			return this;
		}
	}
	@Override public String[] getTokenNames() { return PLSQLPrinter.tokenNames; }
	@Override public String getGrammarFileName() { return "PLSQLPrinter.g"; }



	  static String[] correctTokenNames = getCorrectTokenNames();

	  static String[] getCorrectTokenNames() {
	    // This is workaround for bug in antlr3 (at least in 3.5.2)
	    java.lang.reflect.Field[] fields = PLSQLPrinter.class.getDeclaredFields();
	    java.util.Map<Integer, String> tokenNamesMap = new java.util.HashMap<Integer, String>();
	    int maxTokenValue = 0;
	    for (java.lang.reflect.Field field: fields) {
	      int mod = field.getModifiers();
	      if (java.lang.reflect.Modifier.isStatic(mod) && java.lang.reflect.Modifier.isFinal(mod) && field.getType() == int.class) {
	        String name = field.getName();
	        int value;
	        try {
	          value = field.getInt(null);
	        } catch (Exception e) {
	          throw new RuntimeException(e);
	        }
	        tokenNamesMap.put(value, name);
	        maxTokenValue = Math.max(maxTokenValue, value);
	      }
	    }
	    String[] result = new String[maxTokenValue + 1];
	    for (int i = 0; i < maxTokenValue; ++i) {
	      if (tokenNamesMap.containsKey(i)) {
	        result[i] = tokenNamesMap.get(i);
	      } else {
	        result[i] = "<none>";
	      }
	    }
	    return result;
	  }
	  
	  
	  public void reportError(RecognitionException e) {
	    // if we've already reported an error and have not matched a token
	    // yet successfully, don't report any errors.
	    if ( state.errorRecovery ) {
	      //System.err.print("[SPURIOUS] ");
	      return;
	    }
	    state.syntaxErrors++; // don't count spurious
	    state.errorRecovery = true;

	    displayRecognitionError(correctTokenNames, e);
	  }



	public static class compilation_unit_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "compilation_unit"
	// PLSQLPrinter.g:74:1: compilation_unit : ^( COMPILATION_UNIT (u+= unit_statement )* ) -> template(statements=$u) <<\n<statements:{v|<v>}; separator=\"\\n\\n\">\n>>;
	public final PLSQLPrinter.compilation_unit_return compilation_unit() throws RecognitionException {
		PLSQLPrinter.compilation_unit_return retval = new PLSQLPrinter.compilation_unit_return();
		retval.start = input.LT(1);

		List<Object> list_u=null;
		RuleReturnScope u = null;
		try {
			// PLSQLPrinter.g:75:5: ( ^( COMPILATION_UNIT (u+= unit_statement )* ) -> template(statements=$u) <<\n<statements:{v|<v>}; separator=\"\\n\\n\">\n>>)
			// PLSQLPrinter.g:75:10: ^( COMPILATION_UNIT (u+= unit_statement )* )
			{
			match(input,COMPILATION_UNIT,FOLLOW_COMPILATION_UNIT_in_compilation_unit69); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:75:30: (u+= unit_statement )*
				loop1:
				while (true) {
					int alt1=2;
					int LA1_0 = input.LA(1);
					if ( (LA1_0==ALTER_FUNCTION||(LA1_0 >= ALTER_PACKAGE && LA1_0 <= ALTER_TYPE)||(LA1_0 >= CREATE_FUNCTION && LA1_0 <= CREATE_TYPE_SPEC)||(LA1_0 >= DROP_FUNCTION && LA1_0 <= DROP_TYPE)) ) {
						alt1=1;
					}

					switch (alt1) {
					case 1 :
						// PLSQLPrinter.g:75:30: u+= unit_statement
						{
						pushFollow(FOLLOW_unit_statement_in_compilation_unit73);
						u=unit_statement();
						state._fsp--;

						if (list_u==null) list_u=new ArrayList<Object>();
						list_u.add(u.getTemplate());
						}
						break;

					default :
						break loop1;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 76:5: -> template(statements=$u) <<\n<statements:{v|<v>}; separator=\"\\n\\n\">\n>>
			{
				retval.st = new StringTemplate(templateLib, "\n<statements:{v|<v>}; separator=\"\\n\\n\">\n",new STAttrMap().put("statements", list_u));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compilation_unit"


	public static class sql_script_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sql_script"
	// PLSQLPrinter.g:82:1: sql_script : ^( SQL_SCRIPT (u+= unit_statement )* ) -> template(statements=$u) <<\n<statements; separator=\"\\n\\n\">\n>>;
	public final PLSQLPrinter.sql_script_return sql_script() throws RecognitionException {
		PLSQLPrinter.sql_script_return retval = new PLSQLPrinter.sql_script_return();
		retval.start = input.LT(1);

		List<Object> list_u=null;
		RuleReturnScope u = null;
		try {
			// PLSQLPrinter.g:83:5: ( ^( SQL_SCRIPT (u+= unit_statement )* ) -> template(statements=$u) <<\n<statements; separator=\"\\n\\n\">\n>>)
			// PLSQLPrinter.g:83:10: ^( SQL_SCRIPT (u+= unit_statement )* )
			{
			match(input,SQL_SCRIPT,FOLLOW_SQL_SCRIPT_in_sql_script112); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:83:24: (u+= unit_statement )*
				loop2:
				while (true) {
					int alt2=2;
					int LA2_0 = input.LA(1);
					if ( (LA2_0==ALTER_FUNCTION||(LA2_0 >= ALTER_PACKAGE && LA2_0 <= ALTER_TYPE)||(LA2_0 >= CREATE_FUNCTION && LA2_0 <= CREATE_TYPE_SPEC)||(LA2_0 >= DROP_FUNCTION && LA2_0 <= DROP_TYPE)) ) {
						alt2=1;
					}

					switch (alt2) {
					case 1 :
						// PLSQLPrinter.g:83:24: u+= unit_statement
						{
						pushFollow(FOLLOW_unit_statement_in_sql_script116);
						u=unit_statement();
						state._fsp--;

						if (list_u==null) list_u=new ArrayList<Object>();
						list_u.add(u.getTemplate());
						}
						break;

					default :
						break loop2;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 84:5: -> template(statements=$u) <<\n<statements; separator=\"\\n\\n\">\n>>
			{
				retval.st = new StringTemplate(templateLib, "\n<statements; separator=\"\\n\\n\">\n",new STAttrMap().put("statements", list_u));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sql_script"


	public static class serveroutput_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "serveroutput_declaration"
	// PLSQLPrinter.g:90:1: serveroutput_declaration : ^( SET_SERVEROUTPUT ( SQL92_RESERVED_ON | OFF_VK ) ) -> template( \"not implemented: serveroutput_declaration\";
	public final PLSQLPrinter.serveroutput_declaration_return serveroutput_declaration() throws RecognitionException {
		PLSQLPrinter.serveroutput_declaration_return retval = new PLSQLPrinter.serveroutput_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:91:5: ( ^( SET_SERVEROUTPUT ( SQL92_RESERVED_ON | OFF_VK ) ) -> template( \"not implemented: serveroutput_declaration\")
			// PLSQLPrinter.g:91:10: ^( SET_SERVEROUTPUT ( SQL92_RESERVED_ON | OFF_VK ) )
			{
			match(input,SET_SERVEROUTPUT,FOLLOW_SET_SERVEROUTPUT_in_serveroutput_declaration155); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:91:29: ( SQL92_RESERVED_ON | OFF_VK )
			int alt3=2;
			int LA3_0 = input.LA(1);
			if ( (LA3_0==SQL92_RESERVED_ON) ) {
				alt3=1;
			}
			else if ( (LA3_0==OFF_VK) ) {
				alt3=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 3, 0, input);
				throw nvae;
			}

			switch (alt3) {
				case 1 :
					// PLSQLPrinter.g:91:30: SQL92_RESERVED_ON
					{
					match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_serveroutput_declaration158); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:91:48: OFF_VK
					{
					match(input,OFF_VK,FOLLOW_OFF_VK_in_serveroutput_declaration160); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 92:5: -> template( \"not implemented: serveroutput_declaration\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: serveroutput_declaration");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "serveroutput_declaration"


	public static class unit_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unit_statement"
	// PLSQLPrinter.g:95:1: unit_statement : ( alter_function -> { $alter_function.st }| alter_package -> { $alter_package.st}| alter_procedure -> { $alter_procedure.st}| alter_sequence -> { $alter_sequence.st}| alter_trigger -> { $alter_trigger.st}| alter_type -> { $alter_type.st}| create_function_body -> { $create_function_body.st; }| create_procedure_body -> { $create_procedure_body.st}| create_package -> { $create_package.st}| create_sequence -> { $create_sequence.st}| create_trigger -> { $create_trigger.st}| create_type -> { $create_type.st}| drop_function -> { $drop_function.st}| drop_package -> { $drop_package.st}| drop_procedure -> { $drop_procedure.st}| drop_sequence -> { $drop_sequence.st}| drop_trigger -> { $drop_trigger.st}| drop_type -> { $drop_type.st});
	public final PLSQLPrinter.unit_statement_return unit_statement() throws RecognitionException {
		PLSQLPrinter.unit_statement_return retval = new PLSQLPrinter.unit_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope alter_function1 =null;
		TreeRuleReturnScope alter_package2 =null;
		TreeRuleReturnScope alter_procedure3 =null;
		TreeRuleReturnScope alter_sequence4 =null;
		TreeRuleReturnScope alter_trigger5 =null;
		TreeRuleReturnScope alter_type6 =null;
		TreeRuleReturnScope create_function_body7 =null;
		TreeRuleReturnScope create_procedure_body8 =null;
		TreeRuleReturnScope create_package9 =null;
		TreeRuleReturnScope create_sequence10 =null;
		TreeRuleReturnScope create_trigger11 =null;
		TreeRuleReturnScope create_type12 =null;
		TreeRuleReturnScope drop_function13 =null;
		TreeRuleReturnScope drop_package14 =null;
		TreeRuleReturnScope drop_procedure15 =null;
		TreeRuleReturnScope drop_sequence16 =null;
		TreeRuleReturnScope drop_trigger17 =null;
		TreeRuleReturnScope drop_type18 =null;

		try {
			// PLSQLPrinter.g:96:5: ( alter_function -> { $alter_function.st }| alter_package -> { $alter_package.st}| alter_procedure -> { $alter_procedure.st}| alter_sequence -> { $alter_sequence.st}| alter_trigger -> { $alter_trigger.st}| alter_type -> { $alter_type.st}| create_function_body -> { $create_function_body.st; }| create_procedure_body -> { $create_procedure_body.st}| create_package -> { $create_package.st}| create_sequence -> { $create_sequence.st}| create_trigger -> { $create_trigger.st}| create_type -> { $create_type.st}| drop_function -> { $drop_function.st}| drop_package -> { $drop_package.st}| drop_procedure -> { $drop_procedure.st}| drop_sequence -> { $drop_sequence.st}| drop_trigger -> { $drop_trigger.st}| drop_type -> { $drop_type.st})
			int alt4=18;
			switch ( input.LA(1) ) {
			case ALTER_FUNCTION:
				{
				alt4=1;
				}
				break;
			case ALTER_PACKAGE:
				{
				alt4=2;
				}
				break;
			case ALTER_PROCEDURE:
				{
				alt4=3;
				}
				break;
			case ALTER_SEQUENCE:
				{
				alt4=4;
				}
				break;
			case ALTER_TRIGGER:
				{
				alt4=5;
				}
				break;
			case ALTER_TYPE:
				{
				alt4=6;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt4=7;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt4=8;
				}
				break;
			case CREATE_PACKAGE_BODY:
			case CREATE_PACKAGE_SPEC:
				{
				alt4=9;
				}
				break;
			case CREATE_SEQUENCE:
				{
				alt4=10;
				}
				break;
			case CREATE_TRIGGER:
				{
				alt4=11;
				}
				break;
			case CREATE_TYPE_BODY:
			case CREATE_TYPE_SPEC:
				{
				alt4=12;
				}
				break;
			case DROP_FUNCTION:
				{
				alt4=13;
				}
				break;
			case DROP_PACKAGE:
				{
				alt4=14;
				}
				break;
			case DROP_PROCEDURE:
				{
				alt4=15;
				}
				break;
			case DROP_SEQUENCE:
				{
				alt4=16;
				}
				break;
			case DROP_TRIGGER:
				{
				alt4=17;
				}
				break;
			case DROP_TYPE:
				{
				alt4=18;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 4, 0, input);
				throw nvae;
			}
			switch (alt4) {
				case 1 :
					// PLSQLPrinter.g:96:10: alter_function
					{
					pushFollow(FOLLOW_alter_function_in_unit_statement196);
					alter_function1=alter_function();
					state._fsp--;

					// TEMPLATE REWRITE
					// 96:25: -> { $alter_function.st }
					{
						retval.st =  (alter_function1!=null?((StringTemplate)alter_function1.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:97:10: alter_package
					{
					pushFollow(FOLLOW_alter_package_in_unit_statement211);
					alter_package2=alter_package();
					state._fsp--;

					// TEMPLATE REWRITE
					// 97:24: -> { $alter_package.st}
					{
						retval.st =  (alter_package2!=null?((StringTemplate)alter_package2.getTemplate()):null);
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:98:10: alter_procedure
					{
					pushFollow(FOLLOW_alter_procedure_in_unit_statement226);
					alter_procedure3=alter_procedure();
					state._fsp--;

					// TEMPLATE REWRITE
					// 98:26: -> { $alter_procedure.st}
					{
						retval.st =  (alter_procedure3!=null?((StringTemplate)alter_procedure3.getTemplate()):null);
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:99:10: alter_sequence
					{
					pushFollow(FOLLOW_alter_sequence_in_unit_statement241);
					alter_sequence4=alter_sequence();
					state._fsp--;

					// TEMPLATE REWRITE
					// 99:25: -> { $alter_sequence.st}
					{
						retval.st =  (alter_sequence4!=null?((StringTemplate)alter_sequence4.getTemplate()):null);
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:100:10: alter_trigger
					{
					pushFollow(FOLLOW_alter_trigger_in_unit_statement256);
					alter_trigger5=alter_trigger();
					state._fsp--;

					// TEMPLATE REWRITE
					// 100:24: -> { $alter_trigger.st}
					{
						retval.st =  (alter_trigger5!=null?((StringTemplate)alter_trigger5.getTemplate()):null);
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:101:10: alter_type
					{
					pushFollow(FOLLOW_alter_type_in_unit_statement271);
					alter_type6=alter_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 101:21: -> { $alter_type.st}
					{
						retval.st =  (alter_type6!=null?((StringTemplate)alter_type6.getTemplate()):null);
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:102:10: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_unit_statement286);
					create_function_body7=create_function_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 102:31: -> { $create_function_body.st; }
					{
						retval.st =  (create_function_body7!=null?((StringTemplate)create_function_body7.getTemplate()):null); ;
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:103:10: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_unit_statement301);
					create_procedure_body8=create_procedure_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 103:32: -> { $create_procedure_body.st}
					{
						retval.st =  (create_procedure_body8!=null?((StringTemplate)create_procedure_body8.getTemplate()):null);
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:104:10: create_package
					{
					pushFollow(FOLLOW_create_package_in_unit_statement316);
					create_package9=create_package();
					state._fsp--;

					// TEMPLATE REWRITE
					// 104:25: -> { $create_package.st}
					{
						retval.st =  (create_package9!=null?((StringTemplate)create_package9.getTemplate()):null);
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:105:10: create_sequence
					{
					pushFollow(FOLLOW_create_sequence_in_unit_statement331);
					create_sequence10=create_sequence();
					state._fsp--;

					// TEMPLATE REWRITE
					// 105:26: -> { $create_sequence.st}
					{
						retval.st =  (create_sequence10!=null?((StringTemplate)create_sequence10.getTemplate()):null);
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:106:10: create_trigger
					{
					pushFollow(FOLLOW_create_trigger_in_unit_statement346);
					create_trigger11=create_trigger();
					state._fsp--;

					// TEMPLATE REWRITE
					// 106:25: -> { $create_trigger.st}
					{
						retval.st =  (create_trigger11!=null?((StringTemplate)create_trigger11.getTemplate()):null);
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:107:10: create_type
					{
					pushFollow(FOLLOW_create_type_in_unit_statement361);
					create_type12=create_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 107:22: -> { $create_type.st}
					{
						retval.st =  (create_type12!=null?((StringTemplate)create_type12.getTemplate()):null);
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:108:10: drop_function
					{
					pushFollow(FOLLOW_drop_function_in_unit_statement376);
					drop_function13=drop_function();
					state._fsp--;

					// TEMPLATE REWRITE
					// 108:24: -> { $drop_function.st}
					{
						retval.st =  (drop_function13!=null?((StringTemplate)drop_function13.getTemplate()):null);
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:109:10: drop_package
					{
					pushFollow(FOLLOW_drop_package_in_unit_statement391);
					drop_package14=drop_package();
					state._fsp--;

					// TEMPLATE REWRITE
					// 109:23: -> { $drop_package.st}
					{
						retval.st =  (drop_package14!=null?((StringTemplate)drop_package14.getTemplate()):null);
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:110:10: drop_procedure
					{
					pushFollow(FOLLOW_drop_procedure_in_unit_statement406);
					drop_procedure15=drop_procedure();
					state._fsp--;

					// TEMPLATE REWRITE
					// 110:25: -> { $drop_procedure.st}
					{
						retval.st =  (drop_procedure15!=null?((StringTemplate)drop_procedure15.getTemplate()):null);
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:111:10: drop_sequence
					{
					pushFollow(FOLLOW_drop_sequence_in_unit_statement421);
					drop_sequence16=drop_sequence();
					state._fsp--;

					// TEMPLATE REWRITE
					// 111:24: -> { $drop_sequence.st}
					{
						retval.st =  (drop_sequence16!=null?((StringTemplate)drop_sequence16.getTemplate()):null);
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:112:10: drop_trigger
					{
					pushFollow(FOLLOW_drop_trigger_in_unit_statement436);
					drop_trigger17=drop_trigger();
					state._fsp--;

					// TEMPLATE REWRITE
					// 112:23: -> { $drop_trigger.st}
					{
						retval.st =  (drop_trigger17!=null?((StringTemplate)drop_trigger17.getTemplate()):null);
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:113:10: drop_type
					{
					pushFollow(FOLLOW_drop_type_in_unit_statement451);
					drop_type18=drop_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 113:20: -> { $drop_type.st}
					{
						retval.st =  (drop_type18!=null?((StringTemplate)drop_type18.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unit_statement"


	public static class drop_function_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_function"
	// PLSQLPrinter.g:120:1: drop_function : ^( DROP_FUNCTION function_name ) -> template( \"not implemented: drop_function\";
	public final PLSQLPrinter.drop_function_return drop_function() throws RecognitionException {
		PLSQLPrinter.drop_function_return retval = new PLSQLPrinter.drop_function_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:121:5: ( ^( DROP_FUNCTION function_name ) -> template( \"not implemented: drop_function\")
			// PLSQLPrinter.g:121:10: ^( DROP_FUNCTION function_name )
			{
			match(input,DROP_FUNCTION,FOLLOW_DROP_FUNCTION_in_drop_function480); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_name_in_drop_function482);
			function_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 122:5: -> template( \"not implemented: drop_function\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_function");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_function"


	public static class alter_function_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_function"
	// PLSQLPrinter.g:125:1: alter_function : ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_function\";
	public final PLSQLPrinter.alter_function_return alter_function() throws RecognitionException {
		PLSQLPrinter.alter_function_return retval = new PLSQLPrinter.alter_function_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:126:5: ( ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_function\")
			// PLSQLPrinter.g:126:10: ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
			{
			match(input,ALTER_FUNCTION,FOLLOW_ALTER_FUNCTION_in_alter_function518); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_name_in_alter_function520);
			function_name();
			state._fsp--;

			// PLSQLPrinter.g:126:41: ( DEBUG_VK )?
			int alt5=2;
			int LA5_0 = input.LA(1);
			if ( (LA5_0==DEBUG_VK) ) {
				alt5=1;
			}
			switch (alt5) {
				case 1 :
					// PLSQLPrinter.g:126:41: DEBUG_VK
					{
					match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_function522); 
					}
					break;

			}

			// PLSQLPrinter.g:126:51: ( REUSE_VK )?
			int alt6=2;
			int LA6_0 = input.LA(1);
			if ( (LA6_0==REUSE_VK) ) {
				alt6=1;
			}
			switch (alt6) {
				case 1 :
					// PLSQLPrinter.g:126:51: REUSE_VK
					{
					match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_function525); 
					}
					break;

			}

			// PLSQLPrinter.g:126:61: ( compiler_parameters_clause )*
			loop7:
			while (true) {
				int alt7=2;
				int LA7_0 = input.LA(1);
				if ( (LA7_0==COMPILER_PARAMETER) ) {
					alt7=1;
				}

				switch (alt7) {
				case 1 :
					// PLSQLPrinter.g:126:61: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_function528);
					compiler_parameters_clause();
					state._fsp--;

					}
					break;

				default :
					break loop7;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 127:5: -> template( \"not implemented: alter_function\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_function");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_function"


	public static class create_function_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_function_body"
	// PLSQLPrinter.g:130:1: create_function_body : ^( CREATE_FUNCTION ( REPLACE_VK )? ^( FUNCTION_NAME (name+= ID )+ ) ret= type_spec ^( PARAMETERS (args+= parameter )* ) (ac+= invoker_rights_clause )* (ac+= parallel_enable_clause )* (ac+= result_cache_clause )* ( DETERMINISTIC_VK )* ( PIPELINED_VK )? ( ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name ) -> template( \"not implemented: create_function_body\"| ^( CALL_MODE call_spec ) -> template( \"not implemented: create_function_body\"| ^( BODY_MODE block ) -> create_function_body(is_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st)) ) ;
	public final PLSQLPrinter.create_function_body_return create_function_body() throws RecognitionException {
		PLSQLPrinter.create_function_body_return retval = new PLSQLPrinter.create_function_body_return();
		retval.start = input.LT(1);

		CommonTree REPLACE_VK19=null;
		CommonTree PIPELINED_VK20=null;
		CommonTree name=null;
		List<Object> list_name=null;
		List<Object> list_args=null;
		List<Object> list_ac=null;
		TreeRuleReturnScope ret =null;
		TreeRuleReturnScope block21 =null;
		RuleReturnScope args = null;
		RuleReturnScope ac = null;
		try {
			// PLSQLPrinter.g:131:5: ( ^( CREATE_FUNCTION ( REPLACE_VK )? ^( FUNCTION_NAME (name+= ID )+ ) ret= type_spec ^( PARAMETERS (args+= parameter )* ) (ac+= invoker_rights_clause )* (ac+= parallel_enable_clause )* (ac+= result_cache_clause )* ( DETERMINISTIC_VK )* ( PIPELINED_VK )? ( ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name ) -> template( \"not implemented: create_function_body\"| ^( CALL_MODE call_spec ) -> template( \"not implemented: create_function_body\"| ^( BODY_MODE block ) -> create_function_body(is_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st)) ) )
			// PLSQLPrinter.g:131:10: ^( CREATE_FUNCTION ( REPLACE_VK )? ^( FUNCTION_NAME (name+= ID )+ ) ret= type_spec ^( PARAMETERS (args+= parameter )* ) (ac+= invoker_rights_clause )* (ac+= parallel_enable_clause )* (ac+= result_cache_clause )* ( DETERMINISTIC_VK )* ( PIPELINED_VK )? ( ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name ) -> template( \"not implemented: create_function_body\"| ^( CALL_MODE call_spec ) -> template( \"not implemented: create_function_body\"| ^( BODY_MODE block ) -> create_function_body(is_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st)) )
			{
			match(input,CREATE_FUNCTION,FOLLOW_CREATE_FUNCTION_in_create_function_body565); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:131:28: ( REPLACE_VK )?
			int alt8=2;
			int LA8_0 = input.LA(1);
			if ( (LA8_0==REPLACE_VK) ) {
				alt8=1;
			}
			switch (alt8) {
				case 1 :
					// PLSQLPrinter.g:131:28: REPLACE_VK
					{
					REPLACE_VK19=(CommonTree)match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_function_body567); 
					}
					break;

			}

			match(input,FUNCTION_NAME,FOLLOW_FUNCTION_NAME_in_create_function_body571); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:131:60: (name+= ID )+
			int cnt9=0;
			loop9:
			while (true) {
				int alt9=2;
				int LA9_0 = input.LA(1);
				if ( (LA9_0==ID) ) {
					alt9=1;
				}

				switch (alt9) {
				case 1 :
					// PLSQLPrinter.g:131:60: name+= ID
					{
					name=(CommonTree)match(input,ID,FOLLOW_ID_in_create_function_body575); 
					if (list_name==null) list_name=new ArrayList<Object>();
					list_name.add(name);
					}
					break;

				default :
					if ( cnt9 >= 1 ) break loop9;
					EarlyExitException eee = new EarlyExitException(9, input);
					throw eee;
				}
				cnt9++;
			}

			match(input, Token.UP, null); 

			pushFollow(FOLLOW_type_spec_in_create_function_body581);
			ret=type_spec();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_create_function_body584); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:131:98: (args+= parameter )*
				loop10:
				while (true) {
					int alt10=2;
					int LA10_0 = input.LA(1);
					if ( (LA10_0==PARAMETER) ) {
						alt10=1;
					}

					switch (alt10) {
					case 1 :
						// PLSQLPrinter.g:131:98: args+= parameter
						{
						pushFollow(FOLLOW_parameter_in_create_function_body588);
						args=parameter();
						state._fsp--;

						if (list_args==null) list_args=new ArrayList<Object>();
						list_args.add(args.getTemplate());
						}
						break;

					default :
						break loop10;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:132:15: (ac+= invoker_rights_clause )*
			loop11:
			while (true) {
				int alt11=2;
				int LA11_0 = input.LA(1);
				if ( (LA11_0==AUTHID_VK) ) {
					alt11=1;
				}

				switch (alt11) {
				case 1 :
					// PLSQLPrinter.g:132:15: ac+= invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_create_function_body606);
					ac=invoker_rights_clause();
					state._fsp--;

					if (list_ac==null) list_ac=new ArrayList<Object>();
					list_ac.add(ac.getTemplate());
					}
					break;

				default :
					break loop11;
				}
			}

			// PLSQLPrinter.g:132:42: (ac+= parallel_enable_clause )*
			loop12:
			while (true) {
				int alt12=2;
				int LA12_0 = input.LA(1);
				if ( (LA12_0==PARALLEL_ENABLE_VK) ) {
					alt12=1;
				}

				switch (alt12) {
				case 1 :
					// PLSQLPrinter.g:132:42: ac+= parallel_enable_clause
					{
					pushFollow(FOLLOW_parallel_enable_clause_in_create_function_body611);
					ac=parallel_enable_clause();
					state._fsp--;

					if (list_ac==null) list_ac=new ArrayList<Object>();
					list_ac.add(ac.getTemplate());
					}
					break;

				default :
					break loop12;
				}
			}

			// PLSQLPrinter.g:132:70: (ac+= result_cache_clause )*
			loop13:
			while (true) {
				int alt13=2;
				int LA13_0 = input.LA(1);
				if ( (LA13_0==RESULT_CACHE_VK) ) {
					alt13=1;
				}

				switch (alt13) {
				case 1 :
					// PLSQLPrinter.g:132:70: ac+= result_cache_clause
					{
					pushFollow(FOLLOW_result_cache_clause_in_create_function_body616);
					ac=result_cache_clause();
					state._fsp--;

					if (list_ac==null) list_ac=new ArrayList<Object>();
					list_ac.add(ac.getTemplate());
					}
					break;

				default :
					break loop13;
				}
			}

			// PLSQLPrinter.g:132:93: ( DETERMINISTIC_VK )*
			loop14:
			while (true) {
				int alt14=2;
				int LA14_0 = input.LA(1);
				if ( (LA14_0==DETERMINISTIC_VK) ) {
					alt14=1;
				}

				switch (alt14) {
				case 1 :
					// PLSQLPrinter.g:132:93: DETERMINISTIC_VK
					{
					match(input,DETERMINISTIC_VK,FOLLOW_DETERMINISTIC_VK_in_create_function_body619); 
					}
					break;

				default :
					break loop14;
				}
			}

			// PLSQLPrinter.g:132:111: ( PIPELINED_VK )?
			int alt15=2;
			int LA15_0 = input.LA(1);
			if ( (LA15_0==PIPELINED_VK) ) {
				alt15=1;
			}
			switch (alt15) {
				case 1 :
					// PLSQLPrinter.g:132:111: PIPELINED_VK
					{
					PIPELINED_VK20=(CommonTree)match(input,PIPELINED_VK,FOLLOW_PIPELINED_VK_in_create_function_body622); 
					}
					break;

			}

			// PLSQLPrinter.g:133:13: ( ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name ) -> template( \"not implemented: create_function_body\"| ^( CALL_MODE call_spec ) -> template( \"not implemented: create_function_body\"| ^( BODY_MODE block ) -> create_function_body(is_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st))
			int alt17=3;
			switch ( input.LA(1) ) {
			case USING_MODE:
				{
				alt17=1;
				}
				break;
			case CALL_MODE:
				{
				alt17=2;
				}
				break;
			case BODY_MODE:
				{
				alt17=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 17, 0, input);
				throw nvae;
			}
			switch (alt17) {
				case 1 :
					// PLSQLPrinter.g:133:18: ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name )
					{
					match(input,USING_MODE,FOLLOW_USING_MODE_in_create_function_body643); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:133:31: ( AGGREGATE_VK )?
					int alt16=2;
					int LA16_0 = input.LA(1);
					if ( (LA16_0==AGGREGATE_VK) ) {
						alt16=1;
					}
					switch (alt16) {
						case 1 :
							// PLSQLPrinter.g:133:31: AGGREGATE_VK
							{
							match(input,AGGREGATE_VK,FOLLOW_AGGREGATE_VK_in_create_function_body645); 
							}
							break;

					}

					pushFollow(FOLLOW_implementation_type_name_in_create_function_body648);
					implementation_type_name();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 134:5: -> template( \"not implemented: create_function_body\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: create_function_body");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:135:18: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_create_function_body683); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_create_function_body685);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 136:5: -> template( \"not implemented: create_function_body\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: create_function_body");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:137:18: ^( BODY_MODE block )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_create_function_body720); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_create_function_body722);
					block21=block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 138:18: -> create_function_body(is_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st)
					{
						retval.st = templateLib.getInstanceOf("create_function_body",new STAttrMap().put("is_replace", REPLACE_VK19 != null).put("name_parts", list_name).put("arguments", list_args).put("return_type", (ret!=null?((StringTemplate)ret.getTemplate()):null)).put("add_clauses", list_ac).put("is_pipelined", PIPELINED_VK20 != null).put("block", (block21!=null?((StringTemplate)block21.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_function_body"


	public static class parallel_enable_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parallel_enable_clause"
	// PLSQLPrinter.g:147:1: parallel_enable_clause : ^( PARALLEL_ENABLE_VK ( partition_by_clause )? ) -> template( \"not implemented: parallel_enable_clause\";
	public final PLSQLPrinter.parallel_enable_clause_return parallel_enable_clause() throws RecognitionException {
		PLSQLPrinter.parallel_enable_clause_return retval = new PLSQLPrinter.parallel_enable_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:148:5: ( ^( PARALLEL_ENABLE_VK ( partition_by_clause )? ) -> template( \"not implemented: parallel_enable_clause\")
			// PLSQLPrinter.g:148:10: ^( PARALLEL_ENABLE_VK ( partition_by_clause )? )
			{
			match(input,PARALLEL_ENABLE_VK,FOLLOW_PARALLEL_ENABLE_VK_in_parallel_enable_clause888); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:148:31: ( partition_by_clause )?
				int alt18=2;
				int LA18_0 = input.LA(1);
				if ( (LA18_0==PARTITION_VK) ) {
					alt18=1;
				}
				switch (alt18) {
					case 1 :
						// PLSQLPrinter.g:148:31: partition_by_clause
						{
						pushFollow(FOLLOW_partition_by_clause_in_parallel_enable_clause890);
						partition_by_clause();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 149:5: -> template( \"not implemented: parallel_enable_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: parallel_enable_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parallel_enable_clause"


	public static class partition_by_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "partition_by_clause"
	// PLSQLPrinter.g:152:1: partition_by_clause : ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? ) -> template( \"not implemented: partition_by_clause\";
	public final PLSQLPrinter.partition_by_clause_return partition_by_clause() throws RecognitionException {
		PLSQLPrinter.partition_by_clause_return retval = new PLSQLPrinter.partition_by_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:153:5: ( ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? ) -> template( \"not implemented: partition_by_clause\")
			// PLSQLPrinter.g:153:10: ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_partition_by_clause927); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_partition_by_clause929);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:154:13: ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) )
			int alt21=3;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ANY:
				{
				alt21=1;
				}
				break;
			case HASH_VK:
				{
				alt21=2;
				}
				break;
			case RANGE_VK:
				{
				alt21=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 21, 0, input);
				throw nvae;
			}
			switch (alt21) {
				case 1 :
					// PLSQLPrinter.g:154:18: SQL92_RESERVED_ANY
					{
					match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_partition_by_clause949); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:155:18: ^( HASH_VK ^( COLUMNS ( column_name )+ ) )
					{
					match(input,HASH_VK,FOLLOW_HASH_VK_in_partition_by_clause969); 
					match(input, Token.DOWN, null); 
					match(input,COLUMNS,FOLLOW_COLUMNS_in_partition_by_clause972); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:155:38: ( column_name )+
					int cnt19=0;
					loop19:
					while (true) {
						int alt19=2;
						int LA19_0 = input.LA(1);
						if ( (LA19_0==COLUMN_NAME) ) {
							alt19=1;
						}

						switch (alt19) {
						case 1 :
							// PLSQLPrinter.g:155:38: column_name
							{
							pushFollow(FOLLOW_column_name_in_partition_by_clause974);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt19 >= 1 ) break loop19;
							EarlyExitException eee = new EarlyExitException(19, input);
							throw eee;
						}
						cnt19++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:156:18: ^( RANGE_VK ^( COLUMNS ( column_name )+ ) )
					{
					match(input,RANGE_VK,FOLLOW_RANGE_VK_in_partition_by_clause997); 
					match(input, Token.DOWN, null); 
					match(input,COLUMNS,FOLLOW_COLUMNS_in_partition_by_clause1000); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:156:39: ( column_name )+
					int cnt20=0;
					loop20:
					while (true) {
						int alt20=2;
						int LA20_0 = input.LA(1);
						if ( (LA20_0==COLUMN_NAME) ) {
							alt20=1;
						}

						switch (alt20) {
						case 1 :
							// PLSQLPrinter.g:156:39: column_name
							{
							pushFollow(FOLLOW_column_name_in_partition_by_clause1002);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt20 >= 1 ) break loop20;
							EarlyExitException eee = new EarlyExitException(20, input);
							throw eee;
						}
						cnt20++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;

			}

			// PLSQLPrinter.g:158:13: ( streaming_clause )?
			int alt22=2;
			int LA22_0 = input.LA(1);
			if ( (LA22_0==STREAMING_CLAUSE) ) {
				alt22=1;
			}
			switch (alt22) {
				case 1 :
					// PLSQLPrinter.g:158:13: streaming_clause
					{
					pushFollow(FOLLOW_streaming_clause_in_partition_by_clause1034);
					streaming_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 160:5: -> template( \"not implemented: partition_by_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: partition_by_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_by_clause"


	public static class result_cache_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "result_cache_clause"
	// PLSQLPrinter.g:163:1: result_cache_clause : ^( RESULT_CACHE_VK ( relies_on_part )? ) -> template( \"not implemented: result_cache_clause\";
	public final PLSQLPrinter.result_cache_clause_return result_cache_clause() throws RecognitionException {
		PLSQLPrinter.result_cache_clause_return retval = new PLSQLPrinter.result_cache_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:164:5: ( ^( RESULT_CACHE_VK ( relies_on_part )? ) -> template( \"not implemented: result_cache_clause\")
			// PLSQLPrinter.g:164:10: ^( RESULT_CACHE_VK ( relies_on_part )? )
			{
			match(input,RESULT_CACHE_VK,FOLLOW_RESULT_CACHE_VK_in_result_cache_clause1080); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:164:28: ( relies_on_part )?
				int alt23=2;
				int LA23_0 = input.LA(1);
				if ( (LA23_0==RELIES_ON_VK) ) {
					alt23=1;
				}
				switch (alt23) {
					case 1 :
						// PLSQLPrinter.g:164:28: relies_on_part
						{
						pushFollow(FOLLOW_relies_on_part_in_result_cache_clause1082);
						relies_on_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 165:5: -> template( \"not implemented: result_cache_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: result_cache_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "result_cache_clause"


	public static class relies_on_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "relies_on_part"
	// PLSQLPrinter.g:168:1: relies_on_part : ^( RELIES_ON_VK ( tableview_name )+ ) -> template( \"not implemented: relies_on_part\";
	public final PLSQLPrinter.relies_on_part_return relies_on_part() throws RecognitionException {
		PLSQLPrinter.relies_on_part_return retval = new PLSQLPrinter.relies_on_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:169:5: ( ^( RELIES_ON_VK ( tableview_name )+ ) -> template( \"not implemented: relies_on_part\")
			// PLSQLPrinter.g:169:10: ^( RELIES_ON_VK ( tableview_name )+ )
			{
			match(input,RELIES_ON_VK,FOLLOW_RELIES_ON_VK_in_relies_on_part1119); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:169:25: ( tableview_name )+
			int cnt24=0;
			loop24:
			while (true) {
				int alt24=2;
				int LA24_0 = input.LA(1);
				if ( (LA24_0==TABLEVIEW_NAME) ) {
					alt24=1;
				}

				switch (alt24) {
				case 1 :
					// PLSQLPrinter.g:169:25: tableview_name
					{
					pushFollow(FOLLOW_tableview_name_in_relies_on_part1121);
					tableview_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt24 >= 1 ) break loop24;
					EarlyExitException eee = new EarlyExitException(24, input);
					throw eee;
				}
				cnt24++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 170:5: -> template( \"not implemented: relies_on_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: relies_on_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "relies_on_part"


	public static class streaming_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "streaming_clause"
	// PLSQLPrinter.g:173:1: streaming_clause : ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) ) -> template( \"not implemented: streaming_clause\";
	public final PLSQLPrinter.streaming_clause_return streaming_clause() throws RecognitionException {
		PLSQLPrinter.streaming_clause_return retval = new PLSQLPrinter.streaming_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:174:5: ( ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) ) -> template( \"not implemented: streaming_clause\")
			// PLSQLPrinter.g:174:10: ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) )
			{
			match(input,STREAMING_CLAUSE,FOLLOW_STREAMING_CLAUSE_in_streaming_clause1158); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:174:29: ( SQL92_RESERVED_ORDER | CLUSTER_VK )
			int alt25=2;
			int LA25_0 = input.LA(1);
			if ( (LA25_0==SQL92_RESERVED_ORDER) ) {
				alt25=1;
			}
			else if ( (LA25_0==CLUSTER_VK) ) {
				alt25=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 25, 0, input);
				throw nvae;
			}

			switch (alt25) {
				case 1 :
					// PLSQLPrinter.g:174:30: SQL92_RESERVED_ORDER
					{
					match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_streaming_clause1161); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:174:51: CLUSTER_VK
					{
					match(input,CLUSTER_VK,FOLLOW_CLUSTER_VK_in_streaming_clause1163); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_streaming_clause1166);
			expression();
			state._fsp--;

			match(input,COLUMNS,FOLLOW_COLUMNS_in_streaming_clause1169); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:174:84: ( column_name )+
			int cnt26=0;
			loop26:
			while (true) {
				int alt26=2;
				int LA26_0 = input.LA(1);
				if ( (LA26_0==COLUMN_NAME) ) {
					alt26=1;
				}

				switch (alt26) {
				case 1 :
					// PLSQLPrinter.g:174:84: column_name
					{
					pushFollow(FOLLOW_column_name_in_streaming_clause1171);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt26 >= 1 ) break loop26;
					EarlyExitException eee = new EarlyExitException(26, input);
					throw eee;
				}
				cnt26++;
			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 175:5: -> template( \"not implemented: streaming_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: streaming_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "streaming_clause"


	public static class drop_package_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_package"
	// PLSQLPrinter.g:182:1: drop_package : ^( DROP_PACKAGE package_name ( BODY_VK )? ) -> template( \"not implemented: drop_package\";
	public final PLSQLPrinter.drop_package_return drop_package() throws RecognitionException {
		PLSQLPrinter.drop_package_return retval = new PLSQLPrinter.drop_package_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:183:5: ( ^( DROP_PACKAGE package_name ( BODY_VK )? ) -> template( \"not implemented: drop_package\")
			// PLSQLPrinter.g:183:10: ^( DROP_PACKAGE package_name ( BODY_VK )? )
			{
			match(input,DROP_PACKAGE,FOLLOW_DROP_PACKAGE_in_drop_package1214); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_package_name_in_drop_package1216);
			package_name();
			state._fsp--;

			// PLSQLPrinter.g:183:38: ( BODY_VK )?
			int alt27=2;
			int LA27_0 = input.LA(1);
			if ( (LA27_0==BODY_VK) ) {
				alt27=1;
			}
			switch (alt27) {
				case 1 :
					// PLSQLPrinter.g:183:38: BODY_VK
					{
					match(input,BODY_VK,FOLLOW_BODY_VK_in_drop_package1218); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 184:5: -> template( \"not implemented: drop_package\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_package");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_package"


	public static class alter_package_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_package"
	// PLSQLPrinter.g:187:1: alter_package : ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_package\";
	public final PLSQLPrinter.alter_package_return alter_package() throws RecognitionException {
		PLSQLPrinter.alter_package_return retval = new PLSQLPrinter.alter_package_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:188:5: ( ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_package\")
			// PLSQLPrinter.g:188:10: ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* )
			{
			match(input,ALTER_PACKAGE,FOLLOW_ALTER_PACKAGE_in_alter_package1255); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_package_name_in_alter_package1257);
			package_name();
			state._fsp--;

			// PLSQLPrinter.g:188:39: ( DEBUG_VK )?
			int alt28=2;
			int LA28_0 = input.LA(1);
			if ( (LA28_0==DEBUG_VK) ) {
				alt28=1;
			}
			switch (alt28) {
				case 1 :
					// PLSQLPrinter.g:188:39: DEBUG_VK
					{
					match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_package1259); 
					}
					break;

			}

			// PLSQLPrinter.g:188:49: ( REUSE_VK )?
			int alt29=2;
			int LA29_0 = input.LA(1);
			if ( (LA29_0==REUSE_VK) ) {
				alt29=1;
			}
			switch (alt29) {
				case 1 :
					// PLSQLPrinter.g:188:49: REUSE_VK
					{
					match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_package1262); 
					}
					break;

			}

			// PLSQLPrinter.g:189:17: ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )?
			int alt30=4;
			switch ( input.LA(1) ) {
				case PACKAGE_VK:
					{
					alt30=1;
					}
					break;
				case BODY_VK:
					{
					alt30=2;
					}
					break;
				case SPECIFICATION_VK:
					{
					alt30=3;
					}
					break;
			}
			switch (alt30) {
				case 1 :
					// PLSQLPrinter.g:189:18: PACKAGE_VK
					{
					match(input,PACKAGE_VK,FOLLOW_PACKAGE_VK_in_alter_package1283); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:189:29: BODY_VK
					{
					match(input,BODY_VK,FOLLOW_BODY_VK_in_alter_package1285); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:189:37: SPECIFICATION_VK
					{
					match(input,SPECIFICATION_VK,FOLLOW_SPECIFICATION_VK_in_alter_package1287); 
					}
					break;

			}

			// PLSQLPrinter.g:189:56: ( compiler_parameters_clause )*
			loop31:
			while (true) {
				int alt31=2;
				int LA31_0 = input.LA(1);
				if ( (LA31_0==COMPILER_PARAMETER) ) {
					alt31=1;
				}

				switch (alt31) {
				case 1 :
					// PLSQLPrinter.g:189:56: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_package1291);
					compiler_parameters_clause();
					state._fsp--;

					}
					break;

				default :
					break loop31;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 190:5: -> template( \"not implemented: alter_package\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_package");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_package"


	public static class create_package_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_package"
	// PLSQLPrinter.g:193:1: create_package : ( ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? package_name ( invoker_rights_clause )? (items+= package_obj_spec )* ) -> create_package_spec(is_replace=$REPLACE_VK != nullname=$package_name.stinvoker_rights_clause=$invoker_rights_clause.stitems=$items)| ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? package_name (items+= package_obj_body )* ( seq_of_statements )? ( exception_clause )? ) -> create_package_body(is_replace=$REPLACE_VK != nullname=$package_name.stitems=$itemsinit_section_seq_of_statements=$seq_of_statements.stinit_section_exception_clause=$exception_clause.st));
	public final PLSQLPrinter.create_package_return create_package() throws RecognitionException {
		PLSQLPrinter.create_package_return retval = new PLSQLPrinter.create_package_return();
		retval.start = input.LT(1);

		CommonTree REPLACE_VK22=null;
		CommonTree REPLACE_VK25=null;
		List<Object> list_items=null;
		TreeRuleReturnScope package_name23 =null;
		TreeRuleReturnScope invoker_rights_clause24 =null;
		TreeRuleReturnScope package_name26 =null;
		TreeRuleReturnScope seq_of_statements27 =null;
		TreeRuleReturnScope exception_clause28 =null;
		RuleReturnScope items = null;
		try {
			// PLSQLPrinter.g:194:5: ( ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? package_name ( invoker_rights_clause )? (items+= package_obj_spec )* ) -> create_package_spec(is_replace=$REPLACE_VK != nullname=$package_name.stinvoker_rights_clause=$invoker_rights_clause.stitems=$items)| ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? package_name (items+= package_obj_body )* ( seq_of_statements )? ( exception_clause )? ) -> create_package_body(is_replace=$REPLACE_VK != nullname=$package_name.stitems=$itemsinit_section_seq_of_statements=$seq_of_statements.stinit_section_exception_clause=$exception_clause.st))
			int alt39=2;
			int LA39_0 = input.LA(1);
			if ( (LA39_0==CREATE_PACKAGE_SPEC) ) {
				alt39=1;
			}
			else if ( (LA39_0==CREATE_PACKAGE_BODY) ) {
				alt39=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 39, 0, input);
				throw nvae;
			}

			switch (alt39) {
				case 1 :
					// PLSQLPrinter.g:194:10: ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? package_name ( invoker_rights_clause )? (items+= package_obj_spec )* )
					{
					match(input,CREATE_PACKAGE_SPEC,FOLLOW_CREATE_PACKAGE_SPEC_in_create_package1328); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:194:32: ( REPLACE_VK )?
					int alt32=2;
					int LA32_0 = input.LA(1);
					if ( (LA32_0==REPLACE_VK) ) {
						alt32=1;
					}
					switch (alt32) {
						case 1 :
							// PLSQLPrinter.g:194:32: REPLACE_VK
							{
							REPLACE_VK22=(CommonTree)match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_package1330); 
							}
							break;

					}

					pushFollow(FOLLOW_package_name_in_create_package1333);
					package_name23=package_name();
					state._fsp--;

					// PLSQLPrinter.g:194:57: ( invoker_rights_clause )?
					int alt33=2;
					int LA33_0 = input.LA(1);
					if ( (LA33_0==AUTHID_VK) ) {
						alt33=1;
					}
					switch (alt33) {
						case 1 :
							// PLSQLPrinter.g:194:57: invoker_rights_clause
							{
							pushFollow(FOLLOW_invoker_rights_clause_in_create_package1335);
							invoker_rights_clause24=invoker_rights_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:194:85: (items+= package_obj_spec )*
					loop34:
					while (true) {
						int alt34=2;
						int LA34_0 = input.LA(1);
						if ( (LA34_0==CURSOR_DECLARE||LA34_0==EXCEPTION_DECLARE||LA34_0==FUNCTION_SPEC||LA34_0==PRAGMA_DECLARE||LA34_0==PROCEDURE_SPEC||(LA34_0 >= RECORD_TYPE_DECLARE && LA34_0 <= RECORD_VAR_DECLARE)||LA34_0==SUBTYPE_DECLARE||(LA34_0 >= TABLE_TYPE_DECLARE && LA34_0 <= TABLE_VAR_DECLARE)||LA34_0==VARIABLE_DECLARE) ) {
							alt34=1;
						}

						switch (alt34) {
						case 1 :
							// PLSQLPrinter.g:194:85: items+= package_obj_spec
							{
							pushFollow(FOLLOW_package_obj_spec_in_create_package1340);
							items=package_obj_spec();
							state._fsp--;

							if (list_items==null) list_items=new ArrayList<Object>();
							list_items.add(items.getTemplate());
							}
							break;

						default :
							break loop34;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 195:5: -> create_package_spec(is_replace=$REPLACE_VK != nullname=$package_name.stinvoker_rights_clause=$invoker_rights_clause.stitems=$items)
					{
						retval.st = templateLib.getInstanceOf("create_package_spec",new STAttrMap().put("is_replace", REPLACE_VK22 != null).put("name", (package_name23!=null?((StringTemplate)package_name23.getTemplate()):null)).put("invoker_rights_clause", (invoker_rights_clause24!=null?((StringTemplate)invoker_rights_clause24.getTemplate()):null)).put("items", list_items));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:198:10: ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? package_name (items+= package_obj_body )* ( seq_of_statements )? ( exception_clause )? )
					{
					match(input,CREATE_PACKAGE_BODY,FOLLOW_CREATE_PACKAGE_BODY_in_create_package1408); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:198:32: ( REPLACE_VK )?
					int alt35=2;
					int LA35_0 = input.LA(1);
					if ( (LA35_0==REPLACE_VK) ) {
						alt35=1;
					}
					switch (alt35) {
						case 1 :
							// PLSQLPrinter.g:198:32: REPLACE_VK
							{
							REPLACE_VK25=(CommonTree)match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_package1410); 
							}
							break;

					}

					pushFollow(FOLLOW_package_name_in_create_package1413);
					package_name26=package_name();
					state._fsp--;

					// PLSQLPrinter.g:198:62: (items+= package_obj_body )*
					loop36:
					while (true) {
						int alt36=2;
						int LA36_0 = input.LA(1);
						if ( (LA36_0==CREATE_FUNCTION||LA36_0==CREATE_PROCEDURE||(LA36_0 >= CREATE_TYPE_BODY && LA36_0 <= CREATE_TYPE_SPEC)||LA36_0==CURSOR_DECLARE||LA36_0==EXCEPTION_DECLARE||LA36_0==FUNCTION_SPEC||LA36_0==PROCEDURE_SPEC||(LA36_0 >= RECORD_TYPE_DECLARE && LA36_0 <= RECORD_VAR_DECLARE)||LA36_0==SUBTYPE_DECLARE||(LA36_0 >= TABLE_TYPE_DECLARE && LA36_0 <= TABLE_VAR_DECLARE)||LA36_0==VARIABLE_DECLARE) ) {
							alt36=1;
						}

						switch (alt36) {
						case 1 :
							// PLSQLPrinter.g:198:62: items+= package_obj_body
							{
							pushFollow(FOLLOW_package_obj_body_in_create_package1417);
							items=package_obj_body();
							state._fsp--;

							if (list_items==null) list_items=new ArrayList<Object>();
							list_items.add(items.getTemplate());
							}
							break;

						default :
							break loop36;
						}
					}

					// PLSQLPrinter.g:198:82: ( seq_of_statements )?
					int alt37=2;
					int LA37_0 = input.LA(1);
					if ( (LA37_0==STATEMENTS) ) {
						alt37=1;
					}
					switch (alt37) {
						case 1 :
							// PLSQLPrinter.g:198:82: seq_of_statements
							{
							pushFollow(FOLLOW_seq_of_statements_in_create_package1420);
							seq_of_statements27=seq_of_statements();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:198:101: ( exception_clause )?
					int alt38=2;
					int LA38_0 = input.LA(1);
					if ( (LA38_0==SQL92_RESERVED_EXCEPTION) ) {
						alt38=1;
					}
					switch (alt38) {
						case 1 :
							// PLSQLPrinter.g:198:101: exception_clause
							{
							pushFollow(FOLLOW_exception_clause_in_create_package1423);
							exception_clause28=exception_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 199:5: -> create_package_body(is_replace=$REPLACE_VK != nullname=$package_name.stitems=$itemsinit_section_seq_of_statements=$seq_of_statements.stinit_section_exception_clause=$exception_clause.st)
					{
						retval.st = templateLib.getInstanceOf("create_package_body",new STAttrMap().put("is_replace", REPLACE_VK25 != null).put("name", (package_name26!=null?((StringTemplate)package_name26.getTemplate()):null)).put("items", list_items).put("init_section_seq_of_statements", (seq_of_statements27!=null?((StringTemplate)seq_of_statements27.getTemplate()):null)).put("init_section_exception_clause", (exception_clause28!=null?((StringTemplate)exception_clause28.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_package"


	public static class package_obj_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "package_obj_spec"
	// PLSQLPrinter.g:207:1: package_obj_spec : ( variable_declaration -> { $variable_declaration.st}| subtype_declaration -> { $subtype_declaration.st}| cursor_declaration -> { $cursor_declaration.st}| exception_declaration -> { $exception_declaration.st}| record_declaration -> { $record_declaration.st}| table_declaration -> { $table_declaration.st}| procedure_spec -> { $procedure_spec.st}| function_spec -> { $function_spec.st}| pragma_declaration -> { $pragma_declaration.st});
	public final PLSQLPrinter.package_obj_spec_return package_obj_spec() throws RecognitionException {
		PLSQLPrinter.package_obj_spec_return retval = new PLSQLPrinter.package_obj_spec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope variable_declaration29 =null;
		TreeRuleReturnScope subtype_declaration30 =null;
		TreeRuleReturnScope cursor_declaration31 =null;
		TreeRuleReturnScope exception_declaration32 =null;
		TreeRuleReturnScope record_declaration33 =null;
		TreeRuleReturnScope table_declaration34 =null;
		TreeRuleReturnScope procedure_spec35 =null;
		TreeRuleReturnScope function_spec36 =null;
		TreeRuleReturnScope pragma_declaration37 =null;

		try {
			// PLSQLPrinter.g:208:5: ( variable_declaration -> { $variable_declaration.st}| subtype_declaration -> { $subtype_declaration.st}| cursor_declaration -> { $cursor_declaration.st}| exception_declaration -> { $exception_declaration.st}| record_declaration -> { $record_declaration.st}| table_declaration -> { $table_declaration.st}| procedure_spec -> { $procedure_spec.st}| function_spec -> { $function_spec.st}| pragma_declaration -> { $pragma_declaration.st})
			int alt40=9;
			switch ( input.LA(1) ) {
			case VARIABLE_DECLARE:
				{
				alt40=1;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt40=2;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt40=3;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt40=4;
				}
				break;
			case RECORD_TYPE_DECLARE:
			case RECORD_VAR_DECLARE:
				{
				alt40=5;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt40=6;
				}
				break;
			case PROCEDURE_SPEC:
				{
				alt40=7;
				}
				break;
			case FUNCTION_SPEC:
				{
				alt40=8;
				}
				break;
			case PRAGMA_DECLARE:
				{
				alt40=9;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 40, 0, input);
				throw nvae;
			}
			switch (alt40) {
				case 1 :
					// PLSQLPrinter.g:208:10: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_package_obj_spec1516);
					variable_declaration29=variable_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 208:31: -> { $variable_declaration.st}
					{
						retval.st =  (variable_declaration29!=null?((StringTemplate)variable_declaration29.getTemplate()):null);
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:209:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_package_obj_spec1532);
					subtype_declaration30=subtype_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 209:31: -> { $subtype_declaration.st}
					{
						retval.st =  (subtype_declaration30!=null?((StringTemplate)subtype_declaration30.getTemplate()):null);
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:210:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_package_obj_spec1548);
					cursor_declaration31=cursor_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 210:30: -> { $cursor_declaration.st}
					{
						retval.st =  (cursor_declaration31!=null?((StringTemplate)cursor_declaration31.getTemplate()):null);
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:211:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_package_obj_spec1564);
					exception_declaration32=exception_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 211:33: -> { $exception_declaration.st}
					{
						retval.st =  (exception_declaration32!=null?((StringTemplate)exception_declaration32.getTemplate()):null);
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:212:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_package_obj_spec1580);
					record_declaration33=record_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 212:30: -> { $record_declaration.st}
					{
						retval.st =  (record_declaration33!=null?((StringTemplate)record_declaration33.getTemplate()):null);
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:213:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_package_obj_spec1596);
					table_declaration34=table_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 213:29: -> { $table_declaration.st}
					{
						retval.st =  (table_declaration34!=null?((StringTemplate)table_declaration34.getTemplate()):null);
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:214:11: procedure_spec
					{
					pushFollow(FOLLOW_procedure_spec_in_package_obj_spec1612);
					procedure_spec35=procedure_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 214:26: -> { $procedure_spec.st}
					{
						retval.st =  (procedure_spec35!=null?((StringTemplate)procedure_spec35.getTemplate()):null);
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:215:11: function_spec
					{
					pushFollow(FOLLOW_function_spec_in_package_obj_spec1628);
					function_spec36=function_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 215:25: -> { $function_spec.st}
					{
						retval.st =  (function_spec36!=null?((StringTemplate)function_spec36.getTemplate()):null);
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:216:11: pragma_declaration
					{
					pushFollow(FOLLOW_pragma_declaration_in_package_obj_spec1644);
					pragma_declaration37=pragma_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 216:30: -> { $pragma_declaration.st}
					{
						retval.st =  (pragma_declaration37!=null?((StringTemplate)pragma_declaration37.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_obj_spec"


	public static class procedure_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "procedure_spec"
	// PLSQLPrinter.g:219:1: procedure_spec : ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( ^( CALL_MODE call_spec ) )? ) -> procedure_spec(name=$procedure_name.starguments=$arguments);
	public final PLSQLPrinter.procedure_spec_return procedure_spec() throws RecognitionException {
		PLSQLPrinter.procedure_spec_return retval = new PLSQLPrinter.procedure_spec_return();
		retval.start = input.LT(1);

		List<Object> list_arguments=null;
		TreeRuleReturnScope procedure_name38 =null;
		RuleReturnScope arguments = null;
		try {
			// PLSQLPrinter.g:220:5: ( ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( ^( CALL_MODE call_spec ) )? ) -> procedure_spec(name=$procedure_name.starguments=$arguments))
			// PLSQLPrinter.g:220:11: ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( ^( CALL_MODE call_spec ) )? )
			{
			match(input,PROCEDURE_SPEC,FOLLOW_PROCEDURE_SPEC_in_procedure_spec1670); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_procedure_name_in_procedure_spec1672);
			procedure_name38=procedure_name();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_procedure_spec1675); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:220:65: (arguments+= parameter )*
				loop41:
				while (true) {
					int alt41=2;
					int LA41_0 = input.LA(1);
					if ( (LA41_0==PARAMETER) ) {
						alt41=1;
					}

					switch (alt41) {
					case 1 :
						// PLSQLPrinter.g:220:65: arguments+= parameter
						{
						pushFollow(FOLLOW_parameter_in_procedure_spec1679);
						arguments=parameter();
						state._fsp--;

						if (list_arguments==null) list_arguments=new ArrayList<Object>();
						list_arguments.add(arguments.getTemplate());
						}
						break;

					default :
						break loop41;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:221:13: ( ^( CALL_MODE call_spec ) )?
			int alt42=2;
			int LA42_0 = input.LA(1);
			if ( (LA42_0==CALL_MODE) ) {
				alt42=1;
			}
			switch (alt42) {
				case 1 :
					// PLSQLPrinter.g:221:14: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_procedure_spec1697); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_procedure_spec1699);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 223:5: -> procedure_spec(name=$procedure_name.starguments=$arguments)
			{
				retval.st = templateLib.getInstanceOf("procedure_spec",new STAttrMap().put("name", (procedure_name38!=null?((StringTemplate)procedure_name38.getTemplate()):null)).put("arguments", list_arguments));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "procedure_spec"


	public static class function_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "function_spec"
	// PLSQLPrinter.g:226:1: function_spec : ^( FUNCTION_SPEC function_name type_spec ^( PARAMETERS (arguments+= parameter )* ) ( PIPELINED_VK )? ( RESULT_CACHE_VK )? ( DETERMINISTIC_VK )? ) -> function_spec(name=$function_name.starguments=$argumentsreturn_type=$type_spec.stis_pipelined=$PIPELINED_VK != nullis_result_cache=$RESULT_CACHE_VK != nullis_deterministic=$DETERMINISTIC_VK != null);
	public final PLSQLPrinter.function_spec_return function_spec() throws RecognitionException {
		PLSQLPrinter.function_spec_return retval = new PLSQLPrinter.function_spec_return();
		retval.start = input.LT(1);

		CommonTree PIPELINED_VK41=null;
		CommonTree RESULT_CACHE_VK42=null;
		CommonTree DETERMINISTIC_VK43=null;
		List<Object> list_arguments=null;
		TreeRuleReturnScope function_name39 =null;
		TreeRuleReturnScope type_spec40 =null;
		RuleReturnScope arguments = null;
		try {
			// PLSQLPrinter.g:227:5: ( ^( FUNCTION_SPEC function_name type_spec ^( PARAMETERS (arguments+= parameter )* ) ( PIPELINED_VK )? ( RESULT_CACHE_VK )? ( DETERMINISTIC_VK )? ) -> function_spec(name=$function_name.starguments=$argumentsreturn_type=$type_spec.stis_pipelined=$PIPELINED_VK != nullis_result_cache=$RESULT_CACHE_VK != nullis_deterministic=$DETERMINISTIC_VK != null))
			// PLSQLPrinter.g:227:10: ^( FUNCTION_SPEC function_name type_spec ^( PARAMETERS (arguments+= parameter )* ) ( PIPELINED_VK )? ( RESULT_CACHE_VK )? ( DETERMINISTIC_VK )? )
			{
			match(input,FUNCTION_SPEC,FOLLOW_FUNCTION_SPEC_in_function_spec1749); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_name_in_function_spec1751);
			function_name39=function_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_function_spec1753);
			type_spec40=type_spec();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_function_spec1756); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:227:72: (arguments+= parameter )*
				loop43:
				while (true) {
					int alt43=2;
					int LA43_0 = input.LA(1);
					if ( (LA43_0==PARAMETER) ) {
						alt43=1;
					}

					switch (alt43) {
					case 1 :
						// PLSQLPrinter.g:227:72: arguments+= parameter
						{
						pushFollow(FOLLOW_parameter_in_function_spec1760);
						arguments=parameter();
						state._fsp--;

						if (list_arguments==null) list_arguments=new ArrayList<Object>();
						list_arguments.add(arguments.getTemplate());
						}
						break;

					default :
						break loop43;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:228:13: ( PIPELINED_VK )?
			int alt44=2;
			int LA44_0 = input.LA(1);
			if ( (LA44_0==PIPELINED_VK) ) {
				alt44=1;
			}
			switch (alt44) {
				case 1 :
					// PLSQLPrinter.g:228:13: PIPELINED_VK
					{
					PIPELINED_VK41=(CommonTree)match(input,PIPELINED_VK,FOLLOW_PIPELINED_VK_in_function_spec1776); 
					}
					break;

			}

			// PLSQLPrinter.g:228:27: ( RESULT_CACHE_VK )?
			int alt45=2;
			int LA45_0 = input.LA(1);
			if ( (LA45_0==RESULT_CACHE_VK) ) {
				alt45=1;
			}
			switch (alt45) {
				case 1 :
					// PLSQLPrinter.g:228:27: RESULT_CACHE_VK
					{
					RESULT_CACHE_VK42=(CommonTree)match(input,RESULT_CACHE_VK,FOLLOW_RESULT_CACHE_VK_in_function_spec1779); 
					}
					break;

			}

			// PLSQLPrinter.g:228:44: ( DETERMINISTIC_VK )?
			int alt46=2;
			int LA46_0 = input.LA(1);
			if ( (LA46_0==DETERMINISTIC_VK) ) {
				alt46=1;
			}
			switch (alt46) {
				case 1 :
					// PLSQLPrinter.g:228:44: DETERMINISTIC_VK
					{
					DETERMINISTIC_VK43=(CommonTree)match(input,DETERMINISTIC_VK,FOLLOW_DETERMINISTIC_VK_in_function_spec1782); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 230:5: -> function_spec(name=$function_name.starguments=$argumentsreturn_type=$type_spec.stis_pipelined=$PIPELINED_VK != nullis_result_cache=$RESULT_CACHE_VK != nullis_deterministic=$DETERMINISTIC_VK != null)
			{
				retval.st = templateLib.getInstanceOf("function_spec",new STAttrMap().put("name", (function_name39!=null?((StringTemplate)function_name39.getTemplate()):null)).put("arguments", list_arguments).put("return_type", (type_spec40!=null?((StringTemplate)type_spec40.getTemplate()):null)).put("is_pipelined", PIPELINED_VK41 != null).put("is_result_cache", RESULT_CACHE_VK42 != null).put("is_deterministic", DETERMINISTIC_VK43 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_spec"


	public static class package_obj_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "package_obj_body"
	// PLSQLPrinter.g:235:1: package_obj_body : ( procedure_spec -> { $procedure_spec.st}| function_spec -> { $function_spec.st}| variable_declaration -> {$variable_declaration.st}| subtype_declaration -> {$subtype_declaration.st}| cursor_declaration -> {$cursor_declaration.st}| exception_declaration -> {$exception_declaration.st}| record_declaration -> {$record_declaration.st}| table_declaration -> {$table_declaration.st}| create_procedure_body -> {$create_procedure_body.st}| create_function_body -> {$create_function_body.st}| create_type -> {$create_type.st});
	public final PLSQLPrinter.package_obj_body_return package_obj_body() throws RecognitionException {
		PLSQLPrinter.package_obj_body_return retval = new PLSQLPrinter.package_obj_body_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope procedure_spec44 =null;
		TreeRuleReturnScope function_spec45 =null;
		TreeRuleReturnScope variable_declaration46 =null;
		TreeRuleReturnScope subtype_declaration47 =null;
		TreeRuleReturnScope cursor_declaration48 =null;
		TreeRuleReturnScope exception_declaration49 =null;
		TreeRuleReturnScope record_declaration50 =null;
		TreeRuleReturnScope table_declaration51 =null;
		TreeRuleReturnScope create_procedure_body52 =null;
		TreeRuleReturnScope create_function_body53 =null;
		TreeRuleReturnScope create_type54 =null;

		try {
			// PLSQLPrinter.g:236:5: ( procedure_spec -> { $procedure_spec.st}| function_spec -> { $function_spec.st}| variable_declaration -> {$variable_declaration.st}| subtype_declaration -> {$subtype_declaration.st}| cursor_declaration -> {$cursor_declaration.st}| exception_declaration -> {$exception_declaration.st}| record_declaration -> {$record_declaration.st}| table_declaration -> {$table_declaration.st}| create_procedure_body -> {$create_procedure_body.st}| create_function_body -> {$create_function_body.st}| create_type -> {$create_type.st})
			int alt47=11;
			switch ( input.LA(1) ) {
			case PROCEDURE_SPEC:
				{
				alt47=1;
				}
				break;
			case FUNCTION_SPEC:
				{
				alt47=2;
				}
				break;
			case VARIABLE_DECLARE:
				{
				alt47=3;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt47=4;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt47=5;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt47=6;
				}
				break;
			case RECORD_TYPE_DECLARE:
			case RECORD_VAR_DECLARE:
				{
				alt47=7;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt47=8;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt47=9;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt47=10;
				}
				break;
			case CREATE_TYPE_BODY:
			case CREATE_TYPE_SPEC:
				{
				alt47=11;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 47, 0, input);
				throw nvae;
			}
			switch (alt47) {
				case 1 :
					// PLSQLPrinter.g:236:11: procedure_spec
					{
					pushFollow(FOLLOW_procedure_spec_in_package_obj_body1877);
					procedure_spec44=procedure_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 236:26: -> { $procedure_spec.st}
					{
						retval.st =  (procedure_spec44!=null?((StringTemplate)procedure_spec44.getTemplate()):null);
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:237:11: function_spec
					{
					pushFollow(FOLLOW_function_spec_in_package_obj_body1893);
					function_spec45=function_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 237:25: -> { $function_spec.st}
					{
						retval.st =  (function_spec45!=null?((StringTemplate)function_spec45.getTemplate()):null);
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:238:11: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_package_obj_body1909);
					variable_declaration46=variable_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 238:32: -> {$variable_declaration.st}
					{
						retval.st = (variable_declaration46!=null?((StringTemplate)variable_declaration46.getTemplate()):null);
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:239:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_package_obj_body1925);
					subtype_declaration47=subtype_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 239:31: -> {$subtype_declaration.st}
					{
						retval.st = (subtype_declaration47!=null?((StringTemplate)subtype_declaration47.getTemplate()):null);
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:240:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_package_obj_body1941);
					cursor_declaration48=cursor_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 240:30: -> {$cursor_declaration.st}
					{
						retval.st = (cursor_declaration48!=null?((StringTemplate)cursor_declaration48.getTemplate()):null);
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:241:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_package_obj_body1957);
					exception_declaration49=exception_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 241:33: -> {$exception_declaration.st}
					{
						retval.st = (exception_declaration49!=null?((StringTemplate)exception_declaration49.getTemplate()):null);
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:242:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_package_obj_body1973);
					record_declaration50=record_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 242:30: -> {$record_declaration.st}
					{
						retval.st = (record_declaration50!=null?((StringTemplate)record_declaration50.getTemplate()):null);
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:243:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_package_obj_body1989);
					table_declaration51=table_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 243:29: -> {$table_declaration.st}
					{
						retval.st = (table_declaration51!=null?((StringTemplate)table_declaration51.getTemplate()):null);
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:244:11: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_package_obj_body2005);
					create_procedure_body52=create_procedure_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 244:33: -> {$create_procedure_body.st}
					{
						retval.st = (create_procedure_body52!=null?((StringTemplate)create_procedure_body52.getTemplate()):null);
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:245:11: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_package_obj_body2021);
					create_function_body53=create_function_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 245:32: -> {$create_function_body.st}
					{
						retval.st = (create_function_body53!=null?((StringTemplate)create_function_body53.getTemplate()):null);
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:246:11: create_type
					{
					pushFollow(FOLLOW_create_type_in_package_obj_body2037);
					create_type54=create_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 246:23: -> {$create_type.st}
					{
						retval.st = (create_type54!=null?((StringTemplate)create_type54.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_obj_body"


	public static class drop_procedure_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_procedure"
	// PLSQLPrinter.g:255:1: drop_procedure : ^( DROP_PROCEDURE procedure_name ) -> template( \"not implemented: drop_procedure\";
	public final PLSQLPrinter.drop_procedure_return drop_procedure() throws RecognitionException {
		PLSQLPrinter.drop_procedure_return retval = new PLSQLPrinter.drop_procedure_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:256:5: ( ^( DROP_PROCEDURE procedure_name ) -> template( \"not implemented: drop_procedure\")
			// PLSQLPrinter.g:256:10: ^( DROP_PROCEDURE procedure_name )
			{
			match(input,DROP_PROCEDURE,FOLLOW_DROP_PROCEDURE_in_drop_procedure2068); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_procedure_name_in_drop_procedure2070);
			procedure_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 257:5: -> template( \"not implemented: drop_procedure\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_procedure");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_procedure"


	public static class alter_procedure_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_procedure"
	// PLSQLPrinter.g:260:1: alter_procedure : ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_procedure\";
	public final PLSQLPrinter.alter_procedure_return alter_procedure() throws RecognitionException {
		PLSQLPrinter.alter_procedure_return retval = new PLSQLPrinter.alter_procedure_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:261:5: ( ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_procedure\")
			// PLSQLPrinter.g:261:10: ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
			{
			match(input,ALTER_PROCEDURE,FOLLOW_ALTER_PROCEDURE_in_alter_procedure2106); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_procedure_name_in_alter_procedure2108);
			procedure_name();
			state._fsp--;

			// PLSQLPrinter.g:261:43: ( DEBUG_VK )?
			int alt48=2;
			int LA48_0 = input.LA(1);
			if ( (LA48_0==DEBUG_VK) ) {
				alt48=1;
			}
			switch (alt48) {
				case 1 :
					// PLSQLPrinter.g:261:43: DEBUG_VK
					{
					match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_procedure2110); 
					}
					break;

			}

			// PLSQLPrinter.g:261:53: ( REUSE_VK )?
			int alt49=2;
			int LA49_0 = input.LA(1);
			if ( (LA49_0==REUSE_VK) ) {
				alt49=1;
			}
			switch (alt49) {
				case 1 :
					// PLSQLPrinter.g:261:53: REUSE_VK
					{
					match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_procedure2113); 
					}
					break;

			}

			// PLSQLPrinter.g:261:63: ( compiler_parameters_clause )*
			loop50:
			while (true) {
				int alt50=2;
				int LA50_0 = input.LA(1);
				if ( (LA50_0==COMPILER_PARAMETER) ) {
					alt50=1;
				}

				switch (alt50) {
				case 1 :
					// PLSQLPrinter.g:261:63: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_procedure2116);
					compiler_parameters_clause();
					state._fsp--;

					}
					break;

				default :
					break loop50;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 262:5: -> template( \"not implemented: alter_procedure\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_procedure");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_procedure"


	public static class create_procedure_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_procedure_body"
	// PLSQLPrinter.g:265:1: create_procedure_body : ^( CREATE_PROCEDURE ( REPLACE_VK )? procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( invoker_rights_clause )? create_procedure_body_impl ) -> create_procedure_body(is_replace=$REPLACE_VK != nullname=$procedure_name.starguments=$argumentsinvoker_rights_clause=$invoker_rights_clause.stimpl=$create_procedure_body_impl.st);
	public final PLSQLPrinter.create_procedure_body_return create_procedure_body() throws RecognitionException {
		PLSQLPrinter.create_procedure_body_return retval = new PLSQLPrinter.create_procedure_body_return();
		retval.start = input.LT(1);

		CommonTree REPLACE_VK55=null;
		List<Object> list_arguments=null;
		TreeRuleReturnScope procedure_name56 =null;
		TreeRuleReturnScope invoker_rights_clause57 =null;
		TreeRuleReturnScope create_procedure_body_impl58 =null;
		RuleReturnScope arguments = null;
		try {
			// PLSQLPrinter.g:266:5: ( ^( CREATE_PROCEDURE ( REPLACE_VK )? procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( invoker_rights_clause )? create_procedure_body_impl ) -> create_procedure_body(is_replace=$REPLACE_VK != nullname=$procedure_name.starguments=$argumentsinvoker_rights_clause=$invoker_rights_clause.stimpl=$create_procedure_body_impl.st))
			// PLSQLPrinter.g:266:10: ^( CREATE_PROCEDURE ( REPLACE_VK )? procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( invoker_rights_clause )? create_procedure_body_impl )
			{
			match(input,CREATE_PROCEDURE,FOLLOW_CREATE_PROCEDURE_in_create_procedure_body2153); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:266:29: ( REPLACE_VK )?
			int alt51=2;
			int LA51_0 = input.LA(1);
			if ( (LA51_0==REPLACE_VK) ) {
				alt51=1;
			}
			switch (alt51) {
				case 1 :
					// PLSQLPrinter.g:266:29: REPLACE_VK
					{
					REPLACE_VK55=(CommonTree)match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_procedure_body2155); 
					}
					break;

			}

			pushFollow(FOLLOW_procedure_name_in_create_procedure_body2158);
			procedure_name56=procedure_name();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_create_procedure_body2161); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:266:78: (arguments+= parameter )*
				loop52:
				while (true) {
					int alt52=2;
					int LA52_0 = input.LA(1);
					if ( (LA52_0==PARAMETER) ) {
						alt52=1;
					}

					switch (alt52) {
					case 1 :
						// PLSQLPrinter.g:266:78: arguments+= parameter
						{
						pushFollow(FOLLOW_parameter_in_create_procedure_body2165);
						arguments=parameter();
						state._fsp--;

						if (list_arguments==null) list_arguments=new ArrayList<Object>();
						list_arguments.add(arguments.getTemplate());
						}
						break;

					default :
						break loop52;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:266:92: ( invoker_rights_clause )?
			int alt53=2;
			int LA53_0 = input.LA(1);
			if ( (LA53_0==AUTHID_VK) ) {
				alt53=1;
			}
			switch (alt53) {
				case 1 :
					// PLSQLPrinter.g:266:92: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_create_procedure_body2169);
					invoker_rights_clause57=invoker_rights_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_create_procedure_body_impl_in_create_procedure_body2183);
			create_procedure_body_impl58=create_procedure_body_impl();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 269:5: -> create_procedure_body(is_replace=$REPLACE_VK != nullname=$procedure_name.starguments=$argumentsinvoker_rights_clause=$invoker_rights_clause.stimpl=$create_procedure_body_impl.st)
			{
				retval.st = templateLib.getInstanceOf("create_procedure_body",new STAttrMap().put("is_replace", REPLACE_VK55 != null).put("name", (procedure_name56!=null?((StringTemplate)procedure_name56.getTemplate()):null)).put("arguments", list_arguments).put("invoker_rights_clause", (invoker_rights_clause57!=null?((StringTemplate)invoker_rights_clause57.getTemplate()):null)).put("impl", (create_procedure_body_impl58!=null?((StringTemplate)create_procedure_body_impl58.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_procedure_body"


	public static class create_procedure_body_impl_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_procedure_body_impl"
	// PLSQLPrinter.g:274:1: create_procedure_body_impl : ( EXTERNAL_VK -> create_procedure_body_impl_external(| ^( CALL_MODE call_spec ) -> template( \"not implemented: alter_procedure\"| ^( BODY_MODE block ) -> { $block.st });
	public final PLSQLPrinter.create_procedure_body_impl_return create_procedure_body_impl() throws RecognitionException {
		PLSQLPrinter.create_procedure_body_impl_return retval = new PLSQLPrinter.create_procedure_body_impl_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope block59 =null;

		try {
			// PLSQLPrinter.g:275:5: ( EXTERNAL_VK -> create_procedure_body_impl_external(| ^( CALL_MODE call_spec ) -> template( \"not implemented: alter_procedure\"| ^( BODY_MODE block ) -> { $block.st })
			int alt54=3;
			switch ( input.LA(1) ) {
			case EXTERNAL_VK:
				{
				alt54=1;
				}
				break;
			case CALL_MODE:
				{
				alt54=2;
				}
				break;
			case BODY_MODE:
				{
				alt54=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 54, 0, input);
				throw nvae;
			}
			switch (alt54) {
				case 1 :
					// PLSQLPrinter.g:275:9: EXTERNAL_VK
					{
					match(input,EXTERNAL_VK,FOLLOW_EXTERNAL_VK_in_create_procedure_body_impl2272); 
					// TEMPLATE REWRITE
					// 275:21: -> create_procedure_body_impl_external(
					{
						retval.st = templateLib.getInstanceOf("create_procedure_body_impl_external");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:276:14: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_create_procedure_body_impl2294); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_create_procedure_body_impl2296);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 277:9: -> template( \"not implemented: alter_procedure\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: alter_procedure");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:278:14: ^( BODY_MODE block )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_create_procedure_body_impl2331); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_create_procedure_body_impl2333);
					block59=block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 278:33: -> { $block.st }
					{
						retval.st =  (block59!=null?((StringTemplate)block59.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_procedure_body_impl"


	public static class drop_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_trigger"
	// PLSQLPrinter.g:285:1: drop_trigger : ^( DROP_TRIGGER trigger_name ) -> template( \"not implemented: drop_trigger\";
	public final PLSQLPrinter.drop_trigger_return drop_trigger() throws RecognitionException {
		PLSQLPrinter.drop_trigger_return retval = new PLSQLPrinter.drop_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:286:5: ( ^( DROP_TRIGGER trigger_name ) -> template( \"not implemented: drop_trigger\")
			// PLSQLPrinter.g:286:10: ^( DROP_TRIGGER trigger_name )
			{
			match(input,DROP_TRIGGER,FOLLOW_DROP_TRIGGER_in_drop_trigger2363); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_trigger_name_in_drop_trigger2365);
			trigger_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 287:5: -> template( \"not implemented: drop_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_trigger"


	public static class alter_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_trigger"
	// PLSQLPrinter.g:290:1: alter_trigger : ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) -> template( \"not implemented: alter_trigger\";
	public final PLSQLPrinter.alter_trigger_return alter_trigger() throws RecognitionException {
		PLSQLPrinter.alter_trigger_return retval = new PLSQLPrinter.alter_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:291:5: ( ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) -> template( \"not implemented: alter_trigger\")
			// PLSQLPrinter.g:291:10: ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
			{
			match(input,ALTER_TRIGGER,FOLLOW_ALTER_TRIGGER_in_alter_trigger2401); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_trigger_name_in_alter_trigger2403);
			trigger_name();
			state._fsp--;

			// PLSQLPrinter.g:292:13: ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
			int alt59=3;
			switch ( input.LA(1) ) {
			case DISABLE_VK:
			case ENABLE_VK:
				{
				alt59=1;
				}
				break;
			case RENAME_VK:
				{
				alt59=2;
				}
				break;
			case UP:
			case COMPILER_PARAMETER:
			case DEBUG_VK:
			case REUSE_VK:
				{
				alt59=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 59, 0, input);
				throw nvae;
			}
			switch (alt59) {
				case 1 :
					// PLSQLPrinter.g:292:18: ( ENABLE_VK | DISABLE_VK )
					{
					// PLSQLPrinter.g:292:18: ( ENABLE_VK | DISABLE_VK )
					int alt55=2;
					int LA55_0 = input.LA(1);
					if ( (LA55_0==ENABLE_VK) ) {
						alt55=1;
					}
					else if ( (LA55_0==DISABLE_VK) ) {
						alt55=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 55, 0, input);
						throw nvae;
					}

					switch (alt55) {
						case 1 :
							// PLSQLPrinter.g:292:19: ENABLE_VK
							{
							match(input,ENABLE_VK,FOLLOW_ENABLE_VK_in_alter_trigger2424); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:292:29: DISABLE_VK
							{
							match(input,DISABLE_VK,FOLLOW_DISABLE_VK_in_alter_trigger2426); 
							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:293:18: ^( RENAME_VK trigger_name )
					{
					match(input,RENAME_VK,FOLLOW_RENAME_VK_in_alter_trigger2447); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_trigger_name_in_alter_trigger2449);
					trigger_name();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:294:18: ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )*
					{
					// PLSQLPrinter.g:294:18: ( DEBUG_VK )?
					int alt56=2;
					int LA56_0 = input.LA(1);
					if ( (LA56_0==DEBUG_VK) ) {
						alt56=1;
					}
					switch (alt56) {
						case 1 :
							// PLSQLPrinter.g:294:18: DEBUG_VK
							{
							match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_trigger2469); 
							}
							break;

					}

					// PLSQLPrinter.g:294:28: ( REUSE_VK )?
					int alt57=2;
					int LA57_0 = input.LA(1);
					if ( (LA57_0==REUSE_VK) ) {
						alt57=1;
					}
					switch (alt57) {
						case 1 :
							// PLSQLPrinter.g:294:28: REUSE_VK
							{
							match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_trigger2472); 
							}
							break;

					}

					// PLSQLPrinter.g:294:38: ( compiler_parameters_clause )*
					loop58:
					while (true) {
						int alt58=2;
						int LA58_0 = input.LA(1);
						if ( (LA58_0==COMPILER_PARAMETER) ) {
							alt58=1;
						}

						switch (alt58) {
						case 1 :
							// PLSQLPrinter.g:294:38: compiler_parameters_clause
							{
							pushFollow(FOLLOW_compiler_parameters_clause_in_alter_trigger2475);
							compiler_parameters_clause();
							state._fsp--;

							}
							break;

						default :
							break loop58;
						}
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 297:5: -> template( \"not implemented: alter_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_trigger"


	public static class create_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_trigger"
	// PLSQLPrinter.g:300:1: create_trigger : ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body ) -> template( \"not implemented: create_trigger\";
	public final PLSQLPrinter.create_trigger_return create_trigger() throws RecognitionException {
		PLSQLPrinter.create_trigger_return retval = new PLSQLPrinter.create_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:301:5: ( ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body ) -> template( \"not implemented: create_trigger\")
			// PLSQLPrinter.g:301:10: ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body )
			{
			match(input,CREATE_TRIGGER,FOLLOW_CREATE_TRIGGER_in_create_trigger2535); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:301:27: ( REPLACE_VK )?
			int alt60=2;
			int LA60_0 = input.LA(1);
			if ( (LA60_0==REPLACE_VK) ) {
				alt60=1;
			}
			switch (alt60) {
				case 1 :
					// PLSQLPrinter.g:301:27: REPLACE_VK
					{
					match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_trigger2537); 
					}
					break;

			}

			pushFollow(FOLLOW_trigger_name_in_create_trigger2540);
			trigger_name();
			state._fsp--;

			// PLSQLPrinter.g:302:13: ( simple_dml_trigger )?
			int alt61=2;
			int LA61_0 = input.LA(1);
			if ( (LA61_0==SIMPLE_DML) ) {
				alt61=1;
			}
			switch (alt61) {
				case 1 :
					// PLSQLPrinter.g:302:13: simple_dml_trigger
					{
					pushFollow(FOLLOW_simple_dml_trigger_in_create_trigger2556);
					simple_dml_trigger();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:302:33: ( compound_dml_trigger )?
			int alt62=2;
			int LA62_0 = input.LA(1);
			if ( (LA62_0==COMPOUND_DML) ) {
				alt62=1;
			}
			switch (alt62) {
				case 1 :
					// PLSQLPrinter.g:302:33: compound_dml_trigger
					{
					pushFollow(FOLLOW_compound_dml_trigger_in_create_trigger2559);
					compound_dml_trigger();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:302:55: ( non_dml_trigger )?
			int alt63=2;
			int LA63_0 = input.LA(1);
			if ( (LA63_0==NON_DML) ) {
				alt63=1;
			}
			switch (alt63) {
				case 1 :
					// PLSQLPrinter.g:302:55: non_dml_trigger
					{
					pushFollow(FOLLOW_non_dml_trigger_in_create_trigger2562);
					non_dml_trigger();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:303:13: ( trigger_follows_clause )?
			int alt64=2;
			int LA64_0 = input.LA(1);
			if ( (LA64_0==FOLLOWS_VK) ) {
				alt64=1;
			}
			switch (alt64) {
				case 1 :
					// PLSQLPrinter.g:303:13: trigger_follows_clause
					{
					pushFollow(FOLLOW_trigger_follows_clause_in_create_trigger2577);
					trigger_follows_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:303:37: ( ENABLE_VK | DISABLE_VK )?
			int alt65=3;
			int LA65_0 = input.LA(1);
			if ( (LA65_0==ENABLE_VK) ) {
				alt65=1;
			}
			else if ( (LA65_0==DISABLE_VK) ) {
				alt65=2;
			}
			switch (alt65) {
				case 1 :
					// PLSQLPrinter.g:303:38: ENABLE_VK
					{
					match(input,ENABLE_VK,FOLLOW_ENABLE_VK_in_create_trigger2581); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:303:48: DISABLE_VK
					{
					match(input,DISABLE_VK,FOLLOW_DISABLE_VK_in_create_trigger2583); 
					}
					break;

			}

			// PLSQLPrinter.g:303:61: ( trigger_when_clause )?
			int alt66=2;
			int LA66_0 = input.LA(1);
			if ( (LA66_0==SQL92_RESERVED_WHEN) ) {
				alt66=1;
			}
			switch (alt66) {
				case 1 :
					// PLSQLPrinter.g:303:61: trigger_when_clause
					{
					pushFollow(FOLLOW_trigger_when_clause_in_create_trigger2587);
					trigger_when_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_trigger_body_in_create_trigger2590);
			trigger_body();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 304:5: -> template( \"not implemented: create_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: create_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_trigger"


	public static class trigger_follows_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_follows_clause"
	// PLSQLPrinter.g:307:1: trigger_follows_clause : ^( FOLLOWS_VK ( trigger_name )+ ) -> template( \"not implemented: trigger_follows_clause\";
	public final PLSQLPrinter.trigger_follows_clause_return trigger_follows_clause() throws RecognitionException {
		PLSQLPrinter.trigger_follows_clause_return retval = new PLSQLPrinter.trigger_follows_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:308:5: ( ^( FOLLOWS_VK ( trigger_name )+ ) -> template( \"not implemented: trigger_follows_clause\")
			// PLSQLPrinter.g:308:10: ^( FOLLOWS_VK ( trigger_name )+ )
			{
			match(input,FOLLOWS_VK,FOLLOW_FOLLOWS_VK_in_trigger_follows_clause2626); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:308:23: ( trigger_name )+
			int cnt67=0;
			loop67:
			while (true) {
				int alt67=2;
				int LA67_0 = input.LA(1);
				if ( (LA67_0==TRIGGER_NAME) ) {
					alt67=1;
				}

				switch (alt67) {
				case 1 :
					// PLSQLPrinter.g:308:23: trigger_name
					{
					pushFollow(FOLLOW_trigger_name_in_trigger_follows_clause2628);
					trigger_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt67 >= 1 ) break loop67;
					EarlyExitException eee = new EarlyExitException(67, input);
					throw eee;
				}
				cnt67++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 309:5: -> template( \"not implemented: trigger_follows_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: trigger_follows_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_follows_clause"


	public static class trigger_when_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_when_clause"
	// PLSQLPrinter.g:312:1: trigger_when_clause : ^( SQL92_RESERVED_WHEN expression ) -> template( \"not implemented: trigger_when_clause\";
	public final PLSQLPrinter.trigger_when_clause_return trigger_when_clause() throws RecognitionException {
		PLSQLPrinter.trigger_when_clause_return retval = new PLSQLPrinter.trigger_when_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:313:5: ( ^( SQL92_RESERVED_WHEN expression ) -> template( \"not implemented: trigger_when_clause\")
			// PLSQLPrinter.g:313:10: ^( SQL92_RESERVED_WHEN expression )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_trigger_when_clause2665); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_trigger_when_clause2667);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 314:5: -> template( \"not implemented: trigger_when_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: trigger_when_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_when_clause"


	public static class simple_dml_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "simple_dml_trigger"
	// PLSQLPrinter.g:318:1: simple_dml_trigger : ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause ) -> template( \"not implemented: simple_dml_trigger\";
	public final PLSQLPrinter.simple_dml_trigger_return simple_dml_trigger() throws RecognitionException {
		PLSQLPrinter.simple_dml_trigger_return retval = new PLSQLPrinter.simple_dml_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:319:5: ( ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause ) -> template( \"not implemented: simple_dml_trigger\")
			// PLSQLPrinter.g:319:10: ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause )
			{
			match(input,SIMPLE_DML,FOLLOW_SIMPLE_DML_in_simple_dml_trigger2704); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:319:23: ( BEFORE_VK | AFTER_VK | INSTEAD_VK )
			int alt68=3;
			switch ( input.LA(1) ) {
			case BEFORE_VK:
				{
				alt68=1;
				}
				break;
			case AFTER_VK:
				{
				alt68=2;
				}
				break;
			case INSTEAD_VK:
				{
				alt68=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 68, 0, input);
				throw nvae;
			}
			switch (alt68) {
				case 1 :
					// PLSQLPrinter.g:319:24: BEFORE_VK
					{
					match(input,BEFORE_VK,FOLLOW_BEFORE_VK_in_simple_dml_trigger2707); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:319:34: AFTER_VK
					{
					match(input,AFTER_VK,FOLLOW_AFTER_VK_in_simple_dml_trigger2709); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:319:43: INSTEAD_VK
					{
					match(input,INSTEAD_VK,FOLLOW_INSTEAD_VK_in_simple_dml_trigger2711); 
					}
					break;

			}

			// PLSQLPrinter.g:319:55: ( FOR_EACH_ROW )?
			int alt69=2;
			int LA69_0 = input.LA(1);
			if ( (LA69_0==FOR_EACH_ROW) ) {
				alt69=1;
			}
			switch (alt69) {
				case 1 :
					// PLSQLPrinter.g:319:55: FOR_EACH_ROW
					{
					match(input,FOR_EACH_ROW,FOLLOW_FOR_EACH_ROW_in_simple_dml_trigger2714); 
					}
					break;

			}

			// PLSQLPrinter.g:319:69: ( referencing_clause )?
			int alt70=2;
			int LA70_0 = input.LA(1);
			if ( (LA70_0==REFERENCING_VK) ) {
				alt70=1;
			}
			switch (alt70) {
				case 1 :
					// PLSQLPrinter.g:319:69: referencing_clause
					{
					pushFollow(FOLLOW_referencing_clause_in_simple_dml_trigger2717);
					referencing_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_event_clause_in_simple_dml_trigger2720);
			dml_event_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 320:5: -> template( \"not implemented: simple_dml_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: simple_dml_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "simple_dml_trigger"


	public static class compound_dml_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "compound_dml_trigger"
	// PLSQLPrinter.g:323:1: compound_dml_trigger : ^( COMPOUND_DML ( referencing_clause )? dml_event_clause ) -> template( \"not implemented: compound_dml_trigger\";
	public final PLSQLPrinter.compound_dml_trigger_return compound_dml_trigger() throws RecognitionException {
		PLSQLPrinter.compound_dml_trigger_return retval = new PLSQLPrinter.compound_dml_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:324:5: ( ^( COMPOUND_DML ( referencing_clause )? dml_event_clause ) -> template( \"not implemented: compound_dml_trigger\")
			// PLSQLPrinter.g:324:10: ^( COMPOUND_DML ( referencing_clause )? dml_event_clause )
			{
			match(input,COMPOUND_DML,FOLLOW_COMPOUND_DML_in_compound_dml_trigger2756); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:324:25: ( referencing_clause )?
			int alt71=2;
			int LA71_0 = input.LA(1);
			if ( (LA71_0==REFERENCING_VK) ) {
				alt71=1;
			}
			switch (alt71) {
				case 1 :
					// PLSQLPrinter.g:324:25: referencing_clause
					{
					pushFollow(FOLLOW_referencing_clause_in_compound_dml_trigger2758);
					referencing_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_event_clause_in_compound_dml_trigger2761);
			dml_event_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 325:5: -> template( \"not implemented: compound_dml_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: compound_dml_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compound_dml_trigger"


	public static class non_dml_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "non_dml_trigger"
	// PLSQLPrinter.g:328:1: non_dml_trigger : ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) ) -> template( \"not implemented: non_dml_trigger\";
	public final PLSQLPrinter.non_dml_trigger_return non_dml_trigger() throws RecognitionException {
		PLSQLPrinter.non_dml_trigger_return retval = new PLSQLPrinter.non_dml_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:329:5: ( ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) ) -> template( \"not implemented: non_dml_trigger\")
			// PLSQLPrinter.g:329:10: ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) )
			{
			match(input,NON_DML,FOLLOW_NON_DML_in_non_dml_trigger2797); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:329:20: ( BEFORE_VK | AFTER_VK )
			int alt72=2;
			int LA72_0 = input.LA(1);
			if ( (LA72_0==BEFORE_VK) ) {
				alt72=1;
			}
			else if ( (LA72_0==AFTER_VK) ) {
				alt72=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 72, 0, input);
				throw nvae;
			}

			switch (alt72) {
				case 1 :
					// PLSQLPrinter.g:329:21: BEFORE_VK
					{
					match(input,BEFORE_VK,FOLLOW_BEFORE_VK_in_non_dml_trigger2800); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:329:31: AFTER_VK
					{
					match(input,AFTER_VK,FOLLOW_AFTER_VK_in_non_dml_trigger2802); 
					}
					break;

			}

			// PLSQLPrinter.g:329:41: ( non_dml_event )+
			int cnt73=0;
			loop73:
			while (true) {
				int alt73=2;
				switch ( input.LA(1) ) {
				case DATABASE_VK:
					{
					int LA73_1 = input.LA(2);
					if ( (LA73_1==SQL92_RESERVED_ALTER||LA73_1==SQL92_RESERVED_CREATE||LA73_1==SQL92_RESERVED_DROP||LA73_1==SQL92_RESERVED_GRANT||LA73_1==SQL92_RESERVED_REVOKE||LA73_1==ANALYZE_VK||LA73_1==ASSOCIATE_VK||LA73_1==AUDIT_VK||LA73_1==COMMENT_VK||LA73_1==DATABASE_VK||(LA73_1 >= DB_ROLE_CHANGE_VK && LA73_1 <= DDL_VK)||LA73_1==DISASSOCIATE_VK||LA73_1==FOLLOWS_VK||(LA73_1 >= LOGOFF_VK && LA73_1 <= LOGON_VK)||LA73_1==NOAUDIT_VK||LA73_1==RENAME_VK||(LA73_1 >= SCHEMA_NAME && LA73_1 <= SCHEMA_VK)||LA73_1==SERVERERROR_VK||LA73_1==SHUTDOWN_VK||LA73_1==STARTUP_VK||LA73_1==SUSPEND_VK||LA73_1==TRUNCATE_VK) ) {
						alt73=1;
					}

					}
					break;
				case SCHEMA_VK:
					{
					int LA73_3 = input.LA(2);
					if ( (LA73_3==SQL92_RESERVED_ALTER||LA73_3==SQL92_RESERVED_CREATE||LA73_3==SQL92_RESERVED_DROP||LA73_3==SQL92_RESERVED_GRANT||LA73_3==SQL92_RESERVED_REVOKE||LA73_3==ANALYZE_VK||LA73_3==ASSOCIATE_VK||LA73_3==AUDIT_VK||LA73_3==COMMENT_VK||LA73_3==DATABASE_VK||(LA73_3 >= DB_ROLE_CHANGE_VK && LA73_3 <= DDL_VK)||LA73_3==DISASSOCIATE_VK||LA73_3==FOLLOWS_VK||(LA73_3 >= LOGOFF_VK && LA73_3 <= LOGON_VK)||LA73_3==NOAUDIT_VK||LA73_3==RENAME_VK||(LA73_3 >= SCHEMA_NAME && LA73_3 <= SCHEMA_VK)||LA73_3==SERVERERROR_VK||LA73_3==SHUTDOWN_VK||LA73_3==STARTUP_VK||LA73_3==SUSPEND_VK||LA73_3==TRUNCATE_VK) ) {
						alt73=1;
					}

					}
					break;
				case SQL92_RESERVED_ALTER:
				case SQL92_RESERVED_CREATE:
				case SQL92_RESERVED_DROP:
				case SQL92_RESERVED_GRANT:
				case SQL92_RESERVED_REVOKE:
				case ANALYZE_VK:
				case ASSOCIATE_VK:
				case AUDIT_VK:
				case COMMENT_VK:
				case DB_ROLE_CHANGE_VK:
				case DDL_VK:
				case DISASSOCIATE_VK:
				case FOLLOWS_VK:
				case LOGOFF_VK:
				case LOGON_VK:
				case NOAUDIT_VK:
				case RENAME_VK:
				case SERVERERROR_VK:
				case SHUTDOWN_VK:
				case STARTUP_VK:
				case SUSPEND_VK:
				case TRUNCATE_VK:
					{
					alt73=1;
					}
					break;
				}
				switch (alt73) {
				case 1 :
					// PLSQLPrinter.g:329:41: non_dml_event
					{
					pushFollow(FOLLOW_non_dml_event_in_non_dml_trigger2805);
					non_dml_event();
					state._fsp--;

					}
					break;

				default :
					if ( cnt73 >= 1 ) break loop73;
					EarlyExitException eee = new EarlyExitException(73, input);
					throw eee;
				}
				cnt73++;
			}

			// PLSQLPrinter.g:329:56: ( DATABASE_VK | ( schema_name )? SCHEMA_VK )
			int alt75=2;
			int LA75_0 = input.LA(1);
			if ( (LA75_0==DATABASE_VK) ) {
				alt75=1;
			}
			else if ( ((LA75_0 >= SCHEMA_NAME && LA75_0 <= SCHEMA_VK)) ) {
				alt75=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 75, 0, input);
				throw nvae;
			}

			switch (alt75) {
				case 1 :
					// PLSQLPrinter.g:329:57: DATABASE_VK
					{
					match(input,DATABASE_VK,FOLLOW_DATABASE_VK_in_non_dml_trigger2809); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:329:69: ( schema_name )? SCHEMA_VK
					{
					// PLSQLPrinter.g:329:69: ( schema_name )?
					int alt74=2;
					int LA74_0 = input.LA(1);
					if ( (LA74_0==SCHEMA_NAME) ) {
						alt74=1;
					}
					switch (alt74) {
						case 1 :
							// PLSQLPrinter.g:329:69: schema_name
							{
							pushFollow(FOLLOW_schema_name_in_non_dml_trigger2811);
							schema_name();
							state._fsp--;

							}
							break;

					}

					match(input,SCHEMA_VK,FOLLOW_SCHEMA_VK_in_non_dml_trigger2814); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 330:5: -> template( \"not implemented: non_dml_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: non_dml_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "non_dml_trigger"


	public static class trigger_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_body"
	// PLSQLPrinter.g:333:1: trigger_body : ( ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ ) -> template( \"not implemented: trigger_body\"| ^( CALL_VK routine_name ( function_argument )? ) -> template( \"not implemented: trigger_body\"| ^( BODY_MODE block ) -> template( \"not implemented: trigger_body\");
	public final PLSQLPrinter.trigger_body_return trigger_body() throws RecognitionException {
		PLSQLPrinter.trigger_body_return retval = new PLSQLPrinter.trigger_body_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:334:5: ( ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ ) -> template( \"not implemented: trigger_body\"| ^( CALL_VK routine_name ( function_argument )? ) -> template( \"not implemented: trigger_body\"| ^( BODY_MODE block ) -> template( \"not implemented: trigger_body\")
			int alt79=3;
			switch ( input.LA(1) ) {
			case COMPOUND_VK:
				{
				alt79=1;
				}
				break;
			case CALL_VK:
				{
				alt79=2;
				}
				break;
			case BODY_MODE:
				{
				alt79=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 79, 0, input);
				throw nvae;
			}
			switch (alt79) {
				case 1 :
					// PLSQLPrinter.g:334:10: ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ )
					{
					match(input,COMPOUND_VK,FOLLOW_COMPOUND_VK_in_trigger_body2851); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_trigger_name_in_trigger_body2853);
					trigger_name();
					state._fsp--;

					// PLSQLPrinter.g:334:37: ( declare_spec )*
					loop76:
					while (true) {
						int alt76=2;
						int LA76_0 = input.LA(1);
						if ( (LA76_0==CREATE_FUNCTION||LA76_0==CREATE_PROCEDURE||(LA76_0 >= CREATE_TYPE_BODY && LA76_0 <= CREATE_TYPE_SPEC)||LA76_0==CURSOR_DECLARE||LA76_0==EXCEPTION_DECLARE||LA76_0==PRAGMA_DECLARE||(LA76_0 >= RECORD_TYPE_DECLARE && LA76_0 <= RECORD_VAR_DECLARE)||LA76_0==SUBTYPE_DECLARE||(LA76_0 >= TABLE_TYPE_DECLARE && LA76_0 <= TABLE_VAR_DECLARE)||LA76_0==VARIABLE_DECLARE) ) {
							alt76=1;
						}

						switch (alt76) {
						case 1 :
							// PLSQLPrinter.g:334:37: declare_spec
							{
							pushFollow(FOLLOW_declare_spec_in_trigger_body2855);
							declare_spec();
							state._fsp--;

							}
							break;

						default :
							break loop76;
						}
					}

					// PLSQLPrinter.g:334:51: ( timing_point_section )+
					int cnt77=0;
					loop77:
					while (true) {
						int alt77=2;
						int LA77_0 = input.LA(1);
						if ( ((LA77_0 >= AFTER_EACH_ROW && LA77_0 <= AFTER_STATEMENT)||(LA77_0 >= BEFORE_EACH_ROW && LA77_0 <= BEFORE_STATEMENT)) ) {
							alt77=1;
						}

						switch (alt77) {
						case 1 :
							// PLSQLPrinter.g:334:51: timing_point_section
							{
							pushFollow(FOLLOW_timing_point_section_in_trigger_body2858);
							timing_point_section();
							state._fsp--;

							}
							break;

						default :
							if ( cnt77 >= 1 ) break loop77;
							EarlyExitException eee = new EarlyExitException(77, input);
							throw eee;
						}
						cnt77++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 335:5: -> template( \"not implemented: trigger_body\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: trigger_body");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:336:10: ^( CALL_VK routine_name ( function_argument )? )
					{
					match(input,CALL_VK,FOLLOW_CALL_VK_in_trigger_body2886); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_routine_name_in_trigger_body2888);
					routine_name();
					state._fsp--;

					// PLSQLPrinter.g:336:33: ( function_argument )?
					int alt78=2;
					int LA78_0 = input.LA(1);
					if ( (LA78_0==ARGUMENTS) ) {
						alt78=1;
					}
					switch (alt78) {
						case 1 :
							// PLSQLPrinter.g:336:33: function_argument
							{
							pushFollow(FOLLOW_function_argument_in_trigger_body2890);
							function_argument();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 337:5: -> template( \"not implemented: trigger_body\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: trigger_body");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:338:10: ^( BODY_MODE block )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_trigger_body2919); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_trigger_body2921);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 339:5: -> template( \"not implemented: trigger_body\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: trigger_body");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_body"


	public static class timing_point_section_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "timing_point_section"
	// PLSQLPrinter.g:342:1: timing_point_section : ( ^( BEFORE_STATEMENT block ) -> template( \"not implemented: timing_point_section\"| ^( BEFORE_EACH_ROW block ) -> template( \"not implemented: timing_point_section\"| ^( AFTER_STATEMENT block ) -> template( \"not implemented: timing_point_section\"| ^( AFTER_EACH_ROW block ) -> template( \"not implemented: timing_point_section\");
	public final PLSQLPrinter.timing_point_section_return timing_point_section() throws RecognitionException {
		PLSQLPrinter.timing_point_section_return retval = new PLSQLPrinter.timing_point_section_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:343:5: ( ^( BEFORE_STATEMENT block ) -> template( \"not implemented: timing_point_section\"| ^( BEFORE_EACH_ROW block ) -> template( \"not implemented: timing_point_section\"| ^( AFTER_STATEMENT block ) -> template( \"not implemented: timing_point_section\"| ^( AFTER_EACH_ROW block ) -> template( \"not implemented: timing_point_section\")
			int alt80=4;
			switch ( input.LA(1) ) {
			case BEFORE_STATEMENT:
				{
				alt80=1;
				}
				break;
			case BEFORE_EACH_ROW:
				{
				alt80=2;
				}
				break;
			case AFTER_STATEMENT:
				{
				alt80=3;
				}
				break;
			case AFTER_EACH_ROW:
				{
				alt80=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 80, 0, input);
				throw nvae;
			}
			switch (alt80) {
				case 1 :
					// PLSQLPrinter.g:343:10: ^( BEFORE_STATEMENT block )
					{
					match(input,BEFORE_STATEMENT,FOLLOW_BEFORE_STATEMENT_in_timing_point_section2957); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section2959);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 344:5: -> template( \"not implemented: timing_point_section\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: timing_point_section");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:345:10: ^( BEFORE_EACH_ROW block )
					{
					match(input,BEFORE_EACH_ROW,FOLLOW_BEFORE_EACH_ROW_in_timing_point_section2986); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section2988);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 346:5: -> template( \"not implemented: timing_point_section\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: timing_point_section");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:347:10: ^( AFTER_STATEMENT block )
					{
					match(input,AFTER_STATEMENT,FOLLOW_AFTER_STATEMENT_in_timing_point_section3015); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section3017);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 348:5: -> template( \"not implemented: timing_point_section\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: timing_point_section");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:349:10: ^( AFTER_EACH_ROW block )
					{
					match(input,AFTER_EACH_ROW,FOLLOW_AFTER_EACH_ROW_in_timing_point_section3044); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section3046);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 350:5: -> template( \"not implemented: timing_point_section\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: timing_point_section");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "timing_point_section"


	public static class non_dml_event_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "non_dml_event"
	// PLSQLPrinter.g:353:1: non_dml_event : ( SQL92_RESERVED_ALTER -> template( \"not implemented: non_dml_event\"| ANALYZE_VK -> template( \"not implemented: non_dml_event\"| ASSOCIATE_VK STATISTICS_VK -> template( \"not implemented: non_dml_event\"| AUDIT_VK -> template( \"not implemented: non_dml_event\"| COMMENT_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_CREATE -> template( \"not implemented: non_dml_event\"| DISASSOCIATE_VK STATISTICS_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_DROP -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_GRANT -> template( \"not implemented: non_dml_event\"| NOAUDIT_VK -> template( \"not implemented: non_dml_event\"| RENAME_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_REVOKE -> template( \"not implemented: non_dml_event\"| TRUNCATE_VK -> template( \"not implemented: non_dml_event\"| DDL_VK -> template( \"not implemented: non_dml_event\"| STARTUP_VK -> template( \"not implemented: non_dml_event\"| SHUTDOWN_VK -> template( \"not implemented: non_dml_event\"| DB_ROLE_CHANGE_VK -> template( \"not implemented: non_dml_event\"| LOGON_VK -> template( \"not implemented: non_dml_event\"| LOGOFF_VK -> template( \"not implemented: non_dml_event\"| SERVERERROR_VK -> template( \"not implemented: non_dml_event\"| SUSPEND_VK -> template( \"not implemented: non_dml_event\"| DATABASE_VK -> template( \"not implemented: non_dml_event\"| SCHEMA_VK -> template( \"not implemented: non_dml_event\"| FOLLOWS_VK -> template( \"not implemented: non_dml_event\");
	public final PLSQLPrinter.non_dml_event_return non_dml_event() throws RecognitionException {
		PLSQLPrinter.non_dml_event_return retval = new PLSQLPrinter.non_dml_event_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:354:5: ( SQL92_RESERVED_ALTER -> template( \"not implemented: non_dml_event\"| ANALYZE_VK -> template( \"not implemented: non_dml_event\"| ASSOCIATE_VK STATISTICS_VK -> template( \"not implemented: non_dml_event\"| AUDIT_VK -> template( \"not implemented: non_dml_event\"| COMMENT_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_CREATE -> template( \"not implemented: non_dml_event\"| DISASSOCIATE_VK STATISTICS_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_DROP -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_GRANT -> template( \"not implemented: non_dml_event\"| NOAUDIT_VK -> template( \"not implemented: non_dml_event\"| RENAME_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_REVOKE -> template( \"not implemented: non_dml_event\"| TRUNCATE_VK -> template( \"not implemented: non_dml_event\"| DDL_VK -> template( \"not implemented: non_dml_event\"| STARTUP_VK -> template( \"not implemented: non_dml_event\"| SHUTDOWN_VK -> template( \"not implemented: non_dml_event\"| DB_ROLE_CHANGE_VK -> template( \"not implemented: non_dml_event\"| LOGON_VK -> template( \"not implemented: non_dml_event\"| LOGOFF_VK -> template( \"not implemented: non_dml_event\"| SERVERERROR_VK -> template( \"not implemented: non_dml_event\"| SUSPEND_VK -> template( \"not implemented: non_dml_event\"| DATABASE_VK -> template( \"not implemented: non_dml_event\"| SCHEMA_VK -> template( \"not implemented: non_dml_event\"| FOLLOWS_VK -> template( \"not implemented: non_dml_event\")
			int alt81=24;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ALTER:
				{
				alt81=1;
				}
				break;
			case ANALYZE_VK:
				{
				alt81=2;
				}
				break;
			case ASSOCIATE_VK:
				{
				alt81=3;
				}
				break;
			case AUDIT_VK:
				{
				alt81=4;
				}
				break;
			case COMMENT_VK:
				{
				alt81=5;
				}
				break;
			case SQL92_RESERVED_CREATE:
				{
				alt81=6;
				}
				break;
			case DISASSOCIATE_VK:
				{
				alt81=7;
				}
				break;
			case SQL92_RESERVED_DROP:
				{
				alt81=8;
				}
				break;
			case SQL92_RESERVED_GRANT:
				{
				alt81=9;
				}
				break;
			case NOAUDIT_VK:
				{
				alt81=10;
				}
				break;
			case RENAME_VK:
				{
				alt81=11;
				}
				break;
			case SQL92_RESERVED_REVOKE:
				{
				alt81=12;
				}
				break;
			case TRUNCATE_VK:
				{
				alt81=13;
				}
				break;
			case DDL_VK:
				{
				alt81=14;
				}
				break;
			case STARTUP_VK:
				{
				alt81=15;
				}
				break;
			case SHUTDOWN_VK:
				{
				alt81=16;
				}
				break;
			case DB_ROLE_CHANGE_VK:
				{
				alt81=17;
				}
				break;
			case LOGON_VK:
				{
				alt81=18;
				}
				break;
			case LOGOFF_VK:
				{
				alt81=19;
				}
				break;
			case SERVERERROR_VK:
				{
				alt81=20;
				}
				break;
			case SUSPEND_VK:
				{
				alt81=21;
				}
				break;
			case DATABASE_VK:
				{
				alt81=22;
				}
				break;
			case SCHEMA_VK:
				{
				alt81=23;
				}
				break;
			case FOLLOWS_VK:
				{
				alt81=24;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 81, 0, input);
				throw nvae;
			}
			switch (alt81) {
				case 1 :
					// PLSQLPrinter.g:354:10: SQL92_RESERVED_ALTER
					{
					match(input,SQL92_RESERVED_ALTER,FOLLOW_SQL92_RESERVED_ALTER_in_non_dml_event3081); 
					// TEMPLATE REWRITE
					// 355:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:356:10: ANALYZE_VK
					{
					match(input,ANALYZE_VK,FOLLOW_ANALYZE_VK_in_non_dml_event3106); 
					// TEMPLATE REWRITE
					// 357:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:358:10: ASSOCIATE_VK STATISTICS_VK
					{
					match(input,ASSOCIATE_VK,FOLLOW_ASSOCIATE_VK_in_non_dml_event3131); 
					match(input,STATISTICS_VK,FOLLOW_STATISTICS_VK_in_non_dml_event3133); 
					// TEMPLATE REWRITE
					// 359:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:360:10: AUDIT_VK
					{
					match(input,AUDIT_VK,FOLLOW_AUDIT_VK_in_non_dml_event3158); 
					// TEMPLATE REWRITE
					// 361:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:362:10: COMMENT_VK
					{
					match(input,COMMENT_VK,FOLLOW_COMMENT_VK_in_non_dml_event3183); 
					// TEMPLATE REWRITE
					// 363:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:364:10: SQL92_RESERVED_CREATE
					{
					match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_non_dml_event3208); 
					// TEMPLATE REWRITE
					// 365:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:366:10: DISASSOCIATE_VK STATISTICS_VK
					{
					match(input,DISASSOCIATE_VK,FOLLOW_DISASSOCIATE_VK_in_non_dml_event3233); 
					match(input,STATISTICS_VK,FOLLOW_STATISTICS_VK_in_non_dml_event3235); 
					// TEMPLATE REWRITE
					// 367:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:368:10: SQL92_RESERVED_DROP
					{
					match(input,SQL92_RESERVED_DROP,FOLLOW_SQL92_RESERVED_DROP_in_non_dml_event3260); 
					// TEMPLATE REWRITE
					// 369:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:370:10: SQL92_RESERVED_GRANT
					{
					match(input,SQL92_RESERVED_GRANT,FOLLOW_SQL92_RESERVED_GRANT_in_non_dml_event3285); 
					// TEMPLATE REWRITE
					// 371:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:372:10: NOAUDIT_VK
					{
					match(input,NOAUDIT_VK,FOLLOW_NOAUDIT_VK_in_non_dml_event3310); 
					// TEMPLATE REWRITE
					// 373:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:374:10: RENAME_VK
					{
					match(input,RENAME_VK,FOLLOW_RENAME_VK_in_non_dml_event3335); 
					// TEMPLATE REWRITE
					// 375:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:376:10: SQL92_RESERVED_REVOKE
					{
					match(input,SQL92_RESERVED_REVOKE,FOLLOW_SQL92_RESERVED_REVOKE_in_non_dml_event3360); 
					// TEMPLATE REWRITE
					// 377:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:378:10: TRUNCATE_VK
					{
					match(input,TRUNCATE_VK,FOLLOW_TRUNCATE_VK_in_non_dml_event3385); 
					// TEMPLATE REWRITE
					// 379:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:380:10: DDL_VK
					{
					match(input,DDL_VK,FOLLOW_DDL_VK_in_non_dml_event3410); 
					// TEMPLATE REWRITE
					// 381:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:382:10: STARTUP_VK
					{
					match(input,STARTUP_VK,FOLLOW_STARTUP_VK_in_non_dml_event3435); 
					// TEMPLATE REWRITE
					// 383:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:384:10: SHUTDOWN_VK
					{
					match(input,SHUTDOWN_VK,FOLLOW_SHUTDOWN_VK_in_non_dml_event3460); 
					// TEMPLATE REWRITE
					// 385:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:386:10: DB_ROLE_CHANGE_VK
					{
					match(input,DB_ROLE_CHANGE_VK,FOLLOW_DB_ROLE_CHANGE_VK_in_non_dml_event3485); 
					// TEMPLATE REWRITE
					// 387:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:388:10: LOGON_VK
					{
					match(input,LOGON_VK,FOLLOW_LOGON_VK_in_non_dml_event3510); 
					// TEMPLATE REWRITE
					// 389:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 19 :
					// PLSQLPrinter.g:390:10: LOGOFF_VK
					{
					match(input,LOGOFF_VK,FOLLOW_LOGOFF_VK_in_non_dml_event3535); 
					// TEMPLATE REWRITE
					// 391:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 20 :
					// PLSQLPrinter.g:392:10: SERVERERROR_VK
					{
					match(input,SERVERERROR_VK,FOLLOW_SERVERERROR_VK_in_non_dml_event3560); 
					// TEMPLATE REWRITE
					// 393:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 21 :
					// PLSQLPrinter.g:394:10: SUSPEND_VK
					{
					match(input,SUSPEND_VK,FOLLOW_SUSPEND_VK_in_non_dml_event3585); 
					// TEMPLATE REWRITE
					// 395:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 22 :
					// PLSQLPrinter.g:396:10: DATABASE_VK
					{
					match(input,DATABASE_VK,FOLLOW_DATABASE_VK_in_non_dml_event3610); 
					// TEMPLATE REWRITE
					// 397:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 23 :
					// PLSQLPrinter.g:398:10: SCHEMA_VK
					{
					match(input,SCHEMA_VK,FOLLOW_SCHEMA_VK_in_non_dml_event3635); 
					// TEMPLATE REWRITE
					// 399:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 24 :
					// PLSQLPrinter.g:400:10: FOLLOWS_VK
					{
					match(input,FOLLOWS_VK,FOLLOW_FOLLOWS_VK_in_non_dml_event3660); 
					// TEMPLATE REWRITE
					// 401:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "non_dml_event"


	public static class dml_event_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_event_clause"
	// PLSQLPrinter.g:404:1: dml_event_clause : ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) ) -> template( \"not implemented: dml_event_clause\";
	public final PLSQLPrinter.dml_event_clause_return dml_event_clause() throws RecognitionException {
		PLSQLPrinter.dml_event_clause_return retval = new PLSQLPrinter.dml_event_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:405:5: ( ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) ) -> template( \"not implemented: dml_event_clause\")
			// PLSQLPrinter.g:405:10: ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) )
			{
			match(input,DML_EVENT,FOLLOW_DML_EVENT_in_dml_event_clause3695); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:405:22: ( dml_event_element )+
			int cnt82=0;
			loop82:
			while (true) {
				int alt82=2;
				int LA82_0 = input.LA(1);
				if ( (LA82_0==DML_EVENT_ELEMENT) ) {
					alt82=1;
				}

				switch (alt82) {
				case 1 :
					// PLSQLPrinter.g:405:22: dml_event_element
					{
					pushFollow(FOLLOW_dml_event_element_in_dml_event_clause3697);
					dml_event_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt82 >= 1 ) break loop82;
					EarlyExitException eee = new EarlyExitException(82, input);
					throw eee;
				}
				cnt82++;
			}

			match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_dml_event_clause3701); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_dml_event_clause3703);
			tableview_name();
			state._fsp--;

			// PLSQLPrinter.g:405:76: ( dml_event_nested_clause )?
			int alt83=2;
			int LA83_0 = input.LA(1);
			if ( (LA83_0==NESTED_VK) ) {
				alt83=1;
			}
			switch (alt83) {
				case 1 :
					// PLSQLPrinter.g:405:76: dml_event_nested_clause
					{
					pushFollow(FOLLOW_dml_event_nested_clause_in_dml_event_clause3705);
					dml_event_nested_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 406:5: -> template( \"not implemented: dml_event_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dml_event_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_event_clause"


	public static class dml_event_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_event_element"
	// PLSQLPrinter.g:409:1: dml_event_element : ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) ) -> template( \"not implemented: dml_event_element\";
	public final PLSQLPrinter.dml_event_element_return dml_event_element() throws RecognitionException {
		PLSQLPrinter.dml_event_element_return retval = new PLSQLPrinter.dml_event_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:410:5: ( ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) ) -> template( \"not implemented: dml_event_element\")
			// PLSQLPrinter.g:410:10: ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) )
			{
			match(input,DML_EVENT_ELEMENT,FOLLOW_DML_EVENT_ELEMENT_in_dml_event_element3745); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:410:30: ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE )
			int alt84=3;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_DELETE:
				{
				alt84=1;
				}
				break;
			case SQL92_RESERVED_INSERT:
				{
				alt84=2;
				}
				break;
			case SQL92_RESERVED_UPDATE:
				{
				alt84=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 84, 0, input);
				throw nvae;
			}
			switch (alt84) {
				case 1 :
					// PLSQLPrinter.g:410:31: SQL92_RESERVED_DELETE
					{
					match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_dml_event_element3748); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:410:53: SQL92_RESERVED_INSERT
					{
					match(input,SQL92_RESERVED_INSERT,FOLLOW_SQL92_RESERVED_INSERT_in_dml_event_element3750); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:410:75: SQL92_RESERVED_UPDATE
					{
					match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_dml_event_element3752); 
					}
					break;

			}

			match(input,COLUMNS,FOLLOW_COLUMNS_in_dml_event_element3756); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:410:108: ( column_name )*
				loop85:
				while (true) {
					int alt85=2;
					int LA85_0 = input.LA(1);
					if ( (LA85_0==COLUMN_NAME) ) {
						alt85=1;
					}

					switch (alt85) {
					case 1 :
						// PLSQLPrinter.g:410:108: column_name
						{
						pushFollow(FOLLOW_column_name_in_dml_event_element3758);
						column_name();
						state._fsp--;

						}
						break;

					default :
						break loop85;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 411:5: -> template( \"not implemented: dml_event_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dml_event_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_event_element"


	public static class dml_event_nested_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_event_nested_clause"
	// PLSQLPrinter.g:414:1: dml_event_nested_clause : ^( NESTED_VK tableview_name ) -> template( \"not implemented: dml_event_nested_clause\";
	public final PLSQLPrinter.dml_event_nested_clause_return dml_event_nested_clause() throws RecognitionException {
		PLSQLPrinter.dml_event_nested_clause_return retval = new PLSQLPrinter.dml_event_nested_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:415:5: ( ^( NESTED_VK tableview_name ) -> template( \"not implemented: dml_event_nested_clause\")
			// PLSQLPrinter.g:415:10: ^( NESTED_VK tableview_name )
			{
			match(input,NESTED_VK,FOLLOW_NESTED_VK_in_dml_event_nested_clause3796); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_dml_event_nested_clause3798);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 416:5: -> template( \"not implemented: dml_event_nested_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dml_event_nested_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_event_nested_clause"


	public static class referencing_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "referencing_clause"
	// PLSQLPrinter.g:419:1: referencing_clause : ^( REFERENCING_VK ( referencing_element )+ ) -> template( \"not implemented: referencing_clause\";
	public final PLSQLPrinter.referencing_clause_return referencing_clause() throws RecognitionException {
		PLSQLPrinter.referencing_clause_return retval = new PLSQLPrinter.referencing_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:420:5: ( ^( REFERENCING_VK ( referencing_element )+ ) -> template( \"not implemented: referencing_clause\")
			// PLSQLPrinter.g:420:10: ^( REFERENCING_VK ( referencing_element )+ )
			{
			match(input,REFERENCING_VK,FOLLOW_REFERENCING_VK_in_referencing_clause3834); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:420:27: ( referencing_element )+
			int cnt86=0;
			loop86:
			while (true) {
				int alt86=2;
				int LA86_0 = input.LA(1);
				if ( (LA86_0==NEW_VK||LA86_0==OLD_VK||LA86_0==PARENT_VK) ) {
					alt86=1;
				}

				switch (alt86) {
				case 1 :
					// PLSQLPrinter.g:420:27: referencing_element
					{
					pushFollow(FOLLOW_referencing_element_in_referencing_clause3836);
					referencing_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt86 >= 1 ) break loop86;
					EarlyExitException eee = new EarlyExitException(86, input);
					throw eee;
				}
				cnt86++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 421:5: -> template( \"not implemented: referencing_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: referencing_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "referencing_clause"


	public static class referencing_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "referencing_element"
	// PLSQLPrinter.g:424:1: referencing_element : ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias ) -> template( \"not implemented: referencing_element\";
	public final PLSQLPrinter.referencing_element_return referencing_element() throws RecognitionException {
		PLSQLPrinter.referencing_element_return retval = new PLSQLPrinter.referencing_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:425:5: ( ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias ) -> template( \"not implemented: referencing_element\")
			// PLSQLPrinter.g:425:10: ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias )
			{
			// PLSQLPrinter.g:425:12: ( NEW_VK | OLD_VK | PARENT_VK )
			int alt87=3;
			switch ( input.LA(1) ) {
			case NEW_VK:
				{
				alt87=1;
				}
				break;
			case OLD_VK:
				{
				alt87=2;
				}
				break;
			case PARENT_VK:
				{
				alt87=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 87, 0, input);
				throw nvae;
			}
			switch (alt87) {
				case 1 :
					// PLSQLPrinter.g:425:13: NEW_VK
					{
					match(input,NEW_VK,FOLLOW_NEW_VK_in_referencing_element3874); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:425:20: OLD_VK
					{
					match(input,OLD_VK,FOLLOW_OLD_VK_in_referencing_element3876); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:425:27: PARENT_VK
					{
					match(input,PARENT_VK,FOLLOW_PARENT_VK_in_referencing_element3878); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_alias_in_referencing_element3881);
			alias();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 426:5: -> template( \"not implemented: referencing_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: referencing_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "referencing_element"


	public static class drop_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_type"
	// PLSQLPrinter.g:434:1: drop_type : ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? ) -> template( \"not implemented: drop_type\";
	public final PLSQLPrinter.drop_type_return drop_type() throws RecognitionException {
		PLSQLPrinter.drop_type_return retval = new PLSQLPrinter.drop_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:435:5: ( ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? ) -> template( \"not implemented: drop_type\")
			// PLSQLPrinter.g:435:10: ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? )
			{
			match(input,DROP_TYPE,FOLLOW_DROP_TYPE_in_drop_type3922); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_drop_type3924);
			type_name();
			state._fsp--;

			// PLSQLPrinter.g:435:32: ( BODY_VK )?
			int alt88=2;
			int LA88_0 = input.LA(1);
			if ( (LA88_0==BODY_VK) ) {
				alt88=1;
			}
			switch (alt88) {
				case 1 :
					// PLSQLPrinter.g:435:32: BODY_VK
					{
					match(input,BODY_VK,FOLLOW_BODY_VK_in_drop_type3926); 
					}
					break;

			}

			// PLSQLPrinter.g:435:41: ( FORCE_VK )?
			int alt89=2;
			int LA89_0 = input.LA(1);
			if ( (LA89_0==FORCE_VK) ) {
				alt89=1;
			}
			switch (alt89) {
				case 1 :
					// PLSQLPrinter.g:435:41: FORCE_VK
					{
					match(input,FORCE_VK,FOLLOW_FORCE_VK_in_drop_type3929); 
					}
					break;

			}

			// PLSQLPrinter.g:435:51: ( VALIDATE_VK )?
			int alt90=2;
			int LA90_0 = input.LA(1);
			if ( (LA90_0==VALIDATE_VK) ) {
				alt90=1;
			}
			switch (alt90) {
				case 1 :
					// PLSQLPrinter.g:435:51: VALIDATE_VK
					{
					match(input,VALIDATE_VK,FOLLOW_VALIDATE_VK_in_drop_type3932); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 436:5: -> template( \"not implemented: drop_type\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_type");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_type"


	public static class alter_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_type"
	// PLSQLPrinter.g:439:1: alter_type : ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? ) -> template( \"not implemented: alter_type\";
	public final PLSQLPrinter.alter_type_return alter_type() throws RecognitionException {
		PLSQLPrinter.alter_type_return retval = new PLSQLPrinter.alter_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:440:5: ( ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? ) -> template( \"not implemented: alter_type\")
			// PLSQLPrinter.g:440:10: ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? )
			{
			match(input,ALTER_TYPE,FOLLOW_ALTER_TYPE_in_alter_type3969); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_alter_type3971);
			type_name();
			state._fsp--;

			// PLSQLPrinter.g:441:13: ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
			int alt100=6;
			switch ( input.LA(1) ) {
			case REPLACE_VK:
				{
				alt100=1;
				}
				break;
			case ALTER_ATTRIBUTE:
				{
				alt100=2;
				}
				break;
			case ALTER_METHOD:
				{
				alt100=3;
				}
				break;
			case ALTER_COLLECTION:
				{
				alt100=4;
				}
				break;
			case MODIFIER:
				{
				alt100=5;
				}
				break;
			case COMPILE_VK:
				{
				alt100=6;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 100, 0, input);
				throw nvae;
			}
			switch (alt100) {
				case 1 :
					// PLSQLPrinter.g:441:18: ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? )
					{
					match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_alter_type3992); 
					match(input, Token.DOWN, null); 
					match(input,OBJECT_MEMBERS,FOLLOW_OBJECT_MEMBERS_in_alter_type3995); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:441:48: ( element_spec )+
					int cnt91=0;
					loop91:
					while (true) {
						int alt91=2;
						int LA91_0 = input.LA(1);
						if ( (LA91_0==ELEMENT_SPEC) ) {
							alt91=1;
						}

						switch (alt91) {
						case 1 :
							// PLSQLPrinter.g:441:48: element_spec
							{
							pushFollow(FOLLOW_element_spec_in_alter_type3997);
							element_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt91 >= 1 ) break loop91;
							EarlyExitException eee = new EarlyExitException(91, input);
							throw eee;
						}
						cnt91++;
					}

					match(input, Token.UP, null); 

					// PLSQLPrinter.g:441:63: ( invoker_rights_clause )?
					int alt92=2;
					int LA92_0 = input.LA(1);
					if ( (LA92_0==AUTHID_VK) ) {
						alt92=1;
					}
					switch (alt92) {
						case 1 :
							// PLSQLPrinter.g:441:63: invoker_rights_clause
							{
							pushFollow(FOLLOW_invoker_rights_clause_in_alter_type4001);
							invoker_rights_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:442:18: ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) )
					{
					match(input,ALTER_ATTRIBUTE,FOLLOW_ALTER_ATTRIBUTE_in_alter_type4023); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:442:36: ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP )
					int alt93=3;
					switch ( input.LA(1) ) {
					case ADD_VK:
						{
						alt93=1;
						}
						break;
					case MODIFY_VK:
						{
						alt93=2;
						}
						break;
					case SQL92_RESERVED_DROP:
						{
						alt93=3;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 93, 0, input);
						throw nvae;
					}
					switch (alt93) {
						case 1 :
							// PLSQLPrinter.g:442:37: ADD_VK
							{
							match(input,ADD_VK,FOLLOW_ADD_VK_in_alter_type4026); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:442:44: MODIFY_VK
							{
							match(input,MODIFY_VK,FOLLOW_MODIFY_VK_in_alter_type4028); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:442:54: SQL92_RESERVED_DROP
							{
							match(input,SQL92_RESERVED_DROP,FOLLOW_SQL92_RESERVED_DROP_in_alter_type4030); 
							}
							break;

					}

					match(input,ATTRIBUTES,FOLLOW_ATTRIBUTES_in_alter_type4034); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:442:88: ( attribute_definition )+
					int cnt94=0;
					loop94:
					while (true) {
						int alt94=2;
						int LA94_0 = input.LA(1);
						if ( (LA94_0==ATTRIBUTE) ) {
							alt94=1;
						}

						switch (alt94) {
						case 1 :
							// PLSQLPrinter.g:442:88: attribute_definition
							{
							pushFollow(FOLLOW_attribute_definition_in_alter_type4036);
							attribute_definition();
							state._fsp--;

							}
							break;

						default :
							if ( cnt94 >= 1 ) break loop94;
							EarlyExitException eee = new EarlyExitException(94, input);
							throw eee;
						}
						cnt94++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:443:18: ^( ALTER_METHOD ( alter_method_element )+ )
					{
					match(input,ALTER_METHOD,FOLLOW_ALTER_METHOD_in_alter_type4059); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:443:33: ( alter_method_element )+
					int cnt95=0;
					loop95:
					while (true) {
						int alt95=2;
						int LA95_0 = input.LA(1);
						if ( (LA95_0==ALTER_METHOD_ELEMENT) ) {
							alt95=1;
						}

						switch (alt95) {
						case 1 :
							// PLSQLPrinter.g:443:33: alter_method_element
							{
							pushFollow(FOLLOW_alter_method_element_in_alter_type4061);
							alter_method_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt95 >= 1 ) break loop95;
							EarlyExitException eee = new EarlyExitException(95, input);
							throw eee;
						}
						cnt95++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// PLSQLPrinter.g:444:18: alter_collection_clauses
					{
					pushFollow(FOLLOW_alter_collection_clauses_in_alter_type4082);
					alter_collection_clauses();
					state._fsp--;

					}
					break;
				case 5 :
					// PLSQLPrinter.g:445:18: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_alter_type4101);
					modifier_clause();
					state._fsp--;

					}
					break;
				case 6 :
					// PLSQLPrinter.g:446:18: ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
					{
					match(input,COMPILE_VK,FOLLOW_COMPILE_VK_in_alter_type4121); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:446:31: ( SPECIFICATION_VK | BODY_VK )?
						int alt96=3;
						int LA96_0 = input.LA(1);
						if ( (LA96_0==SPECIFICATION_VK) ) {
							alt96=1;
						}
						else if ( (LA96_0==BODY_VK) ) {
							alt96=2;
						}
						switch (alt96) {
							case 1 :
								// PLSQLPrinter.g:446:32: SPECIFICATION_VK
								{
								match(input,SPECIFICATION_VK,FOLLOW_SPECIFICATION_VK_in_alter_type4124); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:446:49: BODY_VK
								{
								match(input,BODY_VK,FOLLOW_BODY_VK_in_alter_type4126); 
								}
								break;

						}

						// PLSQLPrinter.g:446:59: ( DEBUG_VK )?
						int alt97=2;
						int LA97_0 = input.LA(1);
						if ( (LA97_0==DEBUG_VK) ) {
							alt97=1;
						}
						switch (alt97) {
							case 1 :
								// PLSQLPrinter.g:446:59: DEBUG_VK
								{
								match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_type4130); 
								}
								break;

						}

						// PLSQLPrinter.g:446:69: ( REUSE_VK )?
						int alt98=2;
						int LA98_0 = input.LA(1);
						if ( (LA98_0==REUSE_VK) ) {
							alt98=1;
						}
						switch (alt98) {
							case 1 :
								// PLSQLPrinter.g:446:69: REUSE_VK
								{
								match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_type4133); 
								}
								break;

						}

						// PLSQLPrinter.g:446:79: ( compiler_parameters_clause )*
						loop99:
						while (true) {
							int alt99=2;
							int LA99_0 = input.LA(1);
							if ( (LA99_0==COMPILER_PARAMETER) ) {
								alt99=1;
							}

							switch (alt99) {
							case 1 :
								// PLSQLPrinter.g:446:79: compiler_parameters_clause
								{
								pushFollow(FOLLOW_compiler_parameters_clause_in_alter_type4136);
								compiler_parameters_clause();
								state._fsp--;

								}
								break;

							default :
								break loop99;
							}
						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}

			// PLSQLPrinter.g:448:13: ( dependent_handling_clause )?
			int alt101=2;
			int LA101_0 = input.LA(1);
			if ( (LA101_0==DEPENDENT_HANDLING) ) {
				alt101=1;
			}
			switch (alt101) {
				case 1 :
					// PLSQLPrinter.g:448:13: dependent_handling_clause
					{
					pushFollow(FOLLOW_dependent_handling_clause_in_alter_type4167);
					dependent_handling_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 450:5: -> template( \"not implemented: alter_type\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_type");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_type"


	public static class alter_method_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_method_element"
	// PLSQLPrinter.g:455:1: alter_method_element : ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? ) -> template( \"not implemented: alter_method_element\";
	public final PLSQLPrinter.alter_method_element_return alter_method_element() throws RecognitionException {
		PLSQLPrinter.alter_method_element_return retval = new PLSQLPrinter.alter_method_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:456:5: ( ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? ) -> template( \"not implemented: alter_method_element\")
			// PLSQLPrinter.g:456:10: ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? )
			{
			match(input,ALTER_METHOD_ELEMENT,FOLLOW_ALTER_METHOD_ELEMENT_in_alter_method_element4215); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:456:33: ( ADD_VK | SQL92_RESERVED_DROP )
			int alt102=2;
			int LA102_0 = input.LA(1);
			if ( (LA102_0==ADD_VK) ) {
				alt102=1;
			}
			else if ( (LA102_0==SQL92_RESERVED_DROP) ) {
				alt102=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 102, 0, input);
				throw nvae;
			}

			switch (alt102) {
				case 1 :
					// PLSQLPrinter.g:456:34: ADD_VK
					{
					match(input,ADD_VK,FOLLOW_ADD_VK_in_alter_method_element4218); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:456:41: SQL92_RESERVED_DROP
					{
					match(input,SQL92_RESERVED_DROP,FOLLOW_SQL92_RESERVED_DROP_in_alter_method_element4220); 
					}
					break;

			}

			// PLSQLPrinter.g:456:62: ( map_order_function_spec )?
			int alt103=2;
			int LA103_0 = input.LA(1);
			if ( (LA103_0==SQL92_RESERVED_ORDER||LA103_0==MAP_VK) ) {
				alt103=1;
			}
			switch (alt103) {
				case 1 :
					// PLSQLPrinter.g:456:62: map_order_function_spec
					{
					pushFollow(FOLLOW_map_order_function_spec_in_alter_method_element4223);
					map_order_function_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:456:87: ( subprogram_spec )?
			int alt104=2;
			int LA104_0 = input.LA(1);
			if ( (LA104_0==MEMBER_VK||LA104_0==STATIC_VK) ) {
				alt104=1;
			}
			switch (alt104) {
				case 1 :
					// PLSQLPrinter.g:456:87: subprogram_spec
					{
					pushFollow(FOLLOW_subprogram_spec_in_alter_method_element4226);
					subprogram_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 457:5: -> template( \"not implemented: alter_method_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_method_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_method_element"


	public static class attribute_definition_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "attribute_definition"
	// PLSQLPrinter.g:460:1: attribute_definition : ^( ATTRIBUTE attribute_name ( type_spec )? ) -> template( \"not implemented: attribute_definition\";
	public final PLSQLPrinter.attribute_definition_return attribute_definition() throws RecognitionException {
		PLSQLPrinter.attribute_definition_return retval = new PLSQLPrinter.attribute_definition_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:461:5: ( ^( ATTRIBUTE attribute_name ( type_spec )? ) -> template( \"not implemented: attribute_definition\")
			// PLSQLPrinter.g:461:10: ^( ATTRIBUTE attribute_name ( type_spec )? )
			{
			match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_attribute_definition4263); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_attribute_name_in_attribute_definition4265);
			attribute_name();
			state._fsp--;

			// PLSQLPrinter.g:461:37: ( type_spec )?
			int alt105=2;
			int LA105_0 = input.LA(1);
			if ( (LA105_0==CUSTOM_TYPE||LA105_0==INTERVAL_DATATYPE||LA105_0==NATIVE_DATATYPE) ) {
				alt105=1;
			}
			switch (alt105) {
				case 1 :
					// PLSQLPrinter.g:461:37: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_attribute_definition4267);
					type_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 462:5: -> template( \"not implemented: attribute_definition\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: attribute_definition");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "attribute_definition"


	public static class alter_collection_clauses_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_collection_clauses"
	// PLSQLPrinter.g:465:1: alter_collection_clauses : ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) ) -> template( \"not implemented: alter_collection_clauses\";
	public final PLSQLPrinter.alter_collection_clauses_return alter_collection_clauses() throws RecognitionException {
		PLSQLPrinter.alter_collection_clauses_return retval = new PLSQLPrinter.alter_collection_clauses_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:466:5: ( ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) ) -> template( \"not implemented: alter_collection_clauses\")
			// PLSQLPrinter.g:466:10: ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) )
			{
			match(input,ALTER_COLLECTION,FOLLOW_ALTER_COLLECTION_in_alter_collection_clauses4304); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:467:13: ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) )
			int alt106=2;
			int LA106_0 = input.LA(1);
			if ( (LA106_0==TYPE_VK) ) {
				alt106=1;
			}
			else if ( (LA106_0==LIMIT_VK) ) {
				alt106=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 106, 0, input);
				throw nvae;
			}

			switch (alt106) {
				case 1 :
					// PLSQLPrinter.g:467:18: ^( TYPE_VK type_spec )
					{
					match(input,TYPE_VK,FOLLOW_TYPE_VK_in_alter_collection_clauses4325); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_type_spec_in_alter_collection_clauses4327);
					type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:468:18: ^( LIMIT_VK expression )
					{
					match(input,LIMIT_VK,FOLLOW_LIMIT_VK_in_alter_collection_clauses4348); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_alter_collection_clauses4350);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 471:5: -> template( \"not implemented: alter_collection_clauses\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_collection_clauses");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_collection_clauses"


	public static class dependent_handling_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dependent_handling_clause"
	// PLSQLPrinter.g:474:1: dependent_handling_clause : ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) ) -> template( \"not implemented: dependent_handling_clause\";
	public final PLSQLPrinter.dependent_handling_clause_return dependent_handling_clause() throws RecognitionException {
		PLSQLPrinter.dependent_handling_clause_return retval = new PLSQLPrinter.dependent_handling_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:475:5: ( ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) ) -> template( \"not implemented: dependent_handling_clause\")
			// PLSQLPrinter.g:475:10: ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) )
			{
			match(input,DEPENDENT_HANDLING,FOLLOW_DEPENDENT_HANDLING_in_dependent_handling_clause4411); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:476:13: ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) )
			int alt109=2;
			int LA109_0 = input.LA(1);
			if ( (LA109_0==INVALIDATE_VK) ) {
				alt109=1;
			}
			else if ( (LA109_0==CASCADE_VK) ) {
				alt109=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 109, 0, input);
				throw nvae;
			}

			switch (alt109) {
				case 1 :
					// PLSQLPrinter.g:476:18: INVALIDATE_VK
					{
					match(input,INVALIDATE_VK,FOLLOW_INVALIDATE_VK_in_dependent_handling_clause4431); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:477:18: ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? )
					{
					match(input,CASCADE_VK,FOLLOW_CASCADE_VK_in_dependent_handling_clause4451); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:478:21: ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )?
						int alt108=3;
						int LA108_0 = input.LA(1);
						if ( (LA108_0==CONVERT_VK) ) {
							alt108=1;
						}
						else if ( (LA108_0==SQL92_RESERVED_NOT||LA108_0==INCLUDING_VK) ) {
							alt108=2;
						}
						switch (alt108) {
							case 1 :
								// PLSQLPrinter.g:478:26: CONVERT_VK
								{
								match(input,CONVERT_VK,FOLLOW_CONVERT_VK_in_dependent_handling_clause4479); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:479:26: ( SQL92_RESERVED_NOT )? INCLUDING_VK
								{
								// PLSQLPrinter.g:479:26: ( SQL92_RESERVED_NOT )?
								int alt107=2;
								int LA107_0 = input.LA(1);
								if ( (LA107_0==SQL92_RESERVED_NOT) ) {
									alt107=1;
								}
								switch (alt107) {
									case 1 :
										// PLSQLPrinter.g:479:26: SQL92_RESERVED_NOT
										{
										match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_dependent_handling_clause4506); 
										}
										break;

								}

								match(input,INCLUDING_VK,FOLLOW_INCLUDING_VK_in_dependent_handling_clause4509); 
								}
								break;

						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 484:5: -> template( \"not implemented: dependent_handling_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dependent_handling_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dependent_handling_clause"


	public static class dependent_exceptions_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dependent_exceptions_part"
	// PLSQLPrinter.g:487:1: dependent_exceptions_part : ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name ) -> template( \"not implemented: dependent_exceptions_part\";
	public final PLSQLPrinter.dependent_exceptions_part_return dependent_exceptions_part() throws RecognitionException {
		PLSQLPrinter.dependent_exceptions_part_return retval = new PLSQLPrinter.dependent_exceptions_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:488:5: ( ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name ) -> template( \"not implemented: dependent_exceptions_part\")
			// PLSQLPrinter.g:488:10: ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name )
			{
			match(input,EXCEPTIONS_VK,FOLLOW_EXCEPTIONS_VK_in_dependent_exceptions_part4609); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:488:26: ( FORCE_VK )?
			int alt110=2;
			int LA110_0 = input.LA(1);
			if ( (LA110_0==FORCE_VK) ) {
				alt110=1;
			}
			switch (alt110) {
				case 1 :
					// PLSQLPrinter.g:488:26: FORCE_VK
					{
					match(input,FORCE_VK,FOLLOW_FORCE_VK_in_dependent_exceptions_part4611); 
					}
					break;

			}

			pushFollow(FOLLOW_tableview_name_in_dependent_exceptions_part4614);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 489:5: -> template( \"not implemented: dependent_exceptions_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dependent_exceptions_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dependent_exceptions_part"


	public static class create_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_type"
	// PLSQLPrinter.g:494:1: create_type : ( ^( CREATE_TYPE_BODY ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) ) -> template( \"not implemented: create_type\"| ^( CREATE_TYPE_SPEC ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? ) -> template( \"not implemented: create_type\");
	public final PLSQLPrinter.create_type_return create_type() throws RecognitionException {
		PLSQLPrinter.create_type_return retval = new PLSQLPrinter.create_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:495:5: ( ^( CREATE_TYPE_BODY ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) ) -> template( \"not implemented: create_type\"| ^( CREATE_TYPE_SPEC ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? ) -> template( \"not implemented: create_type\")
			int alt116=2;
			int LA116_0 = input.LA(1);
			if ( (LA116_0==CREATE_TYPE_BODY) ) {
				alt116=1;
			}
			else if ( (LA116_0==CREATE_TYPE_SPEC) ) {
				alt116=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 116, 0, input);
				throw nvae;
			}

			switch (alt116) {
				case 1 :
					// PLSQLPrinter.g:495:10: ^( CREATE_TYPE_BODY ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) )
					{
					match(input,CREATE_TYPE_BODY,FOLLOW_CREATE_TYPE_BODY_in_create_type4652); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:495:29: ( REPLACE_VK )?
					int alt111=2;
					int LA111_0 = input.LA(1);
					if ( (LA111_0==REPLACE_VK) ) {
						alt111=1;
					}
					switch (alt111) {
						case 1 :
							// PLSQLPrinter.g:495:29: REPLACE_VK
							{
							match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_type4654); 
							}
							break;

					}

					pushFollow(FOLLOW_type_name_in_create_type4657);
					type_name();
					state._fsp--;

					match(input,TYPE_BODY_ELEMENTS,FOLLOW_TYPE_BODY_ELEMENTS_in_create_type4660); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:495:72: ( type_body_elements )+
					int cnt112=0;
					loop112:
					while (true) {
						int alt112=2;
						int LA112_0 = input.LA(1);
						if ( (LA112_0==SQL92_RESERVED_ORDER||LA112_0==MAP_VK||LA112_0==MEMBER_VK||LA112_0==STATIC_VK) ) {
							alt112=1;
						}

						switch (alt112) {
						case 1 :
							// PLSQLPrinter.g:495:72: type_body_elements
							{
							pushFollow(FOLLOW_type_body_elements_in_create_type4662);
							type_body_elements();
							state._fsp--;

							}
							break;

						default :
							if ( cnt112 >= 1 ) break loop112;
							EarlyExitException eee = new EarlyExitException(112, input);
							throw eee;
						}
						cnt112++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 496:5: -> template( \"not implemented: create_type\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: create_type");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:497:10: ^( CREATE_TYPE_SPEC ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? )
					{
					match(input,CREATE_TYPE_SPEC,FOLLOW_CREATE_TYPE_SPEC_in_create_type4691); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:497:29: ( REPLACE_VK )?
					int alt113=2;
					int LA113_0 = input.LA(1);
					if ( (LA113_0==REPLACE_VK) ) {
						alt113=1;
					}
					switch (alt113) {
						case 1 :
							// PLSQLPrinter.g:497:29: REPLACE_VK
							{
							match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_type4693); 
							}
							break;

					}

					pushFollow(FOLLOW_type_name_in_create_type4696);
					type_name();
					state._fsp--;

					// PLSQLPrinter.g:497:51: ( CHAR_STRING )?
					int alt114=2;
					int LA114_0 = input.LA(1);
					if ( (LA114_0==CHAR_STRING) ) {
						alt114=1;
					}
					switch (alt114) {
						case 1 :
							// PLSQLPrinter.g:497:51: CHAR_STRING
							{
							match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_create_type4698); 
							}
							break;

					}

					// PLSQLPrinter.g:497:64: ( object_type_def )?
					int alt115=2;
					int LA115_0 = input.LA(1);
					if ( (LA115_0==OBJECT_TYPE_DEF) ) {
						alt115=1;
					}
					switch (alt115) {
						case 1 :
							// PLSQLPrinter.g:497:64: object_type_def
							{
							pushFollow(FOLLOW_object_type_def_in_create_type4701);
							object_type_def();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 498:5: -> template( \"not implemented: create_type\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: create_type");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_type"


	public static class object_type_def_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "object_type_def"
	// PLSQLPrinter.g:501:1: object_type_def : ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) ) -> template( \"not implemented: object_type_def\";
	public final PLSQLPrinter.object_type_def_return object_type_def() throws RecognitionException {
		PLSQLPrinter.object_type_def_return retval = new PLSQLPrinter.object_type_def_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:502:5: ( ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) ) -> template( \"not implemented: object_type_def\")
			// PLSQLPrinter.g:502:10: ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) )
			{
			match(input,OBJECT_TYPE_DEF,FOLLOW_OBJECT_TYPE_DEF_in_object_type_def4738); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:502:28: ( object_as_part | object_under_part )
			int alt117=2;
			int LA117_0 = input.LA(1);
			if ( (LA117_0==OBJECT_AS) ) {
				alt117=1;
			}
			else if ( (LA117_0==UNDER_VK) ) {
				alt117=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 117, 0, input);
				throw nvae;
			}

			switch (alt117) {
				case 1 :
					// PLSQLPrinter.g:502:29: object_as_part
					{
					pushFollow(FOLLOW_object_as_part_in_object_type_def4741);
					object_as_part();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:502:44: object_under_part
					{
					pushFollow(FOLLOW_object_under_part_in_object_type_def4743);
					object_under_part();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:502:63: ( invoker_rights_clause )?
			int alt118=2;
			int LA118_0 = input.LA(1);
			if ( (LA118_0==AUTHID_VK) ) {
				alt118=1;
			}
			switch (alt118) {
				case 1 :
					// PLSQLPrinter.g:502:63: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_object_type_def4746);
					invoker_rights_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:503:14: ( sqlj_object_type )?
			int alt119=2;
			int LA119_0 = input.LA(1);
			if ( (LA119_0==JAVA_VK) ) {
				alt119=1;
			}
			switch (alt119) {
				case 1 :
					// PLSQLPrinter.g:503:14: sqlj_object_type
					{
					pushFollow(FOLLOW_sqlj_object_type_in_object_type_def4762);
					sqlj_object_type();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:503:32: ( modifier_clause )*
			loop120:
			while (true) {
				int alt120=2;
				int LA120_0 = input.LA(1);
				if ( (LA120_0==MODIFIER) ) {
					alt120=1;
				}

				switch (alt120) {
				case 1 :
					// PLSQLPrinter.g:503:32: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_object_type_def4765);
					modifier_clause();
					state._fsp--;

					}
					break;

				default :
					break loop120;
				}
			}

			match(input,OBJECT_MEMBERS,FOLLOW_OBJECT_MEMBERS_in_object_type_def4769); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:503:66: ( element_spec )*
				loop121:
				while (true) {
					int alt121=2;
					int LA121_0 = input.LA(1);
					if ( (LA121_0==ELEMENT_SPEC) ) {
						alt121=1;
					}

					switch (alt121) {
					case 1 :
						// PLSQLPrinter.g:503:66: element_spec
						{
						pushFollow(FOLLOW_element_spec_in_object_type_def4771);
						element_spec();
						state._fsp--;

						}
						break;

					default :
						break loop121;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 504:5: -> template( \"not implemented: object_type_def\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: object_type_def");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_type_def"


	public static class object_as_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "object_as_part"
	// PLSQLPrinter.g:507:1: object_as_part : ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) ) -> template( \"not implemented: object_as_part\";
	public final PLSQLPrinter.object_as_part_return object_as_part() throws RecognitionException {
		PLSQLPrinter.object_as_part_return retval = new PLSQLPrinter.object_as_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:508:5: ( ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) ) -> template( \"not implemented: object_as_part\")
			// PLSQLPrinter.g:508:10: ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) )
			{
			match(input,OBJECT_AS,FOLLOW_OBJECT_AS_in_object_as_part4811); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:508:22: ( OBJECT_VK | varray_type_def | nested_table_type_def )
			int alt122=3;
			switch ( input.LA(1) ) {
			case OBJECT_VK:
				{
				alt122=1;
				}
				break;
			case SQL92_RESERVED_NULL:
			case VARR_ARRAY_DEF:
				{
				alt122=2;
				}
				break;
			case NESTED_TABLE_TYPE_DEF:
				{
				alt122=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 122, 0, input);
				throw nvae;
			}
			switch (alt122) {
				case 1 :
					// PLSQLPrinter.g:508:23: OBJECT_VK
					{
					match(input,OBJECT_VK,FOLLOW_OBJECT_VK_in_object_as_part4814); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:508:33: varray_type_def
					{
					pushFollow(FOLLOW_varray_type_def_in_object_as_part4816);
					varray_type_def();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:508:49: nested_table_type_def
					{
					pushFollow(FOLLOW_nested_table_type_def_in_object_as_part4818);
					nested_table_type_def();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 509:5: -> template( \"not implemented: object_as_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: object_as_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_as_part"


	public static class object_under_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "object_under_part"
	// PLSQLPrinter.g:512:1: object_under_part : ^( UNDER_VK type_spec ) -> template( \"not implemented: object_under_part\";
	public final PLSQLPrinter.object_under_part_return object_under_part() throws RecognitionException {
		PLSQLPrinter.object_under_part_return retval = new PLSQLPrinter.object_under_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:513:5: ( ^( UNDER_VK type_spec ) -> template( \"not implemented: object_under_part\")
			// PLSQLPrinter.g:513:10: ^( UNDER_VK type_spec )
			{
			match(input,UNDER_VK,FOLLOW_UNDER_VK_in_object_under_part4855); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_object_under_part4857);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 514:5: -> template( \"not implemented: object_under_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: object_under_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_under_part"


	public static class nested_table_type_def_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "nested_table_type_def"
	// PLSQLPrinter.g:517:1: nested_table_type_def : ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ( table_indexed_by_part )? ) -> template( \"not implemented: nested_table_type_def\";
	public final PLSQLPrinter.nested_table_type_def_return nested_table_type_def() throws RecognitionException {
		PLSQLPrinter.nested_table_type_def_return retval = new PLSQLPrinter.nested_table_type_def_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:518:5: ( ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ( table_indexed_by_part )? ) -> template( \"not implemented: nested_table_type_def\")
			// PLSQLPrinter.g:518:10: ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ( table_indexed_by_part )? )
			{
			match(input,NESTED_TABLE_TYPE_DEF,FOLLOW_NESTED_TABLE_TYPE_DEF_in_nested_table_type_def4893); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_nested_table_type_def4895);
			type_spec();
			state._fsp--;

			// PLSQLPrinter.g:518:44: ( SQL92_RESERVED_NULL )?
			int alt123=2;
			int LA123_0 = input.LA(1);
			if ( (LA123_0==SQL92_RESERVED_NULL) ) {
				alt123=1;
			}
			switch (alt123) {
				case 1 :
					// PLSQLPrinter.g:518:44: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_nested_table_type_def4897); 
					}
					break;

			}

			// PLSQLPrinter.g:518:65: ( table_indexed_by_part )?
			int alt124=2;
			int LA124_0 = input.LA(1);
			if ( (LA124_0==INDEXED_BY) ) {
				alt124=1;
			}
			switch (alt124) {
				case 1 :
					// PLSQLPrinter.g:518:65: table_indexed_by_part
					{
					pushFollow(FOLLOW_table_indexed_by_part_in_nested_table_type_def4900);
					table_indexed_by_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 519:5: -> template( \"not implemented: nested_table_type_def\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: nested_table_type_def");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "nested_table_type_def"


	public static class sqlj_object_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sqlj_object_type"
	// PLSQLPrinter.g:522:1: sqlj_object_type : ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) ) -> template( \"not implemented: sqlj_object_type\";
	public final PLSQLPrinter.sqlj_object_type_return sqlj_object_type() throws RecognitionException {
		PLSQLPrinter.sqlj_object_type_return retval = new PLSQLPrinter.sqlj_object_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:523:5: ( ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) ) -> template( \"not implemented: sqlj_object_type\")
			// PLSQLPrinter.g:523:10: ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) )
			{
			match(input,JAVA_VK,FOLLOW_JAVA_VK_in_sqlj_object_type4937); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_sqlj_object_type4939);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:523:31: ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK )
			int alt125=3;
			switch ( input.LA(1) ) {
			case SQLDATA_VK:
				{
				alt125=1;
				}
				break;
			case CUSTOMDATUM_VK:
				{
				alt125=2;
				}
				break;
			case ORADATA_VK:
				{
				alt125=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 125, 0, input);
				throw nvae;
			}
			switch (alt125) {
				case 1 :
					// PLSQLPrinter.g:523:32: SQLDATA_VK
					{
					match(input,SQLDATA_VK,FOLLOW_SQLDATA_VK_in_sqlj_object_type4942); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:523:43: CUSTOMDATUM_VK
					{
					match(input,CUSTOMDATUM_VK,FOLLOW_CUSTOMDATUM_VK_in_sqlj_object_type4944); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:523:58: ORADATA_VK
					{
					match(input,ORADATA_VK,FOLLOW_ORADATA_VK_in_sqlj_object_type4946); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 524:5: -> template( \"not implemented: sqlj_object_type\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: sqlj_object_type");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sqlj_object_type"


	public static class type_body_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_body_elements"
	// PLSQLPrinter.g:527:1: type_body_elements : ( map_order_func_declaration -> template( \"not implemented: type_body_elements\"| subprog_decl_in_type -> template( \"not implemented: type_body_elements\");
	public final PLSQLPrinter.type_body_elements_return type_body_elements() throws RecognitionException {
		PLSQLPrinter.type_body_elements_return retval = new PLSQLPrinter.type_body_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:528:5: ( map_order_func_declaration -> template( \"not implemented: type_body_elements\"| subprog_decl_in_type -> template( \"not implemented: type_body_elements\")
			int alt126=2;
			int LA126_0 = input.LA(1);
			if ( (LA126_0==SQL92_RESERVED_ORDER||LA126_0==MAP_VK) ) {
				alt126=1;
			}
			else if ( (LA126_0==MEMBER_VK||LA126_0==STATIC_VK) ) {
				alt126=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 126, 0, input);
				throw nvae;
			}

			switch (alt126) {
				case 1 :
					// PLSQLPrinter.g:528:10: map_order_func_declaration
					{
					pushFollow(FOLLOW_map_order_func_declaration_in_type_body_elements4982);
					map_order_func_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 529:5: -> template( \"not implemented: type_body_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: type_body_elements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:530:10: subprog_decl_in_type
					{
					pushFollow(FOLLOW_subprog_decl_in_type_in_type_body_elements5007);
					subprog_decl_in_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 531:5: -> template( \"not implemented: type_body_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: type_body_elements");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_body_elements"


	public static class map_order_func_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "map_order_func_declaration"
	// PLSQLPrinter.g:534:1: map_order_func_declaration : ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body ) -> template( \"not implemented: map_order_func_declaration\";
	public final PLSQLPrinter.map_order_func_declaration_return map_order_func_declaration() throws RecognitionException {
		PLSQLPrinter.map_order_func_declaration_return retval = new PLSQLPrinter.map_order_func_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:535:5: ( ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body ) -> template( \"not implemented: map_order_func_declaration\")
			// PLSQLPrinter.g:535:10: ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body )
			{
			// PLSQLPrinter.g:535:12: ( MAP_VK | SQL92_RESERVED_ORDER )
			int alt127=2;
			int LA127_0 = input.LA(1);
			if ( (LA127_0==MAP_VK) ) {
				alt127=1;
			}
			else if ( (LA127_0==SQL92_RESERVED_ORDER) ) {
				alt127=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 127, 0, input);
				throw nvae;
			}

			switch (alt127) {
				case 1 :
					// PLSQLPrinter.g:535:13: MAP_VK
					{
					match(input,MAP_VK,FOLLOW_MAP_VK_in_map_order_func_declaration5043); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:535:20: SQL92_RESERVED_ORDER
					{
					match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_map_order_func_declaration5045); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_create_function_body_in_map_order_func_declaration5048);
			create_function_body();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 536:5: -> template( \"not implemented: map_order_func_declaration\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: map_order_func_declaration");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "map_order_func_declaration"


	public static class subprog_decl_in_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subprog_decl_in_type"
	// PLSQLPrinter.g:539:1: subprog_decl_in_type : ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) ) -> template( \"not implemented: subprog_decl_in_type\";
	public final PLSQLPrinter.subprog_decl_in_type_return subprog_decl_in_type() throws RecognitionException {
		PLSQLPrinter.subprog_decl_in_type_return retval = new PLSQLPrinter.subprog_decl_in_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:540:5: ( ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) ) -> template( \"not implemented: subprog_decl_in_type\")
			// PLSQLPrinter.g:540:10: ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) )
			{
			// PLSQLPrinter.g:540:12: ( MEMBER_VK | STATIC_VK )
			int alt128=2;
			int LA128_0 = input.LA(1);
			if ( (LA128_0==MEMBER_VK) ) {
				alt128=1;
			}
			else if ( (LA128_0==STATIC_VK) ) {
				alt128=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 128, 0, input);
				throw nvae;
			}

			switch (alt128) {
				case 1 :
					// PLSQLPrinter.g:540:13: MEMBER_VK
					{
					match(input,MEMBER_VK,FOLLOW_MEMBER_VK_in_subprog_decl_in_type5085); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:540:23: STATIC_VK
					{
					match(input,STATIC_VK,FOLLOW_STATIC_VK_in_subprog_decl_in_type5087); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:541:13: ( create_procedure_body | create_function_body | constructor_declaration )
			int alt129=3;
			switch ( input.LA(1) ) {
			case CREATE_PROCEDURE:
				{
				alt129=1;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt129=2;
				}
				break;
			case CONSTRUCTOR_VK:
				{
				alt129=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 129, 0, input);
				throw nvae;
			}
			switch (alt129) {
				case 1 :
					// PLSQLPrinter.g:541:18: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_subprog_decl_in_type5107);
					create_procedure_body();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:542:18: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_subprog_decl_in_type5126);
					create_function_body();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:543:18: constructor_declaration
					{
					pushFollow(FOLLOW_constructor_declaration_in_subprog_decl_in_type5145);
					constructor_declaration();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 546:5: -> template( \"not implemented: subprog_decl_in_type\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: subprog_decl_in_type");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subprog_decl_in_type"


	public static class constructor_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constructor_declaration"
	// PLSQLPrinter.g:549:1: constructor_declaration : ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE block ) ) ) -> template( \"not implemented: constructor_declaration\";
	public final PLSQLPrinter.constructor_declaration_return constructor_declaration() throws RecognitionException {
		PLSQLPrinter.constructor_declaration_return retval = new PLSQLPrinter.constructor_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:550:5: ( ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE block ) ) ) -> template( \"not implemented: constructor_declaration\")
			// PLSQLPrinter.g:550:10: ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE block ) ) )
			{
			match(input,CONSTRUCTOR_VK,FOLLOW_CONSTRUCTOR_VK_in_constructor_declaration5204); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_constructor_declaration5206);
			type_spec();
			state._fsp--;

			// PLSQLPrinter.g:550:37: ( FINAL_VK )?
			int alt130=2;
			int LA130_0 = input.LA(1);
			if ( (LA130_0==FINAL_VK) ) {
				alt130=1;
			}
			switch (alt130) {
				case 1 :
					// PLSQLPrinter.g:550:37: FINAL_VK
					{
					match(input,FINAL_VK,FOLLOW_FINAL_VK_in_constructor_declaration5208); 
					}
					break;

			}

			// PLSQLPrinter.g:550:47: ( INSTANTIABLE_VK )?
			int alt131=2;
			int LA131_0 = input.LA(1);
			if ( (LA131_0==INSTANTIABLE_VK) ) {
				alt131=1;
			}
			switch (alt131) {
				case 1 :
					// PLSQLPrinter.g:550:47: INSTANTIABLE_VK
					{
					match(input,INSTANTIABLE_VK,FOLLOW_INSTANTIABLE_VK_in_constructor_declaration5211); 
					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_constructor_declaration5215); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:550:77: ( type_elements_parameter )*
				loop132:
				while (true) {
					int alt132=2;
					int LA132_0 = input.LA(1);
					if ( (LA132_0==PARAMETER) ) {
						alt132=1;
					}

					switch (alt132) {
					case 1 :
						// PLSQLPrinter.g:550:77: type_elements_parameter
						{
						pushFollow(FOLLOW_type_elements_parameter_in_constructor_declaration5217);
						type_elements_parameter();
						state._fsp--;

						}
						break;

					default :
						break loop132;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:551:13: ( ^( CALL_MODE call_spec ) | ^( BODY_MODE block ) )
			int alt133=2;
			int LA133_0 = input.LA(1);
			if ( (LA133_0==CALL_MODE) ) {
				alt133=1;
			}
			else if ( (LA133_0==BODY_MODE) ) {
				alt133=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 133, 0, input);
				throw nvae;
			}

			switch (alt133) {
				case 1 :
					// PLSQLPrinter.g:551:18: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_constructor_declaration5240); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_constructor_declaration5242);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:552:18: ^( BODY_MODE block )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_constructor_declaration5263); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_constructor_declaration5265);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 555:5: -> template( \"not implemented: constructor_declaration\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: constructor_declaration");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constructor_declaration"


	public static class modifier_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "modifier_clause"
	// PLSQLPrinter.g:562:1: modifier_clause : ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) ) -> template( \"not implemented: modifier_clause\";
	public final PLSQLPrinter.modifier_clause_return modifier_clause() throws RecognitionException {
		PLSQLPrinter.modifier_clause_return retval = new PLSQLPrinter.modifier_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:563:5: ( ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) ) -> template( \"not implemented: modifier_clause\")
			// PLSQLPrinter.g:563:10: ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) )
			{
			match(input,MODIFIER,FOLLOW_MODIFIER_in_modifier_clause5329); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:563:21: ( SQL92_RESERVED_NOT )?
			int alt134=2;
			int LA134_0 = input.LA(1);
			if ( (LA134_0==SQL92_RESERVED_NOT) ) {
				alt134=1;
			}
			switch (alt134) {
				case 1 :
					// PLSQLPrinter.g:563:21: SQL92_RESERVED_NOT
					{
					match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_modifier_clause5331); 
					}
					break;

			}

			// PLSQLPrinter.g:563:41: ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK )
			int alt135=3;
			switch ( input.LA(1) ) {
			case INSTANTIABLE_VK:
				{
				alt135=1;
				}
				break;
			case FINAL_VK:
				{
				alt135=2;
				}
				break;
			case OVERRIDING_VK:
				{
				alt135=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 135, 0, input);
				throw nvae;
			}
			switch (alt135) {
				case 1 :
					// PLSQLPrinter.g:563:42: INSTANTIABLE_VK
					{
					match(input,INSTANTIABLE_VK,FOLLOW_INSTANTIABLE_VK_in_modifier_clause5335); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:563:58: FINAL_VK
					{
					match(input,FINAL_VK,FOLLOW_FINAL_VK_in_modifier_clause5337); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:563:67: OVERRIDING_VK
					{
					match(input,OVERRIDING_VK,FOLLOW_OVERRIDING_VK_in_modifier_clause5339); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 564:5: -> template( \"not implemented: modifier_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: modifier_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "modifier_clause"


	public static class sqlj_object_type_attr_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sqlj_object_type_attr"
	// PLSQLPrinter.g:567:1: sqlj_object_type_attr : ^( EXTERNAL_VK expression ) -> template( \"not implemented: sqlj_object_type_attr\";
	public final PLSQLPrinter.sqlj_object_type_attr_return sqlj_object_type_attr() throws RecognitionException {
		PLSQLPrinter.sqlj_object_type_attr_return retval = new PLSQLPrinter.sqlj_object_type_attr_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:568:5: ( ^( EXTERNAL_VK expression ) -> template( \"not implemented: sqlj_object_type_attr\")
			// PLSQLPrinter.g:568:10: ^( EXTERNAL_VK expression )
			{
			match(input,EXTERNAL_VK,FOLLOW_EXTERNAL_VK_in_sqlj_object_type_attr5376); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_sqlj_object_type_attr5378);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 569:5: -> template( \"not implemented: sqlj_object_type_attr\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: sqlj_object_type_attr");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sqlj_object_type_attr"


	public static class element_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "element_spec"
	// PLSQLPrinter.g:572:1: element_spec : ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? ) -> template( \"not implemented: element_spec\";
	public final PLSQLPrinter.element_spec_return element_spec() throws RecognitionException {
		PLSQLPrinter.element_spec_return retval = new PLSQLPrinter.element_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:573:5: ( ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? ) -> template( \"not implemented: element_spec\")
			// PLSQLPrinter.g:573:10: ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? )
			{
			match(input,ELEMENT_SPEC,FOLLOW_ELEMENT_SPEC_in_element_spec5414); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:573:25: ( element_spec_options )+
			int cnt136=0;
			loop136:
			while (true) {
				int alt136=2;
				int LA136_0 = input.LA(1);
				if ( (LA136_0==SQL92_RESERVED_ORDER||LA136_0==CONSTRUCTOR_SPEC||LA136_0==FIELD_SPEC||LA136_0==MAP_VK||LA136_0==MEMBER_VK||LA136_0==STATIC_VK) ) {
					alt136=1;
				}

				switch (alt136) {
				case 1 :
					// PLSQLPrinter.g:573:25: element_spec_options
					{
					pushFollow(FOLLOW_element_spec_options_in_element_spec5416);
					element_spec_options();
					state._fsp--;

					}
					break;

				default :
					if ( cnt136 >= 1 ) break loop136;
					EarlyExitException eee = new EarlyExitException(136, input);
					throw eee;
				}
				cnt136++;
			}

			// PLSQLPrinter.g:573:47: ( modifier_clause )?
			int alt137=2;
			int LA137_0 = input.LA(1);
			if ( (LA137_0==MODIFIER) ) {
				alt137=1;
			}
			switch (alt137) {
				case 1 :
					// PLSQLPrinter.g:573:47: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_element_spec5419);
					modifier_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:573:64: ( pragma_clause )?
			int alt138=2;
			int LA138_0 = input.LA(1);
			if ( (LA138_0==PRAGMA_VK) ) {
				alt138=1;
			}
			switch (alt138) {
				case 1 :
					// PLSQLPrinter.g:573:64: pragma_clause
					{
					pushFollow(FOLLOW_pragma_clause_in_element_spec5422);
					pragma_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 574:5: -> template( \"not implemented: element_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: element_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "element_spec"


	public static class element_spec_options_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "element_spec_options"
	// PLSQLPrinter.g:577:1: element_spec_options : ( subprogram_spec -> template( \"not implemented: element_spec_options\"| constructor_spec -> template( \"not implemented: element_spec_options\"| map_order_function_spec -> template( \"not implemented: element_spec_options\"| ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) -> template( \"not implemented: element_spec_options\");
	public final PLSQLPrinter.element_spec_options_return element_spec_options() throws RecognitionException {
		PLSQLPrinter.element_spec_options_return retval = new PLSQLPrinter.element_spec_options_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:578:5: ( subprogram_spec -> template( \"not implemented: element_spec_options\"| constructor_spec -> template( \"not implemented: element_spec_options\"| map_order_function_spec -> template( \"not implemented: element_spec_options\"| ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) -> template( \"not implemented: element_spec_options\")
			int alt140=4;
			switch ( input.LA(1) ) {
			case MEMBER_VK:
			case STATIC_VK:
				{
				alt140=1;
				}
				break;
			case CONSTRUCTOR_SPEC:
				{
				alt140=2;
				}
				break;
			case SQL92_RESERVED_ORDER:
			case MAP_VK:
				{
				alt140=3;
				}
				break;
			case FIELD_SPEC:
				{
				alt140=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 140, 0, input);
				throw nvae;
			}
			switch (alt140) {
				case 1 :
					// PLSQLPrinter.g:578:10: subprogram_spec
					{
					pushFollow(FOLLOW_subprogram_spec_in_element_spec_options5458);
					subprogram_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 579:5: -> template( \"not implemented: element_spec_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: element_spec_options");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:580:10: constructor_spec
					{
					pushFollow(FOLLOW_constructor_spec_in_element_spec_options5483);
					constructor_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 581:5: -> template( \"not implemented: element_spec_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: element_spec_options");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:582:10: map_order_function_spec
					{
					pushFollow(FOLLOW_map_order_function_spec_in_element_spec_options5508);
					map_order_function_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 583:5: -> template( \"not implemented: element_spec_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: element_spec_options");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:584:10: ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? )
					{
					match(input,FIELD_SPEC,FOLLOW_FIELD_SPEC_in_element_spec_options5534); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_id_in_element_spec_options5536);
					id();
					state._fsp--;

					pushFollow(FOLLOW_type_spec_in_element_spec_options5538);
					type_spec();
					state._fsp--;

					// PLSQLPrinter.g:584:36: ( sqlj_object_type_attr )?
					int alt139=2;
					int LA139_0 = input.LA(1);
					if ( (LA139_0==EXTERNAL_VK) ) {
						alt139=1;
					}
					switch (alt139) {
						case 1 :
							// PLSQLPrinter.g:584:36: sqlj_object_type_attr
							{
							pushFollow(FOLLOW_sqlj_object_type_attr_in_element_spec_options5540);
							sqlj_object_type_attr();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 585:5: -> template( \"not implemented: element_spec_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: element_spec_options");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "element_spec_options"


	public static class subprogram_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subprogram_spec"
	// PLSQLPrinter.g:588:1: subprogram_spec : ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) ) -> template( \"not implemented: subprogram_spec\";
	public final PLSQLPrinter.subprogram_spec_return subprogram_spec() throws RecognitionException {
		PLSQLPrinter.subprogram_spec_return retval = new PLSQLPrinter.subprogram_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:589:5: ( ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) ) -> template( \"not implemented: subprogram_spec\")
			// PLSQLPrinter.g:589:10: ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) )
			{
			// PLSQLPrinter.g:589:12: ( MEMBER_VK | STATIC_VK )
			int alt141=2;
			int LA141_0 = input.LA(1);
			if ( (LA141_0==MEMBER_VK) ) {
				alt141=1;
			}
			else if ( (LA141_0==STATIC_VK) ) {
				alt141=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 141, 0, input);
				throw nvae;
			}

			switch (alt141) {
				case 1 :
					// PLSQLPrinter.g:589:13: MEMBER_VK
					{
					match(input,MEMBER_VK,FOLLOW_MEMBER_VK_in_subprogram_spec5578); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:589:23: STATIC_VK
					{
					match(input,STATIC_VK,FOLLOW_STATIC_VK_in_subprogram_spec5580); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:590:13: ( procedure_spec | function_spec )
			int alt142=2;
			int LA142_0 = input.LA(1);
			if ( (LA142_0==PROCEDURE_SPEC) ) {
				alt142=1;
			}
			else if ( (LA142_0==FUNCTION_SPEC) ) {
				alt142=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 142, 0, input);
				throw nvae;
			}

			switch (alt142) {
				case 1 :
					// PLSQLPrinter.g:590:18: procedure_spec
					{
					pushFollow(FOLLOW_procedure_spec_in_subprogram_spec5600);
					procedure_spec();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:591:18: function_spec
					{
					pushFollow(FOLLOW_function_spec_in_subprogram_spec5619);
					function_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 594:5: -> template( \"not implemented: subprogram_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: subprogram_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subprogram_spec"


	public static class constructor_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constructor_spec"
	// PLSQLPrinter.g:597:1: constructor_spec : ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? ) -> template( \"not implemented: constructor_spec\";
	public final PLSQLPrinter.constructor_spec_return constructor_spec() throws RecognitionException {
		PLSQLPrinter.constructor_spec_return retval = new PLSQLPrinter.constructor_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:598:5: ( ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? ) -> template( \"not implemented: constructor_spec\")
			// PLSQLPrinter.g:598:10: ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? )
			{
			match(input,CONSTRUCTOR_SPEC,FOLLOW_CONSTRUCTOR_SPEC_in_constructor_spec5678); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_constructor_spec5680);
			type_spec();
			state._fsp--;

			// PLSQLPrinter.g:598:39: ( FINAL_VK )?
			int alt143=2;
			int LA143_0 = input.LA(1);
			if ( (LA143_0==FINAL_VK) ) {
				alt143=1;
			}
			switch (alt143) {
				case 1 :
					// PLSQLPrinter.g:598:39: FINAL_VK
					{
					match(input,FINAL_VK,FOLLOW_FINAL_VK_in_constructor_spec5682); 
					}
					break;

			}

			// PLSQLPrinter.g:598:49: ( INSTANTIABLE_VK )?
			int alt144=2;
			int LA144_0 = input.LA(1);
			if ( (LA144_0==INSTANTIABLE_VK) ) {
				alt144=1;
			}
			switch (alt144) {
				case 1 :
					// PLSQLPrinter.g:598:49: INSTANTIABLE_VK
					{
					match(input,INSTANTIABLE_VK,FOLLOW_INSTANTIABLE_VK_in_constructor_spec5685); 
					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_constructor_spec5689); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:598:79: ( type_elements_parameter )*
				loop145:
				while (true) {
					int alt145=2;
					int LA145_0 = input.LA(1);
					if ( (LA145_0==PARAMETER) ) {
						alt145=1;
					}

					switch (alt145) {
					case 1 :
						// PLSQLPrinter.g:598:79: type_elements_parameter
						{
						pushFollow(FOLLOW_type_elements_parameter_in_constructor_spec5691);
						type_elements_parameter();
						state._fsp--;

						}
						break;

					default :
						break loop145;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:598:105: ( constructor_call_mode )?
			int alt146=2;
			int LA146_0 = input.LA(1);
			if ( (LA146_0==CALL_MODE) ) {
				alt146=1;
			}
			switch (alt146) {
				case 1 :
					// PLSQLPrinter.g:598:105: constructor_call_mode
					{
					pushFollow(FOLLOW_constructor_call_mode_in_constructor_spec5695);
					constructor_call_mode();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 599:5: -> template( \"not implemented: constructor_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: constructor_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constructor_spec"


	public static class constructor_call_mode_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constructor_call_mode"
	// PLSQLPrinter.g:602:1: constructor_call_mode : ^( CALL_MODE call_spec ) -> template( \"not implemented: constructor_call_mode\";
	public final PLSQLPrinter.constructor_call_mode_return constructor_call_mode() throws RecognitionException {
		PLSQLPrinter.constructor_call_mode_return retval = new PLSQLPrinter.constructor_call_mode_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:603:5: ( ^( CALL_MODE call_spec ) -> template( \"not implemented: constructor_call_mode\")
			// PLSQLPrinter.g:603:10: ^( CALL_MODE call_spec )
			{
			match(input,CALL_MODE,FOLLOW_CALL_MODE_in_constructor_call_mode5732); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_call_spec_in_constructor_call_mode5734);
			call_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 604:5: -> template( \"not implemented: constructor_call_mode\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: constructor_call_mode");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constructor_call_mode"


	public static class map_order_function_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "map_order_function_spec"
	// PLSQLPrinter.g:607:1: map_order_function_spec : ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec ) -> template( \"not implemented: map_order_function_spec\";
	public final PLSQLPrinter.map_order_function_spec_return map_order_function_spec() throws RecognitionException {
		PLSQLPrinter.map_order_function_spec_return retval = new PLSQLPrinter.map_order_function_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:608:5: ( ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec ) -> template( \"not implemented: map_order_function_spec\")
			// PLSQLPrinter.g:608:10: ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec )
			{
			// PLSQLPrinter.g:608:12: ( MAP_VK | SQL92_RESERVED_ORDER )
			int alt147=2;
			int LA147_0 = input.LA(1);
			if ( (LA147_0==MAP_VK) ) {
				alt147=1;
			}
			else if ( (LA147_0==SQL92_RESERVED_ORDER) ) {
				alt147=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 147, 0, input);
				throw nvae;
			}

			switch (alt147) {
				case 1 :
					// PLSQLPrinter.g:608:13: MAP_VK
					{
					match(input,MAP_VK,FOLLOW_MAP_VK_in_map_order_function_spec5771); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:608:20: SQL92_RESERVED_ORDER
					{
					match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_map_order_function_spec5773); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_spec_in_map_order_function_spec5776);
			function_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 609:5: -> template( \"not implemented: map_order_function_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: map_order_function_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "map_order_function_spec"


	public static class pragma_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_clause"
	// PLSQLPrinter.g:612:1: pragma_clause : ^( PRAGMA_VK ( pragma_elements )+ ) -> template( \"not implemented: pragma_clause\";
	public final PLSQLPrinter.pragma_clause_return pragma_clause() throws RecognitionException {
		PLSQLPrinter.pragma_clause_return retval = new PLSQLPrinter.pragma_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:613:5: ( ^( PRAGMA_VK ( pragma_elements )+ ) -> template( \"not implemented: pragma_clause\")
			// PLSQLPrinter.g:613:10: ^( PRAGMA_VK ( pragma_elements )+ )
			{
			match(input,PRAGMA_VK,FOLLOW_PRAGMA_VK_in_pragma_clause5812); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:613:22: ( pragma_elements )+
			int cnt148=0;
			loop148:
			while (true) {
				int alt148=2;
				int LA148_0 = input.LA(1);
				if ( (LA148_0==SQL92_RESERVED_DEFAULT||LA148_0==CHAR_SET_NAME||LA148_0==ID) ) {
					alt148=1;
				}

				switch (alt148) {
				case 1 :
					// PLSQLPrinter.g:613:22: pragma_elements
					{
					pushFollow(FOLLOW_pragma_elements_in_pragma_clause5814);
					pragma_elements();
					state._fsp--;

					}
					break;

				default :
					if ( cnt148 >= 1 ) break loop148;
					EarlyExitException eee = new EarlyExitException(148, input);
					throw eee;
				}
				cnt148++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 614:5: -> template( \"not implemented: pragma_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pragma_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_clause"


	public static class pragma_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_elements"
	// PLSQLPrinter.g:617:1: pragma_elements : ( id -> template( \"not implemented: pragma_elements\"| SQL92_RESERVED_DEFAULT -> template( \"not implemented: pragma_elements\");
	public final PLSQLPrinter.pragma_elements_return pragma_elements() throws RecognitionException {
		PLSQLPrinter.pragma_elements_return retval = new PLSQLPrinter.pragma_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:618:5: ( id -> template( \"not implemented: pragma_elements\"| SQL92_RESERVED_DEFAULT -> template( \"not implemented: pragma_elements\")
			int alt149=2;
			int LA149_0 = input.LA(1);
			if ( (LA149_0==CHAR_SET_NAME||LA149_0==ID) ) {
				alt149=1;
			}
			else if ( (LA149_0==SQL92_RESERVED_DEFAULT) ) {
				alt149=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 149, 0, input);
				throw nvae;
			}

			switch (alt149) {
				case 1 :
					// PLSQLPrinter.g:618:10: id
					{
					pushFollow(FOLLOW_id_in_pragma_elements5850);
					id();
					state._fsp--;

					// TEMPLATE REWRITE
					// 619:5: -> template( \"not implemented: pragma_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: pragma_elements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:620:10: SQL92_RESERVED_DEFAULT
					{
					match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_elements5875); 
					// TEMPLATE REWRITE
					// 621:5: -> template( \"not implemented: pragma_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: pragma_elements");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_elements"


	public static class type_elements_parameter_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_elements_parameter"
	// PLSQLPrinter.g:624:1: type_elements_parameter : ^( PARAMETER parameter_name type_spec ) -> template( \"not implemented: type_elements_parameter\";
	public final PLSQLPrinter.type_elements_parameter_return type_elements_parameter() throws RecognitionException {
		PLSQLPrinter.type_elements_parameter_return retval = new PLSQLPrinter.type_elements_parameter_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:625:5: ( ^( PARAMETER parameter_name type_spec ) -> template( \"not implemented: type_elements_parameter\")
			// PLSQLPrinter.g:625:10: ^( PARAMETER parameter_name type_spec )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_type_elements_parameter5910); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_type_elements_parameter5912);
			parameter_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_type_elements_parameter5914);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 626:5: -> template( \"not implemented: type_elements_parameter\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: type_elements_parameter");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_elements_parameter"


	public static class drop_sequence_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_sequence"
	// PLSQLPrinter.g:635:1: drop_sequence : ^( DROP_SEQUENCE sequence_name ) -> template( \"not implemented: drop_sequence\";
	public final PLSQLPrinter.drop_sequence_return drop_sequence() throws RecognitionException {
		PLSQLPrinter.drop_sequence_return retval = new PLSQLPrinter.drop_sequence_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:636:5: ( ^( DROP_SEQUENCE sequence_name ) -> template( \"not implemented: drop_sequence\")
			// PLSQLPrinter.g:636:9: ^( DROP_SEQUENCE sequence_name )
			{
			match(input,DROP_SEQUENCE,FOLLOW_DROP_SEQUENCE_in_drop_sequence5955); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_sequence_name_in_drop_sequence5957);
			sequence_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 637:5: -> template( \"not implemented: drop_sequence\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_sequence");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_sequence"


	public static class alter_sequence_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_sequence"
	// PLSQLPrinter.g:640:1: alter_sequence : ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ ) -> template( \"not implemented: alter_sequence\";
	public final PLSQLPrinter.alter_sequence_return alter_sequence() throws RecognitionException {
		PLSQLPrinter.alter_sequence_return retval = new PLSQLPrinter.alter_sequence_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:641:5: ( ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ ) -> template( \"not implemented: alter_sequence\")
			// PLSQLPrinter.g:641:10: ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ )
			{
			match(input,ALTER_SEQUENCE,FOLLOW_ALTER_SEQUENCE_in_alter_sequence5993); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_sequence_name_in_alter_sequence5995);
			sequence_name();
			state._fsp--;

			// PLSQLPrinter.g:641:41: ( sequence_spec )+
			int cnt150=0;
			loop150:
			while (true) {
				int alt150=2;
				int LA150_0 = input.LA(1);
				if ( (LA150_0==CACHE_VK||LA150_0==CYCLE_VK||LA150_0==INCREMENT_VK||LA150_0==MAXVALUE_VK||LA150_0==MINVALUE_VK||LA150_0==NOCACHE_VK||LA150_0==NOCYCLE_VK||(LA150_0 >= NOMAXVALUE_VK && LA150_0 <= NOMINVALUE_VK)||LA150_0==NOORDER_VK||(LA150_0 >= ORDER_VK && LA150_0 <= START_VK)) ) {
					alt150=1;
				}

				switch (alt150) {
				case 1 :
					// PLSQLPrinter.g:641:41: sequence_spec
					{
					pushFollow(FOLLOW_sequence_spec_in_alter_sequence5997);
					sequence_spec();
					state._fsp--;

					}
					break;

				default :
					if ( cnt150 >= 1 ) break loop150;
					EarlyExitException eee = new EarlyExitException(150, input);
					throw eee;
				}
				cnt150++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 642:5: -> template( \"not implemented: alter_sequence\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_sequence");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_sequence"


	public static class create_sequence_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_sequence"
	// PLSQLPrinter.g:645:1: create_sequence : ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* ) -> template( \"not implemented: create_sequence\";
	public final PLSQLPrinter.create_sequence_return create_sequence() throws RecognitionException {
		PLSQLPrinter.create_sequence_return retval = new PLSQLPrinter.create_sequence_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:646:5: ( ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* ) -> template( \"not implemented: create_sequence\")
			// PLSQLPrinter.g:646:10: ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* )
			{
			match(input,CREATE_SEQUENCE,FOLLOW_CREATE_SEQUENCE_in_create_sequence6034); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_sequence_name_in_create_sequence6036);
			sequence_name();
			state._fsp--;

			// PLSQLPrinter.g:646:42: ( sequence_spec )*
			loop151:
			while (true) {
				int alt151=2;
				int LA151_0 = input.LA(1);
				if ( (LA151_0==CACHE_VK||LA151_0==CYCLE_VK||LA151_0==INCREMENT_VK||LA151_0==MAXVALUE_VK||LA151_0==MINVALUE_VK||LA151_0==NOCACHE_VK||LA151_0==NOCYCLE_VK||(LA151_0 >= NOMAXVALUE_VK && LA151_0 <= NOMINVALUE_VK)||LA151_0==NOORDER_VK||(LA151_0 >= ORDER_VK && LA151_0 <= START_VK)) ) {
					alt151=1;
				}

				switch (alt151) {
				case 1 :
					// PLSQLPrinter.g:646:42: sequence_spec
					{
					pushFollow(FOLLOW_sequence_spec_in_create_sequence6038);
					sequence_spec();
					state._fsp--;

					}
					break;

				default :
					break loop151;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 647:5: -> template( \"not implemented: create_sequence\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: create_sequence");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_sequence"


	public static class sequence_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sequence_spec"
	// PLSQLPrinter.g:652:1: sequence_spec : ( ^( START_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( INCREMENT_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( MAXVALUE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( MINVALUE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( CACHE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| NOMAXVALUE_VK -> template( \"not implemented: sequence_spec\"| NOMINVALUE_VK -> template( \"not implemented: sequence_spec\"| CYCLE_VK -> template( \"not implemented: sequence_spec\"| NOCYCLE_VK -> template( \"not implemented: sequence_spec\"| NOCACHE_VK -> template( \"not implemented: sequence_spec\"| ORDER_VK -> template( \"not implemented: sequence_spec\"| NOORDER_VK -> template( \"not implemented: sequence_spec\");
	public final PLSQLPrinter.sequence_spec_return sequence_spec() throws RecognitionException {
		PLSQLPrinter.sequence_spec_return retval = new PLSQLPrinter.sequence_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:653:5: ( ^( START_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( INCREMENT_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( MAXVALUE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( MINVALUE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( CACHE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| NOMAXVALUE_VK -> template( \"not implemented: sequence_spec\"| NOMINVALUE_VK -> template( \"not implemented: sequence_spec\"| CYCLE_VK -> template( \"not implemented: sequence_spec\"| NOCYCLE_VK -> template( \"not implemented: sequence_spec\"| NOCACHE_VK -> template( \"not implemented: sequence_spec\"| ORDER_VK -> template( \"not implemented: sequence_spec\"| NOORDER_VK -> template( \"not implemented: sequence_spec\")
			int alt152=12;
			switch ( input.LA(1) ) {
			case START_VK:
				{
				alt152=1;
				}
				break;
			case INCREMENT_VK:
				{
				alt152=2;
				}
				break;
			case MAXVALUE_VK:
				{
				alt152=3;
				}
				break;
			case MINVALUE_VK:
				{
				alt152=4;
				}
				break;
			case CACHE_VK:
				{
				alt152=5;
				}
				break;
			case NOMAXVALUE_VK:
				{
				alt152=6;
				}
				break;
			case NOMINVALUE_VK:
				{
				alt152=7;
				}
				break;
			case CYCLE_VK:
				{
				alt152=8;
				}
				break;
			case NOCYCLE_VK:
				{
				alt152=9;
				}
				break;
			case NOCACHE_VK:
				{
				alt152=10;
				}
				break;
			case ORDER_VK:
				{
				alt152=11;
				}
				break;
			case NOORDER_VK:
				{
				alt152=12;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 152, 0, input);
				throw nvae;
			}
			switch (alt152) {
				case 1 :
					// PLSQLPrinter.g:653:10: ^( START_VK UNSIGNED_INTEGER )
					{
					match(input,START_VK,FOLLOW_START_VK_in_sequence_spec6077); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6079); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 654:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:655:10: ^( INCREMENT_VK UNSIGNED_INTEGER )
					{
					match(input,INCREMENT_VK,FOLLOW_INCREMENT_VK_in_sequence_spec6106); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6108); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 656:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:657:10: ^( MAXVALUE_VK UNSIGNED_INTEGER )
					{
					match(input,MAXVALUE_VK,FOLLOW_MAXVALUE_VK_in_sequence_spec6135); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6137); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 658:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:659:10: ^( MINVALUE_VK UNSIGNED_INTEGER )
					{
					match(input,MINVALUE_VK,FOLLOW_MINVALUE_VK_in_sequence_spec6164); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6166); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 660:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:661:10: ^( CACHE_VK UNSIGNED_INTEGER )
					{
					match(input,CACHE_VK,FOLLOW_CACHE_VK_in_sequence_spec6193); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6195); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 662:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:663:10: NOMAXVALUE_VK
					{
					match(input,NOMAXVALUE_VK,FOLLOW_NOMAXVALUE_VK_in_sequence_spec6221); 
					// TEMPLATE REWRITE
					// 664:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:665:10: NOMINVALUE_VK
					{
					match(input,NOMINVALUE_VK,FOLLOW_NOMINVALUE_VK_in_sequence_spec6246); 
					// TEMPLATE REWRITE
					// 666:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:667:10: CYCLE_VK
					{
					match(input,CYCLE_VK,FOLLOW_CYCLE_VK_in_sequence_spec6271); 
					// TEMPLATE REWRITE
					// 668:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:669:10: NOCYCLE_VK
					{
					match(input,NOCYCLE_VK,FOLLOW_NOCYCLE_VK_in_sequence_spec6296); 
					// TEMPLATE REWRITE
					// 670:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:671:10: NOCACHE_VK
					{
					match(input,NOCACHE_VK,FOLLOW_NOCACHE_VK_in_sequence_spec6321); 
					// TEMPLATE REWRITE
					// 672:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:673:10: ORDER_VK
					{
					match(input,ORDER_VK,FOLLOW_ORDER_VK_in_sequence_spec6346); 
					// TEMPLATE REWRITE
					// 674:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:675:10: NOORDER_VK
					{
					match(input,NOORDER_VK,FOLLOW_NOORDER_VK_in_sequence_spec6371); 
					// TEMPLATE REWRITE
					// 676:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sequence_spec"


	public static class invoker_rights_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "invoker_rights_clause"
	// PLSQLPrinter.g:685:1: invoker_rights_clause : ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) ) -> template( \"not implemented: invoker_rights_clause\";
	public final PLSQLPrinter.invoker_rights_clause_return invoker_rights_clause() throws RecognitionException {
		PLSQLPrinter.invoker_rights_clause_return retval = new PLSQLPrinter.invoker_rights_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:686:5: ( ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) ) -> template( \"not implemented: invoker_rights_clause\")
			// PLSQLPrinter.g:686:10: ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) )
			{
			match(input,AUTHID_VK,FOLLOW_AUTHID_VK_in_invoker_rights_clause6412); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:686:22: ( CURRENT_USER_VK | DEFINER_VK )
			int alt153=2;
			int LA153_0 = input.LA(1);
			if ( (LA153_0==CURRENT_USER_VK) ) {
				alt153=1;
			}
			else if ( (LA153_0==DEFINER_VK) ) {
				alt153=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 153, 0, input);
				throw nvae;
			}

			switch (alt153) {
				case 1 :
					// PLSQLPrinter.g:686:23: CURRENT_USER_VK
					{
					match(input,CURRENT_USER_VK,FOLLOW_CURRENT_USER_VK_in_invoker_rights_clause6415); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:686:39: DEFINER_VK
					{
					match(input,DEFINER_VK,FOLLOW_DEFINER_VK_in_invoker_rights_clause6417); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 687:5: -> template( \"not implemented: invoker_rights_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: invoker_rights_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "invoker_rights_clause"


	public static class compiler_parameters_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "compiler_parameters_clause"
	// PLSQLPrinter.g:690:1: compiler_parameters_clause : ^( COMPILER_PARAMETER ^( ASSIGN id expression ) ) -> template( \"not implemented: compiler_parameters_clause\";
	public final PLSQLPrinter.compiler_parameters_clause_return compiler_parameters_clause() throws RecognitionException {
		PLSQLPrinter.compiler_parameters_clause_return retval = new PLSQLPrinter.compiler_parameters_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:691:5: ( ^( COMPILER_PARAMETER ^( ASSIGN id expression ) ) -> template( \"not implemented: compiler_parameters_clause\")
			// PLSQLPrinter.g:691:10: ^( COMPILER_PARAMETER ^( ASSIGN id expression ) )
			{
			match(input,COMPILER_PARAMETER,FOLLOW_COMPILER_PARAMETER_in_compiler_parameters_clause6454); 
			match(input, Token.DOWN, null); 
			match(input,ASSIGN,FOLLOW_ASSIGN_in_compiler_parameters_clause6457); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_id_in_compiler_parameters_clause6459);
			id();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_compiler_parameters_clause6461);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 692:5: -> template( \"not implemented: compiler_parameters_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: compiler_parameters_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compiler_parameters_clause"


	public static class call_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "call_spec"
	// PLSQLPrinter.g:695:1: call_spec : ^( LANGUAGE_VK ( java_spec | c_spec ) ) -> template( \"not implemented: call_spec\";
	public final PLSQLPrinter.call_spec_return call_spec() throws RecognitionException {
		PLSQLPrinter.call_spec_return retval = new PLSQLPrinter.call_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:696:5: ( ^( LANGUAGE_VK ( java_spec | c_spec ) ) -> template( \"not implemented: call_spec\")
			// PLSQLPrinter.g:696:10: ^( LANGUAGE_VK ( java_spec | c_spec ) )
			{
			match(input,LANGUAGE_VK,FOLLOW_LANGUAGE_VK_in_call_spec6498); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:696:24: ( java_spec | c_spec )
			int alt154=2;
			int LA154_0 = input.LA(1);
			if ( (LA154_0==JAVA_VK) ) {
				alt154=1;
			}
			else if ( (LA154_0==C_VK) ) {
				alt154=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 154, 0, input);
				throw nvae;
			}

			switch (alt154) {
				case 1 :
					// PLSQLPrinter.g:696:26: java_spec
					{
					pushFollow(FOLLOW_java_spec_in_call_spec6502);
					java_spec();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:696:38: c_spec
					{
					pushFollow(FOLLOW_c_spec_in_call_spec6506);
					c_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 697:5: -> template( \"not implemented: call_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: call_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "call_spec"


	public static class java_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "java_spec"
	// PLSQLPrinter.g:702:1: java_spec : ^( JAVA_VK CHAR_STRING ) -> template( \"not implemented: java_spec\";
	public final PLSQLPrinter.java_spec_return java_spec() throws RecognitionException {
		PLSQLPrinter.java_spec_return retval = new PLSQLPrinter.java_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:703:5: ( ^( JAVA_VK CHAR_STRING ) -> template( \"not implemented: java_spec\")
			// PLSQLPrinter.g:703:10: ^( JAVA_VK CHAR_STRING )
			{
			match(input,JAVA_VK,FOLLOW_JAVA_VK_in_java_spec6546); 
			match(input, Token.DOWN, null); 
			match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_java_spec6548); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 704:5: -> template( \"not implemented: java_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: java_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "java_spec"


	public static class c_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "c_spec"
	// PLSQLPrinter.g:707:1: c_spec : ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? ) -> template( \"not implemented: c_spec\";
	public final PLSQLPrinter.c_spec_return c_spec() throws RecognitionException {
		PLSQLPrinter.c_spec_return retval = new PLSQLPrinter.c_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:708:5: ( ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? ) -> template( \"not implemented: c_spec\")
			// PLSQLPrinter.g:708:10: ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? )
			{
			match(input,C_VK,FOLLOW_C_VK_in_c_spec6584); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:708:17: ( CHAR_STRING )?
			int alt155=2;
			int LA155_0 = input.LA(1);
			if ( (LA155_0==CHAR_STRING) ) {
				alt155=1;
			}
			switch (alt155) {
				case 1 :
					// PLSQLPrinter.g:708:17: CHAR_STRING
					{
					match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_c_spec6586); 
					}
					break;

			}

			// PLSQLPrinter.g:708:30: ( CONTEXT_VK )?
			int alt156=2;
			int LA156_0 = input.LA(1);
			if ( (LA156_0==CONTEXT_VK) ) {
				alt156=1;
			}
			switch (alt156) {
				case 1 :
					// PLSQLPrinter.g:708:30: CONTEXT_VK
					{
					match(input,CONTEXT_VK,FOLLOW_CONTEXT_VK_in_c_spec6589); 
					}
					break;

			}

			match(input,LIBRARY_VK,FOLLOW_LIBRARY_VK_in_c_spec6593); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_id_in_c_spec6595);
			id();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:708:59: ( c_agent_in_clause )?
			int alt157=2;
			int LA157_0 = input.LA(1);
			if ( (LA157_0==AGENT_VK) ) {
				alt157=1;
			}
			switch (alt157) {
				case 1 :
					// PLSQLPrinter.g:708:59: c_agent_in_clause
					{
					pushFollow(FOLLOW_c_agent_in_clause_in_c_spec6598);
					c_agent_in_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:708:78: ( c_parameters_clause )?
			int alt158=2;
			int LA158_0 = input.LA(1);
			if ( (LA158_0==PARAMETERS_VK) ) {
				alt158=1;
			}
			switch (alt158) {
				case 1 :
					// PLSQLPrinter.g:708:78: c_parameters_clause
					{
					pushFollow(FOLLOW_c_parameters_clause_in_c_spec6601);
					c_parameters_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 709:5: -> template( \"not implemented: c_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: c_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "c_spec"


	public static class c_agent_in_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "c_agent_in_clause"
	// PLSQLPrinter.g:712:1: c_agent_in_clause : ^( AGENT_VK ( expression )+ ) -> template( \"not implemented: c_agent_in_clause\";
	public final PLSQLPrinter.c_agent_in_clause_return c_agent_in_clause() throws RecognitionException {
		PLSQLPrinter.c_agent_in_clause_return retval = new PLSQLPrinter.c_agent_in_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:713:5: ( ^( AGENT_VK ( expression )+ ) -> template( \"not implemented: c_agent_in_clause\")
			// PLSQLPrinter.g:713:10: ^( AGENT_VK ( expression )+ )
			{
			match(input,AGENT_VK,FOLLOW_AGENT_VK_in_c_agent_in_clause6638); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:713:21: ( expression )+
			int cnt159=0;
			loop159:
			while (true) {
				int alt159=2;
				int LA159_0 = input.LA(1);
				if ( (LA159_0==EXPR||LA159_0==LOGIC_EXPR) ) {
					alt159=1;
				}

				switch (alt159) {
				case 1 :
					// PLSQLPrinter.g:713:21: expression
					{
					pushFollow(FOLLOW_expression_in_c_agent_in_clause6640);
					expression();
					state._fsp--;

					}
					break;

				default :
					if ( cnt159 >= 1 ) break loop159;
					EarlyExitException eee = new EarlyExitException(159, input);
					throw eee;
				}
				cnt159++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 714:5: -> template( \"not implemented: c_agent_in_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: c_agent_in_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "c_agent_in_clause"


	public static class c_parameters_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "c_parameters_clause"
	// PLSQLPrinter.g:717:1: c_parameters_clause : ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) ) -> template( \"not implemented: c_parameters_clause\";
	public final PLSQLPrinter.c_parameters_clause_return c_parameters_clause() throws RecognitionException {
		PLSQLPrinter.c_parameters_clause_return retval = new PLSQLPrinter.c_parameters_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:718:5: ( ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) ) -> template( \"not implemented: c_parameters_clause\")
			// PLSQLPrinter.g:718:10: ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) )
			{
			match(input,PARAMETERS_VK,FOLLOW_PARAMETERS_VK_in_c_parameters_clause6677); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:718:26: ( THREE_DOTS | ( expression )+ )
			int alt161=2;
			int LA161_0 = input.LA(1);
			if ( (LA161_0==THREE_DOTS) ) {
				alt161=1;
			}
			else if ( (LA161_0==EXPR||LA161_0==LOGIC_EXPR) ) {
				alt161=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 161, 0, input);
				throw nvae;
			}

			switch (alt161) {
				case 1 :
					// PLSQLPrinter.g:718:27: THREE_DOTS
					{
					match(input,THREE_DOTS,FOLLOW_THREE_DOTS_in_c_parameters_clause6680); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:718:38: ( expression )+
					{
					// PLSQLPrinter.g:718:38: ( expression )+
					int cnt160=0;
					loop160:
					while (true) {
						int alt160=2;
						int LA160_0 = input.LA(1);
						if ( (LA160_0==EXPR||LA160_0==LOGIC_EXPR) ) {
							alt160=1;
						}

						switch (alt160) {
						case 1 :
							// PLSQLPrinter.g:718:38: expression
							{
							pushFollow(FOLLOW_expression_in_c_parameters_clause6682);
							expression();
							state._fsp--;

							}
							break;

						default :
							if ( cnt160 >= 1 ) break loop160;
							EarlyExitException eee = new EarlyExitException(160, input);
							throw eee;
						}
						cnt160++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 719:5: -> template( \"not implemented: c_parameters_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: c_parameters_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "c_parameters_clause"


	public static class parameter_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parameter"
	// PLSQLPrinter.g:724:1: parameter : ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? ) -> parameter(name=$parameter_name.stis_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullis_inout=$INOUT_VK != nullis_nocopy=falsetype=$type_spec.stdefault_value_part=$default_value_part.st);
	public final PLSQLPrinter.parameter_return parameter() throws RecognitionException {
		PLSQLPrinter.parameter_return retval = new PLSQLPrinter.parameter_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_IN61=null;
		CommonTree OUT_VK62=null;
		CommonTree INOUT_VK63=null;
		TreeRuleReturnScope parameter_name60 =null;
		TreeRuleReturnScope type_spec64 =null;
		TreeRuleReturnScope default_value_part65 =null;

		try {
			// PLSQLPrinter.g:725:5: ( ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? ) -> parameter(name=$parameter_name.stis_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullis_inout=$INOUT_VK != nullis_nocopy=falsetype=$type_spec.stdefault_value_part=$default_value_part.st))
			// PLSQLPrinter.g:725:10: ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_parameter6722); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_parameter6724);
			parameter_name60=parameter_name();
			state._fsp--;

			// PLSQLPrinter.g:725:37: ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )*
			loop162:
			while (true) {
				int alt162=4;
				switch ( input.LA(1) ) {
				case SQL92_RESERVED_IN:
					{
					alt162=1;
					}
					break;
				case OUT_VK:
					{
					alt162=2;
					}
					break;
				case INOUT_VK:
					{
					alt162=3;
					}
					break;
				}
				switch (alt162) {
				case 1 :
					// PLSQLPrinter.g:725:38: SQL92_RESERVED_IN
					{
					SQL92_RESERVED_IN61=(CommonTree)match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_parameter6727); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:725:56: OUT_VK
					{
					OUT_VK62=(CommonTree)match(input,OUT_VK,FOLLOW_OUT_VK_in_parameter6729); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:725:63: INOUT_VK
					{
					INOUT_VK63=(CommonTree)match(input,INOUT_VK,FOLLOW_INOUT_VK_in_parameter6731); 
					}
					break;

				default :
					break loop162;
				}
			}

			// PLSQLPrinter.g:725:74: ( type_spec )?
			int alt163=2;
			int LA163_0 = input.LA(1);
			if ( (LA163_0==CUSTOM_TYPE||LA163_0==INTERVAL_DATATYPE||LA163_0==NATIVE_DATATYPE) ) {
				alt163=1;
			}
			switch (alt163) {
				case 1 :
					// PLSQLPrinter.g:725:74: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_parameter6735);
					type_spec64=type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:725:85: ( default_value_part )?
			int alt164=2;
			int LA164_0 = input.LA(1);
			if ( (LA164_0==DEFAULT_VALUE) ) {
				alt164=1;
			}
			switch (alt164) {
				case 1 :
					// PLSQLPrinter.g:725:85: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_parameter6738);
					default_value_part65=default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 726:5: -> parameter(name=$parameter_name.stis_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullis_inout=$INOUT_VK != nullis_nocopy=falsetype=$type_spec.stdefault_value_part=$default_value_part.st)
			{
				retval.st = templateLib.getInstanceOf("parameter",new STAttrMap().put("name", (parameter_name60!=null?((StringTemplate)parameter_name60.getTemplate()):null)).put("is_in", SQL92_RESERVED_IN61 != null).put("is_out", OUT_VK62 != null).put("is_inout", INOUT_VK63 != null).put("is_nocopy", false).put("type", (type_spec64!=null?((StringTemplate)type_spec64.getTemplate()):null)).put("default_value_part", (default_value_part65!=null?((StringTemplate)default_value_part65.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter"


	public static class default_value_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "default_value_part"
	// PLSQLPrinter.g:731:1: default_value_part : ^( DEFAULT_VALUE expression ) -> default_value_part(expression=$expression.st);
	public final PLSQLPrinter.default_value_part_return default_value_part() throws RecognitionException {
		PLSQLPrinter.default_value_part_return retval = new PLSQLPrinter.default_value_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression66 =null;

		try {
			// PLSQLPrinter.g:732:5: ( ^( DEFAULT_VALUE expression ) -> default_value_part(expression=$expression.st))
			// PLSQLPrinter.g:732:10: ^( DEFAULT_VALUE expression )
			{
			match(input,DEFAULT_VALUE,FOLLOW_DEFAULT_VALUE_in_default_value_part6828); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_default_value_part6830);
			expression66=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 733:5: -> default_value_part(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("default_value_part",new STAttrMap().put("expression", (expression66!=null?((StringTemplate)expression66.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "default_value_part"


	public static class declare_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "declare_spec"
	// PLSQLPrinter.g:742:1: declare_spec : ( variable_declaration -> { $variable_declaration.st }| subtype_declaration -> { $subtype_declaration.st }| cursor_declaration -> { $cursor_declaration.st }| exception_declaration -> { $exception_declaration.st }| pragma_declaration -> { $pragma_declaration.st }| record_declaration -> { $record_declaration.st }| table_declaration -> { $table_declaration.st }| create_procedure_body -> { $create_procedure_body.st }| create_function_body -> { $create_function_body.st }| create_type -> { $create_type.st });
	public final PLSQLPrinter.declare_spec_return declare_spec() throws RecognitionException {
		PLSQLPrinter.declare_spec_return retval = new PLSQLPrinter.declare_spec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope variable_declaration67 =null;
		TreeRuleReturnScope subtype_declaration68 =null;
		TreeRuleReturnScope cursor_declaration69 =null;
		TreeRuleReturnScope exception_declaration70 =null;
		TreeRuleReturnScope pragma_declaration71 =null;
		TreeRuleReturnScope record_declaration72 =null;
		TreeRuleReturnScope table_declaration73 =null;
		TreeRuleReturnScope create_procedure_body74 =null;
		TreeRuleReturnScope create_function_body75 =null;
		TreeRuleReturnScope create_type76 =null;

		try {
			// PLSQLPrinter.g:743:5: ( variable_declaration -> { $variable_declaration.st }| subtype_declaration -> { $subtype_declaration.st }| cursor_declaration -> { $cursor_declaration.st }| exception_declaration -> { $exception_declaration.st }| pragma_declaration -> { $pragma_declaration.st }| record_declaration -> { $record_declaration.st }| table_declaration -> { $table_declaration.st }| create_procedure_body -> { $create_procedure_body.st }| create_function_body -> { $create_function_body.st }| create_type -> { $create_type.st })
			int alt165=10;
			switch ( input.LA(1) ) {
			case VARIABLE_DECLARE:
				{
				alt165=1;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt165=2;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt165=3;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt165=4;
				}
				break;
			case PRAGMA_DECLARE:
				{
				alt165=5;
				}
				break;
			case RECORD_TYPE_DECLARE:
			case RECORD_VAR_DECLARE:
				{
				alt165=6;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt165=7;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt165=8;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt165=9;
				}
				break;
			case CREATE_TYPE_BODY:
			case CREATE_TYPE_SPEC:
				{
				alt165=10;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 165, 0, input);
				throw nvae;
			}
			switch (alt165) {
				case 1 :
					// PLSQLPrinter.g:743:10: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_declare_spec6872);
					variable_declaration67=variable_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 743:31: -> { $variable_declaration.st }
					{
						retval.st =  (variable_declaration67!=null?((StringTemplate)variable_declaration67.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:744:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_declare_spec6888);
					subtype_declaration68=subtype_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 744:31: -> { $subtype_declaration.st }
					{
						retval.st =  (subtype_declaration68!=null?((StringTemplate)subtype_declaration68.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:745:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_declare_spec6904);
					cursor_declaration69=cursor_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 745:30: -> { $cursor_declaration.st }
					{
						retval.st =  (cursor_declaration69!=null?((StringTemplate)cursor_declaration69.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:746:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_declare_spec6920);
					exception_declaration70=exception_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 746:33: -> { $exception_declaration.st }
					{
						retval.st =  (exception_declaration70!=null?((StringTemplate)exception_declaration70.getTemplate()):null) ;
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:747:11: pragma_declaration
					{
					pushFollow(FOLLOW_pragma_declaration_in_declare_spec6936);
					pragma_declaration71=pragma_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 747:30: -> { $pragma_declaration.st }
					{
						retval.st =  (pragma_declaration71!=null?((StringTemplate)pragma_declaration71.getTemplate()):null) ;
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:748:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_declare_spec6952);
					record_declaration72=record_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 748:30: -> { $record_declaration.st }
					{
						retval.st =  (record_declaration72!=null?((StringTemplate)record_declaration72.getTemplate()):null) ;
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:749:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_declare_spec6968);
					table_declaration73=table_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 749:29: -> { $table_declaration.st }
					{
						retval.st =  (table_declaration73!=null?((StringTemplate)table_declaration73.getTemplate()):null) ;
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:750:11: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_declare_spec6984);
					create_procedure_body74=create_procedure_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 750:33: -> { $create_procedure_body.st }
					{
						retval.st =  (create_procedure_body74!=null?((StringTemplate)create_procedure_body74.getTemplate()):null) ;
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:751:11: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_declare_spec7000);
					create_function_body75=create_function_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 751:32: -> { $create_function_body.st }
					{
						retval.st =  (create_function_body75!=null?((StringTemplate)create_function_body75.getTemplate()):null) ;
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:752:11: create_type
					{
					pushFollow(FOLLOW_create_type_in_declare_spec7016);
					create_type76=create_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 752:23: -> { $create_type.st }
					{
						retval.st =  (create_type76!=null?((StringTemplate)create_type76.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "declare_spec"


	public static class variable_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "variable_declaration"
	// PLSQLPrinter.g:756:1: variable_declaration : ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> variable_declaration(name=$variable_name.sttype=$type_spec.stis_constant=$CONSTANT_VK != nullis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st);
	public final PLSQLPrinter.variable_declaration_return variable_declaration() throws RecognitionException {
		PLSQLPrinter.variable_declaration_return retval = new PLSQLPrinter.variable_declaration_return();
		retval.start = input.LT(1);

		CommonTree CONSTANT_VK79=null;
		CommonTree SQL92_RESERVED_NULL80=null;
		TreeRuleReturnScope variable_name77 =null;
		TreeRuleReturnScope type_spec78 =null;
		TreeRuleReturnScope default_value_part81 =null;

		try {
			// PLSQLPrinter.g:757:5: ( ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> variable_declaration(name=$variable_name.sttype=$type_spec.stis_constant=$CONSTANT_VK != nullis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st))
			// PLSQLPrinter.g:757:10: ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? )
			{
			match(input,VARIABLE_DECLARE,FOLLOW_VARIABLE_DECLARE_in_variable_declaration7042); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_variable_name_in_variable_declaration7044);
			variable_name77=variable_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_variable_declaration7046);
			type_spec78=type_spec();
			state._fsp--;

			// PLSQLPrinter.g:757:53: ( CONSTANT_VK )?
			int alt166=2;
			int LA166_0 = input.LA(1);
			if ( (LA166_0==CONSTANT_VK) ) {
				alt166=1;
			}
			switch (alt166) {
				case 1 :
					// PLSQLPrinter.g:757:53: CONSTANT_VK
					{
					CONSTANT_VK79=(CommonTree)match(input,CONSTANT_VK,FOLLOW_CONSTANT_VK_in_variable_declaration7048); 
					}
					break;

			}

			// PLSQLPrinter.g:757:66: ( SQL92_RESERVED_NULL )?
			int alt167=2;
			int LA167_0 = input.LA(1);
			if ( (LA167_0==SQL92_RESERVED_NULL) ) {
				alt167=1;
			}
			switch (alt167) {
				case 1 :
					// PLSQLPrinter.g:757:66: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL80=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_variable_declaration7051); 
					}
					break;

			}

			// PLSQLPrinter.g:757:87: ( default_value_part )?
			int alt168=2;
			int LA168_0 = input.LA(1);
			if ( (LA168_0==DEFAULT_VALUE) ) {
				alt168=1;
			}
			switch (alt168) {
				case 1 :
					// PLSQLPrinter.g:757:87: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_variable_declaration7054);
					default_value_part81=default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 758:5: -> variable_declaration(name=$variable_name.sttype=$type_spec.stis_constant=$CONSTANT_VK != nullis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st)
			{
				retval.st = templateLib.getInstanceOf("variable_declaration",new STAttrMap().put("name", (variable_name77!=null?((StringTemplate)variable_name77.getTemplate()):null)).put("type", (type_spec78!=null?((StringTemplate)type_spec78.getTemplate()):null)).put("is_constant", CONSTANT_VK79 != null).put("is_not_null", SQL92_RESERVED_NULL80 != null).put("default_value_part", (default_value_part81!=null?((StringTemplate)default_value_part81.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "variable_declaration"


	public static class subtype_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subtype_declaration"
	// PLSQLPrinter.g:763:1: subtype_declaration : ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? ) -> subtype_declaration(name=$type_name.sttype_spec=$type_spec.strange=$subtype_range.stis_not_null=$SQL92_RESERVED_NULL != null);
	public final PLSQLPrinter.subtype_declaration_return subtype_declaration() throws RecognitionException {
		PLSQLPrinter.subtype_declaration_return retval = new PLSQLPrinter.subtype_declaration_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL85=null;
		TreeRuleReturnScope type_name82 =null;
		TreeRuleReturnScope type_spec83 =null;
		TreeRuleReturnScope subtype_range84 =null;

		try {
			// PLSQLPrinter.g:764:5: ( ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? ) -> subtype_declaration(name=$type_name.sttype_spec=$type_spec.strange=$subtype_range.stis_not_null=$SQL92_RESERVED_NULL != null))
			// PLSQLPrinter.g:764:10: ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? )
			{
			match(input,SUBTYPE_DECLARE,FOLLOW_SUBTYPE_DECLARE_in_subtype_declaration7139); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_subtype_declaration7141);
			type_name82=type_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_subtype_declaration7143);
			type_spec83=type_spec();
			state._fsp--;

			// PLSQLPrinter.g:764:48: ( SQL92_RESERVED_NULL )?
			int alt169=2;
			int LA169_0 = input.LA(1);
			if ( (LA169_0==SQL92_RESERVED_NULL) ) {
				alt169=1;
			}
			switch (alt169) {
				case 1 :
					// PLSQLPrinter.g:764:48: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL85=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_subtype_declaration7145); 
					}
					break;

			}

			// PLSQLPrinter.g:764:69: ( subtype_range )?
			int alt170=2;
			int LA170_0 = input.LA(1);
			if ( (LA170_0==RANGE_VK) ) {
				alt170=1;
			}
			switch (alt170) {
				case 1 :
					// PLSQLPrinter.g:764:69: subtype_range
					{
					pushFollow(FOLLOW_subtype_range_in_subtype_declaration7148);
					subtype_range84=subtype_range();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 765:5: -> subtype_declaration(name=$type_name.sttype_spec=$type_spec.strange=$subtype_range.stis_not_null=$SQL92_RESERVED_NULL != null)
			{
				retval.st = templateLib.getInstanceOf("subtype_declaration",new STAttrMap().put("name", (type_name82!=null?((StringTemplate)type_name82.getTemplate()):null)).put("type_spec", (type_spec83!=null?((StringTemplate)type_spec83.getTemplate()):null)).put("range", (subtype_range84!=null?((StringTemplate)subtype_range84.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL85 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subtype_declaration"


	public static class subtype_range_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subtype_range"
	// PLSQLPrinter.g:770:1: subtype_range : ^( RANGE_VK e1= expression e2= expression ) -> subtype_range(low_bound=$e1.sthigh_bound=$e2.st);
	public final PLSQLPrinter.subtype_range_return subtype_range() throws RecognitionException {
		PLSQLPrinter.subtype_range_return retval = new PLSQLPrinter.subtype_range_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope e1 =null;
		TreeRuleReturnScope e2 =null;

		try {
			// PLSQLPrinter.g:771:5: ( ^( RANGE_VK e1= expression e2= expression ) -> subtype_range(low_bound=$e1.sthigh_bound=$e2.st))
			// PLSQLPrinter.g:771:10: ^( RANGE_VK e1= expression e2= expression )
			{
			match(input,RANGE_VK,FOLLOW_RANGE_VK_in_subtype_range7226); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_subtype_range7230);
			e1=expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_subtype_range7234);
			e2=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 772:5: -> subtype_range(low_bound=$e1.sthigh_bound=$e2.st)
			{
				retval.st = templateLib.getInstanceOf("subtype_range",new STAttrMap().put("low_bound", (e1!=null?((StringTemplate)e1.getTemplate()):null)).put("high_bound", (e2!=null?((StringTemplate)e2.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subtype_range"


	public static class cursor_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_declaration"
	// PLSQLPrinter.g:776:1: cursor_declaration : ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) ) -> template( \"not implemented: cursor_declaration\";
	public final PLSQLPrinter.cursor_declaration_return cursor_declaration() throws RecognitionException {
		PLSQLPrinter.cursor_declaration_return retval = new PLSQLPrinter.cursor_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:777:5: ( ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) ) -> template( \"not implemented: cursor_declaration\")
			// PLSQLPrinter.g:777:10: ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) )
			{
			match(input,CURSOR_DECLARE,FOLLOW_CURSOR_DECLARE_in_cursor_declaration7277); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_cursor_declaration7279);
			cursor_name();
			state._fsp--;

			// PLSQLPrinter.g:777:39: ( type_spec )?
			int alt171=2;
			int LA171_0 = input.LA(1);
			if ( (LA171_0==CUSTOM_TYPE||LA171_0==INTERVAL_DATATYPE||LA171_0==NATIVE_DATATYPE) ) {
				alt171=1;
			}
			switch (alt171) {
				case 1 :
					// PLSQLPrinter.g:777:39: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_cursor_declaration7281);
					type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:777:50: ( select_statement )?
			int alt172=2;
			int LA172_0 = input.LA(1);
			if ( (LA172_0==SELECT_STATEMENT) ) {
				alt172=1;
			}
			switch (alt172) {
				case 1 :
					// PLSQLPrinter.g:777:50: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_cursor_declaration7284);
					select_statement();
					state._fsp--;

					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_cursor_declaration7288); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:777:81: ( parameter_spec )*
				loop173:
				while (true) {
					int alt173=2;
					int LA173_0 = input.LA(1);
					if ( (LA173_0==PARAMETER) ) {
						alt173=1;
					}

					switch (alt173) {
					case 1 :
						// PLSQLPrinter.g:777:81: parameter_spec
						{
						pushFollow(FOLLOW_parameter_spec_in_cursor_declaration7290);
						parameter_spec();
						state._fsp--;

						}
						break;

					default :
						break loop173;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 778:5: -> template( \"not implemented: cursor_declaration\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: cursor_declaration");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_declaration"


	public static class parameter_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parameter_spec"
	// PLSQLPrinter.g:781:1: parameter_spec : ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) -> template( \"not implemented: parameter_spec\";
	public final PLSQLPrinter.parameter_spec_return parameter_spec() throws RecognitionException {
		PLSQLPrinter.parameter_spec_return retval = new PLSQLPrinter.parameter_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:782:5: ( ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) -> template( \"not implemented: parameter_spec\")
			// PLSQLPrinter.g:782:10: ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_parameter_spec7329); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_parameter_spec7331);
			parameter_name();
			state._fsp--;

			// PLSQLPrinter.g:782:37: ( type_spec )?
			int alt174=2;
			int LA174_0 = input.LA(1);
			if ( (LA174_0==CUSTOM_TYPE||LA174_0==INTERVAL_DATATYPE||LA174_0==NATIVE_DATATYPE) ) {
				alt174=1;
			}
			switch (alt174) {
				case 1 :
					// PLSQLPrinter.g:782:37: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_parameter_spec7333);
					type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:782:48: ( default_value_part )?
			int alt175=2;
			int LA175_0 = input.LA(1);
			if ( (LA175_0==DEFAULT_VALUE) ) {
				alt175=1;
			}
			switch (alt175) {
				case 1 :
					// PLSQLPrinter.g:782:48: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_parameter_spec7336);
					default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 783:5: -> template( \"not implemented: parameter_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: parameter_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter_spec"


	public static class exception_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_declaration"
	// PLSQLPrinter.g:786:1: exception_declaration : ^( EXCEPTION_DECLARE exception_name ) -> template( \"not implemented: exception_declaration\";
	public final PLSQLPrinter.exception_declaration_return exception_declaration() throws RecognitionException {
		PLSQLPrinter.exception_declaration_return retval = new PLSQLPrinter.exception_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:787:5: ( ^( EXCEPTION_DECLARE exception_name ) -> template( \"not implemented: exception_declaration\")
			// PLSQLPrinter.g:787:10: ^( EXCEPTION_DECLARE exception_name )
			{
			match(input,EXCEPTION_DECLARE,FOLLOW_EXCEPTION_DECLARE_in_exception_declaration7374); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_exception_name_in_exception_declaration7376);
			exception_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 788:5: -> template( \"not implemented: exception_declaration\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: exception_declaration");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_declaration"


	public static class pragma_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_declaration"
	// PLSQLPrinter.g:791:1: pragma_declaration : ^( PRAGMA_DECLARE pragma_declaration_impl ) -> pragma_declaration(impl=$pragma_declaration_impl.st);
	public final PLSQLPrinter.pragma_declaration_return pragma_declaration() throws RecognitionException {
		PLSQLPrinter.pragma_declaration_return retval = new PLSQLPrinter.pragma_declaration_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope pragma_declaration_impl86 =null;

		try {
			// PLSQLPrinter.g:792:5: ( ^( PRAGMA_DECLARE pragma_declaration_impl ) -> pragma_declaration(impl=$pragma_declaration_impl.st))
			// PLSQLPrinter.g:792:10: ^( PRAGMA_DECLARE pragma_declaration_impl )
			{
			match(input,PRAGMA_DECLARE,FOLLOW_PRAGMA_DECLARE_in_pragma_declaration7425); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_pragma_declaration_impl_in_pragma_declaration7427);
			pragma_declaration_impl86=pragma_declaration_impl();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 793:5: -> pragma_declaration(impl=$pragma_declaration_impl.st)
			{
				retval.st = templateLib.getInstanceOf("pragma_declaration",new STAttrMap().put("impl", (pragma_declaration_impl86!=null?((StringTemplate)pragma_declaration_impl86.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_declaration"


	public static class pragma_declaration_impl_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_declaration_impl"
	// PLSQLPrinter.g:796:1: pragma_declaration_impl : ( SERIALLY_REUSABLE_VK -> pragma_declaration_impl_serially_reusable(| AUTONOMOUS_TRANSACTION_VK -> pragma_declaration_impl_serially_autonomous_transaction(| ^( EXCEPTION_INIT_VK exception_name constant ) -> pragma_declaration_impl_serially_exception_init(name=$exception_name.stnumeric=$constant.st)| ^( INLINE_VK id expression ) -> pragma_declaration_impl_serially_inline(id=$id.stexpression=$expression.st)| ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT |firstId= id ) (rest+= id )+ ) -> pragma_declaration_impl_serially_restrict_references(arg1=firstStrestArgs=$rest));
	public final PLSQLPrinter.pragma_declaration_impl_return pragma_declaration_impl() throws RecognitionException {
		PLSQLPrinter.pragma_declaration_impl_return retval = new PLSQLPrinter.pragma_declaration_impl_return();
		retval.start = input.LT(1);

		List<Object> list_rest=null;
		TreeRuleReturnScope firstId =null;
		TreeRuleReturnScope exception_name87 =null;
		TreeRuleReturnScope constant88 =null;
		TreeRuleReturnScope id89 =null;
		TreeRuleReturnScope expression90 =null;
		RuleReturnScope rest = null;
		 StringTemplate firstSt = null; 
		try {
			// PLSQLPrinter.g:798:5: ( SERIALLY_REUSABLE_VK -> pragma_declaration_impl_serially_reusable(| AUTONOMOUS_TRANSACTION_VK -> pragma_declaration_impl_serially_autonomous_transaction(| ^( EXCEPTION_INIT_VK exception_name constant ) -> pragma_declaration_impl_serially_exception_init(name=$exception_name.stnumeric=$constant.st)| ^( INLINE_VK id expression ) -> pragma_declaration_impl_serially_inline(id=$id.stexpression=$expression.st)| ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT |firstId= id ) (rest+= id )+ ) -> pragma_declaration_impl_serially_restrict_references(arg1=firstStrestArgs=$rest))
			int alt178=5;
			switch ( input.LA(1) ) {
			case SERIALLY_REUSABLE_VK:
				{
				alt178=1;
				}
				break;
			case AUTONOMOUS_TRANSACTION_VK:
				{
				alt178=2;
				}
				break;
			case EXCEPTION_INIT_VK:
				{
				alt178=3;
				}
				break;
			case INLINE_VK:
				{
				alt178=4;
				}
				break;
			case RESTRICT_REFERENCES_VK:
				{
				alt178=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 178, 0, input);
				throw nvae;
			}
			switch (alt178) {
				case 1 :
					// PLSQLPrinter.g:798:10: SERIALLY_REUSABLE_VK
					{
					match(input,SERIALLY_REUSABLE_VK,FOLLOW_SERIALLY_REUSABLE_VK_in_pragma_declaration_impl7472); 
					// TEMPLATE REWRITE
					// 798:31: -> pragma_declaration_impl_serially_reusable(
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_reusable");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:799:16: AUTONOMOUS_TRANSACTION_VK
					{
					match(input,AUTONOMOUS_TRANSACTION_VK,FOLLOW_AUTONOMOUS_TRANSACTION_VK_in_pragma_declaration_impl7495); 
					// TEMPLATE REWRITE
					// 799:42: -> pragma_declaration_impl_serially_autonomous_transaction(
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_autonomous_transaction");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:800:15: ^( EXCEPTION_INIT_VK exception_name constant )
					{
					match(input,EXCEPTION_INIT_VK,FOLLOW_EXCEPTION_INIT_VK_in_pragma_declaration_impl7518); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_exception_name_in_pragma_declaration_impl7520);
					exception_name87=exception_name();
					state._fsp--;

					pushFollow(FOLLOW_constant_in_pragma_declaration_impl7522);
					constant88=constant();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 801:10: -> pragma_declaration_impl_serially_exception_init(name=$exception_name.stnumeric=$constant.st)
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_exception_init",new STAttrMap().put("name", (exception_name87!=null?((StringTemplate)exception_name87.getTemplate()):null)).put("numeric", (constant88!=null?((StringTemplate)constant88.getTemplate()):null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:802:15: ^( INLINE_VK id expression )
					{
					match(input,INLINE_VK,FOLLOW_INLINE_VK_in_pragma_declaration_impl7565); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_id_in_pragma_declaration_impl7567);
					id89=id();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_pragma_declaration_impl7569);
					expression90=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 803:10: -> pragma_declaration_impl_serially_inline(id=$id.stexpression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_inline",new STAttrMap().put("id", (id89!=null?((StringTemplate)id89.getTemplate()):null)).put("expression", (expression90!=null?((StringTemplate)expression90.getTemplate()):null)));
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:804:15: ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT |firstId= id ) (rest+= id )+ )
					{
					match(input,RESTRICT_REFERENCES_VK,FOLLOW_RESTRICT_REFERENCES_VK_in_pragma_declaration_impl7612); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:805:17: ( SQL92_RESERVED_DEFAULT |firstId= id )
					int alt176=2;
					int LA176_0 = input.LA(1);
					if ( (LA176_0==SQL92_RESERVED_DEFAULT) ) {
						alt176=1;
					}
					else if ( (LA176_0==CHAR_SET_NAME||LA176_0==ID) ) {
						alt176=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 176, 0, input);
						throw nvae;
					}

					switch (alt176) {
						case 1 :
							// PLSQLPrinter.g:806:19: SQL92_RESERVED_DEFAULT
							{
							match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_declaration_impl7650); 
							 firstSt = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "default")); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:807:21: firstId= id
							{
							pushFollow(FOLLOW_id_in_pragma_declaration_impl7676);
							firstId=id();
							state._fsp--;

							 firstSt = (firstId!=null?((StringTemplate)firstId.getTemplate()):null); 
							}
							break;

					}

					// PLSQLPrinter.g:809:21: (rest+= id )+
					int cnt177=0;
					loop177:
					while (true) {
						int alt177=2;
						int LA177_0 = input.LA(1);
						if ( (LA177_0==CHAR_SET_NAME||LA177_0==ID) ) {
							alt177=1;
						}

						switch (alt177) {
						case 1 :
							// PLSQLPrinter.g:809:21: rest+= id
							{
							pushFollow(FOLLOW_id_in_pragma_declaration_impl7716);
							rest=id();
							state._fsp--;

							if (list_rest==null) list_rest=new ArrayList<Object>();
							list_rest.add(rest.getTemplate());
							}
							break;

						default :
							if ( cnt177 >= 1 ) break loop177;
							EarlyExitException eee = new EarlyExitException(177, input);
							throw eee;
						}
						cnt177++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 811:10: -> pragma_declaration_impl_serially_restrict_references(arg1=firstStrestArgs=$rest)
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_restrict_references",new STAttrMap().put("arg1", firstSt).put("restArgs", list_rest));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_declaration_impl"


	public static class record_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_declaration"
	// PLSQLPrinter.g:815:1: record_declaration : ( record_type_dec -> { $record_type_dec.st }| record_var_dec -> { $record_var_dec.st });
	public final PLSQLPrinter.record_declaration_return record_declaration() throws RecognitionException {
		PLSQLPrinter.record_declaration_return retval = new PLSQLPrinter.record_declaration_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope record_type_dec91 =null;
		TreeRuleReturnScope record_var_dec92 =null;

		try {
			// PLSQLPrinter.g:816:5: ( record_type_dec -> { $record_type_dec.st }| record_var_dec -> { $record_var_dec.st })
			int alt179=2;
			int LA179_0 = input.LA(1);
			if ( (LA179_0==RECORD_TYPE_DECLARE) ) {
				alt179=1;
			}
			else if ( (LA179_0==RECORD_VAR_DECLARE) ) {
				alt179=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 179, 0, input);
				throw nvae;
			}

			switch (alt179) {
				case 1 :
					// PLSQLPrinter.g:816:10: record_type_dec
					{
					pushFollow(FOLLOW_record_type_dec_in_record_declaration7782);
					record_type_dec91=record_type_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 816:26: -> { $record_type_dec.st }
					{
						retval.st =  (record_type_dec91!=null?((StringTemplate)record_type_dec91.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:817:10: record_var_dec
					{
					pushFollow(FOLLOW_record_var_dec_in_record_declaration7797);
					record_var_dec92=record_var_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 817:25: -> { $record_var_dec.st }
					{
						retval.st =  (record_var_dec92!=null?((StringTemplate)record_var_dec92.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_declaration"


	public static class record_type_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_type_dec"
	// PLSQLPrinter.g:823:1: record_type_dec : ( record_type_dec_record -> { $record_type_dec_record.st }| record_type_dec_refcursor -> { $record_type_dec_refcursor.st });
	public final PLSQLPrinter.record_type_dec_return record_type_dec() throws RecognitionException {
		PLSQLPrinter.record_type_dec_return retval = new PLSQLPrinter.record_type_dec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope record_type_dec_record93 =null;
		TreeRuleReturnScope record_type_dec_refcursor94 =null;

		try {
			// PLSQLPrinter.g:824:5: ( record_type_dec_record -> { $record_type_dec_record.st }| record_type_dec_refcursor -> { $record_type_dec_refcursor.st })
			int alt180=2;
			alt180 = dfa180.predict(input);
			switch (alt180) {
				case 1 :
					// PLSQLPrinter.g:824:10: record_type_dec_record
					{
					pushFollow(FOLLOW_record_type_dec_record_in_record_type_dec7824);
					record_type_dec_record93=record_type_dec_record();
					state._fsp--;

					// TEMPLATE REWRITE
					// 824:33: -> { $record_type_dec_record.st }
					{
						retval.st =  (record_type_dec_record93!=null?((StringTemplate)record_type_dec_record93.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:825:10: record_type_dec_refcursor
					{
					pushFollow(FOLLOW_record_type_dec_refcursor_in_record_type_dec7839);
					record_type_dec_refcursor94=record_type_dec_refcursor();
					state._fsp--;

					// TEMPLATE REWRITE
					// 825:36: -> { $record_type_dec_refcursor.st }
					{
						retval.st =  (record_type_dec_refcursor94!=null?((StringTemplate)record_type_dec_refcursor94.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_type_dec"


	public static class record_type_dec_record_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_type_dec_record"
	// PLSQLPrinter.g:828:1: record_type_dec_record : ^( RECORD_TYPE_DECLARE type_name ( ^( FIELDS (fields+= field_spec )* ) )? ) -> record_type_dec_record(name=$type_name.stfield_specs=$fields);
	public final PLSQLPrinter.record_type_dec_record_return record_type_dec_record() throws RecognitionException {
		PLSQLPrinter.record_type_dec_record_return retval = new PLSQLPrinter.record_type_dec_record_return();
		retval.start = input.LT(1);

		List<Object> list_fields=null;
		TreeRuleReturnScope type_name95 =null;
		RuleReturnScope fields = null;
		try {
			// PLSQLPrinter.g:829:5: ( ^( RECORD_TYPE_DECLARE type_name ( ^( FIELDS (fields+= field_spec )* ) )? ) -> record_type_dec_record(name=$type_name.stfield_specs=$fields))
			// PLSQLPrinter.g:829:10: ^( RECORD_TYPE_DECLARE type_name ( ^( FIELDS (fields+= field_spec )* ) )? )
			{
			match(input,RECORD_TYPE_DECLARE,FOLLOW_RECORD_TYPE_DECLARE_in_record_type_dec_record7868); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_record_type_dec_record7870);
			type_name95=type_name();
			state._fsp--;

			// PLSQLPrinter.g:829:42: ( ^( FIELDS (fields+= field_spec )* ) )?
			int alt182=2;
			int LA182_0 = input.LA(1);
			if ( (LA182_0==FIELDS) ) {
				alt182=1;
			}
			switch (alt182) {
				case 1 :
					// PLSQLPrinter.g:829:43: ^( FIELDS (fields+= field_spec )* )
					{
					match(input,FIELDS,FOLLOW_FIELDS_in_record_type_dec_record7874); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:829:58: (fields+= field_spec )*
						loop181:
						while (true) {
							int alt181=2;
							int LA181_0 = input.LA(1);
							if ( (LA181_0==FIELD_SPEC) ) {
								alt181=1;
							}

							switch (alt181) {
							case 1 :
								// PLSQLPrinter.g:829:58: fields+= field_spec
								{
								pushFollow(FOLLOW_field_spec_in_record_type_dec_record7878);
								fields=field_spec();
								state._fsp--;

								if (list_fields==null) list_fields=new ArrayList<Object>();
								list_fields.add(fields.getTemplate());
								}
								break;

							default :
								break loop181;
							}
						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 830:5: -> record_type_dec_record(name=$type_name.stfield_specs=$fields)
			{
				retval.st = templateLib.getInstanceOf("record_type_dec_record",new STAttrMap().put("name", (type_name95!=null?((StringTemplate)type_name95.getTemplate()):null)).put("field_specs", list_fields));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_type_dec_record"


	public static class record_type_dec_refcursor_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_type_dec_refcursor"
	// PLSQLPrinter.g:833:1: record_type_dec_refcursor : ^( RECORD_TYPE_DECLARE type_name REF_VK ( type_spec )? ) -> record_type_dec_refcursor(name=$type_name.sttype_spec=$type_spec.st);
	public final PLSQLPrinter.record_type_dec_refcursor_return record_type_dec_refcursor() throws RecognitionException {
		PLSQLPrinter.record_type_dec_refcursor_return retval = new PLSQLPrinter.record_type_dec_refcursor_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope type_name96 =null;
		TreeRuleReturnScope type_spec97 =null;

		try {
			// PLSQLPrinter.g:834:5: ( ^( RECORD_TYPE_DECLARE type_name REF_VK ( type_spec )? ) -> record_type_dec_refcursor(name=$type_name.sttype_spec=$type_spec.st))
			// PLSQLPrinter.g:834:10: ^( RECORD_TYPE_DECLARE type_name REF_VK ( type_spec )? )
			{
			match(input,RECORD_TYPE_DECLARE,FOLLOW_RECORD_TYPE_DECLARE_in_record_type_dec_refcursor7928); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_record_type_dec_refcursor7930);
			type_name96=type_name();
			state._fsp--;

			match(input,REF_VK,FOLLOW_REF_VK_in_record_type_dec_refcursor7932); 
			// PLSQLPrinter.g:834:49: ( type_spec )?
			int alt183=2;
			int LA183_0 = input.LA(1);
			if ( (LA183_0==CUSTOM_TYPE||LA183_0==INTERVAL_DATATYPE||LA183_0==NATIVE_DATATYPE) ) {
				alt183=1;
			}
			switch (alt183) {
				case 1 :
					// PLSQLPrinter.g:834:49: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_record_type_dec_refcursor7934);
					type_spec97=type_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 835:5: -> record_type_dec_refcursor(name=$type_name.sttype_spec=$type_spec.st)
			{
				retval.st = templateLib.getInstanceOf("record_type_dec_refcursor",new STAttrMap().put("name", (type_name96!=null?((StringTemplate)type_name96.getTemplate()):null)).put("type_spec", (type_spec97!=null?((StringTemplate)type_spec97.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_type_dec_refcursor"


	public static class field_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "field_spec"
	// PLSQLPrinter.g:838:1: field_spec : ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> field_spec(name=$column_name.sttype_spec=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st);
	public final PLSQLPrinter.field_spec_return field_spec() throws RecognitionException {
		PLSQLPrinter.field_spec_return retval = new PLSQLPrinter.field_spec_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL100=null;
		TreeRuleReturnScope column_name98 =null;
		TreeRuleReturnScope type_spec99 =null;
		TreeRuleReturnScope default_value_part101 =null;

		try {
			// PLSQLPrinter.g:839:5: ( ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> field_spec(name=$column_name.sttype_spec=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st))
			// PLSQLPrinter.g:839:10: ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? )
			{
			match(input,FIELD_SPEC,FOLLOW_FIELD_SPEC_in_field_spec7977); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_column_name_in_field_spec7979);
			column_name98=column_name();
			state._fsp--;

			// PLSQLPrinter.g:839:35: ( type_spec )?
			int alt184=2;
			int LA184_0 = input.LA(1);
			if ( (LA184_0==CUSTOM_TYPE||LA184_0==INTERVAL_DATATYPE||LA184_0==NATIVE_DATATYPE) ) {
				alt184=1;
			}
			switch (alt184) {
				case 1 :
					// PLSQLPrinter.g:839:35: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_field_spec7981);
					type_spec99=type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:839:46: ( SQL92_RESERVED_NULL )?
			int alt185=2;
			int LA185_0 = input.LA(1);
			if ( (LA185_0==SQL92_RESERVED_NULL) ) {
				alt185=1;
			}
			switch (alt185) {
				case 1 :
					// PLSQLPrinter.g:839:46: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL100=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_field_spec7984); 
					}
					break;

			}

			// PLSQLPrinter.g:839:67: ( default_value_part )?
			int alt186=2;
			int LA186_0 = input.LA(1);
			if ( (LA186_0==DEFAULT_VALUE) ) {
				alt186=1;
			}
			switch (alt186) {
				case 1 :
					// PLSQLPrinter.g:839:67: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_field_spec7987);
					default_value_part101=default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 840:5: -> field_spec(name=$column_name.sttype_spec=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st)
			{
				retval.st = templateLib.getInstanceOf("field_spec",new STAttrMap().put("name", (column_name98!=null?((StringTemplate)column_name98.getTemplate()):null)).put("type_spec", (type_spec99!=null?((StringTemplate)type_spec99.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL100 != null).put("default_value_part", (default_value_part101!=null?((StringTemplate)default_value_part101.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "field_spec"


	public static class record_var_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_var_dec"
	// PLSQLPrinter.g:845:1: record_var_dec : ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) ) -> template( \"not implemented: record_var_dec\";
	public final PLSQLPrinter.record_var_dec_return record_var_dec() throws RecognitionException {
		PLSQLPrinter.record_var_dec_return retval = new PLSQLPrinter.record_var_dec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:846:5: ( ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) ) -> template( \"not implemented: record_var_dec\")
			// PLSQLPrinter.g:846:10: ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) )
			{
			match(input,RECORD_VAR_DECLARE,FOLLOW_RECORD_VAR_DECLARE_in_record_var_dec8060); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_record_name_in_record_var_dec8062);
			record_name();
			state._fsp--;

			pushFollow(FOLLOW_type_name_in_record_var_dec8064);
			type_name();
			state._fsp--;

			// PLSQLPrinter.g:846:53: ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )
			int alt187=2;
			int LA187_0 = input.LA(1);
			if ( (LA187_0==PERCENT_ROWTYPE_VK) ) {
				alt187=1;
			}
			else if ( (LA187_0==PERCENT_TYPE_VK) ) {
				alt187=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 187, 0, input);
				throw nvae;
			}

			switch (alt187) {
				case 1 :
					// PLSQLPrinter.g:846:54: PERCENT_ROWTYPE_VK
					{
					match(input,PERCENT_ROWTYPE_VK,FOLLOW_PERCENT_ROWTYPE_VK_in_record_var_dec8067); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:846:73: PERCENT_TYPE_VK
					{
					match(input,PERCENT_TYPE_VK,FOLLOW_PERCENT_TYPE_VK_in_record_var_dec8069); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 847:5: -> template( \"not implemented: record_var_dec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: record_var_dec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_var_dec"


	public static class table_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_declaration"
	// PLSQLPrinter.g:852:1: table_declaration : ( table_type_dec -> { $table_type_dec.st }| table_var_dec -> { $table_var_dec.st });
	public final PLSQLPrinter.table_declaration_return table_declaration() throws RecognitionException {
		PLSQLPrinter.table_declaration_return retval = new PLSQLPrinter.table_declaration_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope table_type_dec102 =null;
		TreeRuleReturnScope table_var_dec103 =null;

		try {
			// PLSQLPrinter.g:853:5: ( table_type_dec -> { $table_type_dec.st }| table_var_dec -> { $table_var_dec.st })
			int alt188=2;
			int LA188_0 = input.LA(1);
			if ( (LA188_0==TABLE_TYPE_DECLARE) ) {
				alt188=1;
			}
			else if ( (LA188_0==TABLE_VAR_DECLARE) ) {
				alt188=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 188, 0, input);
				throw nvae;
			}

			switch (alt188) {
				case 1 :
					// PLSQLPrinter.g:853:10: table_type_dec
					{
					pushFollow(FOLLOW_table_type_dec_in_table_declaration8107);
					table_type_dec102=table_type_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 853:25: -> { $table_type_dec.st }
					{
						retval.st =  (table_type_dec102!=null?((StringTemplate)table_type_dec102.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:854:10: table_var_dec
					{
					pushFollow(FOLLOW_table_var_dec_in_table_declaration8122);
					table_var_dec103=table_var_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 854:24: -> { $table_var_dec.st }
					{
						retval.st =  (table_var_dec103!=null?((StringTemplate)table_var_dec103.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_declaration"


	public static class table_type_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_type_dec"
	// PLSQLPrinter.g:857:1: table_type_dec : ^( TABLE_TYPE_DECLARE type_name table_type_dec_impl ) -> table_type_dec(name=$type_name.stimpl=$table_type_dec_impl.st);
	public final PLSQLPrinter.table_type_dec_return table_type_dec() throws RecognitionException {
		PLSQLPrinter.table_type_dec_return retval = new PLSQLPrinter.table_type_dec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope type_name104 =null;
		TreeRuleReturnScope table_type_dec_impl105 =null;

		try {
			// PLSQLPrinter.g:858:5: ( ^( TABLE_TYPE_DECLARE type_name table_type_dec_impl ) -> table_type_dec(name=$type_name.stimpl=$table_type_dec_impl.st))
			// PLSQLPrinter.g:858:10: ^( TABLE_TYPE_DECLARE type_name table_type_dec_impl )
			{
			match(input,TABLE_TYPE_DECLARE,FOLLOW_TABLE_TYPE_DECLARE_in_table_type_dec8147); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_table_type_dec8149);
			type_name104=type_name();
			state._fsp--;

			pushFollow(FOLLOW_table_type_dec_impl_in_table_type_dec8151);
			table_type_dec_impl105=table_type_dec_impl();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 859:5: -> table_type_dec(name=$type_name.stimpl=$table_type_dec_impl.st)
			{
				retval.st = templateLib.getInstanceOf("table_type_dec",new STAttrMap().put("name", (type_name104!=null?((StringTemplate)type_name104.getTemplate()):null)).put("impl", (table_type_dec_impl105!=null?((StringTemplate)table_type_dec_impl105.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_type_dec"


	public static class table_type_dec_impl_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_type_dec_impl"
	// PLSQLPrinter.g:862:1: table_type_dec_impl : ( table_type_dec_table_of -> { $table_type_dec_table_of.st }| varray_type_def -> { $varray_type_def.st });
	public final PLSQLPrinter.table_type_dec_impl_return table_type_dec_impl() throws RecognitionException {
		PLSQLPrinter.table_type_dec_impl_return retval = new PLSQLPrinter.table_type_dec_impl_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope table_type_dec_table_of106 =null;
		TreeRuleReturnScope varray_type_def107 =null;

		try {
			// PLSQLPrinter.g:863:5: ( table_type_dec_table_of -> { $table_type_dec_table_of.st }| varray_type_def -> { $varray_type_def.st })
			int alt189=2;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_NULL:
				{
				int LA189_1 = input.LA(2);
				if ( (LA189_1==SQL92_RESERVED_TABLE) ) {
					alt189=1;
				}
				else if ( (LA189_1==VARR_ARRAY_DEF) ) {
					alt189=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 189, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_TABLE:
				{
				alt189=1;
				}
				break;
			case VARR_ARRAY_DEF:
				{
				alt189=2;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 189, 0, input);
				throw nvae;
			}
			switch (alt189) {
				case 1 :
					// PLSQLPrinter.g:863:11: table_type_dec_table_of
					{
					pushFollow(FOLLOW_table_type_dec_table_of_in_table_type_dec_impl8197);
					table_type_dec_table_of106=table_type_dec_table_of();
					state._fsp--;

					// TEMPLATE REWRITE
					// 863:35: -> { $table_type_dec_table_of.st }
					{
						retval.st =  (table_type_dec_table_of106!=null?((StringTemplate)table_type_dec_table_of106.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:864:11: varray_type_def
					{
					pushFollow(FOLLOW_varray_type_def_in_table_type_dec_impl8213);
					varray_type_def107=varray_type_def();
					state._fsp--;

					// TEMPLATE REWRITE
					// 864:27: -> { $varray_type_def.st }
					{
						retval.st =  (varray_type_def107!=null?((StringTemplate)varray_type_def107.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_type_dec_impl"


	public static class table_type_dec_table_of_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_type_dec_table_of"
	// PLSQLPrinter.g:867:1: table_type_dec_table_of : ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) -> table_type_dec_table_of(type_spec=$type_spec.sttable_indexed_by_part=$table_indexed_by_part.stis_not_null=$SQL92_RESERVED_NULL != null);
	public final PLSQLPrinter.table_type_dec_table_of_return table_type_dec_table_of() throws RecognitionException {
		PLSQLPrinter.table_type_dec_table_of_return retval = new PLSQLPrinter.table_type_dec_table_of_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL110=null;
		TreeRuleReturnScope type_spec108 =null;
		TreeRuleReturnScope table_indexed_by_part109 =null;

		try {
			// PLSQLPrinter.g:868:5: ( ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) -> table_type_dec_table_of(type_spec=$type_spec.sttable_indexed_by_part=$table_indexed_by_part.stis_not_null=$SQL92_RESERVED_NULL != null))
			// PLSQLPrinter.g:868:10: ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? )
			{
			// PLSQLPrinter.g:868:10: ( SQL92_RESERVED_NULL )?
			int alt190=2;
			int LA190_0 = input.LA(1);
			if ( (LA190_0==SQL92_RESERVED_NULL) ) {
				alt190=1;
			}
			switch (alt190) {
				case 1 :
					// PLSQLPrinter.g:868:10: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL110=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_table_type_dec_table_of8241); 
					}
					break;

			}

			match(input,SQL92_RESERVED_TABLE,FOLLOW_SQL92_RESERVED_TABLE_in_table_type_dec_table_of8245); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_table_type_dec_table_of8247);
			type_spec108=type_spec();
			state._fsp--;

			// PLSQLPrinter.g:868:64: ( table_indexed_by_part )?
			int alt191=2;
			int LA191_0 = input.LA(1);
			if ( (LA191_0==INDEXED_BY) ) {
				alt191=1;
			}
			switch (alt191) {
				case 1 :
					// PLSQLPrinter.g:868:64: table_indexed_by_part
					{
					pushFollow(FOLLOW_table_indexed_by_part_in_table_type_dec_table_of8249);
					table_indexed_by_part109=table_indexed_by_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 869:5: -> table_type_dec_table_of(type_spec=$type_spec.sttable_indexed_by_part=$table_indexed_by_part.stis_not_null=$SQL92_RESERVED_NULL != null)
			{
				retval.st = templateLib.getInstanceOf("table_type_dec_table_of",new STAttrMap().put("type_spec", (type_spec108!=null?((StringTemplate)type_spec108.getTemplate()):null)).put("table_indexed_by_part", (table_indexed_by_part109!=null?((StringTemplate)table_indexed_by_part109.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL110 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_type_dec_table_of"


	public static class table_indexed_by_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_indexed_by_part"
	// PLSQLPrinter.g:873:1: table_indexed_by_part : ^( INDEXED_BY type_spec ) -> table_indexed_by_part(type_spec=$type_spec.st);
	public final PLSQLPrinter.table_indexed_by_part_return table_indexed_by_part() throws RecognitionException {
		PLSQLPrinter.table_indexed_by_part_return retval = new PLSQLPrinter.table_indexed_by_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope type_spec111 =null;

		try {
			// PLSQLPrinter.g:874:5: ( ^( INDEXED_BY type_spec ) -> table_indexed_by_part(type_spec=$type_spec.st))
			// PLSQLPrinter.g:874:10: ^( INDEXED_BY type_spec )
			{
			match(input,INDEXED_BY,FOLLOW_INDEXED_BY_in_table_indexed_by_part8310); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_table_indexed_by_part8312);
			type_spec111=type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 875:5: -> table_indexed_by_part(type_spec=$type_spec.st)
			{
				retval.st = templateLib.getInstanceOf("table_indexed_by_part",new STAttrMap().put("type_spec", (type_spec111!=null?((StringTemplate)type_spec111.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_indexed_by_part"


	public static class varray_type_def_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "varray_type_def"
	// PLSQLPrinter.g:878:1: varray_type_def : ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec ) -> varray_type_def(limit_expression=$expression.stelement_type=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != null);
	public final PLSQLPrinter.varray_type_def_return varray_type_def() throws RecognitionException {
		PLSQLPrinter.varray_type_def_return retval = new PLSQLPrinter.varray_type_def_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL114=null;
		TreeRuleReturnScope expression112 =null;
		TreeRuleReturnScope type_spec113 =null;

		try {
			// PLSQLPrinter.g:879:5: ( ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec ) -> varray_type_def(limit_expression=$expression.stelement_type=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != null))
			// PLSQLPrinter.g:879:10: ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec )
			{
			// PLSQLPrinter.g:879:10: ( SQL92_RESERVED_NULL )?
			int alt192=2;
			int LA192_0 = input.LA(1);
			if ( (LA192_0==SQL92_RESERVED_NULL) ) {
				alt192=1;
			}
			switch (alt192) {
				case 1 :
					// PLSQLPrinter.g:879:10: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL114=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_varray_type_def8348); 
					}
					break;

			}

			match(input,VARR_ARRAY_DEF,FOLLOW_VARR_ARRAY_DEF_in_varray_type_def8352); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_varray_type_def8354);
			expression112=expression();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_varray_type_def8356);
			type_spec113=type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 880:5: -> varray_type_def(limit_expression=$expression.stelement_type=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != null)
			{
				retval.st = templateLib.getInstanceOf("varray_type_def",new STAttrMap().put("limit_expression", (expression112!=null?((StringTemplate)expression112.getTemplate()):null)).put("element_type", (type_spec113!=null?((StringTemplate)type_spec113.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL114 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "varray_type_def"


	public static class table_var_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_var_dec"
	// PLSQLPrinter.g:883:1: table_var_dec : ^( TABLE_VAR_DECLARE table_var_name type_spec ) -> template( \"not implemented: table_var_dec\";
	public final PLSQLPrinter.table_var_dec_return table_var_dec() throws RecognitionException {
		PLSQLPrinter.table_var_dec_return retval = new PLSQLPrinter.table_var_dec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:884:5: ( ^( TABLE_VAR_DECLARE table_var_name type_spec ) -> template( \"not implemented: table_var_dec\")
			// PLSQLPrinter.g:884:10: ^( TABLE_VAR_DECLARE table_var_name type_spec )
			{
			match(input,TABLE_VAR_DECLARE,FOLLOW_TABLE_VAR_DECLARE_in_table_var_dec8403); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_table_var_name_in_table_var_dec8405);
			table_var_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_table_var_dec8407);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 885:5: -> template( \"not implemented: table_var_dec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: table_var_dec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_var_dec"


	public static class seq_of_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "seq_of_statements"
	// PLSQLPrinter.g:892:1: seq_of_statements : ^( STATEMENTS (statements+= statement |statements+= labeled_statement )+ ) -> seq_of_statements(statements=$statements);
	public final PLSQLPrinter.seq_of_statements_return seq_of_statements() throws RecognitionException {
		PLSQLPrinter.seq_of_statements_return retval = new PLSQLPrinter.seq_of_statements_return();
		retval.start = input.LT(1);

		List<Object> list_statements=null;
		RuleReturnScope statements = null;
		try {
			// PLSQLPrinter.g:893:5: ( ^( STATEMENTS (statements+= statement |statements+= labeled_statement )+ ) -> seq_of_statements(statements=$statements))
			// PLSQLPrinter.g:893:11: ^( STATEMENTS (statements+= statement |statements+= labeled_statement )+ )
			{
			match(input,STATEMENTS,FOLLOW_STATEMENTS_in_seq_of_statements8448); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:893:24: (statements+= statement |statements+= labeled_statement )+
			int cnt193=0;
			loop193:
			while (true) {
				int alt193=3;
				int LA193_0 = input.LA(1);
				if ( (LA193_0==PLSQL_RESERVED_IF||LA193_0==PLSQL_RESERVED_LOCK||LA193_0==SQL92_RESERVED_DELETE||LA193_0==SQL92_RESERVED_FETCH||LA193_0==SQL92_RESERVED_GOTO||LA193_0==SQL92_RESERVED_INSERT||LA193_0==SQL92_RESERVED_NULL||LA193_0==SQL92_RESERVED_UPDATE||LA193_0==ASSIGN||LA193_0==BLOCK||LA193_0==BODY||LA193_0==CASCATED_ELEMENT||LA193_0==CLOSE_VK||LA193_0==COMMIT_VK||LA193_0==CONTINUE_VK||(LA193_0 >= EXECUTE_VK && LA193_0 <= EXIT_VK)||LA193_0==FORALL_VK||LA193_0==FOR_LOOP||LA193_0==LOOP_VK||LA193_0==MERGE_VK||LA193_0==OPEN_VK||LA193_0==PIPE_ROW||LA193_0==RAISE_VK||LA193_0==RETURN_VK||LA193_0==ROLLBACK_VK||LA193_0==SAVEPOINT_VK||LA193_0==SEARCHED_CASE||LA193_0==SELECT_STATEMENT||LA193_0==SET_CONSTRAINT||LA193_0==SET_TRANSACTION||LA193_0==SIMPLE_CASE||LA193_0==WHILE_LOOP) ) {
					alt193=1;
				}
				else if ( (LA193_0==LABEL_DECLARE) ) {
					alt193=2;
				}

				switch (alt193) {
				case 1 :
					// PLSQLPrinter.g:893:25: statements+= statement
					{
					pushFollow(FOLLOW_statement_in_seq_of_statements8453);
					statements=statement();
					state._fsp--;

					if (list_statements==null) list_statements=new ArrayList<Object>();
					list_statements.add(statements.getTemplate());
					}
					break;
				case 2 :
					// PLSQLPrinter.g:893:47: statements+= labeled_statement
					{
					pushFollow(FOLLOW_labeled_statement_in_seq_of_statements8457);
					statements=labeled_statement();
					state._fsp--;

					if (list_statements==null) list_statements=new ArrayList<Object>();
					list_statements.add(statements.getTemplate());
					}
					break;

				default :
					if ( cnt193 >= 1 ) break loop193;
					EarlyExitException eee = new EarlyExitException(193, input);
					throw eee;
				}
				cnt193++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 894:5: -> seq_of_statements(statements=$statements)
			{
				retval.st = templateLib.getInstanceOf("seq_of_statements",new STAttrMap().put("statements", list_statements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "seq_of_statements"


	public static class labeled_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "labeled_statement"
	// PLSQLPrinter.g:897:1: labeled_statement : ^( LABEL_DECLARE label_name statement ) -> labeled_statement(name=$label_name.ststatement=$statement.st);
	public final PLSQLPrinter.labeled_statement_return labeled_statement() throws RecognitionException {
		PLSQLPrinter.labeled_statement_return retval = new PLSQLPrinter.labeled_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name115 =null;
		TreeRuleReturnScope statement116 =null;

		try {
			// PLSQLPrinter.g:898:5: ( ^( LABEL_DECLARE label_name statement ) -> labeled_statement(name=$label_name.ststatement=$statement.st))
			// PLSQLPrinter.g:898:10: ^( LABEL_DECLARE label_name statement )
			{
			match(input,LABEL_DECLARE,FOLLOW_LABEL_DECLARE_in_labeled_statement8498); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_label_name_in_labeled_statement8500);
			label_name115=label_name();
			state._fsp--;

			pushFollow(FOLLOW_statement_in_labeled_statement8502);
			statement116=statement();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 898:48: -> labeled_statement(name=$label_name.ststatement=$statement.st)
			{
				retval.st = templateLib.getInstanceOf("labeled_statement",new STAttrMap().put("name", (label_name115!=null?((StringTemplate)label_name115.getTemplate()):null)).put("statement", (statement116!=null?((StringTemplate)statement116.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "labeled_statement"


	public static class statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "statement"
	// PLSQLPrinter.g:901:1: statement : ( assignment_statement -> { $assignment_statement.st }| continue_statement -> { $continue_statement.st }| exit_statement -> { $exit_statement.st }| goto_statement -> { $goto_statement.st }| if_statement -> { $if_statement.st }| loop_statement -> { $loop_statement.st }| forall_statement -> { $forall_statement.st }| null_statement -> { $null_statement.st }| raise_statement -> { $raise_statement.st }| return_statement -> { $return_statement.st }| pipe_row_statement -> { $pipe_row_statement.st }| case_statement -> { $case_statement.st }| sql_statement -> { $sql_statement.st }| general_element -> { $general_element.st }| body -> { $body.st }| block -> { $block.st });
	public final PLSQLPrinter.statement_return statement() throws RecognitionException {
		PLSQLPrinter.statement_return retval = new PLSQLPrinter.statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope assignment_statement117 =null;
		TreeRuleReturnScope continue_statement118 =null;
		TreeRuleReturnScope exit_statement119 =null;
		TreeRuleReturnScope goto_statement120 =null;
		TreeRuleReturnScope if_statement121 =null;
		TreeRuleReturnScope loop_statement122 =null;
		TreeRuleReturnScope forall_statement123 =null;
		TreeRuleReturnScope null_statement124 =null;
		TreeRuleReturnScope raise_statement125 =null;
		TreeRuleReturnScope return_statement126 =null;
		TreeRuleReturnScope pipe_row_statement127 =null;
		TreeRuleReturnScope case_statement128 =null;
		TreeRuleReturnScope sql_statement129 =null;
		TreeRuleReturnScope general_element130 =null;
		TreeRuleReturnScope body131 =null;
		TreeRuleReturnScope block132 =null;

		try {
			// PLSQLPrinter.g:902:5: ( assignment_statement -> { $assignment_statement.st }| continue_statement -> { $continue_statement.st }| exit_statement -> { $exit_statement.st }| goto_statement -> { $goto_statement.st }| if_statement -> { $if_statement.st }| loop_statement -> { $loop_statement.st }| forall_statement -> { $forall_statement.st }| null_statement -> { $null_statement.st }| raise_statement -> { $raise_statement.st }| return_statement -> { $return_statement.st }| pipe_row_statement -> { $pipe_row_statement.st }| case_statement -> { $case_statement.st }| sql_statement -> { $sql_statement.st }| general_element -> { $general_element.st }| body -> { $body.st }| block -> { $block.st })
			int alt194=16;
			switch ( input.LA(1) ) {
			case ASSIGN:
				{
				alt194=1;
				}
				break;
			case CONTINUE_VK:
				{
				alt194=2;
				}
				break;
			case EXIT_VK:
				{
				alt194=3;
				}
				break;
			case SQL92_RESERVED_GOTO:
				{
				alt194=4;
				}
				break;
			case PLSQL_RESERVED_IF:
				{
				alt194=5;
				}
				break;
			case FOR_LOOP:
			case LOOP_VK:
			case WHILE_LOOP:
				{
				alt194=6;
				}
				break;
			case FORALL_VK:
				{
				alt194=7;
				}
				break;
			case SQL92_RESERVED_NULL:
				{
				alt194=8;
				}
				break;
			case RAISE_VK:
				{
				alt194=9;
				}
				break;
			case RETURN_VK:
				{
				alt194=10;
				}
				break;
			case PIPE_ROW:
				{
				alt194=11;
				}
				break;
			case SEARCHED_CASE:
			case SIMPLE_CASE:
				{
				alt194=12;
				}
				break;
			case PLSQL_RESERVED_LOCK:
			case SQL92_RESERVED_DELETE:
			case SQL92_RESERVED_FETCH:
			case SQL92_RESERVED_INSERT:
			case SQL92_RESERVED_UPDATE:
			case CLOSE_VK:
			case COMMIT_VK:
			case EXECUTE_VK:
			case MERGE_VK:
			case OPEN_VK:
			case ROLLBACK_VK:
			case SAVEPOINT_VK:
			case SELECT_STATEMENT:
			case SET_CONSTRAINT:
			case SET_TRANSACTION:
				{
				alt194=13;
				}
				break;
			case CASCATED_ELEMENT:
				{
				alt194=14;
				}
				break;
			case BODY:
				{
				alt194=15;
				}
				break;
			case BLOCK:
				{
				alt194=16;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 194, 0, input);
				throw nvae;
			}
			switch (alt194) {
				case 1 :
					// PLSQLPrinter.g:902:10: assignment_statement
					{
					pushFollow(FOLLOW_assignment_statement_in_statement8537);
					assignment_statement117=assignment_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 902:31: -> { $assignment_statement.st }
					{
						retval.st =  (assignment_statement117!=null?((StringTemplate)assignment_statement117.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:903:10: continue_statement
					{
					pushFollow(FOLLOW_continue_statement_in_statement8552);
					continue_statement118=continue_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 903:29: -> { $continue_statement.st }
					{
						retval.st =  (continue_statement118!=null?((StringTemplate)continue_statement118.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:904:10: exit_statement
					{
					pushFollow(FOLLOW_exit_statement_in_statement8567);
					exit_statement119=exit_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 904:25: -> { $exit_statement.st }
					{
						retval.st =  (exit_statement119!=null?((StringTemplate)exit_statement119.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:905:10: goto_statement
					{
					pushFollow(FOLLOW_goto_statement_in_statement8582);
					goto_statement120=goto_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 905:25: -> { $goto_statement.st }
					{
						retval.st =  (goto_statement120!=null?((StringTemplate)goto_statement120.getTemplate()):null) ;
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:906:10: if_statement
					{
					pushFollow(FOLLOW_if_statement_in_statement8597);
					if_statement121=if_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 906:23: -> { $if_statement.st }
					{
						retval.st =  (if_statement121!=null?((StringTemplate)if_statement121.getTemplate()):null) ;
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:907:10: loop_statement
					{
					pushFollow(FOLLOW_loop_statement_in_statement8612);
					loop_statement122=loop_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 907:25: -> { $loop_statement.st }
					{
						retval.st =  (loop_statement122!=null?((StringTemplate)loop_statement122.getTemplate()):null) ;
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:908:10: forall_statement
					{
					pushFollow(FOLLOW_forall_statement_in_statement8627);
					forall_statement123=forall_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 908:27: -> { $forall_statement.st }
					{
						retval.st =  (forall_statement123!=null?((StringTemplate)forall_statement123.getTemplate()):null) ;
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:909:10: null_statement
					{
					pushFollow(FOLLOW_null_statement_in_statement8642);
					null_statement124=null_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 909:25: -> { $null_statement.st }
					{
						retval.st =  (null_statement124!=null?((StringTemplate)null_statement124.getTemplate()):null) ;
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:910:10: raise_statement
					{
					pushFollow(FOLLOW_raise_statement_in_statement8657);
					raise_statement125=raise_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 910:26: -> { $raise_statement.st }
					{
						retval.st =  (raise_statement125!=null?((StringTemplate)raise_statement125.getTemplate()):null) ;
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:911:10: return_statement
					{
					pushFollow(FOLLOW_return_statement_in_statement8672);
					return_statement126=return_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 911:27: -> { $return_statement.st }
					{
						retval.st =  (return_statement126!=null?((StringTemplate)return_statement126.getTemplate()):null) ;
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:912:10: pipe_row_statement
					{
					pushFollow(FOLLOW_pipe_row_statement_in_statement8687);
					pipe_row_statement127=pipe_row_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 912:29: -> { $pipe_row_statement.st }
					{
						retval.st =  (pipe_row_statement127!=null?((StringTemplate)pipe_row_statement127.getTemplate()):null) ;
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:913:10: case_statement
					{
					pushFollow(FOLLOW_case_statement_in_statement8702);
					case_statement128=case_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 913:25: -> { $case_statement.st }
					{
						retval.st =  (case_statement128!=null?((StringTemplate)case_statement128.getTemplate()):null) ;
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:914:10: sql_statement
					{
					pushFollow(FOLLOW_sql_statement_in_statement8717);
					sql_statement129=sql_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 914:24: -> { $sql_statement.st }
					{
						retval.st =  (sql_statement129!=null?((StringTemplate)sql_statement129.getTemplate()):null) ;
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:915:10: general_element
					{
					pushFollow(FOLLOW_general_element_in_statement8732);
					general_element130=general_element();
					state._fsp--;

					// TEMPLATE REWRITE
					// 915:26: -> { $general_element.st }
					{
						retval.st =  (general_element130!=null?((StringTemplate)general_element130.getTemplate()):null) ;
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:916:10: body
					{
					pushFollow(FOLLOW_body_in_statement8747);
					body131=body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 916:15: -> { $body.st }
					{
						retval.st =  (body131!=null?((StringTemplate)body131.getTemplate()):null) ;
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:917:10: block
					{
					pushFollow(FOLLOW_block_in_statement8762);
					block132=block();
					state._fsp--;

					// TEMPLATE REWRITE
					// 917:16: -> { $block.st }
					{
						retval.st =  (block132!=null?((StringTemplate)block132.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class assignment_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "assignment_statement"
	// PLSQLPrinter.g:920:1: assignment_statement : ^( ASSIGN general_element expression ) -> template( \"not implemented: assignment_statement\";
	public final PLSQLPrinter.assignment_statement_return assignment_statement() throws RecognitionException {
		PLSQLPrinter.assignment_statement_return retval = new PLSQLPrinter.assignment_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:921:5: ( ^( ASSIGN general_element expression ) -> template( \"not implemented: assignment_statement\")
			// PLSQLPrinter.g:921:11: ^( ASSIGN general_element expression )
			{
			match(input,ASSIGN,FOLLOW_ASSIGN_in_assignment_statement8788); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_element_in_assignment_statement8790);
			general_element();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_assignment_statement8792);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 922:5: -> template( \"not implemented: assignment_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: assignment_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "assignment_statement"


	public static class continue_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "continue_statement"
	// PLSQLPrinter.g:925:1: continue_statement : ^( CONTINUE_VK ( label_name )? ( general_when )? ) -> template( \"not implemented: continue_statement\";
	public final PLSQLPrinter.continue_statement_return continue_statement() throws RecognitionException {
		PLSQLPrinter.continue_statement_return retval = new PLSQLPrinter.continue_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:926:5: ( ^( CONTINUE_VK ( label_name )? ( general_when )? ) -> template( \"not implemented: continue_statement\")
			// PLSQLPrinter.g:926:10: ^( CONTINUE_VK ( label_name )? ( general_when )? )
			{
			match(input,CONTINUE_VK,FOLLOW_CONTINUE_VK_in_continue_statement8828); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:926:24: ( label_name )?
				int alt195=2;
				int LA195_0 = input.LA(1);
				if ( (LA195_0==LABEL_NAME) ) {
					alt195=1;
				}
				switch (alt195) {
					case 1 :
						// PLSQLPrinter.g:926:24: label_name
						{
						pushFollow(FOLLOW_label_name_in_continue_statement8830);
						label_name();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:926:36: ( general_when )?
				int alt196=2;
				int LA196_0 = input.LA(1);
				if ( (LA196_0==SQL92_RESERVED_WHEN) ) {
					alt196=1;
				}
				switch (alt196) {
					case 1 :
						// PLSQLPrinter.g:926:36: general_when
						{
						pushFollow(FOLLOW_general_when_in_continue_statement8833);
						general_when();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 927:5: -> template( \"not implemented: continue_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: continue_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "continue_statement"


	public static class general_when_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_when"
	// PLSQLPrinter.g:930:1: general_when : ^( SQL92_RESERVED_WHEN expression ) -> template( \"not implemented: general_when\";
	public final PLSQLPrinter.general_when_return general_when() throws RecognitionException {
		PLSQLPrinter.general_when_return retval = new PLSQLPrinter.general_when_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:931:5: ( ^( SQL92_RESERVED_WHEN expression ) -> template( \"not implemented: general_when\")
			// PLSQLPrinter.g:931:10: ^( SQL92_RESERVED_WHEN expression )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_general_when8870); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_general_when8872);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 932:5: -> template( \"not implemented: general_when\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: general_when");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_when"


	public static class exit_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exit_statement"
	// PLSQLPrinter.g:935:1: exit_statement : ^( EXIT_VK ( label_name )? ( general_when )? ) -> template( \"not implemented: exit_statement\";
	public final PLSQLPrinter.exit_statement_return exit_statement() throws RecognitionException {
		PLSQLPrinter.exit_statement_return retval = new PLSQLPrinter.exit_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:936:5: ( ^( EXIT_VK ( label_name )? ( general_when )? ) -> template( \"not implemented: exit_statement\")
			// PLSQLPrinter.g:936:10: ^( EXIT_VK ( label_name )? ( general_when )? )
			{
			match(input,EXIT_VK,FOLLOW_EXIT_VK_in_exit_statement8908); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:936:20: ( label_name )?
				int alt197=2;
				int LA197_0 = input.LA(1);
				if ( (LA197_0==LABEL_NAME) ) {
					alt197=1;
				}
				switch (alt197) {
					case 1 :
						// PLSQLPrinter.g:936:20: label_name
						{
						pushFollow(FOLLOW_label_name_in_exit_statement8910);
						label_name();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:936:32: ( general_when )?
				int alt198=2;
				int LA198_0 = input.LA(1);
				if ( (LA198_0==SQL92_RESERVED_WHEN) ) {
					alt198=1;
				}
				switch (alt198) {
					case 1 :
						// PLSQLPrinter.g:936:32: general_when
						{
						pushFollow(FOLLOW_general_when_in_exit_statement8913);
						general_when();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 937:5: -> template( \"not implemented: exit_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: exit_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exit_statement"


	public static class goto_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "goto_statement"
	// PLSQLPrinter.g:940:1: goto_statement : ^( SQL92_RESERVED_GOTO label_name ) -> template( \"not implemented: goto_statement\";
	public final PLSQLPrinter.goto_statement_return goto_statement() throws RecognitionException {
		PLSQLPrinter.goto_statement_return retval = new PLSQLPrinter.goto_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:941:5: ( ^( SQL92_RESERVED_GOTO label_name ) -> template( \"not implemented: goto_statement\")
			// PLSQLPrinter.g:941:10: ^( SQL92_RESERVED_GOTO label_name )
			{
			match(input,SQL92_RESERVED_GOTO,FOLLOW_SQL92_RESERVED_GOTO_in_goto_statement8950); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_label_name_in_goto_statement8952);
			label_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 942:5: -> template( \"not implemented: goto_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: goto_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "goto_statement"


	public static class if_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "if_statement"
	// PLSQLPrinter.g:945:1: if_statement : ^( PLSQL_RESERVED_IF expression seq_of_statements ( elsif_part )* ( else_part )? ) -> template( \"not implemented: if_statement\";
	public final PLSQLPrinter.if_statement_return if_statement() throws RecognitionException {
		PLSQLPrinter.if_statement_return retval = new PLSQLPrinter.if_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:946:5: ( ^( PLSQL_RESERVED_IF expression seq_of_statements ( elsif_part )* ( else_part )? ) -> template( \"not implemented: if_statement\")
			// PLSQLPrinter.g:946:10: ^( PLSQL_RESERVED_IF expression seq_of_statements ( elsif_part )* ( else_part )? )
			{
			match(input,PLSQL_RESERVED_IF,FOLLOW_PLSQL_RESERVED_IF_in_if_statement8988); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_if_statement8990);
			expression();
			state._fsp--;

			pushFollow(FOLLOW_seq_of_statements_in_if_statement8992);
			seq_of_statements();
			state._fsp--;

			// PLSQLPrinter.g:946:59: ( elsif_part )*
			loop199:
			while (true) {
				int alt199=2;
				int LA199_0 = input.LA(1);
				if ( (LA199_0==PLSQL_NON_RESERVED_ELSIF) ) {
					alt199=1;
				}

				switch (alt199) {
				case 1 :
					// PLSQLPrinter.g:946:59: elsif_part
					{
					pushFollow(FOLLOW_elsif_part_in_if_statement8994);
					elsif_part();
					state._fsp--;

					}
					break;

				default :
					break loop199;
				}
			}

			// PLSQLPrinter.g:946:71: ( else_part )?
			int alt200=2;
			int LA200_0 = input.LA(1);
			if ( (LA200_0==SQL92_RESERVED_ELSE) ) {
				alt200=1;
			}
			switch (alt200) {
				case 1 :
					// PLSQLPrinter.g:946:71: else_part
					{
					pushFollow(FOLLOW_else_part_in_if_statement8997);
					else_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 947:5: -> template( \"not implemented: if_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: if_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "if_statement"


	public static class elsif_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "elsif_part"
	// PLSQLPrinter.g:950:1: elsif_part : ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements ) -> template( \"not implemented: elsif_part\";
	public final PLSQLPrinter.elsif_part_return elsif_part() throws RecognitionException {
		PLSQLPrinter.elsif_part_return retval = new PLSQLPrinter.elsif_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:951:5: ( ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements ) -> template( \"not implemented: elsif_part\")
			// PLSQLPrinter.g:951:10: ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements )
			{
			match(input,PLSQL_NON_RESERVED_ELSIF,FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_part9034); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_elsif_part9036);
			expression();
			state._fsp--;

			pushFollow(FOLLOW_seq_of_statements_in_elsif_part9038);
			seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 952:5: -> template( \"not implemented: elsif_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: elsif_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "elsif_part"


	public static class else_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "else_part"
	// PLSQLPrinter.g:955:1: else_part : ^( SQL92_RESERVED_ELSE seq_of_statements ) -> template( \"not implemented: else_part\";
	public final PLSQLPrinter.else_part_return else_part() throws RecognitionException {
		PLSQLPrinter.else_part_return retval = new PLSQLPrinter.else_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:956:5: ( ^( SQL92_RESERVED_ELSE seq_of_statements ) -> template( \"not implemented: else_part\")
			// PLSQLPrinter.g:956:10: ^( SQL92_RESERVED_ELSE seq_of_statements )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_else_part9074); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_seq_of_statements_in_else_part9076);
			seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 957:5: -> template( \"not implemented: else_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: else_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "else_part"


	public static class loop_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "loop_statement"
	// PLSQLPrinter.g:960:1: loop_statement : ( ^( WHILE_LOOP expression seq_of_statements ) -> template( \"not implemented: loop_statement[WHILE_LOOP]\"| ^( FOR_LOOP cursor_loop_param seq_of_statements ) -> for_loop(loopDefinition=$cursor_loop_param.ststatements=$seq_of_statements.st)| ^( LOOP_VK seq_of_statements ) -> template( \"not implemented: loop_statement[LOOP_VK]\");
	public final PLSQLPrinter.loop_statement_return loop_statement() throws RecognitionException {
		PLSQLPrinter.loop_statement_return retval = new PLSQLPrinter.loop_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope cursor_loop_param133 =null;
		TreeRuleReturnScope seq_of_statements134 =null;

		try {
			// PLSQLPrinter.g:961:5: ( ^( WHILE_LOOP expression seq_of_statements ) -> template( \"not implemented: loop_statement[WHILE_LOOP]\"| ^( FOR_LOOP cursor_loop_param seq_of_statements ) -> for_loop(loopDefinition=$cursor_loop_param.ststatements=$seq_of_statements.st)| ^( LOOP_VK seq_of_statements ) -> template( \"not implemented: loop_statement[LOOP_VK]\")
			int alt201=3;
			switch ( input.LA(1) ) {
			case WHILE_LOOP:
				{
				alt201=1;
				}
				break;
			case FOR_LOOP:
				{
				alt201=2;
				}
				break;
			case LOOP_VK:
				{
				alt201=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 201, 0, input);
				throw nvae;
			}
			switch (alt201) {
				case 1 :
					// PLSQLPrinter.g:961:10: ^( WHILE_LOOP expression seq_of_statements )
					{
					match(input,WHILE_LOOP,FOLLOW_WHILE_LOOP_in_loop_statement9112); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_loop_statement9114);
					expression();
					state._fsp--;

					pushFollow(FOLLOW_seq_of_statements_in_loop_statement9116);
					seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 962:5: -> template( \"not implemented: loop_statement[WHILE_LOOP]\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: loop_statement[WHILE_LOOP]");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:963:10: ^( FOR_LOOP cursor_loop_param seq_of_statements )
					{
					match(input,FOR_LOOP,FOLLOW_FOR_LOOP_in_loop_statement9143); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_cursor_loop_param_in_loop_statement9145);
					cursor_loop_param133=cursor_loop_param();
					state._fsp--;

					pushFollow(FOLLOW_seq_of_statements_in_loop_statement9147);
					seq_of_statements134=seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 964:5: -> for_loop(loopDefinition=$cursor_loop_param.ststatements=$seq_of_statements.st)
					{
						retval.st = templateLib.getInstanceOf("for_loop",new STAttrMap().put("loopDefinition", (cursor_loop_param133!=null?((StringTemplate)cursor_loop_param133.getTemplate()):null)).put("statements", (seq_of_statements134!=null?((StringTemplate)seq_of_statements134.getTemplate()):null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:965:10: ^( LOOP_VK seq_of_statements )
					{
					match(input,LOOP_VK,FOLLOW_LOOP_VK_in_loop_statement9180); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_seq_of_statements_in_loop_statement9182);
					seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 966:5: -> template( \"not implemented: loop_statement[LOOP_VK]\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: loop_statement[LOOP_VK]");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "loop_statement"


	public static class cursor_loop_param_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_loop_param"
	// PLSQLPrinter.g:971:1: cursor_loop_param : ( ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND b1= expression b2= expression ) ) -> loopDefinition_bounds(indexVar=$index_name.stisReverse=$REVERSE_VK != nulllowerBound=$b1.stupperBound=$b2.st)| ^( CURSOR_BASED_FOR record_name cursor_name ( expression_list )? ) -> template( \"not implemented: cursor_loop_param[CURSOR_BASED_FOR]\"| ^( SELECT_BASED_FOR record_name select_statement ) -> template( \"not implemented: cursor_loop_param[SELECT_BASED_FOR]\");
	public final PLSQLPrinter.cursor_loop_param_return cursor_loop_param() throws RecognitionException {
		PLSQLPrinter.cursor_loop_param_return retval = new PLSQLPrinter.cursor_loop_param_return();
		retval.start = input.LT(1);

		CommonTree REVERSE_VK136=null;
		TreeRuleReturnScope b1 =null;
		TreeRuleReturnScope b2 =null;
		TreeRuleReturnScope index_name135 =null;

		try {
			// PLSQLPrinter.g:972:5: ( ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND b1= expression b2= expression ) ) -> loopDefinition_bounds(indexVar=$index_name.stisReverse=$REVERSE_VK != nulllowerBound=$b1.stupperBound=$b2.st)| ^( CURSOR_BASED_FOR record_name cursor_name ( expression_list )? ) -> template( \"not implemented: cursor_loop_param[CURSOR_BASED_FOR]\"| ^( SELECT_BASED_FOR record_name select_statement ) -> template( \"not implemented: cursor_loop_param[SELECT_BASED_FOR]\")
			int alt204=3;
			switch ( input.LA(1) ) {
			case INDEXED_FOR:
				{
				alt204=1;
				}
				break;
			case CURSOR_BASED_FOR:
				{
				alt204=2;
				}
				break;
			case SELECT_BASED_FOR:
				{
				alt204=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 204, 0, input);
				throw nvae;
			}
			switch (alt204) {
				case 1 :
					// PLSQLPrinter.g:972:10: ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND b1= expression b2= expression ) )
					{
					match(input,INDEXED_FOR,FOLLOW_INDEXED_FOR_in_cursor_loop_param9220); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_index_name_in_cursor_loop_param9222);
					index_name135=index_name();
					state._fsp--;

					// PLSQLPrinter.g:972:35: ( REVERSE_VK )?
					int alt202=2;
					int LA202_0 = input.LA(1);
					if ( (LA202_0==REVERSE_VK) ) {
						alt202=1;
					}
					switch (alt202) {
						case 1 :
							// PLSQLPrinter.g:972:35: REVERSE_VK
							{
							REVERSE_VK136=(CommonTree)match(input,REVERSE_VK,FOLLOW_REVERSE_VK_in_cursor_loop_param9224); 
							}
							break;

					}

					match(input,SIMPLE_BOUND,FOLLOW_SIMPLE_BOUND_in_cursor_loop_param9228); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_cursor_loop_param9232);
					b1=expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_cursor_loop_param9236);
					b2=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 973:5: -> loopDefinition_bounds(indexVar=$index_name.stisReverse=$REVERSE_VK != nulllowerBound=$b1.stupperBound=$b2.st)
					{
						retval.st = templateLib.getInstanceOf("loopDefinition_bounds",new STAttrMap().put("indexVar", (index_name135!=null?((StringTemplate)index_name135.getTemplate()):null)).put("isReverse", REVERSE_VK136 != null).put("lowerBound", (b1!=null?((StringTemplate)b1.getTemplate()):null)).put("upperBound", (b2!=null?((StringTemplate)b2.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:974:10: ^( CURSOR_BASED_FOR record_name cursor_name ( expression_list )? )
					{
					match(input,CURSOR_BASED_FOR,FOLLOW_CURSOR_BASED_FOR_in_cursor_loop_param9280); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_record_name_in_cursor_loop_param9282);
					record_name();
					state._fsp--;

					pushFollow(FOLLOW_cursor_name_in_cursor_loop_param9284);
					cursor_name();
					state._fsp--;

					// PLSQLPrinter.g:974:53: ( expression_list )?
					int alt203=2;
					int LA203_0 = input.LA(1);
					if ( (LA203_0==EXPR_LIST) ) {
						alt203=1;
					}
					switch (alt203) {
						case 1 :
							// PLSQLPrinter.g:974:53: expression_list
							{
							pushFollow(FOLLOW_expression_list_in_cursor_loop_param9286);
							expression_list();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 975:5: -> template( \"not implemented: cursor_loop_param[CURSOR_BASED_FOR]\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: cursor_loop_param[CURSOR_BASED_FOR]");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:976:10: ^( SELECT_BASED_FOR record_name select_statement )
					{
					match(input,SELECT_BASED_FOR,FOLLOW_SELECT_BASED_FOR_in_cursor_loop_param9314); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_record_name_in_cursor_loop_param9316);
					record_name();
					state._fsp--;

					pushFollow(FOLLOW_select_statement_in_cursor_loop_param9318);
					select_statement();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 977:5: -> template( \"not implemented: cursor_loop_param[SELECT_BASED_FOR]\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: cursor_loop_param[SELECT_BASED_FOR]");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_loop_param"


	public static class forall_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "forall_statement"
	// PLSQLPrinter.g:982:1: forall_statement : ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? ) -> template( \"not implemented: forall_statement\";
	public final PLSQLPrinter.forall_statement_return forall_statement() throws RecognitionException {
		PLSQLPrinter.forall_statement_return retval = new PLSQLPrinter.forall_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:983:5: ( ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? ) -> template( \"not implemented: forall_statement\")
			// PLSQLPrinter.g:983:10: ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? )
			{
			match(input,FORALL_VK,FOLLOW_FORALL_VK_in_forall_statement9356); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_index_name_in_forall_statement9358);
			index_name();
			state._fsp--;

			pushFollow(FOLLOW_bounds_clause_in_forall_statement9360);
			bounds_clause();
			state._fsp--;

			pushFollow(FOLLOW_sql_statement_in_forall_statement9362);
			sql_statement();
			state._fsp--;

			// PLSQLPrinter.g:983:61: ( EXCEPTIONS_VK )?
			int alt205=2;
			int LA205_0 = input.LA(1);
			if ( (LA205_0==EXCEPTIONS_VK) ) {
				alt205=1;
			}
			switch (alt205) {
				case 1 :
					// PLSQLPrinter.g:983:61: EXCEPTIONS_VK
					{
					match(input,EXCEPTIONS_VK,FOLLOW_EXCEPTIONS_VK_in_forall_statement9364); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 984:5: -> template( \"not implemented: forall_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: forall_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "forall_statement"


	public static class bounds_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "bounds_clause"
	// PLSQLPrinter.g:987:1: bounds_clause : ( ^( SIMPLE_BOUND expression expression ) -> template( \"not implemented: bounds_clause\"| ^( INDICES_BOUND collection_name ( between_bound )? ) -> template( \"not implemented: bounds_clause\"| ^( VALUES_BOUND index_name ) -> template( \"not implemented: bounds_clause\");
	public final PLSQLPrinter.bounds_clause_return bounds_clause() throws RecognitionException {
		PLSQLPrinter.bounds_clause_return retval = new PLSQLPrinter.bounds_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:988:5: ( ^( SIMPLE_BOUND expression expression ) -> template( \"not implemented: bounds_clause\"| ^( INDICES_BOUND collection_name ( between_bound )? ) -> template( \"not implemented: bounds_clause\"| ^( VALUES_BOUND index_name ) -> template( \"not implemented: bounds_clause\")
			int alt207=3;
			switch ( input.LA(1) ) {
			case SIMPLE_BOUND:
				{
				alt207=1;
				}
				break;
			case INDICES_BOUND:
				{
				alt207=2;
				}
				break;
			case VALUES_BOUND:
				{
				alt207=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 207, 0, input);
				throw nvae;
			}
			switch (alt207) {
				case 1 :
					// PLSQLPrinter.g:988:10: ^( SIMPLE_BOUND expression expression )
					{
					match(input,SIMPLE_BOUND,FOLLOW_SIMPLE_BOUND_in_bounds_clause9401); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_bounds_clause9403);
					expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_bounds_clause9405);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 989:5: -> template( \"not implemented: bounds_clause\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: bounds_clause");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:990:10: ^( INDICES_BOUND collection_name ( between_bound )? )
					{
					match(input,INDICES_BOUND,FOLLOW_INDICES_BOUND_in_bounds_clause9432); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_collection_name_in_bounds_clause9434);
					collection_name();
					state._fsp--;

					// PLSQLPrinter.g:990:42: ( between_bound )?
					int alt206=2;
					int LA206_0 = input.LA(1);
					if ( (LA206_0==SQL92_RESERVED_BETWEEN) ) {
						alt206=1;
					}
					switch (alt206) {
						case 1 :
							// PLSQLPrinter.g:990:42: between_bound
							{
							pushFollow(FOLLOW_between_bound_in_bounds_clause9436);
							between_bound();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 991:5: -> template( \"not implemented: bounds_clause\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: bounds_clause");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:992:10: ^( VALUES_BOUND index_name )
					{
					match(input,VALUES_BOUND,FOLLOW_VALUES_BOUND_in_bounds_clause9464); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_index_name_in_bounds_clause9466);
					index_name();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 993:5: -> template( \"not implemented: bounds_clause\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: bounds_clause");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bounds_clause"


	public static class between_bound_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "between_bound"
	// PLSQLPrinter.g:996:1: between_bound : ^( SQL92_RESERVED_BETWEEN expression expression ) -> template( \"not implemented: between_bound\";
	public final PLSQLPrinter.between_bound_return between_bound() throws RecognitionException {
		PLSQLPrinter.between_bound_return retval = new PLSQLPrinter.between_bound_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:997:5: ( ^( SQL92_RESERVED_BETWEEN expression expression ) -> template( \"not implemented: between_bound\")
			// PLSQLPrinter.g:997:10: ^( SQL92_RESERVED_BETWEEN expression expression )
			{
			match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_between_bound9503); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_between_bound9505);
			expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_between_bound9507);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 998:5: -> template( \"not implemented: between_bound\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: between_bound");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "between_bound"


	public static class null_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "null_statement"
	// PLSQLPrinter.g:1001:1: null_statement : SQL92_RESERVED_NULL -> template( \"not implemented: null_statement\";
	public final PLSQLPrinter.null_statement_return null_statement() throws RecognitionException {
		PLSQLPrinter.null_statement_return retval = new PLSQLPrinter.null_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1002:5: ( SQL92_RESERVED_NULL -> template( \"not implemented: null_statement\")
			// PLSQLPrinter.g:1002:10: SQL92_RESERVED_NULL
			{
			match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_null_statement9542); 
			// TEMPLATE REWRITE
			// 1003:5: -> template( \"not implemented: null_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: null_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "null_statement"


	public static class raise_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "raise_statement"
	// PLSQLPrinter.g:1006:1: raise_statement : ^( RAISE_VK ( exception_name )? ) -> template( \"not implemented: raise_statement\";
	public final PLSQLPrinter.raise_statement_return raise_statement() throws RecognitionException {
		PLSQLPrinter.raise_statement_return retval = new PLSQLPrinter.raise_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1007:5: ( ^( RAISE_VK ( exception_name )? ) -> template( \"not implemented: raise_statement\")
			// PLSQLPrinter.g:1007:10: ^( RAISE_VK ( exception_name )? )
			{
			match(input,RAISE_VK,FOLLOW_RAISE_VK_in_raise_statement9577); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1007:21: ( exception_name )?
				int alt208=2;
				int LA208_0 = input.LA(1);
				if ( (LA208_0==EXCEPTION_NAME) ) {
					alt208=1;
				}
				switch (alt208) {
					case 1 :
						// PLSQLPrinter.g:1007:21: exception_name
						{
						pushFollow(FOLLOW_exception_name_in_raise_statement9579);
						exception_name();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1008:5: -> template( \"not implemented: raise_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: raise_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "raise_statement"


	public static class return_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "return_statement"
	// PLSQLPrinter.g:1011:1: return_statement : ^( RETURN_VK ( expression )? ) -> return_statement(expression=$expression.st);
	public final PLSQLPrinter.return_statement_return return_statement() throws RecognitionException {
		PLSQLPrinter.return_statement_return retval = new PLSQLPrinter.return_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression137 =null;

		try {
			// PLSQLPrinter.g:1012:5: ( ^( RETURN_VK ( expression )? ) -> return_statement(expression=$expression.st))
			// PLSQLPrinter.g:1012:10: ^( RETURN_VK ( expression )? )
			{
			match(input,RETURN_VK,FOLLOW_RETURN_VK_in_return_statement9616); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1012:22: ( expression )?
				int alt209=2;
				int LA209_0 = input.LA(1);
				if ( (LA209_0==EXPR||LA209_0==LOGIC_EXPR) ) {
					alt209=1;
				}
				switch (alt209) {
					case 1 :
						// PLSQLPrinter.g:1012:22: expression
						{
						pushFollow(FOLLOW_expression_in_return_statement9618);
						expression137=expression();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1012:35: -> return_statement(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("return_statement",new STAttrMap().put("expression", (expression137!=null?((StringTemplate)expression137.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "return_statement"


	public static class body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "body"
	// PLSQLPrinter.g:1015:1: body : ^( BODY ( label_name )? seq_of_statements ( exception_clause )? ) -> body(bodyLabel=$label_name.ststatements=$seq_of_statements.stexception_clause=$exception_clause.st);
	public final PLSQLPrinter.body_return body() throws RecognitionException {
		PLSQLPrinter.body_return retval = new PLSQLPrinter.body_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name138 =null;
		TreeRuleReturnScope seq_of_statements139 =null;
		TreeRuleReturnScope exception_clause140 =null;

		try {
			// PLSQLPrinter.g:1016:5: ( ^( BODY ( label_name )? seq_of_statements ( exception_clause )? ) -> body(bodyLabel=$label_name.ststatements=$seq_of_statements.stexception_clause=$exception_clause.st))
			// PLSQLPrinter.g:1016:10: ^( BODY ( label_name )? seq_of_statements ( exception_clause )? )
			{
			match(input,BODY,FOLLOW_BODY_in_body9650); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1016:17: ( label_name )?
			int alt210=2;
			int LA210_0 = input.LA(1);
			if ( (LA210_0==LABEL_NAME) ) {
				alt210=1;
			}
			switch (alt210) {
				case 1 :
					// PLSQLPrinter.g:1016:17: label_name
					{
					pushFollow(FOLLOW_label_name_in_body9652);
					label_name138=label_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_seq_of_statements_in_body9655);
			seq_of_statements139=seq_of_statements();
			state._fsp--;

			// PLSQLPrinter.g:1016:47: ( exception_clause )?
			int alt211=2;
			int LA211_0 = input.LA(1);
			if ( (LA211_0==SQL92_RESERVED_EXCEPTION) ) {
				alt211=1;
			}
			switch (alt211) {
				case 1 :
					// PLSQLPrinter.g:1016:47: exception_clause
					{
					pushFollow(FOLLOW_exception_clause_in_body9657);
					exception_clause140=exception_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1017:5: -> body(bodyLabel=$label_name.ststatements=$seq_of_statements.stexception_clause=$exception_clause.st)
			{
				retval.st = templateLib.getInstanceOf("body",new STAttrMap().put("bodyLabel", (label_name138!=null?((StringTemplate)label_name138.getTemplate()):null)).put("statements", (seq_of_statements139!=null?((StringTemplate)seq_of_statements139.getTemplate()):null)).put("exception_clause", (exception_clause140!=null?((StringTemplate)exception_clause140.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "body"


	public static class exception_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_clause"
	// PLSQLPrinter.g:1022:1: exception_clause : ^( SQL92_RESERVED_EXCEPTION ( exception_handler )+ ) -> template( \"not implemented: exception_clause\";
	public final PLSQLPrinter.exception_clause_return exception_clause() throws RecognitionException {
		PLSQLPrinter.exception_clause_return retval = new PLSQLPrinter.exception_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1023:5: ( ^( SQL92_RESERVED_EXCEPTION ( exception_handler )+ ) -> template( \"not implemented: exception_clause\")
			// PLSQLPrinter.g:1023:10: ^( SQL92_RESERVED_EXCEPTION ( exception_handler )+ )
			{
			match(input,SQL92_RESERVED_EXCEPTION,FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_clause9708); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1023:37: ( exception_handler )+
			int cnt212=0;
			loop212:
			while (true) {
				int alt212=2;
				int LA212_0 = input.LA(1);
				if ( (LA212_0==SQL92_RESERVED_WHEN) ) {
					alt212=1;
				}

				switch (alt212) {
				case 1 :
					// PLSQLPrinter.g:1023:37: exception_handler
					{
					pushFollow(FOLLOW_exception_handler_in_exception_clause9710);
					exception_handler();
					state._fsp--;

					}
					break;

				default :
					if ( cnt212 >= 1 ) break loop212;
					EarlyExitException eee = new EarlyExitException(212, input);
					throw eee;
				}
				cnt212++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1024:5: -> template( \"not implemented: exception_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: exception_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_clause"


	public static class exception_handler_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_handler"
	// PLSQLPrinter.g:1027:1: exception_handler : ^( SQL92_RESERVED_WHEN ( exception_name )+ seq_of_statements ) -> template( \"not implemented: exception_handler\";
	public final PLSQLPrinter.exception_handler_return exception_handler() throws RecognitionException {
		PLSQLPrinter.exception_handler_return retval = new PLSQLPrinter.exception_handler_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1028:5: ( ^( SQL92_RESERVED_WHEN ( exception_name )+ seq_of_statements ) -> template( \"not implemented: exception_handler\")
			// PLSQLPrinter.g:1028:10: ^( SQL92_RESERVED_WHEN ( exception_name )+ seq_of_statements )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_exception_handler9747); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1028:32: ( exception_name )+
			int cnt213=0;
			loop213:
			while (true) {
				int alt213=2;
				int LA213_0 = input.LA(1);
				if ( (LA213_0==EXCEPTION_NAME) ) {
					alt213=1;
				}

				switch (alt213) {
				case 1 :
					// PLSQLPrinter.g:1028:32: exception_name
					{
					pushFollow(FOLLOW_exception_name_in_exception_handler9749);
					exception_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt213 >= 1 ) break loop213;
					EarlyExitException eee = new EarlyExitException(213, input);
					throw eee;
				}
				cnt213++;
			}

			pushFollow(FOLLOW_seq_of_statements_in_exception_handler9752);
			seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1029:5: -> template( \"not implemented: exception_handler\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: exception_handler");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_handler"


	public static class block_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "block"
	// PLSQLPrinter.g:1034:1: block : ^( BLOCK (specs+= declare_spec )* body ) -> block(declare_spec=$specsbody=$body.st);
	public final PLSQLPrinter.block_return block() throws RecognitionException {
		PLSQLPrinter.block_return retval = new PLSQLPrinter.block_return();
		retval.start = input.LT(1);

		List<Object> list_specs=null;
		TreeRuleReturnScope body141 =null;
		RuleReturnScope specs = null;
		try {
			// PLSQLPrinter.g:1035:5: ( ^( BLOCK (specs+= declare_spec )* body ) -> block(declare_spec=$specsbody=$body.st))
			// PLSQLPrinter.g:1035:10: ^( BLOCK (specs+= declare_spec )* body )
			{
			match(input,BLOCK,FOLLOW_BLOCK_in_block9790); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1035:23: (specs+= declare_spec )*
			loop214:
			while (true) {
				int alt214=2;
				int LA214_0 = input.LA(1);
				if ( (LA214_0==CREATE_FUNCTION||LA214_0==CREATE_PROCEDURE||(LA214_0 >= CREATE_TYPE_BODY && LA214_0 <= CREATE_TYPE_SPEC)||LA214_0==CURSOR_DECLARE||LA214_0==EXCEPTION_DECLARE||LA214_0==PRAGMA_DECLARE||(LA214_0 >= RECORD_TYPE_DECLARE && LA214_0 <= RECORD_VAR_DECLARE)||LA214_0==SUBTYPE_DECLARE||(LA214_0 >= TABLE_TYPE_DECLARE && LA214_0 <= TABLE_VAR_DECLARE)||LA214_0==VARIABLE_DECLARE) ) {
					alt214=1;
				}

				switch (alt214) {
				case 1 :
					// PLSQLPrinter.g:1035:23: specs+= declare_spec
					{
					pushFollow(FOLLOW_declare_spec_in_block9794);
					specs=declare_spec();
					state._fsp--;

					if (list_specs==null) list_specs=new ArrayList<Object>();
					list_specs.add(specs.getTemplate());
					}
					break;

				default :
					break loop214;
				}
			}

			pushFollow(FOLLOW_body_in_block9797);
			body141=body();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1036:5: -> block(declare_spec=$specsbody=$body.st)
			{
				retval.st = templateLib.getInstanceOf("block",new STAttrMap().put("declare_spec", list_specs).put("body", (body141!=null?((StringTemplate)body141.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "block"


	public static class sql_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sql_statement"
	// PLSQLPrinter.g:1043:1: sql_statement : ( execute_immediate -> { $execute_immediate.st }| data_manipulation_language_statements -> { $data_manipulation_language_statements.st }| cursor_manipulation_statements -> { $cursor_manipulation_statements.st }| transaction_control_statements -> { $transaction_control_statements.st });
	public final PLSQLPrinter.sql_statement_return sql_statement() throws RecognitionException {
		PLSQLPrinter.sql_statement_return retval = new PLSQLPrinter.sql_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope execute_immediate142 =null;
		TreeRuleReturnScope data_manipulation_language_statements143 =null;
		TreeRuleReturnScope cursor_manipulation_statements144 =null;
		TreeRuleReturnScope transaction_control_statements145 =null;

		try {
			// PLSQLPrinter.g:1044:5: ( execute_immediate -> { $execute_immediate.st }| data_manipulation_language_statements -> { $data_manipulation_language_statements.st }| cursor_manipulation_statements -> { $cursor_manipulation_statements.st }| transaction_control_statements -> { $transaction_control_statements.st })
			int alt215=4;
			switch ( input.LA(1) ) {
			case EXECUTE_VK:
				{
				alt215=1;
				}
				break;
			case PLSQL_RESERVED_LOCK:
			case SQL92_RESERVED_DELETE:
			case SQL92_RESERVED_INSERT:
			case SQL92_RESERVED_UPDATE:
			case MERGE_VK:
			case SELECT_STATEMENT:
				{
				alt215=2;
				}
				break;
			case SQL92_RESERVED_FETCH:
			case CLOSE_VK:
			case OPEN_VK:
				{
				alt215=3;
				}
				break;
			case COMMIT_VK:
			case ROLLBACK_VK:
			case SAVEPOINT_VK:
			case SET_CONSTRAINT:
			case SET_TRANSACTION:
				{
				alt215=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 215, 0, input);
				throw nvae;
			}
			switch (alt215) {
				case 1 :
					// PLSQLPrinter.g:1044:10: execute_immediate
					{
					pushFollow(FOLLOW_execute_immediate_in_sql_statement9842);
					execute_immediate142=execute_immediate();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1044:28: -> { $execute_immediate.st }
					{
						retval.st =  (execute_immediate142!=null?((StringTemplate)execute_immediate142.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1045:10: data_manipulation_language_statements
					{
					pushFollow(FOLLOW_data_manipulation_language_statements_in_sql_statement9857);
					data_manipulation_language_statements143=data_manipulation_language_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1045:48: -> { $data_manipulation_language_statements.st }
					{
						retval.st =  (data_manipulation_language_statements143!=null?((StringTemplate)data_manipulation_language_statements143.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1046:10: cursor_manipulation_statements
					{
					pushFollow(FOLLOW_cursor_manipulation_statements_in_sql_statement9872);
					cursor_manipulation_statements144=cursor_manipulation_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1046:41: -> { $cursor_manipulation_statements.st }
					{
						retval.st =  (cursor_manipulation_statements144!=null?((StringTemplate)cursor_manipulation_statements144.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1047:10: transaction_control_statements
					{
					pushFollow(FOLLOW_transaction_control_statements_in_sql_statement9887);
					transaction_control_statements145=transaction_control_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1047:41: -> { $transaction_control_statements.st }
					{
						retval.st =  (transaction_control_statements145!=null?((StringTemplate)transaction_control_statements145.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sql_statement"


	public static class execute_immediate_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "execute_immediate"
	// PLSQLPrinter.g:1050:1: execute_immediate : ^( EXECUTE_VK expression ( into_clause ( using_clause )? | using_clause ( dynamic_returning_clause )? | dynamic_returning_clause )? ) -> template( \"not implemented: execute_immediate\";
	public final PLSQLPrinter.execute_immediate_return execute_immediate() throws RecognitionException {
		PLSQLPrinter.execute_immediate_return retval = new PLSQLPrinter.execute_immediate_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1051:5: ( ^( EXECUTE_VK expression ( into_clause ( using_clause )? | using_clause ( dynamic_returning_clause )? | dynamic_returning_clause )? ) -> template( \"not implemented: execute_immediate\")
			// PLSQLPrinter.g:1051:10: ^( EXECUTE_VK expression ( into_clause ( using_clause )? | using_clause ( dynamic_returning_clause )? | dynamic_returning_clause )? )
			{
			match(input,EXECUTE_VK,FOLLOW_EXECUTE_VK_in_execute_immediate9912); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_execute_immediate9914);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1052:11: ( into_clause ( using_clause )? | using_clause ( dynamic_returning_clause )? | dynamic_returning_clause )?
			int alt218=4;
			switch ( input.LA(1) ) {
				case SQL92_RESERVED_INTO:
				case BULK_VK:
					{
					alt218=1;
					}
					break;
				case PLSQL_NON_RESERVED_USING:
					{
					alt218=2;
					}
					break;
				case DYNAMIC_RETURN:
					{
					alt218=3;
					}
					break;
			}
			switch (alt218) {
				case 1 :
					// PLSQLPrinter.g:1052:16: into_clause ( using_clause )?
					{
					pushFollow(FOLLOW_into_clause_in_execute_immediate9931);
					into_clause();
					state._fsp--;

					// PLSQLPrinter.g:1052:28: ( using_clause )?
					int alt216=2;
					int LA216_0 = input.LA(1);
					if ( (LA216_0==PLSQL_NON_RESERVED_USING) ) {
						alt216=1;
					}
					switch (alt216) {
						case 1 :
							// PLSQLPrinter.g:1052:28: using_clause
							{
							pushFollow(FOLLOW_using_clause_in_execute_immediate9933);
							using_clause();
							state._fsp--;

							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1053:16: using_clause ( dynamic_returning_clause )?
					{
					pushFollow(FOLLOW_using_clause_in_execute_immediate9951);
					using_clause();
					state._fsp--;

					// PLSQLPrinter.g:1053:29: ( dynamic_returning_clause )?
					int alt217=2;
					int LA217_0 = input.LA(1);
					if ( (LA217_0==DYNAMIC_RETURN) ) {
						alt217=1;
					}
					switch (alt217) {
						case 1 :
							// PLSQLPrinter.g:1053:29: dynamic_returning_clause
							{
							pushFollow(FOLLOW_dynamic_returning_clause_in_execute_immediate9953);
							dynamic_returning_clause();
							state._fsp--;

							}
							break;

					}

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1054:16: dynamic_returning_clause
					{
					pushFollow(FOLLOW_dynamic_returning_clause_in_execute_immediate9971);
					dynamic_returning_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1057:5: -> template( \"not implemented: execute_immediate\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: execute_immediate");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "execute_immediate"


	public static class dynamic_returning_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dynamic_returning_clause"
	// PLSQLPrinter.g:1061:1: dynamic_returning_clause : ^( DYNAMIC_RETURN into_clause ) -> template( \"not implemented: dynamic_returning_clause\";
	public final PLSQLPrinter.dynamic_returning_clause_return dynamic_returning_clause() throws RecognitionException {
		PLSQLPrinter.dynamic_returning_clause_return retval = new PLSQLPrinter.dynamic_returning_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1062:5: ( ^( DYNAMIC_RETURN into_clause ) -> template( \"not implemented: dynamic_returning_clause\")
			// PLSQLPrinter.g:1062:10: ^( DYNAMIC_RETURN into_clause )
			{
			match(input,DYNAMIC_RETURN,FOLLOW_DYNAMIC_RETURN_in_dynamic_returning_clause10030); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_into_clause_in_dynamic_returning_clause10032);
			into_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1063:5: -> template( \"not implemented: dynamic_returning_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dynamic_returning_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dynamic_returning_clause"


	public static class data_manipulation_language_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "data_manipulation_language_statements"
	// PLSQLPrinter.g:1070:1: data_manipulation_language_statements : ( merge_statement -> { $merge_statement.st }| lock_table_statement -> { $lock_table_statement.st }| select_statement -> { $select_statement.st }| update_statement -> { $update_statement.st }| delete_statement -> { $delete_statement.st }| insert_statement -> { $insert_statement.st });
	public final PLSQLPrinter.data_manipulation_language_statements_return data_manipulation_language_statements() throws RecognitionException {
		PLSQLPrinter.data_manipulation_language_statements_return retval = new PLSQLPrinter.data_manipulation_language_statements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope merge_statement146 =null;
		TreeRuleReturnScope lock_table_statement147 =null;
		TreeRuleReturnScope select_statement148 =null;
		TreeRuleReturnScope update_statement149 =null;
		TreeRuleReturnScope delete_statement150 =null;
		TreeRuleReturnScope insert_statement151 =null;

		try {
			// PLSQLPrinter.g:1071:5: ( merge_statement -> { $merge_statement.st }| lock_table_statement -> { $lock_table_statement.st }| select_statement -> { $select_statement.st }| update_statement -> { $update_statement.st }| delete_statement -> { $delete_statement.st }| insert_statement -> { $insert_statement.st })
			int alt219=6;
			switch ( input.LA(1) ) {
			case MERGE_VK:
				{
				alt219=1;
				}
				break;
			case PLSQL_RESERVED_LOCK:
				{
				alt219=2;
				}
				break;
			case SELECT_STATEMENT:
				{
				alt219=3;
				}
				break;
			case SQL92_RESERVED_UPDATE:
				{
				alt219=4;
				}
				break;
			case SQL92_RESERVED_DELETE:
				{
				alt219=5;
				}
				break;
			case SQL92_RESERVED_INSERT:
				{
				alt219=6;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 219, 0, input);
				throw nvae;
			}
			switch (alt219) {
				case 1 :
					// PLSQLPrinter.g:1071:10: merge_statement
					{
					pushFollow(FOLLOW_merge_statement_in_data_manipulation_language_statements10071);
					merge_statement146=merge_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1071:26: -> { $merge_statement.st }
					{
						retval.st =  (merge_statement146!=null?((StringTemplate)merge_statement146.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1072:10: lock_table_statement
					{
					pushFollow(FOLLOW_lock_table_statement_in_data_manipulation_language_statements10086);
					lock_table_statement147=lock_table_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1072:31: -> { $lock_table_statement.st }
					{
						retval.st =  (lock_table_statement147!=null?((StringTemplate)lock_table_statement147.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1073:10: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_data_manipulation_language_statements10101);
					select_statement148=select_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1073:27: -> { $select_statement.st }
					{
						retval.st =  (select_statement148!=null?((StringTemplate)select_statement148.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1074:10: update_statement
					{
					pushFollow(FOLLOW_update_statement_in_data_manipulation_language_statements10116);
					update_statement149=update_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1074:27: -> { $update_statement.st }
					{
						retval.st =  (update_statement149!=null?((StringTemplate)update_statement149.getTemplate()):null) ;
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1075:10: delete_statement
					{
					pushFollow(FOLLOW_delete_statement_in_data_manipulation_language_statements10131);
					delete_statement150=delete_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1075:27: -> { $delete_statement.st }
					{
						retval.st =  (delete_statement150!=null?((StringTemplate)delete_statement150.getTemplate()):null) ;
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:1076:10: insert_statement
					{
					pushFollow(FOLLOW_insert_statement_in_data_manipulation_language_statements10146);
					insert_statement151=insert_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1076:27: -> { $insert_statement.st }
					{
						retval.st =  (insert_statement151!=null?((StringTemplate)insert_statement151.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "data_manipulation_language_statements"


	public static class select_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "select_statement"
	// PLSQLPrinter.g:1079:1: select_statement : ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( order_by_clause )? ( for_update_clause )? ) -> select_statement(query_partitioning_clause=$subquery_factoring_clause.stsubquery=$subquery.storder_by_clause=$order_by_clause.stfor_update_clause=$for_update_clause.st);
	public final PLSQLPrinter.select_statement_return select_statement() throws RecognitionException {
		PLSQLPrinter.select_statement_return retval = new PLSQLPrinter.select_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope subquery_factoring_clause152 =null;
		TreeRuleReturnScope subquery153 =null;
		TreeRuleReturnScope order_by_clause154 =null;
		TreeRuleReturnScope for_update_clause155 =null;

		try {
			// PLSQLPrinter.g:1080:5: ( ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( order_by_clause )? ( for_update_clause )? ) -> select_statement(query_partitioning_clause=$subquery_factoring_clause.stsubquery=$subquery.storder_by_clause=$order_by_clause.stfor_update_clause=$for_update_clause.st))
			// PLSQLPrinter.g:1080:10: ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( order_by_clause )? ( for_update_clause )? )
			{
			match(input,SELECT_STATEMENT,FOLLOW_SELECT_STATEMENT_in_select_statement10171); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1080:29: ( subquery_factoring_clause )?
			int alt220=2;
			int LA220_0 = input.LA(1);
			if ( (LA220_0==SQL92_RESERVED_WITH) ) {
				alt220=1;
			}
			switch (alt220) {
				case 1 :
					// PLSQLPrinter.g:1080:29: subquery_factoring_clause
					{
					pushFollow(FOLLOW_subquery_factoring_clause_in_select_statement10173);
					subquery_factoring_clause152=subquery_factoring_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_subquery_in_select_statement10176);
			subquery153=subquery();
			state._fsp--;

			// PLSQLPrinter.g:1080:65: ( order_by_clause )?
			int alt221=2;
			int LA221_0 = input.LA(1);
			if ( (LA221_0==SQL92_RESERVED_ORDER) ) {
				alt221=1;
			}
			switch (alt221) {
				case 1 :
					// PLSQLPrinter.g:1080:65: order_by_clause
					{
					pushFollow(FOLLOW_order_by_clause_in_select_statement10178);
					order_by_clause154=order_by_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1080:82: ( for_update_clause )?
			int alt222=2;
			int LA222_0 = input.LA(1);
			if ( (LA222_0==SQL92_RESERVED_FOR) ) {
				alt222=1;
			}
			switch (alt222) {
				case 1 :
					// PLSQLPrinter.g:1080:82: for_update_clause
					{
					pushFollow(FOLLOW_for_update_clause_in_select_statement10181);
					for_update_clause155=for_update_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1081:5: -> select_statement(query_partitioning_clause=$subquery_factoring_clause.stsubquery=$subquery.storder_by_clause=$order_by_clause.stfor_update_clause=$for_update_clause.st)
			{
				retval.st = templateLib.getInstanceOf("select_statement",new STAttrMap().put("query_partitioning_clause", (subquery_factoring_clause152!=null?((StringTemplate)subquery_factoring_clause152.getTemplate()):null)).put("subquery", (subquery153!=null?((StringTemplate)subquery153.getTemplate()):null)).put("order_by_clause", (order_by_clause154!=null?((StringTemplate)order_by_clause154.getTemplate()):null)).put("for_update_clause", (for_update_clause155!=null?((StringTemplate)for_update_clause155.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "select_statement"


	public static class subquery_factoring_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_factoring_clause"
	// PLSQLPrinter.g:1089:1: subquery_factoring_clause : ^( SQL92_RESERVED_WITH ( factoring_element )+ ) -> template( \"not implemented: subquery_factoring_clause\";
	public final PLSQLPrinter.subquery_factoring_clause_return subquery_factoring_clause() throws RecognitionException {
		PLSQLPrinter.subquery_factoring_clause_return retval = new PLSQLPrinter.subquery_factoring_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1090:5: ( ^( SQL92_RESERVED_WITH ( factoring_element )+ ) -> template( \"not implemented: subquery_factoring_clause\")
			// PLSQLPrinter.g:1090:10: ^( SQL92_RESERVED_WITH ( factoring_element )+ )
			{
			match(input,SQL92_RESERVED_WITH,FOLLOW_SQL92_RESERVED_WITH_in_subquery_factoring_clause10284); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1090:32: ( factoring_element )+
			int cnt223=0;
			loop223:
			while (true) {
				int alt223=2;
				int LA223_0 = input.LA(1);
				if ( (LA223_0==FACTORING) ) {
					alt223=1;
				}

				switch (alt223) {
				case 1 :
					// PLSQLPrinter.g:1090:32: factoring_element
					{
					pushFollow(FOLLOW_factoring_element_in_subquery_factoring_clause10286);
					factoring_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt223 >= 1 ) break loop223;
					EarlyExitException eee = new EarlyExitException(223, input);
					throw eee;
				}
				cnt223++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1091:5: -> template( \"not implemented: subquery_factoring_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: subquery_factoring_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_factoring_clause"


	public static class factoring_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "factoring_element"
	// PLSQLPrinter.g:1094:1: factoring_element : ^( FACTORING query_name subquery ) -> template( \"not implemented: factoring_element\";
	public final PLSQLPrinter.factoring_element_return factoring_element() throws RecognitionException {
		PLSQLPrinter.factoring_element_return retval = new PLSQLPrinter.factoring_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1095:5: ( ^( FACTORING query_name subquery ) -> template( \"not implemented: factoring_element\")
			// PLSQLPrinter.g:1095:10: ^( FACTORING query_name subquery )
			{
			match(input,FACTORING,FOLLOW_FACTORING_in_factoring_element10323); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_query_name_in_factoring_element10325);
			query_name();
			state._fsp--;

			pushFollow(FOLLOW_subquery_in_factoring_element10327);
			subquery();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1096:5: -> template( \"not implemented: factoring_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: factoring_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factoring_element"


	public static class subquery_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery"
	// PLSQLPrinter.g:1099:1: subquery : ^( SUBQUERY subquery_basic_elements (parts+= subquery_operation_part )* ) -> subquery(subquery_basic_elements=$subquery_basic_elements.stsubquery_operation_parts=$parts);
	public final PLSQLPrinter.subquery_return subquery() throws RecognitionException {
		PLSQLPrinter.subquery_return retval = new PLSQLPrinter.subquery_return();
		retval.start = input.LT(1);

		List<Object> list_parts=null;
		TreeRuleReturnScope subquery_basic_elements156 =null;
		RuleReturnScope parts = null;
		try {
			// PLSQLPrinter.g:1100:5: ( ^( SUBQUERY subquery_basic_elements (parts+= subquery_operation_part )* ) -> subquery(subquery_basic_elements=$subquery_basic_elements.stsubquery_operation_parts=$parts))
			// PLSQLPrinter.g:1100:10: ^( SUBQUERY subquery_basic_elements (parts+= subquery_operation_part )* )
			{
			match(input,SUBQUERY,FOLLOW_SUBQUERY_in_subquery10363); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_subquery_basic_elements_in_subquery10365);
			subquery_basic_elements156=subquery_basic_elements();
			state._fsp--;

			// PLSQLPrinter.g:1100:50: (parts+= subquery_operation_part )*
			loop224:
			while (true) {
				int alt224=2;
				int LA224_0 = input.LA(1);
				if ( (LA224_0==PLSQL_RESERVED_MINUS||LA224_0==SQL92_RESERVED_INTERSECT||LA224_0==SQL92_RESERVED_UNION) ) {
					alt224=1;
				}

				switch (alt224) {
				case 1 :
					// PLSQLPrinter.g:1100:50: parts+= subquery_operation_part
					{
					pushFollow(FOLLOW_subquery_operation_part_in_subquery10369);
					parts=subquery_operation_part();
					state._fsp--;

					if (list_parts==null) list_parts=new ArrayList<Object>();
					list_parts.add(parts.getTemplate());
					}
					break;

				default :
					break loop224;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1101:5: -> subquery(subquery_basic_elements=$subquery_basic_elements.stsubquery_operation_parts=$parts)
			{
				retval.st = templateLib.getInstanceOf("subquery",new STAttrMap().put("subquery_basic_elements", (subquery_basic_elements156!=null?((StringTemplate)subquery_basic_elements156.getTemplate()):null)).put("subquery_operation_parts", list_parts));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery"


	public static class subquery_operation_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_operation_part"
	// PLSQLPrinter.g:1104:1: subquery_operation_part : ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements ) -> subquery_operation_part(operator=opis_all=$SQL92_RESERVED_ALL != nullsubquery_basic_elements=$subquery_basic_elements.st);
	public final PLSQLPrinter.subquery_operation_part_return subquery_operation_part() throws RecognitionException {
		PLSQLPrinter.subquery_operation_part_return retval = new PLSQLPrinter.subquery_operation_part_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_ALL157=null;
		TreeRuleReturnScope subquery_basic_elements158 =null;

		 String op = null; 
		try {
			// PLSQLPrinter.g:1106:5: ( ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements ) -> subquery_operation_part(operator=opis_all=$SQL92_RESERVED_ALL != nullsubquery_basic_elements=$subquery_basic_elements.st))
			// PLSQLPrinter.g:1106:10: ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements )
			{
			// PLSQLPrinter.g:1107:13: ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS )
			int alt225=3;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_UNION:
				{
				alt225=1;
				}
				break;
			case SQL92_RESERVED_INTERSECT:
				{
				alt225=2;
				}
				break;
			case PLSQL_RESERVED_MINUS:
				{
				alt225=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 225, 0, input);
				throw nvae;
			}
			switch (alt225) {
				case 1 :
					// PLSQLPrinter.g:1108:15: SQL92_RESERVED_UNION
					{
					match(input,SQL92_RESERVED_UNION,FOLLOW_SQL92_RESERVED_UNION_in_subquery_operation_part10446); 
					 op = "union"; 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1109:16: SQL92_RESERVED_INTERSECT
					{
					match(input,SQL92_RESERVED_INTERSECT,FOLLOW_SQL92_RESERVED_INTERSECT_in_subquery_operation_part10465); 
					 op = "intersect"; 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:1110:16: PLSQL_RESERVED_MINUS
					{
					match(input,PLSQL_RESERVED_MINUS,FOLLOW_PLSQL_RESERVED_MINUS_in_subquery_operation_part10484); 
					 op = "minus"; 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1112:13: ( SQL92_RESERVED_ALL )?
			int alt226=2;
			int LA226_0 = input.LA(1);
			if ( (LA226_0==SQL92_RESERVED_ALL) ) {
				alt226=1;
			}
			switch (alt226) {
				case 1 :
					// PLSQLPrinter.g:1112:13: SQL92_RESERVED_ALL
					{
					SQL92_RESERVED_ALL157=(CommonTree)match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_subquery_operation_part10514); 
					}
					break;

			}

			pushFollow(FOLLOW_subquery_basic_elements_in_subquery_operation_part10517);
			subquery_basic_elements158=subquery_basic_elements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1114:5: -> subquery_operation_part(operator=opis_all=$SQL92_RESERVED_ALL != nullsubquery_basic_elements=$subquery_basic_elements.st)
			{
				retval.st = templateLib.getInstanceOf("subquery_operation_part",new STAttrMap().put("operator", op).put("is_all", SQL92_RESERVED_ALL157 != null).put("subquery_basic_elements", (subquery_basic_elements158!=null?((StringTemplate)subquery_basic_elements158.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_operation_part"


	public static class subquery_basic_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_basic_elements"
	// PLSQLPrinter.g:1117:1: subquery_basic_elements : ( query_block -> { $query_block.st }| subquery -> in_parens(val=$subquery.st));
	public final PLSQLPrinter.subquery_basic_elements_return subquery_basic_elements() throws RecognitionException {
		PLSQLPrinter.subquery_basic_elements_return retval = new PLSQLPrinter.subquery_basic_elements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope query_block159 =null;
		TreeRuleReturnScope subquery160 =null;

		try {
			// PLSQLPrinter.g:1118:5: ( query_block -> { $query_block.st }| subquery -> in_parens(val=$subquery.st))
			int alt227=2;
			int LA227_0 = input.LA(1);
			if ( (LA227_0==SQL92_RESERVED_SELECT) ) {
				alt227=1;
			}
			else if ( (LA227_0==SUBQUERY) ) {
				alt227=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 227, 0, input);
				throw nvae;
			}

			switch (alt227) {
				case 1 :
					// PLSQLPrinter.g:1118:10: query_block
					{
					pushFollow(FOLLOW_query_block_in_subquery_basic_elements10574);
					query_block159=query_block();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1118:22: -> { $query_block.st }
					{
						retval.st =  (query_block159!=null?((StringTemplate)query_block159.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1119:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_subquery_basic_elements10589);
					subquery160=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1120:5: -> in_parens(val=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (subquery160!=null?((StringTemplate)subquery160.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_basic_elements"


	public static class query_block_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_block"
	// PLSQLPrinter.g:1123:1: query_block : ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) -> query_block(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullselected_elements=$selectedinto_clause=$into_clause.stfrom_clause=$from_clause.stwhere_clause=$where_clause.sthierarchical_query_clause=$hierarchical_query_clause.stgroup_by_clause=$group_by_clause.stmodel_clause=$model_clause.st);
	public final PLSQLPrinter.query_block_return query_block() throws RecognitionException {
		PLSQLPrinter.query_block_return retval = new PLSQLPrinter.query_block_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_DISTINCT161=null;
		CommonTree SQL92_RESERVED_UNIQUE162=null;
		CommonTree SQL92_RESERVED_ALL163=null;
		CommonTree ASTERISK164=null;
		List<Object> list_selected=null;
		TreeRuleReturnScope into_clause165 =null;
		TreeRuleReturnScope from_clause166 =null;
		TreeRuleReturnScope where_clause167 =null;
		TreeRuleReturnScope hierarchical_query_clause168 =null;
		TreeRuleReturnScope group_by_clause169 =null;
		TreeRuleReturnScope model_clause170 =null;
		RuleReturnScope selected = null;
		try {
			// PLSQLPrinter.g:1124:5: ( ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) -> query_block(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullselected_elements=$selectedinto_clause=$into_clause.stfrom_clause=$from_clause.stwhere_clause=$where_clause.sthierarchical_query_clause=$hierarchical_query_clause.stgroup_by_clause=$group_by_clause.stmodel_clause=$model_clause.st))
			// PLSQLPrinter.g:1124:10: ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
			{
			match(input,SQL92_RESERVED_SELECT,FOLLOW_SQL92_RESERVED_SELECT_in_query_block10625); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_from_clause_in_query_block10640);
			from_clause166=from_clause();
			state._fsp--;

			// PLSQLPrinter.g:1126:13: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )?
			int alt228=4;
			switch ( input.LA(1) ) {
				case SQL92_RESERVED_DISTINCT:
					{
					alt228=1;
					}
					break;
				case SQL92_RESERVED_UNIQUE:
					{
					alt228=2;
					}
					break;
				case SQL92_RESERVED_ALL:
					{
					alt228=3;
					}
					break;
			}
			switch (alt228) {
				case 1 :
					// PLSQLPrinter.g:1126:14: SQL92_RESERVED_DISTINCT
					{
					SQL92_RESERVED_DISTINCT161=(CommonTree)match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_query_block10656); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1126:38: SQL92_RESERVED_UNIQUE
					{
					SQL92_RESERVED_UNIQUE162=(CommonTree)match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_query_block10658); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:1126:60: SQL92_RESERVED_ALL
					{
					SQL92_RESERVED_ALL163=(CommonTree)match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_query_block10660); 
					}
					break;

			}

			// PLSQLPrinter.g:1127:13: ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) )
			int alt230=2;
			int LA230_0 = input.LA(1);
			if ( (LA230_0==ASTERISK) ) {
				alt230=1;
			}
			else if ( (LA230_0==SELECT_LIST) ) {
				alt230=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 230, 0, input);
				throw nvae;
			}

			switch (alt230) {
				case 1 :
					// PLSQLPrinter.g:1127:18: ASTERISK
					{
					ASTERISK164=(CommonTree)match(input,ASTERISK,FOLLOW_ASTERISK_in_query_block10682); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1128:18: ^( SELECT_LIST (selected+= selected_element )+ )
					{
					match(input,SELECT_LIST,FOLLOW_SELECT_LIST_in_query_block10702); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1128:40: (selected+= selected_element )+
					int cnt229=0;
					loop229:
					while (true) {
						int alt229=2;
						int LA229_0 = input.LA(1);
						if ( (LA229_0==SELECT_ITEM) ) {
							alt229=1;
						}

						switch (alt229) {
						case 1 :
							// PLSQLPrinter.g:1128:40: selected+= selected_element
							{
							pushFollow(FOLLOW_selected_element_in_query_block10706);
							selected=selected_element();
							state._fsp--;

							if (list_selected==null) list_selected=new ArrayList<Object>();
							list_selected.add(selected.getTemplate());
							}
							break;

						default :
							if ( cnt229 >= 1 ) break loop229;
							EarlyExitException eee = new EarlyExitException(229, input);
							throw eee;
						}
						cnt229++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}

			// PLSQLPrinter.g:1130:13: ( into_clause )?
			int alt231=2;
			int LA231_0 = input.LA(1);
			if ( (LA231_0==SQL92_RESERVED_INTO||LA231_0==BULK_VK) ) {
				alt231=1;
			}
			switch (alt231) {
				case 1 :
					// PLSQLPrinter.g:1130:13: into_clause
					{
					pushFollow(FOLLOW_into_clause_in_query_block10736);
					into_clause165=into_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1130:26: ( where_clause )?
			int alt232=2;
			int LA232_0 = input.LA(1);
			if ( (LA232_0==SQL92_RESERVED_WHERE) ) {
				alt232=1;
			}
			switch (alt232) {
				case 1 :
					// PLSQLPrinter.g:1130:26: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_query_block10739);
					where_clause167=where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1130:40: ( hierarchical_query_clause )?
			int alt233=2;
			int LA233_0 = input.LA(1);
			if ( (LA233_0==HIERARCHICAL) ) {
				alt233=1;
			}
			switch (alt233) {
				case 1 :
					// PLSQLPrinter.g:1130:40: hierarchical_query_clause
					{
					pushFollow(FOLLOW_hierarchical_query_clause_in_query_block10742);
					hierarchical_query_clause168=hierarchical_query_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1131:13: ( group_by_clause )?
			int alt234=2;
			int LA234_0 = input.LA(1);
			if ( (LA234_0==SQL92_RESERVED_GROUP) ) {
				alt234=1;
			}
			switch (alt234) {
				case 1 :
					// PLSQLPrinter.g:1131:13: group_by_clause
					{
					pushFollow(FOLLOW_group_by_clause_in_query_block10758);
					group_by_clause169=group_by_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1131:30: ( model_clause )?
			int alt235=2;
			int LA235_0 = input.LA(1);
			if ( (LA235_0==PLSQL_NON_RESERVED_MODEL) ) {
				alt235=1;
			}
			switch (alt235) {
				case 1 :
					// PLSQLPrinter.g:1131:30: model_clause
					{
					pushFollow(FOLLOW_model_clause_in_query_block10761);
					model_clause170=model_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1133:5: -> query_block(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullselected_elements=$selectedinto_clause=$into_clause.stfrom_clause=$from_clause.stwhere_clause=$where_clause.sthierarchical_query_clause=$hierarchical_query_clause.stgroup_by_clause=$group_by_clause.stmodel_clause=$model_clause.st)
			{
				retval.st = templateLib.getInstanceOf("query_block",new STAttrMap().put("is_distinct", SQL92_RESERVED_DISTINCT161 != null).put("is_unique", SQL92_RESERVED_UNIQUE162 != null).put("is_all", SQL92_RESERVED_ALL163 != null).put("is_asterisk", ASTERISK164 != null).put("selected_elements", list_selected).put("into_clause", (into_clause165!=null?((StringTemplate)into_clause165.getTemplate()):null)).put("from_clause", (from_clause166!=null?((StringTemplate)from_clause166.getTemplate()):null)).put("where_clause", (where_clause167!=null?((StringTemplate)where_clause167.getTemplate()):null)).put("hierarchical_query_clause", (hierarchical_query_clause168!=null?((StringTemplate)hierarchical_query_clause168.getTemplate()):null)).put("group_by_clause", (group_by_clause169!=null?((StringTemplate)group_by_clause169.getTemplate()):null)).put("model_clause", (model_clause170!=null?((StringTemplate)model_clause170.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_block"


	public static class selected_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "selected_element"
	// PLSQLPrinter.g:1148:1: selected_element : ^( SELECT_ITEM expression ( alias )? ) -> selected_element(expression=$expression.stalias=$alias.st);
	public final PLSQLPrinter.selected_element_return selected_element() throws RecognitionException {
		PLSQLPrinter.selected_element_return retval = new PLSQLPrinter.selected_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression171 =null;
		TreeRuleReturnScope alias172 =null;

		try {
			// PLSQLPrinter.g:1149:5: ( ^( SELECT_ITEM expression ( alias )? ) -> selected_element(expression=$expression.stalias=$alias.st))
			// PLSQLPrinter.g:1149:10: ^( SELECT_ITEM expression ( alias )? )
			{
			match(input,SELECT_ITEM,FOLLOW_SELECT_ITEM_in_selected_element10990); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_selected_element10992);
			expression171=expression();
			state._fsp--;

			// PLSQLPrinter.g:1149:35: ( alias )?
			int alt236=2;
			int LA236_0 = input.LA(1);
			if ( (LA236_0==ALIAS) ) {
				alt236=1;
			}
			switch (alt236) {
				case 1 :
					// PLSQLPrinter.g:1149:35: alias
					{
					pushFollow(FOLLOW_alias_in_selected_element10994);
					alias172=alias();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1150:5: -> selected_element(expression=$expression.stalias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("selected_element",new STAttrMap().put("expression", (expression171!=null?((StringTemplate)expression171.getTemplate()):null)).put("alias", (alias172!=null?((StringTemplate)alias172.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selected_element"


	public static class from_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "from_clause"
	// PLSQLPrinter.g:1153:1: from_clause : ^( SQL92_RESERVED_FROM (refs+= table_ref )+ ) -> from_clause(table_refs=$refs);
	public final PLSQLPrinter.from_clause_return from_clause() throws RecognitionException {
		PLSQLPrinter.from_clause_return retval = new PLSQLPrinter.from_clause_return();
		retval.start = input.LT(1);

		List<Object> list_refs=null;
		RuleReturnScope refs = null;
		try {
			// PLSQLPrinter.g:1154:5: ( ^( SQL92_RESERVED_FROM (refs+= table_ref )+ ) -> from_clause(table_refs=$refs))
			// PLSQLPrinter.g:1154:10: ^( SQL92_RESERVED_FROM (refs+= table_ref )+ )
			{
			match(input,SQL92_RESERVED_FROM,FOLLOW_SQL92_RESERVED_FROM_in_from_clause11037); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1154:36: (refs+= table_ref )+
			int cnt237=0;
			loop237:
			while (true) {
				int alt237=2;
				int LA237_0 = input.LA(1);
				if ( (LA237_0==TABLE_REF) ) {
					alt237=1;
				}

				switch (alt237) {
				case 1 :
					// PLSQLPrinter.g:1154:36: refs+= table_ref
					{
					pushFollow(FOLLOW_table_ref_in_from_clause11041);
					refs=table_ref();
					state._fsp--;

					if (list_refs==null) list_refs=new ArrayList<Object>();
					list_refs.add(refs.getTemplate());
					}
					break;

				default :
					if ( cnt237 >= 1 ) break loop237;
					EarlyExitException eee = new EarlyExitException(237, input);
					throw eee;
				}
				cnt237++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1155:5: -> from_clause(table_refs=$refs)
			{
				retval.st = templateLib.getInstanceOf("from_clause",new STAttrMap().put("table_refs", list_refs));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "from_clause"


	public static class table_ref_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_ref"
	// PLSQLPrinter.g:1158:1: table_ref : ^( TABLE_REF table_ref_aux (joins+= join_clause )* ) -> table_ref(table_ref_aux=$table_ref_aux.stjoin_clauses=$joins);
	public final PLSQLPrinter.table_ref_return table_ref() throws RecognitionException {
		PLSQLPrinter.table_ref_return retval = new PLSQLPrinter.table_ref_return();
		retval.start = input.LT(1);

		List<Object> list_joins=null;
		TreeRuleReturnScope table_ref_aux173 =null;
		RuleReturnScope joins = null;
		try {
			// PLSQLPrinter.g:1159:5: ( ^( TABLE_REF table_ref_aux (joins+= join_clause )* ) -> table_ref(table_ref_aux=$table_ref_aux.stjoin_clauses=$joins))
			// PLSQLPrinter.g:1159:10: ^( TABLE_REF table_ref_aux (joins+= join_clause )* )
			{
			match(input,TABLE_REF,FOLLOW_TABLE_REF_in_table_ref11079); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_table_ref_aux_in_table_ref11081);
			table_ref_aux173=table_ref_aux();
			state._fsp--;

			// PLSQLPrinter.g:1159:41: (joins+= join_clause )*
			loop238:
			while (true) {
				int alt238=2;
				int LA238_0 = input.LA(1);
				if ( (LA238_0==JOIN_DEF) ) {
					alt238=1;
				}

				switch (alt238) {
				case 1 :
					// PLSQLPrinter.g:1159:41: joins+= join_clause
					{
					pushFollow(FOLLOW_join_clause_in_table_ref11085);
					joins=join_clause();
					state._fsp--;

					if (list_joins==null) list_joins=new ArrayList<Object>();
					list_joins.add(joins.getTemplate());
					}
					break;

				default :
					break loop238;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1160:5: -> table_ref(table_ref_aux=$table_ref_aux.stjoin_clauses=$joins)
			{
				retval.st = templateLib.getInstanceOf("table_ref",new STAttrMap().put("table_ref_aux", (table_ref_aux173!=null?((StringTemplate)table_ref_aux173.getTemplate()):null)).put("join_clauses", list_joins));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_ref"


	public static class table_ref_aux_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_ref_aux"
	// PLSQLPrinter.g:1163:1: table_ref_aux : ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK | pivot_clause | unpivot_clause )? ( flashback_query_clause )* ) -> table_ref_aux(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.stpivot_clause=$pivot_clause.stunpivot_clause=$unpivot_clause.stflashback_query_clause=$flashback_query_clause.stalias=$alias.st);
	public final PLSQLPrinter.table_ref_aux_return table_ref_aux() throws RecognitionException {
		PLSQLPrinter.table_ref_aux_return retval = new PLSQLPrinter.table_ref_aux_return();
		retval.start = input.LT(1);

		CommonTree ONLY_VK174=null;
		TreeRuleReturnScope dml_table_expression_clause175 =null;
		TreeRuleReturnScope pivot_clause176 =null;
		TreeRuleReturnScope unpivot_clause177 =null;
		TreeRuleReturnScope flashback_query_clause178 =null;
		TreeRuleReturnScope alias179 =null;

		try {
			// PLSQLPrinter.g:1164:5: ( ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK | pivot_clause | unpivot_clause )? ( flashback_query_clause )* ) -> table_ref_aux(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.stpivot_clause=$pivot_clause.stunpivot_clause=$unpivot_clause.stflashback_query_clause=$flashback_query_clause.stalias=$alias.st))
			// PLSQLPrinter.g:1164:10: ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK | pivot_clause | unpivot_clause )? ( flashback_query_clause )* )
			{
			match(input,TABLE_REF_ELEMENT,FOLLOW_TABLE_REF_ELEMENT_in_table_ref_aux11128); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1164:30: ( alias )?
			int alt239=2;
			int LA239_0 = input.LA(1);
			if ( (LA239_0==ALIAS) ) {
				alt239=1;
			}
			switch (alt239) {
				case 1 :
					// PLSQLPrinter.g:1164:30: alias
					{
					pushFollow(FOLLOW_alias_in_table_ref_aux11130);
					alias179=alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_table_expression_clause_in_table_ref_aux11133);
			dml_table_expression_clause175=dml_table_expression_clause();
			state._fsp--;

			// PLSQLPrinter.g:1164:65: ( ONLY_VK | pivot_clause | unpivot_clause )?
			int alt240=4;
			switch ( input.LA(1) ) {
				case ONLY_VK:
					{
					alt240=1;
					}
					break;
				case PIVOT_VK:
					{
					alt240=2;
					}
					break;
				case UNPIVOT_VK:
					{
					alt240=3;
					}
					break;
			}
			switch (alt240) {
				case 1 :
					// PLSQLPrinter.g:1164:66: ONLY_VK
					{
					ONLY_VK174=(CommonTree)match(input,ONLY_VK,FOLLOW_ONLY_VK_in_table_ref_aux11136); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1164:74: pivot_clause
					{
					pushFollow(FOLLOW_pivot_clause_in_table_ref_aux11138);
					pivot_clause176=pivot_clause();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1164:87: unpivot_clause
					{
					pushFollow(FOLLOW_unpivot_clause_in_table_ref_aux11140);
					unpivot_clause177=unpivot_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1164:104: ( flashback_query_clause )*
			loop241:
			while (true) {
				int alt241=2;
				int LA241_0 = input.LA(1);
				if ( (LA241_0==SQL92_RESERVED_AS||LA241_0==VERSIONS_VK) ) {
					alt241=1;
				}

				switch (alt241) {
				case 1 :
					// PLSQLPrinter.g:1164:104: flashback_query_clause
					{
					pushFollow(FOLLOW_flashback_query_clause_in_table_ref_aux11144);
					flashback_query_clause178=flashback_query_clause();
					state._fsp--;

					}
					break;

				default :
					break loop241;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1165:5: -> table_ref_aux(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.stpivot_clause=$pivot_clause.stunpivot_clause=$unpivot_clause.stflashback_query_clause=$flashback_query_clause.stalias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("table_ref_aux",new STAttrMap().put("is_only", ONLY_VK174 != null).put("dml_table_expression_clause", (dml_table_expression_clause175!=null?((StringTemplate)dml_table_expression_clause175.getTemplate()):null)).put("pivot_clause", (pivot_clause176!=null?((StringTemplate)pivot_clause176.getTemplate()):null)).put("unpivot_clause", (unpivot_clause177!=null?((StringTemplate)unpivot_clause177.getTemplate()):null)).put("flashback_query_clause", (flashback_query_clause178!=null?((StringTemplate)flashback_query_clause178.getTemplate()):null)).put("alias", (alias179!=null?((StringTemplate)alias179.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_ref_aux"


	public static class join_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "join_clause"
	// PLSQLPrinter.g:1171:1: join_clause : ^( JOIN_DEF (qpc1= query_partition_clause )? ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )? ) -> join_clause(qpc1=$qpc1.stis_cross=$CROSS_VK != nullis_natural=$NATURAL_VK != nullis_inner=$INNER_VK != nullis_left=$LEFT_VK != nullis_right=$RIGHT_VK != nullis_full=$FULL_VK != nulltable_ref_aux=$table_ref_aux.stqpc2=$qpc2.stjoin_on_part=$join_on_part.stjoin_using_part=$join_using_part.st);
	public final PLSQLPrinter.join_clause_return join_clause() throws RecognitionException {
		PLSQLPrinter.join_clause_return retval = new PLSQLPrinter.join_clause_return();
		retval.start = input.LT(1);

		CommonTree CROSS_VK180=null;
		CommonTree NATURAL_VK181=null;
		CommonTree INNER_VK182=null;
		CommonTree LEFT_VK183=null;
		CommonTree RIGHT_VK184=null;
		CommonTree FULL_VK185=null;
		TreeRuleReturnScope qpc1 =null;
		TreeRuleReturnScope qpc2 =null;
		TreeRuleReturnScope table_ref_aux186 =null;
		TreeRuleReturnScope join_on_part187 =null;
		TreeRuleReturnScope join_using_part188 =null;

		try {
			// PLSQLPrinter.g:1172:5: ( ^( JOIN_DEF (qpc1= query_partition_clause )? ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )? ) -> join_clause(qpc1=$qpc1.stis_cross=$CROSS_VK != nullis_natural=$NATURAL_VK != nullis_inner=$INNER_VK != nullis_left=$LEFT_VK != nullis_right=$RIGHT_VK != nullis_full=$FULL_VK != nulltable_ref_aux=$table_ref_aux.stqpc2=$qpc2.stjoin_on_part=$join_on_part.stjoin_using_part=$join_using_part.st))
			// PLSQLPrinter.g:1172:10: ^( JOIN_DEF (qpc1= query_partition_clause )? ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )? )
			{
			match(input,JOIN_DEF,FOLLOW_JOIN_DEF_in_join_clause11241); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1173:17: (qpc1= query_partition_clause )?
			int alt242=2;
			int LA242_0 = input.LA(1);
			if ( (LA242_0==PARTITION_VK) ) {
				alt242=1;
			}
			switch (alt242) {
				case 1 :
					// PLSQLPrinter.g:1173:17: qpc1= query_partition_clause
					{
					pushFollow(FOLLOW_query_partition_clause_in_join_clause11257);
					qpc1=query_partition_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1174:13: ( CROSS_VK | NATURAL_VK )?
			int alt243=3;
			int LA243_0 = input.LA(1);
			if ( (LA243_0==CROSS_VK) ) {
				alt243=1;
			}
			else if ( (LA243_0==NATURAL_VK) ) {
				alt243=2;
			}
			switch (alt243) {
				case 1 :
					// PLSQLPrinter.g:1174:14: CROSS_VK
					{
					CROSS_VK180=(CommonTree)match(input,CROSS_VK,FOLLOW_CROSS_VK_in_join_clause11273); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1174:23: NATURAL_VK
					{
					NATURAL_VK181=(CommonTree)match(input,NATURAL_VK,FOLLOW_NATURAL_VK_in_join_clause11275); 
					}
					break;

			}

			// PLSQLPrinter.g:1174:36: ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )?
			int alt244=5;
			switch ( input.LA(1) ) {
				case INNER_VK:
					{
					alt244=1;
					}
					break;
				case FULL_VK:
					{
					alt244=2;
					}
					break;
				case LEFT_VK:
					{
					alt244=3;
					}
					break;
				case RIGHT_VK:
					{
					alt244=4;
					}
					break;
			}
			switch (alt244) {
				case 1 :
					// PLSQLPrinter.g:1174:37: INNER_VK
					{
					INNER_VK182=(CommonTree)match(input,INNER_VK,FOLLOW_INNER_VK_in_join_clause11280); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1174:46: FULL_VK
					{
					FULL_VK185=(CommonTree)match(input,FULL_VK,FOLLOW_FULL_VK_in_join_clause11282); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:1174:54: LEFT_VK
					{
					LEFT_VK183=(CommonTree)match(input,LEFT_VK,FOLLOW_LEFT_VK_in_join_clause11284); 
					}
					break;
				case 4 :
					// PLSQLPrinter.g:1174:62: RIGHT_VK
					{
					RIGHT_VK184=(CommonTree)match(input,RIGHT_VK,FOLLOW_RIGHT_VK_in_join_clause11286); 
					}
					break;

			}

			pushFollow(FOLLOW_table_ref_aux_in_join_clause11290);
			table_ref_aux186=table_ref_aux();
			state._fsp--;

			// PLSQLPrinter.g:1175:17: (qpc2= query_partition_clause )?
			int alt245=2;
			int LA245_0 = input.LA(1);
			if ( (LA245_0==PARTITION_VK) ) {
				alt245=1;
			}
			switch (alt245) {
				case 1 :
					// PLSQLPrinter.g:1175:17: qpc2= query_partition_clause
					{
					pushFollow(FOLLOW_query_partition_clause_in_join_clause11306);
					qpc2=query_partition_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1176:13: ( join_on_part | join_using_part )?
			int alt246=3;
			int LA246_0 = input.LA(1);
			if ( (LA246_0==SQL92_RESERVED_ON) ) {
				alt246=1;
			}
			else if ( (LA246_0==PLSQL_NON_RESERVED_USING) ) {
				alt246=2;
			}
			switch (alt246) {
				case 1 :
					// PLSQLPrinter.g:1176:14: join_on_part
					{
					pushFollow(FOLLOW_join_on_part_in_join_clause11322);
					join_on_part187=join_on_part();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1176:27: join_using_part
					{
					pushFollow(FOLLOW_join_using_part_in_join_clause11324);
					join_using_part188=join_using_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1177:5: -> join_clause(qpc1=$qpc1.stis_cross=$CROSS_VK != nullis_natural=$NATURAL_VK != nullis_inner=$INNER_VK != nullis_left=$LEFT_VK != nullis_right=$RIGHT_VK != nullis_full=$FULL_VK != nulltable_ref_aux=$table_ref_aux.stqpc2=$qpc2.stjoin_on_part=$join_on_part.stjoin_using_part=$join_using_part.st)
			{
				retval.st = templateLib.getInstanceOf("join_clause",new STAttrMap().put("qpc1", (qpc1!=null?((StringTemplate)qpc1.getTemplate()):null)).put("is_cross", CROSS_VK180 != null).put("is_natural", NATURAL_VK181 != null).put("is_inner", INNER_VK182 != null).put("is_left", LEFT_VK183 != null).put("is_right", RIGHT_VK184 != null).put("is_full", FULL_VK185 != null).put("table_ref_aux", (table_ref_aux186!=null?((StringTemplate)table_ref_aux186.getTemplate()):null)).put("qpc2", (qpc2!=null?((StringTemplate)qpc2.getTemplate()):null)).put("join_on_part", (join_on_part187!=null?((StringTemplate)join_on_part187.getTemplate()):null)).put("join_using_part", (join_using_part188!=null?((StringTemplate)join_using_part188.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_clause"


	public static class join_on_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "join_on_part"
	// PLSQLPrinter.g:1183:1: join_on_part : ^( SQL92_RESERVED_ON expression ) -> join_on_part(expression=$expression.st);
	public final PLSQLPrinter.join_on_part_return join_on_part() throws RecognitionException {
		PLSQLPrinter.join_on_part_return retval = new PLSQLPrinter.join_on_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression189 =null;

		try {
			// PLSQLPrinter.g:1184:5: ( ^( SQL92_RESERVED_ON expression ) -> join_on_part(expression=$expression.st))
			// PLSQLPrinter.g:1184:10: ^( SQL92_RESERVED_ON expression )
			{
			match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_join_on_part11450); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_join_on_part11452);
			expression189=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1185:5: -> join_on_part(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("join_on_part",new STAttrMap().put("expression", (expression189!=null?((StringTemplate)expression189.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_on_part"


	public static class join_using_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "join_using_part"
	// PLSQLPrinter.g:1188:1: join_using_part : ^( PLSQL_NON_RESERVED_USING ( column_name )+ ) -> template( \"not implemented: join_using_part\";
	public final PLSQLPrinter.join_using_part_return join_using_part() throws RecognitionException {
		PLSQLPrinter.join_using_part_return retval = new PLSQLPrinter.join_using_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1189:5: ( ^( PLSQL_NON_RESERVED_USING ( column_name )+ ) -> template( \"not implemented: join_using_part\")
			// PLSQLPrinter.g:1189:10: ^( PLSQL_NON_RESERVED_USING ( column_name )+ )
			{
			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_join_using_part11489); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1189:37: ( column_name )+
			int cnt247=0;
			loop247:
			while (true) {
				int alt247=2;
				int LA247_0 = input.LA(1);
				if ( (LA247_0==COLUMN_NAME) ) {
					alt247=1;
				}

				switch (alt247) {
				case 1 :
					// PLSQLPrinter.g:1189:37: column_name
					{
					pushFollow(FOLLOW_column_name_in_join_using_part11491);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt247 >= 1 ) break loop247;
					EarlyExitException eee = new EarlyExitException(247, input);
					throw eee;
				}
				cnt247++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1190:5: -> template( \"not implemented: join_using_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: join_using_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_using_part"


	public static class query_partition_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_partition_clause"
	// PLSQLPrinter.g:1193:1: query_partition_clause : ^( PARTITION_VK ( subquery | expression_list | ( expression )+ ) ) -> template( \"not implemented: query_partition_clause\";
	public final PLSQLPrinter.query_partition_clause_return query_partition_clause() throws RecognitionException {
		PLSQLPrinter.query_partition_clause_return retval = new PLSQLPrinter.query_partition_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1194:5: ( ^( PARTITION_VK ( subquery | expression_list | ( expression )+ ) ) -> template( \"not implemented: query_partition_clause\")
			// PLSQLPrinter.g:1194:10: ^( PARTITION_VK ( subquery | expression_list | ( expression )+ ) )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_query_partition_clause11528); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1194:25: ( subquery | expression_list | ( expression )+ )
			int alt249=3;
			switch ( input.LA(1) ) {
			case SUBQUERY:
				{
				alt249=1;
				}
				break;
			case EXPR_LIST:
				{
				alt249=2;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt249=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 249, 0, input);
				throw nvae;
			}
			switch (alt249) {
				case 1 :
					// PLSQLPrinter.g:1194:26: subquery
					{
					pushFollow(FOLLOW_subquery_in_query_partition_clause11531);
					subquery();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1194:35: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_query_partition_clause11533);
					expression_list();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1194:51: ( expression )+
					{
					// PLSQLPrinter.g:1194:51: ( expression )+
					int cnt248=0;
					loop248:
					while (true) {
						int alt248=2;
						int LA248_0 = input.LA(1);
						if ( (LA248_0==EXPR||LA248_0==LOGIC_EXPR) ) {
							alt248=1;
						}

						switch (alt248) {
						case 1 :
							// PLSQLPrinter.g:1194:51: expression
							{
							pushFollow(FOLLOW_expression_in_query_partition_clause11535);
							expression();
							state._fsp--;

							}
							break;

						default :
							if ( cnt248 >= 1 ) break loop248;
							EarlyExitException eee = new EarlyExitException(248, input);
							throw eee;
						}
						cnt248++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1195:5: -> template( \"not implemented: query_partition_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: query_partition_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_partition_clause"


	public static class flashback_query_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "flashback_query_clause"
	// PLSQLPrinter.g:1198:1: flashback_query_clause : ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression ) -> template( \"not implemented: flashback_query_clause\";
	public final PLSQLPrinter.flashback_query_clause_return flashback_query_clause() throws RecognitionException {
		PLSQLPrinter.flashback_query_clause_return retval = new PLSQLPrinter.flashback_query_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1199:5: ( ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression ) -> template( \"not implemented: flashback_query_clause\")
			// PLSQLPrinter.g:1199:10: ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression )
			{
			// PLSQLPrinter.g:1199:12: ( VERSIONS_VK | SQL92_RESERVED_AS )
			int alt250=2;
			int LA250_0 = input.LA(1);
			if ( (LA250_0==VERSIONS_VK) ) {
				alt250=1;
			}
			else if ( (LA250_0==SQL92_RESERVED_AS) ) {
				alt250=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 250, 0, input);
				throw nvae;
			}

			switch (alt250) {
				case 1 :
					// PLSQLPrinter.g:1199:13: VERSIONS_VK
					{
					match(input,VERSIONS_VK,FOLLOW_VERSIONS_VK_in_flashback_query_clause11574); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1199:25: SQL92_RESERVED_AS
					{
					match(input,SQL92_RESERVED_AS,FOLLOW_SQL92_RESERVED_AS_in_flashback_query_clause11576); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1199:44: ( SCN_VK | TIMESTAMP_VK )?
			int alt251=3;
			int LA251_0 = input.LA(1);
			if ( (LA251_0==SCN_VK) ) {
				alt251=1;
			}
			else if ( (LA251_0==TIMESTAMP_VK) ) {
				alt251=2;
			}
			switch (alt251) {
				case 1 :
					// PLSQLPrinter.g:1199:45: SCN_VK
					{
					match(input,SCN_VK,FOLLOW_SCN_VK_in_flashback_query_clause11580); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1199:52: TIMESTAMP_VK
					{
					match(input,TIMESTAMP_VK,FOLLOW_TIMESTAMP_VK_in_flashback_query_clause11582); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_flashback_query_clause11586);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1200:5: -> template( \"not implemented: flashback_query_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: flashback_query_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "flashback_query_clause"


	public static class pivot_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_clause"
	// PLSQLPrinter.g:1203:1: pivot_clause : ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) -> template( \"not implemented: pivot_clause\";
	public final PLSQLPrinter.pivot_clause_return pivot_clause() throws RecognitionException {
		PLSQLPrinter.pivot_clause_return retval = new PLSQLPrinter.pivot_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1204:5: ( ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) -> template( \"not implemented: pivot_clause\")
			// PLSQLPrinter.g:1204:10: ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause )
			{
			match(input,PIVOT_VK,FOLLOW_PIVOT_VK_in_pivot_clause11623); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1204:21: ( XML_VK )?
			int alt252=2;
			int LA252_0 = input.LA(1);
			if ( (LA252_0==XML_VK) ) {
				alt252=1;
			}
			switch (alt252) {
				case 1 :
					// PLSQLPrinter.g:1204:21: XML_VK
					{
					match(input,XML_VK,FOLLOW_XML_VK_in_pivot_clause11625); 
					}
					break;

			}

			// PLSQLPrinter.g:1204:29: ( pivot_element )+
			int cnt253=0;
			loop253:
			while (true) {
				int alt253=2;
				int LA253_0 = input.LA(1);
				if ( (LA253_0==PIVOT_ELEMENT) ) {
					alt253=1;
				}

				switch (alt253) {
				case 1 :
					// PLSQLPrinter.g:1204:29: pivot_element
					{
					pushFollow(FOLLOW_pivot_element_in_pivot_clause11628);
					pivot_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt253 >= 1 ) break loop253;
					EarlyExitException eee = new EarlyExitException(253, input);
					throw eee;
				}
				cnt253++;
			}

			pushFollow(FOLLOW_pivot_for_clause_in_pivot_clause11631);
			pivot_for_clause();
			state._fsp--;

			pushFollow(FOLLOW_pivot_in_clause_in_pivot_clause11633);
			pivot_in_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1205:5: -> template( \"not implemented: pivot_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_clause"


	public static class pivot_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_element"
	// PLSQLPrinter.g:1208:1: pivot_element : ^( PIVOT_ELEMENT ( alias )? expression ) -> template( \"not implemented: pivot_element\";
	public final PLSQLPrinter.pivot_element_return pivot_element() throws RecognitionException {
		PLSQLPrinter.pivot_element_return retval = new PLSQLPrinter.pivot_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1209:5: ( ^( PIVOT_ELEMENT ( alias )? expression ) -> template( \"not implemented: pivot_element\")
			// PLSQLPrinter.g:1209:10: ^( PIVOT_ELEMENT ( alias )? expression )
			{
			match(input,PIVOT_ELEMENT,FOLLOW_PIVOT_ELEMENT_in_pivot_element11669); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1209:26: ( alias )?
			int alt254=2;
			int LA254_0 = input.LA(1);
			if ( (LA254_0==ALIAS) ) {
				alt254=1;
			}
			switch (alt254) {
				case 1 :
					// PLSQLPrinter.g:1209:26: alias
					{
					pushFollow(FOLLOW_alias_in_pivot_element11671);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_expression_in_pivot_element11674);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1210:5: -> template( \"not implemented: pivot_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_element"


	public static class pivot_for_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_for_clause"
	// PLSQLPrinter.g:1213:1: pivot_for_clause : ^( SQL92_RESERVED_FOR ( column_name )+ ) -> template( \"not implemented: pivot_for_clause\";
	public final PLSQLPrinter.pivot_for_clause_return pivot_for_clause() throws RecognitionException {
		PLSQLPrinter.pivot_for_clause_return retval = new PLSQLPrinter.pivot_for_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1214:5: ( ^( SQL92_RESERVED_FOR ( column_name )+ ) -> template( \"not implemented: pivot_for_clause\")
			// PLSQLPrinter.g:1214:10: ^( SQL92_RESERVED_FOR ( column_name )+ )
			{
			match(input,SQL92_RESERVED_FOR,FOLLOW_SQL92_RESERVED_FOR_in_pivot_for_clause11710); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1214:31: ( column_name )+
			int cnt255=0;
			loop255:
			while (true) {
				int alt255=2;
				int LA255_0 = input.LA(1);
				if ( (LA255_0==COLUMN_NAME) ) {
					alt255=1;
				}

				switch (alt255) {
				case 1 :
					// PLSQLPrinter.g:1214:31: column_name
					{
					pushFollow(FOLLOW_column_name_in_pivot_for_clause11712);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt255 >= 1 ) break loop255;
					EarlyExitException eee = new EarlyExitException(255, input);
					throw eee;
				}
				cnt255++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1215:5: -> template( \"not implemented: pivot_for_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_for_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_for_clause"


	public static class pivot_in_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_in_clause"
	// PLSQLPrinter.g:1218:1: pivot_in_clause : ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ) -> template( \"not implemented: pivot_in_clause\";
	public final PLSQLPrinter.pivot_in_clause_return pivot_in_clause() throws RecognitionException {
		PLSQLPrinter.pivot_in_clause_return retval = new PLSQLPrinter.pivot_in_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1219:5: ( ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ) -> template( \"not implemented: pivot_in_clause\")
			// PLSQLPrinter.g:1219:10: ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) )
			{
			match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_pivot_in_clause11749); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1220:9: ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) )
			int alt258=3;
			switch ( input.LA(1) ) {
			case SUBQUERY:
				{
				alt258=1;
				}
				break;
			case ANY_MODE:
				{
				alt258=2;
				}
				break;
			case ELEMENTS_MODE:
				{
				alt258=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 258, 0, input);
				throw nvae;
			}
			switch (alt258) {
				case 1 :
					// PLSQLPrinter.g:1220:14: subquery
					{
					pushFollow(FOLLOW_subquery_in_pivot_in_clause11765);
					subquery();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1221:14: ^( ANY_MODE ( SQL92_RESERVED_ANY )+ )
					{
					match(input,ANY_MODE,FOLLOW_ANY_MODE_in_pivot_in_clause11781); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1221:25: ( SQL92_RESERVED_ANY )+
					int cnt256=0;
					loop256:
					while (true) {
						int alt256=2;
						int LA256_0 = input.LA(1);
						if ( (LA256_0==SQL92_RESERVED_ANY) ) {
							alt256=1;
						}

						switch (alt256) {
						case 1 :
							// PLSQLPrinter.g:1221:25: SQL92_RESERVED_ANY
							{
							match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_pivot_in_clause11783); 
							}
							break;

						default :
							if ( cnt256 >= 1 ) break loop256;
							EarlyExitException eee = new EarlyExitException(256, input);
							throw eee;
						}
						cnt256++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1222:14: ^( ELEMENTS_MODE ( pivot_in_clause_element )+ )
					{
					match(input,ELEMENTS_MODE,FOLLOW_ELEMENTS_MODE_in_pivot_in_clause11801); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1222:30: ( pivot_in_clause_element )+
					int cnt257=0;
					loop257:
					while (true) {
						int alt257=2;
						int LA257_0 = input.LA(1);
						if ( (LA257_0==PIVOT_IN_ELEMENT) ) {
							alt257=1;
						}

						switch (alt257) {
						case 1 :
							// PLSQLPrinter.g:1222:30: pivot_in_clause_element
							{
							pushFollow(FOLLOW_pivot_in_clause_element_in_pivot_in_clause11803);
							pivot_in_clause_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt257 >= 1 ) break loop257;
							EarlyExitException eee = new EarlyExitException(257, input);
							throw eee;
						}
						cnt257++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1225:5: -> template( \"not implemented: pivot_in_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_in_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_in_clause"


	public static class pivot_in_clause_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_in_clause_element"
	// PLSQLPrinter.g:1228:1: pivot_in_clause_element : ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) ) -> template( \"not implemented: pivot_in_clause_element\";
	public final PLSQLPrinter.pivot_in_clause_element_return pivot_in_clause_element() throws RecognitionException {
		PLSQLPrinter.pivot_in_clause_element_return retval = new PLSQLPrinter.pivot_in_clause_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1229:5: ( ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) ) -> template( \"not implemented: pivot_in_clause_element\")
			// PLSQLPrinter.g:1229:10: ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) )
			{
			match(input,PIVOT_IN_ELEMENT,FOLLOW_PIVOT_IN_ELEMENT_in_pivot_in_clause_element11860); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1229:29: ( alias )?
			int alt259=2;
			int LA259_0 = input.LA(1);
			if ( (LA259_0==ALIAS) ) {
				alt259=1;
			}
			switch (alt259) {
				case 1 :
					// PLSQLPrinter.g:1229:29: alias
					{
					pushFollow(FOLLOW_alias_in_pivot_in_clause_element11862);
					alias();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1229:36: ( expression | expression_list )
			int alt260=2;
			int LA260_0 = input.LA(1);
			if ( (LA260_0==EXPR||LA260_0==LOGIC_EXPR) ) {
				alt260=1;
			}
			else if ( (LA260_0==EXPR_LIST) ) {
				alt260=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 260, 0, input);
				throw nvae;
			}

			switch (alt260) {
				case 1 :
					// PLSQLPrinter.g:1229:37: expression
					{
					pushFollow(FOLLOW_expression_in_pivot_in_clause_element11866);
					expression();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1229:48: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_pivot_in_clause_element11868);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1230:5: -> template( \"not implemented: pivot_in_clause_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_in_clause_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_in_clause_element"


	public static class unpivot_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unpivot_clause"
	// PLSQLPrinter.g:1233:1: unpivot_clause : ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause ) -> template( \"not implemented: unpivot_clause\";
	public final PLSQLPrinter.unpivot_clause_return unpivot_clause() throws RecognitionException {
		PLSQLPrinter.unpivot_clause_return retval = new PLSQLPrinter.unpivot_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1234:5: ( ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause ) -> template( \"not implemented: unpivot_clause\")
			// PLSQLPrinter.g:1234:10: ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause )
			{
			match(input,UNPIVOT_VK,FOLLOW_UNPIVOT_VK_in_unpivot_clause11905); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1234:23: ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )?
			int alt263=2;
			int LA263_0 = input.LA(1);
			if ( (LA263_0==EXCLUDE_VK||LA263_0==INCLUDE_VK) ) {
				alt263=1;
			}
			switch (alt263) {
				case 1 :
					// PLSQLPrinter.g:1234:24: ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )?
					{
					// PLSQLPrinter.g:1234:24: ( INCLUDE_VK | EXCLUDE_VK )
					int alt261=2;
					int LA261_0 = input.LA(1);
					if ( (LA261_0==INCLUDE_VK) ) {
						alt261=1;
					}
					else if ( (LA261_0==EXCLUDE_VK) ) {
						alt261=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 261, 0, input);
						throw nvae;
					}

					switch (alt261) {
						case 1 :
							// PLSQLPrinter.g:1234:25: INCLUDE_VK
							{
							match(input,INCLUDE_VK,FOLLOW_INCLUDE_VK_in_unpivot_clause11909); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1234:36: EXCLUDE_VK
							{
							match(input,EXCLUDE_VK,FOLLOW_EXCLUDE_VK_in_unpivot_clause11911); 
							}
							break;

					}

					// PLSQLPrinter.g:1234:48: ( NULLS_VK )?
					int alt262=2;
					int LA262_0 = input.LA(1);
					if ( (LA262_0==NULLS_VK) ) {
						alt262=1;
					}
					switch (alt262) {
						case 1 :
							// PLSQLPrinter.g:1234:48: NULLS_VK
							{
							match(input,NULLS_VK,FOLLOW_NULLS_VK_in_unpivot_clause11914); 
							}
							break;

					}

					}
					break;

			}

			// PLSQLPrinter.g:1234:60: ( column_name )+
			int cnt264=0;
			loop264:
			while (true) {
				int alt264=2;
				int LA264_0 = input.LA(1);
				if ( (LA264_0==COLUMN_NAME) ) {
					alt264=1;
				}

				switch (alt264) {
				case 1 :
					// PLSQLPrinter.g:1234:60: column_name
					{
					pushFollow(FOLLOW_column_name_in_unpivot_clause11919);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt264 >= 1 ) break loop264;
					EarlyExitException eee = new EarlyExitException(264, input);
					throw eee;
				}
				cnt264++;
			}

			pushFollow(FOLLOW_pivot_for_clause_in_unpivot_clause11922);
			pivot_for_clause();
			state._fsp--;

			pushFollow(FOLLOW_unpivot_in_clause_in_unpivot_clause11924);
			unpivot_in_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1235:5: -> template( \"not implemented: unpivot_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: unpivot_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unpivot_clause"


	public static class unpivot_in_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unpivot_in_clause"
	// PLSQLPrinter.g:1238:1: unpivot_in_clause : ^( SQL92_RESERVED_IN ( unpivot_in_element )+ ) -> template( \"not implemented: unpivot_in_clause\";
	public final PLSQLPrinter.unpivot_in_clause_return unpivot_in_clause() throws RecognitionException {
		PLSQLPrinter.unpivot_in_clause_return retval = new PLSQLPrinter.unpivot_in_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1239:5: ( ^( SQL92_RESERVED_IN ( unpivot_in_element )+ ) -> template( \"not implemented: unpivot_in_clause\")
			// PLSQLPrinter.g:1239:10: ^( SQL92_RESERVED_IN ( unpivot_in_element )+ )
			{
			match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_unpivot_in_clause11960); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1239:30: ( unpivot_in_element )+
			int cnt265=0;
			loop265:
			while (true) {
				int alt265=2;
				int LA265_0 = input.LA(1);
				if ( (LA265_0==UNPIVOT_IN_ELEMENT) ) {
					alt265=1;
				}

				switch (alt265) {
				case 1 :
					// PLSQLPrinter.g:1239:30: unpivot_in_element
					{
					pushFollow(FOLLOW_unpivot_in_element_in_unpivot_in_clause11962);
					unpivot_in_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt265 >= 1 ) break loop265;
					EarlyExitException eee = new EarlyExitException(265, input);
					throw eee;
				}
				cnt265++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1240:5: -> template( \"not implemented: unpivot_in_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: unpivot_in_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unpivot_in_clause"


	public static class unpivot_in_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unpivot_in_element"
	// PLSQLPrinter.g:1243:1: unpivot_in_element : ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) ) -> template( \"not implemented: unpivot_in_element\";
	public final PLSQLPrinter.unpivot_in_element_return unpivot_in_element() throws RecognitionException {
		PLSQLPrinter.unpivot_in_element_return retval = new PLSQLPrinter.unpivot_in_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1244:5: ( ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) ) -> template( \"not implemented: unpivot_in_element\")
			// PLSQLPrinter.g:1244:10: ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) )
			{
			match(input,UNPIVOT_IN_ELEMENT,FOLLOW_UNPIVOT_IN_ELEMENT_in_unpivot_in_element11999); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1244:31: ( column_name )+
			int cnt266=0;
			loop266:
			while (true) {
				int alt266=2;
				int LA266_0 = input.LA(1);
				if ( (LA266_0==COLUMN_NAME) ) {
					alt266=1;
				}

				switch (alt266) {
				case 1 :
					// PLSQLPrinter.g:1244:31: column_name
					{
					pushFollow(FOLLOW_column_name_in_unpivot_in_element12001);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt266 >= 1 ) break loop266;
					EarlyExitException eee = new EarlyExitException(266, input);
					throw eee;
				}
				cnt266++;
			}

			match(input,PIVOT_ALIAS,FOLLOW_PIVOT_ALIAS_in_unpivot_in_element12005); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1244:58: ( expression | expression_list )
			int alt267=2;
			int LA267_0 = input.LA(1);
			if ( (LA267_0==EXPR||LA267_0==LOGIC_EXPR) ) {
				alt267=1;
			}
			else if ( (LA267_0==EXPR_LIST) ) {
				alt267=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 267, 0, input);
				throw nvae;
			}

			switch (alt267) {
				case 1 :
					// PLSQLPrinter.g:1244:59: expression
					{
					pushFollow(FOLLOW_expression_in_unpivot_in_element12008);
					expression();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1244:70: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_unpivot_in_element12010);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1245:5: -> template( \"not implemented: unpivot_in_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: unpivot_in_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unpivot_in_element"


	public static class hierarchical_query_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "hierarchical_query_clause"
	// PLSQLPrinter.g:1248:1: hierarchical_query_clause : ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) ) -> template( \"not implemented: hierarchical_query_clause\";
	public final PLSQLPrinter.hierarchical_query_clause_return hierarchical_query_clause() throws RecognitionException {
		PLSQLPrinter.hierarchical_query_clause_return retval = new PLSQLPrinter.hierarchical_query_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1249:5: ( ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) ) -> template( \"not implemented: hierarchical_query_clause\")
			// PLSQLPrinter.g:1249:10: ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) )
			{
			match(input,HIERARCHICAL,FOLLOW_HIERARCHICAL_in_hierarchical_query_clause12048); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1249:25: ( start_part )?
			int alt268=2;
			int LA268_0 = input.LA(1);
			if ( (LA268_0==PLSQL_RESERVED_START) ) {
				alt268=1;
			}
			switch (alt268) {
				case 1 :
					// PLSQLPrinter.g:1249:25: start_part
					{
					pushFollow(FOLLOW_start_part_in_hierarchical_query_clause12050);
					start_part();
					state._fsp--;

					}
					break;

			}

			match(input,SQL92_RESERVED_CONNECT,FOLLOW_SQL92_RESERVED_CONNECT_in_hierarchical_query_clause12054); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1249:62: ( NOCYCLE_VK )?
			int alt269=2;
			int LA269_0 = input.LA(1);
			if ( (LA269_0==NOCYCLE_VK) ) {
				alt269=1;
			}
			switch (alt269) {
				case 1 :
					// PLSQLPrinter.g:1249:62: NOCYCLE_VK
					{
					match(input,NOCYCLE_VK,FOLLOW_NOCYCLE_VK_in_hierarchical_query_clause12056); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_hierarchical_query_clause12059);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1250:5: -> template( \"not implemented: hierarchical_query_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: hierarchical_query_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "hierarchical_query_clause"


	public static class start_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "start_part"
	// PLSQLPrinter.g:1253:1: start_part : ^( PLSQL_RESERVED_START expression ) -> template( \"not implemented: start_part\";
	public final PLSQLPrinter.start_part_return start_part() throws RecognitionException {
		PLSQLPrinter.start_part_return retval = new PLSQLPrinter.start_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1254:5: ( ^( PLSQL_RESERVED_START expression ) -> template( \"not implemented: start_part\")
			// PLSQLPrinter.g:1254:10: ^( PLSQL_RESERVED_START expression )
			{
			match(input,PLSQL_RESERVED_START,FOLLOW_PLSQL_RESERVED_START_in_start_part12096); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_start_part12098);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1255:5: -> template( \"not implemented: start_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: start_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "start_part"


	public static class group_by_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "group_by_clause"
	// PLSQLPrinter.g:1258:1: group_by_clause : ^( SQL92_RESERVED_GROUP ( group_by_element )+ ( having_clause )? ) -> template( \"not implemented: group_by_clause\";
	public final PLSQLPrinter.group_by_clause_return group_by_clause() throws RecognitionException {
		PLSQLPrinter.group_by_clause_return retval = new PLSQLPrinter.group_by_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1259:5: ( ^( SQL92_RESERVED_GROUP ( group_by_element )+ ( having_clause )? ) -> template( \"not implemented: group_by_clause\")
			// PLSQLPrinter.g:1259:10: ^( SQL92_RESERVED_GROUP ( group_by_element )+ ( having_clause )? )
			{
			match(input,SQL92_RESERVED_GROUP,FOLLOW_SQL92_RESERVED_GROUP_in_group_by_clause12134); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1259:33: ( group_by_element )+
			int cnt270=0;
			loop270:
			while (true) {
				int alt270=2;
				int LA270_0 = input.LA(1);
				if ( (LA270_0==GROUP_BY_ELEMENT) ) {
					alt270=1;
				}

				switch (alt270) {
				case 1 :
					// PLSQLPrinter.g:1259:33: group_by_element
					{
					pushFollow(FOLLOW_group_by_element_in_group_by_clause12136);
					group_by_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt270 >= 1 ) break loop270;
					EarlyExitException eee = new EarlyExitException(270, input);
					throw eee;
				}
				cnt270++;
			}

			// PLSQLPrinter.g:1259:51: ( having_clause )?
			int alt271=2;
			int LA271_0 = input.LA(1);
			if ( (LA271_0==SQL92_RESERVED_HAVING) ) {
				alt271=1;
			}
			switch (alt271) {
				case 1 :
					// PLSQLPrinter.g:1259:51: having_clause
					{
					pushFollow(FOLLOW_having_clause_in_group_by_clause12139);
					having_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1260:5: -> template( \"not implemented: group_by_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: group_by_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_by_clause"


	public static class group_by_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "group_by_element"
	// PLSQLPrinter.g:1263:1: group_by_element : ^( GROUP_BY_ELEMENT group_by_elements ) -> template( \"not implemented: group_by_element\";
	public final PLSQLPrinter.group_by_element_return group_by_element() throws RecognitionException {
		PLSQLPrinter.group_by_element_return retval = new PLSQLPrinter.group_by_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1264:5: ( ^( GROUP_BY_ELEMENT group_by_elements ) -> template( \"not implemented: group_by_element\")
			// PLSQLPrinter.g:1264:10: ^( GROUP_BY_ELEMENT group_by_elements )
			{
			match(input,GROUP_BY_ELEMENT,FOLLOW_GROUP_BY_ELEMENT_in_group_by_element12176); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_group_by_elements_in_group_by_element12178);
			group_by_elements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1265:5: -> template( \"not implemented: group_by_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: group_by_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_by_element"


	public static class group_by_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "group_by_elements"
	// PLSQLPrinter.g:1268:1: group_by_elements : ( ^( GROUPING_VK ( groupin_set )+ ) -> template( \"not implemented: group_by_elements\"| grouping_element -> template( \"not implemented: group_by_elements\");
	public final PLSQLPrinter.group_by_elements_return group_by_elements() throws RecognitionException {
		PLSQLPrinter.group_by_elements_return retval = new PLSQLPrinter.group_by_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1269:5: ( ^( GROUPING_VK ( groupin_set )+ ) -> template( \"not implemented: group_by_elements\"| grouping_element -> template( \"not implemented: group_by_elements\")
			int alt273=2;
			int LA273_0 = input.LA(1);
			if ( (LA273_0==GROUPING_VK) ) {
				alt273=1;
			}
			else if ( (LA273_0==CUBE_VK||(LA273_0 >= EXPR && LA273_0 <= EXPR_LIST)||LA273_0==LOGIC_EXPR||LA273_0==ROLLUP_VK) ) {
				alt273=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 273, 0, input);
				throw nvae;
			}

			switch (alt273) {
				case 1 :
					// PLSQLPrinter.g:1269:10: ^( GROUPING_VK ( groupin_set )+ )
					{
					match(input,GROUPING_VK,FOLLOW_GROUPING_VK_in_group_by_elements12214); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1269:24: ( groupin_set )+
					int cnt272=0;
					loop272:
					while (true) {
						int alt272=2;
						int LA272_0 = input.LA(1);
						if ( (LA272_0==GROUPIN_SET) ) {
							alt272=1;
						}

						switch (alt272) {
						case 1 :
							// PLSQLPrinter.g:1269:24: groupin_set
							{
							pushFollow(FOLLOW_groupin_set_in_group_by_elements12216);
							groupin_set();
							state._fsp--;

							}
							break;

						default :
							if ( cnt272 >= 1 ) break loop272;
							EarlyExitException eee = new EarlyExitException(272, input);
							throw eee;
						}
						cnt272++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1270:5: -> template( \"not implemented: group_by_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: group_by_elements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1271:10: grouping_element
					{
					pushFollow(FOLLOW_grouping_element_in_group_by_elements12243);
					grouping_element();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1272:5: -> template( \"not implemented: group_by_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: group_by_elements");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_by_elements"


	public static class groupin_set_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "groupin_set"
	// PLSQLPrinter.g:1275:1: groupin_set : ^( GROUPIN_SET grouping_element ) -> template( \"not implemented: groupin_set\";
	public final PLSQLPrinter.groupin_set_return groupin_set() throws RecognitionException {
		PLSQLPrinter.groupin_set_return retval = new PLSQLPrinter.groupin_set_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1276:5: ( ^( GROUPIN_SET grouping_element ) -> template( \"not implemented: groupin_set\")
			// PLSQLPrinter.g:1276:10: ^( GROUPIN_SET grouping_element )
			{
			match(input,GROUPIN_SET,FOLLOW_GROUPIN_SET_in_groupin_set12279); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_grouping_element_in_groupin_set12281);
			grouping_element();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1277:5: -> template( \"not implemented: groupin_set\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: groupin_set");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "groupin_set"


	public static class grouping_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "grouping_element"
	// PLSQLPrinter.g:1280:1: grouping_element : ( ^( ( ROLLUP_VK | CUBE_VK ) ( grouping_element )+ ) -> template( \"not implemented: grouping_element\"| expression_list -> template( \"not implemented: grouping_element\"| expression -> template( \"not implemented: grouping_element\");
	public final PLSQLPrinter.grouping_element_return grouping_element() throws RecognitionException {
		PLSQLPrinter.grouping_element_return retval = new PLSQLPrinter.grouping_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1281:5: ( ^( ( ROLLUP_VK | CUBE_VK ) ( grouping_element )+ ) -> template( \"not implemented: grouping_element\"| expression_list -> template( \"not implemented: grouping_element\"| expression -> template( \"not implemented: grouping_element\")
			int alt276=3;
			switch ( input.LA(1) ) {
			case CUBE_VK:
			case ROLLUP_VK:
				{
				alt276=1;
				}
				break;
			case EXPR_LIST:
				{
				alt276=2;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt276=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 276, 0, input);
				throw nvae;
			}
			switch (alt276) {
				case 1 :
					// PLSQLPrinter.g:1281:10: ^( ( ROLLUP_VK | CUBE_VK ) ( grouping_element )+ )
					{
					// PLSQLPrinter.g:1281:12: ( ROLLUP_VK | CUBE_VK )
					int alt274=2;
					int LA274_0 = input.LA(1);
					if ( (LA274_0==ROLLUP_VK) ) {
						alt274=1;
					}
					else if ( (LA274_0==CUBE_VK) ) {
						alt274=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 274, 0, input);
						throw nvae;
					}

					switch (alt274) {
						case 1 :
							// PLSQLPrinter.g:1281:13: ROLLUP_VK
							{
							match(input,ROLLUP_VK,FOLLOW_ROLLUP_VK_in_grouping_element12318); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1281:23: CUBE_VK
							{
							match(input,CUBE_VK,FOLLOW_CUBE_VK_in_grouping_element12320); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1281:32: ( grouping_element )+
					int cnt275=0;
					loop275:
					while (true) {
						int alt275=2;
						int LA275_0 = input.LA(1);
						if ( (LA275_0==CUBE_VK||(LA275_0 >= EXPR && LA275_0 <= EXPR_LIST)||LA275_0==LOGIC_EXPR||LA275_0==ROLLUP_VK) ) {
							alt275=1;
						}

						switch (alt275) {
						case 1 :
							// PLSQLPrinter.g:1281:32: grouping_element
							{
							pushFollow(FOLLOW_grouping_element_in_grouping_element12323);
							grouping_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt275 >= 1 ) break loop275;
							EarlyExitException eee = new EarlyExitException(275, input);
							throw eee;
						}
						cnt275++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1282:5: -> template( \"not implemented: grouping_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: grouping_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1283:10: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_grouping_element12350);
					expression_list();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1284:5: -> template( \"not implemented: grouping_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: grouping_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1285:10: expression
					{
					pushFollow(FOLLOW_expression_in_grouping_element12375);
					expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1286:5: -> template( \"not implemented: grouping_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: grouping_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grouping_element"


	public static class having_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "having_clause"
	// PLSQLPrinter.g:1289:1: having_clause : ^( SQL92_RESERVED_HAVING expression ) -> template( \"not implemented: having_clause\";
	public final PLSQLPrinter.having_clause_return having_clause() throws RecognitionException {
		PLSQLPrinter.having_clause_return retval = new PLSQLPrinter.having_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1290:5: ( ^( SQL92_RESERVED_HAVING expression ) -> template( \"not implemented: having_clause\")
			// PLSQLPrinter.g:1290:10: ^( SQL92_RESERVED_HAVING expression )
			{
			match(input,SQL92_RESERVED_HAVING,FOLLOW_SQL92_RESERVED_HAVING_in_having_clause12411); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_having_clause12413);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1291:5: -> template( \"not implemented: having_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: having_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "having_clause"


	public static class model_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_clause"
	// PLSQLPrinter.g:1294:1: model_clause : ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) -> template( \"not implemented: model_clause\";
	public final PLSQLPrinter.model_clause_return model_clause() throws RecognitionException {
		PLSQLPrinter.model_clause_return retval = new PLSQLPrinter.model_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1295:5: ( ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) -> template( \"not implemented: model_clause\")
			// PLSQLPrinter.g:1295:10: ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* )
			{
			match(input,PLSQL_NON_RESERVED_MODEL,FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_clause12449); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_main_model_in_model_clause12451);
			main_model();
			state._fsp--;

			// PLSQLPrinter.g:1295:48: ( cell_reference_options )*
			loop277:
			while (true) {
				int alt277=2;
				int LA277_0 = input.LA(1);
				if ( (LA277_0==SQL92_RESERVED_UNIQUE||LA277_0==IGNORE_VK||LA277_0==KEEP_VK) ) {
					alt277=1;
				}

				switch (alt277) {
				case 1 :
					// PLSQLPrinter.g:1295:48: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_model_clause12453);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop277;
				}
			}

			// PLSQLPrinter.g:1295:72: ( return_rows_clause )?
			int alt278=2;
			int LA278_0 = input.LA(1);
			if ( (LA278_0==RETURN_VK) ) {
				alt278=1;
			}
			switch (alt278) {
				case 1 :
					// PLSQLPrinter.g:1295:72: return_rows_clause
					{
					pushFollow(FOLLOW_return_rows_clause_in_model_clause12456);
					return_rows_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1295:92: ( reference_model )*
			loop279:
			while (true) {
				int alt279=2;
				int LA279_0 = input.LA(1);
				if ( (LA279_0==REFERENCE_VK) ) {
					alt279=1;
				}

				switch (alt279) {
				case 1 :
					// PLSQLPrinter.g:1295:92: reference_model
					{
					pushFollow(FOLLOW_reference_model_in_model_clause12459);
					reference_model();
					state._fsp--;

					}
					break;

				default :
					break loop279;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1296:5: -> template( \"not implemented: model_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_clause"


	public static class cell_reference_options_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cell_reference_options"
	// PLSQLPrinter.g:1299:1: cell_reference_options : ( ^( ( IGNORE_VK | KEEP_VK ) NAV_VK ) | ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) ) -> template( \"not implemented: cell_reference_options\");
	public final PLSQLPrinter.cell_reference_options_return cell_reference_options() throws RecognitionException {
		PLSQLPrinter.cell_reference_options_return retval = new PLSQLPrinter.cell_reference_options_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1300:5: ( ^( ( IGNORE_VK | KEEP_VK ) NAV_VK ) | ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) ) -> template( \"not implemented: cell_reference_options\")
			int alt281=2;
			int LA281_0 = input.LA(1);
			if ( (LA281_0==IGNORE_VK||LA281_0==KEEP_VK) ) {
				alt281=1;
			}
			else if ( (LA281_0==SQL92_RESERVED_UNIQUE) ) {
				alt281=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 281, 0, input);
				throw nvae;
			}

			switch (alt281) {
				case 1 :
					// PLSQLPrinter.g:1300:10: ^( ( IGNORE_VK | KEEP_VK ) NAV_VK )
					{
					if ( input.LA(1)==IGNORE_VK||input.LA(1)==KEEP_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					match(input,NAV_VK,FOLLOW_NAV_VK_in_cell_reference_options12502); 
					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1301:10: ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) )
					{
					match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_cell_reference_options12515); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1301:34: ( DIMENSION_VK | SINGLE_VK )
					int alt280=2;
					int LA280_0 = input.LA(1);
					if ( (LA280_0==DIMENSION_VK) ) {
						alt280=1;
					}
					else if ( (LA280_0==SINGLE_VK) ) {
						alt280=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 280, 0, input);
						throw nvae;
					}

					switch (alt280) {
						case 1 :
							// PLSQLPrinter.g:1301:35: DIMENSION_VK
							{
							match(input,DIMENSION_VK,FOLLOW_DIMENSION_VK_in_cell_reference_options12518); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1301:48: SINGLE_VK
							{
							match(input,SINGLE_VK,FOLLOW_SINGLE_VK_in_cell_reference_options12520); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1302:5: -> template( \"not implemented: cell_reference_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: cell_reference_options");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cell_reference_options"


	public static class return_rows_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "return_rows_clause"
	// PLSQLPrinter.g:1305:1: return_rows_clause : ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) ) -> template( \"not implemented: return_rows_clause\";
	public final PLSQLPrinter.return_rows_clause_return return_rows_clause() throws RecognitionException {
		PLSQLPrinter.return_rows_clause_return retval = new PLSQLPrinter.return_rows_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1306:5: ( ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) ) -> template( \"not implemented: return_rows_clause\")
			// PLSQLPrinter.g:1306:10: ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) )
			{
			match(input,RETURN_VK,FOLLOW_RETURN_VK_in_return_rows_clause12557); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1306:22: ( UPDATED_VK | SQL92_RESERVED_ALL )
			int alt282=2;
			int LA282_0 = input.LA(1);
			if ( (LA282_0==UPDATED_VK) ) {
				alt282=1;
			}
			else if ( (LA282_0==SQL92_RESERVED_ALL) ) {
				alt282=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 282, 0, input);
				throw nvae;
			}

			switch (alt282) {
				case 1 :
					// PLSQLPrinter.g:1306:23: UPDATED_VK
					{
					match(input,UPDATED_VK,FOLLOW_UPDATED_VK_in_return_rows_clause12560); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1306:34: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_return_rows_clause12562); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1307:5: -> template( \"not implemented: return_rows_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: return_rows_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "return_rows_clause"


	public static class reference_model_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "reference_model"
	// PLSQLPrinter.g:1310:1: reference_model : ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* ) -> template( \"not implemented: reference_model\";
	public final PLSQLPrinter.reference_model_return reference_model() throws RecognitionException {
		PLSQLPrinter.reference_model_return retval = new PLSQLPrinter.reference_model_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1311:5: ( ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* ) -> template( \"not implemented: reference_model\")
			// PLSQLPrinter.g:1311:10: ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* )
			{
			match(input,REFERENCE_VK,FOLLOW_REFERENCE_VK_in_reference_model12599); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_reference_model_name_in_reference_model12601);
			reference_model_name();
			state._fsp--;

			pushFollow(FOLLOW_subquery_in_reference_model12603);
			subquery();
			state._fsp--;

			pushFollow(FOLLOW_model_column_clauses_in_reference_model12605);
			model_column_clauses();
			state._fsp--;

			// PLSQLPrinter.g:1311:76: ( cell_reference_options )*
			loop283:
			while (true) {
				int alt283=2;
				int LA283_0 = input.LA(1);
				if ( (LA283_0==SQL92_RESERVED_UNIQUE||LA283_0==IGNORE_VK||LA283_0==KEEP_VK) ) {
					alt283=1;
				}

				switch (alt283) {
				case 1 :
					// PLSQLPrinter.g:1311:76: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_reference_model12607);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop283;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1312:5: -> template( \"not implemented: reference_model\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: reference_model");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reference_model"


	public static class main_model_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "main_model"
	// PLSQLPrinter.g:1315:1: main_model : ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) -> template( \"not implemented: main_model\";
	public final PLSQLPrinter.main_model_return main_model() throws RecognitionException {
		PLSQLPrinter.main_model_return retval = new PLSQLPrinter.main_model_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1316:5: ( ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) -> template( \"not implemented: main_model\")
			// PLSQLPrinter.g:1316:10: ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* )
			{
			match(input,MAIN_MODEL,FOLLOW_MAIN_MODEL_in_main_model12644); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1316:23: ( main_model_name )?
			int alt284=2;
			int LA284_0 = input.LA(1);
			if ( (LA284_0==MAIN_MODEL_NAME) ) {
				alt284=1;
			}
			switch (alt284) {
				case 1 :
					// PLSQLPrinter.g:1316:23: main_model_name
					{
					pushFollow(FOLLOW_main_model_name_in_main_model12646);
					main_model_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_model_column_clauses_in_main_model12649);
			model_column_clauses();
			state._fsp--;

			pushFollow(FOLLOW_model_rules_clause_in_main_model12651);
			model_rules_clause();
			state._fsp--;

			// PLSQLPrinter.g:1316:80: ( cell_reference_options )*
			loop285:
			while (true) {
				int alt285=2;
				int LA285_0 = input.LA(1);
				if ( (LA285_0==SQL92_RESERVED_UNIQUE||LA285_0==IGNORE_VK||LA285_0==KEEP_VK) ) {
					alt285=1;
				}

				switch (alt285) {
				case 1 :
					// PLSQLPrinter.g:1316:80: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_main_model12653);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop285;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1317:5: -> template( \"not implemented: main_model\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: main_model");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "main_model"


	public static class model_column_clauses_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column_clauses"
	// PLSQLPrinter.g:1320:1: model_column_clauses : ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? ) -> template( \"not implemented: model_column_clauses\";
	public final PLSQLPrinter.model_column_clauses_return model_column_clauses() throws RecognitionException {
		PLSQLPrinter.model_column_clauses_return retval = new PLSQLPrinter.model_column_clauses_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1321:5: ( ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? ) -> template( \"not implemented: model_column_clauses\")
			// PLSQLPrinter.g:1321:10: ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? )
			{
			match(input,MODEL_COLUMN,FOLLOW_MODEL_COLUMN_in_model_column_clauses12690); 
			match(input, Token.DOWN, null); 
			match(input,DIMENSION_VK,FOLLOW_DIMENSION_VK_in_model_column_clauses12693); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_clauses12695);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input,MEASURES_VK,FOLLOW_MEASURES_VK_in_model_column_clauses12699); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_clauses12701);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1321:92: ( model_column_partition_part )?
			int alt286=2;
			int LA286_0 = input.LA(1);
			if ( (LA286_0==PARTITION_VK) ) {
				alt286=1;
			}
			switch (alt286) {
				case 1 :
					// PLSQLPrinter.g:1321:92: model_column_partition_part
					{
					pushFollow(FOLLOW_model_column_partition_part_in_model_column_clauses12704);
					model_column_partition_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1322:5: -> template( \"not implemented: model_column_clauses\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column_clauses");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column_clauses"


	public static class model_column_partition_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column_partition_part"
	// PLSQLPrinter.g:1325:1: model_column_partition_part : ^( PARTITION_VK model_column_list ) -> template( \"not implemented: model_column_partition_part\";
	public final PLSQLPrinter.model_column_partition_part_return model_column_partition_part() throws RecognitionException {
		PLSQLPrinter.model_column_partition_part_return retval = new PLSQLPrinter.model_column_partition_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1326:5: ( ^( PARTITION_VK model_column_list ) -> template( \"not implemented: model_column_partition_part\")
			// PLSQLPrinter.g:1326:10: ^( PARTITION_VK model_column_list )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_model_column_partition_part12741); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_partition_part12743);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1327:5: -> template( \"not implemented: model_column_partition_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column_partition_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column_partition_part"


	public static class model_column_list_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column_list"
	// PLSQLPrinter.g:1330:1: model_column_list : ^( MODEL_COLUMNS ( model_column )+ ) -> template( \"not implemented: model_column_list\";
	public final PLSQLPrinter.model_column_list_return model_column_list() throws RecognitionException {
		PLSQLPrinter.model_column_list_return retval = new PLSQLPrinter.model_column_list_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1331:5: ( ^( MODEL_COLUMNS ( model_column )+ ) -> template( \"not implemented: model_column_list\")
			// PLSQLPrinter.g:1331:10: ^( MODEL_COLUMNS ( model_column )+ )
			{
			match(input,MODEL_COLUMNS,FOLLOW_MODEL_COLUMNS_in_model_column_list12779); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1331:26: ( model_column )+
			int cnt287=0;
			loop287:
			while (true) {
				int alt287=2;
				int LA287_0 = input.LA(1);
				if ( (LA287_0==MODEL_COLUMN) ) {
					alt287=1;
				}

				switch (alt287) {
				case 1 :
					// PLSQLPrinter.g:1331:26: model_column
					{
					pushFollow(FOLLOW_model_column_in_model_column_list12781);
					model_column();
					state._fsp--;

					}
					break;

				default :
					if ( cnt287 >= 1 ) break loop287;
					EarlyExitException eee = new EarlyExitException(287, input);
					throw eee;
				}
				cnt287++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1332:5: -> template( \"not implemented: model_column_list\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column_list");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column_list"


	public static class model_column_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column"
	// PLSQLPrinter.g:1335:1: model_column : ^( MODEL_COLUMN ( alias )? expression ) -> template( \"not implemented: model_column\";
	public final PLSQLPrinter.model_column_return model_column() throws RecognitionException {
		PLSQLPrinter.model_column_return retval = new PLSQLPrinter.model_column_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1336:5: ( ^( MODEL_COLUMN ( alias )? expression ) -> template( \"not implemented: model_column\")
			// PLSQLPrinter.g:1336:10: ^( MODEL_COLUMN ( alias )? expression )
			{
			match(input,MODEL_COLUMN,FOLLOW_MODEL_COLUMN_in_model_column12818); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1336:25: ( alias )?
			int alt288=2;
			int LA288_0 = input.LA(1);
			if ( (LA288_0==ALIAS) ) {
				alt288=1;
			}
			switch (alt288) {
				case 1 :
					// PLSQLPrinter.g:1336:25: alias
					{
					pushFollow(FOLLOW_alias_in_model_column12820);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_expression_in_model_column12823);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1337:5: -> template( \"not implemented: model_column\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column"


	public static class model_rules_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_rules_clause"
	// PLSQLPrinter.g:1340:1: model_rules_clause : ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) -> template( \"not implemented: model_rules_clause\";
	public final PLSQLPrinter.model_rules_clause_return model_rules_clause() throws RecognitionException {
		PLSQLPrinter.model_rules_clause_return retval = new PLSQLPrinter.model_rules_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1341:5: ( ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) -> template( \"not implemented: model_rules_clause\")
			// PLSQLPrinter.g:1341:10: ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? )
			{
			match(input,MODEL_RULES,FOLLOW_MODEL_RULES_in_model_rules_clause12860); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1341:24: ( model_rules_element )+
			int cnt289=0;
			loop289:
			while (true) {
				int alt289=2;
				int LA289_0 = input.LA(1);
				if ( (LA289_0==MODEL_RULE) ) {
					alt289=1;
				}

				switch (alt289) {
				case 1 :
					// PLSQLPrinter.g:1341:24: model_rules_element
					{
					pushFollow(FOLLOW_model_rules_element_in_model_rules_clause12862);
					model_rules_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt289 >= 1 ) break loop289;
					EarlyExitException eee = new EarlyExitException(289, input);
					throw eee;
				}
				cnt289++;
			}

			// PLSQLPrinter.g:1341:45: ( model_rules_part )?
			int alt290=2;
			int LA290_0 = input.LA(1);
			if ( (LA290_0==RULES_VK) ) {
				alt290=1;
			}
			switch (alt290) {
				case 1 :
					// PLSQLPrinter.g:1341:45: model_rules_part
					{
					pushFollow(FOLLOW_model_rules_part_in_model_rules_clause12865);
					model_rules_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1342:5: -> template( \"not implemented: model_rules_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_rules_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_rules_clause"


	public static class model_rules_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_rules_part"
	// PLSQLPrinter.g:1345:1: model_rules_part : ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? ) -> template( \"not implemented: model_rules_part\";
	public final PLSQLPrinter.model_rules_part_return model_rules_part() throws RecognitionException {
		PLSQLPrinter.model_rules_part_return retval = new PLSQLPrinter.model_rules_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1346:5: ( ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? ) -> template( \"not implemented: model_rules_part\")
			// PLSQLPrinter.g:1346:10: ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? )
			{
			match(input,RULES_VK,FOLLOW_RULES_VK_in_model_rules_part12902); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1347:13: ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )?
				int alt292=3;
				int LA292_0 = input.LA(1);
				if ( (LA292_0==SQL92_RESERVED_UPDATE) ) {
					alt292=1;
				}
				else if ( (LA292_0==UPSERT_VK) ) {
					alt292=2;
				}
				switch (alt292) {
					case 1 :
						// PLSQLPrinter.g:1347:14: SQL92_RESERVED_UPDATE
						{
						match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_part12918); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1347:36: UPSERT_VK ( SQL92_RESERVED_ALL )?
						{
						match(input,UPSERT_VK,FOLLOW_UPSERT_VK_in_model_rules_part12920); 
						// PLSQLPrinter.g:1347:46: ( SQL92_RESERVED_ALL )?
						int alt291=2;
						int LA291_0 = input.LA(1);
						if ( (LA291_0==SQL92_RESERVED_ALL) ) {
							alt291=1;
						}
						switch (alt291) {
							case 1 :
								// PLSQLPrinter.g:1347:46: SQL92_RESERVED_ALL
								{
								match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_model_rules_part12922); 
								}
								break;

						}

						}
						break;

				}

				// PLSQLPrinter.g:1348:13: ( AUTOMATIC_VK | SEQUENTIAL_VK )?
				int alt293=3;
				int LA293_0 = input.LA(1);
				if ( (LA293_0==AUTOMATIC_VK) ) {
					alt293=1;
				}
				else if ( (LA293_0==SEQUENTIAL_VK) ) {
					alt293=2;
				}
				switch (alt293) {
					case 1 :
						// PLSQLPrinter.g:1348:14: AUTOMATIC_VK
						{
						match(input,AUTOMATIC_VK,FOLLOW_AUTOMATIC_VK_in_model_rules_part12941); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1348:27: SEQUENTIAL_VK
						{
						match(input,SEQUENTIAL_VK,FOLLOW_SEQUENTIAL_VK_in_model_rules_part12943); 
						}
						break;

				}

				// PLSQLPrinter.g:1349:13: ( model_iterate_clause )?
				int alt294=2;
				int LA294_0 = input.LA(1);
				if ( (LA294_0==ITERATE_VK) ) {
					alt294=1;
				}
				switch (alt294) {
					case 1 :
						// PLSQLPrinter.g:1349:13: model_iterate_clause
						{
						pushFollow(FOLLOW_model_iterate_clause_in_model_rules_part12960);
						model_iterate_clause();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1351:5: -> template( \"not implemented: model_rules_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_rules_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_rules_part"


	public static class model_rules_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_rules_element"
	// PLSQLPrinter.g:1354:1: model_rules_element : ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? ) -> template( \"not implemented: model_rules_element\";
	public final PLSQLPrinter.model_rules_element_return model_rules_element() throws RecognitionException {
		PLSQLPrinter.model_rules_element_return retval = new PLSQLPrinter.model_rules_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1355:5: ( ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? ) -> template( \"not implemented: model_rules_element\")
			// PLSQLPrinter.g:1355:10: ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? )
			{
			match(input,MODEL_RULE,FOLLOW_MODEL_RULE_in_model_rules_element13006); 
			match(input, Token.DOWN, null); 
			match(input,ASSIGN,FOLLOW_ASSIGN_in_model_rules_element13022); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_expression_in_model_rules_element13024);
			model_expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_model_rules_element13026);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1357:13: ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )?
			int alt296=3;
			int LA296_0 = input.LA(1);
			if ( (LA296_0==SQL92_RESERVED_UPDATE) ) {
				alt296=1;
			}
			else if ( (LA296_0==UPSERT_VK) ) {
				alt296=2;
			}
			switch (alt296) {
				case 1 :
					// PLSQLPrinter.g:1357:14: SQL92_RESERVED_UPDATE
					{
					match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_element13043); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1357:36: UPSERT_VK ( SQL92_RESERVED_ALL )?
					{
					match(input,UPSERT_VK,FOLLOW_UPSERT_VK_in_model_rules_element13045); 
					// PLSQLPrinter.g:1357:46: ( SQL92_RESERVED_ALL )?
					int alt295=2;
					int LA295_0 = input.LA(1);
					if ( (LA295_0==SQL92_RESERVED_ALL) ) {
						alt295=1;
					}
					switch (alt295) {
						case 1 :
							// PLSQLPrinter.g:1357:46: SQL92_RESERVED_ALL
							{
							match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_model_rules_element13047); 
							}
							break;

					}

					}
					break;

			}

			// PLSQLPrinter.g:1358:13: ( order_by_clause )?
			int alt297=2;
			int LA297_0 = input.LA(1);
			if ( (LA297_0==SQL92_RESERVED_ORDER) ) {
				alt297=1;
			}
			switch (alt297) {
				case 1 :
					// PLSQLPrinter.g:1358:13: order_by_clause
					{
					pushFollow(FOLLOW_order_by_clause_in_model_rules_element13065);
					order_by_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1360:5: -> template( \"not implemented: model_rules_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_rules_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_rules_element"


	public static class model_iterate_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_iterate_clause"
	// PLSQLPrinter.g:1363:1: model_iterate_clause : ^( ITERATE_VK expression ( until_part )? ) -> template( \"not implemented: model_iterate_clause\";
	public final PLSQLPrinter.model_iterate_clause_return model_iterate_clause() throws RecognitionException {
		PLSQLPrinter.model_iterate_clause_return retval = new PLSQLPrinter.model_iterate_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1364:5: ( ^( ITERATE_VK expression ( until_part )? ) -> template( \"not implemented: model_iterate_clause\")
			// PLSQLPrinter.g:1364:10: ^( ITERATE_VK expression ( until_part )? )
			{
			match(input,ITERATE_VK,FOLLOW_ITERATE_VK_in_model_iterate_clause13111); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_model_iterate_clause13113);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1364:34: ( until_part )?
			int alt298=2;
			int LA298_0 = input.LA(1);
			if ( (LA298_0==UNTIL_VK) ) {
				alt298=1;
			}
			switch (alt298) {
				case 1 :
					// PLSQLPrinter.g:1364:34: until_part
					{
					pushFollow(FOLLOW_until_part_in_model_iterate_clause13115);
					until_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1365:5: -> template( \"not implemented: model_iterate_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_iterate_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_iterate_clause"


	public static class until_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "until_part"
	// PLSQLPrinter.g:1368:1: until_part : ^( UNTIL_VK expression ) -> template( \"not implemented: until_part\";
	public final PLSQLPrinter.until_part_return until_part() throws RecognitionException {
		PLSQLPrinter.until_part_return retval = new PLSQLPrinter.until_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1369:5: ( ^( UNTIL_VK expression ) -> template( \"not implemented: until_part\")
			// PLSQLPrinter.g:1369:10: ^( UNTIL_VK expression )
			{
			match(input,UNTIL_VK,FOLLOW_UNTIL_VK_in_until_part13152); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_until_part13154);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1370:5: -> template( \"not implemented: until_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: until_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "until_part"


	public static class order_by_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "order_by_clause"
	// PLSQLPrinter.g:1373:1: order_by_clause : ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS (elements+= order_by_elements )+ ) ) -> order_by_clause(is_siblings=$SIBLINGS_VK != nullelements=$elements);
	public final PLSQLPrinter.order_by_clause_return order_by_clause() throws RecognitionException {
		PLSQLPrinter.order_by_clause_return retval = new PLSQLPrinter.order_by_clause_return();
		retval.start = input.LT(1);

		CommonTree SIBLINGS_VK190=null;
		List<Object> list_elements=null;
		RuleReturnScope elements = null;
		try {
			// PLSQLPrinter.g:1374:5: ( ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS (elements+= order_by_elements )+ ) ) -> order_by_clause(is_siblings=$SIBLINGS_VK != nullelements=$elements))
			// PLSQLPrinter.g:1374:10: ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS (elements+= order_by_elements )+ ) )
			{
			match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_order_by_clause13190); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1374:33: ( SIBLINGS_VK )?
			int alt299=2;
			int LA299_0 = input.LA(1);
			if ( (LA299_0==SIBLINGS_VK) ) {
				alt299=1;
			}
			switch (alt299) {
				case 1 :
					// PLSQLPrinter.g:1374:33: SIBLINGS_VK
					{
					SIBLINGS_VK190=(CommonTree)match(input,SIBLINGS_VK,FOLLOW_SIBLINGS_VK_in_order_by_clause13192); 
					}
					break;

			}

			match(input,ORDER_BY_ELEMENTS,FOLLOW_ORDER_BY_ELEMENTS_in_order_by_clause13196); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1374:74: (elements+= order_by_elements )+
			int cnt300=0;
			loop300:
			while (true) {
				int alt300=2;
				int LA300_0 = input.LA(1);
				if ( (LA300_0==ORDER_BY_ELEMENT) ) {
					alt300=1;
				}

				switch (alt300) {
				case 1 :
					// PLSQLPrinter.g:1374:74: elements+= order_by_elements
					{
					pushFollow(FOLLOW_order_by_elements_in_order_by_clause13200);
					elements=order_by_elements();
					state._fsp--;

					if (list_elements==null) list_elements=new ArrayList<Object>();
					list_elements.add(elements.getTemplate());
					}
					break;

				default :
					if ( cnt300 >= 1 ) break loop300;
					EarlyExitException eee = new EarlyExitException(300, input);
					throw eee;
				}
				cnt300++;
			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1375:5: -> order_by_clause(is_siblings=$SIBLINGS_VK != nullelements=$elements)
			{
				retval.st = templateLib.getInstanceOf("order_by_clause",new STAttrMap().put("is_siblings", SIBLINGS_VK190 != null).put("elements", list_elements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "order_by_clause"


	public static class order_by_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "order_by_elements"
	// PLSQLPrinter.g:1378:1: order_by_elements : ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? ) -> order_by_elements(expression=$expression.stis_asc=$SQL92_RESERVED_ASC != nullis_desc=$SQL92_RESERVED_DESC != nullis_nulls_first=$FIRST_VK != nullis_nulls_last=$LAST_VK != null);
	public final PLSQLPrinter.order_by_elements_return order_by_elements() throws RecognitionException {
		PLSQLPrinter.order_by_elements_return retval = new PLSQLPrinter.order_by_elements_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_ASC192=null;
		CommonTree SQL92_RESERVED_DESC193=null;
		CommonTree FIRST_VK194=null;
		CommonTree LAST_VK195=null;
		TreeRuleReturnScope expression191 =null;

		try {
			// PLSQLPrinter.g:1379:5: ( ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? ) -> order_by_elements(expression=$expression.stis_asc=$SQL92_RESERVED_ASC != nullis_desc=$SQL92_RESERVED_DESC != nullis_nulls_first=$FIRST_VK != nullis_nulls_last=$LAST_VK != null))
			// PLSQLPrinter.g:1379:10: ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? )
			{
			match(input,ORDER_BY_ELEMENT,FOLLOW_ORDER_BY_ELEMENT_in_order_by_elements13244); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_order_by_elements13246);
			expression191=expression();
			state._fsp--;

			// PLSQLPrinter.g:1379:40: ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )?
			int alt301=3;
			int LA301_0 = input.LA(1);
			if ( (LA301_0==SQL92_RESERVED_ASC) ) {
				alt301=1;
			}
			else if ( (LA301_0==SQL92_RESERVED_DESC) ) {
				alt301=2;
			}
			switch (alt301) {
				case 1 :
					// PLSQLPrinter.g:1379:41: SQL92_RESERVED_ASC
					{
					SQL92_RESERVED_ASC192=(CommonTree)match(input,SQL92_RESERVED_ASC,FOLLOW_SQL92_RESERVED_ASC_in_order_by_elements13249); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1379:60: SQL92_RESERVED_DESC
					{
					SQL92_RESERVED_DESC193=(CommonTree)match(input,SQL92_RESERVED_DESC,FOLLOW_SQL92_RESERVED_DESC_in_order_by_elements13251); 
					}
					break;

			}

			// PLSQLPrinter.g:1379:82: ( NULLS_VK ( FIRST_VK | LAST_VK ) )?
			int alt303=2;
			int LA303_0 = input.LA(1);
			if ( (LA303_0==NULLS_VK) ) {
				alt303=1;
			}
			switch (alt303) {
				case 1 :
					// PLSQLPrinter.g:1379:83: NULLS_VK ( FIRST_VK | LAST_VK )
					{
					match(input,NULLS_VK,FOLLOW_NULLS_VK_in_order_by_elements13256); 
					// PLSQLPrinter.g:1379:92: ( FIRST_VK | LAST_VK )
					int alt302=2;
					int LA302_0 = input.LA(1);
					if ( (LA302_0==FIRST_VK) ) {
						alt302=1;
					}
					else if ( (LA302_0==LAST_VK) ) {
						alt302=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 302, 0, input);
						throw nvae;
					}

					switch (alt302) {
						case 1 :
							// PLSQLPrinter.g:1379:93: FIRST_VK
							{
							FIRST_VK194=(CommonTree)match(input,FIRST_VK,FOLLOW_FIRST_VK_in_order_by_elements13259); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1379:102: LAST_VK
							{
							LAST_VK195=(CommonTree)match(input,LAST_VK,FOLLOW_LAST_VK_in_order_by_elements13261); 
							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1380:5: -> order_by_elements(expression=$expression.stis_asc=$SQL92_RESERVED_ASC != nullis_desc=$SQL92_RESERVED_DESC != nullis_nulls_first=$FIRST_VK != nullis_nulls_last=$LAST_VK != null)
			{
				retval.st = templateLib.getInstanceOf("order_by_elements",new STAttrMap().put("expression", (expression191!=null?((StringTemplate)expression191.getTemplate()):null)).put("is_asc", SQL92_RESERVED_ASC192 != null).put("is_desc", SQL92_RESERVED_DESC193 != null).put("is_nulls_first", FIRST_VK194 != null).put("is_nulls_last", LAST_VK195 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "order_by_elements"


	public static class for_update_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_update_clause"
	// PLSQLPrinter.g:1385:1: for_update_clause : ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? ) -> template( \"not implemented: for_update_clause\";
	public final PLSQLPrinter.for_update_clause_return for_update_clause() throws RecognitionException {
		PLSQLPrinter.for_update_clause_return retval = new PLSQLPrinter.for_update_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1386:5: ( ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? ) -> template( \"not implemented: for_update_clause\")
			// PLSQLPrinter.g:1386:10: ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? )
			{
			match(input,SQL92_RESERVED_FOR,FOLLOW_SQL92_RESERVED_FOR_in_for_update_clause13342); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1386:31: ( for_update_of_part )?
				int alt304=2;
				int LA304_0 = input.LA(1);
				if ( (LA304_0==SQL92_RESERVED_OF) ) {
					alt304=1;
				}
				switch (alt304) {
					case 1 :
						// PLSQLPrinter.g:1386:31: for_update_of_part
						{
						pushFollow(FOLLOW_for_update_of_part_in_for_update_clause13344);
						for_update_of_part();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1386:51: ( for_update_options )?
				int alt305=2;
				int LA305_0 = input.LA(1);
				if ( (LA305_0==PLSQL_RESERVED_NOWAIT||LA305_0==SKIP_VK||LA305_0==WAIT_VK) ) {
					alt305=1;
				}
				switch (alt305) {
					case 1 :
						// PLSQLPrinter.g:1386:51: for_update_options
						{
						pushFollow(FOLLOW_for_update_options_in_for_update_clause13347);
						for_update_options();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1387:5: -> template( \"not implemented: for_update_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: for_update_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_update_clause"


	public static class for_update_of_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_update_of_part"
	// PLSQLPrinter.g:1390:1: for_update_of_part : ^( SQL92_RESERVED_OF ( column_name )+ ) -> template( \"not implemented: for_update_of_part\";
	public final PLSQLPrinter.for_update_of_part_return for_update_of_part() throws RecognitionException {
		PLSQLPrinter.for_update_of_part_return retval = new PLSQLPrinter.for_update_of_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1391:5: ( ^( SQL92_RESERVED_OF ( column_name )+ ) -> template( \"not implemented: for_update_of_part\")
			// PLSQLPrinter.g:1391:10: ^( SQL92_RESERVED_OF ( column_name )+ )
			{
			match(input,SQL92_RESERVED_OF,FOLLOW_SQL92_RESERVED_OF_in_for_update_of_part13384); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1391:30: ( column_name )+
			int cnt306=0;
			loop306:
			while (true) {
				int alt306=2;
				int LA306_0 = input.LA(1);
				if ( (LA306_0==COLUMN_NAME) ) {
					alt306=1;
				}

				switch (alt306) {
				case 1 :
					// PLSQLPrinter.g:1391:30: column_name
					{
					pushFollow(FOLLOW_column_name_in_for_update_of_part13386);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt306 >= 1 ) break loop306;
					EarlyExitException eee = new EarlyExitException(306, input);
					throw eee;
				}
				cnt306++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1392:5: -> template( \"not implemented: for_update_of_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: for_update_of_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_update_of_part"


	public static class for_update_options_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_update_options"
	// PLSQLPrinter.g:1395:1: for_update_options : ( SKIP_VK -> template( \"not implemented: for_update_options\"| PLSQL_RESERVED_NOWAIT -> template( \"not implemented: for_update_options\"| ^( WAIT_VK expression ) -> template( \"not implemented: for_update_options\");
	public final PLSQLPrinter.for_update_options_return for_update_options() throws RecognitionException {
		PLSQLPrinter.for_update_options_return retval = new PLSQLPrinter.for_update_options_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1396:5: ( SKIP_VK -> template( \"not implemented: for_update_options\"| PLSQL_RESERVED_NOWAIT -> template( \"not implemented: for_update_options\"| ^( WAIT_VK expression ) -> template( \"not implemented: for_update_options\")
			int alt307=3;
			switch ( input.LA(1) ) {
			case SKIP_VK:
				{
				alt307=1;
				}
				break;
			case PLSQL_RESERVED_NOWAIT:
				{
				alt307=2;
				}
				break;
			case WAIT_VK:
				{
				alt307=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 307, 0, input);
				throw nvae;
			}
			switch (alt307) {
				case 1 :
					// PLSQLPrinter.g:1396:10: SKIP_VK
					{
					match(input,SKIP_VK,FOLLOW_SKIP_VK_in_for_update_options13422); 
					// TEMPLATE REWRITE
					// 1397:5: -> template( \"not implemented: for_update_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_update_options");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1398:10: PLSQL_RESERVED_NOWAIT
					{
					match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_for_update_options13447); 
					// TEMPLATE REWRITE
					// 1399:5: -> template( \"not implemented: for_update_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_update_options");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1400:10: ^( WAIT_VK expression )
					{
					match(input,WAIT_VK,FOLLOW_WAIT_VK_in_for_update_options13473); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_update_options13475);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1401:5: -> template( \"not implemented: for_update_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_update_options");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_update_options"


	public static class update_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "update_statement"
	// PLSQLPrinter.g:1406:1: update_statement : ^( SQL92_RESERVED_UPDATE general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> template( \"not implemented: update_statement\";
	public final PLSQLPrinter.update_statement_return update_statement() throws RecognitionException {
		PLSQLPrinter.update_statement_return retval = new PLSQLPrinter.update_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1407:5: ( ^( SQL92_RESERVED_UPDATE general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> template( \"not implemented: update_statement\")
			// PLSQLPrinter.g:1407:10: ^( SQL92_RESERVED_UPDATE general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
			{
			match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_update_statement13513); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_update_statement13515);
			general_table_ref();
			state._fsp--;

			pushFollow(FOLLOW_update_set_clause_in_update_statement13529);
			update_set_clause();
			state._fsp--;

			// PLSQLPrinter.g:1409:13: ( where_clause )?
			int alt308=2;
			int LA308_0 = input.LA(1);
			if ( (LA308_0==SQL92_RESERVED_WHERE) ) {
				alt308=1;
			}
			switch (alt308) {
				case 1 :
					// PLSQLPrinter.g:1409:13: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_update_statement13543);
					where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1409:27: ( static_returning_clause )?
			int alt309=2;
			int LA309_0 = input.LA(1);
			if ( (LA309_0==STATIC_RETURNING) ) {
				alt309=1;
			}
			switch (alt309) {
				case 1 :
					// PLSQLPrinter.g:1409:27: static_returning_clause
					{
					pushFollow(FOLLOW_static_returning_clause_in_update_statement13546);
					static_returning_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1409:52: ( error_logging_clause )?
			int alt310=2;
			int LA310_0 = input.LA(1);
			if ( (LA310_0==LOG_VK) ) {
				alt310=1;
			}
			switch (alt310) {
				case 1 :
					// PLSQLPrinter.g:1409:52: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_update_statement13549);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1411:5: -> template( \"not implemented: update_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: update_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "update_statement"


	public static class update_set_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "update_set_clause"
	// PLSQLPrinter.g:1415:1: update_set_clause : ^( SET_VK ( update_set_elements )+ ) -> template( \"not implemented: update_set_clause\";
	public final PLSQLPrinter.update_set_clause_return update_set_clause() throws RecognitionException {
		PLSQLPrinter.update_set_clause_return retval = new PLSQLPrinter.update_set_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1416:5: ( ^( SET_VK ( update_set_elements )+ ) -> template( \"not implemented: update_set_clause\")
			// PLSQLPrinter.g:1416:10: ^( SET_VK ( update_set_elements )+ )
			{
			match(input,SET_VK,FOLLOW_SET_VK_in_update_set_clause13596); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1416:19: ( update_set_elements )+
			int cnt311=0;
			loop311:
			while (true) {
				int alt311=2;
				int LA311_0 = input.LA(1);
				if ( (LA311_0==ASSIGN||LA311_0==VALUE_VK) ) {
					alt311=1;
				}

				switch (alt311) {
				case 1 :
					// PLSQLPrinter.g:1416:19: update_set_elements
					{
					pushFollow(FOLLOW_update_set_elements_in_update_set_clause13598);
					update_set_elements();
					state._fsp--;

					}
					break;

				default :
					if ( cnt311 >= 1 ) break loop311;
					EarlyExitException eee = new EarlyExitException(311, input);
					throw eee;
				}
				cnt311++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1417:5: -> template( \"not implemented: update_set_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: update_set_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "update_set_clause"


	public static class update_set_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "update_set_elements"
	// PLSQLPrinter.g:1420:1: update_set_elements : ( ^( ASSIGN column_name expression ) -> template( \"not implemented: update_set_elements\"| ^( ASSIGN ( column_name )+ subquery ) -> template( \"not implemented: update_set_elements\"| ^( VALUE_VK ( char_set_name )? ID expression ) -> template( \"not implemented: update_set_elements\");
	public final PLSQLPrinter.update_set_elements_return update_set_elements() throws RecognitionException {
		PLSQLPrinter.update_set_elements_return retval = new PLSQLPrinter.update_set_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1421:5: ( ^( ASSIGN column_name expression ) -> template( \"not implemented: update_set_elements\"| ^( ASSIGN ( column_name )+ subquery ) -> template( \"not implemented: update_set_elements\"| ^( VALUE_VK ( char_set_name )? ID expression ) -> template( \"not implemented: update_set_elements\")
			int alt314=3;
			alt314 = dfa314.predict(input);
			switch (alt314) {
				case 1 :
					// PLSQLPrinter.g:1421:10: ^( ASSIGN column_name expression )
					{
					match(input,ASSIGN,FOLLOW_ASSIGN_in_update_set_elements13635); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_column_name_in_update_set_elements13637);
					column_name();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_update_set_elements13639);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1422:5: -> template( \"not implemented: update_set_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: update_set_elements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1423:10: ^( ASSIGN ( column_name )+ subquery )
					{
					match(input,ASSIGN,FOLLOW_ASSIGN_in_update_set_elements13666); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1423:19: ( column_name )+
					int cnt312=0;
					loop312:
					while (true) {
						int alt312=2;
						int LA312_0 = input.LA(1);
						if ( (LA312_0==COLUMN_NAME) ) {
							alt312=1;
						}

						switch (alt312) {
						case 1 :
							// PLSQLPrinter.g:1423:19: column_name
							{
							pushFollow(FOLLOW_column_name_in_update_set_elements13668);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt312 >= 1 ) break loop312;
							EarlyExitException eee = new EarlyExitException(312, input);
							throw eee;
						}
						cnt312++;
					}

					pushFollow(FOLLOW_subquery_in_update_set_elements13671);
					subquery();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1424:5: -> template( \"not implemented: update_set_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: update_set_elements");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1425:10: ^( VALUE_VK ( char_set_name )? ID expression )
					{
					match(input,VALUE_VK,FOLLOW_VALUE_VK_in_update_set_elements13698); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1425:21: ( char_set_name )?
					int alt313=2;
					int LA313_0 = input.LA(1);
					if ( (LA313_0==CHAR_SET_NAME) ) {
						alt313=1;
					}
					switch (alt313) {
						case 1 :
							// PLSQLPrinter.g:1425:21: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_update_set_elements13700);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					match(input,ID,FOLLOW_ID_in_update_set_elements13703); 
					pushFollow(FOLLOW_expression_in_update_set_elements13705);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1426:5: -> template( \"not implemented: update_set_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: update_set_elements");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "update_set_elements"


	public static class delete_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "delete_statement"
	// PLSQLPrinter.g:1431:1: delete_statement : ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> template( \"not implemented: delete_statement\";
	public final PLSQLPrinter.delete_statement_return delete_statement() throws RecognitionException {
		PLSQLPrinter.delete_statement_return retval = new PLSQLPrinter.delete_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1432:5: ( ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> template( \"not implemented: delete_statement\")
			// PLSQLPrinter.g:1432:10: ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
			{
			match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_delete_statement13743); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_delete_statement13745);
			general_table_ref();
			state._fsp--;

			// PLSQLPrinter.g:1433:13: ( where_clause )?
			int alt315=2;
			int LA315_0 = input.LA(1);
			if ( (LA315_0==SQL92_RESERVED_WHERE) ) {
				alt315=1;
			}
			switch (alt315) {
				case 1 :
					// PLSQLPrinter.g:1433:13: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_delete_statement13759);
					where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1433:27: ( static_returning_clause )?
			int alt316=2;
			int LA316_0 = input.LA(1);
			if ( (LA316_0==STATIC_RETURNING) ) {
				alt316=1;
			}
			switch (alt316) {
				case 1 :
					// PLSQLPrinter.g:1433:27: static_returning_clause
					{
					pushFollow(FOLLOW_static_returning_clause_in_delete_statement13762);
					static_returning_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1433:52: ( error_logging_clause )?
			int alt317=2;
			int LA317_0 = input.LA(1);
			if ( (LA317_0==LOG_VK) ) {
				alt317=1;
			}
			switch (alt317) {
				case 1 :
					// PLSQLPrinter.g:1433:52: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_delete_statement13765);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1434:5: -> template( \"not implemented: delete_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: delete_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "delete_statement"


	public static class insert_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "insert_statement"
	// PLSQLPrinter.g:1437:1: insert_statement : ^( SQL92_RESERVED_INSERT ( single_table_insert | multi_table_insert ) ) -> template( \"not implemented: insert_statement\";
	public final PLSQLPrinter.insert_statement_return insert_statement() throws RecognitionException {
		PLSQLPrinter.insert_statement_return retval = new PLSQLPrinter.insert_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1438:5: ( ^( SQL92_RESERVED_INSERT ( single_table_insert | multi_table_insert ) ) -> template( \"not implemented: insert_statement\")
			// PLSQLPrinter.g:1438:10: ^( SQL92_RESERVED_INSERT ( single_table_insert | multi_table_insert ) )
			{
			match(input,SQL92_RESERVED_INSERT,FOLLOW_SQL92_RESERVED_INSERT_in_insert_statement13802); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1439:9: ( single_table_insert | multi_table_insert )
			int alt318=2;
			int LA318_0 = input.LA(1);
			if ( (LA318_0==SINGLE_TABLE_MODE) ) {
				alt318=1;
			}
			else if ( (LA318_0==MULTI_TABLE_MODE) ) {
				alt318=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 318, 0, input);
				throw nvae;
			}

			switch (alt318) {
				case 1 :
					// PLSQLPrinter.g:1439:14: single_table_insert
					{
					pushFollow(FOLLOW_single_table_insert_in_insert_statement13817);
					single_table_insert();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1440:14: multi_table_insert
					{
					pushFollow(FOLLOW_multi_table_insert_in_insert_statement13832);
					multi_table_insert();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1443:5: -> template( \"not implemented: insert_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: insert_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_statement"


	public static class single_table_insert_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "single_table_insert"
	// PLSQLPrinter.g:1448:1: single_table_insert : ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? ) -> template( \"not implemented: single_table_insert\";
	public final PLSQLPrinter.single_table_insert_return single_table_insert() throws RecognitionException {
		PLSQLPrinter.single_table_insert_return retval = new PLSQLPrinter.single_table_insert_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1449:5: ( ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? ) -> template( \"not implemented: single_table_insert\")
			// PLSQLPrinter.g:1449:10: ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? )
			{
			match(input,SINGLE_TABLE_MODE,FOLLOW_SINGLE_TABLE_MODE_in_single_table_insert13889); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_insert_into_clause_in_single_table_insert13891);
			insert_into_clause();
			state._fsp--;

			// PLSQLPrinter.g:1449:49: ( values_clause ( static_returning_clause )? | select_statement )
			int alt320=2;
			int LA320_0 = input.LA(1);
			if ( (LA320_0==SQL92_RESERVED_VALUES) ) {
				alt320=1;
			}
			else if ( (LA320_0==SELECT_STATEMENT) ) {
				alt320=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 320, 0, input);
				throw nvae;
			}

			switch (alt320) {
				case 1 :
					// PLSQLPrinter.g:1449:50: values_clause ( static_returning_clause )?
					{
					pushFollow(FOLLOW_values_clause_in_single_table_insert13894);
					values_clause();
					state._fsp--;

					// PLSQLPrinter.g:1449:64: ( static_returning_clause )?
					int alt319=2;
					int LA319_0 = input.LA(1);
					if ( (LA319_0==STATIC_RETURNING) ) {
						alt319=1;
					}
					switch (alt319) {
						case 1 :
							// PLSQLPrinter.g:1449:64: static_returning_clause
							{
							pushFollow(FOLLOW_static_returning_clause_in_single_table_insert13896);
							static_returning_clause();
							state._fsp--;

							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1449:90: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_single_table_insert13900);
					select_statement();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1449:108: ( error_logging_clause )?
			int alt321=2;
			int LA321_0 = input.LA(1);
			if ( (LA321_0==LOG_VK) ) {
				alt321=1;
			}
			switch (alt321) {
				case 1 :
					// PLSQLPrinter.g:1449:108: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_single_table_insert13903);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1450:5: -> template( \"not implemented: single_table_insert\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: single_table_insert");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "single_table_insert"


	public static class multi_table_insert_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "multi_table_insert"
	// PLSQLPrinter.g:1453:1: multi_table_insert : ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) ) -> template( \"not implemented: multi_table_insert\";
	public final PLSQLPrinter.multi_table_insert_return multi_table_insert() throws RecognitionException {
		PLSQLPrinter.multi_table_insert_return retval = new PLSQLPrinter.multi_table_insert_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1454:5: ( ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) ) -> template( \"not implemented: multi_table_insert\")
			// PLSQLPrinter.g:1454:10: ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) )
			{
			match(input,MULTI_TABLE_MODE,FOLLOW_MULTI_TABLE_MODE_in_multi_table_insert13940); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_select_statement_in_multi_table_insert13942);
			select_statement();
			state._fsp--;

			// PLSQLPrinter.g:1454:46: ( conditional_insert_clause | ( multi_table_element )+ )
			int alt323=2;
			int LA323_0 = input.LA(1);
			if ( (LA323_0==CONDITIONAL_INSERT) ) {
				alt323=1;
			}
			else if ( (LA323_0==TABLE_ELEMENT) ) {
				alt323=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 323, 0, input);
				throw nvae;
			}

			switch (alt323) {
				case 1 :
					// PLSQLPrinter.g:1454:47: conditional_insert_clause
					{
					pushFollow(FOLLOW_conditional_insert_clause_in_multi_table_insert13945);
					conditional_insert_clause();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1454:73: ( multi_table_element )+
					{
					// PLSQLPrinter.g:1454:73: ( multi_table_element )+
					int cnt322=0;
					loop322:
					while (true) {
						int alt322=2;
						int LA322_0 = input.LA(1);
						if ( (LA322_0==TABLE_ELEMENT) ) {
							alt322=1;
						}

						switch (alt322) {
						case 1 :
							// PLSQLPrinter.g:1454:73: multi_table_element
							{
							pushFollow(FOLLOW_multi_table_element_in_multi_table_insert13947);
							multi_table_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt322 >= 1 ) break loop322;
							EarlyExitException eee = new EarlyExitException(322, input);
							throw eee;
						}
						cnt322++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1455:5: -> template( \"not implemented: multi_table_insert\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: multi_table_insert");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "multi_table_insert"


	public static class multi_table_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "multi_table_element"
	// PLSQLPrinter.g:1458:1: multi_table_element : ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) -> template( \"not implemented: multi_table_element\";
	public final PLSQLPrinter.multi_table_element_return multi_table_element() throws RecognitionException {
		PLSQLPrinter.multi_table_element_return retval = new PLSQLPrinter.multi_table_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1459:5: ( ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) -> template( \"not implemented: multi_table_element\")
			// PLSQLPrinter.g:1459:10: ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? )
			{
			match(input,TABLE_ELEMENT,FOLLOW_TABLE_ELEMENT_in_multi_table_element13985); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_insert_into_clause_in_multi_table_element13987);
			insert_into_clause();
			state._fsp--;

			// PLSQLPrinter.g:1459:45: ( values_clause )?
			int alt324=2;
			int LA324_0 = input.LA(1);
			if ( (LA324_0==SQL92_RESERVED_VALUES) ) {
				alt324=1;
			}
			switch (alt324) {
				case 1 :
					// PLSQLPrinter.g:1459:45: values_clause
					{
					pushFollow(FOLLOW_values_clause_in_multi_table_element13989);
					values_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1459:60: ( error_logging_clause )?
			int alt325=2;
			int LA325_0 = input.LA(1);
			if ( (LA325_0==LOG_VK) ) {
				alt325=1;
			}
			switch (alt325) {
				case 1 :
					// PLSQLPrinter.g:1459:60: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_multi_table_element13992);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1460:5: -> template( \"not implemented: multi_table_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: multi_table_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "multi_table_element"


	public static class conditional_insert_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "conditional_insert_clause"
	// PLSQLPrinter.g:1463:1: conditional_insert_clause : ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) -> template( \"not implemented: conditional_insert_clause\";
	public final PLSQLPrinter.conditional_insert_clause_return conditional_insert_clause() throws RecognitionException {
		PLSQLPrinter.conditional_insert_clause_return retval = new PLSQLPrinter.conditional_insert_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1464:5: ( ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) -> template( \"not implemented: conditional_insert_clause\")
			// PLSQLPrinter.g:1464:10: ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? )
			{
			match(input,CONDITIONAL_INSERT,FOLLOW_CONDITIONAL_INSERT_in_conditional_insert_clause14029); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1464:31: ( SQL92_RESERVED_ALL | FIRST_VK )?
			int alt326=3;
			int LA326_0 = input.LA(1);
			if ( (LA326_0==SQL92_RESERVED_ALL) ) {
				alt326=1;
			}
			else if ( (LA326_0==FIRST_VK) ) {
				alt326=2;
			}
			switch (alt326) {
				case 1 :
					// PLSQLPrinter.g:1464:32: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_conditional_insert_clause14032); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1464:51: FIRST_VK
					{
					match(input,FIRST_VK,FOLLOW_FIRST_VK_in_conditional_insert_clause14034); 
					}
					break;

			}

			// PLSQLPrinter.g:1464:62: ( conditional_insert_when_part )+
			int cnt327=0;
			loop327:
			while (true) {
				int alt327=2;
				int LA327_0 = input.LA(1);
				if ( (LA327_0==SQL92_RESERVED_WHEN) ) {
					alt327=1;
				}

				switch (alt327) {
				case 1 :
					// PLSQLPrinter.g:1464:62: conditional_insert_when_part
					{
					pushFollow(FOLLOW_conditional_insert_when_part_in_conditional_insert_clause14038);
					conditional_insert_when_part();
					state._fsp--;

					}
					break;

				default :
					if ( cnt327 >= 1 ) break loop327;
					EarlyExitException eee = new EarlyExitException(327, input);
					throw eee;
				}
				cnt327++;
			}

			// PLSQLPrinter.g:1464:92: ( conditional_insert_else_part )?
			int alt328=2;
			int LA328_0 = input.LA(1);
			if ( (LA328_0==SQL92_RESERVED_ELSE) ) {
				alt328=1;
			}
			switch (alt328) {
				case 1 :
					// PLSQLPrinter.g:1464:92: conditional_insert_else_part
					{
					pushFollow(FOLLOW_conditional_insert_else_part_in_conditional_insert_clause14041);
					conditional_insert_else_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1465:5: -> template( \"not implemented: conditional_insert_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: conditional_insert_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "conditional_insert_clause"


	public static class conditional_insert_when_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "conditional_insert_when_part"
	// PLSQLPrinter.g:1468:1: conditional_insert_when_part : ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_when_part\";
	public final PLSQLPrinter.conditional_insert_when_part_return conditional_insert_when_part() throws RecognitionException {
		PLSQLPrinter.conditional_insert_when_part_return retval = new PLSQLPrinter.conditional_insert_when_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1469:5: ( ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_when_part\")
			// PLSQLPrinter.g:1469:10: ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_conditional_insert_when_part14079); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_conditional_insert_when_part14081);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1469:43: ( multi_table_element )+
			int cnt329=0;
			loop329:
			while (true) {
				int alt329=2;
				int LA329_0 = input.LA(1);
				if ( (LA329_0==TABLE_ELEMENT) ) {
					alt329=1;
				}

				switch (alt329) {
				case 1 :
					// PLSQLPrinter.g:1469:43: multi_table_element
					{
					pushFollow(FOLLOW_multi_table_element_in_conditional_insert_when_part14083);
					multi_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt329 >= 1 ) break loop329;
					EarlyExitException eee = new EarlyExitException(329, input);
					throw eee;
				}
				cnt329++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1470:5: -> template( \"not implemented: conditional_insert_when_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: conditional_insert_when_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "conditional_insert_when_part"


	public static class conditional_insert_else_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "conditional_insert_else_part"
	// PLSQLPrinter.g:1473:1: conditional_insert_else_part : ^( SQL92_RESERVED_ELSE ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_else_part\";
	public final PLSQLPrinter.conditional_insert_else_part_return conditional_insert_else_part() throws RecognitionException {
		PLSQLPrinter.conditional_insert_else_part_return retval = new PLSQLPrinter.conditional_insert_else_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1474:5: ( ^( SQL92_RESERVED_ELSE ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_else_part\")
			// PLSQLPrinter.g:1474:10: ^( SQL92_RESERVED_ELSE ( multi_table_element )+ )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_conditional_insert_else_part14120); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1474:32: ( multi_table_element )+
			int cnt330=0;
			loop330:
			while (true) {
				int alt330=2;
				int LA330_0 = input.LA(1);
				if ( (LA330_0==TABLE_ELEMENT) ) {
					alt330=1;
				}

				switch (alt330) {
				case 1 :
					// PLSQLPrinter.g:1474:32: multi_table_element
					{
					pushFollow(FOLLOW_multi_table_element_in_conditional_insert_else_part14122);
					multi_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt330 >= 1 ) break loop330;
					EarlyExitException eee = new EarlyExitException(330, input);
					throw eee;
				}
				cnt330++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1475:5: -> template( \"not implemented: conditional_insert_else_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: conditional_insert_else_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "conditional_insert_else_part"


	public static class insert_into_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "insert_into_clause"
	// PLSQLPrinter.g:1478:1: insert_into_clause : ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS ( column_name )* ) ) -> template( \"not implemented: insert_into_clause\";
	public final PLSQLPrinter.insert_into_clause_return insert_into_clause() throws RecognitionException {
		PLSQLPrinter.insert_into_clause_return retval = new PLSQLPrinter.insert_into_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1479:5: ( ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS ( column_name )* ) ) -> template( \"not implemented: insert_into_clause\")
			// PLSQLPrinter.g:1479:10: ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS ( column_name )* ) )
			{
			match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_insert_into_clause14159); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_insert_into_clause14161);
			general_table_ref();
			state._fsp--;

			match(input,COLUMNS,FOLLOW_COLUMNS_in_insert_into_clause14164); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1479:60: ( column_name )*
				loop331:
				while (true) {
					int alt331=2;
					int LA331_0 = input.LA(1);
					if ( (LA331_0==COLUMN_NAME) ) {
						alt331=1;
					}

					switch (alt331) {
					case 1 :
						// PLSQLPrinter.g:1479:60: column_name
						{
						pushFollow(FOLLOW_column_name_in_insert_into_clause14166);
						column_name();
						state._fsp--;

						}
						break;

					default :
						break loop331;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1480:5: -> template( \"not implemented: insert_into_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: insert_into_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_into_clause"


	public static class values_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "values_clause"
	// PLSQLPrinter.g:1483:1: values_clause : ^( SQL92_RESERVED_VALUES ( expression_list | expression ) ) -> template( \"not implemented: values_clause\";
	public final PLSQLPrinter.values_clause_return values_clause() throws RecognitionException {
		PLSQLPrinter.values_clause_return retval = new PLSQLPrinter.values_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1484:5: ( ^( SQL92_RESERVED_VALUES ( expression_list | expression ) ) -> template( \"not implemented: values_clause\")
			// PLSQLPrinter.g:1484:10: ^( SQL92_RESERVED_VALUES ( expression_list | expression ) )
			{
			match(input,SQL92_RESERVED_VALUES,FOLLOW_SQL92_RESERVED_VALUES_in_values_clause14204); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1484:34: ( expression_list | expression )
			int alt332=2;
			int LA332_0 = input.LA(1);
			if ( (LA332_0==EXPR_LIST) ) {
				alt332=1;
			}
			else if ( (LA332_0==EXPR||LA332_0==LOGIC_EXPR) ) {
				alt332=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 332, 0, input);
				throw nvae;
			}

			switch (alt332) {
				case 1 :
					// PLSQLPrinter.g:1484:35: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_values_clause14207);
					expression_list();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1484:51: expression
					{
					pushFollow(FOLLOW_expression_in_values_clause14209);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1485:5: -> template( \"not implemented: values_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: values_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "values_clause"


	public static class merge_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_statement"
	// PLSQLPrinter.g:1489:1: merge_statement : ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) -> template( \"not implemented: merge_statement\";
	public final PLSQLPrinter.merge_statement_return merge_statement() throws RecognitionException {
		PLSQLPrinter.merge_statement_return retval = new PLSQLPrinter.merge_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1490:5: ( ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) -> template( \"not implemented: merge_statement\")
			// PLSQLPrinter.g:1490:10: ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? )
			{
			match(input,MERGE_VK,FOLLOW_MERGE_VK_in_merge_statement14247); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1490:21: ( alias )?
			int alt333=2;
			int LA333_0 = input.LA(1);
			if ( (LA333_0==ALIAS) ) {
				alt333=1;
			}
			switch (alt333) {
				case 1 :
					// PLSQLPrinter.g:1490:21: alias
					{
					pushFollow(FOLLOW_alias_in_merge_statement14249);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_tableview_name_in_merge_statement14252);
			tableview_name();
			state._fsp--;

			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_merge_statement14268); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_selected_tableview_in_merge_statement14270);
			selected_tableview();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_merge_statement14272);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1492:14: ( merge_update_clause )?
			int alt334=2;
			int LA334_0 = input.LA(1);
			if ( (LA334_0==MERGE_UPDATE) ) {
				alt334=1;
			}
			switch (alt334) {
				case 1 :
					// PLSQLPrinter.g:1492:14: merge_update_clause
					{
					pushFollow(FOLLOW_merge_update_clause_in_merge_statement14288);
					merge_update_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1492:35: ( merge_insert_clause )?
			int alt335=2;
			int LA335_0 = input.LA(1);
			if ( (LA335_0==MERGE_INSERT) ) {
				alt335=1;
			}
			switch (alt335) {
				case 1 :
					// PLSQLPrinter.g:1492:35: merge_insert_clause
					{
					pushFollow(FOLLOW_merge_insert_clause_in_merge_statement14291);
					merge_insert_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1492:56: ( error_logging_clause )?
			int alt336=2;
			int LA336_0 = input.LA(1);
			if ( (LA336_0==LOG_VK) ) {
				alt336=1;
			}
			switch (alt336) {
				case 1 :
					// PLSQLPrinter.g:1492:56: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_merge_statement14294);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1493:5: -> template( \"not implemented: merge_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: merge_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_statement"


	public static class merge_update_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_update_clause"
	// PLSQLPrinter.g:1498:1: merge_update_clause : ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) -> template( \"not implemented: merge_update_clause\";
	public final PLSQLPrinter.merge_update_clause_return merge_update_clause() throws RecognitionException {
		PLSQLPrinter.merge_update_clause_return retval = new PLSQLPrinter.merge_update_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1499:5: ( ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) -> template( \"not implemented: merge_update_clause\")
			// PLSQLPrinter.g:1499:10: ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? )
			{
			match(input,MERGE_UPDATE,FOLLOW_MERGE_UPDATE_in_merge_update_clause14333); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1499:25: ( merge_element )+
			int cnt337=0;
			loop337:
			while (true) {
				int alt337=2;
				int LA337_0 = input.LA(1);
				if ( (LA337_0==ASSIGN) ) {
					alt337=1;
				}

				switch (alt337) {
				case 1 :
					// PLSQLPrinter.g:1499:25: merge_element
					{
					pushFollow(FOLLOW_merge_element_in_merge_update_clause14335);
					merge_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt337 >= 1 ) break loop337;
					EarlyExitException eee = new EarlyExitException(337, input);
					throw eee;
				}
				cnt337++;
			}

			// PLSQLPrinter.g:1499:40: ( where_clause )?
			int alt338=2;
			int LA338_0 = input.LA(1);
			if ( (LA338_0==SQL92_RESERVED_WHERE) ) {
				alt338=1;
			}
			switch (alt338) {
				case 1 :
					// PLSQLPrinter.g:1499:40: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_merge_update_clause14338);
					where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1499:54: ( merge_update_delete_part )?
			int alt339=2;
			int LA339_0 = input.LA(1);
			if ( (LA339_0==SQL92_RESERVED_DELETE) ) {
				alt339=1;
			}
			switch (alt339) {
				case 1 :
					// PLSQLPrinter.g:1499:54: merge_update_delete_part
					{
					pushFollow(FOLLOW_merge_update_delete_part_in_merge_update_clause14341);
					merge_update_delete_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1500:5: -> template( \"not implemented: merge_update_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: merge_update_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_update_clause"


	public static class merge_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_element"
	// PLSQLPrinter.g:1503:1: merge_element : ^( ASSIGN column_name expression ) -> template( \"not implemented: merge_element\";
	public final PLSQLPrinter.merge_element_return merge_element() throws RecognitionException {
		PLSQLPrinter.merge_element_return retval = new PLSQLPrinter.merge_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1504:5: ( ^( ASSIGN column_name expression ) -> template( \"not implemented: merge_element\")
			// PLSQLPrinter.g:1504:10: ^( ASSIGN column_name expression )
			{
			match(input,ASSIGN,FOLLOW_ASSIGN_in_merge_element14378); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_column_name_in_merge_element14380);
			column_name();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_merge_element14382);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1505:5: -> template( \"not implemented: merge_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: merge_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_element"


	public static class merge_update_delete_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_update_delete_part"
	// PLSQLPrinter.g:1508:1: merge_update_delete_part : ^( SQL92_RESERVED_DELETE where_clause ) -> template( \"not implemented: merge_update_delete_part\";
	public final PLSQLPrinter.merge_update_delete_part_return merge_update_delete_part() throws RecognitionException {
		PLSQLPrinter.merge_update_delete_part_return retval = new PLSQLPrinter.merge_update_delete_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1509:5: ( ^( SQL92_RESERVED_DELETE where_clause ) -> template( \"not implemented: merge_update_delete_part\")
			// PLSQLPrinter.g:1509:10: ^( SQL92_RESERVED_DELETE where_clause )
			{
			match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_merge_update_delete_part14418); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_where_clause_in_merge_update_delete_part14420);
			where_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1510:5: -> template( \"not implemented: merge_update_delete_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: merge_update_delete_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_update_delete_part"


	public static class merge_insert_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_insert_clause"
	// PLSQLPrinter.g:1513:1: merge_insert_clause : ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? ) -> template( \"not implemented: merge_insert_clause\";
	public final PLSQLPrinter.merge_insert_clause_return merge_insert_clause() throws RecognitionException {
		PLSQLPrinter.merge_insert_clause_return retval = new PLSQLPrinter.merge_insert_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1514:5: ( ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? ) -> template( \"not implemented: merge_insert_clause\")
			// PLSQLPrinter.g:1514:10: ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? )
			{
			match(input,MERGE_INSERT,FOLLOW_MERGE_INSERT_in_merge_insert_clause14456); 
			match(input, Token.DOWN, null); 
			match(input,COLUMNS,FOLLOW_COLUMNS_in_merge_insert_clause14459); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1514:35: ( column_name )*
				loop340:
				while (true) {
					int alt340=2;
					int LA340_0 = input.LA(1);
					if ( (LA340_0==COLUMN_NAME) ) {
						alt340=1;
					}

					switch (alt340) {
					case 1 :
						// PLSQLPrinter.g:1514:35: column_name
						{
						pushFollow(FOLLOW_column_name_in_merge_insert_clause14461);
						column_name();
						state._fsp--;

						}
						break;

					default :
						break loop340;
					}
				}

				match(input, Token.UP, null); 
			}

			pushFollow(FOLLOW_expression_list_in_merge_insert_clause14465);
			expression_list();
			state._fsp--;

			// PLSQLPrinter.g:1514:65: ( where_clause )?
			int alt341=2;
			int LA341_0 = input.LA(1);
			if ( (LA341_0==SQL92_RESERVED_WHERE) ) {
				alt341=1;
			}
			switch (alt341) {
				case 1 :
					// PLSQLPrinter.g:1514:65: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_merge_insert_clause14467);
					where_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1515:5: -> template( \"not implemented: merge_insert_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: merge_insert_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_insert_clause"


	public static class selected_tableview_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "selected_tableview"
	// PLSQLPrinter.g:1518:1: selected_tableview : ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name | select_statement ) ) -> template( \"not implemented: selected_tableview\";
	public final PLSQLPrinter.selected_tableview_return selected_tableview() throws RecognitionException {
		PLSQLPrinter.selected_tableview_return retval = new PLSQLPrinter.selected_tableview_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1519:5: ( ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name | select_statement ) ) -> template( \"not implemented: selected_tableview\")
			// PLSQLPrinter.g:1519:10: ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name | select_statement ) )
			{
			match(input,SELECTED_TABLEVIEW,FOLLOW_SELECTED_TABLEVIEW_in_selected_tableview14505); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1519:31: ( alias )?
			int alt342=2;
			int LA342_0 = input.LA(1);
			if ( (LA342_0==ALIAS) ) {
				alt342=1;
			}
			switch (alt342) {
				case 1 :
					// PLSQLPrinter.g:1519:31: alias
					{
					pushFollow(FOLLOW_alias_in_selected_tableview14507);
					alias();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1519:38: ( tableview_name | select_statement )
			int alt343=2;
			int LA343_0 = input.LA(1);
			if ( (LA343_0==TABLEVIEW_NAME) ) {
				alt343=1;
			}
			else if ( (LA343_0==SELECT_STATEMENT) ) {
				alt343=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 343, 0, input);
				throw nvae;
			}

			switch (alt343) {
				case 1 :
					// PLSQLPrinter.g:1519:39: tableview_name
					{
					pushFollow(FOLLOW_tableview_name_in_selected_tableview14511);
					tableview_name();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1519:54: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_selected_tableview14513);
					select_statement();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1520:5: -> template( \"not implemented: selected_tableview\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: selected_tableview");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selected_tableview"


	public static class lock_table_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "lock_table_statement"
	// PLSQLPrinter.g:1525:1: lock_table_statement : ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) -> template( \"not implemented: lock_table_statement\";
	public final PLSQLPrinter.lock_table_statement_return lock_table_statement() throws RecognitionException {
		PLSQLPrinter.lock_table_statement_return retval = new PLSQLPrinter.lock_table_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1526:5: ( ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) -> template( \"not implemented: lock_table_statement\")
			// PLSQLPrinter.g:1526:10: ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? )
			{
			match(input,PLSQL_RESERVED_LOCK,FOLLOW_PLSQL_RESERVED_LOCK_in_lock_table_statement14552); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1526:32: ( lock_table_element )+
			int cnt344=0;
			loop344:
			while (true) {
				int alt344=2;
				int LA344_0 = input.LA(1);
				if ( (LA344_0==LOCK_TABLE_ELEMENT) ) {
					alt344=1;
				}

				switch (alt344) {
				case 1 :
					// PLSQLPrinter.g:1526:32: lock_table_element
					{
					pushFollow(FOLLOW_lock_table_element_in_lock_table_statement14554);
					lock_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt344 >= 1 ) break loop344;
					EarlyExitException eee = new EarlyExitException(344, input);
					throw eee;
				}
				cnt344++;
			}

			pushFollow(FOLLOW_lock_mode_in_lock_table_statement14557);
			lock_mode();
			state._fsp--;

			// PLSQLPrinter.g:1526:62: ( wait_nowait_part )?
			int alt345=2;
			int LA345_0 = input.LA(1);
			if ( (LA345_0==PLSQL_RESERVED_NOWAIT||LA345_0==WAIT_VK) ) {
				alt345=1;
			}
			switch (alt345) {
				case 1 :
					// PLSQLPrinter.g:1526:62: wait_nowait_part
					{
					pushFollow(FOLLOW_wait_nowait_part_in_lock_table_statement14559);
					wait_nowait_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1527:5: -> template( \"not implemented: lock_table_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: lock_table_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_table_statement"


	public static class wait_nowait_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "wait_nowait_part"
	// PLSQLPrinter.g:1530:1: wait_nowait_part : ( ^( WAIT_VK expression ) -> template( \"not implemented: wait_nowait_part\"| PLSQL_RESERVED_NOWAIT -> template( \"not implemented: wait_nowait_part\");
	public final PLSQLPrinter.wait_nowait_part_return wait_nowait_part() throws RecognitionException {
		PLSQLPrinter.wait_nowait_part_return retval = new PLSQLPrinter.wait_nowait_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1531:5: ( ^( WAIT_VK expression ) -> template( \"not implemented: wait_nowait_part\"| PLSQL_RESERVED_NOWAIT -> template( \"not implemented: wait_nowait_part\")
			int alt346=2;
			int LA346_0 = input.LA(1);
			if ( (LA346_0==WAIT_VK) ) {
				alt346=1;
			}
			else if ( (LA346_0==PLSQL_RESERVED_NOWAIT) ) {
				alt346=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 346, 0, input);
				throw nvae;
			}

			switch (alt346) {
				case 1 :
					// PLSQLPrinter.g:1531:10: ^( WAIT_VK expression )
					{
					match(input,WAIT_VK,FOLLOW_WAIT_VK_in_wait_nowait_part14596); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_wait_nowait_part14598);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1532:5: -> template( \"not implemented: wait_nowait_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: wait_nowait_part");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1533:10: PLSQL_RESERVED_NOWAIT
					{
					match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_wait_nowait_part14624); 
					// TEMPLATE REWRITE
					// 1534:5: -> template( \"not implemented: wait_nowait_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: wait_nowait_part");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "wait_nowait_part"


	public static class lock_table_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "lock_table_element"
	// PLSQLPrinter.g:1539:1: lock_table_element : ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) -> template( \"not implemented: lock_table_element\";
	public final PLSQLPrinter.lock_table_element_return lock_table_element() throws RecognitionException {
		PLSQLPrinter.lock_table_element_return retval = new PLSQLPrinter.lock_table_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1540:5: ( ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) -> template( \"not implemented: lock_table_element\")
			// PLSQLPrinter.g:1540:10: ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? )
			{
			match(input,LOCK_TABLE_ELEMENT,FOLLOW_LOCK_TABLE_ELEMENT_in_lock_table_element14661); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_lock_table_element14663);
			tableview_name();
			state._fsp--;

			// PLSQLPrinter.g:1540:46: ( partition_extension_clause )?
			int alt347=2;
			int LA347_0 = input.LA(1);
			if ( (LA347_0==PARTITION_VK||LA347_0==SUBPARTITION_VK) ) {
				alt347=1;
			}
			switch (alt347) {
				case 1 :
					// PLSQLPrinter.g:1540:46: partition_extension_clause
					{
					pushFollow(FOLLOW_partition_extension_clause_in_lock_table_element14665);
					partition_extension_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1541:5: -> template( \"not implemented: lock_table_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: lock_table_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_table_element"


	public static class lock_mode_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "lock_mode"
	// PLSQLPrinter.g:1544:1: lock_mode : ( ROW_VK PLSQL_RESERVED_SHARE -> template( \"not implemented: lock_mode\"| ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )? -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\");
	public final PLSQLPrinter.lock_mode_return lock_mode() throws RecognitionException {
		PLSQLPrinter.lock_mode_return retval = new PLSQLPrinter.lock_mode_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1545:5: ( ROW_VK PLSQL_RESERVED_SHARE -> template( \"not implemented: lock_mode\"| ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )? -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\")
			int alt349=5;
			switch ( input.LA(1) ) {
			case ROW_VK:
				{
				int LA349_1 = input.LA(2);
				if ( (LA349_1==PLSQL_RESERVED_SHARE) ) {
					alt349=1;
				}
				else if ( (LA349_1==PLSQL_RESERVED_EXCLUSIVE) ) {
					alt349=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 349, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PLSQL_RESERVED_SHARE:
				{
				int LA349_2 = input.LA(2);
				if ( (LA349_2==ROW_VK) ) {
					alt349=4;
				}
				else if ( (LA349_2==UP||LA349_2==PLSQL_RESERVED_NOWAIT||LA349_2==SQL92_RESERVED_UPDATE||LA349_2==WAIT_VK) ) {
					alt349=3;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 349, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PLSQL_RESERVED_EXCLUSIVE:
				{
				alt349=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 349, 0, input);
				throw nvae;
			}
			switch (alt349) {
				case 1 :
					// PLSQLPrinter.g:1545:10: ROW_VK PLSQL_RESERVED_SHARE
					{
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode14701); 
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode14703); 
					// TEMPLATE REWRITE
					// 1546:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1547:10: ROW_VK PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode14728); 
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode14730); 
					// TEMPLATE REWRITE
					// 1548:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1549:10: PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )?
					{
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode14755); 
					// PLSQLPrinter.g:1549:31: ( SQL92_RESERVED_UPDATE )?
					int alt348=2;
					int LA348_0 = input.LA(1);
					if ( (LA348_0==SQL92_RESERVED_UPDATE) ) {
						alt348=1;
					}
					switch (alt348) {
						case 1 :
							// PLSQLPrinter.g:1549:31: SQL92_RESERVED_UPDATE
							{
							match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_lock_mode14757); 
							}
							break;

					}

					// TEMPLATE REWRITE
					// 1550:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1551:10: PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode14783); 
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode14785); 
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode14787); 
					// TEMPLATE REWRITE
					// 1552:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1553:10: PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode14812); 
					// TEMPLATE REWRITE
					// 1554:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_mode"


	public static class general_table_ref_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_table_ref"
	// PLSQLPrinter.g:1560:1: general_table_ref : ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? ) -> template( \"not implemented: general_table_ref\";
	public final PLSQLPrinter.general_table_ref_return general_table_ref() throws RecognitionException {
		PLSQLPrinter.general_table_ref_return retval = new PLSQLPrinter.general_table_ref_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1561:5: ( ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? ) -> template( \"not implemented: general_table_ref\")
			// PLSQLPrinter.g:1561:10: ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? )
			{
			match(input,TABLE_REF,FOLLOW_TABLE_REF_in_general_table_ref14850); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1561:22: ( alias )?
			int alt350=2;
			int LA350_0 = input.LA(1);
			if ( (LA350_0==ALIAS) ) {
				alt350=1;
			}
			switch (alt350) {
				case 1 :
					// PLSQLPrinter.g:1561:22: alias
					{
					pushFollow(FOLLOW_alias_in_general_table_ref14852);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_table_expression_clause_in_general_table_ref14855);
			dml_table_expression_clause();
			state._fsp--;

			// PLSQLPrinter.g:1561:57: ( ONLY_VK )?
			int alt351=2;
			int LA351_0 = input.LA(1);
			if ( (LA351_0==ONLY_VK) ) {
				alt351=1;
			}
			switch (alt351) {
				case 1 :
					// PLSQLPrinter.g:1561:57: ONLY_VK
					{
					match(input,ONLY_VK,FOLLOW_ONLY_VK_in_general_table_ref14857); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1562:5: -> template( \"not implemented: general_table_ref\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: general_table_ref");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_table_ref"


	public static class static_returning_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "static_returning_clause"
	// PLSQLPrinter.g:1565:1: static_returning_clause : ^( STATIC_RETURNING ( expression )+ into_clause ) -> template( \"not implemented: static_returning_clause\";
	public final PLSQLPrinter.static_returning_clause_return static_returning_clause() throws RecognitionException {
		PLSQLPrinter.static_returning_clause_return retval = new PLSQLPrinter.static_returning_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1566:5: ( ^( STATIC_RETURNING ( expression )+ into_clause ) -> template( \"not implemented: static_returning_clause\")
			// PLSQLPrinter.g:1566:10: ^( STATIC_RETURNING ( expression )+ into_clause )
			{
			match(input,STATIC_RETURNING,FOLLOW_STATIC_RETURNING_in_static_returning_clause14894); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1566:29: ( expression )+
			int cnt352=0;
			loop352:
			while (true) {
				int alt352=2;
				int LA352_0 = input.LA(1);
				if ( (LA352_0==EXPR||LA352_0==LOGIC_EXPR) ) {
					alt352=1;
				}

				switch (alt352) {
				case 1 :
					// PLSQLPrinter.g:1566:29: expression
					{
					pushFollow(FOLLOW_expression_in_static_returning_clause14896);
					expression();
					state._fsp--;

					}
					break;

				default :
					if ( cnt352 >= 1 ) break loop352;
					EarlyExitException eee = new EarlyExitException(352, input);
					throw eee;
				}
				cnt352++;
			}

			pushFollow(FOLLOW_into_clause_in_static_returning_clause14899);
			into_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1567:5: -> template( \"not implemented: static_returning_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: static_returning_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "static_returning_clause"


	public static class error_logging_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "error_logging_clause"
	// PLSQLPrinter.g:1570:1: error_logging_clause : ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? ) -> template( \"not implemented: error_logging_clause\";
	public final PLSQLPrinter.error_logging_clause_return error_logging_clause() throws RecognitionException {
		PLSQLPrinter.error_logging_clause_return retval = new PLSQLPrinter.error_logging_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1571:5: ( ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? ) -> template( \"not implemented: error_logging_clause\")
			// PLSQLPrinter.g:1571:10: ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? )
			{
			match(input,LOG_VK,FOLLOW_LOG_VK_in_error_logging_clause14935); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1571:19: ( error_logging_into_part )?
				int alt353=2;
				int LA353_0 = input.LA(1);
				if ( (LA353_0==SQL92_RESERVED_INTO) ) {
					alt353=1;
				}
				switch (alt353) {
					case 1 :
						// PLSQLPrinter.g:1571:19: error_logging_into_part
						{
						pushFollow(FOLLOW_error_logging_into_part_in_error_logging_clause14937);
						error_logging_into_part();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1571:44: ( expression )?
				int alt354=2;
				int LA354_0 = input.LA(1);
				if ( (LA354_0==EXPR||LA354_0==LOGIC_EXPR) ) {
					alt354=1;
				}
				switch (alt354) {
					case 1 :
						// PLSQLPrinter.g:1571:44: expression
						{
						pushFollow(FOLLOW_expression_in_error_logging_clause14940);
						expression();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1571:56: ( error_logging_reject_part )?
				int alt355=2;
				int LA355_0 = input.LA(1);
				if ( (LA355_0==REJECT_VK) ) {
					alt355=1;
				}
				switch (alt355) {
					case 1 :
						// PLSQLPrinter.g:1571:56: error_logging_reject_part
						{
						pushFollow(FOLLOW_error_logging_reject_part_in_error_logging_clause14943);
						error_logging_reject_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1572:5: -> template( \"not implemented: error_logging_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: error_logging_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "error_logging_clause"


	public static class error_logging_into_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "error_logging_into_part"
	// PLSQLPrinter.g:1575:1: error_logging_into_part : ^( SQL92_RESERVED_INTO tableview_name ) -> template( \"not implemented: error_logging_into_part\";
	public final PLSQLPrinter.error_logging_into_part_return error_logging_into_part() throws RecognitionException {
		PLSQLPrinter.error_logging_into_part_return retval = new PLSQLPrinter.error_logging_into_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1576:5: ( ^( SQL92_RESERVED_INTO tableview_name ) -> template( \"not implemented: error_logging_into_part\")
			// PLSQLPrinter.g:1576:10: ^( SQL92_RESERVED_INTO tableview_name )
			{
			match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_error_logging_into_part14980); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_error_logging_into_part14982);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1577:5: -> template( \"not implemented: error_logging_into_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: error_logging_into_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "error_logging_into_part"


	public static class error_logging_reject_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "error_logging_reject_part"
	// PLSQLPrinter.g:1580:1: error_logging_reject_part : ^( REJECT_VK ( UNLIMITED_VK | expression ) ) -> template( \"not implemented: error_logging_reject_part\";
	public final PLSQLPrinter.error_logging_reject_part_return error_logging_reject_part() throws RecognitionException {
		PLSQLPrinter.error_logging_reject_part_return retval = new PLSQLPrinter.error_logging_reject_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1581:5: ( ^( REJECT_VK ( UNLIMITED_VK | expression ) ) -> template( \"not implemented: error_logging_reject_part\")
			// PLSQLPrinter.g:1581:10: ^( REJECT_VK ( UNLIMITED_VK | expression ) )
			{
			match(input,REJECT_VK,FOLLOW_REJECT_VK_in_error_logging_reject_part15018); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1581:22: ( UNLIMITED_VK | expression )
			int alt356=2;
			int LA356_0 = input.LA(1);
			if ( (LA356_0==UNLIMITED_VK) ) {
				alt356=1;
			}
			else if ( (LA356_0==EXPR||LA356_0==LOGIC_EXPR) ) {
				alt356=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 356, 0, input);
				throw nvae;
			}

			switch (alt356) {
				case 1 :
					// PLSQLPrinter.g:1581:23: UNLIMITED_VK
					{
					match(input,UNLIMITED_VK,FOLLOW_UNLIMITED_VK_in_error_logging_reject_part15021); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1581:36: expression
					{
					pushFollow(FOLLOW_expression_in_error_logging_reject_part15023);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1582:5: -> template( \"not implemented: error_logging_reject_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: error_logging_reject_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "error_logging_reject_part"


	public static class dml_table_expression_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_table_expression_clause"
	// PLSQLPrinter.g:1585:1: dml_table_expression_clause : ( ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) -> template( \"not implemented: dml_table_expression_clause[COLLECTION_MODE]\"| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> template( \"not implemented: dml_table_expression_clause[SELECT_MODE]\"| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st }) ) | table_ref -> in_parens(val=$table_ref.st));
	public final PLSQLPrinter.dml_table_expression_clause_return dml_table_expression_clause() throws RecognitionException {
		PLSQLPrinter.dml_table_expression_clause_return retval = new PLSQLPrinter.dml_table_expression_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope tableview_name196 =null;
		TreeRuleReturnScope sample_clause197 =null;
		TreeRuleReturnScope general_element198 =null;
		TreeRuleReturnScope standard_function199 =null;
		TreeRuleReturnScope table_ref200 =null;

		try {
			// PLSQLPrinter.g:1586:5: ( ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) -> template( \"not implemented: dml_table_expression_clause[COLLECTION_MODE]\"| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> template( \"not implemented: dml_table_expression_clause[SELECT_MODE]\"| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st }) ) | table_ref -> in_parens(val=$table_ref.st))
			int alt361=2;
			int LA361_0 = input.LA(1);
			if ( (LA361_0==TABLE_EXPRESSION) ) {
				alt361=1;
			}
			else if ( (LA361_0==TABLE_REF) ) {
				alt361=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 361, 0, input);
				throw nvae;
			}

			switch (alt361) {
				case 1 :
					// PLSQLPrinter.g:1586:10: ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) -> template( \"not implemented: dml_table_expression_clause[COLLECTION_MODE]\"| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> template( \"not implemented: dml_table_expression_clause[SELECT_MODE]\"| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st }) )
					{
					match(input,TABLE_EXPRESSION,FOLLOW_TABLE_EXPRESSION_in_dml_table_expression_clause15060); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1587:9: ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) -> template( \"not implemented: dml_table_expression_clause[COLLECTION_MODE]\"| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> template( \"not implemented: dml_table_expression_clause[SELECT_MODE]\"| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st })
					int alt360=5;
					switch ( input.LA(1) ) {
					case COLLECTION_MODE:
						{
						alt360=1;
						}
						break;
					case SELECT_MODE:
						{
						alt360=2;
						}
						break;
					case DIRECT_MODE:
						{
						alt360=3;
						}
						break;
					case CASCATED_ELEMENT:
						{
						alt360=4;
						}
						break;
					case CAST_VK:
					case CHR_VK:
					case COLLECT_VK:
					case COUNT_VK:
					case DECOMPOSE_VK:
					case EXTRACT_VK:
					case FIRST_VALUE_VK:
					case FUNCTION_ENABLING_OVER:
					case FUNCTION_ENABLING_USING:
					case FUNCTION_ENABLING_WITHIN_OR_OVER:
					case LAST_VALUE_VK:
					case PREDICTION_FUNCTION:
					case TRANSLATE_VK:
					case TREAT_VK:
					case TRIM_VK:
					case XMLAGG_VK:
					case XMLCAST_VK:
					case XMLCOLATTVAL_VK:
					case XMLELEMENT_VK:
					case XMLEXISTS_VK:
					case XMLFOREST_VK:
					case XMLPARSE_VK:
					case XMLPI_VK:
					case XMLQUERY_VK:
					case XMLROOT_VK:
					case XMLSERIALIZE_VK:
					case XMLTABLE_VK:
						{
						alt360=5;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 360, 0, input);
						throw nvae;
					}
					switch (alt360) {
						case 1 :
							// PLSQLPrinter.g:1587:14: ^( COLLECTION_MODE expression ( PLUS_SIGN )? )
							{
							match(input,COLLECTION_MODE,FOLLOW_COLLECTION_MODE_in_dml_table_expression_clause15077); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_expression_in_dml_table_expression_clause15079);
							expression();
							state._fsp--;

							// PLSQLPrinter.g:1587:43: ( PLUS_SIGN )?
							int alt357=2;
							int LA357_0 = input.LA(1);
							if ( (LA357_0==PLUS_SIGN) ) {
								alt357=1;
							}
							switch (alt357) {
								case 1 :
									// PLSQLPrinter.g:1587:43: PLUS_SIGN
									{
									match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_dml_table_expression_clause15081); 
									}
									break;

							}

							match(input, Token.UP, null); 

							// TEMPLATE REWRITE
							// 1588:15: -> template( \"not implemented: dml_table_expression_clause[COLLECTION_MODE]\"
							{
								retval.st = new StringTemplate(templateLib, "not implemented: dml_table_expression_clause[COLLECTION_MODE]");
							}



							}
							break;
						case 2 :
							// PLSQLPrinter.g:1589:14: ^( SELECT_MODE select_statement ( subquery_restriction_clause )? )
							{
							match(input,SELECT_MODE,FOLLOW_SELECT_MODE_in_dml_table_expression_clause15123); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_select_statement_in_dml_table_expression_clause15125);
							select_statement();
							state._fsp--;

							// PLSQLPrinter.g:1589:45: ( subquery_restriction_clause )?
							int alt358=2;
							int LA358_0 = input.LA(1);
							if ( (LA358_0==SQL92_RESERVED_WITH) ) {
								alt358=1;
							}
							switch (alt358) {
								case 1 :
									// PLSQLPrinter.g:1589:45: subquery_restriction_clause
									{
									pushFollow(FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause15127);
									subquery_restriction_clause();
									state._fsp--;

									}
									break;

							}

							match(input, Token.UP, null); 

							// TEMPLATE REWRITE
							// 1590:15: -> template( \"not implemented: dml_table_expression_clause[SELECT_MODE]\"
							{
								retval.st = new StringTemplate(templateLib, "not implemented: dml_table_expression_clause[SELECT_MODE]");
							}



							}
							break;
						case 3 :
							// PLSQLPrinter.g:1591:14: ^( DIRECT_MODE tableview_name ( sample_clause )? )
							{
							match(input,DIRECT_MODE,FOLLOW_DIRECT_MODE_in_dml_table_expression_clause15169); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_tableview_name_in_dml_table_expression_clause15171);
							tableview_name196=tableview_name();
							state._fsp--;

							// PLSQLPrinter.g:1591:43: ( sample_clause )?
							int alt359=2;
							int LA359_0 = input.LA(1);
							if ( (LA359_0==SAMPLE_VK) ) {
								alt359=1;
							}
							switch (alt359) {
								case 1 :
									// PLSQLPrinter.g:1591:43: sample_clause
									{
									pushFollow(FOLLOW_sample_clause_in_dml_table_expression_clause15173);
									sample_clause197=sample_clause();
									state._fsp--;

									}
									break;

							}

							match(input, Token.UP, null); 

							// TEMPLATE REWRITE
							// 1592:15: -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)
							{
								retval.st = templateLib.getInstanceOf("dml_table_expression_clause_direct",new STAttrMap().put("table_or_view_name", (tableview_name196!=null?((StringTemplate)tableview_name196.getTemplate()):null)).put("sample_clause", (sample_clause197!=null?((StringTemplate)sample_clause197.getTemplate()):null)));
							}



							}
							break;
						case 4 :
							// PLSQLPrinter.g:1593:14: general_element
							{
							pushFollow(FOLLOW_general_element_in_dml_table_expression_clause15218);
							general_element198=general_element();
							state._fsp--;

							// TEMPLATE REWRITE
							// 1593:30: -> { $general_element.st }
							{
								retval.st =  (general_element198!=null?((StringTemplate)general_element198.getTemplate()):null) ;
							}



							}
							break;
						case 5 :
							// PLSQLPrinter.g:1594:14: standard_function
							{
							pushFollow(FOLLOW_standard_function_in_dml_table_expression_clause15237);
							standard_function199=standard_function();
							state._fsp--;

							// TEMPLATE REWRITE
							// 1594:32: -> { $standard_function.st }
							{
								retval.st =  (standard_function199!=null?((StringTemplate)standard_function199.getTemplate()):null) ;
							}



							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1597:14: table_ref
					{
					pushFollow(FOLLOW_table_ref_in_dml_table_expression_clause15276);
					table_ref200=table_ref();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1597:24: -> in_parens(val=$table_ref.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (table_ref200!=null?((StringTemplate)table_ref200.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_table_expression_clause"


	public static class subquery_restriction_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_restriction_clause"
	// PLSQLPrinter.g:1600:1: subquery_restriction_clause : ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) ) -> template( \"not implemented: subquery_restriction_clause\";
	public final PLSQLPrinter.subquery_restriction_clause_return subquery_restriction_clause() throws RecognitionException {
		PLSQLPrinter.subquery_restriction_clause_return retval = new PLSQLPrinter.subquery_restriction_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1601:5: ( ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) ) -> template( \"not implemented: subquery_restriction_clause\")
			// PLSQLPrinter.g:1601:10: ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) )
			{
			match(input,SQL92_RESERVED_WITH,FOLLOW_SQL92_RESERVED_WITH_in_subquery_restriction_clause15306); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1601:32: ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? )
			int alt363=2;
			int LA363_0 = input.LA(1);
			if ( (LA363_0==READ_VK) ) {
				alt363=1;
			}
			else if ( (LA363_0==SQL92_RESERVED_CHECK) ) {
				alt363=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 363, 0, input);
				throw nvae;
			}

			switch (alt363) {
				case 1 :
					// PLSQLPrinter.g:1601:33: READ_VK
					{
					match(input,READ_VK,FOLLOW_READ_VK_in_subquery_restriction_clause15309); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1601:41: SQL92_RESERVED_CHECK ( constraint_name )?
					{
					match(input,SQL92_RESERVED_CHECK,FOLLOW_SQL92_RESERVED_CHECK_in_subquery_restriction_clause15311); 
					// PLSQLPrinter.g:1601:62: ( constraint_name )?
					int alt362=2;
					int LA362_0 = input.LA(1);
					if ( (LA362_0==CONSTRAINT_NAME) ) {
						alt362=1;
					}
					switch (alt362) {
						case 1 :
							// PLSQLPrinter.g:1601:62: constraint_name
							{
							pushFollow(FOLLOW_constraint_name_in_subquery_restriction_clause15313);
							constraint_name();
							state._fsp--;

							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1602:5: -> template( \"not implemented: subquery_restriction_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: subquery_restriction_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_restriction_clause"


	public static class sample_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sample_clause"
	// PLSQLPrinter.g:1605:1: sample_clause : ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? ) -> template( \"not implemented: sample_clause\";
	public final PLSQLPrinter.sample_clause_return sample_clause() throws RecognitionException {
		PLSQLPrinter.sample_clause_return retval = new PLSQLPrinter.sample_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1606:5: ( ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? ) -> template( \"not implemented: sample_clause\")
			// PLSQLPrinter.g:1606:10: ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? )
			{
			match(input,SAMPLE_VK,FOLLOW_SAMPLE_VK_in_sample_clause15351); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1606:22: ( BLOCK_VK )?
			int alt364=2;
			int LA364_0 = input.LA(1);
			if ( (LA364_0==BLOCK_VK) ) {
				alt364=1;
			}
			switch (alt364) {
				case 1 :
					// PLSQLPrinter.g:1606:22: BLOCK_VK
					{
					match(input,BLOCK_VK,FOLLOW_BLOCK_VK_in_sample_clause15353); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_sample_clause15356);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1606:43: ( seed_part )?
			int alt365=2;
			int LA365_0 = input.LA(1);
			if ( (LA365_0==SEED_VK) ) {
				alt365=1;
			}
			switch (alt365) {
				case 1 :
					// PLSQLPrinter.g:1606:43: seed_part
					{
					pushFollow(FOLLOW_seed_part_in_sample_clause15358);
					seed_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1607:5: -> template( \"not implemented: sample_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: sample_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sample_clause"


	public static class seed_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "seed_part"
	// PLSQLPrinter.g:1610:1: seed_part : ^( SEED_VK expression ) -> template( \"not implemented: seed_part\";
	public final PLSQLPrinter.seed_part_return seed_part() throws RecognitionException {
		PLSQLPrinter.seed_part_return retval = new PLSQLPrinter.seed_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1611:5: ( ^( SEED_VK expression ) -> template( \"not implemented: seed_part\")
			// PLSQLPrinter.g:1611:10: ^( SEED_VK expression )
			{
			match(input,SEED_VK,FOLLOW_SEED_VK_in_seed_part15396); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_seed_part15398);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1612:5: -> template( \"not implemented: seed_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: seed_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "seed_part"


	public static class cursor_manipulation_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_manipulation_statements"
	// PLSQLPrinter.g:1621:1: cursor_manipulation_statements : ( close_statement -> template( \"not implemented: cursor_manipulation_statements\"| open_statement -> template( \"not implemented: cursor_manipulation_statements\"| fetch_statement -> template( \"not implemented: cursor_manipulation_statements\"| open_for_statement -> template( \"not implemented: cursor_manipulation_statements\");
	public final PLSQLPrinter.cursor_manipulation_statements_return cursor_manipulation_statements() throws RecognitionException {
		PLSQLPrinter.cursor_manipulation_statements_return retval = new PLSQLPrinter.cursor_manipulation_statements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1622:5: ( close_statement -> template( \"not implemented: cursor_manipulation_statements\"| open_statement -> template( \"not implemented: cursor_manipulation_statements\"| fetch_statement -> template( \"not implemented: cursor_manipulation_statements\"| open_for_statement -> template( \"not implemented: cursor_manipulation_statements\")
			int alt366=4;
			switch ( input.LA(1) ) {
			case CLOSE_VK:
				{
				alt366=1;
				}
				break;
			case OPEN_VK:
				{
				int LA366_2 = input.LA(2);
				if ( (LA366_2==DOWN) ) {
					int LA366_4 = input.LA(3);
					if ( (LA366_4==CURSOR_NAME) ) {
						alt366=2;
					}
					else if ( (LA366_4==HOSTED_VARIABLE_NAME||LA366_4==VARIABLE_NAME) ) {
						alt366=4;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 366, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 366, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_FETCH:
				{
				alt366=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 366, 0, input);
				throw nvae;
			}
			switch (alt366) {
				case 1 :
					// PLSQLPrinter.g:1622:10: close_statement
					{
					pushFollow(FOLLOW_close_statement_in_cursor_manipulation_statements15439);
					close_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1623:5: -> template( \"not implemented: cursor_manipulation_statements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: cursor_manipulation_statements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1624:10: open_statement
					{
					pushFollow(FOLLOW_open_statement_in_cursor_manipulation_statements15464);
					open_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1625:5: -> template( \"not implemented: cursor_manipulation_statements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: cursor_manipulation_statements");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1626:10: fetch_statement
					{
					pushFollow(FOLLOW_fetch_statement_in_cursor_manipulation_statements15489);
					fetch_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1627:5: -> template( \"not implemented: cursor_manipulation_statements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: cursor_manipulation_statements");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1628:10: open_for_statement
					{
					pushFollow(FOLLOW_open_for_statement_in_cursor_manipulation_statements15514);
					open_for_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1629:5: -> template( \"not implemented: cursor_manipulation_statements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: cursor_manipulation_statements");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_manipulation_statements"


	public static class close_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "close_statement"
	// PLSQLPrinter.g:1632:1: close_statement : ^( CLOSE_VK cursor_name ) -> template( \"not implemented: close_statement\";
	public final PLSQLPrinter.close_statement_return close_statement() throws RecognitionException {
		PLSQLPrinter.close_statement_return retval = new PLSQLPrinter.close_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1633:5: ( ^( CLOSE_VK cursor_name ) -> template( \"not implemented: close_statement\")
			// PLSQLPrinter.g:1633:11: ^( CLOSE_VK cursor_name )
			{
			match(input,CLOSE_VK,FOLLOW_CLOSE_VK_in_close_statement15550); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_close_statement15552);
			cursor_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1634:5: -> template( \"not implemented: close_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: close_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "close_statement"


	public static class open_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "open_statement"
	// PLSQLPrinter.g:1637:1: open_statement : ^( OPEN_VK cursor_name ( expression_list )? ) -> template( \"not implemented: open_statement\";
	public final PLSQLPrinter.open_statement_return open_statement() throws RecognitionException {
		PLSQLPrinter.open_statement_return retval = new PLSQLPrinter.open_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1638:5: ( ^( OPEN_VK cursor_name ( expression_list )? ) -> template( \"not implemented: open_statement\")
			// PLSQLPrinter.g:1638:10: ^( OPEN_VK cursor_name ( expression_list )? )
			{
			match(input,OPEN_VK,FOLLOW_OPEN_VK_in_open_statement15589); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_open_statement15591);
			cursor_name();
			state._fsp--;

			// PLSQLPrinter.g:1638:32: ( expression_list )?
			int alt367=2;
			int LA367_0 = input.LA(1);
			if ( (LA367_0==EXPR_LIST) ) {
				alt367=1;
			}
			switch (alt367) {
				case 1 :
					// PLSQLPrinter.g:1638:32: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_open_statement15593);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1639:5: -> template( \"not implemented: open_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: open_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "open_statement"


	public static class fetch_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "fetch_statement"
	// PLSQLPrinter.g:1642:1: fetch_statement : ^( SQL92_RESERVED_FETCH cursor_name ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) ) ) -> template( \"not implemented: fetch_statement\";
	public final PLSQLPrinter.fetch_statement_return fetch_statement() throws RecognitionException {
		PLSQLPrinter.fetch_statement_return retval = new PLSQLPrinter.fetch_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1643:5: ( ^( SQL92_RESERVED_FETCH cursor_name ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) ) ) -> template( \"not implemented: fetch_statement\")
			// PLSQLPrinter.g:1643:10: ^( SQL92_RESERVED_FETCH cursor_name ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) ) )
			{
			match(input,SQL92_RESERVED_FETCH,FOLLOW_SQL92_RESERVED_FETCH_in_fetch_statement15630); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_fetch_statement15632);
			cursor_name();
			state._fsp--;

			// PLSQLPrinter.g:1644:13: ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) )
			int alt370=2;
			int LA370_0 = input.LA(1);
			if ( (LA370_0==SQL92_RESERVED_INTO) ) {
				alt370=1;
			}
			else if ( (LA370_0==BULK_VK) ) {
				alt370=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 370, 0, input);
				throw nvae;
			}

			switch (alt370) {
				case 1 :
					// PLSQLPrinter.g:1644:18: ^( SQL92_RESERVED_INTO ( variable_name )+ )
					{
					match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_fetch_statement15653); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1644:40: ( variable_name )+
					int cnt368=0;
					loop368:
					while (true) {
						int alt368=2;
						int LA368_0 = input.LA(1);
						if ( (LA368_0==HOSTED_VARIABLE_NAME||LA368_0==VARIABLE_NAME) ) {
							alt368=1;
						}

						switch (alt368) {
						case 1 :
							// PLSQLPrinter.g:1644:40: variable_name
							{
							pushFollow(FOLLOW_variable_name_in_fetch_statement15655);
							variable_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt368 >= 1 ) break loop368;
							EarlyExitException eee = new EarlyExitException(368, input);
							throw eee;
						}
						cnt368++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1645:18: ^( BULK_VK ( variable_name )+ )
					{
					match(input,BULK_VK,FOLLOW_BULK_VK_in_fetch_statement15677); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1645:28: ( variable_name )+
					int cnt369=0;
					loop369:
					while (true) {
						int alt369=2;
						int LA369_0 = input.LA(1);
						if ( (LA369_0==HOSTED_VARIABLE_NAME||LA369_0==VARIABLE_NAME) ) {
							alt369=1;
						}

						switch (alt369) {
						case 1 :
							// PLSQLPrinter.g:1645:28: variable_name
							{
							pushFollow(FOLLOW_variable_name_in_fetch_statement15679);
							variable_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt369 >= 1 ) break loop369;
							EarlyExitException eee = new EarlyExitException(369, input);
							throw eee;
						}
						cnt369++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1648:5: -> template( \"not implemented: fetch_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: fetch_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fetch_statement"


	public static class open_for_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "open_for_statement"
	// PLSQLPrinter.g:1651:1: open_for_statement : ^( OPEN_VK variable_name ( expression | select_statement ) ( using_clause )? ) -> template( \"not implemented: open_for_statement\";
	public final PLSQLPrinter.open_for_statement_return open_for_statement() throws RecognitionException {
		PLSQLPrinter.open_for_statement_return retval = new PLSQLPrinter.open_for_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1652:5: ( ^( OPEN_VK variable_name ( expression | select_statement ) ( using_clause )? ) -> template( \"not implemented: open_for_statement\")
			// PLSQLPrinter.g:1652:10: ^( OPEN_VK variable_name ( expression | select_statement ) ( using_clause )? )
			{
			match(input,OPEN_VK,FOLLOW_OPEN_VK_in_open_for_statement15740); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_variable_name_in_open_for_statement15742);
			variable_name();
			state._fsp--;

			// PLSQLPrinter.g:1652:34: ( expression | select_statement )
			int alt371=2;
			int LA371_0 = input.LA(1);
			if ( (LA371_0==EXPR||LA371_0==LOGIC_EXPR) ) {
				alt371=1;
			}
			else if ( (LA371_0==SELECT_STATEMENT) ) {
				alt371=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 371, 0, input);
				throw nvae;
			}

			switch (alt371) {
				case 1 :
					// PLSQLPrinter.g:1652:35: expression
					{
					pushFollow(FOLLOW_expression_in_open_for_statement15745);
					expression();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1652:46: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_open_for_statement15747);
					select_statement();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1652:64: ( using_clause )?
			int alt372=2;
			int LA372_0 = input.LA(1);
			if ( (LA372_0==PLSQL_NON_RESERVED_USING) ) {
				alt372=1;
			}
			switch (alt372) {
				case 1 :
					// PLSQLPrinter.g:1652:64: using_clause
					{
					pushFollow(FOLLOW_using_clause_in_open_for_statement15750);
					using_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1653:5: -> template( \"not implemented: open_for_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: open_for_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "open_for_statement"


	public static class transaction_control_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "transaction_control_statements"
	// PLSQLPrinter.g:1660:1: transaction_control_statements : ( set_transaction_command -> template( \"not implemented: transaction_control_statements\"| set_constraint_command -> template( \"not implemented: transaction_control_statements\"| commit_statement -> template( \"not implemented: transaction_control_statements\"| rollback_statement -> template( \"not implemented: transaction_control_statements\"| savepoint_statement -> template( \"not implemented: transaction_control_statements\");
	public final PLSQLPrinter.transaction_control_statements_return transaction_control_statements() throws RecognitionException {
		PLSQLPrinter.transaction_control_statements_return retval = new PLSQLPrinter.transaction_control_statements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1661:5: ( set_transaction_command -> template( \"not implemented: transaction_control_statements\"| set_constraint_command -> template( \"not implemented: transaction_control_statements\"| commit_statement -> template( \"not implemented: transaction_control_statements\"| rollback_statement -> template( \"not implemented: transaction_control_statements\"| savepoint_statement -> template( \"not implemented: transaction_control_statements\")
			int alt373=5;
			switch ( input.LA(1) ) {
			case SET_TRANSACTION:
				{
				alt373=1;
				}
				break;
			case SET_CONSTRAINT:
				{
				alt373=2;
				}
				break;
			case COMMIT_VK:
				{
				alt373=3;
				}
				break;
			case ROLLBACK_VK:
				{
				alt373=4;
				}
				break;
			case SAVEPOINT_VK:
				{
				alt373=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 373, 0, input);
				throw nvae;
			}
			switch (alt373) {
				case 1 :
					// PLSQLPrinter.g:1661:10: set_transaction_command
					{
					pushFollow(FOLLOW_set_transaction_command_in_transaction_control_statements15790);
					set_transaction_command();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1662:5: -> template( \"not implemented: transaction_control_statements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: transaction_control_statements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1663:10: set_constraint_command
					{
					pushFollow(FOLLOW_set_constraint_command_in_transaction_control_statements15815);
					set_constraint_command();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1664:5: -> template( \"not implemented: transaction_control_statements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: transaction_control_statements");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1665:10: commit_statement
					{
					pushFollow(FOLLOW_commit_statement_in_transaction_control_statements15840);
					commit_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1666:5: -> template( \"not implemented: transaction_control_statements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: transaction_control_statements");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1667:10: rollback_statement
					{
					pushFollow(FOLLOW_rollback_statement_in_transaction_control_statements15865);
					rollback_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1668:5: -> template( \"not implemented: transaction_control_statements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: transaction_control_statements");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1669:10: savepoint_statement
					{
					pushFollow(FOLLOW_savepoint_statement_in_transaction_control_statements15890);
					savepoint_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1670:5: -> template( \"not implemented: transaction_control_statements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: transaction_control_statements");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "transaction_control_statements"


	public static class set_transaction_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "set_transaction_command"
	// PLSQLPrinter.g:1673:1: set_transaction_command : ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? ) -> template( \"not implemented: set_transaction_command\";
	public final PLSQLPrinter.set_transaction_command_return set_transaction_command() throws RecognitionException {
		PLSQLPrinter.set_transaction_command_return retval = new PLSQLPrinter.set_transaction_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1674:5: ( ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? ) -> template( \"not implemented: set_transaction_command\")
			// PLSQLPrinter.g:1674:10: ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? )
			{
			match(input,SET_TRANSACTION,FOLLOW_SET_TRANSACTION_in_set_transaction_command15925); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1674:28: ( CHAR_STRING )?
				int alt374=2;
				int LA374_0 = input.LA(1);
				if ( (LA374_0==CHAR_STRING) ) {
					alt374=1;
				}
				switch (alt374) {
					case 1 :
						// PLSQLPrinter.g:1674:28: CHAR_STRING
						{
						match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_set_transaction_command15927); 
						}
						break;

				}

				// PLSQLPrinter.g:1675:13: ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )?
				int alt377=4;
				switch ( input.LA(1) ) {
					case READ_VK:
						{
						alt377=1;
						}
						break;
					case ISOLATION_VK:
						{
						alt377=2;
						}
						break;
					case ROLLBACK_VK:
						{
						alt377=3;
						}
						break;
				}
				switch (alt377) {
					case 1 :
						// PLSQLPrinter.g:1675:18: ^( READ_VK ( ONLY_VK | WRITE_VK ) )
						{
						match(input,READ_VK,FOLLOW_READ_VK_in_set_transaction_command15948); 
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:1675:28: ( ONLY_VK | WRITE_VK )
						int alt375=2;
						int LA375_0 = input.LA(1);
						if ( (LA375_0==ONLY_VK) ) {
							alt375=1;
						}
						else if ( (LA375_0==WRITE_VK) ) {
							alt375=2;
						}

						else {
							NoViableAltException nvae =
								new NoViableAltException("", 375, 0, input);
							throw nvae;
						}

						switch (alt375) {
							case 1 :
								// PLSQLPrinter.g:1675:29: ONLY_VK
								{
								match(input,ONLY_VK,FOLLOW_ONLY_VK_in_set_transaction_command15951); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:1675:37: WRITE_VK
								{
								match(input,WRITE_VK,FOLLOW_WRITE_VK_in_set_transaction_command15953); 
								}
								break;

						}

						match(input, Token.UP, null); 

						}
						break;
					case 2 :
						// PLSQLPrinter.g:1676:18: ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) )
						{
						match(input,ISOLATION_VK,FOLLOW_ISOLATION_VK_in_set_transaction_command15975); 
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:1676:33: ( SERIALIZABLE_VK | COMMITTED_VK )
						int alt376=2;
						int LA376_0 = input.LA(1);
						if ( (LA376_0==SERIALIZABLE_VK) ) {
							alt376=1;
						}
						else if ( (LA376_0==COMMITTED_VK) ) {
							alt376=2;
						}

						else {
							NoViableAltException nvae =
								new NoViableAltException("", 376, 0, input);
							throw nvae;
						}

						switch (alt376) {
							case 1 :
								// PLSQLPrinter.g:1676:34: SERIALIZABLE_VK
								{
								match(input,SERIALIZABLE_VK,FOLLOW_SERIALIZABLE_VK_in_set_transaction_command15978); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:1676:50: COMMITTED_VK
								{
								match(input,COMMITTED_VK,FOLLOW_COMMITTED_VK_in_set_transaction_command15980); 
								}
								break;

						}

						match(input, Token.UP, null); 

						}
						break;
					case 3 :
						// PLSQLPrinter.g:1677:18: ^( ROLLBACK_VK rollback_segment_name )
						{
						match(input,ROLLBACK_VK,FOLLOW_ROLLBACK_VK_in_set_transaction_command16002); 
						match(input, Token.DOWN, null); 
						pushFollow(FOLLOW_rollback_segment_name_in_set_transaction_command16004);
						rollback_segment_name();
						state._fsp--;

						match(input, Token.UP, null); 

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1680:5: -> template( \"not implemented: set_transaction_command\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: set_transaction_command");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_transaction_command"


	public static class set_constraint_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "set_constraint_command"
	// PLSQLPrinter.g:1683:1: set_constraint_command : ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) ) -> template( \"not implemented: set_constraint_command\";
	public final PLSQLPrinter.set_constraint_command_return set_constraint_command() throws RecognitionException {
		PLSQLPrinter.set_constraint_command_return retval = new PLSQLPrinter.set_constraint_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1684:5: ( ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) ) -> template( \"not implemented: set_constraint_command\")
			// PLSQLPrinter.g:1684:10: ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) )
			{
			match(input,SET_CONSTRAINT,FOLLOW_SET_CONSTRAINT_in_set_constraint_command16065); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1684:27: ( SQL92_RESERVED_ALL | ( constraint_name )+ )
			int alt379=2;
			int LA379_0 = input.LA(1);
			if ( (LA379_0==SQL92_RESERVED_ALL) ) {
				alt379=1;
			}
			else if ( (LA379_0==CONSTRAINT_NAME) ) {
				alt379=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 379, 0, input);
				throw nvae;
			}

			switch (alt379) {
				case 1 :
					// PLSQLPrinter.g:1684:28: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_set_constraint_command16068); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1684:47: ( constraint_name )+
					{
					// PLSQLPrinter.g:1684:47: ( constraint_name )+
					int cnt378=0;
					loop378:
					while (true) {
						int alt378=2;
						int LA378_0 = input.LA(1);
						if ( (LA378_0==CONSTRAINT_NAME) ) {
							alt378=1;
						}

						switch (alt378) {
						case 1 :
							// PLSQLPrinter.g:1684:47: constraint_name
							{
							pushFollow(FOLLOW_constraint_name_in_set_constraint_command16070);
							constraint_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt378 >= 1 ) break loop378;
							EarlyExitException eee = new EarlyExitException(378, input);
							throw eee;
						}
						cnt378++;
					}

					}
					break;

			}

			// PLSQLPrinter.g:1684:65: ( IMMEDIATE_VK | DEFERRED_VK )
			int alt380=2;
			int LA380_0 = input.LA(1);
			if ( (LA380_0==IMMEDIATE_VK) ) {
				alt380=1;
			}
			else if ( (LA380_0==DEFERRED_VK) ) {
				alt380=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 380, 0, input);
				throw nvae;
			}

			switch (alt380) {
				case 1 :
					// PLSQLPrinter.g:1684:66: IMMEDIATE_VK
					{
					match(input,IMMEDIATE_VK,FOLLOW_IMMEDIATE_VK_in_set_constraint_command16075); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1684:79: DEFERRED_VK
					{
					match(input,DEFERRED_VK,FOLLOW_DEFERRED_VK_in_set_constraint_command16077); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1685:5: -> template( \"not implemented: set_constraint_command\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: set_constraint_command");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_constraint_command"


	public static class commit_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "commit_statement"
	// PLSQLPrinter.g:1688:1: commit_statement : ^( COMMIT_VK ( WORK_VK )? ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )? ( write_clause )? ) -> template( \"not implemented: commit_statement\";
	public final PLSQLPrinter.commit_statement_return commit_statement() throws RecognitionException {
		PLSQLPrinter.commit_statement_return retval = new PLSQLPrinter.commit_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1689:5: ( ^( COMMIT_VK ( WORK_VK )? ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )? ( write_clause )? ) -> template( \"not implemented: commit_statement\")
			// PLSQLPrinter.g:1689:11: ^( COMMIT_VK ( WORK_VK )? ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )? ( write_clause )? )
			{
			match(input,COMMIT_VK,FOLLOW_COMMIT_VK_in_commit_statement16115); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1689:23: ( WORK_VK )?
				int alt381=2;
				int LA381_0 = input.LA(1);
				if ( (LA381_0==WORK_VK) ) {
					alt381=1;
				}
				switch (alt381) {
					case 1 :
						// PLSQLPrinter.g:1689:23: WORK_VK
						{
						match(input,WORK_VK,FOLLOW_WORK_VK_in_commit_statement16117); 
						}
						break;

				}

				// PLSQLPrinter.g:1690:13: ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )?
				int alt384=3;
				int LA384_0 = input.LA(1);
				if ( (LA384_0==COMMENT_VK) ) {
					alt384=1;
				}
				else if ( (LA384_0==FORCE_VK) ) {
					alt384=2;
				}
				switch (alt384) {
					case 1 :
						// PLSQLPrinter.g:1690:18: ^( COMMENT_VK expression )
						{
						match(input,COMMENT_VK,FOLLOW_COMMENT_VK_in_commit_statement16139); 
						match(input, Token.DOWN, null); 
						pushFollow(FOLLOW_expression_in_commit_statement16141);
						expression();
						state._fsp--;

						match(input, Token.UP, null); 

						}
						break;
					case 2 :
						// PLSQLPrinter.g:1691:18: ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) )
						{
						match(input,FORCE_VK,FOLLOW_FORCE_VK_in_commit_statement16162); 
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:1691:29: ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? )
						int alt383=3;
						switch ( input.LA(1) ) {
						case CORRUPT_XID_VK:
							{
							alt383=1;
							}
							break;
						case CORRUPT_XID_ALL_VK:
							{
							alt383=2;
							}
							break;
						case EXPR:
						case LOGIC_EXPR:
							{
							alt383=3;
							}
							break;
						default:
							NoViableAltException nvae =
								new NoViableAltException("", 383, 0, input);
							throw nvae;
						}
						switch (alt383) {
							case 1 :
								// PLSQLPrinter.g:1691:30: CORRUPT_XID_VK expression
								{
								match(input,CORRUPT_XID_VK,FOLLOW_CORRUPT_XID_VK_in_commit_statement16165); 
								pushFollow(FOLLOW_expression_in_commit_statement16167);
								expression();
								state._fsp--;

								}
								break;
							case 2 :
								// PLSQLPrinter.g:1691:56: CORRUPT_XID_ALL_VK
								{
								match(input,CORRUPT_XID_ALL_VK,FOLLOW_CORRUPT_XID_ALL_VK_in_commit_statement16169); 
								}
								break;
							case 3 :
								// PLSQLPrinter.g:1691:75: expression ( expression )?
								{
								pushFollow(FOLLOW_expression_in_commit_statement16171);
								expression();
								state._fsp--;

								// PLSQLPrinter.g:1691:86: ( expression )?
								int alt382=2;
								int LA382_0 = input.LA(1);
								if ( (LA382_0==EXPR||LA382_0==LOGIC_EXPR) ) {
									alt382=1;
								}
								switch (alt382) {
									case 1 :
										// PLSQLPrinter.g:1691:86: expression
										{
										pushFollow(FOLLOW_expression_in_commit_statement16173);
										expression();
										state._fsp--;

										}
										break;

								}

								}
								break;

						}

						match(input, Token.UP, null); 

						}
						break;

				}

				// PLSQLPrinter.g:1693:13: ( write_clause )?
				int alt385=2;
				int LA385_0 = input.LA(1);
				if ( (LA385_0==WRITE_VK) ) {
					alt385=1;
				}
				switch (alt385) {
					case 1 :
						// PLSQLPrinter.g:1693:13: write_clause
						{
						pushFollow(FOLLOW_write_clause_in_commit_statement16205);
						write_clause();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1695:5: -> template( \"not implemented: commit_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: commit_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commit_statement"


	public static class write_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "write_clause"
	// PLSQLPrinter.g:1698:1: write_clause : ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? ) -> template( \"not implemented: write_clause\";
	public final PLSQLPrinter.write_clause_return write_clause() throws RecognitionException {
		PLSQLPrinter.write_clause_return retval = new PLSQLPrinter.write_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1699:5: ( ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? ) -> template( \"not implemented: write_clause\")
			// PLSQLPrinter.g:1699:10: ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? )
			{
			match(input,WRITE_VK,FOLLOW_WRITE_VK_in_write_clause16251); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1699:21: ( WAIT_VK | PLSQL_RESERVED_NOWAIT )?
				int alt386=3;
				int LA386_0 = input.LA(1);
				if ( (LA386_0==WAIT_VK) ) {
					alt386=1;
				}
				else if ( (LA386_0==PLSQL_RESERVED_NOWAIT) ) {
					alt386=2;
				}
				switch (alt386) {
					case 1 :
						// PLSQLPrinter.g:1699:22: WAIT_VK
						{
						match(input,WAIT_VK,FOLLOW_WAIT_VK_in_write_clause16254); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1699:30: PLSQL_RESERVED_NOWAIT
						{
						match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_write_clause16256); 
						}
						break;

				}

				// PLSQLPrinter.g:1699:54: ( IMMEDIATE_VK | BATCH_VK )?
				int alt387=3;
				int LA387_0 = input.LA(1);
				if ( (LA387_0==IMMEDIATE_VK) ) {
					alt387=1;
				}
				else if ( (LA387_0==BATCH_VK) ) {
					alt387=2;
				}
				switch (alt387) {
					case 1 :
						// PLSQLPrinter.g:1699:55: IMMEDIATE_VK
						{
						match(input,IMMEDIATE_VK,FOLLOW_IMMEDIATE_VK_in_write_clause16261); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1699:68: BATCH_VK
						{
						match(input,BATCH_VK,FOLLOW_BATCH_VK_in_write_clause16263); 
						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1700:5: -> template( \"not implemented: write_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: write_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "write_clause"


	public static class rollback_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "rollback_statement"
	// PLSQLPrinter.g:1703:1: rollback_statement : ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? ) -> template( \"not implemented: rollback_statement\";
	public final PLSQLPrinter.rollback_statement_return rollback_statement() throws RecognitionException {
		PLSQLPrinter.rollback_statement_return retval = new PLSQLPrinter.rollback_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1704:5: ( ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? ) -> template( \"not implemented: rollback_statement\")
			// PLSQLPrinter.g:1704:11: ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? )
			{
			match(input,ROLLBACK_VK,FOLLOW_ROLLBACK_VK_in_rollback_statement16302); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1704:25: ( WORK_VK )?
				int alt388=2;
				int LA388_0 = input.LA(1);
				if ( (LA388_0==WORK_VK) ) {
					alt388=1;
				}
				switch (alt388) {
					case 1 :
						// PLSQLPrinter.g:1704:25: WORK_VK
						{
						match(input,WORK_VK,FOLLOW_WORK_VK_in_rollback_statement16304); 
						}
						break;

				}

				// PLSQLPrinter.g:1705:13: ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )?
				int alt389=3;
				int LA389_0 = input.LA(1);
				if ( (LA389_0==SQL92_RESERVED_TO) ) {
					alt389=1;
				}
				else if ( (LA389_0==FORCE_VK) ) {
					alt389=2;
				}
				switch (alt389) {
					case 1 :
						// PLSQLPrinter.g:1705:18: ^( SQL92_RESERVED_TO savepoint_name )
						{
						match(input,SQL92_RESERVED_TO,FOLLOW_SQL92_RESERVED_TO_in_rollback_statement16326); 
						match(input, Token.DOWN, null); 
						pushFollow(FOLLOW_savepoint_name_in_rollback_statement16328);
						savepoint_name();
						state._fsp--;

						match(input, Token.UP, null); 

						}
						break;
					case 2 :
						// PLSQLPrinter.g:1706:18: ^( FORCE_VK CHAR_STRING )
						{
						match(input,FORCE_VK,FOLLOW_FORCE_VK_in_rollback_statement16349); 
						match(input, Token.DOWN, null); 
						match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_rollback_statement16351); 
						match(input, Token.UP, null); 

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1709:5: -> template( \"not implemented: rollback_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: rollback_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rollback_statement"


	public static class savepoint_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "savepoint_statement"
	// PLSQLPrinter.g:1712:1: savepoint_statement : ^( SAVEPOINT_VK savepoint_name ) -> template( \"not implemented: savepoint_statement\";
	public final PLSQLPrinter.savepoint_statement_return savepoint_statement() throws RecognitionException {
		PLSQLPrinter.savepoint_statement_return retval = new PLSQLPrinter.savepoint_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1713:5: ( ^( SAVEPOINT_VK savepoint_name ) -> template( \"not implemented: savepoint_statement\")
			// PLSQLPrinter.g:1713:10: ^( SAVEPOINT_VK savepoint_name )
			{
			match(input,SAVEPOINT_VK,FOLLOW_SAVEPOINT_VK_in_savepoint_statement16412); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_savepoint_name_in_savepoint_statement16414);
			savepoint_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1714:5: -> template( \"not implemented: savepoint_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: savepoint_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "savepoint_statement"


	public static class pipe_row_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pipe_row_statement"
	// PLSQLPrinter.g:1717:1: pipe_row_statement : ^( PIPE_ROW expression ) -> template( \"not implemented: pipe_row_statement\";
	public final PLSQLPrinter.pipe_row_statement_return pipe_row_statement() throws RecognitionException {
		PLSQLPrinter.pipe_row_statement_return retval = new PLSQLPrinter.pipe_row_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1718:5: ( ^( PIPE_ROW expression ) -> template( \"not implemented: pipe_row_statement\")
			// PLSQLPrinter.g:1718:10: ^( PIPE_ROW expression )
			{
			match(input,PIPE_ROW,FOLLOW_PIPE_ROW_in_pipe_row_statement16455); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_pipe_row_statement16457);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1719:5: -> template( \"not implemented: pipe_row_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pipe_row_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pipe_row_statement"


	public static class expression_list_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "expression_list"
	// PLSQLPrinter.g:1726:1: expression_list : ^( EXPR_LIST ( expression )* ) -> template( \"not implemented: expression_list\";
	public final PLSQLPrinter.expression_list_return expression_list() throws RecognitionException {
		PLSQLPrinter.expression_list_return retval = new PLSQLPrinter.expression_list_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1727:5: ( ^( EXPR_LIST ( expression )* ) -> template( \"not implemented: expression_list\")
			// PLSQLPrinter.g:1727:10: ^( EXPR_LIST ( expression )* )
			{
			match(input,EXPR_LIST,FOLLOW_EXPR_LIST_in_expression_list16497); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1727:22: ( expression )*
				loop390:
				while (true) {
					int alt390=2;
					int LA390_0 = input.LA(1);
					if ( (LA390_0==EXPR||LA390_0==LOGIC_EXPR) ) {
						alt390=1;
					}

					switch (alt390) {
					case 1 :
						// PLSQLPrinter.g:1727:22: expression
						{
						pushFollow(FOLLOW_expression_in_expression_list16499);
						expression();
						state._fsp--;

						}
						break;

					default :
						break loop390;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1728:5: -> template( \"not implemented: expression_list\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: expression_list");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression_list"


	public static class expression_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "expression"
	// PLSQLPrinter.g:1731:1: expression : ( ^( LOGIC_EXPR expression_element ) -> {$expression_element.st}| ^( EXPR expression_element ) -> {$expression_element.st});
	public final PLSQLPrinter.expression_return expression() throws RecognitionException {
		PLSQLPrinter.expression_return retval = new PLSQLPrinter.expression_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression_element201 =null;
		TreeRuleReturnScope expression_element202 =null;

		try {
			// PLSQLPrinter.g:1732:5: ( ^( LOGIC_EXPR expression_element ) -> {$expression_element.st}| ^( EXPR expression_element ) -> {$expression_element.st})
			int alt391=2;
			int LA391_0 = input.LA(1);
			if ( (LA391_0==LOGIC_EXPR) ) {
				alt391=1;
			}
			else if ( (LA391_0==EXPR) ) {
				alt391=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 391, 0, input);
				throw nvae;
			}

			switch (alt391) {
				case 1 :
					// PLSQLPrinter.g:1732:10: ^( LOGIC_EXPR expression_element )
					{
					match(input,LOGIC_EXPR,FOLLOW_LOGIC_EXPR_in_expression16536); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression16538);
					expression_element201=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1732:43: -> {$expression_element.st}
					{
						retval.st = (expression_element201!=null?((StringTemplate)expression_element201.getTemplate()):null);
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1733:10: ^( EXPR expression_element )
					{
					match(input,EXPR,FOLLOW_EXPR_in_expression16555); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression16557);
					expression_element202=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1733:38: -> {$expression_element.st}
					{
						retval.st = (expression_element202!=null?((StringTemplate)expression_element202.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression"


	public static class expression_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "expression_element"
	// PLSQLPrinter.g:1736:1: expression_element : ( ^( ( SQL92_RESERVED_OR | SQL92_RESERVED_AND | EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP ) arg1= expression_element arg2= expression_element ) -> expression_element_generic_binop(op=oparg1=$arg1.starg2=$arg2.st)| ^( SQL92_RESERVED_NOT expression_element ) -> template( \"not implemented: expression_element\"| ^( ( IS_NOT_NULL | IS_NULL | IS_NOT_NAN | IS_NAN | IS_NOT_PRESENT | IS_PRESENT | IS_NOT_INFINITE | IS_INFINITE | IS_NOT_A_SET | IS_A_SET | IS_NOT_EMPTY | IS_EMPTY ) arg= expression_element ) -> expression_element_generic_suffix_unary_op(op=oparg=$arg.st)| ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^( IS_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( NOT_IN expression_element in_elements ) -> template( \"not implemented: expression_element\"| ^( SQL92_RESERVED_IN expression_element in_elements ) -> template( \"not implemented: expression_element\"| ^( NOT_BETWEEN expression_element expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( SQL92_RESERVED_BETWEEN expression_element expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( NOT_LIKE expression_element expression_element ( expression_element )? ) -> template( \"not implemented: expression_element\"| ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK ) expression_element expression_element ( expression_element )? ) -> template( \"not implemented: expression_element\"| ^( CONCATENATION_OP expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( PLUS_SIGN expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( MINUS_SIGN expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( ASTERISK expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( SOLIDUS expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( MOD_VK expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( DIV_VK expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( PIPE_VK expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( UNARY_OPERATOR arg= expression_element ) -> expression_element_generic_prefix_unary_op(op=$UNARY_OPERATOR.textis_spaced=falsearg=$arg.st)| ^( SQL92_RESERVED_PRIOR expression_element ) -> template( \"not implemented: expression_element\"| ^( NEW_VK expression ) -> template( \"not implemented: expression_element\"| ^( SQL92_RESERVED_DISTINCT expression_element ) -> template( \"not implemented: expression_element\"| ^( STANDARD_FUNCTION standard_function ) -> template( \"not implemented: expression_element\"| ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) expression_element ) -> template( \"not implemented: expression_element\"| ^( VECTOR_EXPR ( expression_element )+ ) -> template( \"not implemented: expression_element\"| ^( DATETIME_OP expression_element datetime_element ) -> template( \"not implemented: expression_element\"| model_expression -> template( \"not implemented: expression_element\"| ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? ) -> template( \"not implemented: expression_element\"| ^( DOT_ASTERISK tableview_name ) -> template( \"not implemented: expression_element\"| ^( ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK ) cursor_name ) -> template( \"not implemented: expression_element\"| ^( OUTER_JOIN_SIGN expression_element ) -> template( \"not implemented: expression_element\"| case_statement -> template( \"not implemented: expression_element\"| constant -> { $constant.st }| general_element -> { $general_element.st }| subquery -> { $subquery.st });
	public final PLSQLPrinter.expression_element_return expression_element() throws RecognitionException {
		PLSQLPrinter.expression_element_return retval = new PLSQLPrinter.expression_element_return();
		retval.start = input.LT(1);

		CommonTree UNARY_OPERATOR203=null;
		TreeRuleReturnScope arg1 =null;
		TreeRuleReturnScope arg2 =null;
		TreeRuleReturnScope arg =null;
		TreeRuleReturnScope constant204 =null;
		TreeRuleReturnScope general_element205 =null;
		TreeRuleReturnScope subquery206 =null;

		 String op = null; 
		try {
			// PLSQLPrinter.g:1738:5: ( ^( ( SQL92_RESERVED_OR | SQL92_RESERVED_AND | EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP ) arg1= expression_element arg2= expression_element ) -> expression_element_generic_binop(op=oparg1=$arg1.starg2=$arg2.st)| ^( SQL92_RESERVED_NOT expression_element ) -> template( \"not implemented: expression_element\"| ^( ( IS_NOT_NULL | IS_NULL | IS_NOT_NAN | IS_NAN | IS_NOT_PRESENT | IS_PRESENT | IS_NOT_INFINITE | IS_INFINITE | IS_NOT_A_SET | IS_A_SET | IS_NOT_EMPTY | IS_EMPTY ) arg= expression_element ) -> expression_element_generic_suffix_unary_op(op=oparg=$arg.st)| ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^( IS_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( NOT_IN expression_element in_elements ) -> template( \"not implemented: expression_element\"| ^( SQL92_RESERVED_IN expression_element in_elements ) -> template( \"not implemented: expression_element\"| ^( NOT_BETWEEN expression_element expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( SQL92_RESERVED_BETWEEN expression_element expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( NOT_LIKE expression_element expression_element ( expression_element )? ) -> template( \"not implemented: expression_element\"| ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK ) expression_element expression_element ( expression_element )? ) -> template( \"not implemented: expression_element\"| ^( CONCATENATION_OP expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( PLUS_SIGN expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( MINUS_SIGN expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( ASTERISK expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( SOLIDUS expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( MOD_VK expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( DIV_VK expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( PIPE_VK expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( UNARY_OPERATOR arg= expression_element ) -> expression_element_generic_prefix_unary_op(op=$UNARY_OPERATOR.textis_spaced=falsearg=$arg.st)| ^( SQL92_RESERVED_PRIOR expression_element ) -> template( \"not implemented: expression_element\"| ^( NEW_VK expression ) -> template( \"not implemented: expression_element\"| ^( SQL92_RESERVED_DISTINCT expression_element ) -> template( \"not implemented: expression_element\"| ^( STANDARD_FUNCTION standard_function ) -> template( \"not implemented: expression_element\"| ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) expression_element ) -> template( \"not implemented: expression_element\"| ^( VECTOR_EXPR ( expression_element )+ ) -> template( \"not implemented: expression_element\"| ^( DATETIME_OP expression_element datetime_element ) -> template( \"not implemented: expression_element\"| model_expression -> template( \"not implemented: expression_element\"| ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? ) -> template( \"not implemented: expression_element\"| ^( DOT_ASTERISK tableview_name ) -> template( \"not implemented: expression_element\"| ^( ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK ) cursor_name ) -> template( \"not implemented: expression_element\"| ^( OUTER_JOIN_SIGN expression_element ) -> template( \"not implemented: expression_element\"| case_statement -> template( \"not implemented: expression_element\"| constant -> { $constant.st }| general_element -> { $general_element.st }| subquery -> { $subquery.st })
			int alt405=37;
			switch ( input.LA(1) ) {
			case EQUALS_OP:
			case GREATER_THAN_OP:
			case GREATER_THAN_OR_EQUALS_OP:
			case LESS_THAN_OP:
			case LESS_THAN_OR_EQUALS_OP:
			case NOT_EQUAL_OP:
			case SQL92_RESERVED_AND:
			case SQL92_RESERVED_OR:
				{
				alt405=1;
				}
				break;
			case SQL92_RESERVED_NOT:
				{
				alt405=2;
				}
				break;
			case IS_A_SET:
			case IS_EMPTY:
			case IS_INFINITE:
			case IS_NAN:
			case IS_NOT_A_SET:
			case IS_NOT_EMPTY:
			case IS_NOT_INFINITE:
			case IS_NOT_NAN:
			case IS_NOT_NULL:
			case IS_NOT_PRESENT:
			case IS_NULL:
			case IS_PRESENT:
				{
				alt405=3;
				}
				break;
			case IS_NOT_OF_TYPE:
				{
				alt405=4;
				}
				break;
			case IS_OF_TYPE:
				{
				alt405=5;
				}
				break;
			case MEMBER_VK:
			case SUBMULTISET_VK:
				{
				alt405=6;
				}
				break;
			case NOT_IN:
				{
				alt405=7;
				}
				break;
			case SQL92_RESERVED_IN:
				{
				alt405=8;
				}
				break;
			case NOT_BETWEEN:
				{
				alt405=9;
				}
				break;
			case SQL92_RESERVED_BETWEEN:
				{
				alt405=10;
				}
				break;
			case NOT_LIKE:
				{
				alt405=11;
				}
				break;
			case SQL92_RESERVED_LIKE:
			case LIKE2_VK:
			case LIKE4_VK:
			case LIKEC_VK:
				{
				alt405=12;
				}
				break;
			case CONCATENATION_OP:
				{
				alt405=13;
				}
				break;
			case PLUS_SIGN:
				{
				alt405=14;
				}
				break;
			case MINUS_SIGN:
				{
				int LA405_15 = input.LA(2);
				if ( (LA405_15==DOWN) ) {
					int LA405_38 = input.LA(3);
					if ( (LA405_38==UNSIGNED_INTEGER) ) {
						int LA405_39 = input.LA(4);
						if ( (LA405_39==UP) ) {
							alt405=35;
						}
						else if ( (LA405_39==APPROXIMATE_NUM_LIT||LA405_39==ASTERISK||LA405_39==CHAR_STRING||LA405_39==CONCATENATION_OP||(LA405_39 >= EQUALS_OP && LA405_39 <= EXACT_NUM_LIT)||(LA405_39 >= GREATER_THAN_OP && LA405_39 <= GREATER_THAN_OR_EQUALS_OP)||(LA405_39 >= LESS_THAN_OP && LA405_39 <= LESS_THAN_OR_EQUALS_OP)||LA405_39==MINUS_SIGN||LA405_39==NOT_EQUAL_OP||LA405_39==PLUS_SIGN||LA405_39==SOLIDUS||LA405_39==SQL92_RESERVED_ALL||(LA405_39 >= SQL92_RESERVED_AND && LA405_39 <= SQL92_RESERVED_ANY)||LA405_39==SQL92_RESERVED_BETWEEN||LA405_39==SQL92_RESERVED_DEFAULT||LA405_39==SQL92_RESERVED_DISTINCT||(LA405_39 >= SQL92_RESERVED_EXISTS && LA405_39 <= SQL92_RESERVED_FALSE)||LA405_39==SQL92_RESERVED_IN||(LA405_39 >= SQL92_RESERVED_LIKE && LA405_39 <= SQL92_RESERVED_NULL)||LA405_39==SQL92_RESERVED_OR||LA405_39==SQL92_RESERVED_PRIOR||LA405_39==SQL92_RESERVED_TRUE||LA405_39==UNSIGNED_INTEGER||LA405_39==CASCATED_ELEMENT||LA405_39==DATETIME_OP||LA405_39==DBTIMEZONE_VK||LA405_39==DIV_VK||LA405_39==DOT_ASTERISK||(LA405_39 >= IS_A_SET && LA405_39 <= IS_PRESENT)||LA405_39==KEEP_VK||(LA405_39 >= LIKE2_VK && LA405_39 <= LIKEC_VK)||LA405_39==MAXVALUE_VK||LA405_39==MEMBER_VK||LA405_39==MINVALUE_VK||LA405_39==MODEL_EXPRESSION||LA405_39==MOD_VK||LA405_39==NEW_VK||LA405_39==NOT_BETWEEN||(LA405_39 >= NOT_IN && LA405_39 <= NOT_LIKE)||LA405_39==OUTER_JOIN_SIGN||(LA405_39 >= PERCENT_FOUND_VK && LA405_39 <= PERCENT_ROWCOUNT_VK)||LA405_39==PIPE_VK||LA405_39==SEARCHED_CASE||LA405_39==SESSIONTIMEZONE_VK||LA405_39==SIMPLE_CASE||LA405_39==SOME_VK||LA405_39==STANDARD_FUNCTION||LA405_39==SUBMULTISET_VK||LA405_39==SUBQUERY||LA405_39==UNARY_OPERATOR||LA405_39==VECTOR_EXPR) ) {
							alt405=15;
						}

						else {
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 405, 39, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA405_38==APPROXIMATE_NUM_LIT||LA405_38==ASTERISK||LA405_38==CHAR_STRING||LA405_38==CONCATENATION_OP||(LA405_38 >= EQUALS_OP && LA405_38 <= EXACT_NUM_LIT)||(LA405_38 >= GREATER_THAN_OP && LA405_38 <= GREATER_THAN_OR_EQUALS_OP)||(LA405_38 >= LESS_THAN_OP && LA405_38 <= LESS_THAN_OR_EQUALS_OP)||LA405_38==MINUS_SIGN||LA405_38==NOT_EQUAL_OP||LA405_38==PLUS_SIGN||LA405_38==SOLIDUS||LA405_38==SQL92_RESERVED_ALL||(LA405_38 >= SQL92_RESERVED_AND && LA405_38 <= SQL92_RESERVED_ANY)||LA405_38==SQL92_RESERVED_BETWEEN||LA405_38==SQL92_RESERVED_DEFAULT||LA405_38==SQL92_RESERVED_DISTINCT||(LA405_38 >= SQL92_RESERVED_EXISTS && LA405_38 <= SQL92_RESERVED_FALSE)||LA405_38==SQL92_RESERVED_IN||(LA405_38 >= SQL92_RESERVED_LIKE && LA405_38 <= SQL92_RESERVED_NULL)||LA405_38==SQL92_RESERVED_OR||LA405_38==SQL92_RESERVED_PRIOR||LA405_38==SQL92_RESERVED_TRUE||LA405_38==CASCATED_ELEMENT||LA405_38==DATETIME_OP||LA405_38==DBTIMEZONE_VK||LA405_38==DIV_VK||LA405_38==DOT_ASTERISK||(LA405_38 >= IS_A_SET && LA405_38 <= IS_PRESENT)||LA405_38==KEEP_VK||(LA405_38 >= LIKE2_VK && LA405_38 <= LIKEC_VK)||LA405_38==MAXVALUE_VK||LA405_38==MEMBER_VK||LA405_38==MINVALUE_VK||LA405_38==MODEL_EXPRESSION||LA405_38==MOD_VK||LA405_38==NEW_VK||LA405_38==NOT_BETWEEN||(LA405_38 >= NOT_IN && LA405_38 <= NOT_LIKE)||LA405_38==OUTER_JOIN_SIGN||(LA405_38 >= PERCENT_FOUND_VK && LA405_38 <= PERCENT_ROWCOUNT_VK)||LA405_38==PIPE_VK||LA405_38==SEARCHED_CASE||LA405_38==SESSIONTIMEZONE_VK||LA405_38==SIMPLE_CASE||LA405_38==SOME_VK||LA405_38==STANDARD_FUNCTION||LA405_38==SUBMULTISET_VK||LA405_38==SUBQUERY||LA405_38==UNARY_OPERATOR||LA405_38==VECTOR_EXPR) ) {
						alt405=15;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 405, 38, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 405, 15, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ASTERISK:
				{
				alt405=16;
				}
				break;
			case SOLIDUS:
				{
				alt405=17;
				}
				break;
			case MOD_VK:
				{
				alt405=18;
				}
				break;
			case DIV_VK:
				{
				alt405=19;
				}
				break;
			case PIPE_VK:
				{
				alt405=20;
				}
				break;
			case UNARY_OPERATOR:
				{
				alt405=21;
				}
				break;
			case SQL92_RESERVED_PRIOR:
				{
				alt405=22;
				}
				break;
			case NEW_VK:
				{
				alt405=23;
				}
				break;
			case SQL92_RESERVED_DISTINCT:
				{
				alt405=24;
				}
				break;
			case STANDARD_FUNCTION:
				{
				alt405=25;
				}
				break;
			case SQL92_RESERVED_ALL:
			case SQL92_RESERVED_ANY:
			case SQL92_RESERVED_EXISTS:
			case SOME_VK:
				{
				alt405=26;
				}
				break;
			case VECTOR_EXPR:
				{
				alt405=27;
				}
				break;
			case DATETIME_OP:
				{
				alt405=28;
				}
				break;
			case MODEL_EXPRESSION:
				{
				alt405=29;
				}
				break;
			case KEEP_VK:
				{
				alt405=30;
				}
				break;
			case DOT_ASTERISK:
				{
				alt405=31;
				}
				break;
			case PERCENT_FOUND_VK:
			case PERCENT_ISOPEN_VK:
			case PERCENT_NOTFOUND_VK:
			case PERCENT_ROWCOUNT_VK:
				{
				alt405=32;
				}
				break;
			case OUTER_JOIN_SIGN:
				{
				alt405=33;
				}
				break;
			case SEARCHED_CASE:
			case SIMPLE_CASE:
				{
				alt405=34;
				}
				break;
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case EXACT_NUM_LIT:
			case SQL92_RESERVED_DEFAULT:
			case SQL92_RESERVED_FALSE:
			case SQL92_RESERVED_NULL:
			case SQL92_RESERVED_TRUE:
			case UNSIGNED_INTEGER:
			case DBTIMEZONE_VK:
			case MAXVALUE_VK:
			case MINVALUE_VK:
			case SESSIONTIMEZONE_VK:
				{
				alt405=35;
				}
				break;
			case CASCATED_ELEMENT:
				{
				alt405=36;
				}
				break;
			case SUBQUERY:
				{
				alt405=37;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 405, 0, input);
				throw nvae;
			}
			switch (alt405) {
				case 1 :
					// PLSQLPrinter.g:1738:10: ^( ( SQL92_RESERVED_OR | SQL92_RESERVED_AND | EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP ) arg1= expression_element arg2= expression_element )
					{
					// PLSQLPrinter.g:1739:11: ( SQL92_RESERVED_OR | SQL92_RESERVED_AND | EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP )
					int alt392=8;
					switch ( input.LA(1) ) {
					case SQL92_RESERVED_OR:
						{
						alt392=1;
						}
						break;
					case SQL92_RESERVED_AND:
						{
						alt392=2;
						}
						break;
					case EQUALS_OP:
						{
						alt392=3;
						}
						break;
					case NOT_EQUAL_OP:
						{
						alt392=4;
						}
						break;
					case LESS_THAN_OP:
						{
						alt392=5;
						}
						break;
					case GREATER_THAN_OP:
						{
						alt392=6;
						}
						break;
					case LESS_THAN_OR_EQUALS_OP:
						{
						alt392=7;
						}
						break;
					case GREATER_THAN_OR_EQUALS_OP:
						{
						alt392=8;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 392, 0, input);
						throw nvae;
					}
					switch (alt392) {
						case 1 :
							// PLSQLPrinter.g:1740:13: SQL92_RESERVED_OR
							{
							match(input,SQL92_RESERVED_OR,FOLLOW_SQL92_RESERVED_OR_in_expression_element16614); 
							 op = "or"; 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1741:15: SQL92_RESERVED_AND
							{
							match(input,SQL92_RESERVED_AND,FOLLOW_SQL92_RESERVED_AND_in_expression_element16632); 
							 op = "and"; 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1742:15: EQUALS_OP
							{
							match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_expression_element16650); 
							 op = "="; 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1743:15: NOT_EQUAL_OP
							{
							match(input,NOT_EQUAL_OP,FOLLOW_NOT_EQUAL_OP_in_expression_element16668); 
							 op = "<>"; 
							}
							break;
						case 5 :
							// PLSQLPrinter.g:1744:15: LESS_THAN_OP
							{
							match(input,LESS_THAN_OP,FOLLOW_LESS_THAN_OP_in_expression_element16686); 
							 op = "<"; 
							}
							break;
						case 6 :
							// PLSQLPrinter.g:1745:15: GREATER_THAN_OP
							{
							match(input,GREATER_THAN_OP,FOLLOW_GREATER_THAN_OP_in_expression_element16704); 
							 op = ">"; 
							}
							break;
						case 7 :
							// PLSQLPrinter.g:1746:15: LESS_THAN_OR_EQUALS_OP
							{
							match(input,LESS_THAN_OR_EQUALS_OP,FOLLOW_LESS_THAN_OR_EQUALS_OP_in_expression_element16722); 
							 op = "<="; 
							}
							break;
						case 8 :
							// PLSQLPrinter.g:1747:15: GREATER_THAN_OR_EQUALS_OP
							{
							match(input,GREATER_THAN_OR_EQUALS_OP,FOLLOW_GREATER_THAN_OR_EQUALS_OP_in_expression_element16740); 
							 op = ">="; 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element16768);
					arg1=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element16772);
					arg2=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1751:5: -> expression_element_generic_binop(op=oparg1=$arg1.starg2=$arg2.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_generic_binop",new STAttrMap().put("op", op).put("arg1", (arg1!=null?((StringTemplate)arg1.getTemplate()):null)).put("arg2", (arg2!=null?((StringTemplate)arg2.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1752:10: ^( SQL92_RESERVED_NOT expression_element )
					{
					match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_expression_element16820); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element16822);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1753:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1754:10: ^( ( IS_NOT_NULL | IS_NULL | IS_NOT_NAN | IS_NAN | IS_NOT_PRESENT | IS_PRESENT | IS_NOT_INFINITE | IS_INFINITE | IS_NOT_A_SET | IS_A_SET | IS_NOT_EMPTY | IS_EMPTY ) arg= expression_element )
					{
					// PLSQLPrinter.g:1755:13: ( IS_NOT_NULL | IS_NULL | IS_NOT_NAN | IS_NAN | IS_NOT_PRESENT | IS_PRESENT | IS_NOT_INFINITE | IS_INFINITE | IS_NOT_A_SET | IS_A_SET | IS_NOT_EMPTY | IS_EMPTY )
					int alt393=12;
					switch ( input.LA(1) ) {
					case IS_NOT_NULL:
						{
						alt393=1;
						}
						break;
					case IS_NULL:
						{
						alt393=2;
						}
						break;
					case IS_NOT_NAN:
						{
						alt393=3;
						}
						break;
					case IS_NAN:
						{
						alt393=4;
						}
						break;
					case IS_NOT_PRESENT:
						{
						alt393=5;
						}
						break;
					case IS_PRESENT:
						{
						alt393=6;
						}
						break;
					case IS_NOT_INFINITE:
						{
						alt393=7;
						}
						break;
					case IS_INFINITE:
						{
						alt393=8;
						}
						break;
					case IS_NOT_A_SET:
						{
						alt393=9;
						}
						break;
					case IS_A_SET:
						{
						alt393=10;
						}
						break;
					case IS_NOT_EMPTY:
						{
						alt393=11;
						}
						break;
					case IS_EMPTY:
						{
						alt393=12;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 393, 0, input);
						throw nvae;
					}
					switch (alt393) {
						case 1 :
							// PLSQLPrinter.g:1756:15: IS_NOT_NULL
							{
							match(input,IS_NOT_NULL,FOLLOW_IS_NOT_NULL_in_expression_element16878); 
							 op = "is not null"; 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1757:17: IS_NULL
							{
							match(input,IS_NULL,FOLLOW_IS_NULL_in_expression_element16898); 
							 op = "is null"; 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1758:17: IS_NOT_NAN
							{
							match(input,IS_NOT_NAN,FOLLOW_IS_NOT_NAN_in_expression_element16918); 
							 op = "is not nan"; 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1759:17: IS_NAN
							{
							match(input,IS_NAN,FOLLOW_IS_NAN_in_expression_element16938); 
							 op = "is nan"; 
							}
							break;
						case 5 :
							// PLSQLPrinter.g:1760:17: IS_NOT_PRESENT
							{
							match(input,IS_NOT_PRESENT,FOLLOW_IS_NOT_PRESENT_in_expression_element16958); 
							 op = "is not present"; 
							}
							break;
						case 6 :
							// PLSQLPrinter.g:1761:17: IS_PRESENT
							{
							match(input,IS_PRESENT,FOLLOW_IS_PRESENT_in_expression_element16978); 
							 op = "is present"; 
							}
							break;
						case 7 :
							// PLSQLPrinter.g:1762:17: IS_NOT_INFINITE
							{
							match(input,IS_NOT_INFINITE,FOLLOW_IS_NOT_INFINITE_in_expression_element16998); 
							 op = "is not infinite"; 
							}
							break;
						case 8 :
							// PLSQLPrinter.g:1763:17: IS_INFINITE
							{
							match(input,IS_INFINITE,FOLLOW_IS_INFINITE_in_expression_element17018); 
							 op = "is infinite"; 
							}
							break;
						case 9 :
							// PLSQLPrinter.g:1764:17: IS_NOT_A_SET
							{
							match(input,IS_NOT_A_SET,FOLLOW_IS_NOT_A_SET_in_expression_element17038); 
							 op = "is not a set"; 
							}
							break;
						case 10 :
							// PLSQLPrinter.g:1765:17: IS_A_SET
							{
							match(input,IS_A_SET,FOLLOW_IS_A_SET_in_expression_element17058); 
							 op = "is a set"; 
							}
							break;
						case 11 :
							// PLSQLPrinter.g:1766:17: IS_NOT_EMPTY
							{
							match(input,IS_NOT_EMPTY,FOLLOW_IS_NOT_EMPTY_in_expression_element17078); 
							 op = "is not empty"; 
							}
							break;
						case 12 :
							// PLSQLPrinter.g:1767:17: IS_EMPTY
							{
							match(input,IS_EMPTY,FOLLOW_IS_EMPTY_in_expression_element17098); 
							 op = "is empty"; 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17130);
					arg=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1771:5: -> expression_element_generic_suffix_unary_op(op=oparg=$arg.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_generic_suffix_unary_op",new STAttrMap().put("op", op).put("arg", (arg!=null?((StringTemplate)arg.getTemplate()):null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1772:10: ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ )
					{
					match(input,IS_NOT_OF_TYPE,FOLLOW_IS_NOT_OF_TYPE_in_expression_element17174); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17176);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1772:46: ( type_spec )+
					int cnt394=0;
					loop394:
					while (true) {
						int alt394=2;
						int LA394_0 = input.LA(1);
						if ( (LA394_0==CUSTOM_TYPE||LA394_0==INTERVAL_DATATYPE||LA394_0==NATIVE_DATATYPE) ) {
							alt394=1;
						}

						switch (alt394) {
						case 1 :
							// PLSQLPrinter.g:1772:46: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_expression_element17178);
							type_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt394 >= 1 ) break loop394;
							EarlyExitException eee = new EarlyExitException(394, input);
							throw eee;
						}
						cnt394++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1773:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1774:10: ^( IS_OF_TYPE expression_element ( type_spec )+ )
					{
					match(input,IS_OF_TYPE,FOLLOW_IS_OF_TYPE_in_expression_element17206); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17208);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1774:42: ( type_spec )+
					int cnt395=0;
					loop395:
					while (true) {
						int alt395=2;
						int LA395_0 = input.LA(1);
						if ( (LA395_0==CUSTOM_TYPE||LA395_0==INTERVAL_DATATYPE||LA395_0==NATIVE_DATATYPE) ) {
							alt395=1;
						}

						switch (alt395) {
						case 1 :
							// PLSQLPrinter.g:1774:42: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_expression_element17210);
							type_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt395 >= 1 ) break loop395;
							EarlyExitException eee = new EarlyExitException(395, input);
							throw eee;
						}
						cnt395++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1775:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:1777:10: ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element )
					{
					// PLSQLPrinter.g:1777:12: ( MEMBER_VK | SUBMULTISET_VK )
					int alt396=2;
					int LA396_0 = input.LA(1);
					if ( (LA396_0==MEMBER_VK) ) {
						alt396=1;
					}
					else if ( (LA396_0==SUBMULTISET_VK) ) {
						alt396=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 396, 0, input);
						throw nvae;
					}

					switch (alt396) {
						case 1 :
							// PLSQLPrinter.g:1777:13: MEMBER_VK
							{
							match(input,MEMBER_VK,FOLLOW_MEMBER_VK_in_expression_element17240); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1777:23: SUBMULTISET_VK
							{
							match(input,SUBMULTISET_VK,FOLLOW_SUBMULTISET_VK_in_expression_element17242); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17245);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17247);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1778:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:1780:10: ^( NOT_IN expression_element in_elements )
					{
					match(input,NOT_IN,FOLLOW_NOT_IN_in_expression_element17275); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17277);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_in_elements_in_expression_element17279);
					in_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1781:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:1782:10: ^( SQL92_RESERVED_IN expression_element in_elements )
					{
					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_expression_element17306); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17308);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_in_elements_in_expression_element17310);
					in_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1783:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:1784:10: ^( NOT_BETWEEN expression_element expression_element expression_element )
					{
					match(input,NOT_BETWEEN,FOLLOW_NOT_BETWEEN_in_expression_element17337); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17339);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17341);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17343);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1785:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:1786:10: ^( SQL92_RESERVED_BETWEEN expression_element expression_element expression_element )
					{
					match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_expression_element17370); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17372);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17374);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17376);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1787:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:1788:10: ^( NOT_LIKE expression_element expression_element ( expression_element )? )
					{
					match(input,NOT_LIKE,FOLLOW_NOT_LIKE_in_expression_element17403); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17405);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17407);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1788:59: ( expression_element )?
					int alt397=2;
					int LA397_0 = input.LA(1);
					if ( (LA397_0==APPROXIMATE_NUM_LIT||LA397_0==ASTERISK||LA397_0==CHAR_STRING||LA397_0==CONCATENATION_OP||(LA397_0 >= EQUALS_OP && LA397_0 <= EXACT_NUM_LIT)||(LA397_0 >= GREATER_THAN_OP && LA397_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA397_0 >= LESS_THAN_OP && LA397_0 <= LESS_THAN_OR_EQUALS_OP)||LA397_0==MINUS_SIGN||LA397_0==NOT_EQUAL_OP||LA397_0==PLUS_SIGN||LA397_0==SOLIDUS||LA397_0==SQL92_RESERVED_ALL||(LA397_0 >= SQL92_RESERVED_AND && LA397_0 <= SQL92_RESERVED_ANY)||LA397_0==SQL92_RESERVED_BETWEEN||LA397_0==SQL92_RESERVED_DEFAULT||LA397_0==SQL92_RESERVED_DISTINCT||(LA397_0 >= SQL92_RESERVED_EXISTS && LA397_0 <= SQL92_RESERVED_FALSE)||LA397_0==SQL92_RESERVED_IN||(LA397_0 >= SQL92_RESERVED_LIKE && LA397_0 <= SQL92_RESERVED_NULL)||LA397_0==SQL92_RESERVED_OR||LA397_0==SQL92_RESERVED_PRIOR||LA397_0==SQL92_RESERVED_TRUE||LA397_0==UNSIGNED_INTEGER||LA397_0==CASCATED_ELEMENT||LA397_0==DATETIME_OP||LA397_0==DBTIMEZONE_VK||LA397_0==DIV_VK||LA397_0==DOT_ASTERISK||(LA397_0 >= IS_A_SET && LA397_0 <= IS_PRESENT)||LA397_0==KEEP_VK||(LA397_0 >= LIKE2_VK && LA397_0 <= LIKEC_VK)||LA397_0==MAXVALUE_VK||LA397_0==MEMBER_VK||LA397_0==MINVALUE_VK||LA397_0==MODEL_EXPRESSION||LA397_0==MOD_VK||LA397_0==NEW_VK||LA397_0==NOT_BETWEEN||(LA397_0 >= NOT_IN && LA397_0 <= NOT_LIKE)||LA397_0==OUTER_JOIN_SIGN||(LA397_0 >= PERCENT_FOUND_VK && LA397_0 <= PERCENT_ROWCOUNT_VK)||LA397_0==PIPE_VK||LA397_0==SEARCHED_CASE||LA397_0==SESSIONTIMEZONE_VK||LA397_0==SIMPLE_CASE||LA397_0==SOME_VK||LA397_0==STANDARD_FUNCTION||LA397_0==SUBMULTISET_VK||LA397_0==SUBQUERY||LA397_0==UNARY_OPERATOR||LA397_0==VECTOR_EXPR) ) {
						alt397=1;
					}
					switch (alt397) {
						case 1 :
							// PLSQLPrinter.g:1788:59: expression_element
							{
							pushFollow(FOLLOW_expression_element_in_expression_element17409);
							expression_element();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1789:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:1790:10: ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK ) expression_element expression_element ( expression_element )? )
					{
					// PLSQLPrinter.g:1790:12: ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK )
					int alt398=4;
					switch ( input.LA(1) ) {
					case SQL92_RESERVED_LIKE:
						{
						alt398=1;
						}
						break;
					case LIKEC_VK:
						{
						alt398=2;
						}
						break;
					case LIKE2_VK:
						{
						alt398=3;
						}
						break;
					case LIKE4_VK:
						{
						alt398=4;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 398, 0, input);
						throw nvae;
					}
					switch (alt398) {
						case 1 :
							// PLSQLPrinter.g:1790:13: SQL92_RESERVED_LIKE
							{
							match(input,SQL92_RESERVED_LIKE,FOLLOW_SQL92_RESERVED_LIKE_in_expression_element17438); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1790:33: LIKEC_VK
							{
							match(input,LIKEC_VK,FOLLOW_LIKEC_VK_in_expression_element17440); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1790:42: LIKE2_VK
							{
							match(input,LIKE2_VK,FOLLOW_LIKE2_VK_in_expression_element17442); 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1790:51: LIKE4_VK
							{
							match(input,LIKE4_VK,FOLLOW_LIKE4_VK_in_expression_element17444); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17447);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17449);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1790:99: ( expression_element )?
					int alt399=2;
					int LA399_0 = input.LA(1);
					if ( (LA399_0==APPROXIMATE_NUM_LIT||LA399_0==ASTERISK||LA399_0==CHAR_STRING||LA399_0==CONCATENATION_OP||(LA399_0 >= EQUALS_OP && LA399_0 <= EXACT_NUM_LIT)||(LA399_0 >= GREATER_THAN_OP && LA399_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA399_0 >= LESS_THAN_OP && LA399_0 <= LESS_THAN_OR_EQUALS_OP)||LA399_0==MINUS_SIGN||LA399_0==NOT_EQUAL_OP||LA399_0==PLUS_SIGN||LA399_0==SOLIDUS||LA399_0==SQL92_RESERVED_ALL||(LA399_0 >= SQL92_RESERVED_AND && LA399_0 <= SQL92_RESERVED_ANY)||LA399_0==SQL92_RESERVED_BETWEEN||LA399_0==SQL92_RESERVED_DEFAULT||LA399_0==SQL92_RESERVED_DISTINCT||(LA399_0 >= SQL92_RESERVED_EXISTS && LA399_0 <= SQL92_RESERVED_FALSE)||LA399_0==SQL92_RESERVED_IN||(LA399_0 >= SQL92_RESERVED_LIKE && LA399_0 <= SQL92_RESERVED_NULL)||LA399_0==SQL92_RESERVED_OR||LA399_0==SQL92_RESERVED_PRIOR||LA399_0==SQL92_RESERVED_TRUE||LA399_0==UNSIGNED_INTEGER||LA399_0==CASCATED_ELEMENT||LA399_0==DATETIME_OP||LA399_0==DBTIMEZONE_VK||LA399_0==DIV_VK||LA399_0==DOT_ASTERISK||(LA399_0 >= IS_A_SET && LA399_0 <= IS_PRESENT)||LA399_0==KEEP_VK||(LA399_0 >= LIKE2_VK && LA399_0 <= LIKEC_VK)||LA399_0==MAXVALUE_VK||LA399_0==MEMBER_VK||LA399_0==MINVALUE_VK||LA399_0==MODEL_EXPRESSION||LA399_0==MOD_VK||LA399_0==NEW_VK||LA399_0==NOT_BETWEEN||(LA399_0 >= NOT_IN && LA399_0 <= NOT_LIKE)||LA399_0==OUTER_JOIN_SIGN||(LA399_0 >= PERCENT_FOUND_VK && LA399_0 <= PERCENT_ROWCOUNT_VK)||LA399_0==PIPE_VK||LA399_0==SEARCHED_CASE||LA399_0==SESSIONTIMEZONE_VK||LA399_0==SIMPLE_CASE||LA399_0==SOME_VK||LA399_0==STANDARD_FUNCTION||LA399_0==SUBMULTISET_VK||LA399_0==SUBQUERY||LA399_0==UNARY_OPERATOR||LA399_0==VECTOR_EXPR) ) {
						alt399=1;
					}
					switch (alt399) {
						case 1 :
							// PLSQLPrinter.g:1790:99: expression_element
							{
							pushFollow(FOLLOW_expression_element_in_expression_element17451);
							expression_element();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1791:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:1793:10: ^( CONCATENATION_OP expression_element expression_element )
					{
					match(input,CONCATENATION_OP,FOLLOW_CONCATENATION_OP_in_expression_element17480); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17482);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17484);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1794:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:1795:10: ^( PLUS_SIGN expression_element expression_element )
					{
					match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_expression_element17511); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17513);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17515);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1796:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:1797:10: ^( MINUS_SIGN expression_element expression_element )
					{
					match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_expression_element17542); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17544);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17546);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1798:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:1799:10: ^( ASTERISK expression_element expression_element )
					{
					match(input,ASTERISK,FOLLOW_ASTERISK_in_expression_element17573); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17575);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17577);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1800:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:1801:10: ^( SOLIDUS expression_element expression_element )
					{
					match(input,SOLIDUS,FOLLOW_SOLIDUS_in_expression_element17604); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17606);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17608);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1802:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:1803:10: ^( MOD_VK expression_element expression_element )
					{
					match(input,MOD_VK,FOLLOW_MOD_VK_in_expression_element17635); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17637);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17639);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1804:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 19 :
					// PLSQLPrinter.g:1805:10: ^( DIV_VK expression_element expression_element )
					{
					match(input,DIV_VK,FOLLOW_DIV_VK_in_expression_element17666); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17668);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17670);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1806:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 20 :
					// PLSQLPrinter.g:1807:10: ^( PIPE_VK expression_element expression_element )
					{
					match(input,PIPE_VK,FOLLOW_PIPE_VK_in_expression_element17697); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17699);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17701);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1808:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 21 :
					// PLSQLPrinter.g:1810:10: ^( UNARY_OPERATOR arg= expression_element )
					{
					UNARY_OPERATOR203=(CommonTree)match(input,UNARY_OPERATOR,FOLLOW_UNARY_OPERATOR_in_expression_element17729); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17733);
					arg=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1811:5: -> expression_element_generic_prefix_unary_op(op=$UNARY_OPERATOR.textis_spaced=falsearg=$arg.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_generic_prefix_unary_op",new STAttrMap().put("op", (UNARY_OPERATOR203!=null?UNARY_OPERATOR203.getText():null)).put("is_spaced", false).put("arg", (arg!=null?((StringTemplate)arg.getTemplate()):null)));
					}



					}
					break;
				case 22 :
					// PLSQLPrinter.g:1812:10: ^( SQL92_RESERVED_PRIOR expression_element )
					{
					match(input,SQL92_RESERVED_PRIOR,FOLLOW_SQL92_RESERVED_PRIOR_in_expression_element17771); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17773);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1813:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 23 :
					// PLSQLPrinter.g:1814:10: ^( NEW_VK expression )
					{
					match(input,NEW_VK,FOLLOW_NEW_VK_in_expression_element17800); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_expression_element17802);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1815:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 24 :
					// PLSQLPrinter.g:1816:10: ^( SQL92_RESERVED_DISTINCT expression_element )
					{
					match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_expression_element17829); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17831);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1817:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 25 :
					// PLSQLPrinter.g:1818:10: ^( STANDARD_FUNCTION standard_function )
					{
					match(input,STANDARD_FUNCTION,FOLLOW_STANDARD_FUNCTION_in_expression_element17858); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_standard_function_in_expression_element17860);
					standard_function();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1819:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 26 :
					// PLSQLPrinter.g:1820:10: ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) expression_element )
					{
					// PLSQLPrinter.g:1820:12: ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY )
					int alt400=4;
					switch ( input.LA(1) ) {
					case SOME_VK:
						{
						alt400=1;
						}
						break;
					case SQL92_RESERVED_EXISTS:
						{
						alt400=2;
						}
						break;
					case SQL92_RESERVED_ALL:
						{
						alt400=3;
						}
						break;
					case SQL92_RESERVED_ANY:
						{
						alt400=4;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 400, 0, input);
						throw nvae;
					}
					switch (alt400) {
						case 1 :
							// PLSQLPrinter.g:1820:13: SOME_VK
							{
							match(input,SOME_VK,FOLLOW_SOME_VK_in_expression_element17888); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1820:21: SQL92_RESERVED_EXISTS
							{
							match(input,SQL92_RESERVED_EXISTS,FOLLOW_SQL92_RESERVED_EXISTS_in_expression_element17890); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1820:43: SQL92_RESERVED_ALL
							{
							match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_expression_element17892); 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1820:62: SQL92_RESERVED_ANY
							{
							match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_expression_element17894); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17897);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1821:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 27 :
					// PLSQLPrinter.g:1822:10: ^( VECTOR_EXPR ( expression_element )+ )
					{
					match(input,VECTOR_EXPR,FOLLOW_VECTOR_EXPR_in_expression_element17924); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1822:24: ( expression_element )+
					int cnt401=0;
					loop401:
					while (true) {
						int alt401=2;
						int LA401_0 = input.LA(1);
						if ( (LA401_0==APPROXIMATE_NUM_LIT||LA401_0==ASTERISK||LA401_0==CHAR_STRING||LA401_0==CONCATENATION_OP||(LA401_0 >= EQUALS_OP && LA401_0 <= EXACT_NUM_LIT)||(LA401_0 >= GREATER_THAN_OP && LA401_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA401_0 >= LESS_THAN_OP && LA401_0 <= LESS_THAN_OR_EQUALS_OP)||LA401_0==MINUS_SIGN||LA401_0==NOT_EQUAL_OP||LA401_0==PLUS_SIGN||LA401_0==SOLIDUS||LA401_0==SQL92_RESERVED_ALL||(LA401_0 >= SQL92_RESERVED_AND && LA401_0 <= SQL92_RESERVED_ANY)||LA401_0==SQL92_RESERVED_BETWEEN||LA401_0==SQL92_RESERVED_DEFAULT||LA401_0==SQL92_RESERVED_DISTINCT||(LA401_0 >= SQL92_RESERVED_EXISTS && LA401_0 <= SQL92_RESERVED_FALSE)||LA401_0==SQL92_RESERVED_IN||(LA401_0 >= SQL92_RESERVED_LIKE && LA401_0 <= SQL92_RESERVED_NULL)||LA401_0==SQL92_RESERVED_OR||LA401_0==SQL92_RESERVED_PRIOR||LA401_0==SQL92_RESERVED_TRUE||LA401_0==UNSIGNED_INTEGER||LA401_0==CASCATED_ELEMENT||LA401_0==DATETIME_OP||LA401_0==DBTIMEZONE_VK||LA401_0==DIV_VK||LA401_0==DOT_ASTERISK||(LA401_0 >= IS_A_SET && LA401_0 <= IS_PRESENT)||LA401_0==KEEP_VK||(LA401_0 >= LIKE2_VK && LA401_0 <= LIKEC_VK)||LA401_0==MAXVALUE_VK||LA401_0==MEMBER_VK||LA401_0==MINVALUE_VK||LA401_0==MODEL_EXPRESSION||LA401_0==MOD_VK||LA401_0==NEW_VK||LA401_0==NOT_BETWEEN||(LA401_0 >= NOT_IN && LA401_0 <= NOT_LIKE)||LA401_0==OUTER_JOIN_SIGN||(LA401_0 >= PERCENT_FOUND_VK && LA401_0 <= PERCENT_ROWCOUNT_VK)||LA401_0==PIPE_VK||LA401_0==SEARCHED_CASE||LA401_0==SESSIONTIMEZONE_VK||LA401_0==SIMPLE_CASE||LA401_0==SOME_VK||LA401_0==STANDARD_FUNCTION||LA401_0==SUBMULTISET_VK||LA401_0==SUBQUERY||LA401_0==UNARY_OPERATOR||LA401_0==VECTOR_EXPR) ) {
							alt401=1;
						}

						switch (alt401) {
						case 1 :
							// PLSQLPrinter.g:1822:24: expression_element
							{
							pushFollow(FOLLOW_expression_element_in_expression_element17926);
							expression_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt401 >= 1 ) break loop401;
							EarlyExitException eee = new EarlyExitException(401, input);
							throw eee;
						}
						cnt401++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1823:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 28 :
					// PLSQLPrinter.g:1825:10: ^( DATETIME_OP expression_element datetime_element )
					{
					match(input,DATETIME_OP,FOLLOW_DATETIME_OP_in_expression_element17955); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17957);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_datetime_element_in_expression_element17959);
					datetime_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1826:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 29 :
					// PLSQLPrinter.g:1827:10: model_expression
					{
					pushFollow(FOLLOW_model_expression_in_expression_element17985);
					model_expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1828:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 30 :
					// PLSQLPrinter.g:1829:10: ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? )
					{
					match(input,KEEP_VK,FOLLOW_KEEP_VK_in_expression_element18011); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18013);
					expression_element();
					state._fsp--;

					match(input,DENSE_RANK_VK,FOLLOW_DENSE_RANK_VK_in_expression_element18015); 
					// PLSQLPrinter.g:1829:53: ( FIRST_VK | LAST_VK )
					int alt402=2;
					int LA402_0 = input.LA(1);
					if ( (LA402_0==FIRST_VK) ) {
						alt402=1;
					}
					else if ( (LA402_0==LAST_VK) ) {
						alt402=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 402, 0, input);
						throw nvae;
					}

					switch (alt402) {
						case 1 :
							// PLSQLPrinter.g:1829:54: FIRST_VK
							{
							match(input,FIRST_VK,FOLLOW_FIRST_VK_in_expression_element18018); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1829:63: LAST_VK
							{
							match(input,LAST_VK,FOLLOW_LAST_VK_in_expression_element18020); 
							}
							break;

					}

					pushFollow(FOLLOW_order_by_clause_in_expression_element18023);
					order_by_clause();
					state._fsp--;

					// PLSQLPrinter.g:1829:88: ( over_clause )?
					int alt403=2;
					int LA403_0 = input.LA(1);
					if ( (LA403_0==OVER_VK) ) {
						alt403=1;
					}
					switch (alt403) {
						case 1 :
							// PLSQLPrinter.g:1829:88: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_expression_element18025);
							over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1830:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 31 :
					// PLSQLPrinter.g:1832:10: ^( DOT_ASTERISK tableview_name )
					{
					match(input,DOT_ASTERISK,FOLLOW_DOT_ASTERISK_in_expression_element18054); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_tableview_name_in_expression_element18056);
					tableview_name();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1833:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 32 :
					// PLSQLPrinter.g:1834:10: ^( ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK ) cursor_name )
					{
					// PLSQLPrinter.g:1834:12: ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK )
					int alt404=4;
					switch ( input.LA(1) ) {
					case PERCENT_FOUND_VK:
						{
						alt404=1;
						}
						break;
					case PERCENT_NOTFOUND_VK:
						{
						alt404=2;
						}
						break;
					case PERCENT_ROWCOUNT_VK:
						{
						alt404=3;
						}
						break;
					case PERCENT_ISOPEN_VK:
						{
						alt404=4;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 404, 0, input);
						throw nvae;
					}
					switch (alt404) {
						case 1 :
							// PLSQLPrinter.g:1834:13: PERCENT_FOUND_VK
							{
							match(input,PERCENT_FOUND_VK,FOLLOW_PERCENT_FOUND_VK_in_expression_element18084); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1834:30: PERCENT_NOTFOUND_VK
							{
							match(input,PERCENT_NOTFOUND_VK,FOLLOW_PERCENT_NOTFOUND_VK_in_expression_element18086); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1834:50: PERCENT_ROWCOUNT_VK
							{
							match(input,PERCENT_ROWCOUNT_VK,FOLLOW_PERCENT_ROWCOUNT_VK_in_expression_element18088); 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1834:70: PERCENT_ISOPEN_VK
							{
							match(input,PERCENT_ISOPEN_VK,FOLLOW_PERCENT_ISOPEN_VK_in_expression_element18090); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_cursor_name_in_expression_element18093);
					cursor_name();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1835:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 33 :
					// PLSQLPrinter.g:1836:10: ^( OUTER_JOIN_SIGN expression_element )
					{
					match(input,OUTER_JOIN_SIGN,FOLLOW_OUTER_JOIN_SIGN_in_expression_element18120); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18122);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1837:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 34 :
					// PLSQLPrinter.g:1839:10: case_statement
					{
					pushFollow(FOLLOW_case_statement_in_expression_element18149);
					case_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1840:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 35 :
					// PLSQLPrinter.g:1841:10: constant
					{
					pushFollow(FOLLOW_constant_in_expression_element18174);
					constant204=constant();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1841:19: -> { $constant.st }
					{
						retval.st =  (constant204!=null?((StringTemplate)constant204.getTemplate()):null) ;
					}



					}
					break;
				case 36 :
					// PLSQLPrinter.g:1842:10: general_element
					{
					pushFollow(FOLLOW_general_element_in_expression_element18189);
					general_element205=general_element();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1842:26: -> { $general_element.st }
					{
						retval.st =  (general_element205!=null?((StringTemplate)general_element205.getTemplate()):null) ;
					}



					}
					break;
				case 37 :
					// PLSQLPrinter.g:1843:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_expression_element18204);
					subquery206=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1843:19: -> { $subquery.st }
					{
						retval.st =  (subquery206!=null?((StringTemplate)subquery206.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression_element"


	public static class in_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "in_elements"
	// PLSQLPrinter.g:1846:1: in_elements : ( subquery -> template( \"not implemented: in_elements\"| expression_list -> template( \"not implemented: in_elements\");
	public final PLSQLPrinter.in_elements_return in_elements() throws RecognitionException {
		PLSQLPrinter.in_elements_return retval = new PLSQLPrinter.in_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1847:5: ( subquery -> template( \"not implemented: in_elements\"| expression_list -> template( \"not implemented: in_elements\")
			int alt406=2;
			int LA406_0 = input.LA(1);
			if ( (LA406_0==SUBQUERY) ) {
				alt406=1;
			}
			else if ( (LA406_0==EXPR_LIST) ) {
				alt406=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 406, 0, input);
				throw nvae;
			}

			switch (alt406) {
				case 1 :
					// PLSQLPrinter.g:1847:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_in_elements18229);
					subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1848:5: -> template( \"not implemented: in_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: in_elements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1849:10: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_in_elements18254);
					expression_list();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1850:5: -> template( \"not implemented: in_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: in_elements");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "in_elements"


	public static class datetime_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "datetime_element"
	// PLSQLPrinter.g:1853:1: datetime_element : ( ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) ) -> template( \"not implemented: datetime_element\"| ^( DAY_VK SECOND_VK ( expression )* ) -> template( \"not implemented: datetime_element\"| ^( YEAR_VK MONTH_VK expression ) -> template( \"not implemented: datetime_element\");
	public final PLSQLPrinter.datetime_element_return datetime_element() throws RecognitionException {
		PLSQLPrinter.datetime_element_return retval = new PLSQLPrinter.datetime_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1854:5: ( ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) ) -> template( \"not implemented: datetime_element\"| ^( DAY_VK SECOND_VK ( expression )* ) -> template( \"not implemented: datetime_element\"| ^( YEAR_VK MONTH_VK expression ) -> template( \"not implemented: datetime_element\")
			int alt409=3;
			switch ( input.LA(1) ) {
			case AT_VK:
				{
				alt409=1;
				}
				break;
			case DAY_VK:
				{
				alt409=2;
				}
				break;
			case YEAR_VK:
				{
				alt409=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 409, 0, input);
				throw nvae;
			}
			switch (alt409) {
				case 1 :
					// PLSQLPrinter.g:1854:10: ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) )
					{
					match(input,AT_VK,FOLLOW_AT_VK_in_datetime_element18289); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_datetime_element18291);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1854:37: ( LOCAL_VK | TIME_VK expression )
					int alt407=2;
					int LA407_0 = input.LA(1);
					if ( (LA407_0==LOCAL_VK) ) {
						alt407=1;
					}
					else if ( (LA407_0==TIME_VK) ) {
						alt407=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 407, 0, input);
						throw nvae;
					}

					switch (alt407) {
						case 1 :
							// PLSQLPrinter.g:1854:38: LOCAL_VK
							{
							match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_datetime_element18294); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1854:47: TIME_VK expression
							{
							match(input,TIME_VK,FOLLOW_TIME_VK_in_datetime_element18296); 
							pushFollow(FOLLOW_expression_in_datetime_element18298);
							expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1855:5: -> template( \"not implemented: datetime_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: datetime_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1856:10: ^( DAY_VK SECOND_VK ( expression )* )
					{
					match(input,DAY_VK,FOLLOW_DAY_VK_in_datetime_element18326); 
					match(input, Token.DOWN, null); 
					match(input,SECOND_VK,FOLLOW_SECOND_VK_in_datetime_element18328); 
					// PLSQLPrinter.g:1856:29: ( expression )*
					loop408:
					while (true) {
						int alt408=2;
						int LA408_0 = input.LA(1);
						if ( (LA408_0==EXPR||LA408_0==LOGIC_EXPR) ) {
							alt408=1;
						}

						switch (alt408) {
						case 1 :
							// PLSQLPrinter.g:1856:29: expression
							{
							pushFollow(FOLLOW_expression_in_datetime_element18330);
							expression();
							state._fsp--;

							}
							break;

						default :
							break loop408;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1857:5: -> template( \"not implemented: datetime_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: datetime_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1858:10: ^( YEAR_VK MONTH_VK expression )
					{
					match(input,YEAR_VK,FOLLOW_YEAR_VK_in_datetime_element18358); 
					match(input, Token.DOWN, null); 
					match(input,MONTH_VK,FOLLOW_MONTH_VK_in_datetime_element18360); 
					pushFollow(FOLLOW_expression_in_datetime_element18362);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1859:5: -> template( \"not implemented: datetime_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: datetime_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "datetime_element"


	public static class model_expression_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_expression"
	// PLSQLPrinter.g:1862:1: model_expression : ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ ) -> template( \"not implemented: model_expression\";
	public final PLSQLPrinter.model_expression_return model_expression() throws RecognitionException {
		PLSQLPrinter.model_expression_return retval = new PLSQLPrinter.model_expression_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1863:5: ( ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ ) -> template( \"not implemented: model_expression\")
			// PLSQLPrinter.g:1863:10: ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ )
			{
			match(input,MODEL_EXPRESSION,FOLLOW_MODEL_EXPRESSION_in_model_expression18398); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_element_in_model_expression18400);
			expression_element();
			state._fsp--;

			// PLSQLPrinter.g:1863:48: ( model_expression_element )+
			int cnt410=0;
			loop410:
			while (true) {
				int alt410=2;
				int LA410_0 = input.LA(1);
				if ( (LA410_0==SQL92_RESERVED_ANY||LA410_0==EXPR||(LA410_0 >= FOR_MULTI_COLUMN && LA410_0 <= FOR_SINGLE_COLUMN)||LA410_0==LOGIC_EXPR) ) {
					alt410=1;
				}

				switch (alt410) {
				case 1 :
					// PLSQLPrinter.g:1863:48: model_expression_element
					{
					pushFollow(FOLLOW_model_expression_element_in_model_expression18402);
					model_expression_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt410 >= 1 ) break loop410;
					EarlyExitException eee = new EarlyExitException(410, input);
					throw eee;
				}
				cnt410++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1864:5: -> template( \"not implemented: model_expression\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_expression");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_expression"


	public static class model_expression_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_expression_element"
	// PLSQLPrinter.g:1867:1: model_expression_element : ( SQL92_RESERVED_ANY -> template( \"not implemented: model_expression_element\"| expression -> template( \"not implemented: model_expression_element\"| ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? ) -> template( \"not implemented: model_expression_element\"| ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) ) -> template( \"not implemented: model_expression_element\");
	public final PLSQLPrinter.model_expression_element_return model_expression_element() throws RecognitionException {
		PLSQLPrinter.model_expression_element_return retval = new PLSQLPrinter.model_expression_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1868:5: ( SQL92_RESERVED_ANY -> template( \"not implemented: model_expression_element\"| expression -> template( \"not implemented: model_expression_element\"| ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? ) -> template( \"not implemented: model_expression_element\"| ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) ) -> template( \"not implemented: model_expression_element\")
			int alt415=4;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ANY:
				{
				alt415=1;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt415=2;
				}
				break;
			case FOR_SINGLE_COLUMN:
				{
				alt415=3;
				}
				break;
			case FOR_MULTI_COLUMN:
				{
				alt415=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 415, 0, input);
				throw nvae;
			}
			switch (alt415) {
				case 1 :
					// PLSQLPrinter.g:1868:10: SQL92_RESERVED_ANY
					{
					match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_model_expression_element18438); 
					// TEMPLATE REWRITE
					// 1869:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1870:10: expression
					{
					pushFollow(FOLLOW_expression_in_model_expression_element18463);
					expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1871:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1872:10: ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? )
					{
					match(input,FOR_SINGLE_COLUMN,FOLLOW_FOR_SINGLE_COLUMN_in_model_expression_element18489); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_column_name_in_model_expression_element18491);
					column_name();
					state._fsp--;

					pushFollow(FOLLOW_for_single_column_element_in_model_expression_element18493);
					for_single_column_element();
					state._fsp--;

					// PLSQLPrinter.g:1872:68: ( for_like_part )?
					int alt411=2;
					int LA411_0 = input.LA(1);
					if ( (LA411_0==SQL92_RESERVED_LIKE) ) {
						alt411=1;
					}
					switch (alt411) {
						case 1 :
							// PLSQLPrinter.g:1872:68: for_like_part
							{
							pushFollow(FOLLOW_for_like_part_in_model_expression_element18495);
							for_like_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1873:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1874:10: ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) )
					{
					match(input,FOR_MULTI_COLUMN,FOLLOW_FOR_MULTI_COLUMN_in_model_expression_element18523); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1874:29: ( column_name )+
					int cnt412=0;
					loop412:
					while (true) {
						int alt412=2;
						int LA412_0 = input.LA(1);
						if ( (LA412_0==COLUMN_NAME) ) {
							alt412=1;
						}

						switch (alt412) {
						case 1 :
							// PLSQLPrinter.g:1874:29: column_name
							{
							pushFollow(FOLLOW_column_name_in_model_expression_element18525);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt412 >= 1 ) break loop412;
							EarlyExitException eee = new EarlyExitException(412, input);
							throw eee;
						}
						cnt412++;
					}

					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_model_expression_element18529); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1874:62: ( subquery | ( expression_list )+ )
					int alt414=2;
					int LA414_0 = input.LA(1);
					if ( (LA414_0==SUBQUERY) ) {
						alt414=1;
					}
					else if ( (LA414_0==EXPR_LIST) ) {
						alt414=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 414, 0, input);
						throw nvae;
					}

					switch (alt414) {
						case 1 :
							// PLSQLPrinter.g:1874:63: subquery
							{
							pushFollow(FOLLOW_subquery_in_model_expression_element18532);
							subquery();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1874:72: ( expression_list )+
							{
							// PLSQLPrinter.g:1874:72: ( expression_list )+
							int cnt413=0;
							loop413:
							while (true) {
								int alt413=2;
								int LA413_0 = input.LA(1);
								if ( (LA413_0==EXPR_LIST) ) {
									alt413=1;
								}

								switch (alt413) {
								case 1 :
									// PLSQLPrinter.g:1874:72: expression_list
									{
									pushFollow(FOLLOW_expression_list_in_model_expression_element18534);
									expression_list();
									state._fsp--;

									}
									break;

								default :
									if ( cnt413 >= 1 ) break loop413;
									EarlyExitException eee = new EarlyExitException(413, input);
									throw eee;
								}
								cnt413++;
							}

							}
							break;

					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1875:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_expression_element"


	public static class for_single_column_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_single_column_element"
	// PLSQLPrinter.g:1878:1: for_single_column_element : ( ^( SQL92_RESERVED_IN expression_list ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_FROM expression ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_TO expression ) -> template( \"not implemented: for_single_column_element\"| ^( ( INCREMENT_VK | DECREMENT_VK ) expression ) -> template( \"not implemented: for_single_column_element\");
	public final PLSQLPrinter.for_single_column_element_return for_single_column_element() throws RecognitionException {
		PLSQLPrinter.for_single_column_element_return retval = new PLSQLPrinter.for_single_column_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1879:5: ( ^( SQL92_RESERVED_IN expression_list ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_FROM expression ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_TO expression ) -> template( \"not implemented: for_single_column_element\"| ^( ( INCREMENT_VK | DECREMENT_VK ) expression ) -> template( \"not implemented: for_single_column_element\")
			int alt417=4;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_IN:
				{
				alt417=1;
				}
				break;
			case SQL92_RESERVED_FROM:
				{
				alt417=2;
				}
				break;
			case SQL92_RESERVED_TO:
				{
				alt417=3;
				}
				break;
			case DECREMENT_VK:
			case INCREMENT_VK:
				{
				alt417=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 417, 0, input);
				throw nvae;
			}
			switch (alt417) {
				case 1 :
					// PLSQLPrinter.g:1879:10: ^( SQL92_RESERVED_IN expression_list )
					{
					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_for_single_column_element18573); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_list_in_for_single_column_element18575);
					expression_list();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1880:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1881:10: ^( SQL92_RESERVED_FROM expression )
					{
					match(input,SQL92_RESERVED_FROM,FOLLOW_SQL92_RESERVED_FROM_in_for_single_column_element18602); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element18604);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1882:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1883:10: ^( SQL92_RESERVED_TO expression )
					{
					match(input,SQL92_RESERVED_TO,FOLLOW_SQL92_RESERVED_TO_in_for_single_column_element18632); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element18634);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1884:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1885:10: ^( ( INCREMENT_VK | DECREMENT_VK ) expression )
					{
					// PLSQLPrinter.g:1885:12: ( INCREMENT_VK | DECREMENT_VK )
					int alt416=2;
					int LA416_0 = input.LA(1);
					if ( (LA416_0==INCREMENT_VK) ) {
						alt416=1;
					}
					else if ( (LA416_0==DECREMENT_VK) ) {
						alt416=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 416, 0, input);
						throw nvae;
					}

					switch (alt416) {
						case 1 :
							// PLSQLPrinter.g:1885:13: INCREMENT_VK
							{
							match(input,INCREMENT_VK,FOLLOW_INCREMENT_VK_in_for_single_column_element18663); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1885:26: DECREMENT_VK
							{
							match(input,DECREMENT_VK,FOLLOW_DECREMENT_VK_in_for_single_column_element18665); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element18668);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1886:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_single_column_element"


	public static class for_like_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_like_part"
	// PLSQLPrinter.g:1889:1: for_like_part : ^( SQL92_RESERVED_LIKE expression ) -> template( \"not implemented: for_like_part\";
	public final PLSQLPrinter.for_like_part_return for_like_part() throws RecognitionException {
		PLSQLPrinter.for_like_part_return retval = new PLSQLPrinter.for_like_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1890:5: ( ^( SQL92_RESERVED_LIKE expression ) -> template( \"not implemented: for_like_part\")
			// PLSQLPrinter.g:1890:10: ^( SQL92_RESERVED_LIKE expression )
			{
			match(input,SQL92_RESERVED_LIKE,FOLLOW_SQL92_RESERVED_LIKE_in_for_like_part18705); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_for_like_part18707);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1891:5: -> template( \"not implemented: for_like_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: for_like_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_like_part"


	public static class case_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "case_statement"
	// PLSQLPrinter.g:1894:1: case_statement : ( ^( SIMPLE_CASE ( label_name )* expression ( case_when_part )+ ( case_else_part )? ) -> template( \"not implemented: case_statement\"| ^( SEARCHED_CASE ( label_name )* ( case_when_part )+ ( case_else_part )? ) -> template( \"not implemented: case_statement\");
	public final PLSQLPrinter.case_statement_return case_statement() throws RecognitionException {
		PLSQLPrinter.case_statement_return retval = new PLSQLPrinter.case_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1895:5: ( ^( SIMPLE_CASE ( label_name )* expression ( case_when_part )+ ( case_else_part )? ) -> template( \"not implemented: case_statement\"| ^( SEARCHED_CASE ( label_name )* ( case_when_part )+ ( case_else_part )? ) -> template( \"not implemented: case_statement\")
			int alt424=2;
			int LA424_0 = input.LA(1);
			if ( (LA424_0==SIMPLE_CASE) ) {
				alt424=1;
			}
			else if ( (LA424_0==SEARCHED_CASE) ) {
				alt424=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 424, 0, input);
				throw nvae;
			}

			switch (alt424) {
				case 1 :
					// PLSQLPrinter.g:1895:10: ^( SIMPLE_CASE ( label_name )* expression ( case_when_part )+ ( case_else_part )? )
					{
					match(input,SIMPLE_CASE,FOLLOW_SIMPLE_CASE_in_case_statement18743); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1895:24: ( label_name )*
					loop418:
					while (true) {
						int alt418=2;
						int LA418_0 = input.LA(1);
						if ( (LA418_0==LABEL_NAME) ) {
							alt418=1;
						}

						switch (alt418) {
						case 1 :
							// PLSQLPrinter.g:1895:24: label_name
							{
							pushFollow(FOLLOW_label_name_in_case_statement18745);
							label_name();
							state._fsp--;

							}
							break;

						default :
							break loop418;
						}
					}

					pushFollow(FOLLOW_expression_in_case_statement18748);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1895:47: ( case_when_part )+
					int cnt419=0;
					loop419:
					while (true) {
						int alt419=2;
						int LA419_0 = input.LA(1);
						if ( (LA419_0==SQL92_RESERVED_WHEN) ) {
							alt419=1;
						}

						switch (alt419) {
						case 1 :
							// PLSQLPrinter.g:1895:47: case_when_part
							{
							pushFollow(FOLLOW_case_when_part_in_case_statement18750);
							case_when_part();
							state._fsp--;

							}
							break;

						default :
							if ( cnt419 >= 1 ) break loop419;
							EarlyExitException eee = new EarlyExitException(419, input);
							throw eee;
						}
						cnt419++;
					}

					// PLSQLPrinter.g:1895:63: ( case_else_part )?
					int alt420=2;
					int LA420_0 = input.LA(1);
					if ( (LA420_0==SQL92_RESERVED_ELSE) ) {
						alt420=1;
					}
					switch (alt420) {
						case 1 :
							// PLSQLPrinter.g:1895:63: case_else_part
							{
							pushFollow(FOLLOW_case_else_part_in_case_statement18753);
							case_else_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1896:5: -> template( \"not implemented: case_statement\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: case_statement");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1897:10: ^( SEARCHED_CASE ( label_name )* ( case_when_part )+ ( case_else_part )? )
					{
					match(input,SEARCHED_CASE,FOLLOW_SEARCHED_CASE_in_case_statement18783); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1897:26: ( label_name )*
					loop421:
					while (true) {
						int alt421=2;
						int LA421_0 = input.LA(1);
						if ( (LA421_0==LABEL_NAME) ) {
							alt421=1;
						}

						switch (alt421) {
						case 1 :
							// PLSQLPrinter.g:1897:26: label_name
							{
							pushFollow(FOLLOW_label_name_in_case_statement18785);
							label_name();
							state._fsp--;

							}
							break;

						default :
							break loop421;
						}
					}

					// PLSQLPrinter.g:1897:38: ( case_when_part )+
					int cnt422=0;
					loop422:
					while (true) {
						int alt422=2;
						int LA422_0 = input.LA(1);
						if ( (LA422_0==SQL92_RESERVED_WHEN) ) {
							alt422=1;
						}

						switch (alt422) {
						case 1 :
							// PLSQLPrinter.g:1897:38: case_when_part
							{
							pushFollow(FOLLOW_case_when_part_in_case_statement18788);
							case_when_part();
							state._fsp--;

							}
							break;

						default :
							if ( cnt422 >= 1 ) break loop422;
							EarlyExitException eee = new EarlyExitException(422, input);
							throw eee;
						}
						cnt422++;
					}

					// PLSQLPrinter.g:1897:54: ( case_else_part )?
					int alt423=2;
					int LA423_0 = input.LA(1);
					if ( (LA423_0==SQL92_RESERVED_ELSE) ) {
						alt423=1;
					}
					switch (alt423) {
						case 1 :
							// PLSQLPrinter.g:1897:54: case_else_part
							{
							pushFollow(FOLLOW_case_else_part_in_case_statement18791);
							case_else_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1898:5: -> template( \"not implemented: case_statement\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: case_statement");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_statement"


	public static class case_when_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "case_when_part"
	// PLSQLPrinter.g:1903:1: case_when_part : ^( SQL92_RESERVED_WHEN expression ( seq_of_statements | expression ) ) -> template( \"not implemented: case_when_part\";
	public final PLSQLPrinter.case_when_part_return case_when_part() throws RecognitionException {
		PLSQLPrinter.case_when_part_return retval = new PLSQLPrinter.case_when_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1904:5: ( ^( SQL92_RESERVED_WHEN expression ( seq_of_statements | expression ) ) -> template( \"not implemented: case_when_part\")
			// PLSQLPrinter.g:1904:10: ^( SQL92_RESERVED_WHEN expression ( seq_of_statements | expression ) )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_case_when_part18831); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_case_when_part18833);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1904:43: ( seq_of_statements | expression )
			int alt425=2;
			int LA425_0 = input.LA(1);
			if ( (LA425_0==STATEMENTS) ) {
				alt425=1;
			}
			else if ( (LA425_0==EXPR||LA425_0==LOGIC_EXPR) ) {
				alt425=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 425, 0, input);
				throw nvae;
			}

			switch (alt425) {
				case 1 :
					// PLSQLPrinter.g:1904:44: seq_of_statements
					{
					pushFollow(FOLLOW_seq_of_statements_in_case_when_part18836);
					seq_of_statements();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1904:62: expression
					{
					pushFollow(FOLLOW_expression_in_case_when_part18838);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1905:5: -> template( \"not implemented: case_when_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: case_when_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_when_part"


	public static class case_else_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "case_else_part"
	// PLSQLPrinter.g:1908:1: case_else_part : ^( SQL92_RESERVED_ELSE ( seq_of_statements | expression ) ) -> template( \"not implemented: case_else_part\";
	public final PLSQLPrinter.case_else_part_return case_else_part() throws RecognitionException {
		PLSQLPrinter.case_else_part_return retval = new PLSQLPrinter.case_else_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1909:5: ( ^( SQL92_RESERVED_ELSE ( seq_of_statements | expression ) ) -> template( \"not implemented: case_else_part\")
			// PLSQLPrinter.g:1909:10: ^( SQL92_RESERVED_ELSE ( seq_of_statements | expression ) )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_case_else_part18875); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1909:32: ( seq_of_statements | expression )
			int alt426=2;
			int LA426_0 = input.LA(1);
			if ( (LA426_0==STATEMENTS) ) {
				alt426=1;
			}
			else if ( (LA426_0==EXPR||LA426_0==LOGIC_EXPR) ) {
				alt426=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 426, 0, input);
				throw nvae;
			}

			switch (alt426) {
				case 1 :
					// PLSQLPrinter.g:1909:33: seq_of_statements
					{
					pushFollow(FOLLOW_seq_of_statements_in_case_else_part18878);
					seq_of_statements();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1909:51: expression
					{
					pushFollow(FOLLOW_expression_in_case_else_part18880);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1910:5: -> template( \"not implemented: case_else_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: case_else_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_else_part"


	public static class standard_function_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "standard_function"
	// PLSQLPrinter.g:1914:1: standard_function : ( ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? ) -> template( \"not implemented: standard_function\"| ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( COUNT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | expression ) ( over_clause )? ) -> template( \"not implemented: standard_function\"| ^( ( CAST_VK | XMLCAST_VK ) ( subquery | expression ) type_spec ) -> template( \"not implemented: standard_function\"| ^( CHR_VK expression NCHAR_CS_VK ) -> template( \"not implemented: standard_function\"| ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? ) -> template( \"not implemented: standard_function\"| ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause | over_clause )+ ) -> template( \"not implemented: standard_function\"| ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? ) -> template( \"not implemented: standard_function\"| ^( EXTRACT_VK ID expression ) -> template( \"not implemented: standard_function\"| ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause ) -> template( \"not implemented: standard_function\"| ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( TRANSLATE_VK expression ( CHAR_CS_VK | NCHAR_CS_VK )? ( expression )* ) -> template( \"not implemented: standard_function\"| ^( TREAT_VK expression ( REF_VK )? type_spec ) -> template( \"not implemented: standard_function\"| ^( TRIM_VK ( LEADING_VK | TRAILING_VK | BOTH_VK )? expression_element ( expression_element )? ) -> template( \"not implemented: standard_function\"| ^( XMLAGG_VK expression ( order_by_clause )? ) -> template( \"not implemented: standard_function\"| ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ ) -> template( \"not implemented: standard_function\"| ^( XMLEXISTS_VK expression ( xml_passing_clause )? ) -> template( \"not implemented: standard_function\"| ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? ) -> template( \"not implemented: standard_function\"| ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? ) -> template( \"not implemented: standard_function\"| ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? ) -> template( \"not implemented: standard_function\"| ^( XMLTABLE_VK ( xml_namespaces_clause )? expression ( xml_passing_clause )? ( xml_table_column )* ) -> template( \"not implemented: standard_function\"| ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? ( expression ( alias )? )* ) -> template( \"not implemented: standard_function\"| ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? ) -> template( \"not implemented: standard_function\"| ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? ) -> template( \"not implemented: standard_function\");
	public final PLSQLPrinter.standard_function_return standard_function() throws RecognitionException {
		PLSQLPrinter.standard_function_return retval = new PLSQLPrinter.standard_function_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1915:5: ( ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? ) -> template( \"not implemented: standard_function\"| ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( COUNT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | expression ) ( over_clause )? ) -> template( \"not implemented: standard_function\"| ^( ( CAST_VK | XMLCAST_VK ) ( subquery | expression ) type_spec ) -> template( \"not implemented: standard_function\"| ^( CHR_VK expression NCHAR_CS_VK ) -> template( \"not implemented: standard_function\"| ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? ) -> template( \"not implemented: standard_function\"| ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause | over_clause )+ ) -> template( \"not implemented: standard_function\"| ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? ) -> template( \"not implemented: standard_function\"| ^( EXTRACT_VK ID expression ) -> template( \"not implemented: standard_function\"| ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause ) -> template( \"not implemented: standard_function\"| ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( TRANSLATE_VK expression ( CHAR_CS_VK | NCHAR_CS_VK )? ( expression )* ) -> template( \"not implemented: standard_function\"| ^( TREAT_VK expression ( REF_VK )? type_spec ) -> template( \"not implemented: standard_function\"| ^( TRIM_VK ( LEADING_VK | TRAILING_VK | BOTH_VK )? expression_element ( expression_element )? ) -> template( \"not implemented: standard_function\"| ^( XMLAGG_VK expression ( order_by_clause )? ) -> template( \"not implemented: standard_function\"| ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ ) -> template( \"not implemented: standard_function\"| ^( XMLEXISTS_VK expression ( xml_passing_clause )? ) -> template( \"not implemented: standard_function\"| ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? ) -> template( \"not implemented: standard_function\"| ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? ) -> template( \"not implemented: standard_function\"| ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? ) -> template( \"not implemented: standard_function\"| ^( XMLTABLE_VK ( xml_namespaces_clause )? expression ( xml_passing_clause )? ( xml_table_column )* ) -> template( \"not implemented: standard_function\"| ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? ( expression ( alias )? )* ) -> template( \"not implemented: standard_function\"| ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? ) -> template( \"not implemented: standard_function\"| ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? ) -> template( \"not implemented: standard_function\")
			int alt475=24;
			switch ( input.LA(1) ) {
			case FUNCTION_ENABLING_OVER:
				{
				alt475=1;
				}
				break;
			case FUNCTION_ENABLING_USING:
				{
				alt475=2;
				}
				break;
			case COUNT_VK:
				{
				alt475=3;
				}
				break;
			case CAST_VK:
			case XMLCAST_VK:
				{
				alt475=4;
				}
				break;
			case CHR_VK:
				{
				alt475=5;
				}
				break;
			case COLLECT_VK:
				{
				alt475=6;
				}
				break;
			case FUNCTION_ENABLING_WITHIN_OR_OVER:
				{
				alt475=7;
				}
				break;
			case DECOMPOSE_VK:
				{
				alt475=8;
				}
				break;
			case EXTRACT_VK:
				{
				alt475=9;
				}
				break;
			case FIRST_VALUE_VK:
			case LAST_VALUE_VK:
				{
				alt475=10;
				}
				break;
			case PREDICTION_FUNCTION:
				{
				alt475=11;
				}
				break;
			case TRANSLATE_VK:
				{
				alt475=12;
				}
				break;
			case TREAT_VK:
				{
				alt475=13;
				}
				break;
			case TRIM_VK:
				{
				alt475=14;
				}
				break;
			case XMLAGG_VK:
				{
				alt475=15;
				}
				break;
			case XMLCOLATTVAL_VK:
			case XMLFOREST_VK:
				{
				alt475=16;
				}
				break;
			case XMLEXISTS_VK:
				{
				alt475=17;
				}
				break;
			case XMLPARSE_VK:
				{
				alt475=18;
				}
				break;
			case XMLQUERY_VK:
				{
				alt475=19;
				}
				break;
			case XMLROOT_VK:
				{
				alt475=20;
				}
				break;
			case XMLTABLE_VK:
				{
				alt475=21;
				}
				break;
			case XMLELEMENT_VK:
				{
				alt475=22;
				}
				break;
			case XMLPI_VK:
				{
				alt475=23;
				}
				break;
			case XMLSERIALIZE_VK:
				{
				alt475=24;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 475, 0, input);
				throw nvae;
			}
			switch (alt475) {
				case 1 :
					// PLSQLPrinter.g:1915:10: ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? )
					{
					match(input,FUNCTION_ENABLING_OVER,FOLLOW_FUNCTION_ENABLING_OVER_in_standard_function18918); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function18920);
					function_argument();
					state._fsp--;

					// PLSQLPrinter.g:1915:53: ( over_clause )?
					int alt427=2;
					int LA427_0 = input.LA(1);
					if ( (LA427_0==OVER_VK) ) {
						alt427=1;
					}
					switch (alt427) {
						case 1 :
							// PLSQLPrinter.g:1915:53: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function18922);
							over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1916:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1917:10: ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? )
					{
					match(input,FUNCTION_ENABLING_USING,FOLLOW_FUNCTION_ENABLING_USING_in_standard_function18950); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function18952);
					function_argument();
					state._fsp--;

					// PLSQLPrinter.g:1917:54: ( using_clause )?
					int alt428=2;
					int LA428_0 = input.LA(1);
					if ( (LA428_0==PLSQL_NON_RESERVED_USING) ) {
						alt428=1;
					}
					switch (alt428) {
						case 1 :
							// PLSQLPrinter.g:1917:54: using_clause
							{
							pushFollow(FOLLOW_using_clause_in_standard_function18954);
							using_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1918:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1919:10: ^( COUNT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | expression ) ( over_clause )? )
					{
					match(input,COUNT_VK,FOLLOW_COUNT_VK_in_standard_function18982); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1919:21: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )?
					int alt429=4;
					switch ( input.LA(1) ) {
						case SQL92_RESERVED_DISTINCT:
							{
							alt429=1;
							}
							break;
						case SQL92_RESERVED_UNIQUE:
							{
							alt429=2;
							}
							break;
						case SQL92_RESERVED_ALL:
							{
							alt429=3;
							}
							break;
					}
					switch (alt429) {
						case 1 :
							// PLSQLPrinter.g:1919:22: SQL92_RESERVED_DISTINCT
							{
							match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function18985); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1919:46: SQL92_RESERVED_UNIQUE
							{
							match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function18987); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1919:68: SQL92_RESERVED_ALL
							{
							match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_standard_function18989); 
							}
							break;

					}

					// PLSQLPrinter.g:1919:89: ( ASTERISK | expression )
					int alt430=2;
					int LA430_0 = input.LA(1);
					if ( (LA430_0==ASTERISK) ) {
						alt430=1;
					}
					else if ( (LA430_0==EXPR||LA430_0==LOGIC_EXPR) ) {
						alt430=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 430, 0, input);
						throw nvae;
					}

					switch (alt430) {
						case 1 :
							// PLSQLPrinter.g:1919:91: ASTERISK
							{
							match(input,ASTERISK,FOLLOW_ASTERISK_in_standard_function18995); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1919:102: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function18999);
							expression();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1919:115: ( over_clause )?
					int alt431=2;
					int LA431_0 = input.LA(1);
					if ( (LA431_0==OVER_VK) ) {
						alt431=1;
					}
					switch (alt431) {
						case 1 :
							// PLSQLPrinter.g:1919:115: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function19003);
							over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1920:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1921:10: ^( ( CAST_VK | XMLCAST_VK ) ( subquery | expression ) type_spec )
					{
					// PLSQLPrinter.g:1921:12: ( CAST_VK | XMLCAST_VK )
					int alt432=2;
					int LA432_0 = input.LA(1);
					if ( (LA432_0==CAST_VK) ) {
						alt432=1;
					}
					else if ( (LA432_0==XMLCAST_VK) ) {
						alt432=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 432, 0, input);
						throw nvae;
					}

					switch (alt432) {
						case 1 :
							// PLSQLPrinter.g:1921:13: CAST_VK
							{
							match(input,CAST_VK,FOLLOW_CAST_VK_in_standard_function19032); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1921:21: XMLCAST_VK
							{
							match(input,XMLCAST_VK,FOLLOW_XMLCAST_VK_in_standard_function19034); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1921:33: ( subquery | expression )
					int alt433=2;
					int LA433_0 = input.LA(1);
					if ( (LA433_0==SUBQUERY) ) {
						alt433=1;
					}
					else if ( (LA433_0==EXPR||LA433_0==LOGIC_EXPR) ) {
						alt433=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 433, 0, input);
						throw nvae;
					}

					switch (alt433) {
						case 1 :
							// PLSQLPrinter.g:1921:34: subquery
							{
							pushFollow(FOLLOW_subquery_in_standard_function19038);
							subquery();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1921:43: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function19040);
							expression();
							state._fsp--;

							}
							break;

					}

					pushFollow(FOLLOW_type_spec_in_standard_function19043);
					type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1922:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1923:10: ^( CHR_VK expression NCHAR_CS_VK )
					{
					match(input,CHR_VK,FOLLOW_CHR_VK_in_standard_function19070); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function19072);
					expression();
					state._fsp--;

					match(input,NCHAR_CS_VK,FOLLOW_NCHAR_CS_VK_in_standard_function19074); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1924:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:1925:10: ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? )
					{
					match(input,COLLECT_VK,FOLLOW_COLLECT_VK_in_standard_function19101); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1925:23: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )?
					int alt434=3;
					int LA434_0 = input.LA(1);
					if ( (LA434_0==SQL92_RESERVED_DISTINCT) ) {
						alt434=1;
					}
					else if ( (LA434_0==SQL92_RESERVED_UNIQUE) ) {
						alt434=2;
					}
					switch (alt434) {
						case 1 :
							// PLSQLPrinter.g:1925:24: SQL92_RESERVED_DISTINCT
							{
							match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function19104); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1925:48: SQL92_RESERVED_UNIQUE
							{
							match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function19106); 
							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_standard_function19110);
					column_name();
					state._fsp--;

					// PLSQLPrinter.g:1925:84: ( collect_order_by_part )?
					int alt435=2;
					int LA435_0 = input.LA(1);
					if ( (LA435_0==SQL92_RESERVED_ORDER) ) {
						alt435=1;
					}
					switch (alt435) {
						case 1 :
							// PLSQLPrinter.g:1925:84: collect_order_by_part
							{
							pushFollow(FOLLOW_collect_order_by_part_in_standard_function19112);
							collect_order_by_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1926:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:1927:10: ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause | over_clause )+ )
					{
					match(input,FUNCTION_ENABLING_WITHIN_OR_OVER,FOLLOW_FUNCTION_ENABLING_WITHIN_OR_OVER_in_standard_function19140); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function19142);
					function_argument();
					state._fsp--;

					// PLSQLPrinter.g:1927:63: ( within_clause | over_clause )+
					int cnt436=0;
					loop436:
					while (true) {
						int alt436=3;
						int LA436_0 = input.LA(1);
						if ( (LA436_0==WITHIN_VK) ) {
							alt436=1;
						}
						else if ( (LA436_0==OVER_VK) ) {
							alt436=2;
						}

						switch (alt436) {
						case 1 :
							// PLSQLPrinter.g:1927:64: within_clause
							{
							pushFollow(FOLLOW_within_clause_in_standard_function19145);
							within_clause();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1927:78: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function19147);
							over_clause();
							state._fsp--;

							}
							break;

						default :
							if ( cnt436 >= 1 ) break loop436;
							EarlyExitException eee = new EarlyExitException(436, input);
							throw eee;
						}
						cnt436++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1928:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:1929:10: ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? )
					{
					match(input,DECOMPOSE_VK,FOLLOW_DECOMPOSE_VK_in_standard_function19177); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function19179);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1929:36: ( CANONICAL_VK | COMPATIBILITY_VK )?
					int alt437=3;
					int LA437_0 = input.LA(1);
					if ( (LA437_0==CANONICAL_VK) ) {
						alt437=1;
					}
					else if ( (LA437_0==COMPATIBILITY_VK) ) {
						alt437=2;
					}
					switch (alt437) {
						case 1 :
							// PLSQLPrinter.g:1929:37: CANONICAL_VK
							{
							match(input,CANONICAL_VK,FOLLOW_CANONICAL_VK_in_standard_function19182); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1929:50: COMPATIBILITY_VK
							{
							match(input,COMPATIBILITY_VK,FOLLOW_COMPATIBILITY_VK_in_standard_function19184); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1930:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:1931:10: ^( EXTRACT_VK ID expression )
					{
					match(input,EXTRACT_VK,FOLLOW_EXTRACT_VK_in_standard_function19214); 
					match(input, Token.DOWN, null); 
					match(input,ID,FOLLOW_ID_in_standard_function19216); 
					pushFollow(FOLLOW_expression_in_standard_function19218);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1932:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:1933:10: ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause )
					{
					// PLSQLPrinter.g:1933:12: ( FIRST_VALUE_VK | LAST_VALUE_VK )
					int alt438=2;
					int LA438_0 = input.LA(1);
					if ( (LA438_0==FIRST_VALUE_VK) ) {
						alt438=1;
					}
					else if ( (LA438_0==LAST_VALUE_VK) ) {
						alt438=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 438, 0, input);
						throw nvae;
					}

					switch (alt438) {
						case 1 :
							// PLSQLPrinter.g:1933:13: FIRST_VALUE_VK
							{
							match(input,FIRST_VALUE_VK,FOLLOW_FIRST_VALUE_VK_in_standard_function19246); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1933:28: LAST_VALUE_VK
							{
							match(input,LAST_VALUE_VK,FOLLOW_LAST_VALUE_VK_in_standard_function19248); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function19251);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1933:54: ( NULLS_VK )?
					int alt439=2;
					int LA439_0 = input.LA(1);
					if ( (LA439_0==NULLS_VK) ) {
						alt439=1;
					}
					switch (alt439) {
						case 1 :
							// PLSQLPrinter.g:1933:54: NULLS_VK
							{
							match(input,NULLS_VK,FOLLOW_NULLS_VK_in_standard_function19253); 
							}
							break;

					}

					pushFollow(FOLLOW_over_clause_in_standard_function19256);
					over_clause();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1934:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:1935:10: ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? )
					{
					match(input,PREDICTION_FUNCTION,FOLLOW_PREDICTION_FUNCTION_in_standard_function19284); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1935:32: ( expression )+
					int cnt440=0;
					loop440:
					while (true) {
						int alt440=2;
						int LA440_0 = input.LA(1);
						if ( (LA440_0==EXPR||LA440_0==LOGIC_EXPR) ) {
							alt440=1;
						}

						switch (alt440) {
						case 1 :
							// PLSQLPrinter.g:1935:32: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function19286);
							expression();
							state._fsp--;

							}
							break;

						default :
							if ( cnt440 >= 1 ) break loop440;
							EarlyExitException eee = new EarlyExitException(440, input);
							throw eee;
						}
						cnt440++;
					}

					// PLSQLPrinter.g:1935:44: ( cost_matrix_clause )?
					int alt441=2;
					int LA441_0 = input.LA(1);
					if ( (LA441_0==COST_VK) ) {
						alt441=1;
					}
					switch (alt441) {
						case 1 :
							// PLSQLPrinter.g:1935:44: cost_matrix_clause
							{
							pushFollow(FOLLOW_cost_matrix_clause_in_standard_function19289);
							cost_matrix_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1935:64: ( using_clause )?
					int alt442=2;
					int LA442_0 = input.LA(1);
					if ( (LA442_0==PLSQL_NON_RESERVED_USING) ) {
						alt442=1;
					}
					switch (alt442) {
						case 1 :
							// PLSQLPrinter.g:1935:64: using_clause
							{
							pushFollow(FOLLOW_using_clause_in_standard_function19292);
							using_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1936:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:1937:10: ^( TRANSLATE_VK expression ( CHAR_CS_VK | NCHAR_CS_VK )? ( expression )* )
					{
					match(input,TRANSLATE_VK,FOLLOW_TRANSLATE_VK_in_standard_function19320); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function19322);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1937:36: ( CHAR_CS_VK | NCHAR_CS_VK )?
					int alt443=3;
					int LA443_0 = input.LA(1);
					if ( (LA443_0==CHAR_CS_VK) ) {
						alt443=1;
					}
					else if ( (LA443_0==NCHAR_CS_VK) ) {
						alt443=2;
					}
					switch (alt443) {
						case 1 :
							// PLSQLPrinter.g:1937:37: CHAR_CS_VK
							{
							match(input,CHAR_CS_VK,FOLLOW_CHAR_CS_VK_in_standard_function19325); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1937:48: NCHAR_CS_VK
							{
							match(input,NCHAR_CS_VK,FOLLOW_NCHAR_CS_VK_in_standard_function19327); 
							}
							break;

					}

					// PLSQLPrinter.g:1937:62: ( expression )*
					loop444:
					while (true) {
						int alt444=2;
						int LA444_0 = input.LA(1);
						if ( (LA444_0==EXPR||LA444_0==LOGIC_EXPR) ) {
							alt444=1;
						}

						switch (alt444) {
						case 1 :
							// PLSQLPrinter.g:1937:62: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function19331);
							expression();
							state._fsp--;

							}
							break;

						default :
							break loop444;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1938:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:1939:10: ^( TREAT_VK expression ( REF_VK )? type_spec )
					{
					match(input,TREAT_VK,FOLLOW_TREAT_VK_in_standard_function19359); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function19361);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1939:32: ( REF_VK )?
					int alt445=2;
					int LA445_0 = input.LA(1);
					if ( (LA445_0==REF_VK) ) {
						alt445=1;
					}
					switch (alt445) {
						case 1 :
							// PLSQLPrinter.g:1939:32: REF_VK
							{
							match(input,REF_VK,FOLLOW_REF_VK_in_standard_function19363); 
							}
							break;

					}

					pushFollow(FOLLOW_type_spec_in_standard_function19366);
					type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1940:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:1941:10: ^( TRIM_VK ( LEADING_VK | TRAILING_VK | BOTH_VK )? expression_element ( expression_element )? )
					{
					match(input,TRIM_VK,FOLLOW_TRIM_VK_in_standard_function19393); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1941:20: ( LEADING_VK | TRAILING_VK | BOTH_VK )?
					int alt446=4;
					switch ( input.LA(1) ) {
						case LEADING_VK:
							{
							alt446=1;
							}
							break;
						case TRAILING_VK:
							{
							alt446=2;
							}
							break;
						case BOTH_VK:
							{
							alt446=3;
							}
							break;
					}
					switch (alt446) {
						case 1 :
							// PLSQLPrinter.g:1941:21: LEADING_VK
							{
							match(input,LEADING_VK,FOLLOW_LEADING_VK_in_standard_function19396); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1941:32: TRAILING_VK
							{
							match(input,TRAILING_VK,FOLLOW_TRAILING_VK_in_standard_function19398); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1941:44: BOTH_VK
							{
							match(input,BOTH_VK,FOLLOW_BOTH_VK_in_standard_function19400); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_element_in_standard_function19404);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1941:73: ( expression_element )?
					int alt447=2;
					int LA447_0 = input.LA(1);
					if ( (LA447_0==APPROXIMATE_NUM_LIT||LA447_0==ASTERISK||LA447_0==CHAR_STRING||LA447_0==CONCATENATION_OP||(LA447_0 >= EQUALS_OP && LA447_0 <= EXACT_NUM_LIT)||(LA447_0 >= GREATER_THAN_OP && LA447_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA447_0 >= LESS_THAN_OP && LA447_0 <= LESS_THAN_OR_EQUALS_OP)||LA447_0==MINUS_SIGN||LA447_0==NOT_EQUAL_OP||LA447_0==PLUS_SIGN||LA447_0==SOLIDUS||LA447_0==SQL92_RESERVED_ALL||(LA447_0 >= SQL92_RESERVED_AND && LA447_0 <= SQL92_RESERVED_ANY)||LA447_0==SQL92_RESERVED_BETWEEN||LA447_0==SQL92_RESERVED_DEFAULT||LA447_0==SQL92_RESERVED_DISTINCT||(LA447_0 >= SQL92_RESERVED_EXISTS && LA447_0 <= SQL92_RESERVED_FALSE)||LA447_0==SQL92_RESERVED_IN||(LA447_0 >= SQL92_RESERVED_LIKE && LA447_0 <= SQL92_RESERVED_NULL)||LA447_0==SQL92_RESERVED_OR||LA447_0==SQL92_RESERVED_PRIOR||LA447_0==SQL92_RESERVED_TRUE||LA447_0==UNSIGNED_INTEGER||LA447_0==CASCATED_ELEMENT||LA447_0==DATETIME_OP||LA447_0==DBTIMEZONE_VK||LA447_0==DIV_VK||LA447_0==DOT_ASTERISK||(LA447_0 >= IS_A_SET && LA447_0 <= IS_PRESENT)||LA447_0==KEEP_VK||(LA447_0 >= LIKE2_VK && LA447_0 <= LIKEC_VK)||LA447_0==MAXVALUE_VK||LA447_0==MEMBER_VK||LA447_0==MINVALUE_VK||LA447_0==MODEL_EXPRESSION||LA447_0==MOD_VK||LA447_0==NEW_VK||LA447_0==NOT_BETWEEN||(LA447_0 >= NOT_IN && LA447_0 <= NOT_LIKE)||LA447_0==OUTER_JOIN_SIGN||(LA447_0 >= PERCENT_FOUND_VK && LA447_0 <= PERCENT_ROWCOUNT_VK)||LA447_0==PIPE_VK||LA447_0==SEARCHED_CASE||LA447_0==SESSIONTIMEZONE_VK||LA447_0==SIMPLE_CASE||LA447_0==SOME_VK||LA447_0==STANDARD_FUNCTION||LA447_0==SUBMULTISET_VK||LA447_0==SUBQUERY||LA447_0==UNARY_OPERATOR||LA447_0==VECTOR_EXPR) ) {
						alt447=1;
					}
					switch (alt447) {
						case 1 :
							// PLSQLPrinter.g:1941:73: expression_element
							{
							pushFollow(FOLLOW_expression_element_in_standard_function19406);
							expression_element();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1942:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:1944:10: ^( XMLAGG_VK expression ( order_by_clause )? )
					{
					match(input,XMLAGG_VK,FOLLOW_XMLAGG_VK_in_standard_function19436); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function19438);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1944:33: ( order_by_clause )?
					int alt448=2;
					int LA448_0 = input.LA(1);
					if ( (LA448_0==SQL92_RESERVED_ORDER) ) {
						alt448=1;
					}
					switch (alt448) {
						case 1 :
							// PLSQLPrinter.g:1944:33: order_by_clause
							{
							pushFollow(FOLLOW_order_by_clause_in_standard_function19440);
							order_by_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1945:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:1946:10: ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ )
					{
					// PLSQLPrinter.g:1946:12: ( XMLCOLATTVAL_VK | XMLFOREST_VK )
					int alt449=2;
					int LA449_0 = input.LA(1);
					if ( (LA449_0==XMLCOLATTVAL_VK) ) {
						alt449=1;
					}
					else if ( (LA449_0==XMLFOREST_VK) ) {
						alt449=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 449, 0, input);
						throw nvae;
					}

					switch (alt449) {
						case 1 :
							// PLSQLPrinter.g:1946:13: XMLCOLATTVAL_VK
							{
							match(input,XMLCOLATTVAL_VK,FOLLOW_XMLCOLATTVAL_VK_in_standard_function19469); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1946:29: XMLFOREST_VK
							{
							match(input,XMLFOREST_VK,FOLLOW_XMLFOREST_VK_in_standard_function19471); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1946:43: ( xml_multiuse_expression_element )+
					int cnt450=0;
					loop450:
					while (true) {
						int alt450=2;
						int LA450_0 = input.LA(1);
						if ( (LA450_0==XML_ELEMENT) ) {
							alt450=1;
						}

						switch (alt450) {
						case 1 :
							// PLSQLPrinter.g:1946:43: xml_multiuse_expression_element
							{
							pushFollow(FOLLOW_xml_multiuse_expression_element_in_standard_function19474);
							xml_multiuse_expression_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt450 >= 1 ) break loop450;
							EarlyExitException eee = new EarlyExitException(450, input);
							throw eee;
						}
						cnt450++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1947:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:1948:10: ^( XMLEXISTS_VK expression ( xml_passing_clause )? )
					{
					match(input,XMLEXISTS_VK,FOLLOW_XMLEXISTS_VK_in_standard_function19502); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function19504);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1948:36: ( xml_passing_clause )?
					int alt451=2;
					int LA451_0 = input.LA(1);
					if ( (LA451_0==PASSING_VK) ) {
						alt451=1;
					}
					switch (alt451) {
						case 1 :
							// PLSQLPrinter.g:1948:36: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function19506);
							xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1949:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:1950:10: ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? )
					{
					match(input,XMLPARSE_VK,FOLLOW_XMLPARSE_VK_in_standard_function19534); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1950:24: ( DOCUMENT_VK | CONTENT_VK )
					int alt452=2;
					int LA452_0 = input.LA(1);
					if ( (LA452_0==DOCUMENT_VK) ) {
						alt452=1;
					}
					else if ( (LA452_0==CONTENT_VK) ) {
						alt452=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 452, 0, input);
						throw nvae;
					}

					switch (alt452) {
						case 1 :
							// PLSQLPrinter.g:1950:25: DOCUMENT_VK
							{
							match(input,DOCUMENT_VK,FOLLOW_DOCUMENT_VK_in_standard_function19537); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1950:37: CONTENT_VK
							{
							match(input,CONTENT_VK,FOLLOW_CONTENT_VK_in_standard_function19539); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function19542);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1950:60: ( WELLFORMED_VK )?
					int alt453=2;
					int LA453_0 = input.LA(1);
					if ( (LA453_0==WELLFORMED_VK) ) {
						alt453=1;
					}
					switch (alt453) {
						case 1 :
							// PLSQLPrinter.g:1950:60: WELLFORMED_VK
							{
							match(input,WELLFORMED_VK,FOLLOW_WELLFORMED_VK_in_standard_function19544); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1951:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 19 :
					// PLSQLPrinter.g:1952:10: ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? )
					{
					match(input,XMLQUERY_VK,FOLLOW_XMLQUERY_VK_in_standard_function19572); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function19574);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1952:35: ( xml_passing_clause )?
					int alt454=2;
					int LA454_0 = input.LA(1);
					if ( (LA454_0==PASSING_VK) ) {
						alt454=1;
					}
					switch (alt454) {
						case 1 :
							// PLSQLPrinter.g:1952:35: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function19576);
							xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1952:55: ( SQL92_RESERVED_NULL )?
					int alt455=2;
					int LA455_0 = input.LA(1);
					if ( (LA455_0==SQL92_RESERVED_NULL) ) {
						alt455=1;
					}
					switch (alt455) {
						case 1 :
							// PLSQLPrinter.g:1952:55: SQL92_RESERVED_NULL
							{
							match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_standard_function19579); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1953:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 20 :
					// PLSQLPrinter.g:1954:10: ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? )
					{
					match(input,XMLROOT_VK,FOLLOW_XMLROOT_VK_in_standard_function19607); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function19609);
					expression();
					state._fsp--;

					pushFollow(FOLLOW_xml_param_version_part_in_standard_function19611);
					xml_param_version_part();
					state._fsp--;

					// PLSQLPrinter.g:1954:57: ( xmlroot_param_standalone_part )?
					int alt456=2;
					int LA456_0 = input.LA(1);
					if ( (LA456_0==STANDALONE_VK) ) {
						alt456=1;
					}
					switch (alt456) {
						case 1 :
							// PLSQLPrinter.g:1954:57: xmlroot_param_standalone_part
							{
							pushFollow(FOLLOW_xmlroot_param_standalone_part_in_standard_function19613);
							xmlroot_param_standalone_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1955:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 21 :
					// PLSQLPrinter.g:1956:10: ^( XMLTABLE_VK ( xml_namespaces_clause )? expression ( xml_passing_clause )? ( xml_table_column )* )
					{
					match(input,XMLTABLE_VK,FOLLOW_XMLTABLE_VK_in_standard_function19641); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1956:24: ( xml_namespaces_clause )?
					int alt457=2;
					int LA457_0 = input.LA(1);
					if ( (LA457_0==XMLNAMESPACES_VK) ) {
						alt457=1;
					}
					switch (alt457) {
						case 1 :
							// PLSQLPrinter.g:1956:24: xml_namespaces_clause
							{
							pushFollow(FOLLOW_xml_namespaces_clause_in_standard_function19643);
							xml_namespaces_clause();
							state._fsp--;

							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function19646);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1956:58: ( xml_passing_clause )?
					int alt458=2;
					int LA458_0 = input.LA(1);
					if ( (LA458_0==PASSING_VK) ) {
						alt458=1;
					}
					switch (alt458) {
						case 1 :
							// PLSQLPrinter.g:1956:58: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function19648);
							xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1956:78: ( xml_table_column )*
					loop459:
					while (true) {
						int alt459=2;
						int LA459_0 = input.LA(1);
						if ( (LA459_0==XML_COLUMN) ) {
							alt459=1;
						}

						switch (alt459) {
						case 1 :
							// PLSQLPrinter.g:1956:78: xml_table_column
							{
							pushFollow(FOLLOW_xml_table_column_in_standard_function19651);
							xml_table_column();
							state._fsp--;

							}
							break;

						default :
							break loop459;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1957:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 22 :
					// PLSQLPrinter.g:1958:10: ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? ( expression ( alias )? )* )
					{
					match(input,XMLELEMENT_VK,FOLLOW_XMLELEMENT_VK_in_standard_function19679); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1959:13: ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )?
					int alt460=3;
					int LA460_0 = input.LA(1);
					if ( (LA460_0==ENTITYESCAPING_VK) ) {
						alt460=1;
					}
					else if ( (LA460_0==NOENTITYESCAPING_VK) ) {
						alt460=2;
					}
					switch (alt460) {
						case 1 :
							// PLSQLPrinter.g:1959:14: ENTITYESCAPING_VK
							{
							match(input,ENTITYESCAPING_VK,FOLLOW_ENTITYESCAPING_VK_in_standard_function19694); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1959:32: NOENTITYESCAPING_VK
							{
							match(input,NOENTITYESCAPING_VK,FOLLOW_NOENTITYESCAPING_VK_in_standard_function19696); 
							}
							break;

					}

					// PLSQLPrinter.g:1960:13: ( NAME_VK | EVALNAME_VK )?
					int alt461=3;
					int LA461_0 = input.LA(1);
					if ( (LA461_0==NAME_VK) ) {
						alt461=1;
					}
					else if ( (LA461_0==EVALNAME_VK) ) {
						alt461=2;
					}
					switch (alt461) {
						case 1 :
							// PLSQLPrinter.g:1960:14: NAME_VK
							{
							match(input,NAME_VK,FOLLOW_NAME_VK_in_standard_function19713); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1960:22: EVALNAME_VK
							{
							match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_standard_function19715); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function19719);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1961:13: ( xml_attributes_clause )?
					int alt462=2;
					int LA462_0 = input.LA(1);
					if ( (LA462_0==XMLATTRIBUTES_VK) ) {
						alt462=1;
					}
					switch (alt462) {
						case 1 :
							// PLSQLPrinter.g:1961:13: xml_attributes_clause
							{
							pushFollow(FOLLOW_xml_attributes_clause_in_standard_function19733);
							xml_attributes_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1961:36: ( expression ( alias )? )*
					loop464:
					while (true) {
						int alt464=2;
						int LA464_0 = input.LA(1);
						if ( (LA464_0==EXPR||LA464_0==LOGIC_EXPR) ) {
							alt464=1;
						}

						switch (alt464) {
						case 1 :
							// PLSQLPrinter.g:1961:37: expression ( alias )?
							{
							pushFollow(FOLLOW_expression_in_standard_function19737);
							expression();
							state._fsp--;

							// PLSQLPrinter.g:1961:48: ( alias )?
							int alt463=2;
							int LA463_0 = input.LA(1);
							if ( (LA463_0==ALIAS) ) {
								alt463=1;
							}
							switch (alt463) {
								case 1 :
									// PLSQLPrinter.g:1961:48: alias
									{
									pushFollow(FOLLOW_alias_in_standard_function19739);
									alias();
									state._fsp--;

									}
									break;

							}

							}
							break;

						default :
							break loop464;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1963:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 23 :
					// PLSQLPrinter.g:1964:10: ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? )
					{
					match(input,XMLPI_VK,FOLLOW_XMLPI_VK_in_standard_function19778); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1965:17: ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression )
					int alt466=2;
					int LA466_0 = input.LA(1);
					if ( (LA466_0==NAME_VK) ) {
						alt466=1;
					}
					else if ( (LA466_0==EVALNAME_VK) ) {
						alt466=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 466, 0, input);
						throw nvae;
					}

					switch (alt466) {
						case 1 :
							// PLSQLPrinter.g:1965:22: NAME_VK ( char_set_name )? ID
							{
							match(input,NAME_VK,FOLLOW_NAME_VK_in_standard_function19801); 
							// PLSQLPrinter.g:1965:30: ( char_set_name )?
							int alt465=2;
							int LA465_0 = input.LA(1);
							if ( (LA465_0==CHAR_SET_NAME) ) {
								alt465=1;
							}
							switch (alt465) {
								case 1 :
									// PLSQLPrinter.g:1965:30: char_set_name
									{
									pushFollow(FOLLOW_char_set_name_in_standard_function19803);
									char_set_name();
									state._fsp--;

									}
									break;

							}

							match(input,ID,FOLLOW_ID_in_standard_function19806); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1966:22: EVALNAME_VK expression
							{
							match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_standard_function19829); 
							pushFollow(FOLLOW_expression_in_standard_function19831);
							expression();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1968:17: ( expression )?
					int alt467=2;
					int LA467_0 = input.LA(1);
					if ( (LA467_0==EXPR||LA467_0==LOGIC_EXPR) ) {
						alt467=1;
					}
					switch (alt467) {
						case 1 :
							// PLSQLPrinter.g:1968:17: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function19867);
							expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1970:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 24 :
					// PLSQLPrinter.g:1971:10: ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? )
					{
					match(input,XMLSERIALIZE_VK,FOLLOW_XMLSERIALIZE_VK_in_standard_function19904); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1972:17: ( DOCUMENT_VK | CONTENT_VK )
					int alt468=2;
					int LA468_0 = input.LA(1);
					if ( (LA468_0==DOCUMENT_VK) ) {
						alt468=1;
					}
					else if ( (LA468_0==CONTENT_VK) ) {
						alt468=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 468, 0, input);
						throw nvae;
					}

					switch (alt468) {
						case 1 :
							// PLSQLPrinter.g:1972:18: DOCUMENT_VK
							{
							match(input,DOCUMENT_VK,FOLLOW_DOCUMENT_VK_in_standard_function19923); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1972:30: CONTENT_VK
							{
							match(input,CONTENT_VK,FOLLOW_CONTENT_VK_in_standard_function19925); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function19944);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1973:28: ( type_spec )?
					int alt469=2;
					int LA469_0 = input.LA(1);
					if ( (LA469_0==CUSTOM_TYPE||LA469_0==INTERVAL_DATATYPE||LA469_0==NATIVE_DATATYPE) ) {
						alt469=1;
					}
					switch (alt469) {
						case 1 :
							// PLSQLPrinter.g:1973:28: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_standard_function19946);
							type_spec();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1974:17: ( xmlserialize_param_enconding_part )?
					int alt470=2;
					int LA470_0 = input.LA(1);
					if ( (LA470_0==ENCODING_VK) ) {
						alt470=1;
					}
					switch (alt470) {
						case 1 :
							// PLSQLPrinter.g:1974:17: xmlserialize_param_enconding_part
							{
							pushFollow(FOLLOW_xmlserialize_param_enconding_part_in_standard_function19965);
							xmlserialize_param_enconding_part();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1975:17: ( xml_param_version_part )?
					int alt471=2;
					int LA471_0 = input.LA(1);
					if ( (LA471_0==VERSION_VK) ) {
						alt471=1;
					}
					switch (alt471) {
						case 1 :
							// PLSQLPrinter.g:1975:17: xml_param_version_part
							{
							pushFollow(FOLLOW_xml_param_version_part_in_standard_function19984);
							xml_param_version_part();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1976:17: ( xmlserialize_param_ident_part )?
					int alt472=2;
					int LA472_0 = input.LA(1);
					if ( (LA472_0==INDENT_VK||LA472_0==NO_VK) ) {
						alt472=1;
					}
					switch (alt472) {
						case 1 :
							// PLSQLPrinter.g:1976:17: xmlserialize_param_ident_part
							{
							pushFollow(FOLLOW_xmlserialize_param_ident_part_in_standard_function20003);
							xmlserialize_param_ident_part();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1977:17: ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )?
					int alt474=2;
					int LA474_0 = input.LA(1);
					if ( (LA474_0==HIDE_VK||LA474_0==SHOW_VK) ) {
						alt474=1;
					}
					switch (alt474) {
						case 1 :
							// PLSQLPrinter.g:1977:18: ( HIDE_VK | SHOW_VK ) DEFAULTS_VK
							{
							// PLSQLPrinter.g:1977:18: ( HIDE_VK | SHOW_VK )
							int alt473=2;
							int LA473_0 = input.LA(1);
							if ( (LA473_0==HIDE_VK) ) {
								alt473=1;
							}
							else if ( (LA473_0==SHOW_VK) ) {
								alt473=2;
							}

							else {
								NoViableAltException nvae =
									new NoViableAltException("", 473, 0, input);
								throw nvae;
							}

							switch (alt473) {
								case 1 :
									// PLSQLPrinter.g:1977:19: HIDE_VK
									{
									match(input,HIDE_VK,FOLLOW_HIDE_VK_in_standard_function20024); 
									}
									break;
								case 2 :
									// PLSQLPrinter.g:1977:27: SHOW_VK
									{
									match(input,SHOW_VK,FOLLOW_SHOW_VK_in_standard_function20026); 
									}
									break;

							}

							match(input,DEFAULTS_VK,FOLLOW_DEFAULTS_VK_in_standard_function20029); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1979:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "standard_function"


	public static class over_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "over_clause"
	// PLSQLPrinter.g:1982:1: over_clause : ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? ) -> template( \"not implemented: over_clause\";
	public final PLSQLPrinter.over_clause_return over_clause() throws RecognitionException {
		PLSQLPrinter.over_clause_return retval = new PLSQLPrinter.over_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1983:5: ( ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? ) -> template( \"not implemented: over_clause\")
			// PLSQLPrinter.g:1983:10: ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? )
			{
			match(input,OVER_VK,FOLLOW_OVER_VK_in_over_clause20076); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1983:20: ( query_partition_clause )?
				int alt476=2;
				int LA476_0 = input.LA(1);
				if ( (LA476_0==PARTITION_VK) ) {
					alt476=1;
				}
				switch (alt476) {
					case 1 :
						// PLSQLPrinter.g:1983:20: query_partition_clause
						{
						pushFollow(FOLLOW_query_partition_clause_in_over_clause20078);
						query_partition_clause();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1983:44: ( order_by_clause ( windowing_clause )? )?
				int alt478=2;
				int LA478_0 = input.LA(1);
				if ( (LA478_0==SQL92_RESERVED_ORDER) ) {
					alt478=1;
				}
				switch (alt478) {
					case 1 :
						// PLSQLPrinter.g:1983:45: order_by_clause ( windowing_clause )?
						{
						pushFollow(FOLLOW_order_by_clause_in_over_clause20082);
						order_by_clause();
						state._fsp--;

						// PLSQLPrinter.g:1983:61: ( windowing_clause )?
						int alt477=2;
						int LA477_0 = input.LA(1);
						if ( (LA477_0==RANGE_VK||LA477_0==ROWS_VK) ) {
							alt477=1;
						}
						switch (alt477) {
							case 1 :
								// PLSQLPrinter.g:1983:61: windowing_clause
								{
								pushFollow(FOLLOW_windowing_clause_in_over_clause20084);
								windowing_clause();
								state._fsp--;

								}
								break;

						}

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1984:5: -> template( \"not implemented: over_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: over_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "over_clause"


	public static class windowing_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "windowing_clause"
	// PLSQLPrinter.g:1987:1: windowing_clause : ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ ) ) -> template( \"not implemented: windowing_clause\";
	public final PLSQLPrinter.windowing_clause_return windowing_clause() throws RecognitionException {
		PLSQLPrinter.windowing_clause_return retval = new PLSQLPrinter.windowing_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1988:5: ( ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ ) ) -> template( \"not implemented: windowing_clause\")
			// PLSQLPrinter.g:1988:10: ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ ) )
			{
			// PLSQLPrinter.g:1988:12: ( ROWS_VK | RANGE_VK )
			int alt479=2;
			int LA479_0 = input.LA(1);
			if ( (LA479_0==ROWS_VK) ) {
				alt479=1;
			}
			else if ( (LA479_0==RANGE_VK) ) {
				alt479=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 479, 0, input);
				throw nvae;
			}

			switch (alt479) {
				case 1 :
					// PLSQLPrinter.g:1988:13: ROWS_VK
					{
					match(input,ROWS_VK,FOLLOW_ROWS_VK_in_windowing_clause20124); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1988:21: RANGE_VK
					{
					match(input,RANGE_VK,FOLLOW_RANGE_VK_in_windowing_clause20126); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1989:13: ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ )
			int alt481=2;
			int LA481_0 = input.LA(1);
			if ( (LA481_0==SQL92_RESERVED_BETWEEN) ) {
				alt481=1;
			}
			else if ( (LA481_0==CURRENT_VK||LA481_0==FOLLOWING_VK||LA481_0==PRECEDING_VK||LA481_0==UNBOUNDED_VK) ) {
				alt481=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 481, 0, input);
				throw nvae;
			}

			switch (alt481) {
				case 1 :
					// PLSQLPrinter.g:1989:18: ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements )
					{
					match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_windowing_clause20147); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_windowing_elements_in_windowing_clause20149);
					windowing_elements();
					state._fsp--;

					pushFollow(FOLLOW_windowing_elements_in_windowing_clause20151);
					windowing_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1990:18: ( windowing_elements )+
					{
					// PLSQLPrinter.g:1990:18: ( windowing_elements )+
					int cnt480=0;
					loop480:
					while (true) {
						int alt480=2;
						int LA480_0 = input.LA(1);
						if ( (LA480_0==CURRENT_VK||LA480_0==FOLLOWING_VK||LA480_0==PRECEDING_VK||LA480_0==UNBOUNDED_VK) ) {
							alt480=1;
						}

						switch (alt480) {
						case 1 :
							// PLSQLPrinter.g:1990:18: windowing_elements
							{
							pushFollow(FOLLOW_windowing_elements_in_windowing_clause20171);
							windowing_elements();
							state._fsp--;

							}
							break;

						default :
							if ( cnt480 >= 1 ) break loop480;
							EarlyExitException eee = new EarlyExitException(480, input);
							throw eee;
						}
						cnt480++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1993:5: -> template( \"not implemented: windowing_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: windowing_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "windowing_clause"


	public static class windowing_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "windowing_elements"
	// PLSQLPrinter.g:1996:1: windowing_elements : ( ^( UNBOUNDED_VK PRECEDING_VK ) -> template( \"not implemented: windowing_elements\"| ^( CURRENT_VK ROW_VK ) -> template( \"not implemented: windowing_elements\"| ^( ( PRECEDING_VK | FOLLOWING_VK ) expression ) -> template( \"not implemented: windowing_elements\");
	public final PLSQLPrinter.windowing_elements_return windowing_elements() throws RecognitionException {
		PLSQLPrinter.windowing_elements_return retval = new PLSQLPrinter.windowing_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1997:5: ( ^( UNBOUNDED_VK PRECEDING_VK ) -> template( \"not implemented: windowing_elements\"| ^( CURRENT_VK ROW_VK ) -> template( \"not implemented: windowing_elements\"| ^( ( PRECEDING_VK | FOLLOWING_VK ) expression ) -> template( \"not implemented: windowing_elements\")
			int alt483=3;
			switch ( input.LA(1) ) {
			case UNBOUNDED_VK:
				{
				alt483=1;
				}
				break;
			case CURRENT_VK:
				{
				alt483=2;
				}
				break;
			case FOLLOWING_VK:
			case PRECEDING_VK:
				{
				alt483=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 483, 0, input);
				throw nvae;
			}
			switch (alt483) {
				case 1 :
					// PLSQLPrinter.g:1997:10: ^( UNBOUNDED_VK PRECEDING_VK )
					{
					match(input,UNBOUNDED_VK,FOLLOW_UNBOUNDED_VK_in_windowing_elements20231); 
					match(input, Token.DOWN, null); 
					match(input,PRECEDING_VK,FOLLOW_PRECEDING_VK_in_windowing_elements20233); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1998:5: -> template( \"not implemented: windowing_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: windowing_elements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1999:10: ^( CURRENT_VK ROW_VK )
					{
					match(input,CURRENT_VK,FOLLOW_CURRENT_VK_in_windowing_elements20260); 
					match(input, Token.DOWN, null); 
					match(input,ROW_VK,FOLLOW_ROW_VK_in_windowing_elements20262); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2000:5: -> template( \"not implemented: windowing_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: windowing_elements");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:2001:10: ^( ( PRECEDING_VK | FOLLOWING_VK ) expression )
					{
					// PLSQLPrinter.g:2001:12: ( PRECEDING_VK | FOLLOWING_VK )
					int alt482=2;
					int LA482_0 = input.LA(1);
					if ( (LA482_0==PRECEDING_VK) ) {
						alt482=1;
					}
					else if ( (LA482_0==FOLLOWING_VK) ) {
						alt482=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 482, 0, input);
						throw nvae;
					}

					switch (alt482) {
						case 1 :
							// PLSQLPrinter.g:2001:13: PRECEDING_VK
							{
							match(input,PRECEDING_VK,FOLLOW_PRECEDING_VK_in_windowing_elements20290); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2001:26: FOLLOWING_VK
							{
							match(input,FOLLOWING_VK,FOLLOW_FOLLOWING_VK_in_windowing_elements20292); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_windowing_elements20295);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2002:5: -> template( \"not implemented: windowing_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: windowing_elements");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "windowing_elements"


	public static class using_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "using_clause"
	// PLSQLPrinter.g:2005:1: using_clause : ^( PLSQL_NON_RESERVED_USING ( using_element )+ ) -> template( \"not implemented: using_clause\";
	public final PLSQLPrinter.using_clause_return using_clause() throws RecognitionException {
		PLSQLPrinter.using_clause_return retval = new PLSQLPrinter.using_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2006:5: ( ^( PLSQL_NON_RESERVED_USING ( using_element )+ ) -> template( \"not implemented: using_clause\")
			// PLSQLPrinter.g:2006:10: ^( PLSQL_NON_RESERVED_USING ( using_element )+ )
			{
			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_using_clause20331); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2006:37: ( using_element )+
			int cnt484=0;
			loop484:
			while (true) {
				int alt484=2;
				int LA484_0 = input.LA(1);
				if ( (LA484_0==ASTERISK||LA484_0==ELEMENT) ) {
					alt484=1;
				}

				switch (alt484) {
				case 1 :
					// PLSQLPrinter.g:2006:37: using_element
					{
					pushFollow(FOLLOW_using_element_in_using_clause20333);
					using_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt484 >= 1 ) break loop484;
					EarlyExitException eee = new EarlyExitException(484, input);
					throw eee;
				}
				cnt484++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2007:5: -> template( \"not implemented: using_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: using_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "using_clause"


	public static class using_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "using_element"
	// PLSQLPrinter.g:2010:1: using_element : ( ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? ) -> template( \"not implemented: using_element\"| ASTERISK -> template( \"not implemented: using_element\");
	public final PLSQLPrinter.using_element_return using_element() throws RecognitionException {
		PLSQLPrinter.using_element_return retval = new PLSQLPrinter.using_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2011:5: ( ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? ) -> template( \"not implemented: using_element\"| ASTERISK -> template( \"not implemented: using_element\")
			int alt488=2;
			int LA488_0 = input.LA(1);
			if ( (LA488_0==ELEMENT) ) {
				alt488=1;
			}
			else if ( (LA488_0==ASTERISK) ) {
				alt488=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 488, 0, input);
				throw nvae;
			}

			switch (alt488) {
				case 1 :
					// PLSQLPrinter.g:2011:10: ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? )
					{
					match(input,ELEMENT,FOLLOW_ELEMENT_in_using_element20370); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2011:20: ( SQL92_RESERVED_IN )?
					int alt485=2;
					int LA485_0 = input.LA(1);
					if ( (LA485_0==SQL92_RESERVED_IN) ) {
						alt485=1;
					}
					switch (alt485) {
						case 1 :
							// PLSQLPrinter.g:2011:20: SQL92_RESERVED_IN
							{
							match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_using_element20372); 
							}
							break;

					}

					// PLSQLPrinter.g:2011:39: ( OUT_VK )?
					int alt486=2;
					int LA486_0 = input.LA(1);
					if ( (LA486_0==OUT_VK) ) {
						alt486=1;
					}
					switch (alt486) {
						case 1 :
							// PLSQLPrinter.g:2011:39: OUT_VK
							{
							match(input,OUT_VK,FOLLOW_OUT_VK_in_using_element20375); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_using_element20378);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:2011:58: ( alias )?
					int alt487=2;
					int LA487_0 = input.LA(1);
					if ( (LA487_0==ALIAS) ) {
						alt487=1;
					}
					switch (alt487) {
						case 1 :
							// PLSQLPrinter.g:2011:58: alias
							{
							pushFollow(FOLLOW_alias_in_using_element20380);
							alias();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2012:5: -> template( \"not implemented: using_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: using_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2013:10: ASTERISK
					{
					match(input,ASTERISK,FOLLOW_ASTERISK_in_using_element20407); 
					// TEMPLATE REWRITE
					// 2014:5: -> template( \"not implemented: using_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: using_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "using_element"


	public static class collect_order_by_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "collect_order_by_part"
	// PLSQLPrinter.g:2017:1: collect_order_by_part : ^( SQL92_RESERVED_ORDER expression ) -> template( \"not implemented: collect_order_by_part\";
	public final PLSQLPrinter.collect_order_by_part_return collect_order_by_part() throws RecognitionException {
		PLSQLPrinter.collect_order_by_part_return retval = new PLSQLPrinter.collect_order_by_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2018:5: ( ^( SQL92_RESERVED_ORDER expression ) -> template( \"not implemented: collect_order_by_part\")
			// PLSQLPrinter.g:2018:10: ^( SQL92_RESERVED_ORDER expression )
			{
			match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_collect_order_by_part20442); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_collect_order_by_part20444);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2019:5: -> template( \"not implemented: collect_order_by_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: collect_order_by_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "collect_order_by_part"


	public static class within_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "within_clause"
	// PLSQLPrinter.g:2022:1: within_clause : ^( WITHIN_VK order_by_clause ) -> template( \"not implemented: within_clause\";
	public final PLSQLPrinter.within_clause_return within_clause() throws RecognitionException {
		PLSQLPrinter.within_clause_return retval = new PLSQLPrinter.within_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2023:5: ( ^( WITHIN_VK order_by_clause ) -> template( \"not implemented: within_clause\")
			// PLSQLPrinter.g:2023:10: ^( WITHIN_VK order_by_clause )
			{
			match(input,WITHIN_VK,FOLLOW_WITHIN_VK_in_within_clause20480); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_order_by_clause_in_within_clause20482);
			order_by_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2024:5: -> template( \"not implemented: within_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: within_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "within_clause"


	public static class cost_matrix_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cost_matrix_clause"
	// PLSQLPrinter.g:2027:1: cost_matrix_clause : ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) ) -> template( \"not implemented: cost_matrix_clause\";
	public final PLSQLPrinter.cost_matrix_clause_return cost_matrix_clause() throws RecognitionException {
		PLSQLPrinter.cost_matrix_clause_return retval = new PLSQLPrinter.cost_matrix_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2028:5: ( ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) ) -> template( \"not implemented: cost_matrix_clause\")
			// PLSQLPrinter.g:2028:10: ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) )
			{
			match(input,COST_VK,FOLLOW_COST_VK_in_cost_matrix_clause20518); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2029:13: ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list )
			int alt491=2;
			int LA491_0 = input.LA(1);
			if ( (LA491_0==PLSQL_NON_RESERVED_MODEL) ) {
				alt491=1;
			}
			else if ( (LA491_0==COST_CLASS_NAME) ) {
				alt491=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 491, 0, input);
				throw nvae;
			}

			switch (alt491) {
				case 1 :
					// PLSQLPrinter.g:2029:18: PLSQL_NON_RESERVED_MODEL ( AUTO_VK )?
					{
					match(input,PLSQL_NON_RESERVED_MODEL,FOLLOW_PLSQL_NON_RESERVED_MODEL_in_cost_matrix_clause20537); 
					// PLSQLPrinter.g:2029:43: ( AUTO_VK )?
					int alt489=2;
					int LA489_0 = input.LA(1);
					if ( (LA489_0==AUTO_VK) ) {
						alt489=1;
					}
					switch (alt489) {
						case 1 :
							// PLSQLPrinter.g:2029:43: AUTO_VK
							{
							match(input,AUTO_VK,FOLLOW_AUTO_VK_in_cost_matrix_clause20539); 
							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:2030:18: ( cost_class_name )+ expression_list
					{
					// PLSQLPrinter.g:2030:18: ( cost_class_name )+
					int cnt490=0;
					loop490:
					while (true) {
						int alt490=2;
						int LA490_0 = input.LA(1);
						if ( (LA490_0==COST_CLASS_NAME) ) {
							alt490=1;
						}

						switch (alt490) {
						case 1 :
							// PLSQLPrinter.g:2030:18: cost_class_name
							{
							pushFollow(FOLLOW_cost_class_name_in_cost_matrix_clause20559);
							cost_class_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt490 >= 1 ) break loop490;
							EarlyExitException eee = new EarlyExitException(490, input);
							throw eee;
						}
						cnt490++;
					}

					pushFollow(FOLLOW_expression_list_in_cost_matrix_clause20562);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2033:5: -> template( \"not implemented: cost_matrix_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: cost_matrix_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cost_matrix_clause"


	public static class xml_passing_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_passing_clause"
	// PLSQLPrinter.g:2036:1: xml_passing_clause : ^( PASSING_VK ( VALUE_VK )? expression ( alias )? ( expression ( alias )? )? ) -> template( \"not implemented: xml_passing_clause\";
	public final PLSQLPrinter.xml_passing_clause_return xml_passing_clause() throws RecognitionException {
		PLSQLPrinter.xml_passing_clause_return retval = new PLSQLPrinter.xml_passing_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2037:5: ( ^( PASSING_VK ( VALUE_VK )? expression ( alias )? ( expression ( alias )? )? ) -> template( \"not implemented: xml_passing_clause\")
			// PLSQLPrinter.g:2037:10: ^( PASSING_VK ( VALUE_VK )? expression ( alias )? ( expression ( alias )? )? )
			{
			match(input,PASSING_VK,FOLLOW_PASSING_VK_in_xml_passing_clause20621); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2037:23: ( VALUE_VK )?
			int alt492=2;
			int LA492_0 = input.LA(1);
			if ( (LA492_0==VALUE_VK) ) {
				alt492=1;
			}
			switch (alt492) {
				case 1 :
					// PLSQLPrinter.g:2037:23: VALUE_VK
					{
					match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xml_passing_clause20623); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_xml_passing_clause20626);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:2037:44: ( alias )?
			int alt493=2;
			int LA493_0 = input.LA(1);
			if ( (LA493_0==ALIAS) ) {
				alt493=1;
			}
			switch (alt493) {
				case 1 :
					// PLSQLPrinter.g:2037:44: alias
					{
					pushFollow(FOLLOW_alias_in_xml_passing_clause20628);
					alias();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2037:51: ( expression ( alias )? )?
			int alt495=2;
			int LA495_0 = input.LA(1);
			if ( (LA495_0==EXPR||LA495_0==LOGIC_EXPR) ) {
				alt495=1;
			}
			switch (alt495) {
				case 1 :
					// PLSQLPrinter.g:2037:52: expression ( alias )?
					{
					pushFollow(FOLLOW_expression_in_xml_passing_clause20632);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:2037:63: ( alias )?
					int alt494=2;
					int LA494_0 = input.LA(1);
					if ( (LA494_0==ALIAS) ) {
						alt494=1;
					}
					switch (alt494) {
						case 1 :
							// PLSQLPrinter.g:2037:63: alias
							{
							pushFollow(FOLLOW_alias_in_xml_passing_clause20634);
							alias();
							state._fsp--;

							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2038:5: -> template( \"not implemented: xml_passing_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_passing_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_passing_clause"


	public static class xml_attributes_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_attributes_clause"
	// PLSQLPrinter.g:2041:1: xml_attributes_clause : ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? ( xml_multiuse_expression_element )+ ) -> template( \"not implemented: xml_attributes_clause\";
	public final PLSQLPrinter.xml_attributes_clause_return xml_attributes_clause() throws RecognitionException {
		PLSQLPrinter.xml_attributes_clause_return retval = new PLSQLPrinter.xml_attributes_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2042:5: ( ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? ( xml_multiuse_expression_element )+ ) -> template( \"not implemented: xml_attributes_clause\")
			// PLSQLPrinter.g:2042:10: ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? ( xml_multiuse_expression_element )+ )
			{
			match(input,XMLATTRIBUTES_VK,FOLLOW_XMLATTRIBUTES_VK_in_xml_attributes_clause20673); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2043:13: ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )?
			int alt496=3;
			int LA496_0 = input.LA(1);
			if ( (LA496_0==ENTITYESCAPING_VK) ) {
				alt496=1;
			}
			else if ( (LA496_0==NOENTITYESCAPING_VK) ) {
				alt496=2;
			}
			switch (alt496) {
				case 1 :
					// PLSQLPrinter.g:2043:14: ENTITYESCAPING_VK
					{
					match(input,ENTITYESCAPING_VK,FOLLOW_ENTITYESCAPING_VK_in_xml_attributes_clause20688); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2043:32: NOENTITYESCAPING_VK
					{
					match(input,NOENTITYESCAPING_VK,FOLLOW_NOENTITYESCAPING_VK_in_xml_attributes_clause20690); 
					}
					break;

			}

			// PLSQLPrinter.g:2044:13: ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )?
			int alt497=3;
			int LA497_0 = input.LA(1);
			if ( (LA497_0==SCHEMACHECK_VK) ) {
				alt497=1;
			}
			else if ( (LA497_0==NOSCHEMACHECK_VK) ) {
				alt497=2;
			}
			switch (alt497) {
				case 1 :
					// PLSQLPrinter.g:2044:14: SCHEMACHECK_VK
					{
					match(input,SCHEMACHECK_VK,FOLLOW_SCHEMACHECK_VK_in_xml_attributes_clause20707); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2044:29: NOSCHEMACHECK_VK
					{
					match(input,NOSCHEMACHECK_VK,FOLLOW_NOSCHEMACHECK_VK_in_xml_attributes_clause20709); 
					}
					break;

			}

			// PLSQLPrinter.g:2045:13: ( xml_multiuse_expression_element )+
			int cnt498=0;
			loop498:
			while (true) {
				int alt498=2;
				int LA498_0 = input.LA(1);
				if ( (LA498_0==XML_ELEMENT) ) {
					alt498=1;
				}

				switch (alt498) {
				case 1 :
					// PLSQLPrinter.g:2045:13: xml_multiuse_expression_element
					{
					pushFollow(FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause20725);
					xml_multiuse_expression_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt498 >= 1 ) break loop498;
					EarlyExitException eee = new EarlyExitException(498, input);
					throw eee;
				}
				cnt498++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2047:5: -> template( \"not implemented: xml_attributes_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_attributes_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_attributes_clause"


	public static class xml_namespaces_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_namespaces_clause"
	// PLSQLPrinter.g:2050:1: xml_namespaces_clause : ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? ) -> template( \"not implemented: xml_namespaces_clause\";
	public final PLSQLPrinter.xml_namespaces_clause_return xml_namespaces_clause() throws RecognitionException {
		PLSQLPrinter.xml_namespaces_clause_return retval = new PLSQLPrinter.xml_namespaces_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2051:5: ( ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? ) -> template( \"not implemented: xml_namespaces_clause\")
			// PLSQLPrinter.g:2051:10: ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? )
			{
			match(input,XMLNAMESPACES_VK,FOLLOW_XMLNAMESPACES_VK_in_xml_namespaces_clause20771); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:2052:13: ( expression ( alias )? )*
				loop500:
				while (true) {
					int alt500=2;
					int LA500_0 = input.LA(1);
					if ( (LA500_0==EXPR||LA500_0==LOGIC_EXPR) ) {
						alt500=1;
					}

					switch (alt500) {
					case 1 :
						// PLSQLPrinter.g:2052:14: expression ( alias )?
						{
						pushFollow(FOLLOW_expression_in_xml_namespaces_clause20786);
						expression();
						state._fsp--;

						// PLSQLPrinter.g:2052:25: ( alias )?
						int alt499=2;
						int LA499_0 = input.LA(1);
						if ( (LA499_0==ALIAS) ) {
							alt499=1;
						}
						switch (alt499) {
							case 1 :
								// PLSQLPrinter.g:2052:25: alias
								{
								pushFollow(FOLLOW_alias_in_xml_namespaces_clause20788);
								alias();
								state._fsp--;

								}
								break;

						}

						}
						break;

					default :
						break loop500;
					}
				}

				// PLSQLPrinter.g:2052:34: ( xml_general_default_part )?
				int alt501=2;
				int LA501_0 = input.LA(1);
				if ( (LA501_0==SQL92_RESERVED_DEFAULT) ) {
					alt501=1;
				}
				switch (alt501) {
					case 1 :
						// PLSQLPrinter.g:2052:34: xml_general_default_part
						{
						pushFollow(FOLLOW_xml_general_default_part_in_xml_namespaces_clause20793);
						xml_general_default_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 2054:5: -> template( \"not implemented: xml_namespaces_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_namespaces_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_namespaces_clause"


	public static class xml_table_column_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_table_column"
	// PLSQLPrinter.g:2057:1: xml_table_column : ^( XML_COLUMN xml_column_name ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? ) ) -> template( \"not implemented: xml_table_column\";
	public final PLSQLPrinter.xml_table_column_return xml_table_column() throws RecognitionException {
		PLSQLPrinter.xml_table_column_return retval = new PLSQLPrinter.xml_table_column_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2058:5: ( ^( XML_COLUMN xml_column_name ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? ) ) -> template( \"not implemented: xml_table_column\")
			// PLSQLPrinter.g:2058:10: ^( XML_COLUMN xml_column_name ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? ) )
			{
			match(input,XML_COLUMN,FOLLOW_XML_COLUMN_in_xml_table_column20839); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_xml_column_name_in_xml_table_column20841);
			xml_column_name();
			state._fsp--;

			// PLSQLPrinter.g:2058:39: ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? )
			int alt504=2;
			int LA504_0 = input.LA(1);
			if ( (LA504_0==ORDINALITY_VK) ) {
				alt504=1;
			}
			else if ( (LA504_0==CUSTOM_TYPE||LA504_0==INTERVAL_DATATYPE||LA504_0==NATIVE_DATATYPE) ) {
				alt504=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 504, 0, input);
				throw nvae;
			}

			switch (alt504) {
				case 1 :
					// PLSQLPrinter.g:2058:40: ORDINALITY_VK
					{
					match(input,ORDINALITY_VK,FOLLOW_ORDINALITY_VK_in_xml_table_column20844); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2058:54: type_spec ( expression )? ( xml_general_default_part )?
					{
					pushFollow(FOLLOW_type_spec_in_xml_table_column20846);
					type_spec();
					state._fsp--;

					// PLSQLPrinter.g:2058:64: ( expression )?
					int alt502=2;
					int LA502_0 = input.LA(1);
					if ( (LA502_0==EXPR||LA502_0==LOGIC_EXPR) ) {
						alt502=1;
					}
					switch (alt502) {
						case 1 :
							// PLSQLPrinter.g:2058:64: expression
							{
							pushFollow(FOLLOW_expression_in_xml_table_column20848);
							expression();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2058:76: ( xml_general_default_part )?
					int alt503=2;
					int LA503_0 = input.LA(1);
					if ( (LA503_0==SQL92_RESERVED_DEFAULT) ) {
						alt503=1;
					}
					switch (alt503) {
						case 1 :
							// PLSQLPrinter.g:2058:76: xml_general_default_part
							{
							pushFollow(FOLLOW_xml_general_default_part_in_xml_table_column20851);
							xml_general_default_part();
							state._fsp--;

							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2059:5: -> template( \"not implemented: xml_table_column\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_table_column");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_table_column"


	public static class xml_general_default_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_general_default_part"
	// PLSQLPrinter.g:2062:1: xml_general_default_part : ^( SQL92_RESERVED_DEFAULT expression ) -> template( \"not implemented: xml_general_default_part\";
	public final PLSQLPrinter.xml_general_default_part_return xml_general_default_part() throws RecognitionException {
		PLSQLPrinter.xml_general_default_part_return retval = new PLSQLPrinter.xml_general_default_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2063:5: ( ^( SQL92_RESERVED_DEFAULT expression ) -> template( \"not implemented: xml_general_default_part\")
			// PLSQLPrinter.g:2063:10: ^( SQL92_RESERVED_DEFAULT expression )
			{
			match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_xml_general_default_part20890); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xml_general_default_part20892);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2064:5: -> template( \"not implemented: xml_general_default_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_general_default_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_general_default_part"


	public static class xml_multiuse_expression_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_multiuse_expression_element"
	// PLSQLPrinter.g:2067:1: xml_multiuse_expression_element : ^( XML_ELEMENT expression ( xml_alias )? ) -> template( \"not implemented: xml_multiuse_expression_element\";
	public final PLSQLPrinter.xml_multiuse_expression_element_return xml_multiuse_expression_element() throws RecognitionException {
		PLSQLPrinter.xml_multiuse_expression_element_return retval = new PLSQLPrinter.xml_multiuse_expression_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2068:5: ( ^( XML_ELEMENT expression ( xml_alias )? ) -> template( \"not implemented: xml_multiuse_expression_element\")
			// PLSQLPrinter.g:2068:10: ^( XML_ELEMENT expression ( xml_alias )? )
			{
			match(input,XML_ELEMENT,FOLLOW_XML_ELEMENT_in_xml_multiuse_expression_element20928); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xml_multiuse_expression_element20930);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:2068:35: ( xml_alias )?
			int alt505=2;
			int LA505_0 = input.LA(1);
			if ( (LA505_0==XML_ALIAS) ) {
				alt505=1;
			}
			switch (alt505) {
				case 1 :
					// PLSQLPrinter.g:2068:35: xml_alias
					{
					pushFollow(FOLLOW_xml_alias_in_xml_multiuse_expression_element20932);
					xml_alias();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2069:5: -> template( \"not implemented: xml_multiuse_expression_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_multiuse_expression_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_multiuse_expression_element"


	public static class xml_alias_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_alias"
	// PLSQLPrinter.g:2072:1: xml_alias : ( ^( XML_ALIAS ID ) -> template( \"not implemented: xml_alias\"| ^( XML_ALIAS ^( EVALNAME_VK expression ) ) -> template( \"not implemented: xml_alias\");
	public final PLSQLPrinter.xml_alias_return xml_alias() throws RecognitionException {
		PLSQLPrinter.xml_alias_return retval = new PLSQLPrinter.xml_alias_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2073:5: ( ^( XML_ALIAS ID ) -> template( \"not implemented: xml_alias\"| ^( XML_ALIAS ^( EVALNAME_VK expression ) ) -> template( \"not implemented: xml_alias\")
			int alt506=2;
			int LA506_0 = input.LA(1);
			if ( (LA506_0==XML_ALIAS) ) {
				int LA506_1 = input.LA(2);
				if ( (LA506_1==DOWN) ) {
					int LA506_2 = input.LA(3);
					if ( (LA506_2==ID) ) {
						alt506=1;
					}
					else if ( (LA506_2==EVALNAME_VK) ) {
						alt506=2;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 506, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 506, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 506, 0, input);
				throw nvae;
			}

			switch (alt506) {
				case 1 :
					// PLSQLPrinter.g:2073:10: ^( XML_ALIAS ID )
					{
					match(input,XML_ALIAS,FOLLOW_XML_ALIAS_in_xml_alias20969); 
					match(input, Token.DOWN, null); 
					match(input,ID,FOLLOW_ID_in_xml_alias20971); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2074:5: -> template( \"not implemented: xml_alias\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: xml_alias");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2075:10: ^( XML_ALIAS ^( EVALNAME_VK expression ) )
					{
					match(input,XML_ALIAS,FOLLOW_XML_ALIAS_in_xml_alias20998); 
					match(input, Token.DOWN, null); 
					match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_xml_alias21001); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_xml_alias21003);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2076:5: -> template( \"not implemented: xml_alias\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: xml_alias");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_alias"


	public static class xml_param_version_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_param_version_part"
	// PLSQLPrinter.g:2079:1: xml_param_version_part : ^( VERSION_VK ( NO_VK VALUE_VK | expression ) ) -> template( \"not implemented: xml_param_version_part\";
	public final PLSQLPrinter.xml_param_version_part_return xml_param_version_part() throws RecognitionException {
		PLSQLPrinter.xml_param_version_part_return retval = new PLSQLPrinter.xml_param_version_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2080:5: ( ^( VERSION_VK ( NO_VK VALUE_VK | expression ) ) -> template( \"not implemented: xml_param_version_part\")
			// PLSQLPrinter.g:2080:10: ^( VERSION_VK ( NO_VK VALUE_VK | expression ) )
			{
			match(input,VERSION_VK,FOLLOW_VERSION_VK_in_xml_param_version_part21040); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2080:23: ( NO_VK VALUE_VK | expression )
			int alt507=2;
			int LA507_0 = input.LA(1);
			if ( (LA507_0==NO_VK) ) {
				alt507=1;
			}
			else if ( (LA507_0==EXPR||LA507_0==LOGIC_EXPR) ) {
				alt507=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 507, 0, input);
				throw nvae;
			}

			switch (alt507) {
				case 1 :
					// PLSQLPrinter.g:2080:24: NO_VK VALUE_VK
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xml_param_version_part21043); 
					match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xml_param_version_part21045); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2080:39: expression
					{
					pushFollow(FOLLOW_expression_in_xml_param_version_part21047);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2081:5: -> template( \"not implemented: xml_param_version_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_param_version_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_param_version_part"


	public static class xmlroot_param_standalone_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlroot_param_standalone_part"
	// PLSQLPrinter.g:2084:1: xmlroot_param_standalone_part : ^( STANDALONE_VK ( YES_VK | NO_VK ( VALUE_VK )? ) ) -> template( \"not implemented: xmlroot_param_standalone_part\";
	public final PLSQLPrinter.xmlroot_param_standalone_part_return xmlroot_param_standalone_part() throws RecognitionException {
		PLSQLPrinter.xmlroot_param_standalone_part_return retval = new PLSQLPrinter.xmlroot_param_standalone_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2085:5: ( ^( STANDALONE_VK ( YES_VK | NO_VK ( VALUE_VK )? ) ) -> template( \"not implemented: xmlroot_param_standalone_part\")
			// PLSQLPrinter.g:2085:10: ^( STANDALONE_VK ( YES_VK | NO_VK ( VALUE_VK )? ) )
			{
			match(input,STANDALONE_VK,FOLLOW_STANDALONE_VK_in_xmlroot_param_standalone_part21084); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2085:26: ( YES_VK | NO_VK ( VALUE_VK )? )
			int alt509=2;
			int LA509_0 = input.LA(1);
			if ( (LA509_0==YES_VK) ) {
				alt509=1;
			}
			else if ( (LA509_0==NO_VK) ) {
				alt509=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 509, 0, input);
				throw nvae;
			}

			switch (alt509) {
				case 1 :
					// PLSQLPrinter.g:2085:27: YES_VK
					{
					match(input,YES_VK,FOLLOW_YES_VK_in_xmlroot_param_standalone_part21087); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2085:34: NO_VK ( VALUE_VK )?
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xmlroot_param_standalone_part21089); 
					// PLSQLPrinter.g:2085:40: ( VALUE_VK )?
					int alt508=2;
					int LA508_0 = input.LA(1);
					if ( (LA508_0==VALUE_VK) ) {
						alt508=1;
					}
					switch (alt508) {
						case 1 :
							// PLSQLPrinter.g:2085:40: VALUE_VK
							{
							match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xmlroot_param_standalone_part21091); 
							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2086:5: -> template( \"not implemented: xmlroot_param_standalone_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xmlroot_param_standalone_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlroot_param_standalone_part"


	public static class xmlserialize_param_enconding_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlserialize_param_enconding_part"
	// PLSQLPrinter.g:2089:1: xmlserialize_param_enconding_part : ^( ENCODING_VK expression ) -> template( \"not implemented: xmlserialize_param_enconding_part\";
	public final PLSQLPrinter.xmlserialize_param_enconding_part_return xmlserialize_param_enconding_part() throws RecognitionException {
		PLSQLPrinter.xmlserialize_param_enconding_part_return retval = new PLSQLPrinter.xmlserialize_param_enconding_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2090:5: ( ^( ENCODING_VK expression ) -> template( \"not implemented: xmlserialize_param_enconding_part\")
			// PLSQLPrinter.g:2090:10: ^( ENCODING_VK expression )
			{
			match(input,ENCODING_VK,FOLLOW_ENCODING_VK_in_xmlserialize_param_enconding_part21129); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xmlserialize_param_enconding_part21131);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2091:5: -> template( \"not implemented: xmlserialize_param_enconding_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xmlserialize_param_enconding_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlserialize_param_enconding_part"


	public static class xmlserialize_param_ident_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlserialize_param_ident_part"
	// PLSQLPrinter.g:2094:1: xmlserialize_param_ident_part : ( NO_VK INDENT_VK -> template( \"not implemented: xmlserialize_param_ident_part\"| ^( INDENT_VK ( expression )? ) -> template( \"not implemented: xmlserialize_param_ident_part\");
	public final PLSQLPrinter.xmlserialize_param_ident_part_return xmlserialize_param_ident_part() throws RecognitionException {
		PLSQLPrinter.xmlserialize_param_ident_part_return retval = new PLSQLPrinter.xmlserialize_param_ident_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2095:5: ( NO_VK INDENT_VK -> template( \"not implemented: xmlserialize_param_ident_part\"| ^( INDENT_VK ( expression )? ) -> template( \"not implemented: xmlserialize_param_ident_part\")
			int alt511=2;
			int LA511_0 = input.LA(1);
			if ( (LA511_0==NO_VK) ) {
				alt511=1;
			}
			else if ( (LA511_0==INDENT_VK) ) {
				alt511=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 511, 0, input);
				throw nvae;
			}

			switch (alt511) {
				case 1 :
					// PLSQLPrinter.g:2095:10: NO_VK INDENT_VK
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xmlserialize_param_ident_part21166); 
					match(input,INDENT_VK,FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part21168); 
					// TEMPLATE REWRITE
					// 2096:5: -> template( \"not implemented: xmlserialize_param_ident_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: xmlserialize_param_ident_part");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2097:10: ^( INDENT_VK ( expression )? )
					{
					match(input,INDENT_VK,FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part21194); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:2097:22: ( expression )?
						int alt510=2;
						int LA510_0 = input.LA(1);
						if ( (LA510_0==EXPR||LA510_0==LOGIC_EXPR) ) {
							alt510=1;
						}
						switch (alt510) {
							case 1 :
								// PLSQLPrinter.g:2097:22: expression
								{
								pushFollow(FOLLOW_expression_in_xmlserialize_param_ident_part21196);
								expression();
								state._fsp--;

								}
								break;

						}

						match(input, Token.UP, null); 
					}

					// TEMPLATE REWRITE
					// 2098:5: -> template( \"not implemented: xmlserialize_param_ident_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: xmlserialize_param_ident_part");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlserialize_param_ident_part"


	public static class partition_extension_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "partition_extension_clause"
	// PLSQLPrinter.g:2105:1: partition_extension_clause : ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list ) -> template( \"not implemented: partition_extension_clause\";
	public final PLSQLPrinter.partition_extension_clause_return partition_extension_clause() throws RecognitionException {
		PLSQLPrinter.partition_extension_clause_return retval = new PLSQLPrinter.partition_extension_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2106:5: ( ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list ) -> template( \"not implemented: partition_extension_clause\")
			// PLSQLPrinter.g:2106:10: ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list )
			{
			// PLSQLPrinter.g:2106:12: ( SUBPARTITION_VK | PARTITION_VK )
			int alt512=2;
			int LA512_0 = input.LA(1);
			if ( (LA512_0==SUBPARTITION_VK) ) {
				alt512=1;
			}
			else if ( (LA512_0==PARTITION_VK) ) {
				alt512=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 512, 0, input);
				throw nvae;
			}

			switch (alt512) {
				case 1 :
					// PLSQLPrinter.g:2106:13: SUBPARTITION_VK
					{
					match(input,SUBPARTITION_VK,FOLLOW_SUBPARTITION_VK_in_partition_extension_clause21238); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2106:29: PARTITION_VK
					{
					match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_partition_extension_clause21240); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_list_in_partition_extension_clause21243);
			expression_list();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2107:5: -> template( \"not implemented: partition_extension_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: partition_extension_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_extension_clause"


	public static class alias_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alias"
	// PLSQLPrinter.g:2110:1: alias : ^( ALIAS ( char_set_name )? ID ) -> alias(name=$ID.text);
	public final PLSQLPrinter.alias_return alias() throws RecognitionException {
		PLSQLPrinter.alias_return retval = new PLSQLPrinter.alias_return();
		retval.start = input.LT(1);

		CommonTree ID207=null;

		try {
			// PLSQLPrinter.g:2111:5: ( ^( ALIAS ( char_set_name )? ID ) -> alias(name=$ID.text))
			// PLSQLPrinter.g:2111:10: ^( ALIAS ( char_set_name )? ID )
			{
			match(input,ALIAS,FOLLOW_ALIAS_in_alias21279); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2111:18: ( char_set_name )?
			int alt513=2;
			int LA513_0 = input.LA(1);
			if ( (LA513_0==CHAR_SET_NAME) ) {
				alt513=1;
			}
			switch (alt513) {
				case 1 :
					// PLSQLPrinter.g:2111:18: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_alias21281);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID207=(CommonTree)match(input,ID,FOLLOW_ID_in_alias21284); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2112:5: -> alias(name=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("alias",new STAttrMap().put("name", (ID207!=null?ID207.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alias"


	public static class where_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "where_clause"
	// PLSQLPrinter.g:2115:1: where_clause : ^( SQL92_RESERVED_WHERE expression ) -> where_clause(expression=$expression.st);
	public final PLSQLPrinter.where_clause_return where_clause() throws RecognitionException {
		PLSQLPrinter.where_clause_return retval = new PLSQLPrinter.where_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression208 =null;

		try {
			// PLSQLPrinter.g:2116:5: ( ^( SQL92_RESERVED_WHERE expression ) -> where_clause(expression=$expression.st))
			// PLSQLPrinter.g:2116:10: ^( SQL92_RESERVED_WHERE expression )
			{
			match(input,SQL92_RESERVED_WHERE,FOLLOW_SQL92_RESERVED_WHERE_in_where_clause21321); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_where_clause21323);
			expression208=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2117:5: -> where_clause(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("where_clause",new STAttrMap().put("expression", (expression208!=null?((StringTemplate)expression208.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "where_clause"


	public static class into_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "into_clause"
	// PLSQLPrinter.g:2120:1: into_clause : ( ^( SQL92_RESERVED_INTO ( general_element )+ ) -> template( \"not implemented: into_clause\"| ^( BULK_VK ( general_element )+ ) -> template( \"not implemented: into_clause\");
	public final PLSQLPrinter.into_clause_return into_clause() throws RecognitionException {
		PLSQLPrinter.into_clause_return retval = new PLSQLPrinter.into_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2121:5: ( ^( SQL92_RESERVED_INTO ( general_element )+ ) -> template( \"not implemented: into_clause\"| ^( BULK_VK ( general_element )+ ) -> template( \"not implemented: into_clause\")
			int alt516=2;
			int LA516_0 = input.LA(1);
			if ( (LA516_0==SQL92_RESERVED_INTO) ) {
				alt516=1;
			}
			else if ( (LA516_0==BULK_VK) ) {
				alt516=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 516, 0, input);
				throw nvae;
			}

			switch (alt516) {
				case 1 :
					// PLSQLPrinter.g:2121:10: ^( SQL92_RESERVED_INTO ( general_element )+ )
					{
					match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_into_clause21360); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2121:32: ( general_element )+
					int cnt514=0;
					loop514:
					while (true) {
						int alt514=2;
						int LA514_0 = input.LA(1);
						if ( (LA514_0==CASCATED_ELEMENT) ) {
							alt514=1;
						}

						switch (alt514) {
						case 1 :
							// PLSQLPrinter.g:2121:32: general_element
							{
							pushFollow(FOLLOW_general_element_in_into_clause21362);
							general_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt514 >= 1 ) break loop514;
							EarlyExitException eee = new EarlyExitException(514, input);
							throw eee;
						}
						cnt514++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2122:5: -> template( \"not implemented: into_clause\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: into_clause");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2123:10: ^( BULK_VK ( general_element )+ )
					{
					match(input,BULK_VK,FOLLOW_BULK_VK_in_into_clause21391); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2123:20: ( general_element )+
					int cnt515=0;
					loop515:
					while (true) {
						int alt515=2;
						int LA515_0 = input.LA(1);
						if ( (LA515_0==CASCATED_ELEMENT) ) {
							alt515=1;
						}

						switch (alt515) {
						case 1 :
							// PLSQLPrinter.g:2123:20: general_element
							{
							pushFollow(FOLLOW_general_element_in_into_clause21393);
							general_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt515 >= 1 ) break loop515;
							EarlyExitException eee = new EarlyExitException(515, input);
							throw eee;
						}
						cnt515++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2124:5: -> template( \"not implemented: into_clause\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: into_clause");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "into_clause"


	public static class xml_column_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_column_name"
	// PLSQLPrinter.g:2131:1: xml_column_name : ^( XML_COLUMN_NAME ( char_set_name )? ID ) -> template( \"not implemented: xml_column_name\";
	public final PLSQLPrinter.xml_column_name_return xml_column_name() throws RecognitionException {
		PLSQLPrinter.xml_column_name_return retval = new PLSQLPrinter.xml_column_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2132:5: ( ^( XML_COLUMN_NAME ( char_set_name )? ID ) -> template( \"not implemented: xml_column_name\")
			// PLSQLPrinter.g:2132:10: ^( XML_COLUMN_NAME ( char_set_name )? ID )
			{
			match(input,XML_COLUMN_NAME,FOLLOW_XML_COLUMN_NAME_in_xml_column_name21435); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2132:28: ( char_set_name )?
			int alt517=2;
			int LA517_0 = input.LA(1);
			if ( (LA517_0==CHAR_SET_NAME) ) {
				alt517=1;
			}
			switch (alt517) {
				case 1 :
					// PLSQLPrinter.g:2132:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_xml_column_name21437);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_xml_column_name21440); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2133:5: -> template( \"not implemented: xml_column_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_column_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_column_name"


	public static class cost_class_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cost_class_name"
	// PLSQLPrinter.g:2136:1: cost_class_name : ^( COST_CLASS_NAME ( char_set_name )? ID ) -> template( \"not implemented: cost_class_name\";
	public final PLSQLPrinter.cost_class_name_return cost_class_name() throws RecognitionException {
		PLSQLPrinter.cost_class_name_return retval = new PLSQLPrinter.cost_class_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2137:5: ( ^( COST_CLASS_NAME ( char_set_name )? ID ) -> template( \"not implemented: cost_class_name\")
			// PLSQLPrinter.g:2137:10: ^( COST_CLASS_NAME ( char_set_name )? ID )
			{
			match(input,COST_CLASS_NAME,FOLLOW_COST_CLASS_NAME_in_cost_class_name21476); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2137:28: ( char_set_name )?
			int alt518=2;
			int LA518_0 = input.LA(1);
			if ( (LA518_0==CHAR_SET_NAME) ) {
				alt518=1;
			}
			switch (alt518) {
				case 1 :
					// PLSQLPrinter.g:2137:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_cost_class_name21478);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_cost_class_name21481); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2138:5: -> template( \"not implemented: cost_class_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: cost_class_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cost_class_name"


	public static class attribute_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "attribute_name"
	// PLSQLPrinter.g:2141:1: attribute_name : ^( ATTRIBUTE_NAME ( char_set_name )? ID ) -> template( \"not implemented: attribute_name\";
	public final PLSQLPrinter.attribute_name_return attribute_name() throws RecognitionException {
		PLSQLPrinter.attribute_name_return retval = new PLSQLPrinter.attribute_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2142:5: ( ^( ATTRIBUTE_NAME ( char_set_name )? ID ) -> template( \"not implemented: attribute_name\")
			// PLSQLPrinter.g:2142:10: ^( ATTRIBUTE_NAME ( char_set_name )? ID )
			{
			match(input,ATTRIBUTE_NAME,FOLLOW_ATTRIBUTE_NAME_in_attribute_name21517); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2142:27: ( char_set_name )?
			int alt519=2;
			int LA519_0 = input.LA(1);
			if ( (LA519_0==CHAR_SET_NAME) ) {
				alt519=1;
			}
			switch (alt519) {
				case 1 :
					// PLSQLPrinter.g:2142:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_attribute_name21519);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_attribute_name21522); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2143:5: -> template( \"not implemented: attribute_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: attribute_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "attribute_name"


	public static class savepoint_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "savepoint_name"
	// PLSQLPrinter.g:2146:1: savepoint_name : ^( SAVEPOINT_NAME ( char_set_name )? ID ) -> template( \"not implemented: savepoint_name\";
	public final PLSQLPrinter.savepoint_name_return savepoint_name() throws RecognitionException {
		PLSQLPrinter.savepoint_name_return retval = new PLSQLPrinter.savepoint_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2147:5: ( ^( SAVEPOINT_NAME ( char_set_name )? ID ) -> template( \"not implemented: savepoint_name\")
			// PLSQLPrinter.g:2147:10: ^( SAVEPOINT_NAME ( char_set_name )? ID )
			{
			match(input,SAVEPOINT_NAME,FOLLOW_SAVEPOINT_NAME_in_savepoint_name21558); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2147:27: ( char_set_name )?
			int alt520=2;
			int LA520_0 = input.LA(1);
			if ( (LA520_0==CHAR_SET_NAME) ) {
				alt520=1;
			}
			switch (alt520) {
				case 1 :
					// PLSQLPrinter.g:2147:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_savepoint_name21560);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_savepoint_name21563); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2148:5: -> template( \"not implemented: savepoint_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: savepoint_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "savepoint_name"


	public static class rollback_segment_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "rollback_segment_name"
	// PLSQLPrinter.g:2151:1: rollback_segment_name : ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID ) -> template( \"not implemented: rollback_segment_name\";
	public final PLSQLPrinter.rollback_segment_name_return rollback_segment_name() throws RecognitionException {
		PLSQLPrinter.rollback_segment_name_return retval = new PLSQLPrinter.rollback_segment_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2152:5: ( ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID ) -> template( \"not implemented: rollback_segment_name\")
			// PLSQLPrinter.g:2152:10: ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID )
			{
			match(input,ROLLBACK_SEGMENT_NAME,FOLLOW_ROLLBACK_SEGMENT_NAME_in_rollback_segment_name21599); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2152:34: ( char_set_name )?
			int alt521=2;
			int LA521_0 = input.LA(1);
			if ( (LA521_0==CHAR_SET_NAME) ) {
				alt521=1;
			}
			switch (alt521) {
				case 1 :
					// PLSQLPrinter.g:2152:34: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_rollback_segment_name21601);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_rollback_segment_name21604); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2153:5: -> template( \"not implemented: rollback_segment_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: rollback_segment_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rollback_segment_name"


	public static class table_var_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_var_name"
	// PLSQLPrinter.g:2157:1: table_var_name : ^( TABLE_VAR_NAME ( char_set_name )? ID ) -> template( \"not implemented: table_var_name\";
	public final PLSQLPrinter.table_var_name_return table_var_name() throws RecognitionException {
		PLSQLPrinter.table_var_name_return retval = new PLSQLPrinter.table_var_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2158:5: ( ^( TABLE_VAR_NAME ( char_set_name )? ID ) -> template( \"not implemented: table_var_name\")
			// PLSQLPrinter.g:2158:10: ^( TABLE_VAR_NAME ( char_set_name )? ID )
			{
			match(input,TABLE_VAR_NAME,FOLLOW_TABLE_VAR_NAME_in_table_var_name21641); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2158:27: ( char_set_name )?
			int alt522=2;
			int LA522_0 = input.LA(1);
			if ( (LA522_0==CHAR_SET_NAME) ) {
				alt522=1;
			}
			switch (alt522) {
				case 1 :
					// PLSQLPrinter.g:2158:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_table_var_name21643);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_table_var_name21646); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2159:5: -> template( \"not implemented: table_var_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: table_var_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_var_name"


	public static class schema_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "schema_name"
	// PLSQLPrinter.g:2162:1: schema_name : ^( SCHEMA_NAME ( char_set_name )? ID ) -> template( \"not implemented: schema_name\";
	public final PLSQLPrinter.schema_name_return schema_name() throws RecognitionException {
		PLSQLPrinter.schema_name_return retval = new PLSQLPrinter.schema_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2163:5: ( ^( SCHEMA_NAME ( char_set_name )? ID ) -> template( \"not implemented: schema_name\")
			// PLSQLPrinter.g:2163:10: ^( SCHEMA_NAME ( char_set_name )? ID )
			{
			match(input,SCHEMA_NAME,FOLLOW_SCHEMA_NAME_in_schema_name21682); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2163:24: ( char_set_name )?
			int alt523=2;
			int LA523_0 = input.LA(1);
			if ( (LA523_0==CHAR_SET_NAME) ) {
				alt523=1;
			}
			switch (alt523) {
				case 1 :
					// PLSQLPrinter.g:2163:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_schema_name21684);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_schema_name21687); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2164:5: -> template( \"not implemented: schema_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: schema_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "schema_name"


	public static class routine_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "routine_name"
	// PLSQLPrinter.g:2167:1: routine_name : ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? ) -> template( \"not implemented: routine_name\";
	public final PLSQLPrinter.routine_name_return routine_name() throws RecognitionException {
		PLSQLPrinter.routine_name_return retval = new PLSQLPrinter.routine_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2168:5: ( ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? ) -> template( \"not implemented: routine_name\")
			// PLSQLPrinter.g:2168:10: ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? )
			{
			match(input,ROUTINE_NAME,FOLLOW_ROUTINE_NAME_in_routine_name21723); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2168:25: ( char_set_name )?
			int alt524=2;
			int LA524_0 = input.LA(1);
			if ( (LA524_0==CHAR_SET_NAME) ) {
				alt524=1;
			}
			switch (alt524) {
				case 1 :
					// PLSQLPrinter.g:2168:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_routine_name21725);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2168:40: ( ID )+
			int cnt525=0;
			loop525:
			while (true) {
				int alt525=2;
				int LA525_0 = input.LA(1);
				if ( (LA525_0==ID) ) {
					alt525=1;
				}

				switch (alt525) {
				case 1 :
					// PLSQLPrinter.g:2168:40: ID
					{
					match(input,ID,FOLLOW_ID_in_routine_name21728); 
					}
					break;

				default :
					if ( cnt525 >= 1 ) break loop525;
					EarlyExitException eee = new EarlyExitException(525, input);
					throw eee;
				}
				cnt525++;
			}

			// PLSQLPrinter.g:2168:44: ( link_name )?
			int alt526=2;
			int LA526_0 = input.LA(1);
			if ( (LA526_0==LINK_NAME) ) {
				alt526=1;
			}
			switch (alt526) {
				case 1 :
					// PLSQLPrinter.g:2168:44: link_name
					{
					pushFollow(FOLLOW_link_name_in_routine_name21731);
					link_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2169:5: -> template( \"not implemented: routine_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: routine_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "routine_name"


	public static class package_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "package_name"
	// PLSQLPrinter.g:2172:1: package_name : ^( PACKAGE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.package_name_return package_name() throws RecognitionException {
		PLSQLPrinter.package_name_return retval = new PLSQLPrinter.package_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2173:5: ( ^( PACKAGE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2173:10: ^( PACKAGE_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,PACKAGE_NAME,FOLLOW_PACKAGE_NAME_in_package_name21768); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2173:25: ( char_set_name )?
			int alt527=2;
			int LA527_0 = input.LA(1);
			if ( (LA527_0==CHAR_SET_NAME) ) {
				alt527=1;
			}
			switch (alt527) {
				case 1 :
					// PLSQLPrinter.g:2173:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_package_name21770);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2173:43: (ids+= ID )+
			int cnt528=0;
			loop528:
			while (true) {
				int alt528=2;
				int LA528_0 = input.LA(1);
				if ( (LA528_0==ID) ) {
					alt528=1;
				}

				switch (alt528) {
				case 1 :
					// PLSQLPrinter.g:2173:43: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_package_name21775); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt528 >= 1 ) break loop528;
					EarlyExitException eee = new EarlyExitException(528, input);
					throw eee;
				}
				cnt528++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2174:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_name"


	public static class implementation_type_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "implementation_type_name"
	// PLSQLPrinter.g:2177:1: implementation_type_name : ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.implementation_type_name_return implementation_type_name() throws RecognitionException {
		PLSQLPrinter.implementation_type_name_return retval = new PLSQLPrinter.implementation_type_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2178:5: ( ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2178:10: ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,IMPLEMENTATION_TYPE_NAME,FOLLOW_IMPLEMENTATION_TYPE_NAME_in_implementation_type_name21813); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2178:37: ( char_set_name )?
			int alt529=2;
			int LA529_0 = input.LA(1);
			if ( (LA529_0==CHAR_SET_NAME) ) {
				alt529=1;
			}
			switch (alt529) {
				case 1 :
					// PLSQLPrinter.g:2178:37: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_implementation_type_name21815);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2178:55: (ids+= ID )+
			int cnt530=0;
			loop530:
			while (true) {
				int alt530=2;
				int LA530_0 = input.LA(1);
				if ( (LA530_0==ID) ) {
					alt530=1;
				}

				switch (alt530) {
				case 1 :
					// PLSQLPrinter.g:2178:55: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_implementation_type_name21820); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt530 >= 1 ) break loop530;
					EarlyExitException eee = new EarlyExitException(530, input);
					throw eee;
				}
				cnt530++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2179:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "implementation_type_name"


	public static class parameter_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parameter_name"
	// PLSQLPrinter.g:2182:1: parameter_name : ^( PARAMETER_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.parameter_name_return parameter_name() throws RecognitionException {
		PLSQLPrinter.parameter_name_return retval = new PLSQLPrinter.parameter_name_return();
		retval.start = input.LT(1);

		CommonTree ID209=null;

		try {
			// PLSQLPrinter.g:2183:5: ( ^( PARAMETER_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2183:10: ^( PARAMETER_NAME ( char_set_name )? ID )
			{
			match(input,PARAMETER_NAME,FOLLOW_PARAMETER_NAME_in_parameter_name21858); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2183:27: ( char_set_name )?
			int alt531=2;
			int LA531_0 = input.LA(1);
			if ( (LA531_0==CHAR_SET_NAME) ) {
				alt531=1;
			}
			switch (alt531) {
				case 1 :
					// PLSQLPrinter.g:2183:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_parameter_name21860);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID209=(CommonTree)match(input,ID,FOLLOW_ID_in_parameter_name21863); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2184:5: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID209!=null?ID209.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter_name"


	public static class reference_model_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "reference_model_name"
	// PLSQLPrinter.g:2187:1: reference_model_name : ^( REFERENCE_MODEL_NAME ( char_set_name )? ID ) -> template( \"not implemented: reference_model_name\";
	public final PLSQLPrinter.reference_model_name_return reference_model_name() throws RecognitionException {
		PLSQLPrinter.reference_model_name_return retval = new PLSQLPrinter.reference_model_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2188:5: ( ^( REFERENCE_MODEL_NAME ( char_set_name )? ID ) -> template( \"not implemented: reference_model_name\")
			// PLSQLPrinter.g:2188:10: ^( REFERENCE_MODEL_NAME ( char_set_name )? ID )
			{
			match(input,REFERENCE_MODEL_NAME,FOLLOW_REFERENCE_MODEL_NAME_in_reference_model_name21900); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2188:33: ( char_set_name )?
			int alt532=2;
			int LA532_0 = input.LA(1);
			if ( (LA532_0==CHAR_SET_NAME) ) {
				alt532=1;
			}
			switch (alt532) {
				case 1 :
					// PLSQLPrinter.g:2188:33: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_reference_model_name21902);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_reference_model_name21905); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2189:5: -> template( \"not implemented: reference_model_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: reference_model_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reference_model_name"


	public static class main_model_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "main_model_name"
	// PLSQLPrinter.g:2192:1: main_model_name : ^( MAIN_MODEL_NAME ( char_set_name )? ID ) -> template( \"not implemented: main_model_name\";
	public final PLSQLPrinter.main_model_name_return main_model_name() throws RecognitionException {
		PLSQLPrinter.main_model_name_return retval = new PLSQLPrinter.main_model_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2193:5: ( ^( MAIN_MODEL_NAME ( char_set_name )? ID ) -> template( \"not implemented: main_model_name\")
			// PLSQLPrinter.g:2193:10: ^( MAIN_MODEL_NAME ( char_set_name )? ID )
			{
			match(input,MAIN_MODEL_NAME,FOLLOW_MAIN_MODEL_NAME_in_main_model_name21941); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2193:28: ( char_set_name )?
			int alt533=2;
			int LA533_0 = input.LA(1);
			if ( (LA533_0==CHAR_SET_NAME) ) {
				alt533=1;
			}
			switch (alt533) {
				case 1 :
					// PLSQLPrinter.g:2193:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_main_model_name21943);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_main_model_name21946); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2194:5: -> template( \"not implemented: main_model_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: main_model_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "main_model_name"


	public static class query_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_name"
	// PLSQLPrinter.g:2197:1: query_name : ^( QUERY_NAME ( char_set_name )? ID ) -> template( \"not implemented: query_name\";
	public final PLSQLPrinter.query_name_return query_name() throws RecognitionException {
		PLSQLPrinter.query_name_return retval = new PLSQLPrinter.query_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2198:5: ( ^( QUERY_NAME ( char_set_name )? ID ) -> template( \"not implemented: query_name\")
			// PLSQLPrinter.g:2198:10: ^( QUERY_NAME ( char_set_name )? ID )
			{
			match(input,QUERY_NAME,FOLLOW_QUERY_NAME_in_query_name21982); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2198:23: ( char_set_name )?
			int alt534=2;
			int LA534_0 = input.LA(1);
			if ( (LA534_0==CHAR_SET_NAME) ) {
				alt534=1;
			}
			switch (alt534) {
				case 1 :
					// PLSQLPrinter.g:2198:23: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_query_name21984);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_query_name21987); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2199:5: -> template( \"not implemented: query_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: query_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_name"


	public static class constraint_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constraint_name"
	// PLSQLPrinter.g:2202:1: constraint_name : ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? ) -> template( \"not implemented: constraint_name\";
	public final PLSQLPrinter.constraint_name_return constraint_name() throws RecognitionException {
		PLSQLPrinter.constraint_name_return retval = new PLSQLPrinter.constraint_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2203:5: ( ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? ) -> template( \"not implemented: constraint_name\")
			// PLSQLPrinter.g:2203:10: ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? )
			{
			match(input,CONSTRAINT_NAME,FOLLOW_CONSTRAINT_NAME_in_constraint_name22023); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2203:28: ( char_set_name )?
			int alt535=2;
			int LA535_0 = input.LA(1);
			if ( (LA535_0==CHAR_SET_NAME) ) {
				alt535=1;
			}
			switch (alt535) {
				case 1 :
					// PLSQLPrinter.g:2203:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_constraint_name22025);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2203:43: ( ID )+
			int cnt536=0;
			loop536:
			while (true) {
				int alt536=2;
				int LA536_0 = input.LA(1);
				if ( (LA536_0==ID) ) {
					alt536=1;
				}

				switch (alt536) {
				case 1 :
					// PLSQLPrinter.g:2203:43: ID
					{
					match(input,ID,FOLLOW_ID_in_constraint_name22028); 
					}
					break;

				default :
					if ( cnt536 >= 1 ) break loop536;
					EarlyExitException eee = new EarlyExitException(536, input);
					throw eee;
				}
				cnt536++;
			}

			// PLSQLPrinter.g:2203:47: ( link_name )?
			int alt537=2;
			int LA537_0 = input.LA(1);
			if ( (LA537_0==LINK_NAME) ) {
				alt537=1;
			}
			switch (alt537) {
				case 1 :
					// PLSQLPrinter.g:2203:47: link_name
					{
					pushFollow(FOLLOW_link_name_in_constraint_name22031);
					link_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2204:5: -> template( \"not implemented: constraint_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: constraint_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constraint_name"


	public static class label_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "label_name"
	// PLSQLPrinter.g:2207:1: label_name : ^( LABEL_NAME ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.label_name_return label_name() throws RecognitionException {
		PLSQLPrinter.label_name_return retval = new PLSQLPrinter.label_name_return();
		retval.start = input.LT(1);

		CommonTree ID210=null;

		try {
			// PLSQLPrinter.g:2208:5: ( ^( LABEL_NAME ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2208:10: ^( LABEL_NAME ID )
			{
			match(input,LABEL_NAME,FOLLOW_LABEL_NAME_in_label_name22068); 
			match(input, Token.DOWN, null); 
			ID210=(CommonTree)match(input,ID,FOLLOW_ID_in_label_name22070); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2208:27: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID210!=null?ID210.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "label_name"


	public static class type_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_name"
	// PLSQLPrinter.g:2211:1: type_name : ^( TYPE_NAME (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.type_name_return type_name() throws RecognitionException {
		PLSQLPrinter.type_name_return retval = new PLSQLPrinter.type_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2212:5: ( ^( TYPE_NAME (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2212:10: ^( TYPE_NAME (ids+= ID )+ )
			{
			match(input,TYPE_NAME,FOLLOW_TYPE_NAME_in_type_name22101); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2212:25: (ids+= ID )+
			int cnt538=0;
			loop538:
			while (true) {
				int alt538=2;
				int LA538_0 = input.LA(1);
				if ( (LA538_0==ID) ) {
					alt538=1;
				}

				switch (alt538) {
				case 1 :
					// PLSQLPrinter.g:2212:25: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_type_name22105); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt538 >= 1 ) break loop538;
					EarlyExitException eee = new EarlyExitException(538, input);
					throw eee;
				}
				cnt538++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2213:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_name"


	public static class sequence_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sequence_name"
	// PLSQLPrinter.g:2216:1: sequence_name : ^( SEQUENCE_NAME ( ID )+ ) -> template( \"not implemented: sequence_name\";
	public final PLSQLPrinter.sequence_name_return sequence_name() throws RecognitionException {
		PLSQLPrinter.sequence_name_return retval = new PLSQLPrinter.sequence_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2217:5: ( ^( SEQUENCE_NAME ( ID )+ ) -> template( \"not implemented: sequence_name\")
			// PLSQLPrinter.g:2217:10: ^( SEQUENCE_NAME ( ID )+ )
			{
			match(input,SEQUENCE_NAME,FOLLOW_SEQUENCE_NAME_in_sequence_name22143); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2217:26: ( ID )+
			int cnt539=0;
			loop539:
			while (true) {
				int alt539=2;
				int LA539_0 = input.LA(1);
				if ( (LA539_0==ID) ) {
					alt539=1;
				}

				switch (alt539) {
				case 1 :
					// PLSQLPrinter.g:2217:26: ID
					{
					match(input,ID,FOLLOW_ID_in_sequence_name22145); 
					}
					break;

				default :
					if ( cnt539 >= 1 ) break loop539;
					EarlyExitException eee = new EarlyExitException(539, input);
					throw eee;
				}
				cnt539++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2218:5: -> template( \"not implemented: sequence_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: sequence_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sequence_name"


	public static class exception_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_name"
	// PLSQLPrinter.g:2221:1: exception_name : ^( EXCEPTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.exception_name_return exception_name() throws RecognitionException {
		PLSQLPrinter.exception_name_return retval = new PLSQLPrinter.exception_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2222:5: ( ^( EXCEPTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2222:10: ^( EXCEPTION_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,EXCEPTION_NAME,FOLLOW_EXCEPTION_NAME_in_exception_name22182); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2222:27: ( char_set_name )?
			int alt540=2;
			int LA540_0 = input.LA(1);
			if ( (LA540_0==CHAR_SET_NAME) ) {
				alt540=1;
			}
			switch (alt540) {
				case 1 :
					// PLSQLPrinter.g:2222:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_exception_name22184);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2222:45: (ids+= ID )+
			int cnt541=0;
			loop541:
			while (true) {
				int alt541=2;
				int LA541_0 = input.LA(1);
				if ( (LA541_0==ID) ) {
					alt541=1;
				}

				switch (alt541) {
				case 1 :
					// PLSQLPrinter.g:2222:45: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_exception_name22189); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt541 >= 1 ) break loop541;
					EarlyExitException eee = new EarlyExitException(541, input);
					throw eee;
				}
				cnt541++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2223:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_name"


	public static class function_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "function_name"
	// PLSQLPrinter.g:2226:1: function_name : ^( FUNCTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.function_name_return function_name() throws RecognitionException {
		PLSQLPrinter.function_name_return retval = new PLSQLPrinter.function_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2227:5: ( ^( FUNCTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2227:10: ^( FUNCTION_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,FUNCTION_NAME,FOLLOW_FUNCTION_NAME_in_function_name22227); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2227:26: ( char_set_name )?
			int alt542=2;
			int LA542_0 = input.LA(1);
			if ( (LA542_0==CHAR_SET_NAME) ) {
				alt542=1;
			}
			switch (alt542) {
				case 1 :
					// PLSQLPrinter.g:2227:26: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_function_name22229);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2227:44: (ids+= ID )+
			int cnt543=0;
			loop543:
			while (true) {
				int alt543=2;
				int LA543_0 = input.LA(1);
				if ( (LA543_0==ID) ) {
					alt543=1;
				}

				switch (alt543) {
				case 1 :
					// PLSQLPrinter.g:2227:44: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_function_name22234); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt543 >= 1 ) break loop543;
					EarlyExitException eee = new EarlyExitException(543, input);
					throw eee;
				}
				cnt543++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2228:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_name"


	public static class procedure_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "procedure_name"
	// PLSQLPrinter.g:2231:1: procedure_name : ^( PROCEDURE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.procedure_name_return procedure_name() throws RecognitionException {
		PLSQLPrinter.procedure_name_return retval = new PLSQLPrinter.procedure_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2232:5: ( ^( PROCEDURE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2232:10: ^( PROCEDURE_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,PROCEDURE_NAME,FOLLOW_PROCEDURE_NAME_in_procedure_name22272); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2232:27: ( char_set_name )?
			int alt544=2;
			int LA544_0 = input.LA(1);
			if ( (LA544_0==CHAR_SET_NAME) ) {
				alt544=1;
			}
			switch (alt544) {
				case 1 :
					// PLSQLPrinter.g:2232:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_procedure_name22274);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2232:45: (ids+= ID )+
			int cnt545=0;
			loop545:
			while (true) {
				int alt545=2;
				int LA545_0 = input.LA(1);
				if ( (LA545_0==ID) ) {
					alt545=1;
				}

				switch (alt545) {
				case 1 :
					// PLSQLPrinter.g:2232:45: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_procedure_name22279); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt545 >= 1 ) break loop545;
					EarlyExitException eee = new EarlyExitException(545, input);
					throw eee;
				}
				cnt545++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2233:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "procedure_name"


	public static class trigger_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_name"
	// PLSQLPrinter.g:2236:1: trigger_name : ^( TRIGGER_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.trigger_name_return trigger_name() throws RecognitionException {
		PLSQLPrinter.trigger_name_return retval = new PLSQLPrinter.trigger_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2237:5: ( ^( TRIGGER_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2237:10: ^( TRIGGER_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,TRIGGER_NAME,FOLLOW_TRIGGER_NAME_in_trigger_name22317); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2237:25: ( char_set_name )?
			int alt546=2;
			int LA546_0 = input.LA(1);
			if ( (LA546_0==CHAR_SET_NAME) ) {
				alt546=1;
			}
			switch (alt546) {
				case 1 :
					// PLSQLPrinter.g:2237:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_trigger_name22319);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2237:43: (ids+= ID )+
			int cnt547=0;
			loop547:
			while (true) {
				int alt547=2;
				int LA547_0 = input.LA(1);
				if ( (LA547_0==ID) ) {
					alt547=1;
				}

				switch (alt547) {
				case 1 :
					// PLSQLPrinter.g:2237:43: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_trigger_name22324); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt547 >= 1 ) break loop547;
					EarlyExitException eee = new EarlyExitException(547, input);
					throw eee;
				}
				cnt547++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2238:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_name"


	public static class variable_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "variable_name"
	// PLSQLPrinter.g:2241:1: variable_name : ( ^( HOSTED_VARIABLE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids)| ^( VARIABLE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids));
	public final PLSQLPrinter.variable_name_return variable_name() throws RecognitionException {
		PLSQLPrinter.variable_name_return retval = new PLSQLPrinter.variable_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2242:5: ( ^( HOSTED_VARIABLE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids)| ^( VARIABLE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			int alt552=2;
			int LA552_0 = input.LA(1);
			if ( (LA552_0==HOSTED_VARIABLE_NAME) ) {
				alt552=1;
			}
			else if ( (LA552_0==VARIABLE_NAME) ) {
				alt552=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 552, 0, input);
				throw nvae;
			}

			switch (alt552) {
				case 1 :
					// PLSQLPrinter.g:2242:10: ^( HOSTED_VARIABLE_NAME ( char_set_name )? (ids+= ID )+ )
					{
					match(input,HOSTED_VARIABLE_NAME,FOLLOW_HOSTED_VARIABLE_NAME_in_variable_name22362); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2242:33: ( char_set_name )?
					int alt548=2;
					int LA548_0 = input.LA(1);
					if ( (LA548_0==CHAR_SET_NAME) ) {
						alt548=1;
					}
					switch (alt548) {
						case 1 :
							// PLSQLPrinter.g:2242:33: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_variable_name22364);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2242:51: (ids+= ID )+
					int cnt549=0;
					loop549:
					while (true) {
						int alt549=2;
						int LA549_0 = input.LA(1);
						if ( (LA549_0==ID) ) {
							alt549=1;
						}

						switch (alt549) {
						case 1 :
							// PLSQLPrinter.g:2242:51: ids+= ID
							{
							ids=(CommonTree)match(input,ID,FOLLOW_ID_in_variable_name22369); 
							if (list_ids==null) list_ids=new ArrayList<Object>();
							list_ids.add(ids);
							}
							break;

						default :
							if ( cnt549 >= 1 ) break loop549;
							EarlyExitException eee = new EarlyExitException(549, input);
							throw eee;
						}
						cnt549++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2243:5: -> dotted_name(ids=$ids)
					{
						retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2244:10: ^( VARIABLE_NAME ( char_set_name )? (ids+= ID )+ )
					{
					match(input,VARIABLE_NAME,FOLLOW_VARIABLE_NAME_in_variable_name22398); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2244:26: ( char_set_name )?
					int alt550=2;
					int LA550_0 = input.LA(1);
					if ( (LA550_0==CHAR_SET_NAME) ) {
						alt550=1;
					}
					switch (alt550) {
						case 1 :
							// PLSQLPrinter.g:2244:26: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_variable_name22400);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2244:44: (ids+= ID )+
					int cnt551=0;
					loop551:
					while (true) {
						int alt551=2;
						int LA551_0 = input.LA(1);
						if ( (LA551_0==ID) ) {
							alt551=1;
						}

						switch (alt551) {
						case 1 :
							// PLSQLPrinter.g:2244:44: ids+= ID
							{
							ids=(CommonTree)match(input,ID,FOLLOW_ID_in_variable_name22405); 
							if (list_ids==null) list_ids=new ArrayList<Object>();
							list_ids.add(ids);
							}
							break;

						default :
							if ( cnt551 >= 1 ) break loop551;
							EarlyExitException eee = new EarlyExitException(551, input);
							throw eee;
						}
						cnt551++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2245:5: -> dotted_name(ids=$ids)
					{
						retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "variable_name"


	public static class index_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "index_name"
	// PLSQLPrinter.g:2248:1: index_name : ^( INDEX_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.index_name_return index_name() throws RecognitionException {
		PLSQLPrinter.index_name_return retval = new PLSQLPrinter.index_name_return();
		retval.start = input.LT(1);

		CommonTree ID211=null;

		try {
			// PLSQLPrinter.g:2249:5: ( ^( INDEX_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2249:10: ^( INDEX_NAME ( char_set_name )? ID )
			{
			match(input,INDEX_NAME,FOLLOW_INDEX_NAME_in_index_name22443); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2249:23: ( char_set_name )?
			int alt553=2;
			int LA553_0 = input.LA(1);
			if ( (LA553_0==CHAR_SET_NAME) ) {
				alt553=1;
			}
			switch (alt553) {
				case 1 :
					// PLSQLPrinter.g:2249:23: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_index_name22445);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID211=(CommonTree)match(input,ID,FOLLOW_ID_in_index_name22448); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2249:42: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID211!=null?ID211.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_name"


	public static class cursor_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_name"
	// PLSQLPrinter.g:2252:1: cursor_name : ^( CURSOR_NAME ( char_set_name )? ID ) -> template( \"not implemented: cursor_name\";
	public final PLSQLPrinter.cursor_name_return cursor_name() throws RecognitionException {
		PLSQLPrinter.cursor_name_return retval = new PLSQLPrinter.cursor_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2253:5: ( ^( CURSOR_NAME ( char_set_name )? ID ) -> template( \"not implemented: cursor_name\")
			// PLSQLPrinter.g:2253:10: ^( CURSOR_NAME ( char_set_name )? ID )
			{
			match(input,CURSOR_NAME,FOLLOW_CURSOR_NAME_in_cursor_name22479); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2253:24: ( char_set_name )?
			int alt554=2;
			int LA554_0 = input.LA(1);
			if ( (LA554_0==CHAR_SET_NAME) ) {
				alt554=1;
			}
			switch (alt554) {
				case 1 :
					// PLSQLPrinter.g:2253:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_cursor_name22481);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_cursor_name22484); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2254:5: -> template( \"not implemented: cursor_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: cursor_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_name"


	public static class record_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_name"
	// PLSQLPrinter.g:2257:1: record_name : ^( RECORD_NAME ( char_set_name )? ID ) -> template( \"not implemented: record_name\";
	public final PLSQLPrinter.record_name_return record_name() throws RecognitionException {
		PLSQLPrinter.record_name_return retval = new PLSQLPrinter.record_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2258:5: ( ^( RECORD_NAME ( char_set_name )? ID ) -> template( \"not implemented: record_name\")
			// PLSQLPrinter.g:2258:10: ^( RECORD_NAME ( char_set_name )? ID )
			{
			match(input,RECORD_NAME,FOLLOW_RECORD_NAME_in_record_name22520); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2258:24: ( char_set_name )?
			int alt555=2;
			int LA555_0 = input.LA(1);
			if ( (LA555_0==CHAR_SET_NAME) ) {
				alt555=1;
			}
			switch (alt555) {
				case 1 :
					// PLSQLPrinter.g:2258:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_record_name22522);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_record_name22525); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2259:5: -> template( \"not implemented: record_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: record_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_name"


	public static class collection_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "collection_name"
	// PLSQLPrinter.g:2262:1: collection_name : ^( COLLECTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.collection_name_return collection_name() throws RecognitionException {
		PLSQLPrinter.collection_name_return retval = new PLSQLPrinter.collection_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2263:5: ( ^( COLLECTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2263:10: ^( COLLECTION_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,COLLECTION_NAME,FOLLOW_COLLECTION_NAME_in_collection_name22561); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2263:28: ( char_set_name )?
			int alt556=2;
			int LA556_0 = input.LA(1);
			if ( (LA556_0==CHAR_SET_NAME) ) {
				alt556=1;
			}
			switch (alt556) {
				case 1 :
					// PLSQLPrinter.g:2263:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_collection_name22563);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2263:46: (ids+= ID )+
			int cnt557=0;
			loop557:
			while (true) {
				int alt557=2;
				int LA557_0 = input.LA(1);
				if ( (LA557_0==ID) ) {
					alt557=1;
				}

				switch (alt557) {
				case 1 :
					// PLSQLPrinter.g:2263:46: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_collection_name22568); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt557 >= 1 ) break loop557;
					EarlyExitException eee = new EarlyExitException(557, input);
					throw eee;
				}
				cnt557++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2264:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "collection_name"


	public static class link_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "link_name"
	// PLSQLPrinter.g:2267:1: link_name : ^( LINK_NAME ( char_set_name )? ID ) -> template( \"not implemented: link_name\";
	public final PLSQLPrinter.link_name_return link_name() throws RecognitionException {
		PLSQLPrinter.link_name_return retval = new PLSQLPrinter.link_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2268:5: ( ^( LINK_NAME ( char_set_name )? ID ) -> template( \"not implemented: link_name\")
			// PLSQLPrinter.g:2268:10: ^( LINK_NAME ( char_set_name )? ID )
			{
			match(input,LINK_NAME,FOLLOW_LINK_NAME_in_link_name22606); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2268:22: ( char_set_name )?
			int alt558=2;
			int LA558_0 = input.LA(1);
			if ( (LA558_0==CHAR_SET_NAME) ) {
				alt558=1;
			}
			switch (alt558) {
				case 1 :
					// PLSQLPrinter.g:2268:22: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_link_name22608);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_link_name22611); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2269:5: -> template( \"not implemented: link_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: link_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "link_name"


	public static class column_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "column_name"
	// PLSQLPrinter.g:2272:1: column_name : ^( COLUMN_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.column_name_return column_name() throws RecognitionException {
		PLSQLPrinter.column_name_return retval = new PLSQLPrinter.column_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2273:5: ( ^( COLUMN_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2273:10: ^( COLUMN_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,COLUMN_NAME,FOLLOW_COLUMN_NAME_in_column_name22647); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2273:24: ( char_set_name )?
			int alt559=2;
			int LA559_0 = input.LA(1);
			if ( (LA559_0==CHAR_SET_NAME) ) {
				alt559=1;
			}
			switch (alt559) {
				case 1 :
					// PLSQLPrinter.g:2273:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_column_name22649);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2273:42: (ids+= ID )+
			int cnt560=0;
			loop560:
			while (true) {
				int alt560=2;
				int LA560_0 = input.LA(1);
				if ( (LA560_0==ID) ) {
					alt560=1;
				}

				switch (alt560) {
				case 1 :
					// PLSQLPrinter.g:2273:42: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_column_name22654); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt560 >= 1 ) break loop560;
					EarlyExitException eee = new EarlyExitException(560, input);
					throw eee;
				}
				cnt560++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2274:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_name"


	public static class tableview_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "tableview_name"
	// PLSQLPrinter.g:2277:1: tableview_name : ^( TABLEVIEW_NAME ( char_set_name )? (ids+= ID )+ ( link_name )? ( partition_extension_clause )? ) -> tableview_name(ids=$idslink_name=$link_name.stpartition_extension_clause=$partition_extension_clause.st);
	public final PLSQLPrinter.tableview_name_return tableview_name() throws RecognitionException {
		PLSQLPrinter.tableview_name_return retval = new PLSQLPrinter.tableview_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;
		TreeRuleReturnScope link_name212 =null;
		TreeRuleReturnScope partition_extension_clause213 =null;

		try {
			// PLSQLPrinter.g:2278:5: ( ^( TABLEVIEW_NAME ( char_set_name )? (ids+= ID )+ ( link_name )? ( partition_extension_clause )? ) -> tableview_name(ids=$idslink_name=$link_name.stpartition_extension_clause=$partition_extension_clause.st))
			// PLSQLPrinter.g:2278:10: ^( TABLEVIEW_NAME ( char_set_name )? (ids+= ID )+ ( link_name )? ( partition_extension_clause )? )
			{
			match(input,TABLEVIEW_NAME,FOLLOW_TABLEVIEW_NAME_in_tableview_name22692); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2278:27: ( char_set_name )?
			int alt561=2;
			int LA561_0 = input.LA(1);
			if ( (LA561_0==CHAR_SET_NAME) ) {
				alt561=1;
			}
			switch (alt561) {
				case 1 :
					// PLSQLPrinter.g:2278:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_tableview_name22694);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2278:45: (ids+= ID )+
			int cnt562=0;
			loop562:
			while (true) {
				int alt562=2;
				int LA562_0 = input.LA(1);
				if ( (LA562_0==ID) ) {
					alt562=1;
				}

				switch (alt562) {
				case 1 :
					// PLSQLPrinter.g:2278:45: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_tableview_name22699); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt562 >= 1 ) break loop562;
					EarlyExitException eee = new EarlyExitException(562, input);
					throw eee;
				}
				cnt562++;
			}

			// PLSQLPrinter.g:2278:51: ( link_name )?
			int alt563=2;
			int LA563_0 = input.LA(1);
			if ( (LA563_0==LINK_NAME) ) {
				alt563=1;
			}
			switch (alt563) {
				case 1 :
					// PLSQLPrinter.g:2278:51: link_name
					{
					pushFollow(FOLLOW_link_name_in_tableview_name22702);
					link_name212=link_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2278:62: ( partition_extension_clause )?
			int alt564=2;
			int LA564_0 = input.LA(1);
			if ( (LA564_0==PARTITION_VK||LA564_0==SUBPARTITION_VK) ) {
				alt564=1;
			}
			switch (alt564) {
				case 1 :
					// PLSQLPrinter.g:2278:62: partition_extension_clause
					{
					pushFollow(FOLLOW_partition_extension_clause_in_tableview_name22705);
					partition_extension_clause213=partition_extension_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2279:5: -> tableview_name(ids=$idslink_name=$link_name.stpartition_extension_clause=$partition_extension_clause.st)
			{
				retval.st = templateLib.getInstanceOf("tableview_name",new STAttrMap().put("ids", list_ids).put("link_name", (link_name212!=null?((StringTemplate)link_name212.getTemplate()):null)).put("partition_extension_clause", (partition_extension_clause213!=null?((StringTemplate)partition_extension_clause213.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableview_name"


	public static class char_set_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "char_set_name"
	// PLSQLPrinter.g:2282:1: char_set_name : ^( CHAR_SET_NAME (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.char_set_name_return char_set_name() throws RecognitionException {
		PLSQLPrinter.char_set_name_return retval = new PLSQLPrinter.char_set_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2283:5: ( ^( CHAR_SET_NAME (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2283:10: ^( CHAR_SET_NAME (ids+= ID )+ )
			{
			match(input,CHAR_SET_NAME,FOLLOW_CHAR_SET_NAME_in_char_set_name22753); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2283:29: (ids+= ID )+
			int cnt565=0;
			loop565:
			while (true) {
				int alt565=2;
				int LA565_0 = input.LA(1);
				if ( (LA565_0==ID) ) {
					alt565=1;
				}

				switch (alt565) {
				case 1 :
					// PLSQLPrinter.g:2283:29: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_char_set_name22757); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt565 >= 1 ) break loop565;
					EarlyExitException eee = new EarlyExitException(565, input);
					throw eee;
				}
				cnt565++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2284:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "char_set_name"


	public static class function_argument_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "function_argument"
	// PLSQLPrinter.g:2291:1: function_argument : ^( ARGUMENTS (args+= argument )* ) -> function_arguments(arguments=$args);
	public final PLSQLPrinter.function_argument_return function_argument() throws RecognitionException {
		PLSQLPrinter.function_argument_return retval = new PLSQLPrinter.function_argument_return();
		retval.start = input.LT(1);

		List<Object> list_args=null;
		RuleReturnScope args = null;
		try {
			// PLSQLPrinter.g:2292:5: ( ^( ARGUMENTS (args+= argument )* ) -> function_arguments(arguments=$args))
			// PLSQLPrinter.g:2292:10: ^( ARGUMENTS (args+= argument )* )
			{
			match(input,ARGUMENTS,FOLLOW_ARGUMENTS_in_function_argument22799); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:2292:26: (args+= argument )*
				loop566:
				while (true) {
					int alt566=2;
					int LA566_0 = input.LA(1);
					if ( (LA566_0==ARGUMENT) ) {
						alt566=1;
					}

					switch (alt566) {
					case 1 :
						// PLSQLPrinter.g:2292:26: args+= argument
						{
						pushFollow(FOLLOW_argument_in_function_argument22803);
						args=argument();
						state._fsp--;

						if (list_args==null) list_args=new ArrayList<Object>();
						list_args.add(args.getTemplate());
						}
						break;

					default :
						break loop566;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 2293:5: -> function_arguments(arguments=$args)
			{
				retval.st = templateLib.getInstanceOf("function_arguments",new STAttrMap().put("arguments", list_args));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_argument"


	public static class argument_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "argument"
	// PLSQLPrinter.g:2296:1: argument : ^( ARGUMENT expression ( parameter_name )? ) -> function_argument(valueExpr=$expression.stname=$parameter_name.st);
	public final PLSQLPrinter.argument_return argument() throws RecognitionException {
		PLSQLPrinter.argument_return retval = new PLSQLPrinter.argument_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression214 =null;
		TreeRuleReturnScope parameter_name215 =null;

		try {
			// PLSQLPrinter.g:2297:5: ( ^( ARGUMENT expression ( parameter_name )? ) -> function_argument(valueExpr=$expression.stname=$parameter_name.st))
			// PLSQLPrinter.g:2297:10: ^( ARGUMENT expression ( parameter_name )? )
			{
			match(input,ARGUMENT,FOLLOW_ARGUMENT_in_argument22841); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_argument22843);
			expression214=expression();
			state._fsp--;

			// PLSQLPrinter.g:2297:32: ( parameter_name )?
			int alt567=2;
			int LA567_0 = input.LA(1);
			if ( (LA567_0==PARAMETER_NAME) ) {
				alt567=1;
			}
			switch (alt567) {
				case 1 :
					// PLSQLPrinter.g:2297:32: parameter_name
					{
					pushFollow(FOLLOW_parameter_name_in_argument22845);
					parameter_name215=parameter_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2298:5: -> function_argument(valueExpr=$expression.stname=$parameter_name.st)
			{
				retval.st = templateLib.getInstanceOf("function_argument",new STAttrMap().put("valueExpr", (expression214!=null?((StringTemplate)expression214.getTemplate()):null)).put("name", (parameter_name215!=null?((StringTemplate)parameter_name215.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "argument"


	public static class type_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_spec"
	// PLSQLPrinter.g:2301:1: type_spec : ( ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? ) -> typespec_custom(name=$type_name.stis_ref=$REF_VK != nullis_percent_rowtype=$PERCENT_ROWTYPE_VK != nullis_percent_type=$PERCENT_TYPE_VK != null)| native_datatype_spec -> { $native_datatype_spec.st; }| ^( INTERVAL_DATATYPE ( YEAR_VK | DAY_VK ) ( MONTH_VK | SECOND_VK ) ( expression )* ) -> template( \"not implemented: type_spec[INTERVAL_DATATYPE]\");
	public final PLSQLPrinter.type_spec_return type_spec() throws RecognitionException {
		PLSQLPrinter.type_spec_return retval = new PLSQLPrinter.type_spec_return();
		retval.start = input.LT(1);

		CommonTree REF_VK217=null;
		CommonTree PERCENT_ROWTYPE_VK218=null;
		CommonTree PERCENT_TYPE_VK219=null;
		TreeRuleReturnScope type_name216 =null;
		TreeRuleReturnScope native_datatype_spec220 =null;

		try {
			// PLSQLPrinter.g:2302:5: ( ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? ) -> typespec_custom(name=$type_name.stis_ref=$REF_VK != nullis_percent_rowtype=$PERCENT_ROWTYPE_VK != nullis_percent_type=$PERCENT_TYPE_VK != null)| native_datatype_spec -> { $native_datatype_spec.st; }| ^( INTERVAL_DATATYPE ( YEAR_VK | DAY_VK ) ( MONTH_VK | SECOND_VK ) ( expression )* ) -> template( \"not implemented: type_spec[INTERVAL_DATATYPE]\")
			int alt573=3;
			switch ( input.LA(1) ) {
			case CUSTOM_TYPE:
				{
				alt573=1;
				}
				break;
			case NATIVE_DATATYPE:
				{
				alt573=2;
				}
				break;
			case INTERVAL_DATATYPE:
				{
				alt573=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 573, 0, input);
				throw nvae;
			}
			switch (alt573) {
				case 1 :
					// PLSQLPrinter.g:2302:11: ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? )
					{
					match(input,CUSTOM_TYPE,FOLLOW_CUSTOM_TYPE_in_type_spec22889); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_type_name_in_type_spec22891);
					type_name216=type_name();
					state._fsp--;

					// PLSQLPrinter.g:2302:35: ( REF_VK )?
					int alt568=2;
					int LA568_0 = input.LA(1);
					if ( (LA568_0==REF_VK) ) {
						alt568=1;
					}
					switch (alt568) {
						case 1 :
							// PLSQLPrinter.g:2302:35: REF_VK
							{
							REF_VK217=(CommonTree)match(input,REF_VK,FOLLOW_REF_VK_in_type_spec22893); 
							}
							break;

					}

					// PLSQLPrinter.g:2302:43: ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )?
					int alt569=3;
					int LA569_0 = input.LA(1);
					if ( (LA569_0==PERCENT_ROWTYPE_VK) ) {
						alt569=1;
					}
					else if ( (LA569_0==PERCENT_TYPE_VK) ) {
						alt569=2;
					}
					switch (alt569) {
						case 1 :
							// PLSQLPrinter.g:2302:44: PERCENT_ROWTYPE_VK
							{
							PERCENT_ROWTYPE_VK218=(CommonTree)match(input,PERCENT_ROWTYPE_VK,FOLLOW_PERCENT_ROWTYPE_VK_in_type_spec22897); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2302:63: PERCENT_TYPE_VK
							{
							PERCENT_TYPE_VK219=(CommonTree)match(input,PERCENT_TYPE_VK,FOLLOW_PERCENT_TYPE_VK_in_type_spec22899); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2303:5: -> typespec_custom(name=$type_name.stis_ref=$REF_VK != nullis_percent_rowtype=$PERCENT_ROWTYPE_VK != nullis_percent_type=$PERCENT_TYPE_VK != null)
					{
						retval.st = templateLib.getInstanceOf("typespec_custom",new STAttrMap().put("name", (type_name216!=null?((StringTemplate)type_name216.getTemplate()):null)).put("is_ref", REF_VK217 != null).put("is_percent_rowtype", PERCENT_ROWTYPE_VK218 != null).put("is_percent_type", PERCENT_TYPE_VK219 != null));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2306:10: native_datatype_spec
					{
					pushFollow(FOLLOW_native_datatype_spec_in_type_spec22968);
					native_datatype_spec220=native_datatype_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 2306:31: -> { $native_datatype_spec.st; }
					{
						retval.st =  (native_datatype_spec220!=null?((StringTemplate)native_datatype_spec220.getTemplate()):null); ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:2307:10: ^( INTERVAL_DATATYPE ( YEAR_VK | DAY_VK ) ( MONTH_VK | SECOND_VK ) ( expression )* )
					{
					match(input,INTERVAL_DATATYPE,FOLLOW_INTERVAL_DATATYPE_in_type_spec22984); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2307:30: ( YEAR_VK | DAY_VK )
					int alt570=2;
					int LA570_0 = input.LA(1);
					if ( (LA570_0==YEAR_VK) ) {
						alt570=1;
					}
					else if ( (LA570_0==DAY_VK) ) {
						alt570=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 570, 0, input);
						throw nvae;
					}

					switch (alt570) {
						case 1 :
							// PLSQLPrinter.g:2307:31: YEAR_VK
							{
							match(input,YEAR_VK,FOLLOW_YEAR_VK_in_type_spec22987); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2307:39: DAY_VK
							{
							match(input,DAY_VK,FOLLOW_DAY_VK_in_type_spec22989); 
							}
							break;

					}

					// PLSQLPrinter.g:2307:47: ( MONTH_VK | SECOND_VK )
					int alt571=2;
					int LA571_0 = input.LA(1);
					if ( (LA571_0==MONTH_VK) ) {
						alt571=1;
					}
					else if ( (LA571_0==SECOND_VK) ) {
						alt571=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 571, 0, input);
						throw nvae;
					}

					switch (alt571) {
						case 1 :
							// PLSQLPrinter.g:2307:48: MONTH_VK
							{
							match(input,MONTH_VK,FOLLOW_MONTH_VK_in_type_spec22993); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2307:57: SECOND_VK
							{
							match(input,SECOND_VK,FOLLOW_SECOND_VK_in_type_spec22995); 
							}
							break;

					}

					// PLSQLPrinter.g:2307:68: ( expression )*
					loop572:
					while (true) {
						int alt572=2;
						int LA572_0 = input.LA(1);
						if ( (LA572_0==EXPR||LA572_0==LOGIC_EXPR) ) {
							alt572=1;
						}

						switch (alt572) {
						case 1 :
							// PLSQLPrinter.g:2307:68: expression
							{
							pushFollow(FOLLOW_expression_in_type_spec22998);
							expression();
							state._fsp--;

							}
							break;

						default :
							break loop572;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2308:5: -> template( \"not implemented: type_spec[INTERVAL_DATATYPE]\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: type_spec[INTERVAL_DATATYPE]");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_spec"


	public static class type_precision_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_precision"
	// PLSQLPrinter.g:2311:1: type_precision : ^( PRECISION size1= constant (size2= constant )? (precision_char= CHAR_VK |precision_byte= BYTE_VK )? ) -> base_type_spec_precision(size1=$size1.stsize2=$size2.stis_byte=$precision_byte != nullis_char=$precision_char != null);
	public final PLSQLPrinter.type_precision_return type_precision() throws RecognitionException {
		PLSQLPrinter.type_precision_return retval = new PLSQLPrinter.type_precision_return();
		retval.start = input.LT(1);

		CommonTree precision_char=null;
		CommonTree precision_byte=null;
		TreeRuleReturnScope size1 =null;
		TreeRuleReturnScope size2 =null;

		try {
			// PLSQLPrinter.g:2312:5: ( ^( PRECISION size1= constant (size2= constant )? (precision_char= CHAR_VK |precision_byte= BYTE_VK )? ) -> base_type_spec_precision(size1=$size1.stsize2=$size2.stis_byte=$precision_byte != nullis_char=$precision_char != null))
			// PLSQLPrinter.g:2312:10: ^( PRECISION size1= constant (size2= constant )? (precision_char= CHAR_VK |precision_byte= BYTE_VK )? )
			{
			match(input,PRECISION,FOLLOW_PRECISION_in_type_precision23035); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_constant_in_type_precision23039);
			size1=constant();
			state._fsp--;

			// PLSQLPrinter.g:2312:42: (size2= constant )?
			int alt574=2;
			int LA574_0 = input.LA(1);
			if ( (LA574_0==APPROXIMATE_NUM_LIT||LA574_0==CHAR_STRING||LA574_0==EXACT_NUM_LIT||LA574_0==MINUS_SIGN||LA574_0==SQL92_RESERVED_DEFAULT||LA574_0==SQL92_RESERVED_FALSE||LA574_0==SQL92_RESERVED_NULL||LA574_0==SQL92_RESERVED_TRUE||LA574_0==UNSIGNED_INTEGER||LA574_0==DBTIMEZONE_VK||LA574_0==MAXVALUE_VK||LA574_0==MINVALUE_VK||LA574_0==SESSIONTIMEZONE_VK) ) {
				alt574=1;
			}
			switch (alt574) {
				case 1 :
					// PLSQLPrinter.g:2312:42: size2= constant
					{
					pushFollow(FOLLOW_constant_in_type_precision23043);
					size2=constant();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2312:53: (precision_char= CHAR_VK |precision_byte= BYTE_VK )?
			int alt575=3;
			int LA575_0 = input.LA(1);
			if ( (LA575_0==CHAR_VK) ) {
				alt575=1;
			}
			else if ( (LA575_0==BYTE_VK) ) {
				alt575=2;
			}
			switch (alt575) {
				case 1 :
					// PLSQLPrinter.g:2312:54: precision_char= CHAR_VK
					{
					precision_char=(CommonTree)match(input,CHAR_VK,FOLLOW_CHAR_VK_in_type_precision23049); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2312:77: precision_byte= BYTE_VK
					{
					precision_byte=(CommonTree)match(input,BYTE_VK,FOLLOW_BYTE_VK_in_type_precision23053); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2313:5: -> base_type_spec_precision(size1=$size1.stsize2=$size2.stis_byte=$precision_byte != nullis_char=$precision_char != null)
			{
				retval.st = templateLib.getInstanceOf("base_type_spec_precision",new STAttrMap().put("size1", (size1!=null?((StringTemplate)size1.getTemplate()):null)).put("size2", (size2!=null?((StringTemplate)size2.getTemplate()):null)).put("is_byte", precision_byte != null).put("is_char", precision_char != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_precision"


	public static class native_datatype_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "native_datatype_spec"
	// PLSQLPrinter.g:2318:1: native_datatype_spec : ^( NATIVE_DATATYPE ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | DATE_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DOUBLE_VK PRECISION_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_VK RAW_VK | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK ) (prec= type_precision )? (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )? ) -> base_type_spec(baseName=typeBaseNameprecision=$prec.stis_with_time_zone=$is_tz != nullis_time_zone_local=$is_tz_local != null);
	public final PLSQLPrinter.native_datatype_spec_return native_datatype_spec() throws RecognitionException {
		PLSQLPrinter.native_datatype_spec_return retval = new PLSQLPrinter.native_datatype_spec_return();
		retval.start = input.LT(1);

		CommonTree is_tz=null;
		CommonTree is_tz_local=null;
		TreeRuleReturnScope prec =null;

		 String typeBaseName = null; 
		try {
			// PLSQLPrinter.g:2320:5: ( ^( NATIVE_DATATYPE ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | DATE_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DOUBLE_VK PRECISION_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_VK RAW_VK | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK ) (prec= type_precision )? (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )? ) -> base_type_spec(baseName=typeBaseNameprecision=$prec.stis_with_time_zone=$is_tz != nullis_time_zone_local=$is_tz_local != null))
			// PLSQLPrinter.g:2320:10: ^( NATIVE_DATATYPE ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | DATE_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DOUBLE_VK PRECISION_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_VK RAW_VK | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK ) (prec= type_precision )? (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )? )
			{
			match(input,NATIVE_DATATYPE,FOLLOW_NATIVE_DATATYPE_in_native_datatype_spec23116); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2321:5: ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | DATE_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DOUBLE_VK PRECISION_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_VK RAW_VK | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK )
			int alt576=56;
			switch ( input.LA(1) ) {
			case BFILE_VK:
				{
				alt576=1;
				}
				break;
			case BINARY_FLOAT_VK:
				{
				alt576=2;
				}
				break;
			case BINARY_INTEGER_VK:
				{
				alt576=3;
				}
				break;
			case BLOB_VK:
				{
				alt576=4;
				}
				break;
			case BOOLEAN_VK:
				{
				alt576=5;
				}
				break;
			case CHARACTER_VK:
				{
				alt576=6;
				}
				break;
			case CHAR_VK:
				{
				alt576=7;
				}
				break;
			case CLOB_VK:
				{
				alt576=8;
				}
				break;
			case DATE_VK:
				{
				alt576=9;
				}
				break;
			case SQL92_RESERVED_DATE:
				{
				alt576=10;
				}
				break;
			case DAY_VK:
				{
				alt576=11;
				}
				break;
			case DECIMAL_VK:
				{
				alt576=12;
				}
				break;
			case DEC_VK:
				{
				alt576=13;
				}
				break;
			case DOUBLE_VK:
				{
				int LA576_14 = input.LA(2);
				if ( (LA576_14==PRECISION_VK) ) {
					alt576=15;
				}
				else if ( (LA576_14==UP||LA576_14==PRECISION||LA576_14==TIME_VK) ) {
					alt576=14;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 576, 14, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DSINTERVAL_UNCONSTRAINED_VK:
				{
				alt576=16;
				}
				break;
			case FLOAT_VK:
				{
				alt576=17;
				}
				break;
			case HOUR_VK:
				{
				alt576=18;
				}
				break;
			case INTEGER_VK:
				{
				alt576=19;
				}
				break;
			case INT_VK:
				{
				alt576=20;
				}
				break;
			case LONG_VK:
				{
				int LA576_20 = input.LA(2);
				if ( (LA576_20==RAW_VK) ) {
					alt576=22;
				}
				else if ( (LA576_20==UP||LA576_20==PRECISION||LA576_20==TIME_VK) ) {
					alt576=21;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 576, 20, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case MINUTE_VK:
				{
				alt576=23;
				}
				break;
			case MLSLABEL_VK:
				{
				alt576=24;
				}
				break;
			case MONTH_VK:
				{
				alt576=25;
				}
				break;
			case NATURALN_VK:
				{
				alt576=26;
				}
				break;
			case NATURAL_VK:
				{
				alt576=27;
				}
				break;
			case NCHAR_VK:
				{
				alt576=28;
				}
				break;
			case NCLOB_VK:
				{
				alt576=29;
				}
				break;
			case NUMBER_VK:
				{
				alt576=30;
				}
				break;
			case NUMERIC_VK:
				{
				alt576=31;
				}
				break;
			case NVARCHAR2_VK:
				{
				alt576=32;
				}
				break;
			case PLS_INTEGER_VK:
				{
				alt576=33;
				}
				break;
			case POSITIVEN_VK:
				{
				alt576=34;
				}
				break;
			case POSITIVE_VK:
				{
				alt576=35;
				}
				break;
			case RAW_VK:
				{
				alt576=36;
				}
				break;
			case REAL_VK:
				{
				alt576=37;
				}
				break;
			case ROWID_VK:
				{
				alt576=38;
				}
				break;
			case SECOND_VK:
				{
				alt576=39;
				}
				break;
			case SIGNTYPE_VK:
				{
				alt576=40;
				}
				break;
			case SIMPLE_INTEGER_VK:
				{
				alt576=41;
				}
				break;
			case SMALLINT_VK:
				{
				alt576=42;
				}
				break;
			case STRING_VK:
				{
				alt576=43;
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED_VK:
				{
				alt576=44;
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED_VK:
				{
				alt576=45;
				}
				break;
			case TIMESTAMP_UNCONSTRAINED_VK:
				{
				alt576=46;
				}
				break;
			case TIMESTAMP_VK:
				{
				alt576=47;
				}
				break;
			case TIMEZONE_ABBR_VK:
				{
				alt576=48;
				}
				break;
			case TIMEZONE_HOUR_VK:
				{
				alt576=49;
				}
				break;
			case TIMEZONE_MINUTE_VK:
				{
				alt576=50;
				}
				break;
			case TIMEZONE_REGION_VK:
				{
				alt576=51;
				}
				break;
			case UROWID_VK:
				{
				alt576=52;
				}
				break;
			case VARCHAR2_VK:
				{
				alt576=53;
				}
				break;
			case VARCHAR_VK:
				{
				alt576=54;
				}
				break;
			case YEAR_VK:
				{
				alt576=55;
				}
				break;
			case YMINTERVAL_UNCONSTRAINED_VK:
				{
				alt576=56;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 576, 0, input);
				throw nvae;
			}
			switch (alt576) {
				case 1 :
					// PLSQLPrinter.g:2321:10: BFILE_VK
					{
					match(input,BFILE_VK,FOLLOW_BFILE_VK_in_native_datatype_spec23127); 
					 typeBaseName = "bfile"; 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2322:10: BINARY_FLOAT_VK
					{
					match(input,BINARY_FLOAT_VK,FOLLOW_BINARY_FLOAT_VK_in_native_datatype_spec23140); 
					 typeBaseName = "binary_float"; 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:2323:10: BINARY_INTEGER_VK
					{
					match(input,BINARY_INTEGER_VK,FOLLOW_BINARY_INTEGER_VK_in_native_datatype_spec23153); 
					 typeBaseName = "binary_integer"; 
					}
					break;
				case 4 :
					// PLSQLPrinter.g:2324:10: BLOB_VK
					{
					match(input,BLOB_VK,FOLLOW_BLOB_VK_in_native_datatype_spec23166); 
					 typeBaseName = "blob"; 
					}
					break;
				case 5 :
					// PLSQLPrinter.g:2325:10: BOOLEAN_VK
					{
					match(input,BOOLEAN_VK,FOLLOW_BOOLEAN_VK_in_native_datatype_spec23179); 
					 typeBaseName = "boolean"; 
					}
					break;
				case 6 :
					// PLSQLPrinter.g:2326:10: CHARACTER_VK
					{
					match(input,CHARACTER_VK,FOLLOW_CHARACTER_VK_in_native_datatype_spec23192); 
					 typeBaseName = "character"; 
					}
					break;
				case 7 :
					// PLSQLPrinter.g:2327:10: CHAR_VK
					{
					match(input,CHAR_VK,FOLLOW_CHAR_VK_in_native_datatype_spec23206); 
					 typeBaseName = "char"; 
					}
					break;
				case 8 :
					// PLSQLPrinter.g:2328:10: CLOB_VK
					{
					match(input,CLOB_VK,FOLLOW_CLOB_VK_in_native_datatype_spec23219); 
					 typeBaseName = "clob"; 
					}
					break;
				case 9 :
					// PLSQLPrinter.g:2329:10: DATE_VK
					{
					match(input,DATE_VK,FOLLOW_DATE_VK_in_native_datatype_spec23232); 
					 typeBaseName = "date"; 
					}
					break;
				case 10 :
					// PLSQLPrinter.g:2330:10: SQL92_RESERVED_DATE
					{
					match(input,SQL92_RESERVED_DATE,FOLLOW_SQL92_RESERVED_DATE_in_native_datatype_spec23245); 
					 typeBaseName = "date"; 
					}
					break;
				case 11 :
					// PLSQLPrinter.g:2331:10: DAY_VK
					{
					match(input,DAY_VK,FOLLOW_DAY_VK_in_native_datatype_spec23258); 
					}
					break;
				case 12 :
					// PLSQLPrinter.g:2332:10: DECIMAL_VK
					{
					match(input,DECIMAL_VK,FOLLOW_DECIMAL_VK_in_native_datatype_spec23269); 
					 typeBaseName = "decimal"; 
					}
					break;
				case 13 :
					// PLSQLPrinter.g:2333:10: DEC_VK
					{
					match(input,DEC_VK,FOLLOW_DEC_VK_in_native_datatype_spec23283); 
					 typeBaseName = "dec"; 
					}
					break;
				case 14 :
					// PLSQLPrinter.g:2334:10: DOUBLE_VK
					{
					match(input,DOUBLE_VK,FOLLOW_DOUBLE_VK_in_native_datatype_spec23296); 
					 typeBaseName = "double"; 
					}
					break;
				case 15 :
					// PLSQLPrinter.g:2335:10: DOUBLE_VK PRECISION_VK
					{
					match(input,DOUBLE_VK,FOLLOW_DOUBLE_VK_in_native_datatype_spec23309); 
					match(input,PRECISION_VK,FOLLOW_PRECISION_VK_in_native_datatype_spec23311); 
					 typeBaseName = "double precision"; 
					}
					break;
				case 16 :
					// PLSQLPrinter.g:2336:10: DSINTERVAL_UNCONSTRAINED_VK
					{
					match(input,DSINTERVAL_UNCONSTRAINED_VK,FOLLOW_DSINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec23324); 
					}
					break;
				case 17 :
					// PLSQLPrinter.g:2337:10: FLOAT_VK
					{
					match(input,FLOAT_VK,FOLLOW_FLOAT_VK_in_native_datatype_spec23335); 
					 typeBaseName = "float"; 
					}
					break;
				case 18 :
					// PLSQLPrinter.g:2338:10: HOUR_VK
					{
					match(input,HOUR_VK,FOLLOW_HOUR_VK_in_native_datatype_spec23348); 
					}
					break;
				case 19 :
					// PLSQLPrinter.g:2339:10: INTEGER_VK
					{
					match(input,INTEGER_VK,FOLLOW_INTEGER_VK_in_native_datatype_spec23359); 
					 typeBaseName = "integer"; 
					}
					break;
				case 20 :
					// PLSQLPrinter.g:2340:10: INT_VK
					{
					match(input,INT_VK,FOLLOW_INT_VK_in_native_datatype_spec23372); 
					 typeBaseName = "int"; 
					}
					break;
				case 21 :
					// PLSQLPrinter.g:2341:10: LONG_VK
					{
					match(input,LONG_VK,FOLLOW_LONG_VK_in_native_datatype_spec23385); 
					 typeBaseName = "long"; 
					}
					break;
				case 22 :
					// PLSQLPrinter.g:2342:10: LONG_VK RAW_VK
					{
					match(input,LONG_VK,FOLLOW_LONG_VK_in_native_datatype_spec23398); 
					match(input,RAW_VK,FOLLOW_RAW_VK_in_native_datatype_spec23400); 
					 typeBaseName = "long raw"; 
					}
					break;
				case 23 :
					// PLSQLPrinter.g:2343:10: MINUTE_VK
					{
					match(input,MINUTE_VK,FOLLOW_MINUTE_VK_in_native_datatype_spec23413); 
					}
					break;
				case 24 :
					// PLSQLPrinter.g:2344:10: MLSLABEL_VK
					{
					match(input,MLSLABEL_VK,FOLLOW_MLSLABEL_VK_in_native_datatype_spec23424); 
					}
					break;
				case 25 :
					// PLSQLPrinter.g:2345:10: MONTH_VK
					{
					match(input,MONTH_VK,FOLLOW_MONTH_VK_in_native_datatype_spec23435); 
					}
					break;
				case 26 :
					// PLSQLPrinter.g:2346:10: NATURALN_VK
					{
					match(input,NATURALN_VK,FOLLOW_NATURALN_VK_in_native_datatype_spec23446); 
					}
					break;
				case 27 :
					// PLSQLPrinter.g:2347:10: NATURAL_VK
					{
					match(input,NATURAL_VK,FOLLOW_NATURAL_VK_in_native_datatype_spec23457); 
					}
					break;
				case 28 :
					// PLSQLPrinter.g:2348:10: NCHAR_VK
					{
					match(input,NCHAR_VK,FOLLOW_NCHAR_VK_in_native_datatype_spec23468); 
					 typeBaseName = "nchar"; 
					}
					break;
				case 29 :
					// PLSQLPrinter.g:2349:10: NCLOB_VK
					{
					match(input,NCLOB_VK,FOLLOW_NCLOB_VK_in_native_datatype_spec23481); 
					 typeBaseName = "nclob"; 
					}
					break;
				case 30 :
					// PLSQLPrinter.g:2350:10: NUMBER_VK
					{
					match(input,NUMBER_VK,FOLLOW_NUMBER_VK_in_native_datatype_spec23494); 
					 typeBaseName = "number"; 
					}
					break;
				case 31 :
					// PLSQLPrinter.g:2351:10: NUMERIC_VK
					{
					match(input,NUMERIC_VK,FOLLOW_NUMERIC_VK_in_native_datatype_spec23507); 
					 typeBaseName = "numeric"; 
					}
					break;
				case 32 :
					// PLSQLPrinter.g:2352:10: NVARCHAR2_VK
					{
					match(input,NVARCHAR2_VK,FOLLOW_NVARCHAR2_VK_in_native_datatype_spec23520); 
					 typeBaseName = "nvarchar2"; 
					}
					break;
				case 33 :
					// PLSQLPrinter.g:2353:10: PLS_INTEGER_VK
					{
					match(input,PLS_INTEGER_VK,FOLLOW_PLS_INTEGER_VK_in_native_datatype_spec23533); 
					 typeBaseName = "pls_integer"; 
					}
					break;
				case 34 :
					// PLSQLPrinter.g:2354:10: POSITIVEN_VK
					{
					match(input,POSITIVEN_VK,FOLLOW_POSITIVEN_VK_in_native_datatype_spec23546); 
					}
					break;
				case 35 :
					// PLSQLPrinter.g:2355:10: POSITIVE_VK
					{
					match(input,POSITIVE_VK,FOLLOW_POSITIVE_VK_in_native_datatype_spec23557); 
					}
					break;
				case 36 :
					// PLSQLPrinter.g:2356:10: RAW_VK
					{
					match(input,RAW_VK,FOLLOW_RAW_VK_in_native_datatype_spec23568); 
					 typeBaseName = "raw"; 
					}
					break;
				case 37 :
					// PLSQLPrinter.g:2357:10: REAL_VK
					{
					match(input,REAL_VK,FOLLOW_REAL_VK_in_native_datatype_spec23581); 
					}
					break;
				case 38 :
					// PLSQLPrinter.g:2358:10: ROWID_VK
					{
					match(input,ROWID_VK,FOLLOW_ROWID_VK_in_native_datatype_spec23592); 
					 typeBaseName = "rowid"; 
					}
					break;
				case 39 :
					// PLSQLPrinter.g:2359:10: SECOND_VK
					{
					match(input,SECOND_VK,FOLLOW_SECOND_VK_in_native_datatype_spec23605); 
					}
					break;
				case 40 :
					// PLSQLPrinter.g:2360:10: SIGNTYPE_VK
					{
					match(input,SIGNTYPE_VK,FOLLOW_SIGNTYPE_VK_in_native_datatype_spec23616); 
					}
					break;
				case 41 :
					// PLSQLPrinter.g:2361:10: SIMPLE_INTEGER_VK
					{
					match(input,SIMPLE_INTEGER_VK,FOLLOW_SIMPLE_INTEGER_VK_in_native_datatype_spec23627); 
					}
					break;
				case 42 :
					// PLSQLPrinter.g:2362:10: SMALLINT_VK
					{
					match(input,SMALLINT_VK,FOLLOW_SMALLINT_VK_in_native_datatype_spec23638); 
					 typeBaseName = "smallint"; 
					}
					break;
				case 43 :
					// PLSQLPrinter.g:2363:10: STRING_VK
					{
					match(input,STRING_VK,FOLLOW_STRING_VK_in_native_datatype_spec23651); 
					}
					break;
				case 44 :
					// PLSQLPrinter.g:2364:10: TIMESTAMP_LTZ_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_LTZ_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_LTZ_UNCONSTRAINED_VK_in_native_datatype_spec23662); 
					}
					break;
				case 45 :
					// PLSQLPrinter.g:2365:10: TIMESTAMP_TZ_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_TZ_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_TZ_UNCONSTRAINED_VK_in_native_datatype_spec23673); 
					}
					break;
				case 46 :
					// PLSQLPrinter.g:2366:10: TIMESTAMP_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_UNCONSTRAINED_VK_in_native_datatype_spec23684); 
					}
					break;
				case 47 :
					// PLSQLPrinter.g:2367:10: TIMESTAMP_VK
					{
					match(input,TIMESTAMP_VK,FOLLOW_TIMESTAMP_VK_in_native_datatype_spec23695); 
					 typeBaseName = "timestamp"; 
					}
					break;
				case 48 :
					// PLSQLPrinter.g:2368:10: TIMEZONE_ABBR_VK
					{
					match(input,TIMEZONE_ABBR_VK,FOLLOW_TIMEZONE_ABBR_VK_in_native_datatype_spec23708); 
					}
					break;
				case 49 :
					// PLSQLPrinter.g:2369:10: TIMEZONE_HOUR_VK
					{
					match(input,TIMEZONE_HOUR_VK,FOLLOW_TIMEZONE_HOUR_VK_in_native_datatype_spec23719); 
					}
					break;
				case 50 :
					// PLSQLPrinter.g:2370:10: TIMEZONE_MINUTE_VK
					{
					match(input,TIMEZONE_MINUTE_VK,FOLLOW_TIMEZONE_MINUTE_VK_in_native_datatype_spec23730); 
					}
					break;
				case 51 :
					// PLSQLPrinter.g:2371:10: TIMEZONE_REGION_VK
					{
					match(input,TIMEZONE_REGION_VK,FOLLOW_TIMEZONE_REGION_VK_in_native_datatype_spec23741); 
					}
					break;
				case 52 :
					// PLSQLPrinter.g:2372:10: UROWID_VK
					{
					match(input,UROWID_VK,FOLLOW_UROWID_VK_in_native_datatype_spec23752); 
					 typeBaseName = "urowid"; 
					}
					break;
				case 53 :
					// PLSQLPrinter.g:2373:10: VARCHAR2_VK
					{
					match(input,VARCHAR2_VK,FOLLOW_VARCHAR2_VK_in_native_datatype_spec23765); 
					 typeBaseName = "varchar2"; 
					}
					break;
				case 54 :
					// PLSQLPrinter.g:2374:10: VARCHAR_VK
					{
					match(input,VARCHAR_VK,FOLLOW_VARCHAR_VK_in_native_datatype_spec23778); 
					 typeBaseName = "varchar"; 
					}
					break;
				case 55 :
					// PLSQLPrinter.g:2375:10: YEAR_VK
					{
					match(input,YEAR_VK,FOLLOW_YEAR_VK_in_native_datatype_spec23791); 
					}
					break;
				case 56 :
					// PLSQLPrinter.g:2376:10: YMINTERVAL_UNCONSTRAINED_VK
					{
					match(input,YMINTERVAL_UNCONSTRAINED_VK,FOLLOW_YMINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec23802); 
					}
					break;

			}

			// PLSQLPrinter.g:2377:9: (prec= type_precision )?
			int alt577=2;
			int LA577_0 = input.LA(1);
			if ( (LA577_0==PRECISION) ) {
				alt577=1;
			}
			switch (alt577) {
				case 1 :
					// PLSQLPrinter.g:2377:9: prec= type_precision
					{
					pushFollow(FOLLOW_type_precision_in_native_datatype_spec23811);
					prec=type_precision();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2378:5: (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )?
			int alt579=2;
			int LA579_0 = input.LA(1);
			if ( (LA579_0==TIME_VK) ) {
				alt579=1;
			}
			switch (alt579) {
				case 1 :
					// PLSQLPrinter.g:2378:6: is_tz= TIME_VK (is_tz_local= LOCAL_VK )?
					{
					is_tz=(CommonTree)match(input,TIME_VK,FOLLOW_TIME_VK_in_native_datatype_spec23821); 
					// PLSQLPrinter.g:2378:31: (is_tz_local= LOCAL_VK )?
					int alt578=2;
					int LA578_0 = input.LA(1);
					if ( (LA578_0==LOCAL_VK) ) {
						alt578=1;
					}
					switch (alt578) {
						case 1 :
							// PLSQLPrinter.g:2378:31: is_tz_local= LOCAL_VK
							{
							is_tz_local=(CommonTree)match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_native_datatype_spec23825); 
							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			 if (typeBaseName == null) { typeBaseName = "Unsupported datatype"; } 
			// TEMPLATE REWRITE
			// 2381:5: -> base_type_spec(baseName=typeBaseNameprecision=$prec.stis_with_time_zone=$is_tz != nullis_time_zone_local=$is_tz_local != null)
			{
				retval.st = templateLib.getInstanceOf("base_type_spec",new STAttrMap().put("baseName", typeBaseName).put("precision", (prec!=null?((StringTemplate)prec.getTemplate()):null)).put("is_with_time_zone", is_tz != null).put("is_time_zone_local", is_tz_local != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "native_datatype_spec"


	public static class general_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_element"
	// PLSQLPrinter.g:2387:1: general_element : ^( CASCATED_ELEMENT ( general_element_id | function_argument )+ ) -> general_element(parts=parts);
	public final PLSQLPrinter.general_element_return general_element() throws RecognitionException {
		PLSQLPrinter.general_element_return retval = new PLSQLPrinter.general_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope general_element_id221 =null;
		TreeRuleReturnScope function_argument222 =null;


		    List<StringTemplate> parts = new ArrayList<StringTemplate>();

		try {
			// PLSQLPrinter.g:2391:5: ( ^( CASCATED_ELEMENT ( general_element_id | function_argument )+ ) -> general_element(parts=parts))
			// PLSQLPrinter.g:2391:10: ^( CASCATED_ELEMENT ( general_element_id | function_argument )+ )
			{
			match(input,CASCATED_ELEMENT,FOLLOW_CASCATED_ELEMENT_in_general_element23900); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2392:13: ( general_element_id | function_argument )+
			int cnt580=0;
			loop580:
			while (true) {
				int alt580=3;
				int LA580_0 = input.LA(1);
				if ( (LA580_0==ANY_ELEMENT) ) {
					alt580=1;
				}
				else if ( (LA580_0==ARGUMENTS) ) {
					alt580=2;
				}

				switch (alt580) {
				case 1 :
					// PLSQLPrinter.g:2393:15: general_element_id
					{
					pushFollow(FOLLOW_general_element_id_in_general_element23930);
					general_element_id221=general_element_id();
					state._fsp--;


					                if (parts.size() > 0) {
					                   parts.add(templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", ".")));
					                }
					                parts.add((general_element_id221!=null?((StringTemplate)general_element_id221.getTemplate()):null));
					              
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2399:17: function_argument
					{
					pushFollow(FOLLOW_function_argument_in_general_element23950);
					function_argument222=function_argument();
					state._fsp--;

					 parts.add((function_argument222!=null?((StringTemplate)function_argument222.getTemplate()):null)); 
					}
					break;

				default :
					if ( cnt580 >= 1 ) break loop580;
					EarlyExitException eee = new EarlyExitException(580, input);
					throw eee;
				}
				cnt580++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2402:5: -> general_element(parts=parts)
			{
				retval.st = templateLib.getInstanceOf("general_element",new STAttrMap().put("parts", parts));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_element"


	public static class general_element_id_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_element_id"
	// PLSQLPrinter.g:2405:1: general_element_id : ^( ANY_ELEMENT ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.general_element_id_return general_element_id() throws RecognitionException {
		PLSQLPrinter.general_element_id_return retval = new PLSQLPrinter.general_element_id_return();
		retval.start = input.LT(1);

		CommonTree ID223=null;

		try {
			// PLSQLPrinter.g:2406:5: ( ^( ANY_ELEMENT ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2406:7: ^( ANY_ELEMENT ID )
			{
			match(input,ANY_ELEMENT,FOLLOW_ANY_ELEMENT_in_general_element_id24013); 
			match(input, Token.DOWN, null); 
			ID223=(CommonTree)match(input,ID,FOLLOW_ID_in_general_element_id24015); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2406:25: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID223!=null?ID223.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_element_id"


	public static class constant_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constant"
	// PLSQLPrinter.g:2413:1: constant : (v1= UNSIGNED_INTEGER -> string_literal(val=$v1.text)| ^( MINUS_SIGN v2= UNSIGNED_INTEGER ) -> string_literal(val=\"-\" + $v2.text)| EXACT_NUM_LIT -> string_literal(val=$EXACT_NUM_LIT.text)| APPROXIMATE_NUM_LIT -> string_literal(val=$APPROXIMATE_NUM_LIT.text)| CHAR_STRING -> string_literal(val=$CHAR_STRING.text)| SQL92_RESERVED_NULL -> string_literal(val=\"null\")| SQL92_RESERVED_TRUE -> string_literal(val=\"true\")| SQL92_RESERVED_FALSE -> string_literal(val=\"false\")| DBTIMEZONE_VK -> string_literal(val=\"dbtimezone\")| SESSIONTIMEZONE_VK -> string_literal(val=\"sessiontimezone\")| MINVALUE_VK -> string_literal(val=\"minvalue\")| MAXVALUE_VK -> string_literal(val=\"maxvalue\")| SQL92_RESERVED_DEFAULT -> string_literal(val=\"default\"));
	public final PLSQLPrinter.constant_return constant() throws RecognitionException {
		PLSQLPrinter.constant_return retval = new PLSQLPrinter.constant_return();
		retval.start = input.LT(1);

		CommonTree v1=null;
		CommonTree v2=null;
		CommonTree EXACT_NUM_LIT224=null;
		CommonTree APPROXIMATE_NUM_LIT225=null;
		CommonTree CHAR_STRING226=null;

		try {
			// PLSQLPrinter.g:2414:5: (v1= UNSIGNED_INTEGER -> string_literal(val=$v1.text)| ^( MINUS_SIGN v2= UNSIGNED_INTEGER ) -> string_literal(val=\"-\" + $v2.text)| EXACT_NUM_LIT -> string_literal(val=$EXACT_NUM_LIT.text)| APPROXIMATE_NUM_LIT -> string_literal(val=$APPROXIMATE_NUM_LIT.text)| CHAR_STRING -> string_literal(val=$CHAR_STRING.text)| SQL92_RESERVED_NULL -> string_literal(val=\"null\")| SQL92_RESERVED_TRUE -> string_literal(val=\"true\")| SQL92_RESERVED_FALSE -> string_literal(val=\"false\")| DBTIMEZONE_VK -> string_literal(val=\"dbtimezone\")| SESSIONTIMEZONE_VK -> string_literal(val=\"sessiontimezone\")| MINVALUE_VK -> string_literal(val=\"minvalue\")| MAXVALUE_VK -> string_literal(val=\"maxvalue\")| SQL92_RESERVED_DEFAULT -> string_literal(val=\"default\"))
			int alt581=13;
			switch ( input.LA(1) ) {
			case UNSIGNED_INTEGER:
				{
				alt581=1;
				}
				break;
			case MINUS_SIGN:
				{
				alt581=2;
				}
				break;
			case EXACT_NUM_LIT:
				{
				alt581=3;
				}
				break;
			case APPROXIMATE_NUM_LIT:
				{
				alt581=4;
				}
				break;
			case CHAR_STRING:
				{
				alt581=5;
				}
				break;
			case SQL92_RESERVED_NULL:
				{
				alt581=6;
				}
				break;
			case SQL92_RESERVED_TRUE:
				{
				alt581=7;
				}
				break;
			case SQL92_RESERVED_FALSE:
				{
				alt581=8;
				}
				break;
			case DBTIMEZONE_VK:
				{
				alt581=9;
				}
				break;
			case SESSIONTIMEZONE_VK:
				{
				alt581=10;
				}
				break;
			case MINVALUE_VK:
				{
				alt581=11;
				}
				break;
			case MAXVALUE_VK:
				{
				alt581=12;
				}
				break;
			case SQL92_RESERVED_DEFAULT:
				{
				alt581=13;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 581, 0, input);
				throw nvae;
			}
			switch (alt581) {
				case 1 :
					// PLSQLPrinter.g:2414:10: v1= UNSIGNED_INTEGER
					{
					v1=(CommonTree)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_constant24051); 
					// TEMPLATE REWRITE
					// 2414:30: -> string_literal(val=$v1.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (v1!=null?v1.getText():null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2415:10: ^( MINUS_SIGN v2= UNSIGNED_INTEGER )
					{
					match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_constant24072); 
					match(input, Token.DOWN, null); 
					v2=(CommonTree)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_constant24076); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2415:44: -> string_literal(val=\"-\" + $v2.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "-" + (v2!=null?v2.getText():null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:2416:10: EXACT_NUM_LIT
					{
					EXACT_NUM_LIT224=(CommonTree)match(input,EXACT_NUM_LIT,FOLLOW_EXACT_NUM_LIT_in_constant24097); 
					// TEMPLATE REWRITE
					// 2416:24: -> string_literal(val=$EXACT_NUM_LIT.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (EXACT_NUM_LIT224!=null?EXACT_NUM_LIT224.getText():null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:2417:10: APPROXIMATE_NUM_LIT
					{
					APPROXIMATE_NUM_LIT225=(CommonTree)match(input,APPROXIMATE_NUM_LIT,FOLLOW_APPROXIMATE_NUM_LIT_in_constant24117); 
					// TEMPLATE REWRITE
					// 2417:30: -> string_literal(val=$APPROXIMATE_NUM_LIT.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (APPROXIMATE_NUM_LIT225!=null?APPROXIMATE_NUM_LIT225.getText():null)));
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:2418:10: CHAR_STRING
					{
					CHAR_STRING226=(CommonTree)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_constant24137); 
					// TEMPLATE REWRITE
					// 2418:22: -> string_literal(val=$CHAR_STRING.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (CHAR_STRING226!=null?CHAR_STRING226.getText():null)));
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:2419:10: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_constant24157); 
					// TEMPLATE REWRITE
					// 2419:30: -> string_literal(val=\"null\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "null"));
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:2420:10: SQL92_RESERVED_TRUE
					{
					match(input,SQL92_RESERVED_TRUE,FOLLOW_SQL92_RESERVED_TRUE_in_constant24177); 
					// TEMPLATE REWRITE
					// 2420:30: -> string_literal(val=\"true\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "true"));
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:2421:10: SQL92_RESERVED_FALSE
					{
					match(input,SQL92_RESERVED_FALSE,FOLLOW_SQL92_RESERVED_FALSE_in_constant24197); 
					// TEMPLATE REWRITE
					// 2421:31: -> string_literal(val=\"false\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "false"));
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:2422:10: DBTIMEZONE_VK
					{
					match(input,DBTIMEZONE_VK,FOLLOW_DBTIMEZONE_VK_in_constant24217); 
					// TEMPLATE REWRITE
					// 2422:25: -> string_literal(val=\"dbtimezone\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "dbtimezone"));
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:2423:10: SESSIONTIMEZONE_VK
					{
					match(input,SESSIONTIMEZONE_VK,FOLLOW_SESSIONTIMEZONE_VK_in_constant24238); 
					// TEMPLATE REWRITE
					// 2423:29: -> string_literal(val=\"sessiontimezone\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "sessiontimezone"));
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:2424:10: MINVALUE_VK
					{
					match(input,MINVALUE_VK,FOLLOW_MINVALUE_VK_in_constant24258); 
					// TEMPLATE REWRITE
					// 2424:22: -> string_literal(val=\"minvalue\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "minvalue"));
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:2425:10: MAXVALUE_VK
					{
					match(input,MAXVALUE_VK,FOLLOW_MAXVALUE_VK_in_constant24278); 
					// TEMPLATE REWRITE
					// 2425:22: -> string_literal(val=\"maxvalue\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "maxvalue"));
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:2426:10: SQL92_RESERVED_DEFAULT
					{
					match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_constant24298); 
					// TEMPLATE REWRITE
					// 2426:33: -> string_literal(val=\"default\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "default"));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constant"


	public static class id_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "id"
	// PLSQLPrinter.g:2431:1: id : ( char_set_name )? ID -> string_literal(val=$ID.text);
	public final PLSQLPrinter.id_return id() throws RecognitionException {
		PLSQLPrinter.id_return retval = new PLSQLPrinter.id_return();
		retval.start = input.LT(1);

		CommonTree ID227=null;

		try {
			// PLSQLPrinter.g:2432:5: ( ( char_set_name )? ID -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2432:10: ( char_set_name )? ID
			{
			// PLSQLPrinter.g:2432:10: ( char_set_name )?
			int alt582=2;
			int LA582_0 = input.LA(1);
			if ( (LA582_0==CHAR_SET_NAME) ) {
				alt582=1;
			}
			switch (alt582) {
				case 1 :
					// PLSQLPrinter.g:2432:10: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_id24329);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID227=(CommonTree)match(input,ID,FOLLOW_ID_in_id24332); 
			// TEMPLATE REWRITE
			// 2433:5: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID227!=null?ID227.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "id"

	// Delegated rules


	protected DFA180 dfa180 = new DFA180(this);
	protected DFA314 dfa314 = new DFA314(this);
	static final String DFA180_eotS =
		"\11\uffff";
	static final String DFA180_eofS =
		"\11\uffff";
	static final String DFA180_minS =
		"\1\u0251\1\2\1\u0304\1\2\1\u018e\2\3\2\uffff";
	static final String DFA180_maxS =
		"\1\u0251\1\2\1\u0304\1\2\2\u018e\1\u0256\2\uffff";
	static final String DFA180_acceptS =
		"\7\uffff\1\1\1\2";
	static final String DFA180_specialS =
		"\11\uffff}>";
	static final String[] DFA180_transitionS = {
			"\1\1",
			"\1\2",
			"\1\3",
			"\1\4",
			"\1\5",
			"\1\6\u018a\uffff\1\5",
			"\1\7\u016a\uffff\1\7\u00e7\uffff\1\10",
			"",
			""
	};

	static final short[] DFA180_eot = DFA.unpackEncodedString(DFA180_eotS);
	static final short[] DFA180_eof = DFA.unpackEncodedString(DFA180_eofS);
	static final char[] DFA180_min = DFA.unpackEncodedStringToUnsignedChars(DFA180_minS);
	static final char[] DFA180_max = DFA.unpackEncodedStringToUnsignedChars(DFA180_maxS);
	static final short[] DFA180_accept = DFA.unpackEncodedString(DFA180_acceptS);
	static final short[] DFA180_special = DFA.unpackEncodedString(DFA180_specialS);
	static final short[][] DFA180_transition;

	static {
		int numStates = DFA180_transitionS.length;
		DFA180_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA180_transition[i] = DFA.unpackEncodedString(DFA180_transitionS[i]);
		}
	}

	protected class DFA180 extends DFA {

		public DFA180(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 180;
			this.eot = DFA180_eot;
			this.eof = DFA180_eof;
			this.min = DFA180_min;
			this.max = DFA180_max;
			this.accept = DFA180_accept;
			this.special = DFA180_special;
			this.transition = DFA180_transition;
		}
		@Override
		public String getDescription() {
			return "823:1: record_type_dec : ( record_type_dec_record -> { $record_type_dec_record.st }| record_type_dec_refcursor -> { $record_type_dec_refcursor.st });";
		}
	}

	static final String DFA314_eotS =
		"\16\uffff";
	static final String DFA314_eofS =
		"\16\uffff";
	static final String DFA314_minS =
		"\1\u00ca\1\2\1\uffff\1\u0103\1\2\1\u00f6\1\2\1\3\1\u018e\1\u0103\1\3\2"+
		"\uffff\1\u018e";
	static final String DFA314_maxS =
		"\1\u0314\1\2\1\uffff\1\u0103\1\2\1\u018e\1\2\2\u018e\1\u02e8\1\u018e\2"+
		"\uffff\1\u018e";
	static final String DFA314_acceptS =
		"\2\uffff\1\3\10\uffff\1\1\1\2\1\uffff";
	static final String DFA314_specialS =
		"\16\uffff}>";
	static final String[] DFA314_transitionS = {
			"\1\1\u0249\uffff\1\2",
			"\1\3",
			"",
			"\1\4",
			"\1\5",
			"\1\6\u0097\uffff\1\7",
			"\1\10",
			"\1\11\u018a\uffff\1\7",
			"\1\12",
			"\1\14\144\uffff\1\13\141\uffff\1\13\u011d\uffff\1\14",
			"\1\15\u018a\uffff\1\12",
			"",
			"",
			"\1\7"
	};

	static final short[] DFA314_eot = DFA.unpackEncodedString(DFA314_eotS);
	static final short[] DFA314_eof = DFA.unpackEncodedString(DFA314_eofS);
	static final char[] DFA314_min = DFA.unpackEncodedStringToUnsignedChars(DFA314_minS);
	static final char[] DFA314_max = DFA.unpackEncodedStringToUnsignedChars(DFA314_maxS);
	static final short[] DFA314_accept = DFA.unpackEncodedString(DFA314_acceptS);
	static final short[] DFA314_special = DFA.unpackEncodedString(DFA314_specialS);
	static final short[][] DFA314_transition;

	static {
		int numStates = DFA314_transitionS.length;
		DFA314_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA314_transition[i] = DFA.unpackEncodedString(DFA314_transitionS[i]);
		}
	}

	protected class DFA314 extends DFA {

		public DFA314(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 314;
			this.eot = DFA314_eot;
			this.eof = DFA314_eof;
			this.min = DFA314_min;
			this.max = DFA314_max;
			this.accept = DFA314_accept;
			this.special = DFA314_special;
			this.transition = DFA314_transition;
		}
		@Override
		public String getDescription() {
			return "1420:1: update_set_elements : ( ^( ASSIGN column_name expression ) -> template( \"not implemented: update_set_elements\"| ^( ASSIGN ( column_name )+ subquery ) -> template( \"not implemented: update_set_elements\"| ^( VALUE_VK ( char_set_name )? ID expression ) -> template( \"not implemented: update_set_elements\");";
		}
	}

	public static final BitSet FOLLOW_COMPILATION_UNIT_in_compilation_unit69 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unit_statement_in_compilation_unit73 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x9000000000000000L,0x000000000000000FL,0x0000001FE0000000L,0x00000000000FC000L});
	public static final BitSet FOLLOW_SQL_SCRIPT_in_sql_script112 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unit_statement_in_sql_script116 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x9000000000000000L,0x000000000000000FL,0x0000001FE0000000L,0x00000000000FC000L});
	public static final BitSet FOLLOW_SET_SERVEROUTPUT_in_serveroutput_declaration155 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_serveroutput_declaration158 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OFF_VK_in_serveroutput_declaration160 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_alter_function_in_unit_statement196 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_package_in_unit_statement211 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_procedure_in_unit_statement226 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_sequence_in_unit_statement241 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_trigger_in_unit_statement256 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_type_in_unit_statement271 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_unit_statement286 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_unit_statement301 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_package_in_unit_statement316 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_sequence_in_unit_statement331 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_trigger_in_unit_statement346 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_unit_statement361 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_function_in_unit_statement376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_package_in_unit_statement391 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_procedure_in_unit_statement406 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_sequence_in_unit_statement421 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_trigger_in_unit_statement436 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_type_in_unit_statement451 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_FUNCTION_in_drop_function480 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_name_in_drop_function482 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_FUNCTION_in_alter_function518 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_name_in_alter_function520 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_function522 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_function525 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_function528 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_FUNCTION_in_create_function_body565 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_function_body567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_FUNCTION_NAME_in_create_function_body571 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_create_function_body575 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_type_spec_in_create_function_body581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_create_function_body584 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_create_function_body588 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_function_body606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000202000080000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000010001000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_parallel_enable_clause_in_create_function_body611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000202000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000010001000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_result_cache_clause_in_create_function_body616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000202000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_DETERMINISTIC_VK_in_create_function_body619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000202000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_PIPELINED_VK_in_create_function_body622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000202000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_USING_MODE_in_create_function_body643 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_AGGREGATE_VK_in_create_function_body645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_implementation_type_name_in_create_function_body648 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CALL_MODE_in_create_function_body683 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_create_function_body685 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_create_function_body720 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_create_function_body722 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARALLEL_ENABLE_VK_in_parallel_enable_clause888 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_partition_by_clause_in_parallel_enable_clause890 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARTITION_VK_in_partition_by_clause927 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_partition_by_clause929 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_partition_by_clause949 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_HASH_VK_in_partition_by_clause969 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_partition_by_clause972 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_partition_by_clause974 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_RANGE_VK_in_partition_by_clause997 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_partition_by_clause1000 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_partition_by_clause1002 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_streaming_clause_in_partition_by_clause1034 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RESULT_CACHE_VK_in_result_cache_clause1080 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_relies_on_part_in_result_cache_clause1082 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RELIES_ON_VK_in_relies_on_part1119 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_relies_on_part1121 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_STREAMING_CLAUSE_in_streaming_clause1158 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_streaming_clause1161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CLUSTER_VK_in_streaming_clause1163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_streaming_clause1166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_streaming_clause1169 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_streaming_clause1171 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_PACKAGE_in_drop_package1214 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_package_name_in_drop_package1216 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_BODY_VK_in_drop_package1218 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_PACKAGE_in_alter_package1255 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_package_name_in_alter_package1257 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0040000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000100000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_package1259 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000100000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_package1262 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PACKAGE_VK_in_alter_package1283 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_BODY_VK_in_alter_package1285 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SPECIFICATION_VK_in_alter_package1287 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_package1291 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_PACKAGE_SPEC_in_create_package1328 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_package1330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_package_name_in_create_package1333 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000040000000000L,0x0000000100000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000060102L,0x0000000000000000L,0x0003020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_package1335 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000100000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000060102L,0x0000000000000000L,0x0003020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_package_obj_spec_in_create_package1340 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000100000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000060102L,0x0000000000000000L,0x0003020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_CREATE_PACKAGE_BODY_in_create_package1408 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_package1410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_package_name_in_create_package1413 = new BitSet(new long[]{0x0000000000000008L,0x1000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041920000000L,0x0000000100000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000060100L,0x0000000000000000L,0x0003020100000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_package_obj_body_in_create_package1417 = new BitSet(new long[]{0x0000000000000008L,0x1000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041920000000L,0x0000000100000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000060100L,0x0000000000000000L,0x0003020100000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_seq_of_statements_in_create_package1420 = new BitSet(new long[]{0x0000000000000008L,0x1000000000000000L});
	public static final BitSet FOLLOW_exception_clause_in_create_package1423 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_variable_declaration_in_package_obj_spec1516 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_package_obj_spec1532 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_package_obj_spec1548 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_package_obj_spec1564 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_package_obj_spec1580 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_package_obj_spec1596 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedure_spec_in_package_obj_spec1612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_spec_in_package_obj_spec1628 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pragma_declaration_in_package_obj_spec1644 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_SPEC_in_procedure_spec1670 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_name_in_procedure_spec1672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_procedure_spec1675 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_procedure_spec1679 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_CALL_MODE_in_procedure_spec1697 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_procedure_spec1699 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_SPEC_in_function_spec1749 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_name_in_function_spec1751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_function_spec1753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_function_spec1756 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_function_spec1760 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_PIPELINED_VK_in_function_spec1776 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RESULT_CACHE_VK_in_function_spec1779 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_DETERMINISTIC_VK_in_function_spec1782 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_procedure_spec_in_package_obj_body1877 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_spec_in_package_obj_body1893 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variable_declaration_in_package_obj_body1909 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_package_obj_body1925 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_package_obj_body1941 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_package_obj_body1957 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_package_obj_body1973 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_package_obj_body1989 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_package_obj_body2005 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_package_obj_body2021 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_package_obj_body2037 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_PROCEDURE_in_drop_procedure2068 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_name_in_drop_procedure2070 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_PROCEDURE_in_alter_procedure2106 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_name_in_alter_procedure2108 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_procedure2110 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_procedure2113 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_procedure2116 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_PROCEDURE_in_create_procedure_body2153 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_procedure_body2155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_procedure_name_in_create_procedure_body2158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_create_procedure_body2161 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_create_procedure_body2165 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_procedure_body2169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000202000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_create_procedure_body_impl_in_create_procedure_body2183 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXTERNAL_VK_in_create_procedure_body_impl2272 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CALL_MODE_in_create_procedure_body_impl2294 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_create_procedure_body_impl2296 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_create_procedure_body_impl2331 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_create_procedure_body_impl2333 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_TRIGGER_in_drop_trigger2363 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_drop_trigger2365 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_TRIGGER_in_alter_trigger2401 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_alter_trigger2403 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000400L,0x0000000002000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000104000000L});
	public static final BitSet FOLLOW_ENABLE_VK_in_alter_trigger2424 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DISABLE_VK_in_alter_trigger2426 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RENAME_VK_in_alter_trigger2447 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_alter_trigger2449 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_trigger2469 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_trigger2472 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_trigger2475 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_TRIGGER_in_create_trigger2535 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_trigger2537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_trigger_name_in_create_trigger2540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000402000000000L,0x0000000000003000L,0x0020000002000040L,0x0000000000000000L,0x0400000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_simple_dml_trigger_in_create_trigger2556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000402000000000L,0x0000000000003000L,0x0020000002000040L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_compound_dml_trigger_in_create_trigger2559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000402000000000L,0x0000000000002000L,0x0020000002000040L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_non_dml_trigger_in_create_trigger2562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000402000000000L,0x0000000000002000L,0x0020000002000040L});
	public static final BitSet FOLLOW_trigger_follows_clause_in_create_trigger2577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000402000000000L,0x0000000000002000L,0x0000000002000040L});
	public static final BitSet FOLLOW_ENABLE_VK_in_create_trigger2581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000402000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_DISABLE_VK_in_create_trigger2583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000402000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_trigger_when_clause_in_create_trigger2587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000402000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_trigger_body_in_create_trigger2590 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOLLOWS_VK_in_trigger_follows_clause2626 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_trigger_follows_clause2628 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_trigger_when_clause2665 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_trigger_when_clause2667 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_DML_in_simple_dml_trigger2704 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BEFORE_VK_in_simple_dml_trigger2707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_AFTER_VK_in_simple_dml_trigger2709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_INSTEAD_VK_in_simple_dml_trigger2711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_FOR_EACH_ROW_in_simple_dml_trigger2714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_referencing_clause_in_simple_dml_trigger2717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_dml_event_clause_in_simple_dml_trigger2720 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPOUND_DML_in_compound_dml_trigger2756 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_referencing_clause_in_compound_dml_trigger2758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_dml_event_clause_in_compound_dml_trigger2761 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NON_DML_in_non_dml_trigger2797 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BEFORE_VK_in_non_dml_trigger2800 = new BitSet(new long[]{0x0000000000000000L,0x0201002000000000L,0x0000000000800008L,0x0000000000040810L,0x0031000000000020L,0x0020000000000080L,0x0000000000000000L,0x0008000000001800L,0x0000000000000000L,0x0008000004000000L,0x0000000000002040L,0x0000040080000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_AFTER_VK_in_non_dml_trigger2802 = new BitSet(new long[]{0x0000000000000000L,0x0201002000000000L,0x0000000000800008L,0x0000000000040810L,0x0031000000000020L,0x0020000000000080L,0x0000000000000000L,0x0008000000001800L,0x0000000000000000L,0x0008000004000000L,0x0000000000002040L,0x0000040080000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_non_dml_event_in_non_dml_trigger2805 = new BitSet(new long[]{0x0000000000000000L,0x0201002000000000L,0x0000000000800008L,0x0000000000040810L,0x0031000000000020L,0x0020000000000080L,0x0000000000000000L,0x0008000000001800L,0x0000000000000000L,0x000C000004000000L,0x0000000000002040L,0x0000040080000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_DATABASE_VK_in_non_dml_trigger2809 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_schema_name_in_non_dml_trigger2811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_SCHEMA_VK_in_non_dml_trigger2814 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPOUND_VK_in_trigger_body2851 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_trigger_body2853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0030000000000000L,0x0000000003000000L,0x0000041920000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060002L,0x0000000000000000L,0x0003020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_declare_spec_in_trigger_body2855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0030000000000000L,0x0000000003000000L,0x0000041920000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060002L,0x0000000000000000L,0x0003020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_timing_point_section_in_trigger_body2858 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0030000000000000L,0x0000000003000000L});
	public static final BitSet FOLLOW_CALL_VK_in_trigger_body2886 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_routine_name_in_trigger_body2888 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_function_argument_in_trigger_body2890 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_trigger_body2919 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_trigger_body2921 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BEFORE_STATEMENT_in_timing_point_section2957 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section2959 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BEFORE_EACH_ROW_in_timing_point_section2986 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section2988 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AFTER_STATEMENT_in_timing_point_section3015 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section3017 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AFTER_EACH_ROW_in_timing_point_section3044 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section3046 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALTER_in_non_dml_event3081 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANALYZE_VK_in_non_dml_event3106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASSOCIATE_VK_in_non_dml_event3131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_STATISTICS_VK_in_non_dml_event3133 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUDIT_VK_in_non_dml_event3158 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMENT_VK_in_non_dml_event3183 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_non_dml_event3208 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DISASSOCIATE_VK_in_non_dml_event3233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_STATISTICS_VK_in_non_dml_event3235 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DROP_in_non_dml_event3260 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GRANT_in_non_dml_event3285 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOAUDIT_VK_in_non_dml_event3310 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RENAME_VK_in_non_dml_event3335 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_REVOKE_in_non_dml_event3360 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUNCATE_VK_in_non_dml_event3385 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DDL_VK_in_non_dml_event3410 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STARTUP_VK_in_non_dml_event3435 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SHUTDOWN_VK_in_non_dml_event3460 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DB_ROLE_CHANGE_VK_in_non_dml_event3485 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOGON_VK_in_non_dml_event3510 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOGOFF_VK_in_non_dml_event3535 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SERVERERROR_VK_in_non_dml_event3560 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SUSPEND_VK_in_non_dml_event3585 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATABASE_VK_in_non_dml_event3610 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SCHEMA_VK_in_non_dml_event3635 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOLLOWS_VK_in_non_dml_event3660 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DML_EVENT_in_dml_event_clause3695 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_dml_event_element_in_dml_event_clause3697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_dml_event_clause3701 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_event_clause3703 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_dml_event_nested_clause_in_dml_event_clause3705 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DML_EVENT_ELEMENT_in_dml_event_element3745 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_dml_event_element3748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INSERT_in_dml_event_element3750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_dml_event_element3752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_dml_event_element3756 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_dml_event_element3758 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_NESTED_VK_in_dml_event_nested_clause3796 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_event_nested_clause3798 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCING_VK_in_referencing_clause3834 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_referencing_element_in_referencing_clause3836 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000020000800L});
	public static final BitSet FOLLOW_NEW_VK_in_referencing_element3874 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_OLD_VK_in_referencing_element3876 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PARENT_VK_in_referencing_element3878 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_referencing_element3881 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_TYPE_in_drop_type3922 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_drop_type3924 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_BODY_VK_in_drop_type3926 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_FORCE_VK_in_drop_type3929 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_VALIDATE_VK_in_drop_type3932 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_TYPE_in_alter_type3969 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_alter_type3971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2C00000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_REPLACE_VK_in_alter_type3992 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_OBJECT_MEMBERS_in_alter_type3995 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_element_spec_in_alter_type3997 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_alter_type4001 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_ATTRIBUTE_in_alter_type4023 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ADD_VK_in_alter_type4026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_MODIFY_VK_in_alter_type4028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DROP_in_alter_type4030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ATTRIBUTES_in_alter_type4034 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_attribute_definition_in_alter_type4036 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_ALTER_METHOD_in_alter_type4059 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alter_method_element_in_alter_type4061 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_alter_collection_clauses_in_alter_type4082 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_modifier_clause_in_alter_type4101 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_COMPILE_VK_in_alter_type4121 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SPECIFICATION_VK_in_alter_type4124 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_BODY_VK_in_alter_type4126 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_type4130 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_type4133 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_type4136 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_dependent_handling_clause_in_alter_type4167 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_METHOD_ELEMENT_in_alter_method_element4215 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ADD_VK_in_alter_method_element4218 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DROP_in_alter_method_element4220 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_map_order_function_spec_in_alter_method_element4223 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_subprogram_spec_in_alter_method_element4226 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ATTRIBUTE_in_attribute_definition4263 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_attribute_name_in_attribute_definition4265 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_attribute_definition4267 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_COLLECTION_in_alter_collection_clauses4304 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_TYPE_VK_in_alter_collection_clauses4325 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_alter_collection_clauses4327 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LIMIT_VK_in_alter_collection_clauses4348 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_alter_collection_clauses4350 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEPENDENT_HANDLING_in_dependent_handling_clause4411 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_INVALIDATE_VK_in_dependent_handling_clause4431 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CASCADE_VK_in_dependent_handling_clause4451 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CONVERT_VK_in_dependent_handling_clause4479 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_dependent_handling_clause4506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_INCLUDING_VK_in_dependent_handling_clause4509 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXCEPTIONS_VK_in_dependent_exceptions_part4609 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_FORCE_VK_in_dependent_exceptions_part4611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_tableview_name_in_dependent_exceptions_part4614 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CREATE_TYPE_BODY_in_create_type4652 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_type4654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_type_name_in_create_type4657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_TYPE_BODY_ELEMENTS_in_create_type4660 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_body_elements_in_create_type4662 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_CREATE_TYPE_SPEC_in_create_type4691 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_type4693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_type_name_in_create_type4696 = new BitSet(new long[]{0x0000000000008008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_CHAR_STRING_in_create_type4698 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_object_type_def_in_create_type4701 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OBJECT_TYPE_DEF_in_object_type_def4738 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_object_as_part_in_object_type_def4741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_object_under_part_in_object_type_def4743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_object_type_def4746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_sqlj_object_type_in_object_type_def4762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_modifier_clause_in_object_type_def4765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_OBJECT_MEMBERS_in_object_type_def4769 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_element_spec_in_object_type_def4771 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_OBJECT_AS_in_object_as_part4811 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_OBJECT_VK_in_object_as_part4814 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_varray_type_def_in_object_as_part4816 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_nested_table_type_def_in_object_as_part4818 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNDER_VK_in_object_under_part4855 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_object_under_part4857 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NESTED_TABLE_TYPE_DEF_in_nested_table_type_def4893 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_nested_table_type_def4895 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_nested_table_type_def4897 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_table_indexed_by_part_in_nested_table_type_def4900 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_JAVA_VK_in_sqlj_object_type4937 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_sqlj_object_type4939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_SQLDATA_VK_in_sqlj_object_type4942 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CUSTOMDATUM_VK_in_sqlj_object_type4944 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ORADATA_VK_in_sqlj_object_type4946 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_map_order_func_declaration_in_type_body_elements4982 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subprog_decl_in_type_in_type_body_elements5007 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MAP_VK_in_map_order_func_declaration5043 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_map_order_func_declaration5045 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_create_function_body_in_map_order_func_declaration5048 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MEMBER_VK_in_subprog_decl_in_type5085 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_STATIC_VK_in_subprog_decl_in_type5087 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_create_procedure_body_in_subprog_decl_in_type5107 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_create_function_body_in_subprog_decl_in_type5126 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_constructor_declaration_in_subprog_decl_in_type5145 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRUCTOR_VK_in_constructor_declaration5204 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_constructor_declaration5206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_FINAL_VK_in_constructor_declaration5208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_INSTANTIABLE_VK_in_constructor_declaration5211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_constructor_declaration5215 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_elements_parameter_in_constructor_declaration5217 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_CALL_MODE_in_constructor_declaration5240 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_constructor_declaration5242 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_constructor_declaration5263 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_constructor_declaration5265 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODIFIER_in_modifier_clause5329 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_modifier_clause5331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_INSTANTIABLE_VK_in_modifier_clause5335 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FINAL_VK_in_modifier_clause5337 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OVERRIDING_VK_in_modifier_clause5339 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXTERNAL_VK_in_sqlj_object_type_attr5376 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_sqlj_object_type_attr5378 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ELEMENT_SPEC_in_element_spec5414 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_element_spec_options_in_element_spec5416 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000040000L,0x0000800000000000L,0x0000000000000000L,0x0000000400240000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_modifier_clause_in_element_spec5419 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_pragma_clause_in_element_spec5422 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_subprogram_spec_in_element_spec_options5458 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constructor_spec_in_element_spec_options5483 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_map_order_function_spec_in_element_spec_options5508 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FIELD_SPEC_in_element_spec_options5534 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_element_spec_options5536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_element_spec_options5538 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_sqlj_object_type_attr_in_element_spec_options5540 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MEMBER_VK_in_subprogram_spec5578 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_STATIC_VK_in_subprogram_spec5580 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_spec_in_subprogram_spec5600 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_function_spec_in_subprogram_spec5619 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRUCTOR_SPEC_in_constructor_spec5678 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_constructor_spec5680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_FINAL_VK_in_constructor_spec5682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_INSTANTIABLE_VK_in_constructor_spec5685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_constructor_spec5689 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_elements_parameter_in_constructor_spec5691 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_constructor_call_mode_in_constructor_spec5695 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CALL_MODE_in_constructor_call_mode5732 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_constructor_call_mode5734 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MAP_VK_in_map_order_function_spec5771 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_map_order_function_spec5773 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_spec_in_map_order_function_spec5776 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRAGMA_VK_in_pragma_clause5812 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pragma_elements_in_pragma_clause5814 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_id_in_pragma_elements5850 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_elements5875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PARAMETER_in_type_elements_parameter5910 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_type_elements_parameter5912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_type_elements_parameter5914 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_SEQUENCE_in_drop_sequence5955 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_sequence_name_in_drop_sequence5957 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_SEQUENCE_in_alter_sequence5993 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_sequence_name_in_alter_sequence5995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000100000L,0x0B50000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800000000000000L});
	public static final BitSet FOLLOW_sequence_spec_in_alter_sequence5997 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000100000L,0x0B50000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800000000000000L});
	public static final BitSet FOLLOW_CREATE_SEQUENCE_in_create_sequence6034 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_sequence_name_in_create_sequence6036 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000100000L,0x0B50000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800000000000000L});
	public static final BitSet FOLLOW_sequence_spec_in_create_sequence6038 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000100000L,0x0B50000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800000000000000L});
	public static final BitSet FOLLOW_START_VK_in_sequence_spec6077 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6079 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INCREMENT_VK_in_sequence_spec6106 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6108 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MAXVALUE_VK_in_sequence_spec6135 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6137 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MINVALUE_VK_in_sequence_spec6164 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6166 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CACHE_VK_in_sequence_spec6193 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6195 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOMAXVALUE_VK_in_sequence_spec6221 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOMINVALUE_VK_in_sequence_spec6246 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CYCLE_VK_in_sequence_spec6271 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOCYCLE_VK_in_sequence_spec6296 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOCACHE_VK_in_sequence_spec6321 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ORDER_VK_in_sequence_spec6346 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOORDER_VK_in_sequence_spec6371 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTHID_VK_in_invoker_rights_clause6412 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CURRENT_USER_VK_in_invoker_rights_clause6415 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEFINER_VK_in_invoker_rights_clause6417 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPILER_PARAMETER_in_compiler_parameters_clause6454 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASSIGN_in_compiler_parameters_clause6457 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_compiler_parameters_clause6459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_compiler_parameters_clause6461 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LANGUAGE_VK_in_call_spec6498 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_java_spec_in_call_spec6502 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_c_spec_in_call_spec6506 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_JAVA_VK_in_java_spec6546 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_java_spec6548 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_C_VK_in_c_spec6584 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_c_spec6586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_CONTEXT_VK_in_c_spec6589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_LIBRARY_VK_in_c_spec6593 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_c_spec6595 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_c_agent_in_clause_in_c_spec6598 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_c_parameters_clause_in_c_spec6601 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AGENT_VK_in_c_agent_in_clause6638 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_c_agent_in_clause6640 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_PARAMETERS_VK_in_c_parameters_clause6677 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_THREE_DOTS_in_c_parameters_clause6680 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_c_parameters_clause6682 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_PARAMETER_in_parameter6722 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_parameter6724 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000110000000L,0x0000020000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_parameter6727 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000110000000L,0x0000020000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_OUT_VK_in_parameter6729 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000110000000L,0x0000020000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_INOUT_VK_in_parameter6731 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000110000000L,0x0000020000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_type_spec_in_parameter6735 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_parameter6738 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEFAULT_VALUE_in_default_value_part6828 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_default_value_part6830 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_variable_declaration_in_declare_spec6872 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_declare_spec6888 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_declare_spec6904 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_declare_spec6920 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pragma_declaration_in_declare_spec6936 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_declare_spec6952 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_declare_spec6968 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_declare_spec6984 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_declare_spec7000 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_declare_spec7016 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIABLE_DECLARE_in_variable_declaration7042 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_variable_declaration7044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_variable_declaration7046 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x1000000000010000L});
	public static final BitSet FOLLOW_CONSTANT_VK_in_variable_declaration7048 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_variable_declaration7051 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_variable_declaration7054 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBTYPE_DECLARE_in_subtype_declaration7139 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_subtype_declaration7141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_subtype_declaration7143 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_subtype_declaration7145 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_subtype_range_in_subtype_declaration7148 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RANGE_VK_in_subtype_range7226 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_subtype_range7230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_subtype_range7234 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_DECLARE_in_cursor_declaration7277 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_cursor_declaration7279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L,0x0000000004000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_type_spec_in_cursor_declaration7281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_select_statement_in_cursor_declaration7284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_cursor_declaration7288 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_spec_in_cursor_declaration7290 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_PARAMETER_in_parameter_spec7329 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_parameter_spec7331 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_parameter_spec7333 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_parameter_spec7336 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXCEPTION_DECLARE_in_exception_declaration7374 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_exception_declaration7376 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRAGMA_DECLARE_in_pragma_declaration7425 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pragma_declaration_impl_in_pragma_declaration7427 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SERIALLY_REUSABLE_VK_in_pragma_declaration_impl7472 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTONOMOUS_TRANSACTION_VK_in_pragma_declaration_impl7495 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXCEPTION_INIT_VK_in_pragma_declaration_impl7518 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_pragma_declaration_impl7520 = new BitSet(new long[]{0x0000200008008040L,0x4020000000000000L,0x0000080040002000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_constant_in_pragma_declaration_impl7522 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INLINE_VK_in_pragma_declaration_impl7565 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_pragma_declaration_impl7567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_pragma_declaration_impl7569 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RESTRICT_REFERENCES_VK_in_pragma_declaration_impl7612 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_declaration_impl7650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_id_in_pragma_declaration_impl7676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_id_in_pragma_declaration_impl7716 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_record_type_dec_in_record_declaration7782 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_var_dec_in_record_declaration7797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_type_dec_record_in_record_type_dec7824 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_type_dec_refcursor_in_record_type_dec7839 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_TYPE_DECLARE_in_record_type_dec_record7868 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_record_type_dec_record7870 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_FIELDS_in_record_type_dec_record7874 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_field_spec_in_record_type_dec_record7878 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_RECORD_TYPE_DECLARE_in_record_type_dec_refcursor7928 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_record_type_dec_refcursor7930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_REF_VK_in_record_type_dec_refcursor7932 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_record_type_dec_refcursor7934 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FIELD_SPEC_in_field_spec7977 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_field_spec7979 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_field_spec7981 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_field_spec7984 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_field_spec7987 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RECORD_VAR_DECLARE_in_record_var_dec8060 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_record_var_dec8062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_type_name_in_record_var_dec8064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000006000000000L});
	public static final BitSet FOLLOW_PERCENT_ROWTYPE_VK_in_record_var_dec8067 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PERCENT_TYPE_VK_in_record_var_dec8069 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_type_dec_in_table_declaration8107 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_var_dec_in_table_declaration8122 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_TYPE_DECLARE_in_table_type_dec8147 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_table_type_dec8149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_table_type_dec_impl_in_table_type_dec8151 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_type_dec_table_of_in_table_type_dec_impl8197 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varray_type_def_in_table_type_dec_impl8213 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_table_type_dec_table_of8241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TABLE_in_table_type_dec_table_of8245 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_table_type_dec_table_of8247 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_table_indexed_by_part_in_table_type_dec_table_of8249 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDEXED_BY_in_table_indexed_by_part8310 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_table_indexed_by_part8312 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_varray_type_def8348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_VARR_ARRAY_DEF_in_varray_type_def8352 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_varray_type_def8354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_varray_type_def8356 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_VAR_DECLARE_in_table_var_dec8403 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_var_name_in_table_var_dec8405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_table_var_dec8407 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STATEMENTS_in_seq_of_statements8448 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_statement_in_seq_of_statements8453 = new BitSet(new long[]{0x0000000000000008L,0x8040000000000024L,0x0000000200002084L,0x1004001400000400L,0x0000000000400080L,0x0240006000000000L,0x0080000000000000L,0x0000000001008000L,0x0000020000002000L,0x4021004080000800L,0x0000000000020500L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_labeled_statement_in_seq_of_statements8457 = new BitSet(new long[]{0x0000000000000008L,0x8040000000000024L,0x0000000200002084L,0x1004001400000400L,0x0000000000400080L,0x0240006000000000L,0x0080000000000000L,0x0000000001008000L,0x0000020000002000L,0x4021004080000800L,0x0000000000020500L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_LABEL_DECLARE_in_labeled_statement8498 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_labeled_statement8500 = new BitSet(new long[]{0x0000000000000000L,0x8040000000000024L,0x0000000200002084L,0x1004001400000400L,0x0000000000400080L,0x0240006000000000L,0x0000000000000000L,0x0000000001008000L,0x0000020000002000L,0x4021004080000800L,0x0000000000020500L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_statement_in_labeled_statement8502 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_assignment_statement_in_statement8537 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_continue_statement_in_statement8552 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exit_statement_in_statement8567 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_goto_statement_in_statement8582 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_if_statement_in_statement8597 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_loop_statement_in_statement8612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_forall_statement_in_statement8627 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_null_statement_in_statement8642 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_raise_statement_in_statement8657 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_return_statement_in_statement8672 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pipe_row_statement_in_statement8687 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_statement_in_statement8702 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sql_statement_in_statement8717 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_general_element_in_statement8732 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_body_in_statement8747 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_statement8762 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASSIGN_in_assignment_statement8788 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_assignment_statement8790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_assignment_statement8792 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONTINUE_VK_in_continue_statement8828 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_continue_statement8830 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_general_when_in_continue_statement8833 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_general_when8870 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_general_when8872 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXIT_VK_in_exit_statement8908 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_exit_statement8910 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_general_when_in_exit_statement8913 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GOTO_in_goto_statement8950 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_goto_statement8952 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_IF_in_if_statement8988 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_if_statement8990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_if_statement8992 = new BitSet(new long[]{0x0080000000000008L,0x0400000000000000L});
	public static final BitSet FOLLOW_elsif_part_in_if_statement8994 = new BitSet(new long[]{0x0080000000000008L,0x0400000000000000L});
	public static final BitSet FOLLOW_else_part_in_if_statement8997 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_part9034 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_elsif_part9036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_elsif_part9038 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_else_part9074 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_else_part9076 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WHILE_LOOP_in_loop_statement9112 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_loop_statement9114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement9116 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOR_LOOP_in_loop_statement9143 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_loop_param_in_loop_statement9145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement9147 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LOOP_VK_in_loop_statement9180 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement9182 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDEXED_FOR_in_cursor_loop_param9220 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_cursor_loop_param9222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_REVERSE_VK_in_cursor_loop_param9224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_SIMPLE_BOUND_in_cursor_loop_param9228 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_cursor_loop_param9232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_cursor_loop_param9236 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_BASED_FOR_in_cursor_loop_param9280 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_cursor_loop_param9282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_cursor_name_in_cursor_loop_param9284 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_expression_list_in_cursor_loop_param9286 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_BASED_FOR_in_cursor_loop_param9314 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_cursor_loop_param9316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_select_statement_in_cursor_loop_param9318 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FORALL_VK_in_forall_statement9356 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_forall_statement9358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_bounds_clause_in_forall_statement9360 = new BitSet(new long[]{0x0000000000000000L,0x8040000000000020L,0x0000000200000080L,0x1000000000000000L,0x0000000000000080L,0x0000002000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000002000L,0x4001004000000000L,0x0000000000000500L});
	public static final BitSet FOLLOW_sql_statement_in_forall_statement9362 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_EXCEPTIONS_VK_in_forall_statement9364 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_BOUND_in_bounds_clause9401 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_bounds_clause9403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_bounds_clause9405 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDICES_BOUND_in_bounds_clause9432 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_collection_name_in_bounds_clause9434 = new BitSet(new long[]{0x0000000000000008L,0x0000080000000000L});
	public static final BitSet FOLLOW_between_bound_in_bounds_clause9436 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VALUES_BOUND_in_bounds_clause9464 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_bounds_clause9466 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_between_bound9503 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_between_bound9505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_between_bound9507 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_null_statement9542 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RAISE_VK_in_raise_statement9577 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_raise_statement9579 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RETURN_VK_in_return_statement9616 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_return_statement9618 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_in_body9650 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_body9652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_body9655 = new BitSet(new long[]{0x0000000000000008L,0x1000000000000000L});
	public static final BitSet FOLLOW_exception_clause_in_body9657 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_clause9708 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_handler_in_exception_clause9710 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_exception_handler9747 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_exception_handler9749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_exception_handler9752 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BLOCK_in_block9790 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_declare_spec_in_block9794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000041920000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060002L,0x0000000000000000L,0x0003020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_body_in_block9797 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_execute_immediate_in_sql_statement9842 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_data_manipulation_language_statements_in_sql_statement9857 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_manipulation_statements_in_sql_statement9872 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_transaction_control_statements_in_sql_statement9887 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXECUTE_VK_in_execute_immediate9912 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_execute_immediate9914 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000000200L,0x0000040000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_into_clause_in_execute_immediate9931 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_execute_immediate9933 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_using_clause_in_execute_immediate9951 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_dynamic_returning_clause_in_execute_immediate9953 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_dynamic_returning_clause_in_execute_immediate9971 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DYNAMIC_RETURN_in_dynamic_returning_clause10030 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_into_clause_in_dynamic_returning_clause10032 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_merge_statement_in_data_manipulation_language_statements10071 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lock_table_statement_in_data_manipulation_language_statements10086 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_select_statement_in_data_manipulation_language_statements10101 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_update_statement_in_data_manipulation_language_statements10116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delete_statement_in_data_manipulation_language_statements10131 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statement_in_data_manipulation_language_statements10146 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SELECT_STATEMENT_in_select_statement10171 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_factoring_clause_in_select_statement10173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_subquery_in_select_statement10176 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040001L});
	public static final BitSet FOLLOW_order_by_clause_in_select_statement10178 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_for_update_clause_in_select_statement10181 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WITH_in_subquery_factoring_clause10284 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_factoring_element_in_subquery_factoring_clause10286 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_FACTORING_in_factoring_element10323 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_name_in_factoring_element10325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_subquery_in_factoring_element10327 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBQUERY_in_subquery10363 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_basic_elements_in_subquery10365 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000040L,0x0000000080000100L});
	public static final BitSet FOLLOW_subquery_operation_part_in_subquery10369 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000040L,0x0000000080000100L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNION_in_subquery_operation_part10446 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTERSECT_in_subquery_operation_part10465 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_MINUS_in_subquery_operation_part10484 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_subquery_operation_part10514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_subquery_basic_elements_in_subquery_operation_part10517 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_query_block_in_subquery_basic_elements10574 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_subquery_basic_elements10589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_SELECT_in_query_block10625 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_from_clause_in_query_block10640 = new BitSet(new long[]{0x0000000000000100L,0x0100001000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_query_block10656 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_query_block10658 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_query_block10660 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_ASTERISK_in_query_block10682 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000002000000210L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_SELECT_LIST_in_query_block10702 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_selected_element_in_query_block10706 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_into_clause_in_query_block10736 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000002000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_where_clause_in_query_block10739 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_hierarchical_query_clause_in_query_block10742 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_group_by_clause_in_query_block10758 = new BitSet(new long[]{0x0100000000000008L});
	public static final BitSet FOLLOW_model_clause_in_query_block10761 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_ITEM_in_selected_element10990 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_selected_element10992 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_alias_in_selected_element10994 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FROM_in_from_clause11037 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_ref_in_from_clause11041 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_TABLE_REF_in_table_ref11079 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_ref_aux_in_table_ref11081 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_join_clause_in_table_ref11085 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_TABLE_REF_ELEMENT_in_table_ref_aux11128 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_table_ref_aux11130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
	public static final BitSet FOLLOW_dml_table_expression_clause_in_table_ref_aux11133 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000800L});
	public static final BitSet FOLLOW_ONLY_VK_in_table_ref_aux11136 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_pivot_clause_in_table_ref_aux11138 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_unpivot_clause_in_table_ref_aux11140 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_flashback_query_clause_in_table_ref_aux11144 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_JOIN_DEF_in_join_clause11241 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_partition_clause_in_join_clause11257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x1000000000000000L,0x8000000008000000L,0x0000080000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_CROSS_VK_in_join_clause11273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x8000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_NATURAL_VK_in_join_clause11275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x8000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_INNER_VK_in_join_clause11280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_FULL_VK_in_join_clause11282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LEFT_VK_in_join_clause11284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_RIGHT_VK_in_join_clause11286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_table_ref_aux_in_join_clause11290 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_query_partition_clause_in_join_clause11306 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_join_on_part_in_join_clause11322 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_join_using_part_in_join_clause11324 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_join_on_part11450 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_join_on_part11452 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_join_using_part11489 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_join_using_part11491 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_PARTITION_VK_in_query_partition_clause11528 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_query_partition_clause11531 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_query_partition_clause11533 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_query_partition_clause11535 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_VERSIONS_VK_in_flashback_query_clause11574 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_AS_in_flashback_query_clause11576 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SCN_VK_in_flashback_query_clause11580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_TIMESTAMP_VK_in_flashback_query_clause11582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_flashback_query_clause11586 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIVOT_VK_in_pivot_clause11623 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_XML_VK_in_pivot_clause11625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_pivot_element_in_pivot_clause11628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_pivot_for_clause_in_pivot_clause11631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_pivot_in_clause_in_pivot_clause11633 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIVOT_ELEMENT_in_pivot_element11669 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_pivot_element11671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_pivot_element11674 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FOR_in_pivot_for_clause11710 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_pivot_for_clause11712 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_pivot_in_clause11749 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_pivot_in_clause11765 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ANY_MODE_in_pivot_in_clause11781 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_pivot_in_clause11783 = new BitSet(new long[]{0x0000000000000008L,0x0000008000000000L});
	public static final BitSet FOLLOW_ELEMENTS_MODE_in_pivot_in_clause11801 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pivot_in_clause_element_in_pivot_in_clause11803 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_PIVOT_IN_ELEMENT_in_pivot_in_clause_element11860 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_pivot_in_clause_element11862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_pivot_in_clause_element11866 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_pivot_in_clause_element11868 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNPIVOT_VK_in_unpivot_clause11905 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_INCLUDE_VK_in_unpivot_clause11909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_EXCLUDE_VK_in_unpivot_clause11911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_NULLS_VK_in_unpivot_clause11914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_column_name_in_unpivot_clause11919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_pivot_for_clause_in_unpivot_clause11922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_unpivot_in_clause_in_unpivot_clause11924 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_unpivot_in_clause11960 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unpivot_in_element_in_unpivot_in_clause11962 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_UNPIVOT_IN_ELEMENT_in_unpivot_in_element11999 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_unpivot_in_element12001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_PIVOT_ALIAS_in_unpivot_in_element12005 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_unpivot_in_element12008 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_unpivot_in_element12010 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_HIERARCHICAL_in_hierarchical_query_clause12048 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_start_part_in_hierarchical_query_clause12050 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CONNECT_in_hierarchical_query_clause12054 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NOCYCLE_VK_in_hierarchical_query_clause12056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_hierarchical_query_clause12059 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_START_in_start_part12096 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_start_part12098 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GROUP_in_group_by_clause12134 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_group_by_element_in_group_by_clause12136 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_having_clause_in_group_by_clause12139 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_GROUP_BY_ELEMENT_in_group_by_element12176 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_group_by_elements_in_group_by_element12178 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_GROUPING_VK_in_group_by_elements12214 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_groupin_set_in_group_by_elements12216 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_grouping_element_in_group_by_elements12243 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GROUPIN_SET_in_groupin_set12279 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_grouping_element_in_groupin_set12281 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLUP_VK_in_grouping_element12318 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CUBE_VK_in_grouping_element12320 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_grouping_element_in_grouping_element12323 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_expression_list_in_grouping_element12350 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_grouping_element12375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_HAVING_in_having_clause12411 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_having_clause12413 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_clause12449 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_main_model_in_model_clause12451 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000080100000L});
	public static final BitSet FOLLOW_cell_reference_options_in_model_clause12453 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000080100000L});
	public static final BitSet FOLLOW_return_rows_clause_in_model_clause12456 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_reference_model_in_model_clause12459 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_set_in_cell_reference_options12496 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NAV_VK_in_cell_reference_options12502 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_cell_reference_options12515 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DIMENSION_VK_in_cell_reference_options12518 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SINGLE_VK_in_cell_reference_options12520 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RETURN_VK_in_return_rows_clause12557 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UPDATED_VK_in_return_rows_clause12560 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_return_rows_clause12562 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCE_VK_in_reference_model12599 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_reference_model_name_in_reference_model12601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_subquery_in_reference_model12603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_model_column_clauses_in_reference_model12605 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L});
	public static final BitSet FOLLOW_cell_reference_options_in_reference_model12607 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L});
	public static final BitSet FOLLOW_MAIN_MODEL_in_main_model12644 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_main_model_name_in_main_model12646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_model_column_clauses_in_main_model12649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_model_rules_clause_in_main_model12651 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L});
	public static final BitSet FOLLOW_cell_reference_options_in_main_model12653 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L});
	public static final BitSet FOLLOW_MODEL_COLUMN_in_model_column_clauses12690 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DIMENSION_VK_in_model_column_clauses12693 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_clauses12695 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MEASURES_VK_in_model_column_clauses12699 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_clauses12701 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_model_column_partition_part_in_model_column_clauses12704 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARTITION_VK_in_model_column_partition_part12741 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_partition_part12743 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_COLUMNS_in_model_column_list12779 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_in_model_column_list12781 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_MODEL_COLUMN_in_model_column12818 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_model_column12820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_model_column12823 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_RULES_in_model_rules_clause12860 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_rules_element_in_model_rules_clause12862 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_model_rules_part_in_model_rules_clause12865 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RULES_VK_in_model_rules_part12902 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_part12918 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_UPSERT_VK_in_model_rules_part12920 = new BitSet(new long[]{0x0000000000000008L,0x0000001000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_model_rules_part12922 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_AUTOMATIC_VK_in_model_rules_part12941 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_SEQUENTIAL_VK_in_model_rules_part12943 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_model_iterate_clause_in_model_rules_part12960 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_RULE_in_model_rules_element13006 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASSIGN_in_model_rules_element13022 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_expression_in_model_rules_element13024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_model_rules_element13026 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_element13043 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_UPSERT_VK_in_model_rules_element13045 = new BitSet(new long[]{0x0000000000000008L,0x0000001000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_model_rules_element13047 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_model_rules_element13065 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ITERATE_VK_in_model_iterate_clause13111 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_model_iterate_clause13113 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_until_part_in_model_iterate_clause13115 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNTIL_VK_in_until_part13152 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_until_part13154 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_order_by_clause13190 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SIBLINGS_VK_in_order_by_clause13192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ORDER_BY_ELEMENTS_in_order_by_clause13196 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_order_by_elements_in_order_by_clause13200 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_ORDER_BY_ELEMENT_in_order_by_elements13244 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_order_by_elements13246 = new BitSet(new long[]{0x0000000000000008L,0x0080020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ASC_in_order_by_elements13249 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DESC_in_order_by_elements13251 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_NULLS_VK_in_order_by_elements13256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_FIRST_VK_in_order_by_elements13259 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LAST_VK_in_order_by_elements13261 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FOR_in_for_update_clause13342 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_for_update_of_part_in_for_update_clause13344 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_for_update_options_in_for_update_clause13347 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_OF_in_for_update_of_part13384 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_for_update_of_part13386 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SKIP_VK_in_for_update_options13422 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_for_update_options13447 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WAIT_VK_in_for_update_options13473 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_update_options13475 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_update_statement13513 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_update_statement13515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_update_set_clause_in_update_statement13529 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_where_clause_in_update_statement13543 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_static_returning_clause_in_update_statement13546 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_update_statement13549 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SET_VK_in_update_set_clause13596 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_update_set_elements_in_update_set_clause13598 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ASSIGN_in_update_set_elements13635 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_update_set_elements13637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_update_set_elements13639 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_update_set_elements13666 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_update_set_elements13668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_subquery_in_update_set_elements13671 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VALUE_VK_in_update_set_elements13698 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_update_set_elements13700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_update_set_elements13703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_update_set_elements13705 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_delete_statement13743 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_delete_statement13745 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_where_clause_in_delete_statement13759 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_static_returning_clause_in_delete_statement13762 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_delete_statement13765 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INSERT_in_insert_statement13802 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_single_table_insert_in_insert_statement13817 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_multi_table_insert_in_insert_statement13832 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SINGLE_TABLE_MODE_in_single_table_insert13889 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_insert_into_clause_in_single_table_insert13891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_values_clause_in_single_table_insert13894 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_static_returning_clause_in_single_table_insert13896 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_select_statement_in_single_table_insert13900 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_single_table_insert13903 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MULTI_TABLE_MODE_in_multi_table_insert13940 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_select_statement_in_multi_table_insert13942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_conditional_insert_clause_in_multi_table_insert13945 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_multi_table_element_in_multi_table_insert13947 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_TABLE_ELEMENT_in_multi_table_element13985 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_insert_into_clause_in_multi_table_element13987 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_values_clause_in_multi_table_element13989 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_multi_table_element13992 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONDITIONAL_INSERT_in_conditional_insert_clause14029 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_conditional_insert_clause14032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_FIRST_VK_in_conditional_insert_clause14034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_conditional_insert_when_part_in_conditional_insert_clause14038 = new BitSet(new long[]{0x0000000000000008L,0x0400000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_conditional_insert_else_part_in_conditional_insert_clause14041 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_conditional_insert_when_part14079 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_conditional_insert_when_part14081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_when_part14083 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_conditional_insert_else_part14120 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_else_part14122 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_insert_into_clause14159 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_insert_into_clause14161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_insert_into_clause14164 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_insert_into_clause14166 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_VALUES_in_values_clause14204 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_values_clause14207 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_values_clause14209 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_VK_in_merge_statement14247 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_merge_statement14249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_tableview_name_in_merge_statement14252 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_merge_statement14268 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_selected_tableview_in_merge_statement14270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_merge_statement14272 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_merge_update_clause_in_merge_statement14288 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000402000L});
	public static final BitSet FOLLOW_merge_insert_clause_in_merge_statement14291 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_merge_statement14294 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_UPDATE_in_merge_update_clause14333 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_merge_element_in_merge_update_clause14335 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000002000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_where_clause_in_merge_update_clause14338 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L});
	public static final BitSet FOLLOW_merge_update_delete_part_in_merge_update_clause14341 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_merge_element14378 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_merge_element14380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_merge_element14382 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_merge_update_delete_part14418 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_where_clause_in_merge_update_delete_part14420 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_INSERT_in_merge_insert_clause14456 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_merge_insert_clause14459 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_merge_insert_clause14461 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_merge_insert_clause14465 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_where_clause_in_merge_insert_clause14467 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECTED_TABLEVIEW_in_selected_tableview14505 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_selected_tableview14507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_tableview_name_in_selected_tableview14511 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_select_statement_in_selected_tableview14513 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_LOCK_in_lock_table_statement14552 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_lock_table_element_in_lock_table_statement14554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000801L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_lock_mode_in_lock_table_statement14557 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_wait_nowait_part_in_lock_table_statement14559 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WAIT_VK_in_wait_nowait_part14596 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_wait_nowait_part14598 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_wait_nowait_part14624 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCK_TABLE_ELEMENT_in_lock_table_element14661 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_lock_table_element14663 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_partition_extension_clause_in_lock_table_element14665 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode14701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode14703 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode14728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode14730 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode14755 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_lock_mode14757 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode14783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode14785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode14787 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode14812 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_REF_in_general_table_ref14850 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_general_table_ref14852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
	public static final BitSet FOLLOW_dml_table_expression_clause_in_general_table_ref14855 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_ONLY_VK_in_general_table_ref14857 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STATIC_RETURNING_in_static_returning_clause14894 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_static_returning_clause14896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000040000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_into_clause_in_static_returning_clause14899 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LOG_VK_in_error_logging_clause14935 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_error_logging_into_part_in_error_logging_clause14937 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_expression_in_error_logging_clause14940 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_error_logging_reject_part_in_error_logging_clause14943 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_error_logging_into_part14980 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_error_logging_into_part14982 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REJECT_VK_in_error_logging_reject_part15018 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNLIMITED_VK_in_error_logging_reject_part15021 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_error_logging_reject_part15023 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_EXPRESSION_in_dml_table_expression_clause15060 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLLECTION_MODE_in_dml_table_expression_clause15077 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_dml_table_expression_clause15079 = new BitSet(new long[]{0x0000000000000008L,0x0000000000008000L});
	public static final BitSet FOLLOW_PLUS_SIGN_in_dml_table_expression_clause15081 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_MODE_in_dml_table_expression_clause15123 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_select_statement_in_dml_table_expression_clause15125 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause15127 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DIRECT_MODE_in_dml_table_expression_clause15169 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_table_expression_clause15171 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_sample_clause_in_dml_table_expression_clause15173 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_general_element_in_dml_table_expression_clause15218 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_standard_function_in_dml_table_expression_clause15237 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_ref_in_dml_table_expression_clause15276 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WITH_in_subquery_restriction_clause15306 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_READ_VK_in_subquery_restriction_clause15309 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CHECK_in_subquery_restriction_clause15311 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_constraint_name_in_subquery_restriction_clause15313 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAMPLE_VK_in_sample_clause15351 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BLOCK_VK_in_sample_clause15353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_sample_clause15356 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_seed_part_in_sample_clause15358 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SEED_VK_in_seed_part15396 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_seed_part15398 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_close_statement_in_cursor_manipulation_statements15439 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_open_statement_in_cursor_manipulation_statements15464 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fetch_statement_in_cursor_manipulation_statements15489 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_open_for_statement_in_cursor_manipulation_statements15514 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLOSE_VK_in_close_statement15550 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_close_statement15552 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OPEN_VK_in_open_statement15589 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_open_statement15591 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_expression_list_in_open_statement15593 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FETCH_in_fetch_statement15630 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_fetch_statement15632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000040000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_fetch_statement15653 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_fetch_statement15655 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_BULK_VK_in_fetch_statement15677 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_fetch_statement15679 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_OPEN_VK_in_open_for_statement15740 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_open_for_statement15742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_expression_in_open_for_statement15745 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_select_statement_in_open_for_statement15747 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_open_for_statement15750 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_transaction_command_in_transaction_control_statements15790 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_constraint_command_in_transaction_control_statements15815 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_commit_statement_in_transaction_control_statements15840 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rollback_statement_in_transaction_control_statements15865 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_savepoint_statement_in_transaction_control_statements15890 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_TRANSACTION_in_set_transaction_command15925 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_set_transaction_command15927 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004000L});
	public static final BitSet FOLLOW_READ_VK_in_set_transaction_command15948 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ONLY_VK_in_set_transaction_command15951 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WRITE_VK_in_set_transaction_command15953 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ISOLATION_VK_in_set_transaction_command15975 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SERIALIZABLE_VK_in_set_transaction_command15978 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMMITTED_VK_in_set_transaction_command15980 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_VK_in_set_transaction_command16002 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_rollback_segment_name_in_set_transaction_command16004 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SET_CONSTRAINT_in_set_constraint_command16065 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_set_constraint_command16068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_constraint_name_in_set_constraint_command16070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000020000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_IMMEDIATE_VK_in_set_constraint_command16075 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEFERRED_VK_in_set_constraint_command16077 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMMIT_VK_in_commit_statement16115 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WORK_VK_in_commit_statement16117 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L,0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_COMMENT_VK_in_commit_statement16139 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_commit_statement16141 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FORCE_VK_in_commit_statement16162 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CORRUPT_XID_VK_in_commit_statement16165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_commit_statement16167 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CORRUPT_XID_ALL_VK_in_commit_statement16169 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_commit_statement16171 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_commit_statement16173 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_write_clause_in_commit_statement16205 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WRITE_VK_in_write_clause16251 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WAIT_VK_in_write_clause16254 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_write_clause16256 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_IMMEDIATE_VK_in_write_clause16261 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BATCH_VK_in_write_clause16263 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_VK_in_rollback_statement16302 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WORK_VK_in_rollback_statement16304 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TO_in_rollback_statement16326 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_savepoint_name_in_rollback_statement16328 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FORCE_VK_in_rollback_statement16349 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_rollback_statement16351 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAVEPOINT_VK_in_savepoint_statement16412 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_savepoint_name_in_savepoint_statement16414 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIPE_ROW_in_pipe_row_statement16455 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_pipe_row_statement16457 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXPR_LIST_in_expression_list16497 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_expression_list16499 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_LOGIC_EXPR_in_expression16536 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression16538 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXPR_in_expression16555 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression16557 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_OR_in_expression_element16614 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_AND_in_expression_element16632 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_EQUALS_OP_in_expression_element16650 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NOT_EQUAL_OP_in_expression_element16668 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LESS_THAN_OP_in_expression_element16686 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_GREATER_THAN_OP_in_expression_element16704 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LESS_THAN_OR_EQUALS_OP_in_expression_element16722 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_GREATER_THAN_OR_EQUALS_OP_in_expression_element16740 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element16768 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element16772 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_expression_element16820 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element16822 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_NULL_in_expression_element16878 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NULL_in_expression_element16898 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_NAN_in_expression_element16918 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NAN_in_expression_element16938 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_PRESENT_in_expression_element16958 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_PRESENT_in_expression_element16978 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_INFINITE_in_expression_element16998 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_INFINITE_in_expression_element17018 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_A_SET_in_expression_element17038 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_A_SET_in_expression_element17058 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_EMPTY_in_expression_element17078 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_EMPTY_in_expression_element17098 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17130 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_OF_TYPE_in_expression_element17174 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_expression_element17178 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_IS_OF_TYPE_in_expression_element17206 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_expression_element17210 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_MEMBER_VK_in_expression_element17240 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SUBMULTISET_VK_in_expression_element17242 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17245 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17247 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOT_IN_in_expression_element17275 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_in_elements_in_expression_element17279 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_expression_element17306 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_in_elements_in_expression_element17310 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOT_BETWEEN_in_expression_element17337 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17339 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17341 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17343 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_expression_element17370 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17372 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17374 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17376 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOT_LIKE_in_expression_element17403 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17405 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17407 = new BitSet(new long[]{0x00022C018C108148L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17409 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_LIKE_in_expression_element17438 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LIKEC_VK_in_expression_element17440 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LIKE2_VK_in_expression_element17442 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LIKE4_VK_in_expression_element17444 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17447 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17449 = new BitSet(new long[]{0x00022C018C108148L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17451 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONCATENATION_OP_in_expression_element17480 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17482 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17484 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLUS_SIGN_in_expression_element17511 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17513 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17515 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MINUS_SIGN_in_expression_element17542 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17544 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17546 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASTERISK_in_expression_element17573 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17575 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17577 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SOLIDUS_in_expression_element17604 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17606 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17608 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MOD_VK_in_expression_element17635 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17637 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17639 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DIV_VK_in_expression_element17666 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17668 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17670 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIPE_VK_in_expression_element17697 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17699 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17701 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNARY_OPERATOR_in_expression_element17729 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17733 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_PRIOR_in_expression_element17771 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17773 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NEW_VK_in_expression_element17800 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_expression_element17802 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_expression_element17829 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17831 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STANDARD_FUNCTION_in_expression_element17858 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_standard_function_in_expression_element17860 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SOME_VK_in_expression_element17888 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_EXISTS_in_expression_element17890 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_expression_element17892 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_expression_element17894 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17897 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VECTOR_EXPR_in_expression_element17924 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17926 = new BitSet(new long[]{0x00022C018C108148L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_DATETIME_OP_in_expression_element17955 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_datetime_element_in_expression_element17959 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_model_expression_in_expression_element17985 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KEEP_VK_in_expression_element18011 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_DENSE_RANK_VK_in_expression_element18015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_FIRST_VK_in_expression_element18018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_LAST_VK_in_expression_element18020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_expression_element18023 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_over_clause_in_expression_element18025 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DOT_ASTERISK_in_expression_element18054 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_expression_element18056 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PERCENT_FOUND_VK_in_expression_element18084 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_NOTFOUND_VK_in_expression_element18086 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_ROWCOUNT_VK_in_expression_element18088 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_ISOPEN_VK_in_expression_element18090 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_expression_element18093 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OUTER_JOIN_SIGN_in_expression_element18120 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18122 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_case_statement_in_expression_element18149 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constant_in_expression_element18174 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_general_element_in_expression_element18189 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_expression_element18204 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_in_elements18229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_in_elements18254 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_VK_in_datetime_element18289 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_datetime_element18291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_LOCAL_VK_in_datetime_element18294 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TIME_VK_in_datetime_element18296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_datetime_element18298 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DAY_VK_in_datetime_element18326 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SECOND_VK_in_datetime_element18328 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_datetime_element18330 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_YEAR_VK_in_datetime_element18358 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_MONTH_VK_in_datetime_element18360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_datetime_element18362 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_EXPRESSION_in_model_expression18398 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_model_expression18400 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0C00010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_model_expression_element_in_model_expression18402 = new BitSet(new long[]{0x0000000000000008L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0C00010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_model_expression_element18438 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_model_expression_element18463 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_SINGLE_COLUMN_in_model_expression_element18489 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_model_expression_element18491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000042L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_for_single_column_element_in_model_expression_element18493 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_for_like_part_in_model_expression_element18495 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOR_MULTI_COLUMN_in_model_expression_element18523 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_model_expression_element18525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_model_expression_element18529 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_model_expression_element18532 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_model_expression_element18534 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_for_single_column_element18573 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_for_single_column_element18575 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FROM_in_for_single_column_element18602 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element18604 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TO_in_for_single_column_element18632 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element18634 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INCREMENT_VK_in_for_single_column_element18663 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DECREMENT_VK_in_for_single_column_element18665 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element18668 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_LIKE_in_for_like_part18705 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_like_part18707 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_CASE_in_case_statement18743 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_case_statement18745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0100000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_case_statement18748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_case_when_part_in_case_statement18750 = new BitSet(new long[]{0x0000000000000008L,0x0400000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_case_else_part_in_case_statement18753 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SEARCHED_CASE_in_case_statement18783 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_case_statement18785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_case_when_part_in_case_statement18788 = new BitSet(new long[]{0x0000000000000008L,0x0400000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_case_else_part_in_case_statement18791 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_case_when_part18831 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_case_when_part18833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_case_when_part18836 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_case_when_part18838 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_case_else_part18875 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_case_else_part18878 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_case_else_part18880 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_OVER_in_standard_function18918 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function18920 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function18922 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_USING_in_standard_function18950 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function18952 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_standard_function18954 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COUNT_VK_in_standard_function18982 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function18985 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function18987 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_standard_function18989 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_ASTERISK_in_standard_function18995 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_expression_in_standard_function18999 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function19003 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CAST_VK_in_standard_function19032 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_XMLCAST_VK_in_standard_function19034 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_standard_function19038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_expression_in_standard_function19040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function19043 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CHR_VK_in_standard_function19070 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_NCHAR_CS_VK_in_standard_function19074 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLLECT_VK_in_standard_function19101 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function19104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function19106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_column_name_in_standard_function19110 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_collect_order_by_part_in_standard_function19112 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_WITHIN_OR_OVER_in_standard_function19140 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function19142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_within_clause_in_standard_function19145 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function19147 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_DECOMPOSE_VK_in_standard_function19177 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19179 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_CANONICAL_VK_in_standard_function19182 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPATIBILITY_VK_in_standard_function19184 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXTRACT_VK_in_standard_function19214 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_standard_function19216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function19218 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FIRST_VALUE_VK_in_standard_function19246 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LAST_VALUE_VK_in_standard_function19248 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200004L});
	public static final BitSet FOLLOW_NULLS_VK_in_standard_function19253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function19256 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PREDICTION_FUNCTION_in_standard_function19284 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19286 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_cost_matrix_clause_in_standard_function19289 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_standard_function19292 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TRANSLATE_VK_in_standard_function19320 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19322 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000200000000400L});
	public static final BitSet FOLLOW_CHAR_CS_VK_in_standard_function19325 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_NCHAR_CS_VK_in_standard_function19327 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function19331 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_TREAT_VK_in_standard_function19359 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_REF_VK_in_standard_function19363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function19366 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TRIM_VK_in_standard_function19393 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LEADING_VK_in_standard_function19396 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_TRAILING_VK_in_standard_function19398 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_BOTH_VK_in_standard_function19400 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_standard_function19404 = new BitSet(new long[]{0x00022C018C108148L,0x612008D400008000L,0x0000080040123840L,0x0004000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_standard_function19406 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLAGG_VK_in_standard_function19436 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19438 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_standard_function19440 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLCOLATTVAL_VK_in_standard_function19469 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_XMLFOREST_VK_in_standard_function19471 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_multiuse_expression_element_in_standard_function19474 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_XMLEXISTS_VK_in_standard_function19502 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19504 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function19506 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLPARSE_VK_in_standard_function19534 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DOCUMENT_VK_in_standard_function19537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CONTENT_VK_in_standard_function19539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function19542 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_WELLFORMED_VK_in_standard_function19544 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLQUERY_VK_in_standard_function19572 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19574 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function19576 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_standard_function19579 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLROOT_VK_in_standard_function19607 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_xml_param_version_part_in_standard_function19611 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_xmlroot_param_standalone_part_in_standard_function19613 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLTABLE_VK_in_standard_function19641 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_namespaces_clause_in_standard_function19643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function19646 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function19648 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_xml_table_column_in_standard_function19651 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_XMLELEMENT_VK_in_standard_function19679 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ENTITYESCAPING_VK_in_standard_function19694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010020000000L,0x0000000000000000L,0x0000008000000400L});
	public static final BitSet FOLLOW_NOENTITYESCAPING_VK_in_standard_function19696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010020000000L,0x0000000000000000L,0x0000008000000400L});
	public static final BitSet FOLLOW_NAME_VK_in_standard_function19713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_standard_function19715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function19719 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_xml_attributes_clause_in_standard_function19733 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function19737 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_alias_in_standard_function19739 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_XMLPI_VK_in_standard_function19778 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NAME_VK_in_standard_function19801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_char_set_name_in_standard_function19803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_standard_function19806 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_standard_function19829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function19831 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function19867 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLSERIALIZE_VK_in_standard_function19904 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DOCUMENT_VK_in_standard_function19923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CONTENT_VK_in_standard_function19925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function19944 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000004000000L,0x0000000100200100L,0x0000020000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function19946 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000200100L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_xmlserialize_param_enconding_part_in_standard_function19965 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200100L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_xml_param_version_part_in_standard_function19984 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200100L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_xmlserialize_param_ident_part_in_standard_function20003 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_HIDE_VK_in_standard_function20024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_SHOW_VK_in_standard_function20026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_DEFAULTS_VK_in_standard_function20029 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OVER_VK_in_over_clause20076 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_partition_clause_in_over_clause20078 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_over_clause20082 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000001000L});
	public static final BitSet FOLLOW_windowing_clause_in_over_clause20084 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROWS_VK_in_windowing_clause20124 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_RANGE_VK_in_windowing_clause20126 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_windowing_clause20147 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause20149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause20151 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause20171 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_UNBOUNDED_VK_in_windowing_elements20231 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PRECEDING_VK_in_windowing_elements20233 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURRENT_VK_in_windowing_elements20260 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ROW_VK_in_windowing_elements20262 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRECEDING_VK_in_windowing_elements20290 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_FOLLOWING_VK_in_windowing_elements20292 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_windowing_elements20295 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_using_clause20331 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_using_element_in_using_clause20333 = new BitSet(new long[]{0x0000000000000108L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_ELEMENT_in_using_element20370 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_using_element20372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000080000L});
	public static final BitSet FOLLOW_OUT_VK_in_using_element20375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_using_element20378 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_alias_in_using_element20380 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASTERISK_in_using_element20407 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_collect_order_by_part20442 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_collect_order_by_part20444 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WITHIN_VK_in_within_clause20480 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_order_by_clause_in_within_clause20482 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COST_VK_in_cost_matrix_clause20518 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_MODEL_in_cost_matrix_clause20537 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_AUTO_VK_in_cost_matrix_clause20539 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_cost_class_name_in_cost_matrix_clause20559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_expression_list_in_cost_matrix_clause20562 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PASSING_VK_in_xml_passing_clause20621 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_VALUE_VK_in_xml_passing_clause20623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_xml_passing_clause20626 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_alias_in_xml_passing_clause20628 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_xml_passing_clause20632 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_alias_in_xml_passing_clause20634 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLATTRIBUTES_VK_in_xml_attributes_clause20673 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ENTITYESCAPING_VK_in_xml_attributes_clause20688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_NOENTITYESCAPING_VK_in_xml_attributes_clause20690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_SCHEMACHECK_VK_in_xml_attributes_clause20707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_NOSCHEMACHECK_VK_in_xml_attributes_clause20709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause20725 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_XMLNAMESPACES_VK_in_xml_namespaces_clause20771 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_namespaces_clause20786 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_alias_in_xml_namespaces_clause20788 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_xml_general_default_part_in_xml_namespaces_clause20793 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_COLUMN_in_xml_table_column20839 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_column_name_in_xml_table_column20841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ORDINALITY_VK_in_xml_table_column20844 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_type_spec_in_xml_table_column20846 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_xml_table_column20848 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L});
	public static final BitSet FOLLOW_xml_general_default_part_in_xml_table_column20851 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_xml_general_default_part20890 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_general_default_part20892 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ELEMENT_in_xml_multiuse_expression_element20928 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_multiuse_expression_element20930 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_xml_alias_in_xml_multiuse_expression_element20932 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ALIAS_in_xml_alias20969 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_xml_alias20971 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ALIAS_in_xml_alias20998 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_xml_alias21001 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_alias21003 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VERSION_VK_in_xml_param_version_part21040 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NO_VK_in_xml_param_version_part21043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_VALUE_VK_in_xml_param_version_part21045 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_xml_param_version_part21047 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STANDALONE_VK_in_xmlroot_param_standalone_part21084 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_YES_VK_in_xmlroot_param_standalone_part21087 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NO_VK_in_xmlroot_param_standalone_part21089 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_VALUE_VK_in_xmlroot_param_standalone_part21091 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ENCODING_VK_in_xmlserialize_param_enconding_part21129 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xmlserialize_param_enconding_part21131 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NO_VK_in_xmlserialize_param_ident_part21166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part21168 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part21194 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xmlserialize_param_ident_part21196 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBPARTITION_VK_in_partition_extension_clause21238 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PARTITION_VK_in_partition_extension_clause21240 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_partition_extension_clause21243 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALIAS_in_alias21279 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_alias21281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_alias21284 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHERE_in_where_clause21321 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_where_clause21323 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_into_clause21360 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_into_clause21362 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_BULK_VK_in_into_clause21391 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_into_clause21393 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_XML_COLUMN_NAME_in_xml_column_name21435 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_xml_column_name21437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_xml_column_name21440 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COST_CLASS_NAME_in_cost_class_name21476 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_cost_class_name21478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_cost_class_name21481 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ATTRIBUTE_NAME_in_attribute_name21517 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_attribute_name21519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_attribute_name21522 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAVEPOINT_NAME_in_savepoint_name21558 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_savepoint_name21560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_savepoint_name21563 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_SEGMENT_NAME_in_rollback_segment_name21599 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_rollback_segment_name21601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_rollback_segment_name21604 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_VAR_NAME_in_table_var_name21641 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_table_var_name21643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_table_var_name21646 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SCHEMA_NAME_in_schema_name21682 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_schema_name21684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_schema_name21687 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROUTINE_NAME_in_routine_name21723 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_routine_name21725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_routine_name21728 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000080L});
	public static final BitSet FOLLOW_link_name_in_routine_name21731 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PACKAGE_NAME_in_package_name21768 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_package_name21770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_package_name21775 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_IMPLEMENTATION_TYPE_NAME_in_implementation_type_name21813 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_implementation_type_name21815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_implementation_type_name21820 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_PARAMETER_NAME_in_parameter_name21858 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_parameter_name21860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_parameter_name21863 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCE_MODEL_NAME_in_reference_model_name21900 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_reference_model_name21902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_reference_model_name21905 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MAIN_MODEL_NAME_in_main_model_name21941 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_main_model_name21943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_main_model_name21946 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_QUERY_NAME_in_query_name21982 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_query_name21984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_query_name21987 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRAINT_NAME_in_constraint_name22023 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_constraint_name22025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_constraint_name22028 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000080L});
	public static final BitSet FOLLOW_link_name_in_constraint_name22031 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LABEL_NAME_in_label_name22068 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_label_name22070 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TYPE_NAME_in_type_name22101 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_type_name22105 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SEQUENCE_NAME_in_sequence_name22143 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_sequence_name22145 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_EXCEPTION_NAME_in_exception_name22182 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_exception_name22184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_exception_name22189 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_FUNCTION_NAME_in_function_name22227 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_function_name22229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_function_name22234 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_PROCEDURE_NAME_in_procedure_name22272 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_procedure_name22274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_procedure_name22279 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_TRIGGER_NAME_in_trigger_name22317 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_trigger_name22319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_trigger_name22324 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_HOSTED_VARIABLE_NAME_in_variable_name22362 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_variable_name22364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_variable_name22369 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_VARIABLE_NAME_in_variable_name22398 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_variable_name22400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_variable_name22405 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_INDEX_NAME_in_index_name22443 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_index_name22445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_index_name22448 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_NAME_in_cursor_name22479 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_cursor_name22481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_cursor_name22484 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RECORD_NAME_in_record_name22520 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_record_name22522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_record_name22525 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLLECTION_NAME_in_collection_name22561 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_collection_name22563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_collection_name22568 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LINK_NAME_in_link_name22606 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_link_name22608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_link_name22611 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLUMN_NAME_in_column_name22647 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_column_name22649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_column_name22654 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_TABLEVIEW_NAME_in_tableview_name22692 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_tableview_name22694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_tableview_name22699 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000080L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_link_name_in_tableview_name22702 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_partition_extension_clause_in_tableview_name22705 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CHAR_SET_NAME_in_char_set_name22753 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_char_set_name22757 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ARGUMENTS_in_function_argument22799 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_argument_in_function_argument22803 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ARGUMENT_in_argument22841 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_argument22843 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_parameter_name_in_argument22845 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CUSTOM_TYPE_in_type_spec22889 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_type_spec22891 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000006000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_REF_VK_in_type_spec22893 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000006000000000L});
	public static final BitSet FOLLOW_PERCENT_ROWTYPE_VK_in_type_spec22897 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PERCENT_TYPE_VK_in_type_spec22899 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_native_datatype_spec_in_type_spec22968 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTERVAL_DATATYPE_in_type_spec22984 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_YEAR_VK_in_type_spec22987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_DAY_VK_in_type_spec22989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_MONTH_VK_in_type_spec22993 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SECOND_VK_in_type_spec22995 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_type_spec22998 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_PRECISION_in_type_precision23035 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_constant_in_type_precision23039 = new BitSet(new long[]{0x0000200008008048L,0x4020000000000000L,0x0000080040002000L,0x0200080000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_constant_in_type_precision23043 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0200080000000000L});
	public static final BitSet FOLLOW_CHAR_VK_in_type_precision23049 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BYTE_VK_in_type_precision23053 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NATIVE_DATATYPE_in_native_datatype_spec23116 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BFILE_VK_in_native_datatype_spec23127 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_BINARY_FLOAT_VK_in_native_datatype_spec23140 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_BINARY_INTEGER_VK_in_native_datatype_spec23153 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_BLOB_VK_in_native_datatype_spec23166 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_BOOLEAN_VK_in_native_datatype_spec23179 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_CHARACTER_VK_in_native_datatype_spec23192 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_CHAR_VK_in_native_datatype_spec23206 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_CLOB_VK_in_native_datatype_spec23219 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_DATE_VK_in_native_datatype_spec23232 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DATE_in_native_datatype_spec23245 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_DAY_VK_in_native_datatype_spec23258 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_DECIMAL_VK_in_native_datatype_spec23269 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_DEC_VK_in_native_datatype_spec23283 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_DOUBLE_VK_in_native_datatype_spec23296 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_DOUBLE_VK_in_native_datatype_spec23309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_PRECISION_VK_in_native_datatype_spec23311 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_DSINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec23324 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_FLOAT_VK_in_native_datatype_spec23335 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_HOUR_VK_in_native_datatype_spec23348 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_INTEGER_VK_in_native_datatype_spec23359 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_INT_VK_in_native_datatype_spec23372 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_LONG_VK_in_native_datatype_spec23385 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_LONG_VK_in_native_datatype_spec23398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_RAW_VK_in_native_datatype_spec23400 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_MINUTE_VK_in_native_datatype_spec23413 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_MLSLABEL_VK_in_native_datatype_spec23424 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_MONTH_VK_in_native_datatype_spec23435 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NATURALN_VK_in_native_datatype_spec23446 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NATURAL_VK_in_native_datatype_spec23457 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NCHAR_VK_in_native_datatype_spec23468 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NCLOB_VK_in_native_datatype_spec23481 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NUMBER_VK_in_native_datatype_spec23494 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NUMERIC_VK_in_native_datatype_spec23507 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NVARCHAR2_VK_in_native_datatype_spec23520 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_PLS_INTEGER_VK_in_native_datatype_spec23533 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_POSITIVEN_VK_in_native_datatype_spec23546 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_POSITIVE_VK_in_native_datatype_spec23557 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RAW_VK_in_native_datatype_spec23568 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_REAL_VK_in_native_datatype_spec23581 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_ROWID_VK_in_native_datatype_spec23592 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SECOND_VK_in_native_datatype_spec23605 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SIGNTYPE_VK_in_native_datatype_spec23616 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SIMPLE_INTEGER_VK_in_native_datatype_spec23627 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SMALLINT_VK_in_native_datatype_spec23638 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_STRING_VK_in_native_datatype_spec23651 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_TIMESTAMP_LTZ_UNCONSTRAINED_VK_in_native_datatype_spec23662 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_TIMESTAMP_TZ_UNCONSTRAINED_VK_in_native_datatype_spec23673 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_TIMESTAMP_UNCONSTRAINED_VK_in_native_datatype_spec23684 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_TIMESTAMP_VK_in_native_datatype_spec23695 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_TIMEZONE_ABBR_VK_in_native_datatype_spec23708 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_TIMEZONE_HOUR_VK_in_native_datatype_spec23719 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_TIMEZONE_MINUTE_VK_in_native_datatype_spec23730 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_TIMEZONE_REGION_VK_in_native_datatype_spec23741 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_UROWID_VK_in_native_datatype_spec23752 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_VARCHAR2_VK_in_native_datatype_spec23765 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_VARCHAR_VK_in_native_datatype_spec23778 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_YEAR_VK_in_native_datatype_spec23791 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_YMINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec23802 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_type_precision_in_native_datatype_spec23811 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_TIME_VK_in_native_datatype_spec23821 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LOCAL_VK_in_native_datatype_spec23825 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CASCATED_ELEMENT_in_general_element23900 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_id_in_general_element23930 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000220L});
	public static final BitSet FOLLOW_function_argument_in_general_element23950 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000220L});
	public static final BitSet FOLLOW_ANY_ELEMENT_in_general_element_id24013 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_general_element_id24015 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_constant24051 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUS_SIGN_in_constant24072 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_constant24076 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXACT_NUM_LIT_in_constant24097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_APPROXIMATE_NUM_LIT_in_constant24117 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHAR_STRING_in_constant24137 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_constant24157 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TRUE_in_constant24177 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FALSE_in_constant24197 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DBTIMEZONE_VK_in_constant24217 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SESSIONTIMEZONE_VK_in_constant24238 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINVALUE_VK_in_constant24258 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MAXVALUE_VK_in_constant24278 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_constant24298 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_char_set_name_in_id24329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_id24332 = new BitSet(new long[]{0x0000000000000002L});
}
