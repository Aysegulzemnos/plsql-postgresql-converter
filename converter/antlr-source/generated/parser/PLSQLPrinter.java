// $ANTLR 3.5.2 PLSQLPrinter.g 2014-09-10 17:48:35

/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2014 Bars Group
 */
package parser;


import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.stringtemplate.*;
import org.antlr.stringtemplate.language.*;
import java.util.HashMap;
/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2014 Bars Group
 */
@SuppressWarnings("all")
public class PLSQLPrinter extends TreeParser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "AMPERSAND", "APPROXIMATE_NUM_LIT", 
		"ASSIGN_OP", "ASTERISK", "AT_SIGN", "B", "BINDVAR", "BIT_STRING_LIT", 
		"C", "CARRET_OPERATOR_PART", "CHAR_STRING", "CHAR_STRING_PERL", "COLON", 
		"COMMA", "COMMENT", "CONCATENATION_OP", "D", "DELIMITED_ID", "DOUBLE_ASTERISK", 
		"DOUBLE_PERIOD", "E", "EQUALS_OP", "EXACT_NUM_LIT", "EXCLAMATION_OPERATOR_PART", 
		"F", "G", "GREATER_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "H", "HEX_STRING_LIT", 
		"I", "INTRODUCER", "J", "K", "L", "LEFT_BRACKET", "LEFT_PAREN", "LESS_THAN_OP", 
		"LESS_THAN_OR_EQUALS_OP", "M", "MINUS_SIGN", "N", "NATIONAL_CHAR_STRING_LIT", 
		"NEWLINE", "NOT_EQUAL_OP", "O", "P", "PERCENT", "PERIOD", "PLSQL_NON_RESERVED_CONNECT_BY_ROOT", 
		"PLSQL_NON_RESERVED_ELSIF", "PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_PIVOT", 
		"PLSQL_NON_RESERVED_UNPIVOT", "PLSQL_NON_RESERVED_USING", "PLSQL_RESERVED_CLUSTERS", 
		"PLSQL_RESERVED_COLAUTH", "PLSQL_RESERVED_COMPRESS", "PLSQL_RESERVED_CRASH", 
		"PLSQL_RESERVED_EXCLUSIVE", "PLSQL_RESERVED_IDENTIFIED", "PLSQL_RESERVED_IF", 
		"PLSQL_RESERVED_INDEX", "PLSQL_RESERVED_INDEXES", "PLSQL_RESERVED_LOCK", 
		"PLSQL_RESERVED_MINUS", "PLSQL_RESERVED_MODE", "PLSQL_RESERVED_NOCOMPRESS", 
		"PLSQL_RESERVED_NOWAIT", "PLSQL_RESERVED_RESOURCE", "PLSQL_RESERVED_SHARE", 
		"PLSQL_RESERVED_START", "PLSQL_RESERVED_TABAUTH", "PLSQL_RESERVED_VIEWS", 
		"PLUS_SIGN", "PROMPT", "Q", "QS_ANGLE", "QS_BRACE", "QS_BRACK", "QS_OTHER", 
		"QS_OTHER_CH", "QS_PAREN", "QUESTION_MARK", "QUOTE", "R", "REGULAR_ID", 
		"RIGHT_BRACKET", "RIGHT_PAREN", "S", "SEMICOLON", "SEPARATOR", "SIMPLE_LETTER", 
		"SOLIDUS", "SPACE", "SQL92_RESERVED_ALL", "SQL92_RESERVED_ALTER", "SQL92_RESERVED_AND", 
		"SQL92_RESERVED_ANY", "SQL92_RESERVED_AS", "SQL92_RESERVED_ASC", "SQL92_RESERVED_BEGIN", 
		"SQL92_RESERVED_BETWEEN", "SQL92_RESERVED_BY", "SQL92_RESERVED_CASE", 
		"SQL92_RESERVED_CHECK", "SQL92_RESERVED_CONNECT", "SQL92_RESERVED_CREATE", 
		"SQL92_RESERVED_CURRENT", "SQL92_RESERVED_CURSOR", "SQL92_RESERVED_DATE", 
		"SQL92_RESERVED_DECLARE", "SQL92_RESERVED_DEFAULT", "SQL92_RESERVED_DELETE", 
		"SQL92_RESERVED_DESC", "SQL92_RESERVED_DISTINCT", "SQL92_RESERVED_DROP", 
		"SQL92_RESERVED_ELSE", "SQL92_RESERVED_END", "SQL92_RESERVED_EXCEPTION", 
		"SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE", "SQL92_RESERVED_FETCH", 
		"SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", "SQL92_RESERVED_GOTO", "SQL92_RESERVED_GRANT", 
		"SQL92_RESERVED_GROUP", "SQL92_RESERVED_HAVING", "SQL92_RESERVED_IN", 
		"SQL92_RESERVED_INSERT", "SQL92_RESERVED_INTERSECT", "SQL92_RESERVED_INTO", 
		"SQL92_RESERVED_IS", "SQL92_RESERVED_LIKE", "SQL92_RESERVED_NOT", "SQL92_RESERVED_NULL", 
		"SQL92_RESERVED_OF", "SQL92_RESERVED_ON", "SQL92_RESERVED_OPTION", "SQL92_RESERVED_OR", 
		"SQL92_RESERVED_ORDER", "SQL92_RESERVED_OVERLAPS", "SQL92_RESERVED_PRIOR", 
		"SQL92_RESERVED_PROCEDURE", "SQL92_RESERVED_PUBLIC", "SQL92_RESERVED_REVOKE", 
		"SQL92_RESERVED_SELECT", "SQL92_RESERVED_SIZE", "SQL92_RESERVED_TABLE", 
		"SQL92_RESERVED_THE", "SQL92_RESERVED_THEN", "SQL92_RESERVED_TO", "SQL92_RESERVED_TRUE", 
		"SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", "SQL92_RESERVED_UPDATE", 
		"SQL92_RESERVED_VALUES", "SQL92_RESERVED_VIEW", "SQL92_RESERVED_WHEN", 
		"SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH", "T", "TILDE_OPERATOR_PART", 
		"U", "UNDERSCORE", "UNSIGNED_INTEGER", "V", "VERTICAL_BAR", "W", "X", 
		"Y", "Z", "ZV", "ADD_VK", "AFTER_EACH_ROW", "AFTER_STATEMENT", "AFTER_VK", 
		"AGENT_VK", "AGGREGATE_VK", "ALTER_ATTRIBUTE", "ALTER_COLLECTION", "ALTER_FUNCTION", 
		"ALTER_METHOD", "ALTER_METHOD_ELEMENT", "ALTER_PACKAGE", "ALTER_PROCEDURE", 
		"ALTER_SEQUENCE", "ALTER_TRIGGER", "ALTER_TYPE", "ANALYZE_VK", "ANY_ELEMENT", 
		"ANY_MODE", "ARGUMENT", "ARGUMENTS", "ASSIGN", "ASSOCIATE_VK", "ATTRIBUTE", 
		"ATTRIBUTES", "ATTRIBUTE_NAME", "AT_VK", "AUDIT_VK", "AUTHID_VK", "AUTOMATIC_VK", 
		"AUTONOMOUS_TRANSACTION_VK", "AUTO_VK", "BATCH_VK", "BEFORE_EACH_ROW", 
		"BEFORE_STATEMENT", "BEFORE_VK", "BFILE_VK", "BINARY_DOUBLE_VK", "BINARY_FLOAT_VK", 
		"BINARY_INTEGER_VK", "BIT_VK", "BLOB_VK", "BLOCK", "BLOCK_VK", "BODY", 
		"BODY_MODE", "BODY_VK", "BOOLEAN_VK", "BOTH_VK", "BREADTH_VK", "BULK_VK", 
		"BYTE_VK", "CACHE_VK", "CALL_MODE", "CALL_VK", "CANONICAL_VK", "CASCADE_VK", 
		"CASCATED_ELEMENT", "CAST_VK", "CHARACTER_VK", "CHAR_CS_VK", "CHAR_SET_NAME", 
		"CHAR_VK", "CHR_VK", "CLOB_VK", "CLOSE_VK", "CLUSTER_VK", "COLLECTION_MODE", 
		"COLLECTION_NAME", "COLLECT_VK", "COLUMNS", "COLUMN_ALIAS", "COLUMN_NAME", 
		"COMMENT_VK", "COMMITTED_VK", "COMMIT_VK", "COMPATIBILITY_VK", "COMPILATION_UNIT", 
		"COMPILER_PARAMETER", "COMPILE_VK", "COMPOUND_DML", "COMPOUND_VK", "CONDITIONAL_INSERT", 
		"CONSTANT_VK", "CONSTRAINT_NAME", "CONSTRUCTOR_SPEC", "CONSTRUCTOR_VK", 
		"CONTENT_VK", "CONTEXT_VK", "CONTINUE_VK", "CONVERT_VK", "CORRUPT_XID_ALL_VK", 
		"CORRUPT_XID_VK", "COST_CLASS_NAME", "COST_VK", "COUNT_VK", "CREATE_FUNCTION", 
		"CREATE_PACKAGE_BODY", "CREATE_PACKAGE_SPEC", "CREATE_PROCEDURE", "CREATE_SEQUENCE", 
		"CREATE_TRIGGER", "CREATE_TYPE_BODY", "CREATE_TYPE_SPEC", "CROSS_VK", 
		"CUBE_VK", "CURRENT_USER_VK", "CURRENT_VK", "CURSOR_BASED_FOR", "CURSOR_DECLARE", 
		"CURSOR_NAME", "CUSTOMDATUM_VK", "CUSTOM_TYPE", "CYCLE_VK", "C_VK", "DATABASE_VK", 
		"DATETIME_OP", "DAY_VK", "DBTIMEZONE_VK", "DB_ROLE_CHANGE_VK", "DDL_VK", 
		"DEBUG_VK", "DECIMAL_VK", "DECOMPOSE_VK", "DECREMENT_VK", "DEC_VK", "DEFAULTS_VK", 
		"DEFAULT_VALUE", "DEFERRED_VK", "DEFINER_VK", "DENSE_RANK_VK", "DEPENDENT_HANDLING", 
		"DEPTH_VK", "DETERMINISTIC_VK", "DIMENSION_VK", "DIRECT_MODE", "DISABLE_VK", 
		"DISASSOCIATE_VK", "DIV_VK", "DML_EVENT", "DML_EVENT_ELEMENT", "DOCUMENT_VK", 
		"DOT_ASTERISK", "DOUBLE_VK", "DROP_FUNCTION", "DROP_PACKAGE", "DROP_PROCEDURE", 
		"DROP_SEQUENCE", "DROP_TRIGGER", "DROP_TYPE", "DSINTERVAL_UNCONSTRAINED_VK", 
		"DYNAMIC_RETURN", "ELEMENT", "ELEMENTS_MODE", "ELEMENT_SPEC", "ENABLE_VK", 
		"ENCODING_VK", "ENTITYESCAPING_VK", "EVALNAME_VK", "EXCEPTIONS_VK", "EXCEPTION_DECLARE", 
		"EXCEPTION_INIT_VK", "EXCEPTION_NAME", "EXCLUDE_VK", "EXECUTE_VK", "EXIT_VK", 
		"EXPLAIN_STATEMENT", "EXPR", "EXPR_LIST", "EXTERNAL_MODE", "EXTERNAL_VK", 
		"EXTRACT_VK", "FACTORING", "FIELDS", "FIELD_SPEC", "FINAL_VK", "FIRST_VALUE_VK", 
		"FIRST_VK", "FLOAT_VK", "FOLLOWING_VK", "FOLLOWS_VK", "FORALL_VK", "FORCE_VK", 
		"FOR_EACH_ROW", "FOR_LOOP", "FOR_MULTI_COLUMN", "FOR_SINGLE_COLUMN", "FULL_VK", 
		"FUNCTION_ENABLING_OVER", "FUNCTION_ENABLING_USING", "FUNCTION_ENABLING_WITHIN_OR_OVER", 
		"FUNCTION_NAME", "FUNCTION_SPEC", "GROUPING_VK", "GROUPIN_SET", "GROUP_BY_ELEMENT", 
		"HASH_VK", "HIDE_VK", "HIERARCHICAL", "HOSTED_VARIABLE", "HOSTED_VARIABLE_NAME", 
		"HOSTED_VARIABLE_ROUTINE_CALL", "HOUR_VK", "ID", "IGNORE_VK", "IMMEDIATE_VK", 
		"IMPLEMENTATION_TYPE_NAME", "INCLUDE_VK", "INCLUDING_VK", "INCREMENT_VK", 
		"INDENT_VK", "INDEXED_BY", "INDEXED_FOR", "INDEX_NAME", "INDICES_BOUND", 
		"INLINE_VK", "INNER_VK", "INOUT_VK", "INSTANTIABLE_VK", "INSTEAD_VK", 
		"INTEGER_VK", "INTERVAL_DATATYPE", "INT_VK", "INVALIDATE_VK", "ISOLATION_VK", 
		"IS_A_SET", "IS_EMPTY", "IS_INFINITE", "IS_NAN", "IS_NOT_A_SET", "IS_NOT_EMPTY", 
		"IS_NOT_INFINITE", "IS_NOT_NAN", "IS_NOT_NULL", "IS_NOT_OF_TYPE", "IS_NOT_PRESENT", 
		"IS_NULL", "IS_OF_TYPE", "IS_PRESENT", "ITERATE_VK", "JAVA_VK", "JOIN_DEF", 
		"KEEP_VK", "LABEL_DECLARE", "LABEL_NAME", "LANGUAGE_VK", "LAST_VALUE_VK", 
		"LAST_VK", "LEADING_VK", "LEFT_VK", "LIBRARY_VK", "LIKE2_VK", "LIKE4_VK", 
		"LIKEC_VK", "LIMIT_VK", "LINK_NAME", "LOCAL_VK", "LOCK_TABLE_ELEMENT", 
		"LOGIC_EXPR", "LOGOFF_VK", "LOGON_VK", "LOG_VK", "LONG_VK", "LOOP_VK", 
		"MAIN_MODEL", "MAIN_MODEL_NAME", "MAP_VK", "MAXVALUE_VK", "MEASURES_VK", 
		"MEMBER_VK", "MERGE_INSERT", "MERGE_UPDATE", "MERGE_VK", "MINUTE_VK", 
		"MINVALUE_VK", "MLSLABEL_VK", "MODEL_COLUMN", "MODEL_COLUMNS", "MODEL_EXPRESSION", 
		"MODEL_RULE", "MODEL_RULES", "MODIFIER", "MODIFY_VK", "MOD_VK", "MONTH_VK", 
		"MULTI_TABLE_MODE", "NAME_VK", "NATIVE_DATATYPE", "NATURALN_VK", "NATURAL_VK", 
		"NAV_VK", "NCHAR_CS_VK", "NCHAR_VK", "NCLOB_VK", "NESTED_TABLE_TYPE_DEF", 
		"NESTED_VK", "NEW_VK", "NOAUDIT_VK", "NOCACHE_VK", "NOCOPY_VK", "NOCYCLE_VK", 
		"NOENTITYESCAPING_VK", "NOMAXVALUE_VK", "NOMINVALUE_VK", "NON_DML", "NOORDER_VK", 
		"NOSCHEMACHECK_VK", "NOT_BETWEEN", "NOT_IN", "NOT_LIKE", "NO_VK", "NULLS_VK", 
		"NUMBER_VK", "NUMERIC_VK", "NVARCHAR2_VK", "OBJECT_AS", "OBJECT_MEMBERS", 
		"OBJECT_TYPE_DEF", "OBJECT_VK", "OFF_VK", "OLD_VK", "ONLY_VK", "OPEN_VK", 
		"ORADATA_VK", "ORDER_BY_ELEMENT", "ORDER_BY_ELEMENTS", "ORDINALITY_VK", 
		"OUTER_JOIN_SIGN", "OUT_VK", "OVERRIDING_VK", "OVER_VK", "PACKAGE_NAME", 
		"PACKAGE_VK", "PARALLEL_ENABLE_VK", "PARAMETER", "PARAMETERS", "PARAMETERS_VK", 
		"PARAMETER_NAME", "PARENT_VK", "PARTITION_VK", "PASSING_VK", "PERCENT_FOUND_VK", 
		"PERCENT_ISOPEN_VK", "PERCENT_NOTFOUND_VK", "PERCENT_ROWCOUNT_VK", "PERCENT_ROWTYPE_VK", 
		"PERCENT_TYPE_VK", "PIPELINED_VK", "PIPE_ROW", "PIPE_VK", "PIVOT_ALIAS", 
		"PIVOT_ELEMENT", "PIVOT_IN_ELEMENT", "PIVOT_VK", "PLS_INTEGER_VK", "POSITIVEN_VK", 
		"POSITIVE_VK", "PRAGMA_DECLARE", "PRAGMA_VK", "PRECEDING_VK", "PRECISION", 
		"PRECISION_VK", "PREDICTION_FUNCTION", "PROCEDURE_NAME", "PROCEDURE_SPEC", 
		"QUERY_NAME", "RAISE_VK", "RANGE_VK", "RAW_VK", "READ_VK", "REAL_VK", 
		"RECORD_NAME", "RECORD_TYPE_DECLARE", "RECORD_VAR_DECLARE", "REFERENCE_MODEL_NAME", 
		"REFERENCE_VK", "REFERENCING_VK", "REF_VK", "REJECT_VK", "RELIES_ON_VK", 
		"RENAME_VK", "REPLACE_VK", "RESPECT_VK", "RESTRICT_REFERENCES_VK", "RESULT_CACHE_VK", 
		"RETURN_VK", "REUSE_VK", "REVERSE_VK", "RIGHT_VK", "ROLLBACK_SEGMENT_NAME", 
		"ROLLBACK_VK", "ROLLUP_VK", "ROUTINE_CALL", "ROUTINE_NAME", "ROWID_VK", 
		"ROWS_VK", "ROW_VK", "RULES_VK", "SAMPLE_VK", "SAVEPOINT_NAME", "SAVEPOINT_VK", 
		"SCHEMACHECK_VK", "SCHEMA_NAME", "SCHEMA_VK", "SCN_VK", "SEARCHED_CASE", 
		"SEARCH_VK", "SECOND_VK", "SEED_VK", "SELECTED_TABLEVIEW", "SELECT_BASED_FOR", 
		"SELECT_ITEM", "SELECT_LIST", "SELECT_MODE", "SELECT_STATEMENT", "SELF_VK", 
		"SEQUENCE_NAME", "SEQUENCE_VK", "SEQUENTIAL_VK", "SERIALIZABLE_VK", "SERIALLY_REUSABLE_VK", 
		"SERVERERROR_VK", "SESSIONTIMEZONE_VK", "SET_CONSTRAINT", "SET_SERVEROUTPUT", 
		"SET_TRANSACTION", "SET_VK", "SHOW_VK", "SHUTDOWN_VK", "SIBLINGS_VK", 
		"SIGNTYPE_VK", "SIMPLE_BOUND", "SIMPLE_CASE", "SIMPLE_DML", "SIMPLE_INTEGER_VK", 
		"SINGLE_TABLE_MODE", "SINGLE_VK", "SKIP_VK", "SMALLINT_VK", "SOME_VK", 
		"SPECIFICATION_VK", "SQLDATA_VK", "SQL_SCRIPT", "STANDALONE_VK", "STANDARD_FUNCTION", 
		"STARTUP_VK", "STATEMENTS", "STATIC_RETURNING", "STATIC_VK", "STATISTICS_VK", 
		"STREAMING_CLAUSE", "STRING_VK", "SUBMULTISET_VK", "SUBPARTITION_VK", 
		"SUBQUERY", "SUBTYPE_DECLARE", "SUSPEND_VK", "TABLEVIEW_NAME", "TABLE_ALIAS", 
		"TABLE_ELEMENT", "TABLE_EXPRESSION", "TABLE_REF", "TABLE_REF_ELEMENT", 
		"TABLE_TYPE_DECLARE", "TABLE_VAR_DECLARE", "TABLE_VAR_NAME", "THREE_DOTS", 
		"TIMESTAMP_LTZ_UNCONSTRAINED_VK", "TIMESTAMP_TZ_UNCONSTRAINED_VK", "TIMESTAMP_UNCONSTRAINED_VK", 
		"TIMESTAMP_VK", "TIMEZONE_ABBR_VK", "TIMEZONE_HOUR_VK", "TIMEZONE_MINUTE_VK", 
		"TIMEZONE_REGION_VK", "TIME_VK", "TRAILING_VK", "TRANSLATE_VK", "TREAT_VK", 
		"TRIGGER_NAME", "TRIM_VK", "TRUNCATE_VK", "TYPE_BODY_ELEMENTS", "TYPE_NAME", 
		"TYPE_VK", "UNARY_OPERATOR", "UNBOUNDED_VK", "UNDER_VK", "UNLIMITED_VK", 
		"UNPIVOT_IN_ELEMENT", "UNPIVOT_VK", "UNTIL_VK", "UPDATED_VK", "UPSERT_VK", 
		"UROWID_VK", "USING_MODE", "VALIDATE_VK", "VALUES_BOUND", "VALUE_VK", 
		"VARCHAR2_VK", "VARCHAR_VK", "VARIABLE_DECLARE", "VARIABLE_NAME", "VARR_ARRAY_DEF", 
		"VECTOR_EXPR", "VERSIONS_VK", "VERSION_VK", "WAIT_VK", "WELLFORMED_VK", 
		"WHILE_LOOP", "WITHIN_VK", "WORK_VK", "WRITE_VK", "XMLAGG_VK", "XMLATTRIBUTES_VK", 
		"XMLCAST_VK", "XMLCOLATTVAL_VK", "XMLELEMENT_VK", "XMLEXISTS_VK", "XMLFOREST_VK", 
		"XMLNAMESPACES_VK", "XMLPARSE_VK", "XMLPI_VK", "XMLQUERY_VK", "XMLROOT_VK", 
		"XMLSERIALIZE_VK", "XMLTABLE_VK", "XML_ALIAS", "XML_COLUMN", "XML_COLUMN_NAME", 
		"XML_ELEMENT", "XML_VK", "YEAR_VK", "YES_VK", "YMINTERVAL_UNCONSTRAINED_VK", 
		"DATE_VK", "ORDER_VK", "START_VK"
	};
	public static final int EOF=-1;
	public static final int A=4;
	public static final int AMPERSAND=5;
	public static final int APPROXIMATE_NUM_LIT=6;
	public static final int ASSIGN_OP=7;
	public static final int ASTERISK=8;
	public static final int AT_SIGN=9;
	public static final int B=10;
	public static final int BINDVAR=11;
	public static final int BIT_STRING_LIT=12;
	public static final int C=13;
	public static final int CARRET_OPERATOR_PART=14;
	public static final int CHAR_STRING=15;
	public static final int CHAR_STRING_PERL=16;
	public static final int COLON=17;
	public static final int COMMA=18;
	public static final int COMMENT=19;
	public static final int CONCATENATION_OP=20;
	public static final int D=21;
	public static final int DELIMITED_ID=22;
	public static final int DOUBLE_ASTERISK=23;
	public static final int DOUBLE_PERIOD=24;
	public static final int E=25;
	public static final int EQUALS_OP=26;
	public static final int EXACT_NUM_LIT=27;
	public static final int EXCLAMATION_OPERATOR_PART=28;
	public static final int F=29;
	public static final int G=30;
	public static final int GREATER_THAN_OP=31;
	public static final int GREATER_THAN_OR_EQUALS_OP=32;
	public static final int H=33;
	public static final int HEX_STRING_LIT=34;
	public static final int I=35;
	public static final int INTRODUCER=36;
	public static final int J=37;
	public static final int K=38;
	public static final int L=39;
	public static final int LEFT_BRACKET=40;
	public static final int LEFT_PAREN=41;
	public static final int LESS_THAN_OP=42;
	public static final int LESS_THAN_OR_EQUALS_OP=43;
	public static final int M=44;
	public static final int MINUS_SIGN=45;
	public static final int N=46;
	public static final int NATIONAL_CHAR_STRING_LIT=47;
	public static final int NEWLINE=48;
	public static final int NOT_EQUAL_OP=49;
	public static final int O=50;
	public static final int P=51;
	public static final int PERCENT=52;
	public static final int PERIOD=53;
	public static final int PLSQL_NON_RESERVED_CONNECT_BY_ROOT=54;
	public static final int PLSQL_NON_RESERVED_ELSIF=55;
	public static final int PLSQL_NON_RESERVED_MODEL=56;
	public static final int PLSQL_NON_RESERVED_PIVOT=57;
	public static final int PLSQL_NON_RESERVED_UNPIVOT=58;
	public static final int PLSQL_NON_RESERVED_USING=59;
	public static final int PLSQL_RESERVED_CLUSTERS=60;
	public static final int PLSQL_RESERVED_COLAUTH=61;
	public static final int PLSQL_RESERVED_COMPRESS=62;
	public static final int PLSQL_RESERVED_CRASH=63;
	public static final int PLSQL_RESERVED_EXCLUSIVE=64;
	public static final int PLSQL_RESERVED_IDENTIFIED=65;
	public static final int PLSQL_RESERVED_IF=66;
	public static final int PLSQL_RESERVED_INDEX=67;
	public static final int PLSQL_RESERVED_INDEXES=68;
	public static final int PLSQL_RESERVED_LOCK=69;
	public static final int PLSQL_RESERVED_MINUS=70;
	public static final int PLSQL_RESERVED_MODE=71;
	public static final int PLSQL_RESERVED_NOCOMPRESS=72;
	public static final int PLSQL_RESERVED_NOWAIT=73;
	public static final int PLSQL_RESERVED_RESOURCE=74;
	public static final int PLSQL_RESERVED_SHARE=75;
	public static final int PLSQL_RESERVED_START=76;
	public static final int PLSQL_RESERVED_TABAUTH=77;
	public static final int PLSQL_RESERVED_VIEWS=78;
	public static final int PLUS_SIGN=79;
	public static final int PROMPT=80;
	public static final int Q=81;
	public static final int QS_ANGLE=82;
	public static final int QS_BRACE=83;
	public static final int QS_BRACK=84;
	public static final int QS_OTHER=85;
	public static final int QS_OTHER_CH=86;
	public static final int QS_PAREN=87;
	public static final int QUESTION_MARK=88;
	public static final int QUOTE=89;
	public static final int R=90;
	public static final int REGULAR_ID=91;
	public static final int RIGHT_BRACKET=92;
	public static final int RIGHT_PAREN=93;
	public static final int S=94;
	public static final int SEMICOLON=95;
	public static final int SEPARATOR=96;
	public static final int SIMPLE_LETTER=97;
	public static final int SOLIDUS=98;
	public static final int SPACE=99;
	public static final int SQL92_RESERVED_ALL=100;
	public static final int SQL92_RESERVED_ALTER=101;
	public static final int SQL92_RESERVED_AND=102;
	public static final int SQL92_RESERVED_ANY=103;
	public static final int SQL92_RESERVED_AS=104;
	public static final int SQL92_RESERVED_ASC=105;
	public static final int SQL92_RESERVED_BEGIN=106;
	public static final int SQL92_RESERVED_BETWEEN=107;
	public static final int SQL92_RESERVED_BY=108;
	public static final int SQL92_RESERVED_CASE=109;
	public static final int SQL92_RESERVED_CHECK=110;
	public static final int SQL92_RESERVED_CONNECT=111;
	public static final int SQL92_RESERVED_CREATE=112;
	public static final int SQL92_RESERVED_CURRENT=113;
	public static final int SQL92_RESERVED_CURSOR=114;
	public static final int SQL92_RESERVED_DATE=115;
	public static final int SQL92_RESERVED_DECLARE=116;
	public static final int SQL92_RESERVED_DEFAULT=117;
	public static final int SQL92_RESERVED_DELETE=118;
	public static final int SQL92_RESERVED_DESC=119;
	public static final int SQL92_RESERVED_DISTINCT=120;
	public static final int SQL92_RESERVED_DROP=121;
	public static final int SQL92_RESERVED_ELSE=122;
	public static final int SQL92_RESERVED_END=123;
	public static final int SQL92_RESERVED_EXCEPTION=124;
	public static final int SQL92_RESERVED_EXISTS=125;
	public static final int SQL92_RESERVED_FALSE=126;
	public static final int SQL92_RESERVED_FETCH=127;
	public static final int SQL92_RESERVED_FOR=128;
	public static final int SQL92_RESERVED_FROM=129;
	public static final int SQL92_RESERVED_GOTO=130;
	public static final int SQL92_RESERVED_GRANT=131;
	public static final int SQL92_RESERVED_GROUP=132;
	public static final int SQL92_RESERVED_HAVING=133;
	public static final int SQL92_RESERVED_IN=134;
	public static final int SQL92_RESERVED_INSERT=135;
	public static final int SQL92_RESERVED_INTERSECT=136;
	public static final int SQL92_RESERVED_INTO=137;
	public static final int SQL92_RESERVED_IS=138;
	public static final int SQL92_RESERVED_LIKE=139;
	public static final int SQL92_RESERVED_NOT=140;
	public static final int SQL92_RESERVED_NULL=141;
	public static final int SQL92_RESERVED_OF=142;
	public static final int SQL92_RESERVED_ON=143;
	public static final int SQL92_RESERVED_OPTION=144;
	public static final int SQL92_RESERVED_OR=145;
	public static final int SQL92_RESERVED_ORDER=146;
	public static final int SQL92_RESERVED_OVERLAPS=147;
	public static final int SQL92_RESERVED_PRIOR=148;
	public static final int SQL92_RESERVED_PROCEDURE=149;
	public static final int SQL92_RESERVED_PUBLIC=150;
	public static final int SQL92_RESERVED_REVOKE=151;
	public static final int SQL92_RESERVED_SELECT=152;
	public static final int SQL92_RESERVED_SIZE=153;
	public static final int SQL92_RESERVED_TABLE=154;
	public static final int SQL92_RESERVED_THE=155;
	public static final int SQL92_RESERVED_THEN=156;
	public static final int SQL92_RESERVED_TO=157;
	public static final int SQL92_RESERVED_TRUE=158;
	public static final int SQL92_RESERVED_UNION=159;
	public static final int SQL92_RESERVED_UNIQUE=160;
	public static final int SQL92_RESERVED_UPDATE=161;
	public static final int SQL92_RESERVED_VALUES=162;
	public static final int SQL92_RESERVED_VIEW=163;
	public static final int SQL92_RESERVED_WHEN=164;
	public static final int SQL92_RESERVED_WHERE=165;
	public static final int SQL92_RESERVED_WITH=166;
	public static final int T=167;
	public static final int TILDE_OPERATOR_PART=168;
	public static final int U=169;
	public static final int UNDERSCORE=170;
	public static final int UNSIGNED_INTEGER=171;
	public static final int V=172;
	public static final int VERTICAL_BAR=173;
	public static final int W=174;
	public static final int X=175;
	public static final int Y=176;
	public static final int Z=177;
	public static final int ZV=178;
	public static final int ADD_VK=179;
	public static final int AFTER_EACH_ROW=180;
	public static final int AFTER_STATEMENT=181;
	public static final int AFTER_VK=182;
	public static final int AGENT_VK=183;
	public static final int AGGREGATE_VK=184;
	public static final int ALTER_ATTRIBUTE=185;
	public static final int ALTER_COLLECTION=186;
	public static final int ALTER_FUNCTION=187;
	public static final int ALTER_METHOD=188;
	public static final int ALTER_METHOD_ELEMENT=189;
	public static final int ALTER_PACKAGE=190;
	public static final int ALTER_PROCEDURE=191;
	public static final int ALTER_SEQUENCE=192;
	public static final int ALTER_TRIGGER=193;
	public static final int ALTER_TYPE=194;
	public static final int ANALYZE_VK=195;
	public static final int ANY_ELEMENT=196;
	public static final int ANY_MODE=197;
	public static final int ARGUMENT=199;
	public static final int ARGUMENTS=200;
	public static final int ASSIGN=201;
	public static final int ASSOCIATE_VK=202;
	public static final int ATTRIBUTE=204;
	public static final int ATTRIBUTES=205;
	public static final int ATTRIBUTE_NAME=206;
	public static final int AT_VK=208;
	public static final int AUDIT_VK=209;
	public static final int AUTHID_VK=210;
	public static final int AUTOMATIC_VK=211;
	public static final int AUTONOMOUS_TRANSACTION_VK=212;
	public static final int AUTO_VK=213;
	public static final int BATCH_VK=214;
	public static final int BEFORE_EACH_ROW=215;
	public static final int BEFORE_STATEMENT=216;
	public static final int BEFORE_VK=217;
	public static final int BFILE_VK=218;
	public static final int BINARY_DOUBLE_VK=219;
	public static final int BINARY_FLOAT_VK=220;
	public static final int BINARY_INTEGER_VK=221;
	public static final int BIT_VK=223;
	public static final int BLOB_VK=224;
	public static final int BLOCK=225;
	public static final int BLOCK_VK=226;
	public static final int BODY=227;
	public static final int BODY_MODE=228;
	public static final int BODY_VK=229;
	public static final int BOOLEAN_VK=230;
	public static final int BOTH_VK=231;
	public static final int BREADTH_VK=232;
	public static final int BULK_VK=233;
	public static final int BYTE_VK=234;
	public static final int CACHE_VK=235;
	public static final int CALL_MODE=236;
	public static final int CALL_VK=237;
	public static final int CANONICAL_VK=238;
	public static final int CASCADE_VK=240;
	public static final int CASCATED_ELEMENT=241;
	public static final int CAST_VK=242;
	public static final int CHARACTER_VK=243;
	public static final int CHAR_CS_VK=244;
	public static final int CHAR_SET_NAME=245;
	public static final int CHAR_VK=248;
	public static final int CHR_VK=249;
	public static final int CLOB_VK=250;
	public static final int CLOSE_VK=251;
	public static final int CLUSTER_VK=252;
	public static final int COLLECTION_MODE=253;
	public static final int COLLECTION_NAME=254;
	public static final int COLLECT_VK=255;
	public static final int COLUMNS=257;
	public static final int COLUMN_ALIAS=258;
	public static final int COLUMN_NAME=259;
	public static final int COMMENT_VK=261;
	public static final int COMMITTED_VK=262;
	public static final int COMMIT_VK=263;
	public static final int COMPATIBILITY_VK=264;
	public static final int COMPILATION_UNIT=265;
	public static final int COMPILER_PARAMETER=266;
	public static final int COMPILE_VK=267;
	public static final int COMPOUND_DML=268;
	public static final int COMPOUND_VK=269;
	public static final int CONDITIONAL_INSERT=271;
	public static final int CONSTANT_VK=272;
	public static final int CONSTRAINT_NAME=273;
	public static final int CONSTRUCTOR_SPEC=274;
	public static final int CONSTRUCTOR_VK=275;
	public static final int CONTENT_VK=276;
	public static final int CONTEXT_VK=277;
	public static final int CONTINUE_VK=278;
	public static final int CONVERT_VK=279;
	public static final int CORRUPT_XID_ALL_VK=280;
	public static final int CORRUPT_XID_VK=281;
	public static final int COST_CLASS_NAME=282;
	public static final int COST_VK=283;
	public static final int COUNT_VK=284;
	public static final int CREATE_FUNCTION=285;
	public static final int CREATE_PACKAGE_BODY=286;
	public static final int CREATE_PACKAGE_SPEC=287;
	public static final int CREATE_PROCEDURE=288;
	public static final int CREATE_SEQUENCE=289;
	public static final int CREATE_TRIGGER=290;
	public static final int CREATE_TYPE_BODY=291;
	public static final int CREATE_TYPE_SPEC=292;
	public static final int CROSS_VK=293;
	public static final int CUBE_VK=294;
	public static final int CURRENT_USER_VK=295;
	public static final int CURRENT_VK=296;
	public static final int CURSOR_BASED_FOR=297;
	public static final int CURSOR_DECLARE=298;
	public static final int CURSOR_NAME=299;
	public static final int CUSTOMDATUM_VK=300;
	public static final int CUSTOM_TYPE=301;
	public static final int CYCLE_VK=302;
	public static final int C_VK=303;
	public static final int DATABASE_VK=304;
	public static final int DATETIME_OP=305;
	public static final int DAY_VK=306;
	public static final int DBTIMEZONE_VK=307;
	public static final int DB_ROLE_CHANGE_VK=308;
	public static final int DDL_VK=309;
	public static final int DEBUG_VK=310;
	public static final int DECIMAL_VK=311;
	public static final int DECOMPOSE_VK=312;
	public static final int DECREMENT_VK=313;
	public static final int DEC_VK=314;
	public static final int DEFAULTS_VK=315;
	public static final int DEFAULT_VALUE=316;
	public static final int DEFERRED_VK=317;
	public static final int DEFINER_VK=318;
	public static final int DENSE_RANK_VK=320;
	public static final int DEPENDENT_HANDLING=321;
	public static final int DEPTH_VK=322;
	public static final int DETERMINISTIC_VK=323;
	public static final int DIMENSION_VK=324;
	public static final int DIRECT_MODE=325;
	public static final int DISABLE_VK=326;
	public static final int DISASSOCIATE_VK=327;
	public static final int DIV_VK=328;
	public static final int DML_EVENT=329;
	public static final int DML_EVENT_ELEMENT=330;
	public static final int DOCUMENT_VK=331;
	public static final int DOT_ASTERISK=332;
	public static final int DOUBLE_VK=333;
	public static final int DROP_FUNCTION=334;
	public static final int DROP_PACKAGE=335;
	public static final int DROP_PROCEDURE=336;
	public static final int DROP_SEQUENCE=337;
	public static final int DROP_TRIGGER=338;
	public static final int DROP_TYPE=339;
	public static final int DSINTERVAL_UNCONSTRAINED_VK=340;
	public static final int DYNAMIC_RETURN=341;
	public static final int ELEMENT=342;
	public static final int ELEMENTS_MODE=343;
	public static final int ELEMENT_SPEC=344;
	public static final int ENABLE_VK=345;
	public static final int ENCODING_VK=346;
	public static final int ENTITYESCAPING_VK=347;
	public static final int EVALNAME_VK=349;
	public static final int EXCEPTIONS_VK=351;
	public static final int EXCEPTION_DECLARE=352;
	public static final int EXCEPTION_INIT_VK=353;
	public static final int EXCEPTION_NAME=354;
	public static final int EXCLUDE_VK=356;
	public static final int EXECUTE_VK=357;
	public static final int EXIT_VK=358;
	public static final int EXPLAIN_STATEMENT=359;
	public static final int EXPR=360;
	public static final int EXPR_LIST=361;
	public static final int EXTERNAL_MODE=362;
	public static final int EXTERNAL_VK=363;
	public static final int EXTRACT_VK=364;
	public static final int FACTORING=365;
	public static final int FIELDS=366;
	public static final int FIELD_SPEC=367;
	public static final int FINAL_VK=368;
	public static final int FIRST_VALUE_VK=369;
	public static final int FIRST_VK=370;
	public static final int FLOAT_VK=371;
	public static final int FOLLOWING_VK=372;
	public static final int FOLLOWS_VK=373;
	public static final int FORALL_VK=374;
	public static final int FORCE_VK=375;
	public static final int FOR_EACH_ROW=376;
	public static final int FOR_LOOP=377;
	public static final int FOR_MULTI_COLUMN=378;
	public static final int FOR_SINGLE_COLUMN=379;
	public static final int FULL_VK=380;
	public static final int FUNCTION_ENABLING_OVER=381;
	public static final int FUNCTION_ENABLING_USING=382;
	public static final int FUNCTION_ENABLING_WITHIN_OR_OVER=383;
	public static final int FUNCTION_NAME=384;
	public static final int FUNCTION_SPEC=385;
	public static final int GROUPING_VK=388;
	public static final int GROUPIN_SET=389;
	public static final int GROUP_BY_ELEMENT=390;
	public static final int HASH_VK=391;
	public static final int HIDE_VK=392;
	public static final int HIERARCHICAL=393;
	public static final int HOSTED_VARIABLE=394;
	public static final int HOSTED_VARIABLE_NAME=395;
	public static final int HOSTED_VARIABLE_ROUTINE_CALL=396;
	public static final int HOUR_VK=397;
	public static final int ID=398;
	public static final int IGNORE_VK=399;
	public static final int IMMEDIATE_VK=400;
	public static final int IMPLEMENTATION_TYPE_NAME=401;
	public static final int INCLUDE_VK=402;
	public static final int INCLUDING_VK=403;
	public static final int INCREMENT_VK=404;
	public static final int INDENT_VK=405;
	public static final int INDEXED_BY=406;
	public static final int INDEXED_FOR=407;
	public static final int INDEX_NAME=408;
	public static final int INDICES_BOUND=409;
	public static final int INLINE_VK=410;
	public static final int INNER_VK=411;
	public static final int INOUT_VK=412;
	public static final int INSTANTIABLE_VK=413;
	public static final int INSTEAD_VK=414;
	public static final int INTEGER_VK=415;
	public static final int INTERVAL_DATATYPE=416;
	public static final int INT_VK=418;
	public static final int INVALIDATE_VK=419;
	public static final int ISOLATION_VK=420;
	public static final int IS_A_SET=421;
	public static final int IS_EMPTY=422;
	public static final int IS_INFINITE=423;
	public static final int IS_NAN=424;
	public static final int IS_NOT_A_SET=425;
	public static final int IS_NOT_EMPTY=426;
	public static final int IS_NOT_INFINITE=427;
	public static final int IS_NOT_NAN=428;
	public static final int IS_NOT_NULL=429;
	public static final int IS_NOT_OF_TYPE=430;
	public static final int IS_NOT_PRESENT=431;
	public static final int IS_NULL=432;
	public static final int IS_OF_TYPE=433;
	public static final int IS_PRESENT=434;
	public static final int ITERATE_VK=435;
	public static final int JAVA_VK=436;
	public static final int JOIN_DEF=437;
	public static final int KEEP_VK=438;
	public static final int LABEL_DECLARE=439;
	public static final int LABEL_NAME=440;
	public static final int LANGUAGE_VK=441;
	public static final int LAST_VALUE_VK=442;
	public static final int LAST_VK=443;
	public static final int LEADING_VK=444;
	public static final int LEFT_VK=447;
	public static final int LIBRARY_VK=450;
	public static final int LIKE2_VK=451;
	public static final int LIKE4_VK=452;
	public static final int LIKEC_VK=453;
	public static final int LIMIT_VK=454;
	public static final int LINK_NAME=455;
	public static final int LOCAL_VK=456;
	public static final int LOCK_TABLE_ELEMENT=457;
	public static final int LOGIC_EXPR=458;
	public static final int LOGOFF_VK=459;
	public static final int LOGON_VK=460;
	public static final int LOG_VK=461;
	public static final int LONG_VK=462;
	public static final int LOOP_VK=463;
	public static final int MAIN_MODEL=464;
	public static final int MAIN_MODEL_NAME=465;
	public static final int MAP_VK=466;
	public static final int MAXVALUE_VK=467;
	public static final int MEASURES_VK=468;
	public static final int MEMBER_VK=469;
	public static final int MERGE_INSERT=470;
	public static final int MERGE_UPDATE=471;
	public static final int MERGE_VK=472;
	public static final int MINUTE_VK=474;
	public static final int MINVALUE_VK=475;
	public static final int MLSLABEL_VK=476;
	public static final int MODEL_COLUMN=477;
	public static final int MODEL_COLUMNS=478;
	public static final int MODEL_EXPRESSION=479;
	public static final int MODEL_RULE=480;
	public static final int MODEL_RULES=481;
	public static final int MODIFIER=482;
	public static final int MODIFY_VK=483;
	public static final int MOD_VK=484;
	public static final int MONTH_VK=485;
	public static final int MULTI_TABLE_MODE=486;
	public static final int NAME_VK=487;
	public static final int NATIVE_DATATYPE=489;
	public static final int NATURALN_VK=490;
	public static final int NATURAL_VK=491;
	public static final int NAV_VK=492;
	public static final int NCHAR_CS_VK=493;
	public static final int NCHAR_VK=494;
	public static final int NCLOB_VK=495;
	public static final int NESTED_TABLE_TYPE_DEF=496;
	public static final int NESTED_VK=497;
	public static final int NEW_VK=498;
	public static final int NOAUDIT_VK=499;
	public static final int NOCACHE_VK=500;
	public static final int NOCOPY_VK=501;
	public static final int NOCYCLE_VK=502;
	public static final int NOENTITYESCAPING_VK=503;
	public static final int NOMAXVALUE_VK=504;
	public static final int NOMINVALUE_VK=505;
	public static final int NON_DML=506;
	public static final int NOORDER_VK=507;
	public static final int NOSCHEMACHECK_VK=508;
	public static final int NOT_BETWEEN=509;
	public static final int NOT_IN=511;
	public static final int NOT_LIKE=512;
	public static final int NO_VK=513;
	public static final int NULLS_VK=514;
	public static final int NUMBER_VK=515;
	public static final int NUMERIC_VK=516;
	public static final int NVARCHAR2_VK=517;
	public static final int OBJECT_AS=518;
	public static final int OBJECT_MEMBERS=519;
	public static final int OBJECT_TYPE_DEF=520;
	public static final int OBJECT_VK=521;
	public static final int OFF_VK=522;
	public static final int OLD_VK=523;
	public static final int ONLY_VK=524;
	public static final int OPEN_VK=525;
	public static final int ORADATA_VK=526;
	public static final int ORDER_BY_ELEMENT=527;
	public static final int ORDER_BY_ELEMENTS=528;
	public static final int ORDINALITY_VK=529;
	public static final int OUTER_JOIN_SIGN=530;
	public static final int OUT_VK=531;
	public static final int OVERRIDING_VK=532;
	public static final int OVER_VK=533;
	public static final int PACKAGE_NAME=534;
	public static final int PACKAGE_VK=535;
	public static final int PARALLEL_ENABLE_VK=536;
	public static final int PARAMETER=537;
	public static final int PARAMETERS=538;
	public static final int PARAMETERS_VK=539;
	public static final int PARAMETER_NAME=540;
	public static final int PARENT_VK=541;
	public static final int PARTITION_VK=542;
	public static final int PASSING_VK=543;
	public static final int PERCENT_FOUND_VK=545;
	public static final int PERCENT_ISOPEN_VK=546;
	public static final int PERCENT_NOTFOUND_VK=547;
	public static final int PERCENT_ROWCOUNT_VK=548;
	public static final int PERCENT_ROWTYPE_VK=549;
	public static final int PERCENT_TYPE_VK=550;
	public static final int PIPELINED_VK=552;
	public static final int PIPE_ROW=553;
	public static final int PIPE_VK=554;
	public static final int PIVOT_ALIAS=555;
	public static final int PIVOT_ELEMENT=556;
	public static final int PIVOT_IN_ELEMENT=557;
	public static final int PIVOT_VK=558;
	public static final int PLS_INTEGER_VK=573;
	public static final int POSITIVEN_VK=575;
	public static final int POSITIVE_VK=576;
	public static final int PRAGMA_DECLARE=577;
	public static final int PRAGMA_VK=578;
	public static final int PRECEDING_VK=579;
	public static final int PRECISION=580;
	public static final int PRECISION_VK=581;
	public static final int PREDICTION_FUNCTION=582;
	public static final int PROCEDURE_NAME=583;
	public static final int PROCEDURE_SPEC=584;
	public static final int QUERY_NAME=586;
	public static final int RAISE_VK=587;
	public static final int RANGE_VK=588;
	public static final int RAW_VK=589;
	public static final int READ_VK=590;
	public static final int REAL_VK=591;
	public static final int RECORD_NAME=592;
	public static final int RECORD_TYPE_DECLARE=593;
	public static final int RECORD_VAR_DECLARE=594;
	public static final int REFERENCE_MODEL_NAME=595;
	public static final int REFERENCE_VK=596;
	public static final int REFERENCING_VK=597;
	public static final int REF_VK=598;
	public static final int REJECT_VK=600;
	public static final int RELIES_ON_VK=601;
	public static final int RENAME_VK=602;
	public static final int REPLACE_VK=603;
	public static final int RESPECT_VK=604;
	public static final int RESTRICT_REFERENCES_VK=605;
	public static final int RESULT_CACHE_VK=606;
	public static final int RETURN_VK=607;
	public static final int REUSE_VK=608;
	public static final int REVERSE_VK=609;
	public static final int RIGHT_VK=612;
	public static final int ROLLBACK_SEGMENT_NAME=613;
	public static final int ROLLBACK_VK=614;
	public static final int ROLLUP_VK=615;
	public static final int ROUTINE_CALL=616;
	public static final int ROUTINE_NAME=617;
	public static final int ROWID_VK=618;
	public static final int ROWS_VK=619;
	public static final int ROW_VK=620;
	public static final int RULES_VK=621;
	public static final int SAMPLE_VK=622;
	public static final int SAVEPOINT_NAME=623;
	public static final int SAVEPOINT_VK=624;
	public static final int SCHEMACHECK_VK=625;
	public static final int SCHEMA_NAME=626;
	public static final int SCHEMA_VK=627;
	public static final int SCN_VK=628;
	public static final int SEARCHED_CASE=629;
	public static final int SEARCH_VK=630;
	public static final int SECOND_VK=631;
	public static final int SEED_VK=632;
	public static final int SELECTED_TABLEVIEW=633;
	public static final int SELECT_BASED_FOR=634;
	public static final int SELECT_ITEM=635;
	public static final int SELECT_LIST=636;
	public static final int SELECT_MODE=637;
	public static final int SELECT_STATEMENT=638;
	public static final int SELF_VK=639;
	public static final int SEQUENCE_NAME=641;
	public static final int SEQUENCE_VK=642;
	public static final int SEQUENTIAL_VK=643;
	public static final int SERIALIZABLE_VK=644;
	public static final int SERIALLY_REUSABLE_VK=645;
	public static final int SERVERERROR_VK=646;
	public static final int SESSIONTIMEZONE_VK=647;
	public static final int SET_CONSTRAINT=648;
	public static final int SET_SERVEROUTPUT=649;
	public static final int SET_TRANSACTION=650;
	public static final int SET_VK=651;
	public static final int SHOW_VK=652;
	public static final int SHUTDOWN_VK=653;
	public static final int SIBLINGS_VK=654;
	public static final int SIGNTYPE_VK=655;
	public static final int SIMPLE_BOUND=656;
	public static final int SIMPLE_CASE=657;
	public static final int SIMPLE_DML=658;
	public static final int SIMPLE_INTEGER_VK=659;
	public static final int SINGLE_TABLE_MODE=660;
	public static final int SINGLE_VK=661;
	public static final int SKIP_VK=662;
	public static final int SMALLINT_VK=663;
	public static final int SOME_VK=665;
	public static final int SPECIFICATION_VK=666;
	public static final int SQLDATA_VK=731;
	public static final int SQL_SCRIPT=732;
	public static final int STANDALONE_VK=733;
	public static final int STANDARD_FUNCTION=734;
	public static final int STARTUP_VK=735;
	public static final int STATEMENTS=736;
	public static final int STATIC_RETURNING=737;
	public static final int STATIC_VK=738;
	public static final int STATISTICS_VK=739;
	public static final int STREAMING_CLAUSE=740;
	public static final int STRING_VK=741;
	public static final int SUBMULTISET_VK=742;
	public static final int SUBPARTITION_VK=743;
	public static final int SUBQUERY=744;
	public static final int SUBTYPE_DECLARE=745;
	public static final int SUSPEND_VK=746;
	public static final int TABLEVIEW_NAME=747;
	public static final int TABLE_ALIAS=748;
	public static final int TABLE_ELEMENT=749;
	public static final int TABLE_EXPRESSION=750;
	public static final int TABLE_REF=751;
	public static final int TABLE_REF_ELEMENT=752;
	public static final int TABLE_TYPE_DECLARE=753;
	public static final int TABLE_VAR_DECLARE=754;
	public static final int TABLE_VAR_NAME=755;
	public static final int THREE_DOTS=756;
	public static final int TIMESTAMP_LTZ_UNCONSTRAINED_VK=757;
	public static final int TIMESTAMP_TZ_UNCONSTRAINED_VK=758;
	public static final int TIMESTAMP_UNCONSTRAINED_VK=759;
	public static final int TIMESTAMP_VK=760;
	public static final int TIMEZONE_ABBR_VK=761;
	public static final int TIMEZONE_HOUR_VK=762;
	public static final int TIMEZONE_MINUTE_VK=763;
	public static final int TIMEZONE_REGION_VK=764;
	public static final int TIME_VK=765;
	public static final int TRAILING_VK=766;
	public static final int TRANSLATE_VK=767;
	public static final int TREAT_VK=768;
	public static final int TRIGGER_NAME=769;
	public static final int TRIM_VK=770;
	public static final int TRUNCATE_VK=771;
	public static final int TYPE_BODY_ELEMENTS=772;
	public static final int TYPE_NAME=773;
	public static final int TYPE_VK=774;
	public static final int UNARY_OPERATOR=775;
	public static final int UNBOUNDED_VK=776;
	public static final int UNDER_VK=777;
	public static final int UNLIMITED_VK=778;
	public static final int UNPIVOT_IN_ELEMENT=779;
	public static final int UNPIVOT_VK=780;
	public static final int UNTIL_VK=782;
	public static final int UPDATED_VK=783;
	public static final int UPSERT_VK=784;
	public static final int UROWID_VK=785;
	public static final int USING_MODE=786;
	public static final int VALIDATE_VK=787;
	public static final int VALUES_BOUND=788;
	public static final int VALUE_VK=789;
	public static final int VARCHAR2_VK=790;
	public static final int VARCHAR_VK=791;
	public static final int VARIABLE_DECLARE=792;
	public static final int VARIABLE_NAME=793;
	public static final int VARR_ARRAY_DEF=794;
	public static final int VECTOR_EXPR=795;
	public static final int VERSIONS_VK=796;
	public static final int VERSION_VK=797;
	public static final int WAIT_VK=799;
	public static final int WELLFORMED_VK=800;
	public static final int WHILE_LOOP=801;
	public static final int WITHIN_VK=802;
	public static final int WORK_VK=803;
	public static final int WRITE_VK=804;
	public static final int XMLAGG_VK=805;
	public static final int XMLATTRIBUTES_VK=806;
	public static final int XMLCAST_VK=807;
	public static final int XMLCOLATTVAL_VK=808;
	public static final int XMLELEMENT_VK=809;
	public static final int XMLEXISTS_VK=810;
	public static final int XMLFOREST_VK=811;
	public static final int XMLNAMESPACES_VK=812;
	public static final int XMLPARSE_VK=813;
	public static final int XMLPI_VK=814;
	public static final int XMLQUERY_VK=815;
	public static final int XMLROOT_VK=816;
	public static final int XMLSERIALIZE_VK=817;
	public static final int XMLTABLE_VK=818;
	public static final int XML_ALIAS=819;
	public static final int XML_COLUMN=820;
	public static final int XML_COLUMN_NAME=821;
	public static final int XML_ELEMENT=822;
	public static final int XML_VK=823;
	public static final int YEAR_VK=824;
	public static final int YES_VK=825;
	public static final int YMINTERVAL_UNCONSTRAINED_VK=826;
	public static final int DATE_VK=827;
	public static final int ORDER_VK=828;
	public static final int START_VK=829;

	// delegates
	public TreeParser[] getDelegates() {
		return new TreeParser[] {};
	}

	// delegators


	public PLSQLPrinter(TreeNodeStream input) {
		this(input, new RecognizerSharedState());
	}
	public PLSQLPrinter(TreeNodeStream input, RecognizerSharedState state) {
		super(input, state);
	}

	protected StringTemplateGroup templateLib =
	  new StringTemplateGroup("PLSQLPrinterTemplates", AngleBracketTemplateLexer.class);

	public void setTemplateLib(StringTemplateGroup templateLib) {
	  this.templateLib = templateLib;
	}
	public StringTemplateGroup getTemplateLib() {
	  return templateLib;
	}
	/** allows convenient multi-value initialization:
	 *  "new STAttrMap().put(...).put(...)"
	 */
	@SuppressWarnings("serial")
	public static class STAttrMap extends HashMap<String, Object> {
		public STAttrMap put(String attrName, Object value) {
			super.put(attrName, value);
			return this;
		}
	}
	@Override public String[] getTokenNames() { return PLSQLPrinter.tokenNames; }
	@Override public String getGrammarFileName() { return "PLSQLPrinter.g"; }



	  static String[] correctTokenNames = getCorrectTokenNames();

	  static String[] getCorrectTokenNames() {
	    // This is workaround for bug in antlr3 (at least in 3.5.2)
	    java.lang.reflect.Field[] fields = PLSQLPrinter.class.getDeclaredFields();
	    java.util.Map<Integer, String> tokenNamesMap = new java.util.HashMap<Integer, String>();
	    int maxTokenValue = 0;
	    for (java.lang.reflect.Field field: fields) {
	      int mod = field.getModifiers();
	      if (java.lang.reflect.Modifier.isStatic(mod) && java.lang.reflect.Modifier.isFinal(mod) && field.getType() == int.class) {
	        String name = field.getName();
	        int value;
	        try {
	          value = field.getInt(null);
	        } catch (Exception e) {
	          throw new RuntimeException(e);
	        }
	        tokenNamesMap.put(value, name);
	        maxTokenValue = Math.max(maxTokenValue, value);
	      }
	    }
	    String[] result = new String[maxTokenValue + 1];
	    for (int i = 0; i < maxTokenValue; ++i) {
	      if (tokenNamesMap.containsKey(i)) {
	        result[i] = tokenNamesMap.get(i);
	      } else {
	        result[i] = "<none>";
	      }
	    }
	    return result;
	  }
	  
	  
	  public void reportError(RecognitionException e) {
	    // if we've already reported an error and have not matched a token
	    // yet successfully, don't report any errors.
	    if ( state.errorRecovery ) {
	      //System.err.print("[SPURIOUS] ");
	      return;
	    }
	    state.syntaxErrors++; // don't count spurious
	    state.errorRecovery = true;

	    displayRecognitionError(correctTokenNames, e);
	  }



	public static class compilation_unit_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "compilation_unit"
	// PLSQLPrinter.g:74:1: compilation_unit : ^( COMPILATION_UNIT (u+= unit_statement )* ) -> template(statements=$u) <<\n<statements:{v|<v>}; separator=\"\\n\\n\">\n>>;
	public final PLSQLPrinter.compilation_unit_return compilation_unit() throws RecognitionException {
		PLSQLPrinter.compilation_unit_return retval = new PLSQLPrinter.compilation_unit_return();
		retval.start = input.LT(1);

		List<Object> list_u=null;
		RuleReturnScope u = null;
		try {
			// PLSQLPrinter.g:75:5: ( ^( COMPILATION_UNIT (u+= unit_statement )* ) -> template(statements=$u) <<\n<statements:{v|<v>}; separator=\"\\n\\n\">\n>>)
			// PLSQLPrinter.g:75:10: ^( COMPILATION_UNIT (u+= unit_statement )* )
			{
			match(input,COMPILATION_UNIT,FOLLOW_COMPILATION_UNIT_in_compilation_unit69); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:75:30: (u+= unit_statement )*
				loop1:
				while (true) {
					int alt1=2;
					int LA1_0 = input.LA(1);
					if ( (LA1_0==ALTER_FUNCTION||(LA1_0 >= ALTER_PACKAGE && LA1_0 <= ALTER_TYPE)||(LA1_0 >= CREATE_FUNCTION && LA1_0 <= CREATE_TYPE_SPEC)||(LA1_0 >= DROP_FUNCTION && LA1_0 <= DROP_TYPE)) ) {
						alt1=1;
					}

					switch (alt1) {
					case 1 :
						// PLSQLPrinter.g:75:30: u+= unit_statement
						{
						pushFollow(FOLLOW_unit_statement_in_compilation_unit73);
						u=unit_statement();
						state._fsp--;

						if (list_u==null) list_u=new ArrayList<Object>();
						list_u.add(u.getTemplate());
						}
						break;

					default :
						break loop1;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 76:5: -> template(statements=$u) <<\n<statements:{v|<v>}; separator=\"\\n\\n\">\n>>
			{
				retval.st = new StringTemplate(templateLib, "\n<statements:{v|<v>}; separator=\"\\n\\n\">\n",new STAttrMap().put("statements", list_u));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compilation_unit"


	public static class sql_script_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sql_script"
	// PLSQLPrinter.g:82:1: sql_script : ^( SQL_SCRIPT (u+= unit_statement )* ) -> template(statements=$u) <<\n<statements; separator=\"\\n\\n\">\n>>;
	public final PLSQLPrinter.sql_script_return sql_script() throws RecognitionException {
		PLSQLPrinter.sql_script_return retval = new PLSQLPrinter.sql_script_return();
		retval.start = input.LT(1);

		List<Object> list_u=null;
		RuleReturnScope u = null;
		try {
			// PLSQLPrinter.g:83:5: ( ^( SQL_SCRIPT (u+= unit_statement )* ) -> template(statements=$u) <<\n<statements; separator=\"\\n\\n\">\n>>)
			// PLSQLPrinter.g:83:10: ^( SQL_SCRIPT (u+= unit_statement )* )
			{
			match(input,SQL_SCRIPT,FOLLOW_SQL_SCRIPT_in_sql_script112); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:83:24: (u+= unit_statement )*
				loop2:
				while (true) {
					int alt2=2;
					int LA2_0 = input.LA(1);
					if ( (LA2_0==ALTER_FUNCTION||(LA2_0 >= ALTER_PACKAGE && LA2_0 <= ALTER_TYPE)||(LA2_0 >= CREATE_FUNCTION && LA2_0 <= CREATE_TYPE_SPEC)||(LA2_0 >= DROP_FUNCTION && LA2_0 <= DROP_TYPE)) ) {
						alt2=1;
					}

					switch (alt2) {
					case 1 :
						// PLSQLPrinter.g:83:24: u+= unit_statement
						{
						pushFollow(FOLLOW_unit_statement_in_sql_script116);
						u=unit_statement();
						state._fsp--;

						if (list_u==null) list_u=new ArrayList<Object>();
						list_u.add(u.getTemplate());
						}
						break;

					default :
						break loop2;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 84:5: -> template(statements=$u) <<\n<statements; separator=\"\\n\\n\">\n>>
			{
				retval.st = new StringTemplate(templateLib, "\n<statements; separator=\"\\n\\n\">\n",new STAttrMap().put("statements", list_u));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sql_script"


	public static class serveroutput_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "serveroutput_declaration"
	// PLSQLPrinter.g:90:1: serveroutput_declaration : ^( SET_SERVEROUTPUT ( SQL92_RESERVED_ON | OFF_VK ) ) -> template( \"not implemented: serveroutput_declaration\";
	public final PLSQLPrinter.serveroutput_declaration_return serveroutput_declaration() throws RecognitionException {
		PLSQLPrinter.serveroutput_declaration_return retval = new PLSQLPrinter.serveroutput_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:91:5: ( ^( SET_SERVEROUTPUT ( SQL92_RESERVED_ON | OFF_VK ) ) -> template( \"not implemented: serveroutput_declaration\")
			// PLSQLPrinter.g:91:10: ^( SET_SERVEROUTPUT ( SQL92_RESERVED_ON | OFF_VK ) )
			{
			match(input,SET_SERVEROUTPUT,FOLLOW_SET_SERVEROUTPUT_in_serveroutput_declaration155); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:91:29: ( SQL92_RESERVED_ON | OFF_VK )
			int alt3=2;
			int LA3_0 = input.LA(1);
			if ( (LA3_0==SQL92_RESERVED_ON) ) {
				alt3=1;
			}
			else if ( (LA3_0==OFF_VK) ) {
				alt3=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 3, 0, input);
				throw nvae;
			}

			switch (alt3) {
				case 1 :
					// PLSQLPrinter.g:91:30: SQL92_RESERVED_ON
					{
					match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_serveroutput_declaration158); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:91:48: OFF_VK
					{
					match(input,OFF_VK,FOLLOW_OFF_VK_in_serveroutput_declaration160); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 92:5: -> template( \"not implemented: serveroutput_declaration\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: serveroutput_declaration");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "serveroutput_declaration"


	public static class unit_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unit_statement"
	// PLSQLPrinter.g:95:1: unit_statement : ( alter_function -> { $alter_function.st }| alter_package -> { $alter_package.st}| alter_procedure -> { $alter_procedure.st}| alter_sequence -> { $alter_sequence.st}| alter_trigger -> { $alter_trigger.st}| alter_type -> { $alter_type.st}| create_function_body -> { $create_function_body.st; }| create_procedure_body -> { $create_procedure_body.st}| create_package -> { $create_package.st}| create_sequence -> { $create_sequence.st}| create_trigger -> { $create_trigger.st}| create_type -> { $create_type.st}| drop_function -> { $drop_function.st}| drop_package -> { $drop_package.st}| drop_procedure -> { $drop_procedure.st}| drop_sequence -> { $drop_sequence.st}| drop_trigger -> { $drop_trigger.st}| drop_type -> { $drop_type.st});
	public final PLSQLPrinter.unit_statement_return unit_statement() throws RecognitionException {
		PLSQLPrinter.unit_statement_return retval = new PLSQLPrinter.unit_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope alter_function1 =null;
		TreeRuleReturnScope alter_package2 =null;
		TreeRuleReturnScope alter_procedure3 =null;
		TreeRuleReturnScope alter_sequence4 =null;
		TreeRuleReturnScope alter_trigger5 =null;
		TreeRuleReturnScope alter_type6 =null;
		TreeRuleReturnScope create_function_body7 =null;
		TreeRuleReturnScope create_procedure_body8 =null;
		TreeRuleReturnScope create_package9 =null;
		TreeRuleReturnScope create_sequence10 =null;
		TreeRuleReturnScope create_trigger11 =null;
		TreeRuleReturnScope create_type12 =null;
		TreeRuleReturnScope drop_function13 =null;
		TreeRuleReturnScope drop_package14 =null;
		TreeRuleReturnScope drop_procedure15 =null;
		TreeRuleReturnScope drop_sequence16 =null;
		TreeRuleReturnScope drop_trigger17 =null;
		TreeRuleReturnScope drop_type18 =null;

		try {
			// PLSQLPrinter.g:96:5: ( alter_function -> { $alter_function.st }| alter_package -> { $alter_package.st}| alter_procedure -> { $alter_procedure.st}| alter_sequence -> { $alter_sequence.st}| alter_trigger -> { $alter_trigger.st}| alter_type -> { $alter_type.st}| create_function_body -> { $create_function_body.st; }| create_procedure_body -> { $create_procedure_body.st}| create_package -> { $create_package.st}| create_sequence -> { $create_sequence.st}| create_trigger -> { $create_trigger.st}| create_type -> { $create_type.st}| drop_function -> { $drop_function.st}| drop_package -> { $drop_package.st}| drop_procedure -> { $drop_procedure.st}| drop_sequence -> { $drop_sequence.st}| drop_trigger -> { $drop_trigger.st}| drop_type -> { $drop_type.st})
			int alt4=18;
			switch ( input.LA(1) ) {
			case ALTER_FUNCTION:
				{
				alt4=1;
				}
				break;
			case ALTER_PACKAGE:
				{
				alt4=2;
				}
				break;
			case ALTER_PROCEDURE:
				{
				alt4=3;
				}
				break;
			case ALTER_SEQUENCE:
				{
				alt4=4;
				}
				break;
			case ALTER_TRIGGER:
				{
				alt4=5;
				}
				break;
			case ALTER_TYPE:
				{
				alt4=6;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt4=7;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt4=8;
				}
				break;
			case CREATE_PACKAGE_BODY:
			case CREATE_PACKAGE_SPEC:
				{
				alt4=9;
				}
				break;
			case CREATE_SEQUENCE:
				{
				alt4=10;
				}
				break;
			case CREATE_TRIGGER:
				{
				alt4=11;
				}
				break;
			case CREATE_TYPE_BODY:
			case CREATE_TYPE_SPEC:
				{
				alt4=12;
				}
				break;
			case DROP_FUNCTION:
				{
				alt4=13;
				}
				break;
			case DROP_PACKAGE:
				{
				alt4=14;
				}
				break;
			case DROP_PROCEDURE:
				{
				alt4=15;
				}
				break;
			case DROP_SEQUENCE:
				{
				alt4=16;
				}
				break;
			case DROP_TRIGGER:
				{
				alt4=17;
				}
				break;
			case DROP_TYPE:
				{
				alt4=18;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 4, 0, input);
				throw nvae;
			}
			switch (alt4) {
				case 1 :
					// PLSQLPrinter.g:96:10: alter_function
					{
					pushFollow(FOLLOW_alter_function_in_unit_statement196);
					alter_function1=alter_function();
					state._fsp--;

					// TEMPLATE REWRITE
					// 96:25: -> { $alter_function.st }
					{
						retval.st =  (alter_function1!=null?((StringTemplate)alter_function1.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:97:10: alter_package
					{
					pushFollow(FOLLOW_alter_package_in_unit_statement211);
					alter_package2=alter_package();
					state._fsp--;

					// TEMPLATE REWRITE
					// 97:24: -> { $alter_package.st}
					{
						retval.st =  (alter_package2!=null?((StringTemplate)alter_package2.getTemplate()):null);
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:98:10: alter_procedure
					{
					pushFollow(FOLLOW_alter_procedure_in_unit_statement226);
					alter_procedure3=alter_procedure();
					state._fsp--;

					// TEMPLATE REWRITE
					// 98:26: -> { $alter_procedure.st}
					{
						retval.st =  (alter_procedure3!=null?((StringTemplate)alter_procedure3.getTemplate()):null);
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:99:10: alter_sequence
					{
					pushFollow(FOLLOW_alter_sequence_in_unit_statement241);
					alter_sequence4=alter_sequence();
					state._fsp--;

					// TEMPLATE REWRITE
					// 99:25: -> { $alter_sequence.st}
					{
						retval.st =  (alter_sequence4!=null?((StringTemplate)alter_sequence4.getTemplate()):null);
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:100:10: alter_trigger
					{
					pushFollow(FOLLOW_alter_trigger_in_unit_statement256);
					alter_trigger5=alter_trigger();
					state._fsp--;

					// TEMPLATE REWRITE
					// 100:24: -> { $alter_trigger.st}
					{
						retval.st =  (alter_trigger5!=null?((StringTemplate)alter_trigger5.getTemplate()):null);
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:101:10: alter_type
					{
					pushFollow(FOLLOW_alter_type_in_unit_statement271);
					alter_type6=alter_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 101:21: -> { $alter_type.st}
					{
						retval.st =  (alter_type6!=null?((StringTemplate)alter_type6.getTemplate()):null);
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:102:10: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_unit_statement286);
					create_function_body7=create_function_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 102:31: -> { $create_function_body.st; }
					{
						retval.st =  (create_function_body7!=null?((StringTemplate)create_function_body7.getTemplate()):null); ;
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:103:10: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_unit_statement301);
					create_procedure_body8=create_procedure_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 103:32: -> { $create_procedure_body.st}
					{
						retval.st =  (create_procedure_body8!=null?((StringTemplate)create_procedure_body8.getTemplate()):null);
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:104:10: create_package
					{
					pushFollow(FOLLOW_create_package_in_unit_statement316);
					create_package9=create_package();
					state._fsp--;

					// TEMPLATE REWRITE
					// 104:25: -> { $create_package.st}
					{
						retval.st =  (create_package9!=null?((StringTemplate)create_package9.getTemplate()):null);
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:105:10: create_sequence
					{
					pushFollow(FOLLOW_create_sequence_in_unit_statement331);
					create_sequence10=create_sequence();
					state._fsp--;

					// TEMPLATE REWRITE
					// 105:26: -> { $create_sequence.st}
					{
						retval.st =  (create_sequence10!=null?((StringTemplate)create_sequence10.getTemplate()):null);
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:106:10: create_trigger
					{
					pushFollow(FOLLOW_create_trigger_in_unit_statement346);
					create_trigger11=create_trigger();
					state._fsp--;

					// TEMPLATE REWRITE
					// 106:25: -> { $create_trigger.st}
					{
						retval.st =  (create_trigger11!=null?((StringTemplate)create_trigger11.getTemplate()):null);
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:107:10: create_type
					{
					pushFollow(FOLLOW_create_type_in_unit_statement361);
					create_type12=create_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 107:22: -> { $create_type.st}
					{
						retval.st =  (create_type12!=null?((StringTemplate)create_type12.getTemplate()):null);
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:108:10: drop_function
					{
					pushFollow(FOLLOW_drop_function_in_unit_statement376);
					drop_function13=drop_function();
					state._fsp--;

					// TEMPLATE REWRITE
					// 108:24: -> { $drop_function.st}
					{
						retval.st =  (drop_function13!=null?((StringTemplate)drop_function13.getTemplate()):null);
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:109:10: drop_package
					{
					pushFollow(FOLLOW_drop_package_in_unit_statement391);
					drop_package14=drop_package();
					state._fsp--;

					// TEMPLATE REWRITE
					// 109:23: -> { $drop_package.st}
					{
						retval.st =  (drop_package14!=null?((StringTemplate)drop_package14.getTemplate()):null);
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:110:10: drop_procedure
					{
					pushFollow(FOLLOW_drop_procedure_in_unit_statement406);
					drop_procedure15=drop_procedure();
					state._fsp--;

					// TEMPLATE REWRITE
					// 110:25: -> { $drop_procedure.st}
					{
						retval.st =  (drop_procedure15!=null?((StringTemplate)drop_procedure15.getTemplate()):null);
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:111:10: drop_sequence
					{
					pushFollow(FOLLOW_drop_sequence_in_unit_statement421);
					drop_sequence16=drop_sequence();
					state._fsp--;

					// TEMPLATE REWRITE
					// 111:24: -> { $drop_sequence.st}
					{
						retval.st =  (drop_sequence16!=null?((StringTemplate)drop_sequence16.getTemplate()):null);
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:112:10: drop_trigger
					{
					pushFollow(FOLLOW_drop_trigger_in_unit_statement436);
					drop_trigger17=drop_trigger();
					state._fsp--;

					// TEMPLATE REWRITE
					// 112:23: -> { $drop_trigger.st}
					{
						retval.st =  (drop_trigger17!=null?((StringTemplate)drop_trigger17.getTemplate()):null);
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:113:10: drop_type
					{
					pushFollow(FOLLOW_drop_type_in_unit_statement451);
					drop_type18=drop_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 113:20: -> { $drop_type.st}
					{
						retval.st =  (drop_type18!=null?((StringTemplate)drop_type18.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unit_statement"


	public static class drop_function_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_function"
	// PLSQLPrinter.g:120:1: drop_function : ^( DROP_FUNCTION function_name ) -> template( \"not implemented: drop_function\";
	public final PLSQLPrinter.drop_function_return drop_function() throws RecognitionException {
		PLSQLPrinter.drop_function_return retval = new PLSQLPrinter.drop_function_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:121:5: ( ^( DROP_FUNCTION function_name ) -> template( \"not implemented: drop_function\")
			// PLSQLPrinter.g:121:10: ^( DROP_FUNCTION function_name )
			{
			match(input,DROP_FUNCTION,FOLLOW_DROP_FUNCTION_in_drop_function480); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_name_in_drop_function482);
			function_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 122:5: -> template( \"not implemented: drop_function\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_function");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_function"


	public static class alter_function_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_function"
	// PLSQLPrinter.g:125:1: alter_function : ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_function\";
	public final PLSQLPrinter.alter_function_return alter_function() throws RecognitionException {
		PLSQLPrinter.alter_function_return retval = new PLSQLPrinter.alter_function_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:126:5: ( ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_function\")
			// PLSQLPrinter.g:126:10: ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
			{
			match(input,ALTER_FUNCTION,FOLLOW_ALTER_FUNCTION_in_alter_function518); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_name_in_alter_function520);
			function_name();
			state._fsp--;

			// PLSQLPrinter.g:126:41: ( DEBUG_VK )?
			int alt5=2;
			int LA5_0 = input.LA(1);
			if ( (LA5_0==DEBUG_VK) ) {
				alt5=1;
			}
			switch (alt5) {
				case 1 :
					// PLSQLPrinter.g:126:41: DEBUG_VK
					{
					match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_function522); 
					}
					break;

			}

			// PLSQLPrinter.g:126:51: ( REUSE_VK )?
			int alt6=2;
			int LA6_0 = input.LA(1);
			if ( (LA6_0==REUSE_VK) ) {
				alt6=1;
			}
			switch (alt6) {
				case 1 :
					// PLSQLPrinter.g:126:51: REUSE_VK
					{
					match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_function525); 
					}
					break;

			}

			// PLSQLPrinter.g:126:61: ( compiler_parameters_clause )*
			loop7:
			while (true) {
				int alt7=2;
				int LA7_0 = input.LA(1);
				if ( (LA7_0==COMPILER_PARAMETER) ) {
					alt7=1;
				}

				switch (alt7) {
				case 1 :
					// PLSQLPrinter.g:126:61: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_function528);
					compiler_parameters_clause();
					state._fsp--;

					}
					break;

				default :
					break loop7;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 127:5: -> template( \"not implemented: alter_function\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_function");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_function"


	public static class create_function_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_function_body"
	// PLSQLPrinter.g:130:1: create_function_body : ^( CREATE_FUNCTION ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? ^( FUNCTION_NAME (name+= ID )+ ) ret= type_spec ^( PARAMETERS (args+= parameter )* ) (ac+= invoker_rights_clause )* (ac+= parallel_enable_clause )* (ac+= result_cache_clause )* ( DETERMINISTIC_VK )* ( PIPELINED_VK )? ( ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name ) -> template( \"not implemented: create_function_body\"| ^( CALL_MODE call_spec ) -> template( \"not implemented: create_function_body\"| ^( BODY_MODE block ) -> create_function_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st)) ) ;
	public final PLSQLPrinter.create_function_body_return create_function_body() throws RecognitionException {
		PLSQLPrinter.create_function_body_return retval = new PLSQLPrinter.create_function_body_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_CREATE19=null;
		CommonTree REPLACE_VK20=null;
		CommonTree PIPELINED_VK21=null;
		CommonTree name=null;
		List<Object> list_name=null;
		List<Object> list_args=null;
		List<Object> list_ac=null;
		TreeRuleReturnScope ret =null;
		TreeRuleReturnScope block22 =null;
		RuleReturnScope args = null;
		RuleReturnScope ac = null;
		try {
			// PLSQLPrinter.g:131:5: ( ^( CREATE_FUNCTION ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? ^( FUNCTION_NAME (name+= ID )+ ) ret= type_spec ^( PARAMETERS (args+= parameter )* ) (ac+= invoker_rights_clause )* (ac+= parallel_enable_clause )* (ac+= result_cache_clause )* ( DETERMINISTIC_VK )* ( PIPELINED_VK )? ( ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name ) -> template( \"not implemented: create_function_body\"| ^( CALL_MODE call_spec ) -> template( \"not implemented: create_function_body\"| ^( BODY_MODE block ) -> create_function_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st)) ) )
			// PLSQLPrinter.g:131:10: ^( CREATE_FUNCTION ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? ^( FUNCTION_NAME (name+= ID )+ ) ret= type_spec ^( PARAMETERS (args+= parameter )* ) (ac+= invoker_rights_clause )* (ac+= parallel_enable_clause )* (ac+= result_cache_clause )* ( DETERMINISTIC_VK )* ( PIPELINED_VK )? ( ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name ) -> template( \"not implemented: create_function_body\"| ^( CALL_MODE call_spec ) -> template( \"not implemented: create_function_body\"| ^( BODY_MODE block ) -> create_function_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st)) )
			{
			match(input,CREATE_FUNCTION,FOLLOW_CREATE_FUNCTION_in_create_function_body565); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:131:28: ( SQL92_RESERVED_CREATE )?
			int alt8=2;
			int LA8_0 = input.LA(1);
			if ( (LA8_0==SQL92_RESERVED_CREATE) ) {
				alt8=1;
			}
			switch (alt8) {
				case 1 :
					// PLSQLPrinter.g:131:28: SQL92_RESERVED_CREATE
					{
					SQL92_RESERVED_CREATE19=(CommonTree)match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_create_function_body567); 
					}
					break;

			}

			// PLSQLPrinter.g:131:51: ( REPLACE_VK )?
			int alt9=2;
			int LA9_0 = input.LA(1);
			if ( (LA9_0==REPLACE_VK) ) {
				alt9=1;
			}
			switch (alt9) {
				case 1 :
					// PLSQLPrinter.g:131:51: REPLACE_VK
					{
					REPLACE_VK20=(CommonTree)match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_function_body570); 
					}
					break;

			}

			match(input,FUNCTION_NAME,FOLLOW_FUNCTION_NAME_in_create_function_body574); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:131:83: (name+= ID )+
			int cnt10=0;
			loop10:
			while (true) {
				int alt10=2;
				int LA10_0 = input.LA(1);
				if ( (LA10_0==ID) ) {
					alt10=1;
				}

				switch (alt10) {
				case 1 :
					// PLSQLPrinter.g:131:83: name+= ID
					{
					name=(CommonTree)match(input,ID,FOLLOW_ID_in_create_function_body578); 
					if (list_name==null) list_name=new ArrayList<Object>();
					list_name.add(name);
					}
					break;

				default :
					if ( cnt10 >= 1 ) break loop10;
					EarlyExitException eee = new EarlyExitException(10, input);
					throw eee;
				}
				cnt10++;
			}

			match(input, Token.UP, null); 

			pushFollow(FOLLOW_type_spec_in_create_function_body584);
			ret=type_spec();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_create_function_body587); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:131:121: (args+= parameter )*
				loop11:
				while (true) {
					int alt11=2;
					int LA11_0 = input.LA(1);
					if ( (LA11_0==PARAMETER) ) {
						alt11=1;
					}

					switch (alt11) {
					case 1 :
						// PLSQLPrinter.g:131:121: args+= parameter
						{
						pushFollow(FOLLOW_parameter_in_create_function_body591);
						args=parameter();
						state._fsp--;

						if (list_args==null) list_args=new ArrayList<Object>();
						list_args.add(args.getTemplate());
						}
						break;

					default :
						break loop11;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:132:15: (ac+= invoker_rights_clause )*
			loop12:
			while (true) {
				int alt12=2;
				int LA12_0 = input.LA(1);
				if ( (LA12_0==AUTHID_VK) ) {
					alt12=1;
				}

				switch (alt12) {
				case 1 :
					// PLSQLPrinter.g:132:15: ac+= invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_create_function_body609);
					ac=invoker_rights_clause();
					state._fsp--;

					if (list_ac==null) list_ac=new ArrayList<Object>();
					list_ac.add(ac.getTemplate());
					}
					break;

				default :
					break loop12;
				}
			}

			// PLSQLPrinter.g:132:42: (ac+= parallel_enable_clause )*
			loop13:
			while (true) {
				int alt13=2;
				int LA13_0 = input.LA(1);
				if ( (LA13_0==PARALLEL_ENABLE_VK) ) {
					alt13=1;
				}

				switch (alt13) {
				case 1 :
					// PLSQLPrinter.g:132:42: ac+= parallel_enable_clause
					{
					pushFollow(FOLLOW_parallel_enable_clause_in_create_function_body614);
					ac=parallel_enable_clause();
					state._fsp--;

					if (list_ac==null) list_ac=new ArrayList<Object>();
					list_ac.add(ac.getTemplate());
					}
					break;

				default :
					break loop13;
				}
			}

			// PLSQLPrinter.g:132:70: (ac+= result_cache_clause )*
			loop14:
			while (true) {
				int alt14=2;
				int LA14_0 = input.LA(1);
				if ( (LA14_0==RESULT_CACHE_VK) ) {
					alt14=1;
				}

				switch (alt14) {
				case 1 :
					// PLSQLPrinter.g:132:70: ac+= result_cache_clause
					{
					pushFollow(FOLLOW_result_cache_clause_in_create_function_body619);
					ac=result_cache_clause();
					state._fsp--;

					if (list_ac==null) list_ac=new ArrayList<Object>();
					list_ac.add(ac.getTemplate());
					}
					break;

				default :
					break loop14;
				}
			}

			// PLSQLPrinter.g:132:93: ( DETERMINISTIC_VK )*
			loop15:
			while (true) {
				int alt15=2;
				int LA15_0 = input.LA(1);
				if ( (LA15_0==DETERMINISTIC_VK) ) {
					alt15=1;
				}

				switch (alt15) {
				case 1 :
					// PLSQLPrinter.g:132:93: DETERMINISTIC_VK
					{
					match(input,DETERMINISTIC_VK,FOLLOW_DETERMINISTIC_VK_in_create_function_body622); 
					}
					break;

				default :
					break loop15;
				}
			}

			// PLSQLPrinter.g:132:111: ( PIPELINED_VK )?
			int alt16=2;
			int LA16_0 = input.LA(1);
			if ( (LA16_0==PIPELINED_VK) ) {
				alt16=1;
			}
			switch (alt16) {
				case 1 :
					// PLSQLPrinter.g:132:111: PIPELINED_VK
					{
					PIPELINED_VK21=(CommonTree)match(input,PIPELINED_VK,FOLLOW_PIPELINED_VK_in_create_function_body625); 
					}
					break;

			}

			// PLSQLPrinter.g:133:13: ( ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name ) -> template( \"not implemented: create_function_body\"| ^( CALL_MODE call_spec ) -> template( \"not implemented: create_function_body\"| ^( BODY_MODE block ) -> create_function_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st))
			int alt18=3;
			switch ( input.LA(1) ) {
			case USING_MODE:
				{
				alt18=1;
				}
				break;
			case CALL_MODE:
				{
				alt18=2;
				}
				break;
			case BODY_MODE:
				{
				alt18=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 18, 0, input);
				throw nvae;
			}
			switch (alt18) {
				case 1 :
					// PLSQLPrinter.g:133:18: ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name )
					{
					match(input,USING_MODE,FOLLOW_USING_MODE_in_create_function_body646); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:133:31: ( AGGREGATE_VK )?
					int alt17=2;
					int LA17_0 = input.LA(1);
					if ( (LA17_0==AGGREGATE_VK) ) {
						alt17=1;
					}
					switch (alt17) {
						case 1 :
							// PLSQLPrinter.g:133:31: AGGREGATE_VK
							{
							match(input,AGGREGATE_VK,FOLLOW_AGGREGATE_VK_in_create_function_body648); 
							}
							break;

					}

					pushFollow(FOLLOW_implementation_type_name_in_create_function_body651);
					implementation_type_name();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 134:5: -> template( \"not implemented: create_function_body\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: create_function_body");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:135:18: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_create_function_body686); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_create_function_body688);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 136:5: -> template( \"not implemented: create_function_body\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: create_function_body");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:137:18: ^( BODY_MODE block )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_create_function_body723); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_create_function_body725);
					block22=block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 138:18: -> create_function_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st)
					{
						retval.st = templateLib.getInstanceOf("create_function_body",new STAttrMap().put("is_create", SQL92_RESERVED_CREATE19 != null).put("is_replace", REPLACE_VK20 != null).put("name_parts", list_name).put("arguments", list_args).put("return_type", (ret!=null?((StringTemplate)ret.getTemplate()):null)).put("add_clauses", list_ac).put("is_pipelined", PIPELINED_VK21 != null).put("block", (block22!=null?((StringTemplate)block22.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_function_body"


	public static class parallel_enable_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parallel_enable_clause"
	// PLSQLPrinter.g:147:1: parallel_enable_clause : ^( PARALLEL_ENABLE_VK ( partition_by_clause )? ) -> template( \"not implemented: parallel_enable_clause\";
	public final PLSQLPrinter.parallel_enable_clause_return parallel_enable_clause() throws RecognitionException {
		PLSQLPrinter.parallel_enable_clause_return retval = new PLSQLPrinter.parallel_enable_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:148:5: ( ^( PARALLEL_ENABLE_VK ( partition_by_clause )? ) -> template( \"not implemented: parallel_enable_clause\")
			// PLSQLPrinter.g:148:10: ^( PARALLEL_ENABLE_VK ( partition_by_clause )? )
			{
			match(input,PARALLEL_ENABLE_VK,FOLLOW_PARALLEL_ENABLE_VK_in_parallel_enable_clause896); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:148:31: ( partition_by_clause )?
				int alt19=2;
				int LA19_0 = input.LA(1);
				if ( (LA19_0==PARTITION_VK) ) {
					alt19=1;
				}
				switch (alt19) {
					case 1 :
						// PLSQLPrinter.g:148:31: partition_by_clause
						{
						pushFollow(FOLLOW_partition_by_clause_in_parallel_enable_clause898);
						partition_by_clause();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 149:5: -> template( \"not implemented: parallel_enable_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: parallel_enable_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parallel_enable_clause"


	public static class partition_by_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "partition_by_clause"
	// PLSQLPrinter.g:152:1: partition_by_clause : ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? ) -> template( \"not implemented: partition_by_clause\";
	public final PLSQLPrinter.partition_by_clause_return partition_by_clause() throws RecognitionException {
		PLSQLPrinter.partition_by_clause_return retval = new PLSQLPrinter.partition_by_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:153:5: ( ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? ) -> template( \"not implemented: partition_by_clause\")
			// PLSQLPrinter.g:153:10: ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_partition_by_clause935); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_partition_by_clause937);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:154:13: ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) )
			int alt22=3;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ANY:
				{
				alt22=1;
				}
				break;
			case HASH_VK:
				{
				alt22=2;
				}
				break;
			case RANGE_VK:
				{
				alt22=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 22, 0, input);
				throw nvae;
			}
			switch (alt22) {
				case 1 :
					// PLSQLPrinter.g:154:18: SQL92_RESERVED_ANY
					{
					match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_partition_by_clause957); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:155:18: ^( HASH_VK ^( COLUMNS ( column_name )+ ) )
					{
					match(input,HASH_VK,FOLLOW_HASH_VK_in_partition_by_clause977); 
					match(input, Token.DOWN, null); 
					match(input,COLUMNS,FOLLOW_COLUMNS_in_partition_by_clause980); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:155:38: ( column_name )+
					int cnt20=0;
					loop20:
					while (true) {
						int alt20=2;
						int LA20_0 = input.LA(1);
						if ( (LA20_0==COLUMN_NAME) ) {
							alt20=1;
						}

						switch (alt20) {
						case 1 :
							// PLSQLPrinter.g:155:38: column_name
							{
							pushFollow(FOLLOW_column_name_in_partition_by_clause982);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt20 >= 1 ) break loop20;
							EarlyExitException eee = new EarlyExitException(20, input);
							throw eee;
						}
						cnt20++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:156:18: ^( RANGE_VK ^( COLUMNS ( column_name )+ ) )
					{
					match(input,RANGE_VK,FOLLOW_RANGE_VK_in_partition_by_clause1005); 
					match(input, Token.DOWN, null); 
					match(input,COLUMNS,FOLLOW_COLUMNS_in_partition_by_clause1008); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:156:39: ( column_name )+
					int cnt21=0;
					loop21:
					while (true) {
						int alt21=2;
						int LA21_0 = input.LA(1);
						if ( (LA21_0==COLUMN_NAME) ) {
							alt21=1;
						}

						switch (alt21) {
						case 1 :
							// PLSQLPrinter.g:156:39: column_name
							{
							pushFollow(FOLLOW_column_name_in_partition_by_clause1010);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt21 >= 1 ) break loop21;
							EarlyExitException eee = new EarlyExitException(21, input);
							throw eee;
						}
						cnt21++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;

			}

			// PLSQLPrinter.g:158:13: ( streaming_clause )?
			int alt23=2;
			int LA23_0 = input.LA(1);
			if ( (LA23_0==STREAMING_CLAUSE) ) {
				alt23=1;
			}
			switch (alt23) {
				case 1 :
					// PLSQLPrinter.g:158:13: streaming_clause
					{
					pushFollow(FOLLOW_streaming_clause_in_partition_by_clause1042);
					streaming_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 160:5: -> template( \"not implemented: partition_by_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: partition_by_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_by_clause"


	public static class result_cache_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "result_cache_clause"
	// PLSQLPrinter.g:163:1: result_cache_clause : ^( RESULT_CACHE_VK ( relies_on_part )? ) -> template( \"not implemented: result_cache_clause\";
	public final PLSQLPrinter.result_cache_clause_return result_cache_clause() throws RecognitionException {
		PLSQLPrinter.result_cache_clause_return retval = new PLSQLPrinter.result_cache_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:164:5: ( ^( RESULT_CACHE_VK ( relies_on_part )? ) -> template( \"not implemented: result_cache_clause\")
			// PLSQLPrinter.g:164:10: ^( RESULT_CACHE_VK ( relies_on_part )? )
			{
			match(input,RESULT_CACHE_VK,FOLLOW_RESULT_CACHE_VK_in_result_cache_clause1088); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:164:28: ( relies_on_part )?
				int alt24=2;
				int LA24_0 = input.LA(1);
				if ( (LA24_0==RELIES_ON_VK) ) {
					alt24=1;
				}
				switch (alt24) {
					case 1 :
						// PLSQLPrinter.g:164:28: relies_on_part
						{
						pushFollow(FOLLOW_relies_on_part_in_result_cache_clause1090);
						relies_on_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 165:5: -> template( \"not implemented: result_cache_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: result_cache_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "result_cache_clause"


	public static class relies_on_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "relies_on_part"
	// PLSQLPrinter.g:168:1: relies_on_part : ^( RELIES_ON_VK ( tableview_name )+ ) -> template( \"not implemented: relies_on_part\";
	public final PLSQLPrinter.relies_on_part_return relies_on_part() throws RecognitionException {
		PLSQLPrinter.relies_on_part_return retval = new PLSQLPrinter.relies_on_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:169:5: ( ^( RELIES_ON_VK ( tableview_name )+ ) -> template( \"not implemented: relies_on_part\")
			// PLSQLPrinter.g:169:10: ^( RELIES_ON_VK ( tableview_name )+ )
			{
			match(input,RELIES_ON_VK,FOLLOW_RELIES_ON_VK_in_relies_on_part1127); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:169:25: ( tableview_name )+
			int cnt25=0;
			loop25:
			while (true) {
				int alt25=2;
				int LA25_0 = input.LA(1);
				if ( (LA25_0==TABLEVIEW_NAME) ) {
					alt25=1;
				}

				switch (alt25) {
				case 1 :
					// PLSQLPrinter.g:169:25: tableview_name
					{
					pushFollow(FOLLOW_tableview_name_in_relies_on_part1129);
					tableview_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt25 >= 1 ) break loop25;
					EarlyExitException eee = new EarlyExitException(25, input);
					throw eee;
				}
				cnt25++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 170:5: -> template( \"not implemented: relies_on_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: relies_on_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "relies_on_part"


	public static class streaming_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "streaming_clause"
	// PLSQLPrinter.g:173:1: streaming_clause : ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) ) -> template( \"not implemented: streaming_clause\";
	public final PLSQLPrinter.streaming_clause_return streaming_clause() throws RecognitionException {
		PLSQLPrinter.streaming_clause_return retval = new PLSQLPrinter.streaming_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:174:5: ( ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) ) -> template( \"not implemented: streaming_clause\")
			// PLSQLPrinter.g:174:10: ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) )
			{
			match(input,STREAMING_CLAUSE,FOLLOW_STREAMING_CLAUSE_in_streaming_clause1166); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:174:29: ( SQL92_RESERVED_ORDER | CLUSTER_VK )
			int alt26=2;
			int LA26_0 = input.LA(1);
			if ( (LA26_0==SQL92_RESERVED_ORDER) ) {
				alt26=1;
			}
			else if ( (LA26_0==CLUSTER_VK) ) {
				alt26=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 26, 0, input);
				throw nvae;
			}

			switch (alt26) {
				case 1 :
					// PLSQLPrinter.g:174:30: SQL92_RESERVED_ORDER
					{
					match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_streaming_clause1169); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:174:51: CLUSTER_VK
					{
					match(input,CLUSTER_VK,FOLLOW_CLUSTER_VK_in_streaming_clause1171); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_streaming_clause1174);
			expression();
			state._fsp--;

			match(input,COLUMNS,FOLLOW_COLUMNS_in_streaming_clause1177); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:174:84: ( column_name )+
			int cnt27=0;
			loop27:
			while (true) {
				int alt27=2;
				int LA27_0 = input.LA(1);
				if ( (LA27_0==COLUMN_NAME) ) {
					alt27=1;
				}

				switch (alt27) {
				case 1 :
					// PLSQLPrinter.g:174:84: column_name
					{
					pushFollow(FOLLOW_column_name_in_streaming_clause1179);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt27 >= 1 ) break loop27;
					EarlyExitException eee = new EarlyExitException(27, input);
					throw eee;
				}
				cnt27++;
			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 175:5: -> template( \"not implemented: streaming_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: streaming_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "streaming_clause"


	public static class drop_package_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_package"
	// PLSQLPrinter.g:182:1: drop_package : ^( DROP_PACKAGE package_name ( BODY_VK )? ) -> template( \"not implemented: drop_package\";
	public final PLSQLPrinter.drop_package_return drop_package() throws RecognitionException {
		PLSQLPrinter.drop_package_return retval = new PLSQLPrinter.drop_package_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:183:5: ( ^( DROP_PACKAGE package_name ( BODY_VK )? ) -> template( \"not implemented: drop_package\")
			// PLSQLPrinter.g:183:10: ^( DROP_PACKAGE package_name ( BODY_VK )? )
			{
			match(input,DROP_PACKAGE,FOLLOW_DROP_PACKAGE_in_drop_package1222); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_package_name_in_drop_package1224);
			package_name();
			state._fsp--;

			// PLSQLPrinter.g:183:38: ( BODY_VK )?
			int alt28=2;
			int LA28_0 = input.LA(1);
			if ( (LA28_0==BODY_VK) ) {
				alt28=1;
			}
			switch (alt28) {
				case 1 :
					// PLSQLPrinter.g:183:38: BODY_VK
					{
					match(input,BODY_VK,FOLLOW_BODY_VK_in_drop_package1226); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 184:5: -> template( \"not implemented: drop_package\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_package");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_package"


	public static class alter_package_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_package"
	// PLSQLPrinter.g:187:1: alter_package : ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_package\";
	public final PLSQLPrinter.alter_package_return alter_package() throws RecognitionException {
		PLSQLPrinter.alter_package_return retval = new PLSQLPrinter.alter_package_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:188:5: ( ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_package\")
			// PLSQLPrinter.g:188:10: ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* )
			{
			match(input,ALTER_PACKAGE,FOLLOW_ALTER_PACKAGE_in_alter_package1263); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_package_name_in_alter_package1265);
			package_name();
			state._fsp--;

			// PLSQLPrinter.g:188:39: ( DEBUG_VK )?
			int alt29=2;
			int LA29_0 = input.LA(1);
			if ( (LA29_0==DEBUG_VK) ) {
				alt29=1;
			}
			switch (alt29) {
				case 1 :
					// PLSQLPrinter.g:188:39: DEBUG_VK
					{
					match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_package1267); 
					}
					break;

			}

			// PLSQLPrinter.g:188:49: ( REUSE_VK )?
			int alt30=2;
			int LA30_0 = input.LA(1);
			if ( (LA30_0==REUSE_VK) ) {
				alt30=1;
			}
			switch (alt30) {
				case 1 :
					// PLSQLPrinter.g:188:49: REUSE_VK
					{
					match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_package1270); 
					}
					break;

			}

			// PLSQLPrinter.g:189:17: ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )?
			int alt31=4;
			switch ( input.LA(1) ) {
				case PACKAGE_VK:
					{
					alt31=1;
					}
					break;
				case BODY_VK:
					{
					alt31=2;
					}
					break;
				case SPECIFICATION_VK:
					{
					alt31=3;
					}
					break;
			}
			switch (alt31) {
				case 1 :
					// PLSQLPrinter.g:189:18: PACKAGE_VK
					{
					match(input,PACKAGE_VK,FOLLOW_PACKAGE_VK_in_alter_package1291); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:189:29: BODY_VK
					{
					match(input,BODY_VK,FOLLOW_BODY_VK_in_alter_package1293); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:189:37: SPECIFICATION_VK
					{
					match(input,SPECIFICATION_VK,FOLLOW_SPECIFICATION_VK_in_alter_package1295); 
					}
					break;

			}

			// PLSQLPrinter.g:189:56: ( compiler_parameters_clause )*
			loop32:
			while (true) {
				int alt32=2;
				int LA32_0 = input.LA(1);
				if ( (LA32_0==COMPILER_PARAMETER) ) {
					alt32=1;
				}

				switch (alt32) {
				case 1 :
					// PLSQLPrinter.g:189:56: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_package1299);
					compiler_parameters_clause();
					state._fsp--;

					}
					break;

				default :
					break loop32;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 190:5: -> template( \"not implemented: alter_package\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_package");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_package"


	public static class create_package_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_package"
	// PLSQLPrinter.g:193:1: create_package : ( ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? package_name ( invoker_rights_clause )? (items+= package_obj_spec )* ) -> create_package_spec(is_replace=$REPLACE_VK != nullname=$package_name.stinvoker_rights_clause=$invoker_rights_clause.stitems=$items)| ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? package_name (items+= package_obj_body )* ( seq_of_statements )? ( exception_clause )? ) -> create_package_body(is_replace=$REPLACE_VK != nullname=$package_name.stitems=$itemsinit_section_seq_of_statements=$seq_of_statements.stinit_section_exception_clause=$exception_clause.st));
	public final PLSQLPrinter.create_package_return create_package() throws RecognitionException {
		PLSQLPrinter.create_package_return retval = new PLSQLPrinter.create_package_return();
		retval.start = input.LT(1);

		CommonTree REPLACE_VK23=null;
		CommonTree REPLACE_VK26=null;
		List<Object> list_items=null;
		TreeRuleReturnScope package_name24 =null;
		TreeRuleReturnScope invoker_rights_clause25 =null;
		TreeRuleReturnScope package_name27 =null;
		TreeRuleReturnScope seq_of_statements28 =null;
		TreeRuleReturnScope exception_clause29 =null;
		RuleReturnScope items = null;
		try {
			// PLSQLPrinter.g:194:5: ( ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? package_name ( invoker_rights_clause )? (items+= package_obj_spec )* ) -> create_package_spec(is_replace=$REPLACE_VK != nullname=$package_name.stinvoker_rights_clause=$invoker_rights_clause.stitems=$items)| ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? package_name (items+= package_obj_body )* ( seq_of_statements )? ( exception_clause )? ) -> create_package_body(is_replace=$REPLACE_VK != nullname=$package_name.stitems=$itemsinit_section_seq_of_statements=$seq_of_statements.stinit_section_exception_clause=$exception_clause.st))
			int alt40=2;
			int LA40_0 = input.LA(1);
			if ( (LA40_0==CREATE_PACKAGE_SPEC) ) {
				alt40=1;
			}
			else if ( (LA40_0==CREATE_PACKAGE_BODY) ) {
				alt40=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 40, 0, input);
				throw nvae;
			}

			switch (alt40) {
				case 1 :
					// PLSQLPrinter.g:194:10: ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? package_name ( invoker_rights_clause )? (items+= package_obj_spec )* )
					{
					match(input,CREATE_PACKAGE_SPEC,FOLLOW_CREATE_PACKAGE_SPEC_in_create_package1336); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:194:32: ( REPLACE_VK )?
					int alt33=2;
					int LA33_0 = input.LA(1);
					if ( (LA33_0==REPLACE_VK) ) {
						alt33=1;
					}
					switch (alt33) {
						case 1 :
							// PLSQLPrinter.g:194:32: REPLACE_VK
							{
							REPLACE_VK23=(CommonTree)match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_package1338); 
							}
							break;

					}

					pushFollow(FOLLOW_package_name_in_create_package1341);
					package_name24=package_name();
					state._fsp--;

					// PLSQLPrinter.g:194:57: ( invoker_rights_clause )?
					int alt34=2;
					int LA34_0 = input.LA(1);
					if ( (LA34_0==AUTHID_VK) ) {
						alt34=1;
					}
					switch (alt34) {
						case 1 :
							// PLSQLPrinter.g:194:57: invoker_rights_clause
							{
							pushFollow(FOLLOW_invoker_rights_clause_in_create_package1343);
							invoker_rights_clause25=invoker_rights_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:194:85: (items+= package_obj_spec )*
					loop35:
					while (true) {
						int alt35=2;
						int LA35_0 = input.LA(1);
						if ( (LA35_0==CURSOR_DECLARE||LA35_0==EXCEPTION_DECLARE||LA35_0==FUNCTION_SPEC||LA35_0==PRAGMA_DECLARE||LA35_0==PROCEDURE_SPEC||(LA35_0 >= RECORD_TYPE_DECLARE && LA35_0 <= RECORD_VAR_DECLARE)||LA35_0==SUBTYPE_DECLARE||(LA35_0 >= TABLE_TYPE_DECLARE && LA35_0 <= TABLE_VAR_DECLARE)||LA35_0==VARIABLE_DECLARE) ) {
							alt35=1;
						}

						switch (alt35) {
						case 1 :
							// PLSQLPrinter.g:194:85: items+= package_obj_spec
							{
							pushFollow(FOLLOW_package_obj_spec_in_create_package1348);
							items=package_obj_spec();
							state._fsp--;

							if (list_items==null) list_items=new ArrayList<Object>();
							list_items.add(items.getTemplate());
							}
							break;

						default :
							break loop35;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 195:5: -> create_package_spec(is_replace=$REPLACE_VK != nullname=$package_name.stinvoker_rights_clause=$invoker_rights_clause.stitems=$items)
					{
						retval.st = templateLib.getInstanceOf("create_package_spec",new STAttrMap().put("is_replace", REPLACE_VK23 != null).put("name", (package_name24!=null?((StringTemplate)package_name24.getTemplate()):null)).put("invoker_rights_clause", (invoker_rights_clause25!=null?((StringTemplate)invoker_rights_clause25.getTemplate()):null)).put("items", list_items));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:198:10: ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? package_name (items+= package_obj_body )* ( seq_of_statements )? ( exception_clause )? )
					{
					match(input,CREATE_PACKAGE_BODY,FOLLOW_CREATE_PACKAGE_BODY_in_create_package1416); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:198:32: ( REPLACE_VK )?
					int alt36=2;
					int LA36_0 = input.LA(1);
					if ( (LA36_0==REPLACE_VK) ) {
						alt36=1;
					}
					switch (alt36) {
						case 1 :
							// PLSQLPrinter.g:198:32: REPLACE_VK
							{
							REPLACE_VK26=(CommonTree)match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_package1418); 
							}
							break;

					}

					pushFollow(FOLLOW_package_name_in_create_package1421);
					package_name27=package_name();
					state._fsp--;

					// PLSQLPrinter.g:198:62: (items+= package_obj_body )*
					loop37:
					while (true) {
						int alt37=2;
						int LA37_0 = input.LA(1);
						if ( (LA37_0==CREATE_FUNCTION||LA37_0==CREATE_PROCEDURE||(LA37_0 >= CREATE_TYPE_BODY && LA37_0 <= CREATE_TYPE_SPEC)||LA37_0==CURSOR_DECLARE||LA37_0==EXCEPTION_DECLARE||LA37_0==FUNCTION_SPEC||LA37_0==PROCEDURE_SPEC||(LA37_0 >= RECORD_TYPE_DECLARE && LA37_0 <= RECORD_VAR_DECLARE)||LA37_0==SUBTYPE_DECLARE||(LA37_0 >= TABLE_TYPE_DECLARE && LA37_0 <= TABLE_VAR_DECLARE)||LA37_0==VARIABLE_DECLARE) ) {
							alt37=1;
						}

						switch (alt37) {
						case 1 :
							// PLSQLPrinter.g:198:62: items+= package_obj_body
							{
							pushFollow(FOLLOW_package_obj_body_in_create_package1425);
							items=package_obj_body();
							state._fsp--;

							if (list_items==null) list_items=new ArrayList<Object>();
							list_items.add(items.getTemplate());
							}
							break;

						default :
							break loop37;
						}
					}

					// PLSQLPrinter.g:198:82: ( seq_of_statements )?
					int alt38=2;
					int LA38_0 = input.LA(1);
					if ( (LA38_0==STATEMENTS) ) {
						alt38=1;
					}
					switch (alt38) {
						case 1 :
							// PLSQLPrinter.g:198:82: seq_of_statements
							{
							pushFollow(FOLLOW_seq_of_statements_in_create_package1428);
							seq_of_statements28=seq_of_statements();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:198:101: ( exception_clause )?
					int alt39=2;
					int LA39_0 = input.LA(1);
					if ( (LA39_0==SQL92_RESERVED_EXCEPTION) ) {
						alt39=1;
					}
					switch (alt39) {
						case 1 :
							// PLSQLPrinter.g:198:101: exception_clause
							{
							pushFollow(FOLLOW_exception_clause_in_create_package1431);
							exception_clause29=exception_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 199:5: -> create_package_body(is_replace=$REPLACE_VK != nullname=$package_name.stitems=$itemsinit_section_seq_of_statements=$seq_of_statements.stinit_section_exception_clause=$exception_clause.st)
					{
						retval.st = templateLib.getInstanceOf("create_package_body",new STAttrMap().put("is_replace", REPLACE_VK26 != null).put("name", (package_name27!=null?((StringTemplate)package_name27.getTemplate()):null)).put("items", list_items).put("init_section_seq_of_statements", (seq_of_statements28!=null?((StringTemplate)seq_of_statements28.getTemplate()):null)).put("init_section_exception_clause", (exception_clause29!=null?((StringTemplate)exception_clause29.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_package"


	public static class package_obj_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "package_obj_spec"
	// PLSQLPrinter.g:207:1: package_obj_spec : ( variable_declaration -> { $variable_declaration.st}| subtype_declaration -> { $subtype_declaration.st}| cursor_declaration -> { $cursor_declaration.st}| exception_declaration -> { $exception_declaration.st}| record_declaration -> { $record_declaration.st}| table_declaration -> { $table_declaration.st}| procedure_spec -> { $procedure_spec.st}| function_spec -> { $function_spec.st}| pragma_declaration -> { $pragma_declaration.st});
	public final PLSQLPrinter.package_obj_spec_return package_obj_spec() throws RecognitionException {
		PLSQLPrinter.package_obj_spec_return retval = new PLSQLPrinter.package_obj_spec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope variable_declaration30 =null;
		TreeRuleReturnScope subtype_declaration31 =null;
		TreeRuleReturnScope cursor_declaration32 =null;
		TreeRuleReturnScope exception_declaration33 =null;
		TreeRuleReturnScope record_declaration34 =null;
		TreeRuleReturnScope table_declaration35 =null;
		TreeRuleReturnScope procedure_spec36 =null;
		TreeRuleReturnScope function_spec37 =null;
		TreeRuleReturnScope pragma_declaration38 =null;

		try {
			// PLSQLPrinter.g:208:5: ( variable_declaration -> { $variable_declaration.st}| subtype_declaration -> { $subtype_declaration.st}| cursor_declaration -> { $cursor_declaration.st}| exception_declaration -> { $exception_declaration.st}| record_declaration -> { $record_declaration.st}| table_declaration -> { $table_declaration.st}| procedure_spec -> { $procedure_spec.st}| function_spec -> { $function_spec.st}| pragma_declaration -> { $pragma_declaration.st})
			int alt41=9;
			switch ( input.LA(1) ) {
			case VARIABLE_DECLARE:
				{
				alt41=1;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt41=2;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt41=3;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt41=4;
				}
				break;
			case RECORD_TYPE_DECLARE:
			case RECORD_VAR_DECLARE:
				{
				alt41=5;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt41=6;
				}
				break;
			case PROCEDURE_SPEC:
				{
				alt41=7;
				}
				break;
			case FUNCTION_SPEC:
				{
				alt41=8;
				}
				break;
			case PRAGMA_DECLARE:
				{
				alt41=9;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 41, 0, input);
				throw nvae;
			}
			switch (alt41) {
				case 1 :
					// PLSQLPrinter.g:208:10: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_package_obj_spec1524);
					variable_declaration30=variable_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 208:31: -> { $variable_declaration.st}
					{
						retval.st =  (variable_declaration30!=null?((StringTemplate)variable_declaration30.getTemplate()):null);
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:209:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_package_obj_spec1540);
					subtype_declaration31=subtype_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 209:31: -> { $subtype_declaration.st}
					{
						retval.st =  (subtype_declaration31!=null?((StringTemplate)subtype_declaration31.getTemplate()):null);
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:210:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_package_obj_spec1556);
					cursor_declaration32=cursor_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 210:30: -> { $cursor_declaration.st}
					{
						retval.st =  (cursor_declaration32!=null?((StringTemplate)cursor_declaration32.getTemplate()):null);
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:211:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_package_obj_spec1572);
					exception_declaration33=exception_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 211:33: -> { $exception_declaration.st}
					{
						retval.st =  (exception_declaration33!=null?((StringTemplate)exception_declaration33.getTemplate()):null);
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:212:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_package_obj_spec1588);
					record_declaration34=record_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 212:30: -> { $record_declaration.st}
					{
						retval.st =  (record_declaration34!=null?((StringTemplate)record_declaration34.getTemplate()):null);
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:213:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_package_obj_spec1604);
					table_declaration35=table_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 213:29: -> { $table_declaration.st}
					{
						retval.st =  (table_declaration35!=null?((StringTemplate)table_declaration35.getTemplate()):null);
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:214:11: procedure_spec
					{
					pushFollow(FOLLOW_procedure_spec_in_package_obj_spec1620);
					procedure_spec36=procedure_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 214:26: -> { $procedure_spec.st}
					{
						retval.st =  (procedure_spec36!=null?((StringTemplate)procedure_spec36.getTemplate()):null);
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:215:11: function_spec
					{
					pushFollow(FOLLOW_function_spec_in_package_obj_spec1636);
					function_spec37=function_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 215:25: -> { $function_spec.st}
					{
						retval.st =  (function_spec37!=null?((StringTemplate)function_spec37.getTemplate()):null);
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:216:11: pragma_declaration
					{
					pushFollow(FOLLOW_pragma_declaration_in_package_obj_spec1652);
					pragma_declaration38=pragma_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 216:30: -> { $pragma_declaration.st}
					{
						retval.st =  (pragma_declaration38!=null?((StringTemplate)pragma_declaration38.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_obj_spec"


	public static class procedure_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "procedure_spec"
	// PLSQLPrinter.g:219:1: procedure_spec : ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( ^( CALL_MODE call_spec ) )? ) -> procedure_spec(name=$procedure_name.starguments=$arguments);
	public final PLSQLPrinter.procedure_spec_return procedure_spec() throws RecognitionException {
		PLSQLPrinter.procedure_spec_return retval = new PLSQLPrinter.procedure_spec_return();
		retval.start = input.LT(1);

		List<Object> list_arguments=null;
		TreeRuleReturnScope procedure_name39 =null;
		RuleReturnScope arguments = null;
		try {
			// PLSQLPrinter.g:220:5: ( ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( ^( CALL_MODE call_spec ) )? ) -> procedure_spec(name=$procedure_name.starguments=$arguments))
			// PLSQLPrinter.g:220:11: ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( ^( CALL_MODE call_spec ) )? )
			{
			match(input,PROCEDURE_SPEC,FOLLOW_PROCEDURE_SPEC_in_procedure_spec1678); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_procedure_name_in_procedure_spec1680);
			procedure_name39=procedure_name();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_procedure_spec1683); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:220:65: (arguments+= parameter )*
				loop42:
				while (true) {
					int alt42=2;
					int LA42_0 = input.LA(1);
					if ( (LA42_0==PARAMETER) ) {
						alt42=1;
					}

					switch (alt42) {
					case 1 :
						// PLSQLPrinter.g:220:65: arguments+= parameter
						{
						pushFollow(FOLLOW_parameter_in_procedure_spec1687);
						arguments=parameter();
						state._fsp--;

						if (list_arguments==null) list_arguments=new ArrayList<Object>();
						list_arguments.add(arguments.getTemplate());
						}
						break;

					default :
						break loop42;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:221:13: ( ^( CALL_MODE call_spec ) )?
			int alt43=2;
			int LA43_0 = input.LA(1);
			if ( (LA43_0==CALL_MODE) ) {
				alt43=1;
			}
			switch (alt43) {
				case 1 :
					// PLSQLPrinter.g:221:14: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_procedure_spec1705); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_procedure_spec1707);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 223:5: -> procedure_spec(name=$procedure_name.starguments=$arguments)
			{
				retval.st = templateLib.getInstanceOf("procedure_spec",new STAttrMap().put("name", (procedure_name39!=null?((StringTemplate)procedure_name39.getTemplate()):null)).put("arguments", list_arguments));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "procedure_spec"


	public static class function_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "function_spec"
	// PLSQLPrinter.g:226:1: function_spec : ^( FUNCTION_SPEC function_name type_spec ^( PARAMETERS (arguments+= parameter )* ) ( PIPELINED_VK )? ( RESULT_CACHE_VK )? ( DETERMINISTIC_VK )? ) -> function_spec(name=$function_name.starguments=$argumentsreturn_type=$type_spec.stis_pipelined=$PIPELINED_VK != nullis_result_cache=$RESULT_CACHE_VK != nullis_deterministic=$DETERMINISTIC_VK != null);
	public final PLSQLPrinter.function_spec_return function_spec() throws RecognitionException {
		PLSQLPrinter.function_spec_return retval = new PLSQLPrinter.function_spec_return();
		retval.start = input.LT(1);

		CommonTree PIPELINED_VK42=null;
		CommonTree RESULT_CACHE_VK43=null;
		CommonTree DETERMINISTIC_VK44=null;
		List<Object> list_arguments=null;
		TreeRuleReturnScope function_name40 =null;
		TreeRuleReturnScope type_spec41 =null;
		RuleReturnScope arguments = null;
		try {
			// PLSQLPrinter.g:227:5: ( ^( FUNCTION_SPEC function_name type_spec ^( PARAMETERS (arguments+= parameter )* ) ( PIPELINED_VK )? ( RESULT_CACHE_VK )? ( DETERMINISTIC_VK )? ) -> function_spec(name=$function_name.starguments=$argumentsreturn_type=$type_spec.stis_pipelined=$PIPELINED_VK != nullis_result_cache=$RESULT_CACHE_VK != nullis_deterministic=$DETERMINISTIC_VK != null))
			// PLSQLPrinter.g:227:10: ^( FUNCTION_SPEC function_name type_spec ^( PARAMETERS (arguments+= parameter )* ) ( PIPELINED_VK )? ( RESULT_CACHE_VK )? ( DETERMINISTIC_VK )? )
			{
			match(input,FUNCTION_SPEC,FOLLOW_FUNCTION_SPEC_in_function_spec1757); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_name_in_function_spec1759);
			function_name40=function_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_function_spec1761);
			type_spec41=type_spec();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_function_spec1764); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:227:72: (arguments+= parameter )*
				loop44:
				while (true) {
					int alt44=2;
					int LA44_0 = input.LA(1);
					if ( (LA44_0==PARAMETER) ) {
						alt44=1;
					}

					switch (alt44) {
					case 1 :
						// PLSQLPrinter.g:227:72: arguments+= parameter
						{
						pushFollow(FOLLOW_parameter_in_function_spec1768);
						arguments=parameter();
						state._fsp--;

						if (list_arguments==null) list_arguments=new ArrayList<Object>();
						list_arguments.add(arguments.getTemplate());
						}
						break;

					default :
						break loop44;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:228:13: ( PIPELINED_VK )?
			int alt45=2;
			int LA45_0 = input.LA(1);
			if ( (LA45_0==PIPELINED_VK) ) {
				alt45=1;
			}
			switch (alt45) {
				case 1 :
					// PLSQLPrinter.g:228:13: PIPELINED_VK
					{
					PIPELINED_VK42=(CommonTree)match(input,PIPELINED_VK,FOLLOW_PIPELINED_VK_in_function_spec1784); 
					}
					break;

			}

			// PLSQLPrinter.g:228:27: ( RESULT_CACHE_VK )?
			int alt46=2;
			int LA46_0 = input.LA(1);
			if ( (LA46_0==RESULT_CACHE_VK) ) {
				alt46=1;
			}
			switch (alt46) {
				case 1 :
					// PLSQLPrinter.g:228:27: RESULT_CACHE_VK
					{
					RESULT_CACHE_VK43=(CommonTree)match(input,RESULT_CACHE_VK,FOLLOW_RESULT_CACHE_VK_in_function_spec1787); 
					}
					break;

			}

			// PLSQLPrinter.g:228:44: ( DETERMINISTIC_VK )?
			int alt47=2;
			int LA47_0 = input.LA(1);
			if ( (LA47_0==DETERMINISTIC_VK) ) {
				alt47=1;
			}
			switch (alt47) {
				case 1 :
					// PLSQLPrinter.g:228:44: DETERMINISTIC_VK
					{
					DETERMINISTIC_VK44=(CommonTree)match(input,DETERMINISTIC_VK,FOLLOW_DETERMINISTIC_VK_in_function_spec1790); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 230:5: -> function_spec(name=$function_name.starguments=$argumentsreturn_type=$type_spec.stis_pipelined=$PIPELINED_VK != nullis_result_cache=$RESULT_CACHE_VK != nullis_deterministic=$DETERMINISTIC_VK != null)
			{
				retval.st = templateLib.getInstanceOf("function_spec",new STAttrMap().put("name", (function_name40!=null?((StringTemplate)function_name40.getTemplate()):null)).put("arguments", list_arguments).put("return_type", (type_spec41!=null?((StringTemplate)type_spec41.getTemplate()):null)).put("is_pipelined", PIPELINED_VK42 != null).put("is_result_cache", RESULT_CACHE_VK43 != null).put("is_deterministic", DETERMINISTIC_VK44 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_spec"


	public static class package_obj_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "package_obj_body"
	// PLSQLPrinter.g:235:1: package_obj_body : ( procedure_spec -> { $procedure_spec.st}| function_spec -> { $function_spec.st}| variable_declaration -> {$variable_declaration.st}| subtype_declaration -> {$subtype_declaration.st}| cursor_declaration -> {$cursor_declaration.st}| exception_declaration -> {$exception_declaration.st}| record_declaration -> {$record_declaration.st}| table_declaration -> {$table_declaration.st}| create_procedure_body -> {$create_procedure_body.st}| create_function_body -> {$create_function_body.st}| create_type -> {$create_type.st});
	public final PLSQLPrinter.package_obj_body_return package_obj_body() throws RecognitionException {
		PLSQLPrinter.package_obj_body_return retval = new PLSQLPrinter.package_obj_body_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope procedure_spec45 =null;
		TreeRuleReturnScope function_spec46 =null;
		TreeRuleReturnScope variable_declaration47 =null;
		TreeRuleReturnScope subtype_declaration48 =null;
		TreeRuleReturnScope cursor_declaration49 =null;
		TreeRuleReturnScope exception_declaration50 =null;
		TreeRuleReturnScope record_declaration51 =null;
		TreeRuleReturnScope table_declaration52 =null;
		TreeRuleReturnScope create_procedure_body53 =null;
		TreeRuleReturnScope create_function_body54 =null;
		TreeRuleReturnScope create_type55 =null;

		try {
			// PLSQLPrinter.g:236:5: ( procedure_spec -> { $procedure_spec.st}| function_spec -> { $function_spec.st}| variable_declaration -> {$variable_declaration.st}| subtype_declaration -> {$subtype_declaration.st}| cursor_declaration -> {$cursor_declaration.st}| exception_declaration -> {$exception_declaration.st}| record_declaration -> {$record_declaration.st}| table_declaration -> {$table_declaration.st}| create_procedure_body -> {$create_procedure_body.st}| create_function_body -> {$create_function_body.st}| create_type -> {$create_type.st})
			int alt48=11;
			switch ( input.LA(1) ) {
			case PROCEDURE_SPEC:
				{
				alt48=1;
				}
				break;
			case FUNCTION_SPEC:
				{
				alt48=2;
				}
				break;
			case VARIABLE_DECLARE:
				{
				alt48=3;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt48=4;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt48=5;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt48=6;
				}
				break;
			case RECORD_TYPE_DECLARE:
			case RECORD_VAR_DECLARE:
				{
				alt48=7;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt48=8;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt48=9;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt48=10;
				}
				break;
			case CREATE_TYPE_BODY:
			case CREATE_TYPE_SPEC:
				{
				alt48=11;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 48, 0, input);
				throw nvae;
			}
			switch (alt48) {
				case 1 :
					// PLSQLPrinter.g:236:11: procedure_spec
					{
					pushFollow(FOLLOW_procedure_spec_in_package_obj_body1885);
					procedure_spec45=procedure_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 236:26: -> { $procedure_spec.st}
					{
						retval.st =  (procedure_spec45!=null?((StringTemplate)procedure_spec45.getTemplate()):null);
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:237:11: function_spec
					{
					pushFollow(FOLLOW_function_spec_in_package_obj_body1901);
					function_spec46=function_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 237:25: -> { $function_spec.st}
					{
						retval.st =  (function_spec46!=null?((StringTemplate)function_spec46.getTemplate()):null);
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:238:11: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_package_obj_body1917);
					variable_declaration47=variable_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 238:32: -> {$variable_declaration.st}
					{
						retval.st = (variable_declaration47!=null?((StringTemplate)variable_declaration47.getTemplate()):null);
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:239:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_package_obj_body1933);
					subtype_declaration48=subtype_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 239:31: -> {$subtype_declaration.st}
					{
						retval.st = (subtype_declaration48!=null?((StringTemplate)subtype_declaration48.getTemplate()):null);
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:240:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_package_obj_body1949);
					cursor_declaration49=cursor_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 240:30: -> {$cursor_declaration.st}
					{
						retval.st = (cursor_declaration49!=null?((StringTemplate)cursor_declaration49.getTemplate()):null);
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:241:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_package_obj_body1965);
					exception_declaration50=exception_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 241:33: -> {$exception_declaration.st}
					{
						retval.st = (exception_declaration50!=null?((StringTemplate)exception_declaration50.getTemplate()):null);
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:242:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_package_obj_body1981);
					record_declaration51=record_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 242:30: -> {$record_declaration.st}
					{
						retval.st = (record_declaration51!=null?((StringTemplate)record_declaration51.getTemplate()):null);
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:243:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_package_obj_body1997);
					table_declaration52=table_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 243:29: -> {$table_declaration.st}
					{
						retval.st = (table_declaration52!=null?((StringTemplate)table_declaration52.getTemplate()):null);
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:244:11: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_package_obj_body2013);
					create_procedure_body53=create_procedure_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 244:33: -> {$create_procedure_body.st}
					{
						retval.st = (create_procedure_body53!=null?((StringTemplate)create_procedure_body53.getTemplate()):null);
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:245:11: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_package_obj_body2029);
					create_function_body54=create_function_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 245:32: -> {$create_function_body.st}
					{
						retval.st = (create_function_body54!=null?((StringTemplate)create_function_body54.getTemplate()):null);
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:246:11: create_type
					{
					pushFollow(FOLLOW_create_type_in_package_obj_body2045);
					create_type55=create_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 246:23: -> {$create_type.st}
					{
						retval.st = (create_type55!=null?((StringTemplate)create_type55.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_obj_body"


	public static class drop_procedure_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_procedure"
	// PLSQLPrinter.g:255:1: drop_procedure : ^( DROP_PROCEDURE procedure_name ) -> template( \"not implemented: drop_procedure\";
	public final PLSQLPrinter.drop_procedure_return drop_procedure() throws RecognitionException {
		PLSQLPrinter.drop_procedure_return retval = new PLSQLPrinter.drop_procedure_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:256:5: ( ^( DROP_PROCEDURE procedure_name ) -> template( \"not implemented: drop_procedure\")
			// PLSQLPrinter.g:256:10: ^( DROP_PROCEDURE procedure_name )
			{
			match(input,DROP_PROCEDURE,FOLLOW_DROP_PROCEDURE_in_drop_procedure2076); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_procedure_name_in_drop_procedure2078);
			procedure_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 257:5: -> template( \"not implemented: drop_procedure\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_procedure");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_procedure"


	public static class alter_procedure_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_procedure"
	// PLSQLPrinter.g:260:1: alter_procedure : ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_procedure\";
	public final PLSQLPrinter.alter_procedure_return alter_procedure() throws RecognitionException {
		PLSQLPrinter.alter_procedure_return retval = new PLSQLPrinter.alter_procedure_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:261:5: ( ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_procedure\")
			// PLSQLPrinter.g:261:10: ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
			{
			match(input,ALTER_PROCEDURE,FOLLOW_ALTER_PROCEDURE_in_alter_procedure2114); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_procedure_name_in_alter_procedure2116);
			procedure_name();
			state._fsp--;

			// PLSQLPrinter.g:261:43: ( DEBUG_VK )?
			int alt49=2;
			int LA49_0 = input.LA(1);
			if ( (LA49_0==DEBUG_VK) ) {
				alt49=1;
			}
			switch (alt49) {
				case 1 :
					// PLSQLPrinter.g:261:43: DEBUG_VK
					{
					match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_procedure2118); 
					}
					break;

			}

			// PLSQLPrinter.g:261:53: ( REUSE_VK )?
			int alt50=2;
			int LA50_0 = input.LA(1);
			if ( (LA50_0==REUSE_VK) ) {
				alt50=1;
			}
			switch (alt50) {
				case 1 :
					// PLSQLPrinter.g:261:53: REUSE_VK
					{
					match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_procedure2121); 
					}
					break;

			}

			// PLSQLPrinter.g:261:63: ( compiler_parameters_clause )*
			loop51:
			while (true) {
				int alt51=2;
				int LA51_0 = input.LA(1);
				if ( (LA51_0==COMPILER_PARAMETER) ) {
					alt51=1;
				}

				switch (alt51) {
				case 1 :
					// PLSQLPrinter.g:261:63: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_procedure2124);
					compiler_parameters_clause();
					state._fsp--;

					}
					break;

				default :
					break loop51;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 262:5: -> template( \"not implemented: alter_procedure\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_procedure");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_procedure"


	public static class create_procedure_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_procedure_body"
	// PLSQLPrinter.g:265:1: create_procedure_body : ^( CREATE_PROCEDURE ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( invoker_rights_clause )? create_procedure_body_impl ) -> create_procedure_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname=$procedure_name.starguments=$argumentsinvoker_rights_clause=$invoker_rights_clause.stimpl=$create_procedure_body_impl.st);
	public final PLSQLPrinter.create_procedure_body_return create_procedure_body() throws RecognitionException {
		PLSQLPrinter.create_procedure_body_return retval = new PLSQLPrinter.create_procedure_body_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_CREATE56=null;
		CommonTree REPLACE_VK57=null;
		List<Object> list_arguments=null;
		TreeRuleReturnScope procedure_name58 =null;
		TreeRuleReturnScope invoker_rights_clause59 =null;
		TreeRuleReturnScope create_procedure_body_impl60 =null;
		RuleReturnScope arguments = null;
		try {
			// PLSQLPrinter.g:266:5: ( ^( CREATE_PROCEDURE ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( invoker_rights_clause )? create_procedure_body_impl ) -> create_procedure_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname=$procedure_name.starguments=$argumentsinvoker_rights_clause=$invoker_rights_clause.stimpl=$create_procedure_body_impl.st))
			// PLSQLPrinter.g:266:10: ^( CREATE_PROCEDURE ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( invoker_rights_clause )? create_procedure_body_impl )
			{
			match(input,CREATE_PROCEDURE,FOLLOW_CREATE_PROCEDURE_in_create_procedure_body2161); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:266:29: ( SQL92_RESERVED_CREATE )?
			int alt52=2;
			int LA52_0 = input.LA(1);
			if ( (LA52_0==SQL92_RESERVED_CREATE) ) {
				alt52=1;
			}
			switch (alt52) {
				case 1 :
					// PLSQLPrinter.g:266:29: SQL92_RESERVED_CREATE
					{
					SQL92_RESERVED_CREATE56=(CommonTree)match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_create_procedure_body2163); 
					}
					break;

			}

			// PLSQLPrinter.g:266:52: ( REPLACE_VK )?
			int alt53=2;
			int LA53_0 = input.LA(1);
			if ( (LA53_0==REPLACE_VK) ) {
				alt53=1;
			}
			switch (alt53) {
				case 1 :
					// PLSQLPrinter.g:266:52: REPLACE_VK
					{
					REPLACE_VK57=(CommonTree)match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_procedure_body2166); 
					}
					break;

			}

			pushFollow(FOLLOW_procedure_name_in_create_procedure_body2169);
			procedure_name58=procedure_name();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_create_procedure_body2172); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:266:101: (arguments+= parameter )*
				loop54:
				while (true) {
					int alt54=2;
					int LA54_0 = input.LA(1);
					if ( (LA54_0==PARAMETER) ) {
						alt54=1;
					}

					switch (alt54) {
					case 1 :
						// PLSQLPrinter.g:266:101: arguments+= parameter
						{
						pushFollow(FOLLOW_parameter_in_create_procedure_body2176);
						arguments=parameter();
						state._fsp--;

						if (list_arguments==null) list_arguments=new ArrayList<Object>();
						list_arguments.add(arguments.getTemplate());
						}
						break;

					default :
						break loop54;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:266:115: ( invoker_rights_clause )?
			int alt55=2;
			int LA55_0 = input.LA(1);
			if ( (LA55_0==AUTHID_VK) ) {
				alt55=1;
			}
			switch (alt55) {
				case 1 :
					// PLSQLPrinter.g:266:115: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_create_procedure_body2180);
					invoker_rights_clause59=invoker_rights_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_create_procedure_body_impl_in_create_procedure_body2194);
			create_procedure_body_impl60=create_procedure_body_impl();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 269:5: -> create_procedure_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname=$procedure_name.starguments=$argumentsinvoker_rights_clause=$invoker_rights_clause.stimpl=$create_procedure_body_impl.st)
			{
				retval.st = templateLib.getInstanceOf("create_procedure_body",new STAttrMap().put("is_create", SQL92_RESERVED_CREATE56 != null).put("is_replace", REPLACE_VK57 != null).put("name", (procedure_name58!=null?((StringTemplate)procedure_name58.getTemplate()):null)).put("arguments", list_arguments).put("invoker_rights_clause", (invoker_rights_clause59!=null?((StringTemplate)invoker_rights_clause59.getTemplate()):null)).put("impl", (create_procedure_body_impl60!=null?((StringTemplate)create_procedure_body_impl60.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_procedure_body"


	public static class create_procedure_body_impl_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_procedure_body_impl"
	// PLSQLPrinter.g:274:1: create_procedure_body_impl : ( EXTERNAL_VK -> create_procedure_body_impl_external(| ^( CALL_MODE call_spec ) -> template( \"not implemented: alter_procedure\"| ^( BODY_MODE block ) -> { $block.st });
	public final PLSQLPrinter.create_procedure_body_impl_return create_procedure_body_impl() throws RecognitionException {
		PLSQLPrinter.create_procedure_body_impl_return retval = new PLSQLPrinter.create_procedure_body_impl_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope block61 =null;

		try {
			// PLSQLPrinter.g:275:5: ( EXTERNAL_VK -> create_procedure_body_impl_external(| ^( CALL_MODE call_spec ) -> template( \"not implemented: alter_procedure\"| ^( BODY_MODE block ) -> { $block.st })
			int alt56=3;
			switch ( input.LA(1) ) {
			case EXTERNAL_VK:
				{
				alt56=1;
				}
				break;
			case CALL_MODE:
				{
				alt56=2;
				}
				break;
			case BODY_MODE:
				{
				alt56=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 56, 0, input);
				throw nvae;
			}
			switch (alt56) {
				case 1 :
					// PLSQLPrinter.g:275:9: EXTERNAL_VK
					{
					match(input,EXTERNAL_VK,FOLLOW_EXTERNAL_VK_in_create_procedure_body_impl2288); 
					// TEMPLATE REWRITE
					// 275:21: -> create_procedure_body_impl_external(
					{
						retval.st = templateLib.getInstanceOf("create_procedure_body_impl_external");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:276:14: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_create_procedure_body_impl2310); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_create_procedure_body_impl2312);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 277:9: -> template( \"not implemented: alter_procedure\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: alter_procedure");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:278:14: ^( BODY_MODE block )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_create_procedure_body_impl2347); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_create_procedure_body_impl2349);
					block61=block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 278:33: -> { $block.st }
					{
						retval.st =  (block61!=null?((StringTemplate)block61.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_procedure_body_impl"


	public static class drop_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_trigger"
	// PLSQLPrinter.g:285:1: drop_trigger : ^( DROP_TRIGGER trigger_name ) -> template( \"not implemented: drop_trigger\";
	public final PLSQLPrinter.drop_trigger_return drop_trigger() throws RecognitionException {
		PLSQLPrinter.drop_trigger_return retval = new PLSQLPrinter.drop_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:286:5: ( ^( DROP_TRIGGER trigger_name ) -> template( \"not implemented: drop_trigger\")
			// PLSQLPrinter.g:286:10: ^( DROP_TRIGGER trigger_name )
			{
			match(input,DROP_TRIGGER,FOLLOW_DROP_TRIGGER_in_drop_trigger2379); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_trigger_name_in_drop_trigger2381);
			trigger_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 287:5: -> template( \"not implemented: drop_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_trigger"


	public static class alter_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_trigger"
	// PLSQLPrinter.g:290:1: alter_trigger : ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) -> template( \"not implemented: alter_trigger\";
	public final PLSQLPrinter.alter_trigger_return alter_trigger() throws RecognitionException {
		PLSQLPrinter.alter_trigger_return retval = new PLSQLPrinter.alter_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:291:5: ( ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) -> template( \"not implemented: alter_trigger\")
			// PLSQLPrinter.g:291:10: ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
			{
			match(input,ALTER_TRIGGER,FOLLOW_ALTER_TRIGGER_in_alter_trigger2417); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_trigger_name_in_alter_trigger2419);
			trigger_name();
			state._fsp--;

			// PLSQLPrinter.g:292:13: ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
			int alt61=3;
			switch ( input.LA(1) ) {
			case DISABLE_VK:
			case ENABLE_VK:
				{
				alt61=1;
				}
				break;
			case RENAME_VK:
				{
				alt61=2;
				}
				break;
			case UP:
			case COMPILER_PARAMETER:
			case DEBUG_VK:
			case REUSE_VK:
				{
				alt61=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 61, 0, input);
				throw nvae;
			}
			switch (alt61) {
				case 1 :
					// PLSQLPrinter.g:292:18: ( ENABLE_VK | DISABLE_VK )
					{
					// PLSQLPrinter.g:292:18: ( ENABLE_VK | DISABLE_VK )
					int alt57=2;
					int LA57_0 = input.LA(1);
					if ( (LA57_0==ENABLE_VK) ) {
						alt57=1;
					}
					else if ( (LA57_0==DISABLE_VK) ) {
						alt57=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 57, 0, input);
						throw nvae;
					}

					switch (alt57) {
						case 1 :
							// PLSQLPrinter.g:292:19: ENABLE_VK
							{
							match(input,ENABLE_VK,FOLLOW_ENABLE_VK_in_alter_trigger2440); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:292:29: DISABLE_VK
							{
							match(input,DISABLE_VK,FOLLOW_DISABLE_VK_in_alter_trigger2442); 
							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:293:18: ^( RENAME_VK trigger_name )
					{
					match(input,RENAME_VK,FOLLOW_RENAME_VK_in_alter_trigger2463); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_trigger_name_in_alter_trigger2465);
					trigger_name();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:294:18: ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )*
					{
					// PLSQLPrinter.g:294:18: ( DEBUG_VK )?
					int alt58=2;
					int LA58_0 = input.LA(1);
					if ( (LA58_0==DEBUG_VK) ) {
						alt58=1;
					}
					switch (alt58) {
						case 1 :
							// PLSQLPrinter.g:294:18: DEBUG_VK
							{
							match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_trigger2485); 
							}
							break;

					}

					// PLSQLPrinter.g:294:28: ( REUSE_VK )?
					int alt59=2;
					int LA59_0 = input.LA(1);
					if ( (LA59_0==REUSE_VK) ) {
						alt59=1;
					}
					switch (alt59) {
						case 1 :
							// PLSQLPrinter.g:294:28: REUSE_VK
							{
							match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_trigger2488); 
							}
							break;

					}

					// PLSQLPrinter.g:294:38: ( compiler_parameters_clause )*
					loop60:
					while (true) {
						int alt60=2;
						int LA60_0 = input.LA(1);
						if ( (LA60_0==COMPILER_PARAMETER) ) {
							alt60=1;
						}

						switch (alt60) {
						case 1 :
							// PLSQLPrinter.g:294:38: compiler_parameters_clause
							{
							pushFollow(FOLLOW_compiler_parameters_clause_in_alter_trigger2491);
							compiler_parameters_clause();
							state._fsp--;

							}
							break;

						default :
							break loop60;
						}
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 297:5: -> template( \"not implemented: alter_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_trigger"


	public static class create_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_trigger"
	// PLSQLPrinter.g:300:1: create_trigger : ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body ) -> template( \"not implemented: create_trigger\";
	public final PLSQLPrinter.create_trigger_return create_trigger() throws RecognitionException {
		PLSQLPrinter.create_trigger_return retval = new PLSQLPrinter.create_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:301:5: ( ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body ) -> template( \"not implemented: create_trigger\")
			// PLSQLPrinter.g:301:10: ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body )
			{
			match(input,CREATE_TRIGGER,FOLLOW_CREATE_TRIGGER_in_create_trigger2551); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:301:27: ( REPLACE_VK )?
			int alt62=2;
			int LA62_0 = input.LA(1);
			if ( (LA62_0==REPLACE_VK) ) {
				alt62=1;
			}
			switch (alt62) {
				case 1 :
					// PLSQLPrinter.g:301:27: REPLACE_VK
					{
					match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_trigger2553); 
					}
					break;

			}

			pushFollow(FOLLOW_trigger_name_in_create_trigger2556);
			trigger_name();
			state._fsp--;

			// PLSQLPrinter.g:302:13: ( simple_dml_trigger )?
			int alt63=2;
			int LA63_0 = input.LA(1);
			if ( (LA63_0==SIMPLE_DML) ) {
				alt63=1;
			}
			switch (alt63) {
				case 1 :
					// PLSQLPrinter.g:302:13: simple_dml_trigger
					{
					pushFollow(FOLLOW_simple_dml_trigger_in_create_trigger2572);
					simple_dml_trigger();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:302:33: ( compound_dml_trigger )?
			int alt64=2;
			int LA64_0 = input.LA(1);
			if ( (LA64_0==COMPOUND_DML) ) {
				alt64=1;
			}
			switch (alt64) {
				case 1 :
					// PLSQLPrinter.g:302:33: compound_dml_trigger
					{
					pushFollow(FOLLOW_compound_dml_trigger_in_create_trigger2575);
					compound_dml_trigger();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:302:55: ( non_dml_trigger )?
			int alt65=2;
			int LA65_0 = input.LA(1);
			if ( (LA65_0==NON_DML) ) {
				alt65=1;
			}
			switch (alt65) {
				case 1 :
					// PLSQLPrinter.g:302:55: non_dml_trigger
					{
					pushFollow(FOLLOW_non_dml_trigger_in_create_trigger2578);
					non_dml_trigger();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:303:13: ( trigger_follows_clause )?
			int alt66=2;
			int LA66_0 = input.LA(1);
			if ( (LA66_0==FOLLOWS_VK) ) {
				alt66=1;
			}
			switch (alt66) {
				case 1 :
					// PLSQLPrinter.g:303:13: trigger_follows_clause
					{
					pushFollow(FOLLOW_trigger_follows_clause_in_create_trigger2593);
					trigger_follows_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:303:37: ( ENABLE_VK | DISABLE_VK )?
			int alt67=3;
			int LA67_0 = input.LA(1);
			if ( (LA67_0==ENABLE_VK) ) {
				alt67=1;
			}
			else if ( (LA67_0==DISABLE_VK) ) {
				alt67=2;
			}
			switch (alt67) {
				case 1 :
					// PLSQLPrinter.g:303:38: ENABLE_VK
					{
					match(input,ENABLE_VK,FOLLOW_ENABLE_VK_in_create_trigger2597); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:303:48: DISABLE_VK
					{
					match(input,DISABLE_VK,FOLLOW_DISABLE_VK_in_create_trigger2599); 
					}
					break;

			}

			// PLSQLPrinter.g:303:61: ( trigger_when_clause )?
			int alt68=2;
			int LA68_0 = input.LA(1);
			if ( (LA68_0==SQL92_RESERVED_WHEN) ) {
				alt68=1;
			}
			switch (alt68) {
				case 1 :
					// PLSQLPrinter.g:303:61: trigger_when_clause
					{
					pushFollow(FOLLOW_trigger_when_clause_in_create_trigger2603);
					trigger_when_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_trigger_body_in_create_trigger2606);
			trigger_body();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 304:5: -> template( \"not implemented: create_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: create_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_trigger"


	public static class trigger_follows_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_follows_clause"
	// PLSQLPrinter.g:307:1: trigger_follows_clause : ^( FOLLOWS_VK ( trigger_name )+ ) -> template( \"not implemented: trigger_follows_clause\";
	public final PLSQLPrinter.trigger_follows_clause_return trigger_follows_clause() throws RecognitionException {
		PLSQLPrinter.trigger_follows_clause_return retval = new PLSQLPrinter.trigger_follows_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:308:5: ( ^( FOLLOWS_VK ( trigger_name )+ ) -> template( \"not implemented: trigger_follows_clause\")
			// PLSQLPrinter.g:308:10: ^( FOLLOWS_VK ( trigger_name )+ )
			{
			match(input,FOLLOWS_VK,FOLLOW_FOLLOWS_VK_in_trigger_follows_clause2642); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:308:23: ( trigger_name )+
			int cnt69=0;
			loop69:
			while (true) {
				int alt69=2;
				int LA69_0 = input.LA(1);
				if ( (LA69_0==TRIGGER_NAME) ) {
					alt69=1;
				}

				switch (alt69) {
				case 1 :
					// PLSQLPrinter.g:308:23: trigger_name
					{
					pushFollow(FOLLOW_trigger_name_in_trigger_follows_clause2644);
					trigger_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt69 >= 1 ) break loop69;
					EarlyExitException eee = new EarlyExitException(69, input);
					throw eee;
				}
				cnt69++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 309:5: -> template( \"not implemented: trigger_follows_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: trigger_follows_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_follows_clause"


	public static class trigger_when_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_when_clause"
	// PLSQLPrinter.g:312:1: trigger_when_clause : ^( SQL92_RESERVED_WHEN expression ) -> template( \"not implemented: trigger_when_clause\";
	public final PLSQLPrinter.trigger_when_clause_return trigger_when_clause() throws RecognitionException {
		PLSQLPrinter.trigger_when_clause_return retval = new PLSQLPrinter.trigger_when_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:313:5: ( ^( SQL92_RESERVED_WHEN expression ) -> template( \"not implemented: trigger_when_clause\")
			// PLSQLPrinter.g:313:10: ^( SQL92_RESERVED_WHEN expression )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_trigger_when_clause2681); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_trigger_when_clause2683);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 314:5: -> template( \"not implemented: trigger_when_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: trigger_when_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_when_clause"


	public static class simple_dml_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "simple_dml_trigger"
	// PLSQLPrinter.g:318:1: simple_dml_trigger : ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause ) -> template( \"not implemented: simple_dml_trigger\";
	public final PLSQLPrinter.simple_dml_trigger_return simple_dml_trigger() throws RecognitionException {
		PLSQLPrinter.simple_dml_trigger_return retval = new PLSQLPrinter.simple_dml_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:319:5: ( ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause ) -> template( \"not implemented: simple_dml_trigger\")
			// PLSQLPrinter.g:319:10: ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause )
			{
			match(input,SIMPLE_DML,FOLLOW_SIMPLE_DML_in_simple_dml_trigger2720); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:319:23: ( BEFORE_VK | AFTER_VK | INSTEAD_VK )
			int alt70=3;
			switch ( input.LA(1) ) {
			case BEFORE_VK:
				{
				alt70=1;
				}
				break;
			case AFTER_VK:
				{
				alt70=2;
				}
				break;
			case INSTEAD_VK:
				{
				alt70=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 70, 0, input);
				throw nvae;
			}
			switch (alt70) {
				case 1 :
					// PLSQLPrinter.g:319:24: BEFORE_VK
					{
					match(input,BEFORE_VK,FOLLOW_BEFORE_VK_in_simple_dml_trigger2723); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:319:34: AFTER_VK
					{
					match(input,AFTER_VK,FOLLOW_AFTER_VK_in_simple_dml_trigger2725); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:319:43: INSTEAD_VK
					{
					match(input,INSTEAD_VK,FOLLOW_INSTEAD_VK_in_simple_dml_trigger2727); 
					}
					break;

			}

			// PLSQLPrinter.g:319:55: ( FOR_EACH_ROW )?
			int alt71=2;
			int LA71_0 = input.LA(1);
			if ( (LA71_0==FOR_EACH_ROW) ) {
				alt71=1;
			}
			switch (alt71) {
				case 1 :
					// PLSQLPrinter.g:319:55: FOR_EACH_ROW
					{
					match(input,FOR_EACH_ROW,FOLLOW_FOR_EACH_ROW_in_simple_dml_trigger2730); 
					}
					break;

			}

			// PLSQLPrinter.g:319:69: ( referencing_clause )?
			int alt72=2;
			int LA72_0 = input.LA(1);
			if ( (LA72_0==REFERENCING_VK) ) {
				alt72=1;
			}
			switch (alt72) {
				case 1 :
					// PLSQLPrinter.g:319:69: referencing_clause
					{
					pushFollow(FOLLOW_referencing_clause_in_simple_dml_trigger2733);
					referencing_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_event_clause_in_simple_dml_trigger2736);
			dml_event_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 320:5: -> template( \"not implemented: simple_dml_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: simple_dml_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "simple_dml_trigger"


	public static class compound_dml_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "compound_dml_trigger"
	// PLSQLPrinter.g:323:1: compound_dml_trigger : ^( COMPOUND_DML ( referencing_clause )? dml_event_clause ) -> template( \"not implemented: compound_dml_trigger\";
	public final PLSQLPrinter.compound_dml_trigger_return compound_dml_trigger() throws RecognitionException {
		PLSQLPrinter.compound_dml_trigger_return retval = new PLSQLPrinter.compound_dml_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:324:5: ( ^( COMPOUND_DML ( referencing_clause )? dml_event_clause ) -> template( \"not implemented: compound_dml_trigger\")
			// PLSQLPrinter.g:324:10: ^( COMPOUND_DML ( referencing_clause )? dml_event_clause )
			{
			match(input,COMPOUND_DML,FOLLOW_COMPOUND_DML_in_compound_dml_trigger2772); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:324:25: ( referencing_clause )?
			int alt73=2;
			int LA73_0 = input.LA(1);
			if ( (LA73_0==REFERENCING_VK) ) {
				alt73=1;
			}
			switch (alt73) {
				case 1 :
					// PLSQLPrinter.g:324:25: referencing_clause
					{
					pushFollow(FOLLOW_referencing_clause_in_compound_dml_trigger2774);
					referencing_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_event_clause_in_compound_dml_trigger2777);
			dml_event_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 325:5: -> template( \"not implemented: compound_dml_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: compound_dml_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compound_dml_trigger"


	public static class non_dml_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "non_dml_trigger"
	// PLSQLPrinter.g:328:1: non_dml_trigger : ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) ) -> template( \"not implemented: non_dml_trigger\";
	public final PLSQLPrinter.non_dml_trigger_return non_dml_trigger() throws RecognitionException {
		PLSQLPrinter.non_dml_trigger_return retval = new PLSQLPrinter.non_dml_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:329:5: ( ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) ) -> template( \"not implemented: non_dml_trigger\")
			// PLSQLPrinter.g:329:10: ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) )
			{
			match(input,NON_DML,FOLLOW_NON_DML_in_non_dml_trigger2813); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:329:20: ( BEFORE_VK | AFTER_VK )
			int alt74=2;
			int LA74_0 = input.LA(1);
			if ( (LA74_0==BEFORE_VK) ) {
				alt74=1;
			}
			else if ( (LA74_0==AFTER_VK) ) {
				alt74=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 74, 0, input);
				throw nvae;
			}

			switch (alt74) {
				case 1 :
					// PLSQLPrinter.g:329:21: BEFORE_VK
					{
					match(input,BEFORE_VK,FOLLOW_BEFORE_VK_in_non_dml_trigger2816); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:329:31: AFTER_VK
					{
					match(input,AFTER_VK,FOLLOW_AFTER_VK_in_non_dml_trigger2818); 
					}
					break;

			}

			// PLSQLPrinter.g:329:41: ( non_dml_event )+
			int cnt75=0;
			loop75:
			while (true) {
				int alt75=2;
				switch ( input.LA(1) ) {
				case DATABASE_VK:
					{
					int LA75_1 = input.LA(2);
					if ( (LA75_1==SQL92_RESERVED_ALTER||LA75_1==SQL92_RESERVED_CREATE||LA75_1==SQL92_RESERVED_DROP||LA75_1==SQL92_RESERVED_GRANT||LA75_1==SQL92_RESERVED_REVOKE||LA75_1==ANALYZE_VK||LA75_1==ASSOCIATE_VK||LA75_1==AUDIT_VK||LA75_1==COMMENT_VK||LA75_1==DATABASE_VK||(LA75_1 >= DB_ROLE_CHANGE_VK && LA75_1 <= DDL_VK)||LA75_1==DISASSOCIATE_VK||LA75_1==FOLLOWS_VK||(LA75_1 >= LOGOFF_VK && LA75_1 <= LOGON_VK)||LA75_1==NOAUDIT_VK||LA75_1==RENAME_VK||(LA75_1 >= SCHEMA_NAME && LA75_1 <= SCHEMA_VK)||LA75_1==SERVERERROR_VK||LA75_1==SHUTDOWN_VK||LA75_1==STARTUP_VK||LA75_1==SUSPEND_VK||LA75_1==TRUNCATE_VK) ) {
						alt75=1;
					}

					}
					break;
				case SCHEMA_VK:
					{
					int LA75_3 = input.LA(2);
					if ( (LA75_3==SQL92_RESERVED_ALTER||LA75_3==SQL92_RESERVED_CREATE||LA75_3==SQL92_RESERVED_DROP||LA75_3==SQL92_RESERVED_GRANT||LA75_3==SQL92_RESERVED_REVOKE||LA75_3==ANALYZE_VK||LA75_3==ASSOCIATE_VK||LA75_3==AUDIT_VK||LA75_3==COMMENT_VK||LA75_3==DATABASE_VK||(LA75_3 >= DB_ROLE_CHANGE_VK && LA75_3 <= DDL_VK)||LA75_3==DISASSOCIATE_VK||LA75_3==FOLLOWS_VK||(LA75_3 >= LOGOFF_VK && LA75_3 <= LOGON_VK)||LA75_3==NOAUDIT_VK||LA75_3==RENAME_VK||(LA75_3 >= SCHEMA_NAME && LA75_3 <= SCHEMA_VK)||LA75_3==SERVERERROR_VK||LA75_3==SHUTDOWN_VK||LA75_3==STARTUP_VK||LA75_3==SUSPEND_VK||LA75_3==TRUNCATE_VK) ) {
						alt75=1;
					}

					}
					break;
				case SQL92_RESERVED_ALTER:
				case SQL92_RESERVED_CREATE:
				case SQL92_RESERVED_DROP:
				case SQL92_RESERVED_GRANT:
				case SQL92_RESERVED_REVOKE:
				case ANALYZE_VK:
				case ASSOCIATE_VK:
				case AUDIT_VK:
				case COMMENT_VK:
				case DB_ROLE_CHANGE_VK:
				case DDL_VK:
				case DISASSOCIATE_VK:
				case FOLLOWS_VK:
				case LOGOFF_VK:
				case LOGON_VK:
				case NOAUDIT_VK:
				case RENAME_VK:
				case SERVERERROR_VK:
				case SHUTDOWN_VK:
				case STARTUP_VK:
				case SUSPEND_VK:
				case TRUNCATE_VK:
					{
					alt75=1;
					}
					break;
				}
				switch (alt75) {
				case 1 :
					// PLSQLPrinter.g:329:41: non_dml_event
					{
					pushFollow(FOLLOW_non_dml_event_in_non_dml_trigger2821);
					non_dml_event();
					state._fsp--;

					}
					break;

				default :
					if ( cnt75 >= 1 ) break loop75;
					EarlyExitException eee = new EarlyExitException(75, input);
					throw eee;
				}
				cnt75++;
			}

			// PLSQLPrinter.g:329:56: ( DATABASE_VK | ( schema_name )? SCHEMA_VK )
			int alt77=2;
			int LA77_0 = input.LA(1);
			if ( (LA77_0==DATABASE_VK) ) {
				alt77=1;
			}
			else if ( ((LA77_0 >= SCHEMA_NAME && LA77_0 <= SCHEMA_VK)) ) {
				alt77=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 77, 0, input);
				throw nvae;
			}

			switch (alt77) {
				case 1 :
					// PLSQLPrinter.g:329:57: DATABASE_VK
					{
					match(input,DATABASE_VK,FOLLOW_DATABASE_VK_in_non_dml_trigger2825); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:329:69: ( schema_name )? SCHEMA_VK
					{
					// PLSQLPrinter.g:329:69: ( schema_name )?
					int alt76=2;
					int LA76_0 = input.LA(1);
					if ( (LA76_0==SCHEMA_NAME) ) {
						alt76=1;
					}
					switch (alt76) {
						case 1 :
							// PLSQLPrinter.g:329:69: schema_name
							{
							pushFollow(FOLLOW_schema_name_in_non_dml_trigger2827);
							schema_name();
							state._fsp--;

							}
							break;

					}

					match(input,SCHEMA_VK,FOLLOW_SCHEMA_VK_in_non_dml_trigger2830); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 330:5: -> template( \"not implemented: non_dml_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: non_dml_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "non_dml_trigger"


	public static class trigger_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_body"
	// PLSQLPrinter.g:333:1: trigger_body : ( ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ ) -> template( \"not implemented: trigger_body\"| ^( CALL_VK routine_name ( function_argument )? ) -> template( \"not implemented: trigger_body\"| ^( BODY_MODE block ) -> template( \"not implemented: trigger_body\");
	public final PLSQLPrinter.trigger_body_return trigger_body() throws RecognitionException {
		PLSQLPrinter.trigger_body_return retval = new PLSQLPrinter.trigger_body_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:334:5: ( ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ ) -> template( \"not implemented: trigger_body\"| ^( CALL_VK routine_name ( function_argument )? ) -> template( \"not implemented: trigger_body\"| ^( BODY_MODE block ) -> template( \"not implemented: trigger_body\")
			int alt81=3;
			switch ( input.LA(1) ) {
			case COMPOUND_VK:
				{
				alt81=1;
				}
				break;
			case CALL_VK:
				{
				alt81=2;
				}
				break;
			case BODY_MODE:
				{
				alt81=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 81, 0, input);
				throw nvae;
			}
			switch (alt81) {
				case 1 :
					// PLSQLPrinter.g:334:10: ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ )
					{
					match(input,COMPOUND_VK,FOLLOW_COMPOUND_VK_in_trigger_body2867); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_trigger_name_in_trigger_body2869);
					trigger_name();
					state._fsp--;

					// PLSQLPrinter.g:334:37: ( declare_spec )*
					loop78:
					while (true) {
						int alt78=2;
						int LA78_0 = input.LA(1);
						if ( (LA78_0==CREATE_FUNCTION||LA78_0==CREATE_PROCEDURE||(LA78_0 >= CREATE_TYPE_BODY && LA78_0 <= CREATE_TYPE_SPEC)||LA78_0==CURSOR_DECLARE||LA78_0==EXCEPTION_DECLARE||LA78_0==PRAGMA_DECLARE||(LA78_0 >= RECORD_TYPE_DECLARE && LA78_0 <= RECORD_VAR_DECLARE)||LA78_0==SUBTYPE_DECLARE||(LA78_0 >= TABLE_TYPE_DECLARE && LA78_0 <= TABLE_VAR_DECLARE)||LA78_0==VARIABLE_DECLARE) ) {
							alt78=1;
						}

						switch (alt78) {
						case 1 :
							// PLSQLPrinter.g:334:37: declare_spec
							{
							pushFollow(FOLLOW_declare_spec_in_trigger_body2871);
							declare_spec();
							state._fsp--;

							}
							break;

						default :
							break loop78;
						}
					}

					// PLSQLPrinter.g:334:51: ( timing_point_section )+
					int cnt79=0;
					loop79:
					while (true) {
						int alt79=2;
						int LA79_0 = input.LA(1);
						if ( ((LA79_0 >= AFTER_EACH_ROW && LA79_0 <= AFTER_STATEMENT)||(LA79_0 >= BEFORE_EACH_ROW && LA79_0 <= BEFORE_STATEMENT)) ) {
							alt79=1;
						}

						switch (alt79) {
						case 1 :
							// PLSQLPrinter.g:334:51: timing_point_section
							{
							pushFollow(FOLLOW_timing_point_section_in_trigger_body2874);
							timing_point_section();
							state._fsp--;

							}
							break;

						default :
							if ( cnt79 >= 1 ) break loop79;
							EarlyExitException eee = new EarlyExitException(79, input);
							throw eee;
						}
						cnt79++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 335:5: -> template( \"not implemented: trigger_body\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: trigger_body");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:336:10: ^( CALL_VK routine_name ( function_argument )? )
					{
					match(input,CALL_VK,FOLLOW_CALL_VK_in_trigger_body2902); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_routine_name_in_trigger_body2904);
					routine_name();
					state._fsp--;

					// PLSQLPrinter.g:336:33: ( function_argument )?
					int alt80=2;
					int LA80_0 = input.LA(1);
					if ( (LA80_0==ARGUMENTS) ) {
						alt80=1;
					}
					switch (alt80) {
						case 1 :
							// PLSQLPrinter.g:336:33: function_argument
							{
							pushFollow(FOLLOW_function_argument_in_trigger_body2906);
							function_argument();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 337:5: -> template( \"not implemented: trigger_body\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: trigger_body");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:338:10: ^( BODY_MODE block )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_trigger_body2935); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_trigger_body2937);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 339:5: -> template( \"not implemented: trigger_body\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: trigger_body");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_body"


	public static class timing_point_section_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "timing_point_section"
	// PLSQLPrinter.g:342:1: timing_point_section : ( ^( BEFORE_STATEMENT block ) -> template( \"not implemented: timing_point_section\"| ^( BEFORE_EACH_ROW block ) -> template( \"not implemented: timing_point_section\"| ^( AFTER_STATEMENT block ) -> template( \"not implemented: timing_point_section\"| ^( AFTER_EACH_ROW block ) -> template( \"not implemented: timing_point_section\");
	public final PLSQLPrinter.timing_point_section_return timing_point_section() throws RecognitionException {
		PLSQLPrinter.timing_point_section_return retval = new PLSQLPrinter.timing_point_section_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:343:5: ( ^( BEFORE_STATEMENT block ) -> template( \"not implemented: timing_point_section\"| ^( BEFORE_EACH_ROW block ) -> template( \"not implemented: timing_point_section\"| ^( AFTER_STATEMENT block ) -> template( \"not implemented: timing_point_section\"| ^( AFTER_EACH_ROW block ) -> template( \"not implemented: timing_point_section\")
			int alt82=4;
			switch ( input.LA(1) ) {
			case BEFORE_STATEMENT:
				{
				alt82=1;
				}
				break;
			case BEFORE_EACH_ROW:
				{
				alt82=2;
				}
				break;
			case AFTER_STATEMENT:
				{
				alt82=3;
				}
				break;
			case AFTER_EACH_ROW:
				{
				alt82=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 82, 0, input);
				throw nvae;
			}
			switch (alt82) {
				case 1 :
					// PLSQLPrinter.g:343:10: ^( BEFORE_STATEMENT block )
					{
					match(input,BEFORE_STATEMENT,FOLLOW_BEFORE_STATEMENT_in_timing_point_section2973); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section2975);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 344:5: -> template( \"not implemented: timing_point_section\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: timing_point_section");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:345:10: ^( BEFORE_EACH_ROW block )
					{
					match(input,BEFORE_EACH_ROW,FOLLOW_BEFORE_EACH_ROW_in_timing_point_section3002); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section3004);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 346:5: -> template( \"not implemented: timing_point_section\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: timing_point_section");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:347:10: ^( AFTER_STATEMENT block )
					{
					match(input,AFTER_STATEMENT,FOLLOW_AFTER_STATEMENT_in_timing_point_section3031); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section3033);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 348:5: -> template( \"not implemented: timing_point_section\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: timing_point_section");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:349:10: ^( AFTER_EACH_ROW block )
					{
					match(input,AFTER_EACH_ROW,FOLLOW_AFTER_EACH_ROW_in_timing_point_section3060); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section3062);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 350:5: -> template( \"not implemented: timing_point_section\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: timing_point_section");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "timing_point_section"


	public static class non_dml_event_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "non_dml_event"
	// PLSQLPrinter.g:353:1: non_dml_event : ( SQL92_RESERVED_ALTER -> template( \"not implemented: non_dml_event\"| ANALYZE_VK -> template( \"not implemented: non_dml_event\"| ASSOCIATE_VK STATISTICS_VK -> template( \"not implemented: non_dml_event\"| AUDIT_VK -> template( \"not implemented: non_dml_event\"| COMMENT_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_CREATE -> template( \"not implemented: non_dml_event\"| DISASSOCIATE_VK STATISTICS_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_DROP -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_GRANT -> template( \"not implemented: non_dml_event\"| NOAUDIT_VK -> template( \"not implemented: non_dml_event\"| RENAME_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_REVOKE -> template( \"not implemented: non_dml_event\"| TRUNCATE_VK -> template( \"not implemented: non_dml_event\"| DDL_VK -> template( \"not implemented: non_dml_event\"| STARTUP_VK -> template( \"not implemented: non_dml_event\"| SHUTDOWN_VK -> template( \"not implemented: non_dml_event\"| DB_ROLE_CHANGE_VK -> template( \"not implemented: non_dml_event\"| LOGON_VK -> template( \"not implemented: non_dml_event\"| LOGOFF_VK -> template( \"not implemented: non_dml_event\"| SERVERERROR_VK -> template( \"not implemented: non_dml_event\"| SUSPEND_VK -> template( \"not implemented: non_dml_event\"| DATABASE_VK -> template( \"not implemented: non_dml_event\"| SCHEMA_VK -> template( \"not implemented: non_dml_event\"| FOLLOWS_VK -> template( \"not implemented: non_dml_event\");
	public final PLSQLPrinter.non_dml_event_return non_dml_event() throws RecognitionException {
		PLSQLPrinter.non_dml_event_return retval = new PLSQLPrinter.non_dml_event_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:354:5: ( SQL92_RESERVED_ALTER -> template( \"not implemented: non_dml_event\"| ANALYZE_VK -> template( \"not implemented: non_dml_event\"| ASSOCIATE_VK STATISTICS_VK -> template( \"not implemented: non_dml_event\"| AUDIT_VK -> template( \"not implemented: non_dml_event\"| COMMENT_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_CREATE -> template( \"not implemented: non_dml_event\"| DISASSOCIATE_VK STATISTICS_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_DROP -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_GRANT -> template( \"not implemented: non_dml_event\"| NOAUDIT_VK -> template( \"not implemented: non_dml_event\"| RENAME_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_REVOKE -> template( \"not implemented: non_dml_event\"| TRUNCATE_VK -> template( \"not implemented: non_dml_event\"| DDL_VK -> template( \"not implemented: non_dml_event\"| STARTUP_VK -> template( \"not implemented: non_dml_event\"| SHUTDOWN_VK -> template( \"not implemented: non_dml_event\"| DB_ROLE_CHANGE_VK -> template( \"not implemented: non_dml_event\"| LOGON_VK -> template( \"not implemented: non_dml_event\"| LOGOFF_VK -> template( \"not implemented: non_dml_event\"| SERVERERROR_VK -> template( \"not implemented: non_dml_event\"| SUSPEND_VK -> template( \"not implemented: non_dml_event\"| DATABASE_VK -> template( \"not implemented: non_dml_event\"| SCHEMA_VK -> template( \"not implemented: non_dml_event\"| FOLLOWS_VK -> template( \"not implemented: non_dml_event\")
			int alt83=24;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ALTER:
				{
				alt83=1;
				}
				break;
			case ANALYZE_VK:
				{
				alt83=2;
				}
				break;
			case ASSOCIATE_VK:
				{
				alt83=3;
				}
				break;
			case AUDIT_VK:
				{
				alt83=4;
				}
				break;
			case COMMENT_VK:
				{
				alt83=5;
				}
				break;
			case SQL92_RESERVED_CREATE:
				{
				alt83=6;
				}
				break;
			case DISASSOCIATE_VK:
				{
				alt83=7;
				}
				break;
			case SQL92_RESERVED_DROP:
				{
				alt83=8;
				}
				break;
			case SQL92_RESERVED_GRANT:
				{
				alt83=9;
				}
				break;
			case NOAUDIT_VK:
				{
				alt83=10;
				}
				break;
			case RENAME_VK:
				{
				alt83=11;
				}
				break;
			case SQL92_RESERVED_REVOKE:
				{
				alt83=12;
				}
				break;
			case TRUNCATE_VK:
				{
				alt83=13;
				}
				break;
			case DDL_VK:
				{
				alt83=14;
				}
				break;
			case STARTUP_VK:
				{
				alt83=15;
				}
				break;
			case SHUTDOWN_VK:
				{
				alt83=16;
				}
				break;
			case DB_ROLE_CHANGE_VK:
				{
				alt83=17;
				}
				break;
			case LOGON_VK:
				{
				alt83=18;
				}
				break;
			case LOGOFF_VK:
				{
				alt83=19;
				}
				break;
			case SERVERERROR_VK:
				{
				alt83=20;
				}
				break;
			case SUSPEND_VK:
				{
				alt83=21;
				}
				break;
			case DATABASE_VK:
				{
				alt83=22;
				}
				break;
			case SCHEMA_VK:
				{
				alt83=23;
				}
				break;
			case FOLLOWS_VK:
				{
				alt83=24;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 83, 0, input);
				throw nvae;
			}
			switch (alt83) {
				case 1 :
					// PLSQLPrinter.g:354:10: SQL92_RESERVED_ALTER
					{
					match(input,SQL92_RESERVED_ALTER,FOLLOW_SQL92_RESERVED_ALTER_in_non_dml_event3097); 
					// TEMPLATE REWRITE
					// 355:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:356:10: ANALYZE_VK
					{
					match(input,ANALYZE_VK,FOLLOW_ANALYZE_VK_in_non_dml_event3122); 
					// TEMPLATE REWRITE
					// 357:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:358:10: ASSOCIATE_VK STATISTICS_VK
					{
					match(input,ASSOCIATE_VK,FOLLOW_ASSOCIATE_VK_in_non_dml_event3147); 
					match(input,STATISTICS_VK,FOLLOW_STATISTICS_VK_in_non_dml_event3149); 
					// TEMPLATE REWRITE
					// 359:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:360:10: AUDIT_VK
					{
					match(input,AUDIT_VK,FOLLOW_AUDIT_VK_in_non_dml_event3174); 
					// TEMPLATE REWRITE
					// 361:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:362:10: COMMENT_VK
					{
					match(input,COMMENT_VK,FOLLOW_COMMENT_VK_in_non_dml_event3199); 
					// TEMPLATE REWRITE
					// 363:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:364:10: SQL92_RESERVED_CREATE
					{
					match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_non_dml_event3224); 
					// TEMPLATE REWRITE
					// 365:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:366:10: DISASSOCIATE_VK STATISTICS_VK
					{
					match(input,DISASSOCIATE_VK,FOLLOW_DISASSOCIATE_VK_in_non_dml_event3249); 
					match(input,STATISTICS_VK,FOLLOW_STATISTICS_VK_in_non_dml_event3251); 
					// TEMPLATE REWRITE
					// 367:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:368:10: SQL92_RESERVED_DROP
					{
					match(input,SQL92_RESERVED_DROP,FOLLOW_SQL92_RESERVED_DROP_in_non_dml_event3276); 
					// TEMPLATE REWRITE
					// 369:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:370:10: SQL92_RESERVED_GRANT
					{
					match(input,SQL92_RESERVED_GRANT,FOLLOW_SQL92_RESERVED_GRANT_in_non_dml_event3301); 
					// TEMPLATE REWRITE
					// 371:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:372:10: NOAUDIT_VK
					{
					match(input,NOAUDIT_VK,FOLLOW_NOAUDIT_VK_in_non_dml_event3326); 
					// TEMPLATE REWRITE
					// 373:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:374:10: RENAME_VK
					{
					match(input,RENAME_VK,FOLLOW_RENAME_VK_in_non_dml_event3351); 
					// TEMPLATE REWRITE
					// 375:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:376:10: SQL92_RESERVED_REVOKE
					{
					match(input,SQL92_RESERVED_REVOKE,FOLLOW_SQL92_RESERVED_REVOKE_in_non_dml_event3376); 
					// TEMPLATE REWRITE
					// 377:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:378:10: TRUNCATE_VK
					{
					match(input,TRUNCATE_VK,FOLLOW_TRUNCATE_VK_in_non_dml_event3401); 
					// TEMPLATE REWRITE
					// 379:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:380:10: DDL_VK
					{
					match(input,DDL_VK,FOLLOW_DDL_VK_in_non_dml_event3426); 
					// TEMPLATE REWRITE
					// 381:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:382:10: STARTUP_VK
					{
					match(input,STARTUP_VK,FOLLOW_STARTUP_VK_in_non_dml_event3451); 
					// TEMPLATE REWRITE
					// 383:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:384:10: SHUTDOWN_VK
					{
					match(input,SHUTDOWN_VK,FOLLOW_SHUTDOWN_VK_in_non_dml_event3476); 
					// TEMPLATE REWRITE
					// 385:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:386:10: DB_ROLE_CHANGE_VK
					{
					match(input,DB_ROLE_CHANGE_VK,FOLLOW_DB_ROLE_CHANGE_VK_in_non_dml_event3501); 
					// TEMPLATE REWRITE
					// 387:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:388:10: LOGON_VK
					{
					match(input,LOGON_VK,FOLLOW_LOGON_VK_in_non_dml_event3526); 
					// TEMPLATE REWRITE
					// 389:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 19 :
					// PLSQLPrinter.g:390:10: LOGOFF_VK
					{
					match(input,LOGOFF_VK,FOLLOW_LOGOFF_VK_in_non_dml_event3551); 
					// TEMPLATE REWRITE
					// 391:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 20 :
					// PLSQLPrinter.g:392:10: SERVERERROR_VK
					{
					match(input,SERVERERROR_VK,FOLLOW_SERVERERROR_VK_in_non_dml_event3576); 
					// TEMPLATE REWRITE
					// 393:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 21 :
					// PLSQLPrinter.g:394:10: SUSPEND_VK
					{
					match(input,SUSPEND_VK,FOLLOW_SUSPEND_VK_in_non_dml_event3601); 
					// TEMPLATE REWRITE
					// 395:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 22 :
					// PLSQLPrinter.g:396:10: DATABASE_VK
					{
					match(input,DATABASE_VK,FOLLOW_DATABASE_VK_in_non_dml_event3626); 
					// TEMPLATE REWRITE
					// 397:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 23 :
					// PLSQLPrinter.g:398:10: SCHEMA_VK
					{
					match(input,SCHEMA_VK,FOLLOW_SCHEMA_VK_in_non_dml_event3651); 
					// TEMPLATE REWRITE
					// 399:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 24 :
					// PLSQLPrinter.g:400:10: FOLLOWS_VK
					{
					match(input,FOLLOWS_VK,FOLLOW_FOLLOWS_VK_in_non_dml_event3676); 
					// TEMPLATE REWRITE
					// 401:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "non_dml_event"


	public static class dml_event_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_event_clause"
	// PLSQLPrinter.g:404:1: dml_event_clause : ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) ) -> template( \"not implemented: dml_event_clause\";
	public final PLSQLPrinter.dml_event_clause_return dml_event_clause() throws RecognitionException {
		PLSQLPrinter.dml_event_clause_return retval = new PLSQLPrinter.dml_event_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:405:5: ( ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) ) -> template( \"not implemented: dml_event_clause\")
			// PLSQLPrinter.g:405:10: ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) )
			{
			match(input,DML_EVENT,FOLLOW_DML_EVENT_in_dml_event_clause3711); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:405:22: ( dml_event_element )+
			int cnt84=0;
			loop84:
			while (true) {
				int alt84=2;
				int LA84_0 = input.LA(1);
				if ( (LA84_0==DML_EVENT_ELEMENT) ) {
					alt84=1;
				}

				switch (alt84) {
				case 1 :
					// PLSQLPrinter.g:405:22: dml_event_element
					{
					pushFollow(FOLLOW_dml_event_element_in_dml_event_clause3713);
					dml_event_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt84 >= 1 ) break loop84;
					EarlyExitException eee = new EarlyExitException(84, input);
					throw eee;
				}
				cnt84++;
			}

			match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_dml_event_clause3717); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_dml_event_clause3719);
			tableview_name();
			state._fsp--;

			// PLSQLPrinter.g:405:76: ( dml_event_nested_clause )?
			int alt85=2;
			int LA85_0 = input.LA(1);
			if ( (LA85_0==NESTED_VK) ) {
				alt85=1;
			}
			switch (alt85) {
				case 1 :
					// PLSQLPrinter.g:405:76: dml_event_nested_clause
					{
					pushFollow(FOLLOW_dml_event_nested_clause_in_dml_event_clause3721);
					dml_event_nested_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 406:5: -> template( \"not implemented: dml_event_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dml_event_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_event_clause"


	public static class dml_event_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_event_element"
	// PLSQLPrinter.g:409:1: dml_event_element : ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) ) -> template( \"not implemented: dml_event_element\";
	public final PLSQLPrinter.dml_event_element_return dml_event_element() throws RecognitionException {
		PLSQLPrinter.dml_event_element_return retval = new PLSQLPrinter.dml_event_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:410:5: ( ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) ) -> template( \"not implemented: dml_event_element\")
			// PLSQLPrinter.g:410:10: ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) )
			{
			match(input,DML_EVENT_ELEMENT,FOLLOW_DML_EVENT_ELEMENT_in_dml_event_element3761); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:410:30: ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE )
			int alt86=3;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_DELETE:
				{
				alt86=1;
				}
				break;
			case SQL92_RESERVED_INSERT:
				{
				alt86=2;
				}
				break;
			case SQL92_RESERVED_UPDATE:
				{
				alt86=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 86, 0, input);
				throw nvae;
			}
			switch (alt86) {
				case 1 :
					// PLSQLPrinter.g:410:31: SQL92_RESERVED_DELETE
					{
					match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_dml_event_element3764); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:410:53: SQL92_RESERVED_INSERT
					{
					match(input,SQL92_RESERVED_INSERT,FOLLOW_SQL92_RESERVED_INSERT_in_dml_event_element3766); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:410:75: SQL92_RESERVED_UPDATE
					{
					match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_dml_event_element3768); 
					}
					break;

			}

			match(input,COLUMNS,FOLLOW_COLUMNS_in_dml_event_element3772); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:410:108: ( column_name )*
				loop87:
				while (true) {
					int alt87=2;
					int LA87_0 = input.LA(1);
					if ( (LA87_0==COLUMN_NAME) ) {
						alt87=1;
					}

					switch (alt87) {
					case 1 :
						// PLSQLPrinter.g:410:108: column_name
						{
						pushFollow(FOLLOW_column_name_in_dml_event_element3774);
						column_name();
						state._fsp--;

						}
						break;

					default :
						break loop87;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 411:5: -> template( \"not implemented: dml_event_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dml_event_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_event_element"


	public static class dml_event_nested_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_event_nested_clause"
	// PLSQLPrinter.g:414:1: dml_event_nested_clause : ^( NESTED_VK tableview_name ) -> template( \"not implemented: dml_event_nested_clause\";
	public final PLSQLPrinter.dml_event_nested_clause_return dml_event_nested_clause() throws RecognitionException {
		PLSQLPrinter.dml_event_nested_clause_return retval = new PLSQLPrinter.dml_event_nested_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:415:5: ( ^( NESTED_VK tableview_name ) -> template( \"not implemented: dml_event_nested_clause\")
			// PLSQLPrinter.g:415:10: ^( NESTED_VK tableview_name )
			{
			match(input,NESTED_VK,FOLLOW_NESTED_VK_in_dml_event_nested_clause3812); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_dml_event_nested_clause3814);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 416:5: -> template( \"not implemented: dml_event_nested_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dml_event_nested_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_event_nested_clause"


	public static class referencing_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "referencing_clause"
	// PLSQLPrinter.g:419:1: referencing_clause : ^( REFERENCING_VK ( referencing_element )+ ) -> template( \"not implemented: referencing_clause\";
	public final PLSQLPrinter.referencing_clause_return referencing_clause() throws RecognitionException {
		PLSQLPrinter.referencing_clause_return retval = new PLSQLPrinter.referencing_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:420:5: ( ^( REFERENCING_VK ( referencing_element )+ ) -> template( \"not implemented: referencing_clause\")
			// PLSQLPrinter.g:420:10: ^( REFERENCING_VK ( referencing_element )+ )
			{
			match(input,REFERENCING_VK,FOLLOW_REFERENCING_VK_in_referencing_clause3850); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:420:27: ( referencing_element )+
			int cnt88=0;
			loop88:
			while (true) {
				int alt88=2;
				int LA88_0 = input.LA(1);
				if ( (LA88_0==NEW_VK||LA88_0==OLD_VK||LA88_0==PARENT_VK) ) {
					alt88=1;
				}

				switch (alt88) {
				case 1 :
					// PLSQLPrinter.g:420:27: referencing_element
					{
					pushFollow(FOLLOW_referencing_element_in_referencing_clause3852);
					referencing_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt88 >= 1 ) break loop88;
					EarlyExitException eee = new EarlyExitException(88, input);
					throw eee;
				}
				cnt88++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 421:5: -> template( \"not implemented: referencing_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: referencing_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "referencing_clause"


	public static class referencing_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "referencing_element"
	// PLSQLPrinter.g:424:1: referencing_element : ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias ) -> template( \"not implemented: referencing_element\";
	public final PLSQLPrinter.referencing_element_return referencing_element() throws RecognitionException {
		PLSQLPrinter.referencing_element_return retval = new PLSQLPrinter.referencing_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:425:5: ( ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias ) -> template( \"not implemented: referencing_element\")
			// PLSQLPrinter.g:425:10: ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias )
			{
			// PLSQLPrinter.g:425:12: ( NEW_VK | OLD_VK | PARENT_VK )
			int alt89=3;
			switch ( input.LA(1) ) {
			case NEW_VK:
				{
				alt89=1;
				}
				break;
			case OLD_VK:
				{
				alt89=2;
				}
				break;
			case PARENT_VK:
				{
				alt89=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 89, 0, input);
				throw nvae;
			}
			switch (alt89) {
				case 1 :
					// PLSQLPrinter.g:425:13: NEW_VK
					{
					match(input,NEW_VK,FOLLOW_NEW_VK_in_referencing_element3890); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:425:20: OLD_VK
					{
					match(input,OLD_VK,FOLLOW_OLD_VK_in_referencing_element3892); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:425:27: PARENT_VK
					{
					match(input,PARENT_VK,FOLLOW_PARENT_VK_in_referencing_element3894); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_alias_in_referencing_element3897);
			alias();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 426:5: -> template( \"not implemented: referencing_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: referencing_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "referencing_element"


	public static class drop_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_type"
	// PLSQLPrinter.g:434:1: drop_type : ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? ) -> template( \"not implemented: drop_type\";
	public final PLSQLPrinter.drop_type_return drop_type() throws RecognitionException {
		PLSQLPrinter.drop_type_return retval = new PLSQLPrinter.drop_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:435:5: ( ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? ) -> template( \"not implemented: drop_type\")
			// PLSQLPrinter.g:435:10: ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? )
			{
			match(input,DROP_TYPE,FOLLOW_DROP_TYPE_in_drop_type3938); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_drop_type3940);
			type_name();
			state._fsp--;

			// PLSQLPrinter.g:435:32: ( BODY_VK )?
			int alt90=2;
			int LA90_0 = input.LA(1);
			if ( (LA90_0==BODY_VK) ) {
				alt90=1;
			}
			switch (alt90) {
				case 1 :
					// PLSQLPrinter.g:435:32: BODY_VK
					{
					match(input,BODY_VK,FOLLOW_BODY_VK_in_drop_type3942); 
					}
					break;

			}

			// PLSQLPrinter.g:435:41: ( FORCE_VK )?
			int alt91=2;
			int LA91_0 = input.LA(1);
			if ( (LA91_0==FORCE_VK) ) {
				alt91=1;
			}
			switch (alt91) {
				case 1 :
					// PLSQLPrinter.g:435:41: FORCE_VK
					{
					match(input,FORCE_VK,FOLLOW_FORCE_VK_in_drop_type3945); 
					}
					break;

			}

			// PLSQLPrinter.g:435:51: ( VALIDATE_VK )?
			int alt92=2;
			int LA92_0 = input.LA(1);
			if ( (LA92_0==VALIDATE_VK) ) {
				alt92=1;
			}
			switch (alt92) {
				case 1 :
					// PLSQLPrinter.g:435:51: VALIDATE_VK
					{
					match(input,VALIDATE_VK,FOLLOW_VALIDATE_VK_in_drop_type3948); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 436:5: -> template( \"not implemented: drop_type\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_type");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_type"


	public static class alter_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_type"
	// PLSQLPrinter.g:439:1: alter_type : ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? ) -> template( \"not implemented: alter_type\";
	public final PLSQLPrinter.alter_type_return alter_type() throws RecognitionException {
		PLSQLPrinter.alter_type_return retval = new PLSQLPrinter.alter_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:440:5: ( ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? ) -> template( \"not implemented: alter_type\")
			// PLSQLPrinter.g:440:10: ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? )
			{
			match(input,ALTER_TYPE,FOLLOW_ALTER_TYPE_in_alter_type3985); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_alter_type3987);
			type_name();
			state._fsp--;

			// PLSQLPrinter.g:441:13: ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
			int alt102=6;
			switch ( input.LA(1) ) {
			case REPLACE_VK:
				{
				alt102=1;
				}
				break;
			case ALTER_ATTRIBUTE:
				{
				alt102=2;
				}
				break;
			case ALTER_METHOD:
				{
				alt102=3;
				}
				break;
			case ALTER_COLLECTION:
				{
				alt102=4;
				}
				break;
			case MODIFIER:
				{
				alt102=5;
				}
				break;
			case COMPILE_VK:
				{
				alt102=6;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 102, 0, input);
				throw nvae;
			}
			switch (alt102) {
				case 1 :
					// PLSQLPrinter.g:441:18: ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? )
					{
					match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_alter_type4008); 
					match(input, Token.DOWN, null); 
					match(input,OBJECT_MEMBERS,FOLLOW_OBJECT_MEMBERS_in_alter_type4011); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:441:48: ( element_spec )+
					int cnt93=0;
					loop93:
					while (true) {
						int alt93=2;
						int LA93_0 = input.LA(1);
						if ( (LA93_0==ELEMENT_SPEC) ) {
							alt93=1;
						}

						switch (alt93) {
						case 1 :
							// PLSQLPrinter.g:441:48: element_spec
							{
							pushFollow(FOLLOW_element_spec_in_alter_type4013);
							element_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt93 >= 1 ) break loop93;
							EarlyExitException eee = new EarlyExitException(93, input);
							throw eee;
						}
						cnt93++;
					}

					match(input, Token.UP, null); 

					// PLSQLPrinter.g:441:63: ( invoker_rights_clause )?
					int alt94=2;
					int LA94_0 = input.LA(1);
					if ( (LA94_0==AUTHID_VK) ) {
						alt94=1;
					}
					switch (alt94) {
						case 1 :
							// PLSQLPrinter.g:441:63: invoker_rights_clause
							{
							pushFollow(FOLLOW_invoker_rights_clause_in_alter_type4017);
							invoker_rights_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:442:18: ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) )
					{
					match(input,ALTER_ATTRIBUTE,FOLLOW_ALTER_ATTRIBUTE_in_alter_type4039); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:442:36: ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP )
					int alt95=3;
					switch ( input.LA(1) ) {
					case ADD_VK:
						{
						alt95=1;
						}
						break;
					case MODIFY_VK:
						{
						alt95=2;
						}
						break;
					case SQL92_RESERVED_DROP:
						{
						alt95=3;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 95, 0, input);
						throw nvae;
					}
					switch (alt95) {
						case 1 :
							// PLSQLPrinter.g:442:37: ADD_VK
							{
							match(input,ADD_VK,FOLLOW_ADD_VK_in_alter_type4042); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:442:44: MODIFY_VK
							{
							match(input,MODIFY_VK,FOLLOW_MODIFY_VK_in_alter_type4044); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:442:54: SQL92_RESERVED_DROP
							{
							match(input,SQL92_RESERVED_DROP,FOLLOW_SQL92_RESERVED_DROP_in_alter_type4046); 
							}
							break;

					}

					match(input,ATTRIBUTES,FOLLOW_ATTRIBUTES_in_alter_type4050); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:442:88: ( attribute_definition )+
					int cnt96=0;
					loop96:
					while (true) {
						int alt96=2;
						int LA96_0 = input.LA(1);
						if ( (LA96_0==ATTRIBUTE) ) {
							alt96=1;
						}

						switch (alt96) {
						case 1 :
							// PLSQLPrinter.g:442:88: attribute_definition
							{
							pushFollow(FOLLOW_attribute_definition_in_alter_type4052);
							attribute_definition();
							state._fsp--;

							}
							break;

						default :
							if ( cnt96 >= 1 ) break loop96;
							EarlyExitException eee = new EarlyExitException(96, input);
							throw eee;
						}
						cnt96++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:443:18: ^( ALTER_METHOD ( alter_method_element )+ )
					{
					match(input,ALTER_METHOD,FOLLOW_ALTER_METHOD_in_alter_type4075); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:443:33: ( alter_method_element )+
					int cnt97=0;
					loop97:
					while (true) {
						int alt97=2;
						int LA97_0 = input.LA(1);
						if ( (LA97_0==ALTER_METHOD_ELEMENT) ) {
							alt97=1;
						}

						switch (alt97) {
						case 1 :
							// PLSQLPrinter.g:443:33: alter_method_element
							{
							pushFollow(FOLLOW_alter_method_element_in_alter_type4077);
							alter_method_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt97 >= 1 ) break loop97;
							EarlyExitException eee = new EarlyExitException(97, input);
							throw eee;
						}
						cnt97++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// PLSQLPrinter.g:444:18: alter_collection_clauses
					{
					pushFollow(FOLLOW_alter_collection_clauses_in_alter_type4098);
					alter_collection_clauses();
					state._fsp--;

					}
					break;
				case 5 :
					// PLSQLPrinter.g:445:18: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_alter_type4117);
					modifier_clause();
					state._fsp--;

					}
					break;
				case 6 :
					// PLSQLPrinter.g:446:18: ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
					{
					match(input,COMPILE_VK,FOLLOW_COMPILE_VK_in_alter_type4137); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:446:31: ( SPECIFICATION_VK | BODY_VK )?
						int alt98=3;
						int LA98_0 = input.LA(1);
						if ( (LA98_0==SPECIFICATION_VK) ) {
							alt98=1;
						}
						else if ( (LA98_0==BODY_VK) ) {
							alt98=2;
						}
						switch (alt98) {
							case 1 :
								// PLSQLPrinter.g:446:32: SPECIFICATION_VK
								{
								match(input,SPECIFICATION_VK,FOLLOW_SPECIFICATION_VK_in_alter_type4140); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:446:49: BODY_VK
								{
								match(input,BODY_VK,FOLLOW_BODY_VK_in_alter_type4142); 
								}
								break;

						}

						// PLSQLPrinter.g:446:59: ( DEBUG_VK )?
						int alt99=2;
						int LA99_0 = input.LA(1);
						if ( (LA99_0==DEBUG_VK) ) {
							alt99=1;
						}
						switch (alt99) {
							case 1 :
								// PLSQLPrinter.g:446:59: DEBUG_VK
								{
								match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_type4146); 
								}
								break;

						}

						// PLSQLPrinter.g:446:69: ( REUSE_VK )?
						int alt100=2;
						int LA100_0 = input.LA(1);
						if ( (LA100_0==REUSE_VK) ) {
							alt100=1;
						}
						switch (alt100) {
							case 1 :
								// PLSQLPrinter.g:446:69: REUSE_VK
								{
								match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_type4149); 
								}
								break;

						}

						// PLSQLPrinter.g:446:79: ( compiler_parameters_clause )*
						loop101:
						while (true) {
							int alt101=2;
							int LA101_0 = input.LA(1);
							if ( (LA101_0==COMPILER_PARAMETER) ) {
								alt101=1;
							}

							switch (alt101) {
							case 1 :
								// PLSQLPrinter.g:446:79: compiler_parameters_clause
								{
								pushFollow(FOLLOW_compiler_parameters_clause_in_alter_type4152);
								compiler_parameters_clause();
								state._fsp--;

								}
								break;

							default :
								break loop101;
							}
						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}

			// PLSQLPrinter.g:448:13: ( dependent_handling_clause )?
			int alt103=2;
			int LA103_0 = input.LA(1);
			if ( (LA103_0==DEPENDENT_HANDLING) ) {
				alt103=1;
			}
			switch (alt103) {
				case 1 :
					// PLSQLPrinter.g:448:13: dependent_handling_clause
					{
					pushFollow(FOLLOW_dependent_handling_clause_in_alter_type4183);
					dependent_handling_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 450:5: -> template( \"not implemented: alter_type\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_type");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_type"


	public static class alter_method_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_method_element"
	// PLSQLPrinter.g:455:1: alter_method_element : ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? ) -> template( \"not implemented: alter_method_element\";
	public final PLSQLPrinter.alter_method_element_return alter_method_element() throws RecognitionException {
		PLSQLPrinter.alter_method_element_return retval = new PLSQLPrinter.alter_method_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:456:5: ( ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? ) -> template( \"not implemented: alter_method_element\")
			// PLSQLPrinter.g:456:10: ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? )
			{
			match(input,ALTER_METHOD_ELEMENT,FOLLOW_ALTER_METHOD_ELEMENT_in_alter_method_element4231); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:456:33: ( ADD_VK | SQL92_RESERVED_DROP )
			int alt104=2;
			int LA104_0 = input.LA(1);
			if ( (LA104_0==ADD_VK) ) {
				alt104=1;
			}
			else if ( (LA104_0==SQL92_RESERVED_DROP) ) {
				alt104=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 104, 0, input);
				throw nvae;
			}

			switch (alt104) {
				case 1 :
					// PLSQLPrinter.g:456:34: ADD_VK
					{
					match(input,ADD_VK,FOLLOW_ADD_VK_in_alter_method_element4234); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:456:41: SQL92_RESERVED_DROP
					{
					match(input,SQL92_RESERVED_DROP,FOLLOW_SQL92_RESERVED_DROP_in_alter_method_element4236); 
					}
					break;

			}

			// PLSQLPrinter.g:456:62: ( map_order_function_spec )?
			int alt105=2;
			int LA105_0 = input.LA(1);
			if ( (LA105_0==SQL92_RESERVED_ORDER||LA105_0==MAP_VK) ) {
				alt105=1;
			}
			switch (alt105) {
				case 1 :
					// PLSQLPrinter.g:456:62: map_order_function_spec
					{
					pushFollow(FOLLOW_map_order_function_spec_in_alter_method_element4239);
					map_order_function_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:456:87: ( subprogram_spec )?
			int alt106=2;
			int LA106_0 = input.LA(1);
			if ( (LA106_0==MEMBER_VK||LA106_0==STATIC_VK) ) {
				alt106=1;
			}
			switch (alt106) {
				case 1 :
					// PLSQLPrinter.g:456:87: subprogram_spec
					{
					pushFollow(FOLLOW_subprogram_spec_in_alter_method_element4242);
					subprogram_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 457:5: -> template( \"not implemented: alter_method_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_method_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_method_element"


	public static class attribute_definition_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "attribute_definition"
	// PLSQLPrinter.g:460:1: attribute_definition : ^( ATTRIBUTE attribute_name ( type_spec )? ) -> template( \"not implemented: attribute_definition\";
	public final PLSQLPrinter.attribute_definition_return attribute_definition() throws RecognitionException {
		PLSQLPrinter.attribute_definition_return retval = new PLSQLPrinter.attribute_definition_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:461:5: ( ^( ATTRIBUTE attribute_name ( type_spec )? ) -> template( \"not implemented: attribute_definition\")
			// PLSQLPrinter.g:461:10: ^( ATTRIBUTE attribute_name ( type_spec )? )
			{
			match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_attribute_definition4279); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_attribute_name_in_attribute_definition4281);
			attribute_name();
			state._fsp--;

			// PLSQLPrinter.g:461:37: ( type_spec )?
			int alt107=2;
			int LA107_0 = input.LA(1);
			if ( (LA107_0==CUSTOM_TYPE||LA107_0==INTERVAL_DATATYPE||LA107_0==NATIVE_DATATYPE) ) {
				alt107=1;
			}
			switch (alt107) {
				case 1 :
					// PLSQLPrinter.g:461:37: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_attribute_definition4283);
					type_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 462:5: -> template( \"not implemented: attribute_definition\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: attribute_definition");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "attribute_definition"


	public static class alter_collection_clauses_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_collection_clauses"
	// PLSQLPrinter.g:465:1: alter_collection_clauses : ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) ) -> template( \"not implemented: alter_collection_clauses\";
	public final PLSQLPrinter.alter_collection_clauses_return alter_collection_clauses() throws RecognitionException {
		PLSQLPrinter.alter_collection_clauses_return retval = new PLSQLPrinter.alter_collection_clauses_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:466:5: ( ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) ) -> template( \"not implemented: alter_collection_clauses\")
			// PLSQLPrinter.g:466:10: ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) )
			{
			match(input,ALTER_COLLECTION,FOLLOW_ALTER_COLLECTION_in_alter_collection_clauses4320); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:467:13: ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) )
			int alt108=2;
			int LA108_0 = input.LA(1);
			if ( (LA108_0==TYPE_VK) ) {
				alt108=1;
			}
			else if ( (LA108_0==LIMIT_VK) ) {
				alt108=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 108, 0, input);
				throw nvae;
			}

			switch (alt108) {
				case 1 :
					// PLSQLPrinter.g:467:18: ^( TYPE_VK type_spec )
					{
					match(input,TYPE_VK,FOLLOW_TYPE_VK_in_alter_collection_clauses4341); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_type_spec_in_alter_collection_clauses4343);
					type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:468:18: ^( LIMIT_VK expression )
					{
					match(input,LIMIT_VK,FOLLOW_LIMIT_VK_in_alter_collection_clauses4364); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_alter_collection_clauses4366);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 471:5: -> template( \"not implemented: alter_collection_clauses\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_collection_clauses");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_collection_clauses"


	public static class dependent_handling_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dependent_handling_clause"
	// PLSQLPrinter.g:474:1: dependent_handling_clause : ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) ) -> template( \"not implemented: dependent_handling_clause\";
	public final PLSQLPrinter.dependent_handling_clause_return dependent_handling_clause() throws RecognitionException {
		PLSQLPrinter.dependent_handling_clause_return retval = new PLSQLPrinter.dependent_handling_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:475:5: ( ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) ) -> template( \"not implemented: dependent_handling_clause\")
			// PLSQLPrinter.g:475:10: ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) )
			{
			match(input,DEPENDENT_HANDLING,FOLLOW_DEPENDENT_HANDLING_in_dependent_handling_clause4427); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:476:13: ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) )
			int alt111=2;
			int LA111_0 = input.LA(1);
			if ( (LA111_0==INVALIDATE_VK) ) {
				alt111=1;
			}
			else if ( (LA111_0==CASCADE_VK) ) {
				alt111=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 111, 0, input);
				throw nvae;
			}

			switch (alt111) {
				case 1 :
					// PLSQLPrinter.g:476:18: INVALIDATE_VK
					{
					match(input,INVALIDATE_VK,FOLLOW_INVALIDATE_VK_in_dependent_handling_clause4447); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:477:18: ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? )
					{
					match(input,CASCADE_VK,FOLLOW_CASCADE_VK_in_dependent_handling_clause4467); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:478:21: ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )?
						int alt110=3;
						int LA110_0 = input.LA(1);
						if ( (LA110_0==CONVERT_VK) ) {
							alt110=1;
						}
						else if ( (LA110_0==SQL92_RESERVED_NOT||LA110_0==INCLUDING_VK) ) {
							alt110=2;
						}
						switch (alt110) {
							case 1 :
								// PLSQLPrinter.g:478:26: CONVERT_VK
								{
								match(input,CONVERT_VK,FOLLOW_CONVERT_VK_in_dependent_handling_clause4495); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:479:26: ( SQL92_RESERVED_NOT )? INCLUDING_VK
								{
								// PLSQLPrinter.g:479:26: ( SQL92_RESERVED_NOT )?
								int alt109=2;
								int LA109_0 = input.LA(1);
								if ( (LA109_0==SQL92_RESERVED_NOT) ) {
									alt109=1;
								}
								switch (alt109) {
									case 1 :
										// PLSQLPrinter.g:479:26: SQL92_RESERVED_NOT
										{
										match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_dependent_handling_clause4522); 
										}
										break;

								}

								match(input,INCLUDING_VK,FOLLOW_INCLUDING_VK_in_dependent_handling_clause4525); 
								}
								break;

						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 484:5: -> template( \"not implemented: dependent_handling_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dependent_handling_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dependent_handling_clause"


	public static class dependent_exceptions_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dependent_exceptions_part"
	// PLSQLPrinter.g:487:1: dependent_exceptions_part : ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name ) -> template( \"not implemented: dependent_exceptions_part\";
	public final PLSQLPrinter.dependent_exceptions_part_return dependent_exceptions_part() throws RecognitionException {
		PLSQLPrinter.dependent_exceptions_part_return retval = new PLSQLPrinter.dependent_exceptions_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:488:5: ( ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name ) -> template( \"not implemented: dependent_exceptions_part\")
			// PLSQLPrinter.g:488:10: ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name )
			{
			match(input,EXCEPTIONS_VK,FOLLOW_EXCEPTIONS_VK_in_dependent_exceptions_part4625); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:488:26: ( FORCE_VK )?
			int alt112=2;
			int LA112_0 = input.LA(1);
			if ( (LA112_0==FORCE_VK) ) {
				alt112=1;
			}
			switch (alt112) {
				case 1 :
					// PLSQLPrinter.g:488:26: FORCE_VK
					{
					match(input,FORCE_VK,FOLLOW_FORCE_VK_in_dependent_exceptions_part4627); 
					}
					break;

			}

			pushFollow(FOLLOW_tableview_name_in_dependent_exceptions_part4630);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 489:5: -> template( \"not implemented: dependent_exceptions_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dependent_exceptions_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dependent_exceptions_part"


	public static class create_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_type"
	// PLSQLPrinter.g:494:1: create_type : ( ^( CREATE_TYPE_BODY ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) ) -> template( \"not implemented: create_type\"| ^( CREATE_TYPE_SPEC ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? ) -> template( \"not implemented: create_type\");
	public final PLSQLPrinter.create_type_return create_type() throws RecognitionException {
		PLSQLPrinter.create_type_return retval = new PLSQLPrinter.create_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:495:5: ( ^( CREATE_TYPE_BODY ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) ) -> template( \"not implemented: create_type\"| ^( CREATE_TYPE_SPEC ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? ) -> template( \"not implemented: create_type\")
			int alt118=2;
			int LA118_0 = input.LA(1);
			if ( (LA118_0==CREATE_TYPE_BODY) ) {
				alt118=1;
			}
			else if ( (LA118_0==CREATE_TYPE_SPEC) ) {
				alt118=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 118, 0, input);
				throw nvae;
			}

			switch (alt118) {
				case 1 :
					// PLSQLPrinter.g:495:10: ^( CREATE_TYPE_BODY ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) )
					{
					match(input,CREATE_TYPE_BODY,FOLLOW_CREATE_TYPE_BODY_in_create_type4668); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:495:29: ( REPLACE_VK )?
					int alt113=2;
					int LA113_0 = input.LA(1);
					if ( (LA113_0==REPLACE_VK) ) {
						alt113=1;
					}
					switch (alt113) {
						case 1 :
							// PLSQLPrinter.g:495:29: REPLACE_VK
							{
							match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_type4670); 
							}
							break;

					}

					pushFollow(FOLLOW_type_name_in_create_type4673);
					type_name();
					state._fsp--;

					match(input,TYPE_BODY_ELEMENTS,FOLLOW_TYPE_BODY_ELEMENTS_in_create_type4676); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:495:72: ( type_body_elements )+
					int cnt114=0;
					loop114:
					while (true) {
						int alt114=2;
						int LA114_0 = input.LA(1);
						if ( (LA114_0==SQL92_RESERVED_ORDER||LA114_0==MAP_VK||LA114_0==MEMBER_VK||LA114_0==STATIC_VK) ) {
							alt114=1;
						}

						switch (alt114) {
						case 1 :
							// PLSQLPrinter.g:495:72: type_body_elements
							{
							pushFollow(FOLLOW_type_body_elements_in_create_type4678);
							type_body_elements();
							state._fsp--;

							}
							break;

						default :
							if ( cnt114 >= 1 ) break loop114;
							EarlyExitException eee = new EarlyExitException(114, input);
							throw eee;
						}
						cnt114++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 496:5: -> template( \"not implemented: create_type\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: create_type");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:497:10: ^( CREATE_TYPE_SPEC ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? )
					{
					match(input,CREATE_TYPE_SPEC,FOLLOW_CREATE_TYPE_SPEC_in_create_type4707); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:497:29: ( REPLACE_VK )?
					int alt115=2;
					int LA115_0 = input.LA(1);
					if ( (LA115_0==REPLACE_VK) ) {
						alt115=1;
					}
					switch (alt115) {
						case 1 :
							// PLSQLPrinter.g:497:29: REPLACE_VK
							{
							match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_type4709); 
							}
							break;

					}

					pushFollow(FOLLOW_type_name_in_create_type4712);
					type_name();
					state._fsp--;

					// PLSQLPrinter.g:497:51: ( CHAR_STRING )?
					int alt116=2;
					int LA116_0 = input.LA(1);
					if ( (LA116_0==CHAR_STRING) ) {
						alt116=1;
					}
					switch (alt116) {
						case 1 :
							// PLSQLPrinter.g:497:51: CHAR_STRING
							{
							match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_create_type4714); 
							}
							break;

					}

					// PLSQLPrinter.g:497:64: ( object_type_def )?
					int alt117=2;
					int LA117_0 = input.LA(1);
					if ( (LA117_0==OBJECT_TYPE_DEF) ) {
						alt117=1;
					}
					switch (alt117) {
						case 1 :
							// PLSQLPrinter.g:497:64: object_type_def
							{
							pushFollow(FOLLOW_object_type_def_in_create_type4717);
							object_type_def();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 498:5: -> template( \"not implemented: create_type\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: create_type");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_type"


	public static class object_type_def_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "object_type_def"
	// PLSQLPrinter.g:501:1: object_type_def : ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) ) -> template( \"not implemented: object_type_def\";
	public final PLSQLPrinter.object_type_def_return object_type_def() throws RecognitionException {
		PLSQLPrinter.object_type_def_return retval = new PLSQLPrinter.object_type_def_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:502:5: ( ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) ) -> template( \"not implemented: object_type_def\")
			// PLSQLPrinter.g:502:10: ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) )
			{
			match(input,OBJECT_TYPE_DEF,FOLLOW_OBJECT_TYPE_DEF_in_object_type_def4754); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:502:28: ( object_as_part | object_under_part )
			int alt119=2;
			int LA119_0 = input.LA(1);
			if ( (LA119_0==OBJECT_AS) ) {
				alt119=1;
			}
			else if ( (LA119_0==UNDER_VK) ) {
				alt119=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 119, 0, input);
				throw nvae;
			}

			switch (alt119) {
				case 1 :
					// PLSQLPrinter.g:502:29: object_as_part
					{
					pushFollow(FOLLOW_object_as_part_in_object_type_def4757);
					object_as_part();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:502:44: object_under_part
					{
					pushFollow(FOLLOW_object_under_part_in_object_type_def4759);
					object_under_part();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:502:63: ( invoker_rights_clause )?
			int alt120=2;
			int LA120_0 = input.LA(1);
			if ( (LA120_0==AUTHID_VK) ) {
				alt120=1;
			}
			switch (alt120) {
				case 1 :
					// PLSQLPrinter.g:502:63: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_object_type_def4762);
					invoker_rights_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:503:14: ( sqlj_object_type )?
			int alt121=2;
			int LA121_0 = input.LA(1);
			if ( (LA121_0==JAVA_VK) ) {
				alt121=1;
			}
			switch (alt121) {
				case 1 :
					// PLSQLPrinter.g:503:14: sqlj_object_type
					{
					pushFollow(FOLLOW_sqlj_object_type_in_object_type_def4778);
					sqlj_object_type();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:503:32: ( modifier_clause )*
			loop122:
			while (true) {
				int alt122=2;
				int LA122_0 = input.LA(1);
				if ( (LA122_0==MODIFIER) ) {
					alt122=1;
				}

				switch (alt122) {
				case 1 :
					// PLSQLPrinter.g:503:32: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_object_type_def4781);
					modifier_clause();
					state._fsp--;

					}
					break;

				default :
					break loop122;
				}
			}

			match(input,OBJECT_MEMBERS,FOLLOW_OBJECT_MEMBERS_in_object_type_def4785); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:503:66: ( element_spec )*
				loop123:
				while (true) {
					int alt123=2;
					int LA123_0 = input.LA(1);
					if ( (LA123_0==ELEMENT_SPEC) ) {
						alt123=1;
					}

					switch (alt123) {
					case 1 :
						// PLSQLPrinter.g:503:66: element_spec
						{
						pushFollow(FOLLOW_element_spec_in_object_type_def4787);
						element_spec();
						state._fsp--;

						}
						break;

					default :
						break loop123;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 504:5: -> template( \"not implemented: object_type_def\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: object_type_def");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_type_def"


	public static class object_as_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "object_as_part"
	// PLSQLPrinter.g:507:1: object_as_part : ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) ) -> template( \"not implemented: object_as_part\";
	public final PLSQLPrinter.object_as_part_return object_as_part() throws RecognitionException {
		PLSQLPrinter.object_as_part_return retval = new PLSQLPrinter.object_as_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:508:5: ( ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) ) -> template( \"not implemented: object_as_part\")
			// PLSQLPrinter.g:508:10: ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) )
			{
			match(input,OBJECT_AS,FOLLOW_OBJECT_AS_in_object_as_part4827); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:508:22: ( OBJECT_VK | varray_type_def | nested_table_type_def )
			int alt124=3;
			switch ( input.LA(1) ) {
			case OBJECT_VK:
				{
				alt124=1;
				}
				break;
			case SQL92_RESERVED_NULL:
			case VARR_ARRAY_DEF:
				{
				alt124=2;
				}
				break;
			case NESTED_TABLE_TYPE_DEF:
				{
				alt124=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 124, 0, input);
				throw nvae;
			}
			switch (alt124) {
				case 1 :
					// PLSQLPrinter.g:508:23: OBJECT_VK
					{
					match(input,OBJECT_VK,FOLLOW_OBJECT_VK_in_object_as_part4830); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:508:33: varray_type_def
					{
					pushFollow(FOLLOW_varray_type_def_in_object_as_part4832);
					varray_type_def();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:508:49: nested_table_type_def
					{
					pushFollow(FOLLOW_nested_table_type_def_in_object_as_part4834);
					nested_table_type_def();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 509:5: -> template( \"not implemented: object_as_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: object_as_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_as_part"


	public static class object_under_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "object_under_part"
	// PLSQLPrinter.g:512:1: object_under_part : ^( UNDER_VK type_spec ) -> template( \"not implemented: object_under_part\";
	public final PLSQLPrinter.object_under_part_return object_under_part() throws RecognitionException {
		PLSQLPrinter.object_under_part_return retval = new PLSQLPrinter.object_under_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:513:5: ( ^( UNDER_VK type_spec ) -> template( \"not implemented: object_under_part\")
			// PLSQLPrinter.g:513:10: ^( UNDER_VK type_spec )
			{
			match(input,UNDER_VK,FOLLOW_UNDER_VK_in_object_under_part4871); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_object_under_part4873);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 514:5: -> template( \"not implemented: object_under_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: object_under_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_under_part"


	public static class nested_table_type_def_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "nested_table_type_def"
	// PLSQLPrinter.g:517:1: nested_table_type_def : ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ( table_indexed_by_part )? ) -> template( \"not implemented: nested_table_type_def\";
	public final PLSQLPrinter.nested_table_type_def_return nested_table_type_def() throws RecognitionException {
		PLSQLPrinter.nested_table_type_def_return retval = new PLSQLPrinter.nested_table_type_def_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:518:5: ( ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ( table_indexed_by_part )? ) -> template( \"not implemented: nested_table_type_def\")
			// PLSQLPrinter.g:518:10: ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ( table_indexed_by_part )? )
			{
			match(input,NESTED_TABLE_TYPE_DEF,FOLLOW_NESTED_TABLE_TYPE_DEF_in_nested_table_type_def4909); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_nested_table_type_def4911);
			type_spec();
			state._fsp--;

			// PLSQLPrinter.g:518:44: ( SQL92_RESERVED_NULL )?
			int alt125=2;
			int LA125_0 = input.LA(1);
			if ( (LA125_0==SQL92_RESERVED_NULL) ) {
				alt125=1;
			}
			switch (alt125) {
				case 1 :
					// PLSQLPrinter.g:518:44: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_nested_table_type_def4913); 
					}
					break;

			}

			// PLSQLPrinter.g:518:65: ( table_indexed_by_part )?
			int alt126=2;
			int LA126_0 = input.LA(1);
			if ( (LA126_0==INDEXED_BY) ) {
				alt126=1;
			}
			switch (alt126) {
				case 1 :
					// PLSQLPrinter.g:518:65: table_indexed_by_part
					{
					pushFollow(FOLLOW_table_indexed_by_part_in_nested_table_type_def4916);
					table_indexed_by_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 519:5: -> template( \"not implemented: nested_table_type_def\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: nested_table_type_def");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "nested_table_type_def"


	public static class sqlj_object_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sqlj_object_type"
	// PLSQLPrinter.g:522:1: sqlj_object_type : ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) ) -> template( \"not implemented: sqlj_object_type\";
	public final PLSQLPrinter.sqlj_object_type_return sqlj_object_type() throws RecognitionException {
		PLSQLPrinter.sqlj_object_type_return retval = new PLSQLPrinter.sqlj_object_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:523:5: ( ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) ) -> template( \"not implemented: sqlj_object_type\")
			// PLSQLPrinter.g:523:10: ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) )
			{
			match(input,JAVA_VK,FOLLOW_JAVA_VK_in_sqlj_object_type4953); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_sqlj_object_type4955);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:523:31: ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK )
			int alt127=3;
			switch ( input.LA(1) ) {
			case SQLDATA_VK:
				{
				alt127=1;
				}
				break;
			case CUSTOMDATUM_VK:
				{
				alt127=2;
				}
				break;
			case ORADATA_VK:
				{
				alt127=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 127, 0, input);
				throw nvae;
			}
			switch (alt127) {
				case 1 :
					// PLSQLPrinter.g:523:32: SQLDATA_VK
					{
					match(input,SQLDATA_VK,FOLLOW_SQLDATA_VK_in_sqlj_object_type4958); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:523:43: CUSTOMDATUM_VK
					{
					match(input,CUSTOMDATUM_VK,FOLLOW_CUSTOMDATUM_VK_in_sqlj_object_type4960); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:523:58: ORADATA_VK
					{
					match(input,ORADATA_VK,FOLLOW_ORADATA_VK_in_sqlj_object_type4962); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 524:5: -> template( \"not implemented: sqlj_object_type\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: sqlj_object_type");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sqlj_object_type"


	public static class type_body_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_body_elements"
	// PLSQLPrinter.g:527:1: type_body_elements : ( map_order_func_declaration -> template( \"not implemented: type_body_elements\"| subprog_decl_in_type -> template( \"not implemented: type_body_elements\");
	public final PLSQLPrinter.type_body_elements_return type_body_elements() throws RecognitionException {
		PLSQLPrinter.type_body_elements_return retval = new PLSQLPrinter.type_body_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:528:5: ( map_order_func_declaration -> template( \"not implemented: type_body_elements\"| subprog_decl_in_type -> template( \"not implemented: type_body_elements\")
			int alt128=2;
			int LA128_0 = input.LA(1);
			if ( (LA128_0==SQL92_RESERVED_ORDER||LA128_0==MAP_VK) ) {
				alt128=1;
			}
			else if ( (LA128_0==MEMBER_VK||LA128_0==STATIC_VK) ) {
				alt128=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 128, 0, input);
				throw nvae;
			}

			switch (alt128) {
				case 1 :
					// PLSQLPrinter.g:528:10: map_order_func_declaration
					{
					pushFollow(FOLLOW_map_order_func_declaration_in_type_body_elements4998);
					map_order_func_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 529:5: -> template( \"not implemented: type_body_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: type_body_elements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:530:10: subprog_decl_in_type
					{
					pushFollow(FOLLOW_subprog_decl_in_type_in_type_body_elements5023);
					subprog_decl_in_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 531:5: -> template( \"not implemented: type_body_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: type_body_elements");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_body_elements"


	public static class map_order_func_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "map_order_func_declaration"
	// PLSQLPrinter.g:534:1: map_order_func_declaration : ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body ) -> template( \"not implemented: map_order_func_declaration\";
	public final PLSQLPrinter.map_order_func_declaration_return map_order_func_declaration() throws RecognitionException {
		PLSQLPrinter.map_order_func_declaration_return retval = new PLSQLPrinter.map_order_func_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:535:5: ( ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body ) -> template( \"not implemented: map_order_func_declaration\")
			// PLSQLPrinter.g:535:10: ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body )
			{
			// PLSQLPrinter.g:535:12: ( MAP_VK | SQL92_RESERVED_ORDER )
			int alt129=2;
			int LA129_0 = input.LA(1);
			if ( (LA129_0==MAP_VK) ) {
				alt129=1;
			}
			else if ( (LA129_0==SQL92_RESERVED_ORDER) ) {
				alt129=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 129, 0, input);
				throw nvae;
			}

			switch (alt129) {
				case 1 :
					// PLSQLPrinter.g:535:13: MAP_VK
					{
					match(input,MAP_VK,FOLLOW_MAP_VK_in_map_order_func_declaration5059); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:535:20: SQL92_RESERVED_ORDER
					{
					match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_map_order_func_declaration5061); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_create_function_body_in_map_order_func_declaration5064);
			create_function_body();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 536:5: -> template( \"not implemented: map_order_func_declaration\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: map_order_func_declaration");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "map_order_func_declaration"


	public static class subprog_decl_in_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subprog_decl_in_type"
	// PLSQLPrinter.g:539:1: subprog_decl_in_type : ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) ) -> template( \"not implemented: subprog_decl_in_type\";
	public final PLSQLPrinter.subprog_decl_in_type_return subprog_decl_in_type() throws RecognitionException {
		PLSQLPrinter.subprog_decl_in_type_return retval = new PLSQLPrinter.subprog_decl_in_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:540:5: ( ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) ) -> template( \"not implemented: subprog_decl_in_type\")
			// PLSQLPrinter.g:540:10: ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) )
			{
			// PLSQLPrinter.g:540:12: ( MEMBER_VK | STATIC_VK )
			int alt130=2;
			int LA130_0 = input.LA(1);
			if ( (LA130_0==MEMBER_VK) ) {
				alt130=1;
			}
			else if ( (LA130_0==STATIC_VK) ) {
				alt130=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 130, 0, input);
				throw nvae;
			}

			switch (alt130) {
				case 1 :
					// PLSQLPrinter.g:540:13: MEMBER_VK
					{
					match(input,MEMBER_VK,FOLLOW_MEMBER_VK_in_subprog_decl_in_type5101); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:540:23: STATIC_VK
					{
					match(input,STATIC_VK,FOLLOW_STATIC_VK_in_subprog_decl_in_type5103); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:541:13: ( create_procedure_body | create_function_body | constructor_declaration )
			int alt131=3;
			switch ( input.LA(1) ) {
			case CREATE_PROCEDURE:
				{
				alt131=1;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt131=2;
				}
				break;
			case CONSTRUCTOR_VK:
				{
				alt131=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 131, 0, input);
				throw nvae;
			}
			switch (alt131) {
				case 1 :
					// PLSQLPrinter.g:541:18: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_subprog_decl_in_type5123);
					create_procedure_body();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:542:18: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_subprog_decl_in_type5142);
					create_function_body();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:543:18: constructor_declaration
					{
					pushFollow(FOLLOW_constructor_declaration_in_subprog_decl_in_type5161);
					constructor_declaration();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 546:5: -> template( \"not implemented: subprog_decl_in_type\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: subprog_decl_in_type");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subprog_decl_in_type"


	public static class constructor_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constructor_declaration"
	// PLSQLPrinter.g:549:1: constructor_declaration : ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE block ) ) ) -> template( \"not implemented: constructor_declaration\";
	public final PLSQLPrinter.constructor_declaration_return constructor_declaration() throws RecognitionException {
		PLSQLPrinter.constructor_declaration_return retval = new PLSQLPrinter.constructor_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:550:5: ( ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE block ) ) ) -> template( \"not implemented: constructor_declaration\")
			// PLSQLPrinter.g:550:10: ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE block ) ) )
			{
			match(input,CONSTRUCTOR_VK,FOLLOW_CONSTRUCTOR_VK_in_constructor_declaration5220); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_constructor_declaration5222);
			type_spec();
			state._fsp--;

			// PLSQLPrinter.g:550:37: ( FINAL_VK )?
			int alt132=2;
			int LA132_0 = input.LA(1);
			if ( (LA132_0==FINAL_VK) ) {
				alt132=1;
			}
			switch (alt132) {
				case 1 :
					// PLSQLPrinter.g:550:37: FINAL_VK
					{
					match(input,FINAL_VK,FOLLOW_FINAL_VK_in_constructor_declaration5224); 
					}
					break;

			}

			// PLSQLPrinter.g:550:47: ( INSTANTIABLE_VK )?
			int alt133=2;
			int LA133_0 = input.LA(1);
			if ( (LA133_0==INSTANTIABLE_VK) ) {
				alt133=1;
			}
			switch (alt133) {
				case 1 :
					// PLSQLPrinter.g:550:47: INSTANTIABLE_VK
					{
					match(input,INSTANTIABLE_VK,FOLLOW_INSTANTIABLE_VK_in_constructor_declaration5227); 
					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_constructor_declaration5231); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:550:77: ( type_elements_parameter )*
				loop134:
				while (true) {
					int alt134=2;
					int LA134_0 = input.LA(1);
					if ( (LA134_0==PARAMETER) ) {
						alt134=1;
					}

					switch (alt134) {
					case 1 :
						// PLSQLPrinter.g:550:77: type_elements_parameter
						{
						pushFollow(FOLLOW_type_elements_parameter_in_constructor_declaration5233);
						type_elements_parameter();
						state._fsp--;

						}
						break;

					default :
						break loop134;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:551:13: ( ^( CALL_MODE call_spec ) | ^( BODY_MODE block ) )
			int alt135=2;
			int LA135_0 = input.LA(1);
			if ( (LA135_0==CALL_MODE) ) {
				alt135=1;
			}
			else if ( (LA135_0==BODY_MODE) ) {
				alt135=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 135, 0, input);
				throw nvae;
			}

			switch (alt135) {
				case 1 :
					// PLSQLPrinter.g:551:18: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_constructor_declaration5256); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_constructor_declaration5258);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:552:18: ^( BODY_MODE block )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_constructor_declaration5279); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_constructor_declaration5281);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 555:5: -> template( \"not implemented: constructor_declaration\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: constructor_declaration");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constructor_declaration"


	public static class modifier_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "modifier_clause"
	// PLSQLPrinter.g:562:1: modifier_clause : ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) ) -> template( \"not implemented: modifier_clause\";
	public final PLSQLPrinter.modifier_clause_return modifier_clause() throws RecognitionException {
		PLSQLPrinter.modifier_clause_return retval = new PLSQLPrinter.modifier_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:563:5: ( ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) ) -> template( \"not implemented: modifier_clause\")
			// PLSQLPrinter.g:563:10: ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) )
			{
			match(input,MODIFIER,FOLLOW_MODIFIER_in_modifier_clause5345); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:563:21: ( SQL92_RESERVED_NOT )?
			int alt136=2;
			int LA136_0 = input.LA(1);
			if ( (LA136_0==SQL92_RESERVED_NOT) ) {
				alt136=1;
			}
			switch (alt136) {
				case 1 :
					// PLSQLPrinter.g:563:21: SQL92_RESERVED_NOT
					{
					match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_modifier_clause5347); 
					}
					break;

			}

			// PLSQLPrinter.g:563:41: ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK )
			int alt137=3;
			switch ( input.LA(1) ) {
			case INSTANTIABLE_VK:
				{
				alt137=1;
				}
				break;
			case FINAL_VK:
				{
				alt137=2;
				}
				break;
			case OVERRIDING_VK:
				{
				alt137=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 137, 0, input);
				throw nvae;
			}
			switch (alt137) {
				case 1 :
					// PLSQLPrinter.g:563:42: INSTANTIABLE_VK
					{
					match(input,INSTANTIABLE_VK,FOLLOW_INSTANTIABLE_VK_in_modifier_clause5351); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:563:58: FINAL_VK
					{
					match(input,FINAL_VK,FOLLOW_FINAL_VK_in_modifier_clause5353); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:563:67: OVERRIDING_VK
					{
					match(input,OVERRIDING_VK,FOLLOW_OVERRIDING_VK_in_modifier_clause5355); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 564:5: -> template( \"not implemented: modifier_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: modifier_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "modifier_clause"


	public static class sqlj_object_type_attr_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sqlj_object_type_attr"
	// PLSQLPrinter.g:567:1: sqlj_object_type_attr : ^( EXTERNAL_VK expression ) -> template( \"not implemented: sqlj_object_type_attr\";
	public final PLSQLPrinter.sqlj_object_type_attr_return sqlj_object_type_attr() throws RecognitionException {
		PLSQLPrinter.sqlj_object_type_attr_return retval = new PLSQLPrinter.sqlj_object_type_attr_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:568:5: ( ^( EXTERNAL_VK expression ) -> template( \"not implemented: sqlj_object_type_attr\")
			// PLSQLPrinter.g:568:10: ^( EXTERNAL_VK expression )
			{
			match(input,EXTERNAL_VK,FOLLOW_EXTERNAL_VK_in_sqlj_object_type_attr5392); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_sqlj_object_type_attr5394);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 569:5: -> template( \"not implemented: sqlj_object_type_attr\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: sqlj_object_type_attr");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sqlj_object_type_attr"


	public static class element_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "element_spec"
	// PLSQLPrinter.g:572:1: element_spec : ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? ) -> template( \"not implemented: element_spec\";
	public final PLSQLPrinter.element_spec_return element_spec() throws RecognitionException {
		PLSQLPrinter.element_spec_return retval = new PLSQLPrinter.element_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:573:5: ( ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? ) -> template( \"not implemented: element_spec\")
			// PLSQLPrinter.g:573:10: ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? )
			{
			match(input,ELEMENT_SPEC,FOLLOW_ELEMENT_SPEC_in_element_spec5430); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:573:25: ( element_spec_options )+
			int cnt138=0;
			loop138:
			while (true) {
				int alt138=2;
				int LA138_0 = input.LA(1);
				if ( (LA138_0==SQL92_RESERVED_ORDER||LA138_0==CONSTRUCTOR_SPEC||LA138_0==FIELD_SPEC||LA138_0==MAP_VK||LA138_0==MEMBER_VK||LA138_0==STATIC_VK) ) {
					alt138=1;
				}

				switch (alt138) {
				case 1 :
					// PLSQLPrinter.g:573:25: element_spec_options
					{
					pushFollow(FOLLOW_element_spec_options_in_element_spec5432);
					element_spec_options();
					state._fsp--;

					}
					break;

				default :
					if ( cnt138 >= 1 ) break loop138;
					EarlyExitException eee = new EarlyExitException(138, input);
					throw eee;
				}
				cnt138++;
			}

			// PLSQLPrinter.g:573:47: ( modifier_clause )?
			int alt139=2;
			int LA139_0 = input.LA(1);
			if ( (LA139_0==MODIFIER) ) {
				alt139=1;
			}
			switch (alt139) {
				case 1 :
					// PLSQLPrinter.g:573:47: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_element_spec5435);
					modifier_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:573:64: ( pragma_clause )?
			int alt140=2;
			int LA140_0 = input.LA(1);
			if ( (LA140_0==PRAGMA_VK) ) {
				alt140=1;
			}
			switch (alt140) {
				case 1 :
					// PLSQLPrinter.g:573:64: pragma_clause
					{
					pushFollow(FOLLOW_pragma_clause_in_element_spec5438);
					pragma_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 574:5: -> template( \"not implemented: element_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: element_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "element_spec"


	public static class element_spec_options_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "element_spec_options"
	// PLSQLPrinter.g:577:1: element_spec_options : ( subprogram_spec -> template( \"not implemented: element_spec_options\"| constructor_spec -> template( \"not implemented: element_spec_options\"| map_order_function_spec -> template( \"not implemented: element_spec_options\"| ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) -> template( \"not implemented: element_spec_options\");
	public final PLSQLPrinter.element_spec_options_return element_spec_options() throws RecognitionException {
		PLSQLPrinter.element_spec_options_return retval = new PLSQLPrinter.element_spec_options_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:578:5: ( subprogram_spec -> template( \"not implemented: element_spec_options\"| constructor_spec -> template( \"not implemented: element_spec_options\"| map_order_function_spec -> template( \"not implemented: element_spec_options\"| ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) -> template( \"not implemented: element_spec_options\")
			int alt142=4;
			switch ( input.LA(1) ) {
			case MEMBER_VK:
			case STATIC_VK:
				{
				alt142=1;
				}
				break;
			case CONSTRUCTOR_SPEC:
				{
				alt142=2;
				}
				break;
			case SQL92_RESERVED_ORDER:
			case MAP_VK:
				{
				alt142=3;
				}
				break;
			case FIELD_SPEC:
				{
				alt142=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 142, 0, input);
				throw nvae;
			}
			switch (alt142) {
				case 1 :
					// PLSQLPrinter.g:578:10: subprogram_spec
					{
					pushFollow(FOLLOW_subprogram_spec_in_element_spec_options5474);
					subprogram_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 579:5: -> template( \"not implemented: element_spec_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: element_spec_options");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:580:10: constructor_spec
					{
					pushFollow(FOLLOW_constructor_spec_in_element_spec_options5499);
					constructor_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 581:5: -> template( \"not implemented: element_spec_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: element_spec_options");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:582:10: map_order_function_spec
					{
					pushFollow(FOLLOW_map_order_function_spec_in_element_spec_options5524);
					map_order_function_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 583:5: -> template( \"not implemented: element_spec_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: element_spec_options");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:584:10: ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? )
					{
					match(input,FIELD_SPEC,FOLLOW_FIELD_SPEC_in_element_spec_options5550); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_id_in_element_spec_options5552);
					id();
					state._fsp--;

					pushFollow(FOLLOW_type_spec_in_element_spec_options5554);
					type_spec();
					state._fsp--;

					// PLSQLPrinter.g:584:36: ( sqlj_object_type_attr )?
					int alt141=2;
					int LA141_0 = input.LA(1);
					if ( (LA141_0==EXTERNAL_VK) ) {
						alt141=1;
					}
					switch (alt141) {
						case 1 :
							// PLSQLPrinter.g:584:36: sqlj_object_type_attr
							{
							pushFollow(FOLLOW_sqlj_object_type_attr_in_element_spec_options5556);
							sqlj_object_type_attr();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 585:5: -> template( \"not implemented: element_spec_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: element_spec_options");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "element_spec_options"


	public static class subprogram_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subprogram_spec"
	// PLSQLPrinter.g:588:1: subprogram_spec : ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) ) -> template( \"not implemented: subprogram_spec\";
	public final PLSQLPrinter.subprogram_spec_return subprogram_spec() throws RecognitionException {
		PLSQLPrinter.subprogram_spec_return retval = new PLSQLPrinter.subprogram_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:589:5: ( ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) ) -> template( \"not implemented: subprogram_spec\")
			// PLSQLPrinter.g:589:10: ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) )
			{
			// PLSQLPrinter.g:589:12: ( MEMBER_VK | STATIC_VK )
			int alt143=2;
			int LA143_0 = input.LA(1);
			if ( (LA143_0==MEMBER_VK) ) {
				alt143=1;
			}
			else if ( (LA143_0==STATIC_VK) ) {
				alt143=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 143, 0, input);
				throw nvae;
			}

			switch (alt143) {
				case 1 :
					// PLSQLPrinter.g:589:13: MEMBER_VK
					{
					match(input,MEMBER_VK,FOLLOW_MEMBER_VK_in_subprogram_spec5594); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:589:23: STATIC_VK
					{
					match(input,STATIC_VK,FOLLOW_STATIC_VK_in_subprogram_spec5596); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:590:13: ( procedure_spec | function_spec )
			int alt144=2;
			int LA144_0 = input.LA(1);
			if ( (LA144_0==PROCEDURE_SPEC) ) {
				alt144=1;
			}
			else if ( (LA144_0==FUNCTION_SPEC) ) {
				alt144=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 144, 0, input);
				throw nvae;
			}

			switch (alt144) {
				case 1 :
					// PLSQLPrinter.g:590:18: procedure_spec
					{
					pushFollow(FOLLOW_procedure_spec_in_subprogram_spec5616);
					procedure_spec();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:591:18: function_spec
					{
					pushFollow(FOLLOW_function_spec_in_subprogram_spec5635);
					function_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 594:5: -> template( \"not implemented: subprogram_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: subprogram_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subprogram_spec"


	public static class constructor_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constructor_spec"
	// PLSQLPrinter.g:597:1: constructor_spec : ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? ) -> template( \"not implemented: constructor_spec\";
	public final PLSQLPrinter.constructor_spec_return constructor_spec() throws RecognitionException {
		PLSQLPrinter.constructor_spec_return retval = new PLSQLPrinter.constructor_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:598:5: ( ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? ) -> template( \"not implemented: constructor_spec\")
			// PLSQLPrinter.g:598:10: ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? )
			{
			match(input,CONSTRUCTOR_SPEC,FOLLOW_CONSTRUCTOR_SPEC_in_constructor_spec5694); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_constructor_spec5696);
			type_spec();
			state._fsp--;

			// PLSQLPrinter.g:598:39: ( FINAL_VK )?
			int alt145=2;
			int LA145_0 = input.LA(1);
			if ( (LA145_0==FINAL_VK) ) {
				alt145=1;
			}
			switch (alt145) {
				case 1 :
					// PLSQLPrinter.g:598:39: FINAL_VK
					{
					match(input,FINAL_VK,FOLLOW_FINAL_VK_in_constructor_spec5698); 
					}
					break;

			}

			// PLSQLPrinter.g:598:49: ( INSTANTIABLE_VK )?
			int alt146=2;
			int LA146_0 = input.LA(1);
			if ( (LA146_0==INSTANTIABLE_VK) ) {
				alt146=1;
			}
			switch (alt146) {
				case 1 :
					// PLSQLPrinter.g:598:49: INSTANTIABLE_VK
					{
					match(input,INSTANTIABLE_VK,FOLLOW_INSTANTIABLE_VK_in_constructor_spec5701); 
					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_constructor_spec5705); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:598:79: ( type_elements_parameter )*
				loop147:
				while (true) {
					int alt147=2;
					int LA147_0 = input.LA(1);
					if ( (LA147_0==PARAMETER) ) {
						alt147=1;
					}

					switch (alt147) {
					case 1 :
						// PLSQLPrinter.g:598:79: type_elements_parameter
						{
						pushFollow(FOLLOW_type_elements_parameter_in_constructor_spec5707);
						type_elements_parameter();
						state._fsp--;

						}
						break;

					default :
						break loop147;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:598:105: ( constructor_call_mode )?
			int alt148=2;
			int LA148_0 = input.LA(1);
			if ( (LA148_0==CALL_MODE) ) {
				alt148=1;
			}
			switch (alt148) {
				case 1 :
					// PLSQLPrinter.g:598:105: constructor_call_mode
					{
					pushFollow(FOLLOW_constructor_call_mode_in_constructor_spec5711);
					constructor_call_mode();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 599:5: -> template( \"not implemented: constructor_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: constructor_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constructor_spec"


	public static class constructor_call_mode_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constructor_call_mode"
	// PLSQLPrinter.g:602:1: constructor_call_mode : ^( CALL_MODE call_spec ) -> template( \"not implemented: constructor_call_mode\";
	public final PLSQLPrinter.constructor_call_mode_return constructor_call_mode() throws RecognitionException {
		PLSQLPrinter.constructor_call_mode_return retval = new PLSQLPrinter.constructor_call_mode_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:603:5: ( ^( CALL_MODE call_spec ) -> template( \"not implemented: constructor_call_mode\")
			// PLSQLPrinter.g:603:10: ^( CALL_MODE call_spec )
			{
			match(input,CALL_MODE,FOLLOW_CALL_MODE_in_constructor_call_mode5748); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_call_spec_in_constructor_call_mode5750);
			call_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 604:5: -> template( \"not implemented: constructor_call_mode\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: constructor_call_mode");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constructor_call_mode"


	public static class map_order_function_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "map_order_function_spec"
	// PLSQLPrinter.g:607:1: map_order_function_spec : ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec ) -> template( \"not implemented: map_order_function_spec\";
	public final PLSQLPrinter.map_order_function_spec_return map_order_function_spec() throws RecognitionException {
		PLSQLPrinter.map_order_function_spec_return retval = new PLSQLPrinter.map_order_function_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:608:5: ( ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec ) -> template( \"not implemented: map_order_function_spec\")
			// PLSQLPrinter.g:608:10: ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec )
			{
			// PLSQLPrinter.g:608:12: ( MAP_VK | SQL92_RESERVED_ORDER )
			int alt149=2;
			int LA149_0 = input.LA(1);
			if ( (LA149_0==MAP_VK) ) {
				alt149=1;
			}
			else if ( (LA149_0==SQL92_RESERVED_ORDER) ) {
				alt149=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 149, 0, input);
				throw nvae;
			}

			switch (alt149) {
				case 1 :
					// PLSQLPrinter.g:608:13: MAP_VK
					{
					match(input,MAP_VK,FOLLOW_MAP_VK_in_map_order_function_spec5787); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:608:20: SQL92_RESERVED_ORDER
					{
					match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_map_order_function_spec5789); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_spec_in_map_order_function_spec5792);
			function_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 609:5: -> template( \"not implemented: map_order_function_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: map_order_function_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "map_order_function_spec"


	public static class pragma_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_clause"
	// PLSQLPrinter.g:612:1: pragma_clause : ^( PRAGMA_VK ( pragma_elements )+ ) -> template( \"not implemented: pragma_clause\";
	public final PLSQLPrinter.pragma_clause_return pragma_clause() throws RecognitionException {
		PLSQLPrinter.pragma_clause_return retval = new PLSQLPrinter.pragma_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:613:5: ( ^( PRAGMA_VK ( pragma_elements )+ ) -> template( \"not implemented: pragma_clause\")
			// PLSQLPrinter.g:613:10: ^( PRAGMA_VK ( pragma_elements )+ )
			{
			match(input,PRAGMA_VK,FOLLOW_PRAGMA_VK_in_pragma_clause5828); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:613:22: ( pragma_elements )+
			int cnt150=0;
			loop150:
			while (true) {
				int alt150=2;
				int LA150_0 = input.LA(1);
				if ( (LA150_0==SQL92_RESERVED_DEFAULT||LA150_0==CHAR_SET_NAME||LA150_0==ID) ) {
					alt150=1;
				}

				switch (alt150) {
				case 1 :
					// PLSQLPrinter.g:613:22: pragma_elements
					{
					pushFollow(FOLLOW_pragma_elements_in_pragma_clause5830);
					pragma_elements();
					state._fsp--;

					}
					break;

				default :
					if ( cnt150 >= 1 ) break loop150;
					EarlyExitException eee = new EarlyExitException(150, input);
					throw eee;
				}
				cnt150++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 614:5: -> template( \"not implemented: pragma_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pragma_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_clause"


	public static class pragma_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_elements"
	// PLSQLPrinter.g:617:1: pragma_elements : ( id -> template( \"not implemented: pragma_elements\"| SQL92_RESERVED_DEFAULT -> template( \"not implemented: pragma_elements\");
	public final PLSQLPrinter.pragma_elements_return pragma_elements() throws RecognitionException {
		PLSQLPrinter.pragma_elements_return retval = new PLSQLPrinter.pragma_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:618:5: ( id -> template( \"not implemented: pragma_elements\"| SQL92_RESERVED_DEFAULT -> template( \"not implemented: pragma_elements\")
			int alt151=2;
			int LA151_0 = input.LA(1);
			if ( (LA151_0==CHAR_SET_NAME||LA151_0==ID) ) {
				alt151=1;
			}
			else if ( (LA151_0==SQL92_RESERVED_DEFAULT) ) {
				alt151=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 151, 0, input);
				throw nvae;
			}

			switch (alt151) {
				case 1 :
					// PLSQLPrinter.g:618:10: id
					{
					pushFollow(FOLLOW_id_in_pragma_elements5866);
					id();
					state._fsp--;

					// TEMPLATE REWRITE
					// 619:5: -> template( \"not implemented: pragma_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: pragma_elements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:620:10: SQL92_RESERVED_DEFAULT
					{
					match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_elements5891); 
					// TEMPLATE REWRITE
					// 621:5: -> template( \"not implemented: pragma_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: pragma_elements");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_elements"


	public static class type_elements_parameter_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_elements_parameter"
	// PLSQLPrinter.g:624:1: type_elements_parameter : ^( PARAMETER parameter_name type_spec ) -> template( \"not implemented: type_elements_parameter\";
	public final PLSQLPrinter.type_elements_parameter_return type_elements_parameter() throws RecognitionException {
		PLSQLPrinter.type_elements_parameter_return retval = new PLSQLPrinter.type_elements_parameter_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:625:5: ( ^( PARAMETER parameter_name type_spec ) -> template( \"not implemented: type_elements_parameter\")
			// PLSQLPrinter.g:625:10: ^( PARAMETER parameter_name type_spec )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_type_elements_parameter5926); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_type_elements_parameter5928);
			parameter_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_type_elements_parameter5930);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 626:5: -> template( \"not implemented: type_elements_parameter\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: type_elements_parameter");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_elements_parameter"


	public static class drop_sequence_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_sequence"
	// PLSQLPrinter.g:635:1: drop_sequence : ^( DROP_SEQUENCE sequence_name ) -> template( \"not implemented: drop_sequence\";
	public final PLSQLPrinter.drop_sequence_return drop_sequence() throws RecognitionException {
		PLSQLPrinter.drop_sequence_return retval = new PLSQLPrinter.drop_sequence_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:636:5: ( ^( DROP_SEQUENCE sequence_name ) -> template( \"not implemented: drop_sequence\")
			// PLSQLPrinter.g:636:9: ^( DROP_SEQUENCE sequence_name )
			{
			match(input,DROP_SEQUENCE,FOLLOW_DROP_SEQUENCE_in_drop_sequence5971); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_sequence_name_in_drop_sequence5973);
			sequence_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 637:5: -> template( \"not implemented: drop_sequence\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_sequence");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_sequence"


	public static class alter_sequence_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_sequence"
	// PLSQLPrinter.g:640:1: alter_sequence : ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ ) -> template( \"not implemented: alter_sequence\";
	public final PLSQLPrinter.alter_sequence_return alter_sequence() throws RecognitionException {
		PLSQLPrinter.alter_sequence_return retval = new PLSQLPrinter.alter_sequence_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:641:5: ( ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ ) -> template( \"not implemented: alter_sequence\")
			// PLSQLPrinter.g:641:10: ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ )
			{
			match(input,ALTER_SEQUENCE,FOLLOW_ALTER_SEQUENCE_in_alter_sequence6009); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_sequence_name_in_alter_sequence6011);
			sequence_name();
			state._fsp--;

			// PLSQLPrinter.g:641:41: ( sequence_spec )+
			int cnt152=0;
			loop152:
			while (true) {
				int alt152=2;
				int LA152_0 = input.LA(1);
				if ( (LA152_0==CACHE_VK||LA152_0==CYCLE_VK||LA152_0==INCREMENT_VK||LA152_0==MAXVALUE_VK||LA152_0==MINVALUE_VK||LA152_0==NOCACHE_VK||LA152_0==NOCYCLE_VK||(LA152_0 >= NOMAXVALUE_VK && LA152_0 <= NOMINVALUE_VK)||LA152_0==NOORDER_VK||(LA152_0 >= ORDER_VK && LA152_0 <= START_VK)) ) {
					alt152=1;
				}

				switch (alt152) {
				case 1 :
					// PLSQLPrinter.g:641:41: sequence_spec
					{
					pushFollow(FOLLOW_sequence_spec_in_alter_sequence6013);
					sequence_spec();
					state._fsp--;

					}
					break;

				default :
					if ( cnt152 >= 1 ) break loop152;
					EarlyExitException eee = new EarlyExitException(152, input);
					throw eee;
				}
				cnt152++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 642:5: -> template( \"not implemented: alter_sequence\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_sequence");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_sequence"


	public static class create_sequence_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_sequence"
	// PLSQLPrinter.g:645:1: create_sequence : ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* ) -> template( \"not implemented: create_sequence\";
	public final PLSQLPrinter.create_sequence_return create_sequence() throws RecognitionException {
		PLSQLPrinter.create_sequence_return retval = new PLSQLPrinter.create_sequence_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:646:5: ( ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* ) -> template( \"not implemented: create_sequence\")
			// PLSQLPrinter.g:646:10: ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* )
			{
			match(input,CREATE_SEQUENCE,FOLLOW_CREATE_SEQUENCE_in_create_sequence6050); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_sequence_name_in_create_sequence6052);
			sequence_name();
			state._fsp--;

			// PLSQLPrinter.g:646:42: ( sequence_spec )*
			loop153:
			while (true) {
				int alt153=2;
				int LA153_0 = input.LA(1);
				if ( (LA153_0==CACHE_VK||LA153_0==CYCLE_VK||LA153_0==INCREMENT_VK||LA153_0==MAXVALUE_VK||LA153_0==MINVALUE_VK||LA153_0==NOCACHE_VK||LA153_0==NOCYCLE_VK||(LA153_0 >= NOMAXVALUE_VK && LA153_0 <= NOMINVALUE_VK)||LA153_0==NOORDER_VK||(LA153_0 >= ORDER_VK && LA153_0 <= START_VK)) ) {
					alt153=1;
				}

				switch (alt153) {
				case 1 :
					// PLSQLPrinter.g:646:42: sequence_spec
					{
					pushFollow(FOLLOW_sequence_spec_in_create_sequence6054);
					sequence_spec();
					state._fsp--;

					}
					break;

				default :
					break loop153;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 647:5: -> template( \"not implemented: create_sequence\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: create_sequence");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_sequence"


	public static class sequence_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sequence_spec"
	// PLSQLPrinter.g:652:1: sequence_spec : ( ^( START_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( INCREMENT_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( MAXVALUE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( MINVALUE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( CACHE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| NOMAXVALUE_VK -> template( \"not implemented: sequence_spec\"| NOMINVALUE_VK -> template( \"not implemented: sequence_spec\"| CYCLE_VK -> template( \"not implemented: sequence_spec\"| NOCYCLE_VK -> template( \"not implemented: sequence_spec\"| NOCACHE_VK -> template( \"not implemented: sequence_spec\"| ORDER_VK -> template( \"not implemented: sequence_spec\"| NOORDER_VK -> template( \"not implemented: sequence_spec\");
	public final PLSQLPrinter.sequence_spec_return sequence_spec() throws RecognitionException {
		PLSQLPrinter.sequence_spec_return retval = new PLSQLPrinter.sequence_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:653:5: ( ^( START_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( INCREMENT_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( MAXVALUE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( MINVALUE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( CACHE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| NOMAXVALUE_VK -> template( \"not implemented: sequence_spec\"| NOMINVALUE_VK -> template( \"not implemented: sequence_spec\"| CYCLE_VK -> template( \"not implemented: sequence_spec\"| NOCYCLE_VK -> template( \"not implemented: sequence_spec\"| NOCACHE_VK -> template( \"not implemented: sequence_spec\"| ORDER_VK -> template( \"not implemented: sequence_spec\"| NOORDER_VK -> template( \"not implemented: sequence_spec\")
			int alt154=12;
			switch ( input.LA(1) ) {
			case START_VK:
				{
				alt154=1;
				}
				break;
			case INCREMENT_VK:
				{
				alt154=2;
				}
				break;
			case MAXVALUE_VK:
				{
				alt154=3;
				}
				break;
			case MINVALUE_VK:
				{
				alt154=4;
				}
				break;
			case CACHE_VK:
				{
				alt154=5;
				}
				break;
			case NOMAXVALUE_VK:
				{
				alt154=6;
				}
				break;
			case NOMINVALUE_VK:
				{
				alt154=7;
				}
				break;
			case CYCLE_VK:
				{
				alt154=8;
				}
				break;
			case NOCYCLE_VK:
				{
				alt154=9;
				}
				break;
			case NOCACHE_VK:
				{
				alt154=10;
				}
				break;
			case ORDER_VK:
				{
				alt154=11;
				}
				break;
			case NOORDER_VK:
				{
				alt154=12;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 154, 0, input);
				throw nvae;
			}
			switch (alt154) {
				case 1 :
					// PLSQLPrinter.g:653:10: ^( START_VK UNSIGNED_INTEGER )
					{
					match(input,START_VK,FOLLOW_START_VK_in_sequence_spec6093); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6095); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 654:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:655:10: ^( INCREMENT_VK UNSIGNED_INTEGER )
					{
					match(input,INCREMENT_VK,FOLLOW_INCREMENT_VK_in_sequence_spec6122); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6124); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 656:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:657:10: ^( MAXVALUE_VK UNSIGNED_INTEGER )
					{
					match(input,MAXVALUE_VK,FOLLOW_MAXVALUE_VK_in_sequence_spec6151); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6153); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 658:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:659:10: ^( MINVALUE_VK UNSIGNED_INTEGER )
					{
					match(input,MINVALUE_VK,FOLLOW_MINVALUE_VK_in_sequence_spec6180); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6182); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 660:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:661:10: ^( CACHE_VK UNSIGNED_INTEGER )
					{
					match(input,CACHE_VK,FOLLOW_CACHE_VK_in_sequence_spec6209); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6211); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 662:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:663:10: NOMAXVALUE_VK
					{
					match(input,NOMAXVALUE_VK,FOLLOW_NOMAXVALUE_VK_in_sequence_spec6237); 
					// TEMPLATE REWRITE
					// 664:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:665:10: NOMINVALUE_VK
					{
					match(input,NOMINVALUE_VK,FOLLOW_NOMINVALUE_VK_in_sequence_spec6262); 
					// TEMPLATE REWRITE
					// 666:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:667:10: CYCLE_VK
					{
					match(input,CYCLE_VK,FOLLOW_CYCLE_VK_in_sequence_spec6287); 
					// TEMPLATE REWRITE
					// 668:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:669:10: NOCYCLE_VK
					{
					match(input,NOCYCLE_VK,FOLLOW_NOCYCLE_VK_in_sequence_spec6312); 
					// TEMPLATE REWRITE
					// 670:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:671:10: NOCACHE_VK
					{
					match(input,NOCACHE_VK,FOLLOW_NOCACHE_VK_in_sequence_spec6337); 
					// TEMPLATE REWRITE
					// 672:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:673:10: ORDER_VK
					{
					match(input,ORDER_VK,FOLLOW_ORDER_VK_in_sequence_spec6362); 
					// TEMPLATE REWRITE
					// 674:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:675:10: NOORDER_VK
					{
					match(input,NOORDER_VK,FOLLOW_NOORDER_VK_in_sequence_spec6387); 
					// TEMPLATE REWRITE
					// 676:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sequence_spec"


	public static class invoker_rights_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "invoker_rights_clause"
	// PLSQLPrinter.g:685:1: invoker_rights_clause : ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) ) -> template( \"not implemented: invoker_rights_clause\";
	public final PLSQLPrinter.invoker_rights_clause_return invoker_rights_clause() throws RecognitionException {
		PLSQLPrinter.invoker_rights_clause_return retval = new PLSQLPrinter.invoker_rights_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:686:5: ( ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) ) -> template( \"not implemented: invoker_rights_clause\")
			// PLSQLPrinter.g:686:10: ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) )
			{
			match(input,AUTHID_VK,FOLLOW_AUTHID_VK_in_invoker_rights_clause6428); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:686:22: ( CURRENT_USER_VK | DEFINER_VK )
			int alt155=2;
			int LA155_0 = input.LA(1);
			if ( (LA155_0==CURRENT_USER_VK) ) {
				alt155=1;
			}
			else if ( (LA155_0==DEFINER_VK) ) {
				alt155=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 155, 0, input);
				throw nvae;
			}

			switch (alt155) {
				case 1 :
					// PLSQLPrinter.g:686:23: CURRENT_USER_VK
					{
					match(input,CURRENT_USER_VK,FOLLOW_CURRENT_USER_VK_in_invoker_rights_clause6431); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:686:39: DEFINER_VK
					{
					match(input,DEFINER_VK,FOLLOW_DEFINER_VK_in_invoker_rights_clause6433); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 687:5: -> template( \"not implemented: invoker_rights_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: invoker_rights_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "invoker_rights_clause"


	public static class compiler_parameters_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "compiler_parameters_clause"
	// PLSQLPrinter.g:690:1: compiler_parameters_clause : ^( COMPILER_PARAMETER ^( ASSIGN id expression ) ) -> template( \"not implemented: compiler_parameters_clause\";
	public final PLSQLPrinter.compiler_parameters_clause_return compiler_parameters_clause() throws RecognitionException {
		PLSQLPrinter.compiler_parameters_clause_return retval = new PLSQLPrinter.compiler_parameters_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:691:5: ( ^( COMPILER_PARAMETER ^( ASSIGN id expression ) ) -> template( \"not implemented: compiler_parameters_clause\")
			// PLSQLPrinter.g:691:10: ^( COMPILER_PARAMETER ^( ASSIGN id expression ) )
			{
			match(input,COMPILER_PARAMETER,FOLLOW_COMPILER_PARAMETER_in_compiler_parameters_clause6470); 
			match(input, Token.DOWN, null); 
			match(input,ASSIGN,FOLLOW_ASSIGN_in_compiler_parameters_clause6473); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_id_in_compiler_parameters_clause6475);
			id();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_compiler_parameters_clause6477);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 692:5: -> template( \"not implemented: compiler_parameters_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: compiler_parameters_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compiler_parameters_clause"


	public static class call_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "call_spec"
	// PLSQLPrinter.g:695:1: call_spec : ^( LANGUAGE_VK ( java_spec | c_spec ) ) -> template( \"not implemented: call_spec\";
	public final PLSQLPrinter.call_spec_return call_spec() throws RecognitionException {
		PLSQLPrinter.call_spec_return retval = new PLSQLPrinter.call_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:696:5: ( ^( LANGUAGE_VK ( java_spec | c_spec ) ) -> template( \"not implemented: call_spec\")
			// PLSQLPrinter.g:696:10: ^( LANGUAGE_VK ( java_spec | c_spec ) )
			{
			match(input,LANGUAGE_VK,FOLLOW_LANGUAGE_VK_in_call_spec6514); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:696:24: ( java_spec | c_spec )
			int alt156=2;
			int LA156_0 = input.LA(1);
			if ( (LA156_0==JAVA_VK) ) {
				alt156=1;
			}
			else if ( (LA156_0==C_VK) ) {
				alt156=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 156, 0, input);
				throw nvae;
			}

			switch (alt156) {
				case 1 :
					// PLSQLPrinter.g:696:26: java_spec
					{
					pushFollow(FOLLOW_java_spec_in_call_spec6518);
					java_spec();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:696:38: c_spec
					{
					pushFollow(FOLLOW_c_spec_in_call_spec6522);
					c_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 697:5: -> template( \"not implemented: call_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: call_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "call_spec"


	public static class java_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "java_spec"
	// PLSQLPrinter.g:702:1: java_spec : ^( JAVA_VK CHAR_STRING ) -> template( \"not implemented: java_spec\";
	public final PLSQLPrinter.java_spec_return java_spec() throws RecognitionException {
		PLSQLPrinter.java_spec_return retval = new PLSQLPrinter.java_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:703:5: ( ^( JAVA_VK CHAR_STRING ) -> template( \"not implemented: java_spec\")
			// PLSQLPrinter.g:703:10: ^( JAVA_VK CHAR_STRING )
			{
			match(input,JAVA_VK,FOLLOW_JAVA_VK_in_java_spec6562); 
			match(input, Token.DOWN, null); 
			match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_java_spec6564); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 704:5: -> template( \"not implemented: java_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: java_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "java_spec"


	public static class c_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "c_spec"
	// PLSQLPrinter.g:707:1: c_spec : ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? ) -> template( \"not implemented: c_spec\";
	public final PLSQLPrinter.c_spec_return c_spec() throws RecognitionException {
		PLSQLPrinter.c_spec_return retval = new PLSQLPrinter.c_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:708:5: ( ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? ) -> template( \"not implemented: c_spec\")
			// PLSQLPrinter.g:708:10: ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? )
			{
			match(input,C_VK,FOLLOW_C_VK_in_c_spec6600); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:708:17: ( CHAR_STRING )?
			int alt157=2;
			int LA157_0 = input.LA(1);
			if ( (LA157_0==CHAR_STRING) ) {
				alt157=1;
			}
			switch (alt157) {
				case 1 :
					// PLSQLPrinter.g:708:17: CHAR_STRING
					{
					match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_c_spec6602); 
					}
					break;

			}

			// PLSQLPrinter.g:708:30: ( CONTEXT_VK )?
			int alt158=2;
			int LA158_0 = input.LA(1);
			if ( (LA158_0==CONTEXT_VK) ) {
				alt158=1;
			}
			switch (alt158) {
				case 1 :
					// PLSQLPrinter.g:708:30: CONTEXT_VK
					{
					match(input,CONTEXT_VK,FOLLOW_CONTEXT_VK_in_c_spec6605); 
					}
					break;

			}

			match(input,LIBRARY_VK,FOLLOW_LIBRARY_VK_in_c_spec6609); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_id_in_c_spec6611);
			id();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:708:59: ( c_agent_in_clause )?
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==AGENT_VK) ) {
				alt159=1;
			}
			switch (alt159) {
				case 1 :
					// PLSQLPrinter.g:708:59: c_agent_in_clause
					{
					pushFollow(FOLLOW_c_agent_in_clause_in_c_spec6614);
					c_agent_in_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:708:78: ( c_parameters_clause )?
			int alt160=2;
			int LA160_0 = input.LA(1);
			if ( (LA160_0==PARAMETERS_VK) ) {
				alt160=1;
			}
			switch (alt160) {
				case 1 :
					// PLSQLPrinter.g:708:78: c_parameters_clause
					{
					pushFollow(FOLLOW_c_parameters_clause_in_c_spec6617);
					c_parameters_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 709:5: -> template( \"not implemented: c_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: c_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "c_spec"


	public static class c_agent_in_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "c_agent_in_clause"
	// PLSQLPrinter.g:712:1: c_agent_in_clause : ^( AGENT_VK ( expression )+ ) -> template( \"not implemented: c_agent_in_clause\";
	public final PLSQLPrinter.c_agent_in_clause_return c_agent_in_clause() throws RecognitionException {
		PLSQLPrinter.c_agent_in_clause_return retval = new PLSQLPrinter.c_agent_in_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:713:5: ( ^( AGENT_VK ( expression )+ ) -> template( \"not implemented: c_agent_in_clause\")
			// PLSQLPrinter.g:713:10: ^( AGENT_VK ( expression )+ )
			{
			match(input,AGENT_VK,FOLLOW_AGENT_VK_in_c_agent_in_clause6654); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:713:21: ( expression )+
			int cnt161=0;
			loop161:
			while (true) {
				int alt161=2;
				int LA161_0 = input.LA(1);
				if ( (LA161_0==EXPR||LA161_0==LOGIC_EXPR) ) {
					alt161=1;
				}

				switch (alt161) {
				case 1 :
					// PLSQLPrinter.g:713:21: expression
					{
					pushFollow(FOLLOW_expression_in_c_agent_in_clause6656);
					expression();
					state._fsp--;

					}
					break;

				default :
					if ( cnt161 >= 1 ) break loop161;
					EarlyExitException eee = new EarlyExitException(161, input);
					throw eee;
				}
				cnt161++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 714:5: -> template( \"not implemented: c_agent_in_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: c_agent_in_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "c_agent_in_clause"


	public static class c_parameters_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "c_parameters_clause"
	// PLSQLPrinter.g:717:1: c_parameters_clause : ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) ) -> template( \"not implemented: c_parameters_clause\";
	public final PLSQLPrinter.c_parameters_clause_return c_parameters_clause() throws RecognitionException {
		PLSQLPrinter.c_parameters_clause_return retval = new PLSQLPrinter.c_parameters_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:718:5: ( ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) ) -> template( \"not implemented: c_parameters_clause\")
			// PLSQLPrinter.g:718:10: ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) )
			{
			match(input,PARAMETERS_VK,FOLLOW_PARAMETERS_VK_in_c_parameters_clause6693); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:718:26: ( THREE_DOTS | ( expression )+ )
			int alt163=2;
			int LA163_0 = input.LA(1);
			if ( (LA163_0==THREE_DOTS) ) {
				alt163=1;
			}
			else if ( (LA163_0==EXPR||LA163_0==LOGIC_EXPR) ) {
				alt163=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 163, 0, input);
				throw nvae;
			}

			switch (alt163) {
				case 1 :
					// PLSQLPrinter.g:718:27: THREE_DOTS
					{
					match(input,THREE_DOTS,FOLLOW_THREE_DOTS_in_c_parameters_clause6696); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:718:38: ( expression )+
					{
					// PLSQLPrinter.g:718:38: ( expression )+
					int cnt162=0;
					loop162:
					while (true) {
						int alt162=2;
						int LA162_0 = input.LA(1);
						if ( (LA162_0==EXPR||LA162_0==LOGIC_EXPR) ) {
							alt162=1;
						}

						switch (alt162) {
						case 1 :
							// PLSQLPrinter.g:718:38: expression
							{
							pushFollow(FOLLOW_expression_in_c_parameters_clause6698);
							expression();
							state._fsp--;

							}
							break;

						default :
							if ( cnt162 >= 1 ) break loop162;
							EarlyExitException eee = new EarlyExitException(162, input);
							throw eee;
						}
						cnt162++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 719:5: -> template( \"not implemented: c_parameters_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: c_parameters_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "c_parameters_clause"


	public static class parameter_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parameter"
	// PLSQLPrinter.g:724:1: parameter : ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? ) -> parameter(name=$parameter_name.stis_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullis_inout=$INOUT_VK != nullis_nocopy=falsetype=$type_spec.stdefault_value_part=$default_value_part.st);
	public final PLSQLPrinter.parameter_return parameter() throws RecognitionException {
		PLSQLPrinter.parameter_return retval = new PLSQLPrinter.parameter_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_IN63=null;
		CommonTree OUT_VK64=null;
		CommonTree INOUT_VK65=null;
		TreeRuleReturnScope parameter_name62 =null;
		TreeRuleReturnScope type_spec66 =null;
		TreeRuleReturnScope default_value_part67 =null;

		try {
			// PLSQLPrinter.g:725:5: ( ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? ) -> parameter(name=$parameter_name.stis_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullis_inout=$INOUT_VK != nullis_nocopy=falsetype=$type_spec.stdefault_value_part=$default_value_part.st))
			// PLSQLPrinter.g:725:10: ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_parameter6738); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_parameter6740);
			parameter_name62=parameter_name();
			state._fsp--;

			// PLSQLPrinter.g:725:37: ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )*
			loop164:
			while (true) {
				int alt164=4;
				switch ( input.LA(1) ) {
				case SQL92_RESERVED_IN:
					{
					alt164=1;
					}
					break;
				case OUT_VK:
					{
					alt164=2;
					}
					break;
				case INOUT_VK:
					{
					alt164=3;
					}
					break;
				}
				switch (alt164) {
				case 1 :
					// PLSQLPrinter.g:725:38: SQL92_RESERVED_IN
					{
					SQL92_RESERVED_IN63=(CommonTree)match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_parameter6743); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:725:56: OUT_VK
					{
					OUT_VK64=(CommonTree)match(input,OUT_VK,FOLLOW_OUT_VK_in_parameter6745); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:725:63: INOUT_VK
					{
					INOUT_VK65=(CommonTree)match(input,INOUT_VK,FOLLOW_INOUT_VK_in_parameter6747); 
					}
					break;

				default :
					break loop164;
				}
			}

			// PLSQLPrinter.g:725:74: ( type_spec )?
			int alt165=2;
			int LA165_0 = input.LA(1);
			if ( (LA165_0==CUSTOM_TYPE||LA165_0==INTERVAL_DATATYPE||LA165_0==NATIVE_DATATYPE) ) {
				alt165=1;
			}
			switch (alt165) {
				case 1 :
					// PLSQLPrinter.g:725:74: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_parameter6751);
					type_spec66=type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:725:85: ( default_value_part )?
			int alt166=2;
			int LA166_0 = input.LA(1);
			if ( (LA166_0==DEFAULT_VALUE) ) {
				alt166=1;
			}
			switch (alt166) {
				case 1 :
					// PLSQLPrinter.g:725:85: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_parameter6754);
					default_value_part67=default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 726:5: -> parameter(name=$parameter_name.stis_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullis_inout=$INOUT_VK != nullis_nocopy=falsetype=$type_spec.stdefault_value_part=$default_value_part.st)
			{
				retval.st = templateLib.getInstanceOf("parameter",new STAttrMap().put("name", (parameter_name62!=null?((StringTemplate)parameter_name62.getTemplate()):null)).put("is_in", SQL92_RESERVED_IN63 != null).put("is_out", OUT_VK64 != null).put("is_inout", INOUT_VK65 != null).put("is_nocopy", false).put("type", (type_spec66!=null?((StringTemplate)type_spec66.getTemplate()):null)).put("default_value_part", (default_value_part67!=null?((StringTemplate)default_value_part67.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter"


	public static class default_value_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "default_value_part"
	// PLSQLPrinter.g:731:1: default_value_part : ^( DEFAULT_VALUE expression ) -> default_value_part(expression=$expression.st);
	public final PLSQLPrinter.default_value_part_return default_value_part() throws RecognitionException {
		PLSQLPrinter.default_value_part_return retval = new PLSQLPrinter.default_value_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression68 =null;

		try {
			// PLSQLPrinter.g:732:5: ( ^( DEFAULT_VALUE expression ) -> default_value_part(expression=$expression.st))
			// PLSQLPrinter.g:732:10: ^( DEFAULT_VALUE expression )
			{
			match(input,DEFAULT_VALUE,FOLLOW_DEFAULT_VALUE_in_default_value_part6844); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_default_value_part6846);
			expression68=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 733:5: -> default_value_part(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("default_value_part",new STAttrMap().put("expression", (expression68!=null?((StringTemplate)expression68.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "default_value_part"


	public static class declare_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "declare_spec"
	// PLSQLPrinter.g:742:1: declare_spec : ( variable_declaration -> { $variable_declaration.st }| subtype_declaration -> { $subtype_declaration.st }| cursor_declaration -> { $cursor_declaration.st }| exception_declaration -> { $exception_declaration.st }| pragma_declaration -> { $pragma_declaration.st }| record_declaration -> { $record_declaration.st }| table_declaration -> { $table_declaration.st }| create_procedure_body -> { $create_procedure_body.st }| create_function_body -> { $create_function_body.st }| create_type -> { $create_type.st });
	public final PLSQLPrinter.declare_spec_return declare_spec() throws RecognitionException {
		PLSQLPrinter.declare_spec_return retval = new PLSQLPrinter.declare_spec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope variable_declaration69 =null;
		TreeRuleReturnScope subtype_declaration70 =null;
		TreeRuleReturnScope cursor_declaration71 =null;
		TreeRuleReturnScope exception_declaration72 =null;
		TreeRuleReturnScope pragma_declaration73 =null;
		TreeRuleReturnScope record_declaration74 =null;
		TreeRuleReturnScope table_declaration75 =null;
		TreeRuleReturnScope create_procedure_body76 =null;
		TreeRuleReturnScope create_function_body77 =null;
		TreeRuleReturnScope create_type78 =null;

		try {
			// PLSQLPrinter.g:743:5: ( variable_declaration -> { $variable_declaration.st }| subtype_declaration -> { $subtype_declaration.st }| cursor_declaration -> { $cursor_declaration.st }| exception_declaration -> { $exception_declaration.st }| pragma_declaration -> { $pragma_declaration.st }| record_declaration -> { $record_declaration.st }| table_declaration -> { $table_declaration.st }| create_procedure_body -> { $create_procedure_body.st }| create_function_body -> { $create_function_body.st }| create_type -> { $create_type.st })
			int alt167=10;
			switch ( input.LA(1) ) {
			case VARIABLE_DECLARE:
				{
				alt167=1;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt167=2;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt167=3;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt167=4;
				}
				break;
			case PRAGMA_DECLARE:
				{
				alt167=5;
				}
				break;
			case RECORD_TYPE_DECLARE:
			case RECORD_VAR_DECLARE:
				{
				alt167=6;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt167=7;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt167=8;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt167=9;
				}
				break;
			case CREATE_TYPE_BODY:
			case CREATE_TYPE_SPEC:
				{
				alt167=10;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 167, 0, input);
				throw nvae;
			}
			switch (alt167) {
				case 1 :
					// PLSQLPrinter.g:743:10: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_declare_spec6888);
					variable_declaration69=variable_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 743:31: -> { $variable_declaration.st }
					{
						retval.st =  (variable_declaration69!=null?((StringTemplate)variable_declaration69.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:744:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_declare_spec6904);
					subtype_declaration70=subtype_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 744:31: -> { $subtype_declaration.st }
					{
						retval.st =  (subtype_declaration70!=null?((StringTemplate)subtype_declaration70.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:745:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_declare_spec6920);
					cursor_declaration71=cursor_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 745:30: -> { $cursor_declaration.st }
					{
						retval.st =  (cursor_declaration71!=null?((StringTemplate)cursor_declaration71.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:746:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_declare_spec6936);
					exception_declaration72=exception_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 746:33: -> { $exception_declaration.st }
					{
						retval.st =  (exception_declaration72!=null?((StringTemplate)exception_declaration72.getTemplate()):null) ;
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:747:11: pragma_declaration
					{
					pushFollow(FOLLOW_pragma_declaration_in_declare_spec6952);
					pragma_declaration73=pragma_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 747:30: -> { $pragma_declaration.st }
					{
						retval.st =  (pragma_declaration73!=null?((StringTemplate)pragma_declaration73.getTemplate()):null) ;
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:748:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_declare_spec6968);
					record_declaration74=record_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 748:30: -> { $record_declaration.st }
					{
						retval.st =  (record_declaration74!=null?((StringTemplate)record_declaration74.getTemplate()):null) ;
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:749:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_declare_spec6984);
					table_declaration75=table_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 749:29: -> { $table_declaration.st }
					{
						retval.st =  (table_declaration75!=null?((StringTemplate)table_declaration75.getTemplate()):null) ;
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:750:11: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_declare_spec7000);
					create_procedure_body76=create_procedure_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 750:33: -> { $create_procedure_body.st }
					{
						retval.st =  (create_procedure_body76!=null?((StringTemplate)create_procedure_body76.getTemplate()):null) ;
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:751:11: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_declare_spec7016);
					create_function_body77=create_function_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 751:32: -> { $create_function_body.st }
					{
						retval.st =  (create_function_body77!=null?((StringTemplate)create_function_body77.getTemplate()):null) ;
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:752:11: create_type
					{
					pushFollow(FOLLOW_create_type_in_declare_spec7032);
					create_type78=create_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 752:23: -> { $create_type.st }
					{
						retval.st =  (create_type78!=null?((StringTemplate)create_type78.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "declare_spec"


	public static class variable_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "variable_declaration"
	// PLSQLPrinter.g:756:1: variable_declaration : ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> variable_declaration(name=$variable_name.sttype=$type_spec.stis_constant=$CONSTANT_VK != nullis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st);
	public final PLSQLPrinter.variable_declaration_return variable_declaration() throws RecognitionException {
		PLSQLPrinter.variable_declaration_return retval = new PLSQLPrinter.variable_declaration_return();
		retval.start = input.LT(1);

		CommonTree CONSTANT_VK81=null;
		CommonTree SQL92_RESERVED_NULL82=null;
		TreeRuleReturnScope variable_name79 =null;
		TreeRuleReturnScope type_spec80 =null;
		TreeRuleReturnScope default_value_part83 =null;

		try {
			// PLSQLPrinter.g:757:5: ( ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> variable_declaration(name=$variable_name.sttype=$type_spec.stis_constant=$CONSTANT_VK != nullis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st))
			// PLSQLPrinter.g:757:10: ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? )
			{
			match(input,VARIABLE_DECLARE,FOLLOW_VARIABLE_DECLARE_in_variable_declaration7058); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_variable_name_in_variable_declaration7060);
			variable_name79=variable_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_variable_declaration7062);
			type_spec80=type_spec();
			state._fsp--;

			// PLSQLPrinter.g:757:53: ( CONSTANT_VK )?
			int alt168=2;
			int LA168_0 = input.LA(1);
			if ( (LA168_0==CONSTANT_VK) ) {
				alt168=1;
			}
			switch (alt168) {
				case 1 :
					// PLSQLPrinter.g:757:53: CONSTANT_VK
					{
					CONSTANT_VK81=(CommonTree)match(input,CONSTANT_VK,FOLLOW_CONSTANT_VK_in_variable_declaration7064); 
					}
					break;

			}

			// PLSQLPrinter.g:757:66: ( SQL92_RESERVED_NULL )?
			int alt169=2;
			int LA169_0 = input.LA(1);
			if ( (LA169_0==SQL92_RESERVED_NULL) ) {
				alt169=1;
			}
			switch (alt169) {
				case 1 :
					// PLSQLPrinter.g:757:66: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL82=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_variable_declaration7067); 
					}
					break;

			}

			// PLSQLPrinter.g:757:87: ( default_value_part )?
			int alt170=2;
			int LA170_0 = input.LA(1);
			if ( (LA170_0==DEFAULT_VALUE) ) {
				alt170=1;
			}
			switch (alt170) {
				case 1 :
					// PLSQLPrinter.g:757:87: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_variable_declaration7070);
					default_value_part83=default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 758:5: -> variable_declaration(name=$variable_name.sttype=$type_spec.stis_constant=$CONSTANT_VK != nullis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st)
			{
				retval.st = templateLib.getInstanceOf("variable_declaration",new STAttrMap().put("name", (variable_name79!=null?((StringTemplate)variable_name79.getTemplate()):null)).put("type", (type_spec80!=null?((StringTemplate)type_spec80.getTemplate()):null)).put("is_constant", CONSTANT_VK81 != null).put("is_not_null", SQL92_RESERVED_NULL82 != null).put("default_value_part", (default_value_part83!=null?((StringTemplate)default_value_part83.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "variable_declaration"


	public static class subtype_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subtype_declaration"
	// PLSQLPrinter.g:763:1: subtype_declaration : ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? ) -> subtype_declaration(name=$type_name.sttype_spec=$type_spec.strange=$subtype_range.stis_not_null=$SQL92_RESERVED_NULL != null);
	public final PLSQLPrinter.subtype_declaration_return subtype_declaration() throws RecognitionException {
		PLSQLPrinter.subtype_declaration_return retval = new PLSQLPrinter.subtype_declaration_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL87=null;
		TreeRuleReturnScope type_name84 =null;
		TreeRuleReturnScope type_spec85 =null;
		TreeRuleReturnScope subtype_range86 =null;

		try {
			// PLSQLPrinter.g:764:5: ( ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? ) -> subtype_declaration(name=$type_name.sttype_spec=$type_spec.strange=$subtype_range.stis_not_null=$SQL92_RESERVED_NULL != null))
			// PLSQLPrinter.g:764:10: ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? )
			{
			match(input,SUBTYPE_DECLARE,FOLLOW_SUBTYPE_DECLARE_in_subtype_declaration7155); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_subtype_declaration7157);
			type_name84=type_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_subtype_declaration7159);
			type_spec85=type_spec();
			state._fsp--;

			// PLSQLPrinter.g:764:48: ( SQL92_RESERVED_NULL )?
			int alt171=2;
			int LA171_0 = input.LA(1);
			if ( (LA171_0==SQL92_RESERVED_NULL) ) {
				alt171=1;
			}
			switch (alt171) {
				case 1 :
					// PLSQLPrinter.g:764:48: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL87=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_subtype_declaration7161); 
					}
					break;

			}

			// PLSQLPrinter.g:764:69: ( subtype_range )?
			int alt172=2;
			int LA172_0 = input.LA(1);
			if ( (LA172_0==RANGE_VK) ) {
				alt172=1;
			}
			switch (alt172) {
				case 1 :
					// PLSQLPrinter.g:764:69: subtype_range
					{
					pushFollow(FOLLOW_subtype_range_in_subtype_declaration7164);
					subtype_range86=subtype_range();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 765:5: -> subtype_declaration(name=$type_name.sttype_spec=$type_spec.strange=$subtype_range.stis_not_null=$SQL92_RESERVED_NULL != null)
			{
				retval.st = templateLib.getInstanceOf("subtype_declaration",new STAttrMap().put("name", (type_name84!=null?((StringTemplate)type_name84.getTemplate()):null)).put("type_spec", (type_spec85!=null?((StringTemplate)type_spec85.getTemplate()):null)).put("range", (subtype_range86!=null?((StringTemplate)subtype_range86.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL87 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subtype_declaration"


	public static class subtype_range_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subtype_range"
	// PLSQLPrinter.g:770:1: subtype_range : ^( RANGE_VK e1= expression e2= expression ) -> subtype_range(low_bound=$e1.sthigh_bound=$e2.st);
	public final PLSQLPrinter.subtype_range_return subtype_range() throws RecognitionException {
		PLSQLPrinter.subtype_range_return retval = new PLSQLPrinter.subtype_range_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope e1 =null;
		TreeRuleReturnScope e2 =null;

		try {
			// PLSQLPrinter.g:771:5: ( ^( RANGE_VK e1= expression e2= expression ) -> subtype_range(low_bound=$e1.sthigh_bound=$e2.st))
			// PLSQLPrinter.g:771:10: ^( RANGE_VK e1= expression e2= expression )
			{
			match(input,RANGE_VK,FOLLOW_RANGE_VK_in_subtype_range7242); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_subtype_range7246);
			e1=expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_subtype_range7250);
			e2=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 772:5: -> subtype_range(low_bound=$e1.sthigh_bound=$e2.st)
			{
				retval.st = templateLib.getInstanceOf("subtype_range",new STAttrMap().put("low_bound", (e1!=null?((StringTemplate)e1.getTemplate()):null)).put("high_bound", (e2!=null?((StringTemplate)e2.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subtype_range"


	public static class cursor_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_declaration"
	// PLSQLPrinter.g:776:1: cursor_declaration : ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) ) -> template( \"not implemented: cursor_declaration\";
	public final PLSQLPrinter.cursor_declaration_return cursor_declaration() throws RecognitionException {
		PLSQLPrinter.cursor_declaration_return retval = new PLSQLPrinter.cursor_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:777:5: ( ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) ) -> template( \"not implemented: cursor_declaration\")
			// PLSQLPrinter.g:777:10: ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) )
			{
			match(input,CURSOR_DECLARE,FOLLOW_CURSOR_DECLARE_in_cursor_declaration7293); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_cursor_declaration7295);
			cursor_name();
			state._fsp--;

			// PLSQLPrinter.g:777:39: ( type_spec )?
			int alt173=2;
			int LA173_0 = input.LA(1);
			if ( (LA173_0==CUSTOM_TYPE||LA173_0==INTERVAL_DATATYPE||LA173_0==NATIVE_DATATYPE) ) {
				alt173=1;
			}
			switch (alt173) {
				case 1 :
					// PLSQLPrinter.g:777:39: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_cursor_declaration7297);
					type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:777:50: ( select_statement )?
			int alt174=2;
			int LA174_0 = input.LA(1);
			if ( (LA174_0==SELECT_STATEMENT) ) {
				alt174=1;
			}
			switch (alt174) {
				case 1 :
					// PLSQLPrinter.g:777:50: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_cursor_declaration7300);
					select_statement();
					state._fsp--;

					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_cursor_declaration7304); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:777:81: ( parameter_spec )*
				loop175:
				while (true) {
					int alt175=2;
					int LA175_0 = input.LA(1);
					if ( (LA175_0==PARAMETER) ) {
						alt175=1;
					}

					switch (alt175) {
					case 1 :
						// PLSQLPrinter.g:777:81: parameter_spec
						{
						pushFollow(FOLLOW_parameter_spec_in_cursor_declaration7306);
						parameter_spec();
						state._fsp--;

						}
						break;

					default :
						break loop175;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 778:5: -> template( \"not implemented: cursor_declaration\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: cursor_declaration");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_declaration"


	public static class parameter_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parameter_spec"
	// PLSQLPrinter.g:781:1: parameter_spec : ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) -> template( \"not implemented: parameter_spec\";
	public final PLSQLPrinter.parameter_spec_return parameter_spec() throws RecognitionException {
		PLSQLPrinter.parameter_spec_return retval = new PLSQLPrinter.parameter_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:782:5: ( ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) -> template( \"not implemented: parameter_spec\")
			// PLSQLPrinter.g:782:10: ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_parameter_spec7345); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_parameter_spec7347);
			parameter_name();
			state._fsp--;

			// PLSQLPrinter.g:782:37: ( type_spec )?
			int alt176=2;
			int LA176_0 = input.LA(1);
			if ( (LA176_0==CUSTOM_TYPE||LA176_0==INTERVAL_DATATYPE||LA176_0==NATIVE_DATATYPE) ) {
				alt176=1;
			}
			switch (alt176) {
				case 1 :
					// PLSQLPrinter.g:782:37: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_parameter_spec7349);
					type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:782:48: ( default_value_part )?
			int alt177=2;
			int LA177_0 = input.LA(1);
			if ( (LA177_0==DEFAULT_VALUE) ) {
				alt177=1;
			}
			switch (alt177) {
				case 1 :
					// PLSQLPrinter.g:782:48: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_parameter_spec7352);
					default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 783:5: -> template( \"not implemented: parameter_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: parameter_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter_spec"


	public static class exception_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_declaration"
	// PLSQLPrinter.g:786:1: exception_declaration : ^( EXCEPTION_DECLARE exception_name ) -> template( \"not implemented: exception_declaration\";
	public final PLSQLPrinter.exception_declaration_return exception_declaration() throws RecognitionException {
		PLSQLPrinter.exception_declaration_return retval = new PLSQLPrinter.exception_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:787:5: ( ^( EXCEPTION_DECLARE exception_name ) -> template( \"not implemented: exception_declaration\")
			// PLSQLPrinter.g:787:10: ^( EXCEPTION_DECLARE exception_name )
			{
			match(input,EXCEPTION_DECLARE,FOLLOW_EXCEPTION_DECLARE_in_exception_declaration7390); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_exception_name_in_exception_declaration7392);
			exception_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 788:5: -> template( \"not implemented: exception_declaration\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: exception_declaration");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_declaration"


	public static class pragma_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_declaration"
	// PLSQLPrinter.g:791:1: pragma_declaration : ^( PRAGMA_DECLARE pragma_declaration_impl ) -> pragma_declaration(impl=$pragma_declaration_impl.st);
	public final PLSQLPrinter.pragma_declaration_return pragma_declaration() throws RecognitionException {
		PLSQLPrinter.pragma_declaration_return retval = new PLSQLPrinter.pragma_declaration_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope pragma_declaration_impl88 =null;

		try {
			// PLSQLPrinter.g:792:5: ( ^( PRAGMA_DECLARE pragma_declaration_impl ) -> pragma_declaration(impl=$pragma_declaration_impl.st))
			// PLSQLPrinter.g:792:10: ^( PRAGMA_DECLARE pragma_declaration_impl )
			{
			match(input,PRAGMA_DECLARE,FOLLOW_PRAGMA_DECLARE_in_pragma_declaration7441); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_pragma_declaration_impl_in_pragma_declaration7443);
			pragma_declaration_impl88=pragma_declaration_impl();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 793:5: -> pragma_declaration(impl=$pragma_declaration_impl.st)
			{
				retval.st = templateLib.getInstanceOf("pragma_declaration",new STAttrMap().put("impl", (pragma_declaration_impl88!=null?((StringTemplate)pragma_declaration_impl88.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_declaration"


	public static class pragma_declaration_impl_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_declaration_impl"
	// PLSQLPrinter.g:796:1: pragma_declaration_impl : ( SERIALLY_REUSABLE_VK -> pragma_declaration_impl_serially_reusable(| AUTONOMOUS_TRANSACTION_VK -> pragma_declaration_impl_serially_autonomous_transaction(| ^( EXCEPTION_INIT_VK exception_name constant ) -> pragma_declaration_impl_serially_exception_init(name=$exception_name.stnumeric=$constant.st)| ^( INLINE_VK id expression ) -> pragma_declaration_impl_serially_inline(id=$id.stexpression=$expression.st)| ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT |firstId= id ) (rest+= id )+ ) -> pragma_declaration_impl_serially_restrict_references(arg1=firstStrestArgs=$rest));
	public final PLSQLPrinter.pragma_declaration_impl_return pragma_declaration_impl() throws RecognitionException {
		PLSQLPrinter.pragma_declaration_impl_return retval = new PLSQLPrinter.pragma_declaration_impl_return();
		retval.start = input.LT(1);

		List<Object> list_rest=null;
		TreeRuleReturnScope firstId =null;
		TreeRuleReturnScope exception_name89 =null;
		TreeRuleReturnScope constant90 =null;
		TreeRuleReturnScope id91 =null;
		TreeRuleReturnScope expression92 =null;
		RuleReturnScope rest = null;
		 StringTemplate firstSt = null; 
		try {
			// PLSQLPrinter.g:798:5: ( SERIALLY_REUSABLE_VK -> pragma_declaration_impl_serially_reusable(| AUTONOMOUS_TRANSACTION_VK -> pragma_declaration_impl_serially_autonomous_transaction(| ^( EXCEPTION_INIT_VK exception_name constant ) -> pragma_declaration_impl_serially_exception_init(name=$exception_name.stnumeric=$constant.st)| ^( INLINE_VK id expression ) -> pragma_declaration_impl_serially_inline(id=$id.stexpression=$expression.st)| ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT |firstId= id ) (rest+= id )+ ) -> pragma_declaration_impl_serially_restrict_references(arg1=firstStrestArgs=$rest))
			int alt180=5;
			switch ( input.LA(1) ) {
			case SERIALLY_REUSABLE_VK:
				{
				alt180=1;
				}
				break;
			case AUTONOMOUS_TRANSACTION_VK:
				{
				alt180=2;
				}
				break;
			case EXCEPTION_INIT_VK:
				{
				alt180=3;
				}
				break;
			case INLINE_VK:
				{
				alt180=4;
				}
				break;
			case RESTRICT_REFERENCES_VK:
				{
				alt180=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 180, 0, input);
				throw nvae;
			}
			switch (alt180) {
				case 1 :
					// PLSQLPrinter.g:798:10: SERIALLY_REUSABLE_VK
					{
					match(input,SERIALLY_REUSABLE_VK,FOLLOW_SERIALLY_REUSABLE_VK_in_pragma_declaration_impl7488); 
					// TEMPLATE REWRITE
					// 798:31: -> pragma_declaration_impl_serially_reusable(
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_reusable");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:799:16: AUTONOMOUS_TRANSACTION_VK
					{
					match(input,AUTONOMOUS_TRANSACTION_VK,FOLLOW_AUTONOMOUS_TRANSACTION_VK_in_pragma_declaration_impl7511); 
					// TEMPLATE REWRITE
					// 799:42: -> pragma_declaration_impl_serially_autonomous_transaction(
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_autonomous_transaction");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:800:15: ^( EXCEPTION_INIT_VK exception_name constant )
					{
					match(input,EXCEPTION_INIT_VK,FOLLOW_EXCEPTION_INIT_VK_in_pragma_declaration_impl7534); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_exception_name_in_pragma_declaration_impl7536);
					exception_name89=exception_name();
					state._fsp--;

					pushFollow(FOLLOW_constant_in_pragma_declaration_impl7538);
					constant90=constant();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 801:10: -> pragma_declaration_impl_serially_exception_init(name=$exception_name.stnumeric=$constant.st)
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_exception_init",new STAttrMap().put("name", (exception_name89!=null?((StringTemplate)exception_name89.getTemplate()):null)).put("numeric", (constant90!=null?((StringTemplate)constant90.getTemplate()):null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:802:15: ^( INLINE_VK id expression )
					{
					match(input,INLINE_VK,FOLLOW_INLINE_VK_in_pragma_declaration_impl7581); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_id_in_pragma_declaration_impl7583);
					id91=id();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_pragma_declaration_impl7585);
					expression92=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 803:10: -> pragma_declaration_impl_serially_inline(id=$id.stexpression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_inline",new STAttrMap().put("id", (id91!=null?((StringTemplate)id91.getTemplate()):null)).put("expression", (expression92!=null?((StringTemplate)expression92.getTemplate()):null)));
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:804:15: ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT |firstId= id ) (rest+= id )+ )
					{
					match(input,RESTRICT_REFERENCES_VK,FOLLOW_RESTRICT_REFERENCES_VK_in_pragma_declaration_impl7628); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:805:17: ( SQL92_RESERVED_DEFAULT |firstId= id )
					int alt178=2;
					int LA178_0 = input.LA(1);
					if ( (LA178_0==SQL92_RESERVED_DEFAULT) ) {
						alt178=1;
					}
					else if ( (LA178_0==CHAR_SET_NAME||LA178_0==ID) ) {
						alt178=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 178, 0, input);
						throw nvae;
					}

					switch (alt178) {
						case 1 :
							// PLSQLPrinter.g:806:19: SQL92_RESERVED_DEFAULT
							{
							match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_declaration_impl7666); 
							 firstSt = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "default")); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:807:21: firstId= id
							{
							pushFollow(FOLLOW_id_in_pragma_declaration_impl7692);
							firstId=id();
							state._fsp--;

							 firstSt = (firstId!=null?((StringTemplate)firstId.getTemplate()):null); 
							}
							break;

					}

					// PLSQLPrinter.g:809:21: (rest+= id )+
					int cnt179=0;
					loop179:
					while (true) {
						int alt179=2;
						int LA179_0 = input.LA(1);
						if ( (LA179_0==CHAR_SET_NAME||LA179_0==ID) ) {
							alt179=1;
						}

						switch (alt179) {
						case 1 :
							// PLSQLPrinter.g:809:21: rest+= id
							{
							pushFollow(FOLLOW_id_in_pragma_declaration_impl7732);
							rest=id();
							state._fsp--;

							if (list_rest==null) list_rest=new ArrayList<Object>();
							list_rest.add(rest.getTemplate());
							}
							break;

						default :
							if ( cnt179 >= 1 ) break loop179;
							EarlyExitException eee = new EarlyExitException(179, input);
							throw eee;
						}
						cnt179++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 811:10: -> pragma_declaration_impl_serially_restrict_references(arg1=firstStrestArgs=$rest)
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_restrict_references",new STAttrMap().put("arg1", firstSt).put("restArgs", list_rest));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_declaration_impl"


	public static class record_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_declaration"
	// PLSQLPrinter.g:815:1: record_declaration : ( record_type_dec -> { $record_type_dec.st }| record_var_dec -> { $record_var_dec.st });
	public final PLSQLPrinter.record_declaration_return record_declaration() throws RecognitionException {
		PLSQLPrinter.record_declaration_return retval = new PLSQLPrinter.record_declaration_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope record_type_dec93 =null;
		TreeRuleReturnScope record_var_dec94 =null;

		try {
			// PLSQLPrinter.g:816:5: ( record_type_dec -> { $record_type_dec.st }| record_var_dec -> { $record_var_dec.st })
			int alt181=2;
			int LA181_0 = input.LA(1);
			if ( (LA181_0==RECORD_TYPE_DECLARE) ) {
				alt181=1;
			}
			else if ( (LA181_0==RECORD_VAR_DECLARE) ) {
				alt181=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 181, 0, input);
				throw nvae;
			}

			switch (alt181) {
				case 1 :
					// PLSQLPrinter.g:816:10: record_type_dec
					{
					pushFollow(FOLLOW_record_type_dec_in_record_declaration7798);
					record_type_dec93=record_type_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 816:26: -> { $record_type_dec.st }
					{
						retval.st =  (record_type_dec93!=null?((StringTemplate)record_type_dec93.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:817:10: record_var_dec
					{
					pushFollow(FOLLOW_record_var_dec_in_record_declaration7813);
					record_var_dec94=record_var_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 817:25: -> { $record_var_dec.st }
					{
						retval.st =  (record_var_dec94!=null?((StringTemplate)record_var_dec94.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_declaration"


	public static class record_type_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_type_dec"
	// PLSQLPrinter.g:823:1: record_type_dec : ( record_type_dec_record -> { $record_type_dec_record.st }| record_type_dec_refcursor -> { $record_type_dec_refcursor.st });
	public final PLSQLPrinter.record_type_dec_return record_type_dec() throws RecognitionException {
		PLSQLPrinter.record_type_dec_return retval = new PLSQLPrinter.record_type_dec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope record_type_dec_record95 =null;
		TreeRuleReturnScope record_type_dec_refcursor96 =null;

		try {
			// PLSQLPrinter.g:824:5: ( record_type_dec_record -> { $record_type_dec_record.st }| record_type_dec_refcursor -> { $record_type_dec_refcursor.st })
			int alt182=2;
			alt182 = dfa182.predict(input);
			switch (alt182) {
				case 1 :
					// PLSQLPrinter.g:824:10: record_type_dec_record
					{
					pushFollow(FOLLOW_record_type_dec_record_in_record_type_dec7840);
					record_type_dec_record95=record_type_dec_record();
					state._fsp--;

					// TEMPLATE REWRITE
					// 824:33: -> { $record_type_dec_record.st }
					{
						retval.st =  (record_type_dec_record95!=null?((StringTemplate)record_type_dec_record95.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:825:10: record_type_dec_refcursor
					{
					pushFollow(FOLLOW_record_type_dec_refcursor_in_record_type_dec7855);
					record_type_dec_refcursor96=record_type_dec_refcursor();
					state._fsp--;

					// TEMPLATE REWRITE
					// 825:36: -> { $record_type_dec_refcursor.st }
					{
						retval.st =  (record_type_dec_refcursor96!=null?((StringTemplate)record_type_dec_refcursor96.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_type_dec"


	public static class record_type_dec_record_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_type_dec_record"
	// PLSQLPrinter.g:828:1: record_type_dec_record : ^( RECORD_TYPE_DECLARE type_name ( ^( FIELDS (fields+= field_spec )* ) )? ) -> record_type_dec_record(name=$type_name.stfield_specs=$fields);
	public final PLSQLPrinter.record_type_dec_record_return record_type_dec_record() throws RecognitionException {
		PLSQLPrinter.record_type_dec_record_return retval = new PLSQLPrinter.record_type_dec_record_return();
		retval.start = input.LT(1);

		List<Object> list_fields=null;
		TreeRuleReturnScope type_name97 =null;
		RuleReturnScope fields = null;
		try {
			// PLSQLPrinter.g:829:5: ( ^( RECORD_TYPE_DECLARE type_name ( ^( FIELDS (fields+= field_spec )* ) )? ) -> record_type_dec_record(name=$type_name.stfield_specs=$fields))
			// PLSQLPrinter.g:829:10: ^( RECORD_TYPE_DECLARE type_name ( ^( FIELDS (fields+= field_spec )* ) )? )
			{
			match(input,RECORD_TYPE_DECLARE,FOLLOW_RECORD_TYPE_DECLARE_in_record_type_dec_record7884); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_record_type_dec_record7886);
			type_name97=type_name();
			state._fsp--;

			// PLSQLPrinter.g:829:42: ( ^( FIELDS (fields+= field_spec )* ) )?
			int alt184=2;
			int LA184_0 = input.LA(1);
			if ( (LA184_0==FIELDS) ) {
				alt184=1;
			}
			switch (alt184) {
				case 1 :
					// PLSQLPrinter.g:829:43: ^( FIELDS (fields+= field_spec )* )
					{
					match(input,FIELDS,FOLLOW_FIELDS_in_record_type_dec_record7890); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:829:58: (fields+= field_spec )*
						loop183:
						while (true) {
							int alt183=2;
							int LA183_0 = input.LA(1);
							if ( (LA183_0==FIELD_SPEC) ) {
								alt183=1;
							}

							switch (alt183) {
							case 1 :
								// PLSQLPrinter.g:829:58: fields+= field_spec
								{
								pushFollow(FOLLOW_field_spec_in_record_type_dec_record7894);
								fields=field_spec();
								state._fsp--;

								if (list_fields==null) list_fields=new ArrayList<Object>();
								list_fields.add(fields.getTemplate());
								}
								break;

							default :
								break loop183;
							}
						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 830:5: -> record_type_dec_record(name=$type_name.stfield_specs=$fields)
			{
				retval.st = templateLib.getInstanceOf("record_type_dec_record",new STAttrMap().put("name", (type_name97!=null?((StringTemplate)type_name97.getTemplate()):null)).put("field_specs", list_fields));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_type_dec_record"


	public static class record_type_dec_refcursor_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_type_dec_refcursor"
	// PLSQLPrinter.g:833:1: record_type_dec_refcursor : ^( RECORD_TYPE_DECLARE type_name REF_VK ( type_spec )? ) -> record_type_dec_refcursor(name=$type_name.sttype_spec=$type_spec.st);
	public final PLSQLPrinter.record_type_dec_refcursor_return record_type_dec_refcursor() throws RecognitionException {
		PLSQLPrinter.record_type_dec_refcursor_return retval = new PLSQLPrinter.record_type_dec_refcursor_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope type_name98 =null;
		TreeRuleReturnScope type_spec99 =null;

		try {
			// PLSQLPrinter.g:834:5: ( ^( RECORD_TYPE_DECLARE type_name REF_VK ( type_spec )? ) -> record_type_dec_refcursor(name=$type_name.sttype_spec=$type_spec.st))
			// PLSQLPrinter.g:834:10: ^( RECORD_TYPE_DECLARE type_name REF_VK ( type_spec )? )
			{
			match(input,RECORD_TYPE_DECLARE,FOLLOW_RECORD_TYPE_DECLARE_in_record_type_dec_refcursor7944); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_record_type_dec_refcursor7946);
			type_name98=type_name();
			state._fsp--;

			match(input,REF_VK,FOLLOW_REF_VK_in_record_type_dec_refcursor7948); 
			// PLSQLPrinter.g:834:49: ( type_spec )?
			int alt185=2;
			int LA185_0 = input.LA(1);
			if ( (LA185_0==CUSTOM_TYPE||LA185_0==INTERVAL_DATATYPE||LA185_0==NATIVE_DATATYPE) ) {
				alt185=1;
			}
			switch (alt185) {
				case 1 :
					// PLSQLPrinter.g:834:49: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_record_type_dec_refcursor7950);
					type_spec99=type_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 835:5: -> record_type_dec_refcursor(name=$type_name.sttype_spec=$type_spec.st)
			{
				retval.st = templateLib.getInstanceOf("record_type_dec_refcursor",new STAttrMap().put("name", (type_name98!=null?((StringTemplate)type_name98.getTemplate()):null)).put("type_spec", (type_spec99!=null?((StringTemplate)type_spec99.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_type_dec_refcursor"


	public static class field_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "field_spec"
	// PLSQLPrinter.g:838:1: field_spec : ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> field_spec(name=$column_name.sttype_spec=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st);
	public final PLSQLPrinter.field_spec_return field_spec() throws RecognitionException {
		PLSQLPrinter.field_spec_return retval = new PLSQLPrinter.field_spec_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL102=null;
		TreeRuleReturnScope column_name100 =null;
		TreeRuleReturnScope type_spec101 =null;
		TreeRuleReturnScope default_value_part103 =null;

		try {
			// PLSQLPrinter.g:839:5: ( ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> field_spec(name=$column_name.sttype_spec=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st))
			// PLSQLPrinter.g:839:10: ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? )
			{
			match(input,FIELD_SPEC,FOLLOW_FIELD_SPEC_in_field_spec7993); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_column_name_in_field_spec7995);
			column_name100=column_name();
			state._fsp--;

			// PLSQLPrinter.g:839:35: ( type_spec )?
			int alt186=2;
			int LA186_0 = input.LA(1);
			if ( (LA186_0==CUSTOM_TYPE||LA186_0==INTERVAL_DATATYPE||LA186_0==NATIVE_DATATYPE) ) {
				alt186=1;
			}
			switch (alt186) {
				case 1 :
					// PLSQLPrinter.g:839:35: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_field_spec7997);
					type_spec101=type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:839:46: ( SQL92_RESERVED_NULL )?
			int alt187=2;
			int LA187_0 = input.LA(1);
			if ( (LA187_0==SQL92_RESERVED_NULL) ) {
				alt187=1;
			}
			switch (alt187) {
				case 1 :
					// PLSQLPrinter.g:839:46: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL102=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_field_spec8000); 
					}
					break;

			}

			// PLSQLPrinter.g:839:67: ( default_value_part )?
			int alt188=2;
			int LA188_0 = input.LA(1);
			if ( (LA188_0==DEFAULT_VALUE) ) {
				alt188=1;
			}
			switch (alt188) {
				case 1 :
					// PLSQLPrinter.g:839:67: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_field_spec8003);
					default_value_part103=default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 840:5: -> field_spec(name=$column_name.sttype_spec=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st)
			{
				retval.st = templateLib.getInstanceOf("field_spec",new STAttrMap().put("name", (column_name100!=null?((StringTemplate)column_name100.getTemplate()):null)).put("type_spec", (type_spec101!=null?((StringTemplate)type_spec101.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL102 != null).put("default_value_part", (default_value_part103!=null?((StringTemplate)default_value_part103.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "field_spec"


	public static class record_var_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_var_dec"
	// PLSQLPrinter.g:845:1: record_var_dec : ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) ) -> template( \"not implemented: record_var_dec\";
	public final PLSQLPrinter.record_var_dec_return record_var_dec() throws RecognitionException {
		PLSQLPrinter.record_var_dec_return retval = new PLSQLPrinter.record_var_dec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:846:5: ( ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) ) -> template( \"not implemented: record_var_dec\")
			// PLSQLPrinter.g:846:10: ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) )
			{
			match(input,RECORD_VAR_DECLARE,FOLLOW_RECORD_VAR_DECLARE_in_record_var_dec8076); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_record_name_in_record_var_dec8078);
			record_name();
			state._fsp--;

			pushFollow(FOLLOW_type_name_in_record_var_dec8080);
			type_name();
			state._fsp--;

			// PLSQLPrinter.g:846:53: ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )
			int alt189=2;
			int LA189_0 = input.LA(1);
			if ( (LA189_0==PERCENT_ROWTYPE_VK) ) {
				alt189=1;
			}
			else if ( (LA189_0==PERCENT_TYPE_VK) ) {
				alt189=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 189, 0, input);
				throw nvae;
			}

			switch (alt189) {
				case 1 :
					// PLSQLPrinter.g:846:54: PERCENT_ROWTYPE_VK
					{
					match(input,PERCENT_ROWTYPE_VK,FOLLOW_PERCENT_ROWTYPE_VK_in_record_var_dec8083); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:846:73: PERCENT_TYPE_VK
					{
					match(input,PERCENT_TYPE_VK,FOLLOW_PERCENT_TYPE_VK_in_record_var_dec8085); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 847:5: -> template( \"not implemented: record_var_dec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: record_var_dec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_var_dec"


	public static class table_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_declaration"
	// PLSQLPrinter.g:852:1: table_declaration : ( table_type_dec -> { $table_type_dec.st }| table_var_dec -> { $table_var_dec.st });
	public final PLSQLPrinter.table_declaration_return table_declaration() throws RecognitionException {
		PLSQLPrinter.table_declaration_return retval = new PLSQLPrinter.table_declaration_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope table_type_dec104 =null;
		TreeRuleReturnScope table_var_dec105 =null;

		try {
			// PLSQLPrinter.g:853:5: ( table_type_dec -> { $table_type_dec.st }| table_var_dec -> { $table_var_dec.st })
			int alt190=2;
			int LA190_0 = input.LA(1);
			if ( (LA190_0==TABLE_TYPE_DECLARE) ) {
				alt190=1;
			}
			else if ( (LA190_0==TABLE_VAR_DECLARE) ) {
				alt190=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 190, 0, input);
				throw nvae;
			}

			switch (alt190) {
				case 1 :
					// PLSQLPrinter.g:853:10: table_type_dec
					{
					pushFollow(FOLLOW_table_type_dec_in_table_declaration8123);
					table_type_dec104=table_type_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 853:25: -> { $table_type_dec.st }
					{
						retval.st =  (table_type_dec104!=null?((StringTemplate)table_type_dec104.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:854:10: table_var_dec
					{
					pushFollow(FOLLOW_table_var_dec_in_table_declaration8138);
					table_var_dec105=table_var_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 854:24: -> { $table_var_dec.st }
					{
						retval.st =  (table_var_dec105!=null?((StringTemplate)table_var_dec105.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_declaration"


	public static class table_type_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_type_dec"
	// PLSQLPrinter.g:857:1: table_type_dec : ^( TABLE_TYPE_DECLARE type_name table_type_dec_impl ) -> table_type_dec(name=$type_name.stimpl=$table_type_dec_impl.st);
	public final PLSQLPrinter.table_type_dec_return table_type_dec() throws RecognitionException {
		PLSQLPrinter.table_type_dec_return retval = new PLSQLPrinter.table_type_dec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope type_name106 =null;
		TreeRuleReturnScope table_type_dec_impl107 =null;

		try {
			// PLSQLPrinter.g:858:5: ( ^( TABLE_TYPE_DECLARE type_name table_type_dec_impl ) -> table_type_dec(name=$type_name.stimpl=$table_type_dec_impl.st))
			// PLSQLPrinter.g:858:10: ^( TABLE_TYPE_DECLARE type_name table_type_dec_impl )
			{
			match(input,TABLE_TYPE_DECLARE,FOLLOW_TABLE_TYPE_DECLARE_in_table_type_dec8163); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_table_type_dec8165);
			type_name106=type_name();
			state._fsp--;

			pushFollow(FOLLOW_table_type_dec_impl_in_table_type_dec8167);
			table_type_dec_impl107=table_type_dec_impl();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 859:5: -> table_type_dec(name=$type_name.stimpl=$table_type_dec_impl.st)
			{
				retval.st = templateLib.getInstanceOf("table_type_dec",new STAttrMap().put("name", (type_name106!=null?((StringTemplate)type_name106.getTemplate()):null)).put("impl", (table_type_dec_impl107!=null?((StringTemplate)table_type_dec_impl107.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_type_dec"


	public static class table_type_dec_impl_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_type_dec_impl"
	// PLSQLPrinter.g:862:1: table_type_dec_impl : ( table_type_dec_table_of -> { $table_type_dec_table_of.st }| varray_type_def -> { $varray_type_def.st });
	public final PLSQLPrinter.table_type_dec_impl_return table_type_dec_impl() throws RecognitionException {
		PLSQLPrinter.table_type_dec_impl_return retval = new PLSQLPrinter.table_type_dec_impl_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope table_type_dec_table_of108 =null;
		TreeRuleReturnScope varray_type_def109 =null;

		try {
			// PLSQLPrinter.g:863:5: ( table_type_dec_table_of -> { $table_type_dec_table_of.st }| varray_type_def -> { $varray_type_def.st })
			int alt191=2;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_NULL:
				{
				int LA191_1 = input.LA(2);
				if ( (LA191_1==SQL92_RESERVED_TABLE) ) {
					alt191=1;
				}
				else if ( (LA191_1==VARR_ARRAY_DEF) ) {
					alt191=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 191, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_TABLE:
				{
				alt191=1;
				}
				break;
			case VARR_ARRAY_DEF:
				{
				alt191=2;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 191, 0, input);
				throw nvae;
			}
			switch (alt191) {
				case 1 :
					// PLSQLPrinter.g:863:11: table_type_dec_table_of
					{
					pushFollow(FOLLOW_table_type_dec_table_of_in_table_type_dec_impl8213);
					table_type_dec_table_of108=table_type_dec_table_of();
					state._fsp--;

					// TEMPLATE REWRITE
					// 863:35: -> { $table_type_dec_table_of.st }
					{
						retval.st =  (table_type_dec_table_of108!=null?((StringTemplate)table_type_dec_table_of108.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:864:11: varray_type_def
					{
					pushFollow(FOLLOW_varray_type_def_in_table_type_dec_impl8229);
					varray_type_def109=varray_type_def();
					state._fsp--;

					// TEMPLATE REWRITE
					// 864:27: -> { $varray_type_def.st }
					{
						retval.st =  (varray_type_def109!=null?((StringTemplate)varray_type_def109.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_type_dec_impl"


	public static class table_type_dec_table_of_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_type_dec_table_of"
	// PLSQLPrinter.g:867:1: table_type_dec_table_of : ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) -> table_type_dec_table_of(type_spec=$type_spec.sttable_indexed_by_part=$table_indexed_by_part.stis_not_null=$SQL92_RESERVED_NULL != null);
	public final PLSQLPrinter.table_type_dec_table_of_return table_type_dec_table_of() throws RecognitionException {
		PLSQLPrinter.table_type_dec_table_of_return retval = new PLSQLPrinter.table_type_dec_table_of_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL112=null;
		TreeRuleReturnScope type_spec110 =null;
		TreeRuleReturnScope table_indexed_by_part111 =null;

		try {
			// PLSQLPrinter.g:868:5: ( ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) -> table_type_dec_table_of(type_spec=$type_spec.sttable_indexed_by_part=$table_indexed_by_part.stis_not_null=$SQL92_RESERVED_NULL != null))
			// PLSQLPrinter.g:868:10: ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? )
			{
			// PLSQLPrinter.g:868:10: ( SQL92_RESERVED_NULL )?
			int alt192=2;
			int LA192_0 = input.LA(1);
			if ( (LA192_0==SQL92_RESERVED_NULL) ) {
				alt192=1;
			}
			switch (alt192) {
				case 1 :
					// PLSQLPrinter.g:868:10: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL112=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_table_type_dec_table_of8257); 
					}
					break;

			}

			match(input,SQL92_RESERVED_TABLE,FOLLOW_SQL92_RESERVED_TABLE_in_table_type_dec_table_of8261); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_table_type_dec_table_of8263);
			type_spec110=type_spec();
			state._fsp--;

			// PLSQLPrinter.g:868:64: ( table_indexed_by_part )?
			int alt193=2;
			int LA193_0 = input.LA(1);
			if ( (LA193_0==INDEXED_BY) ) {
				alt193=1;
			}
			switch (alt193) {
				case 1 :
					// PLSQLPrinter.g:868:64: table_indexed_by_part
					{
					pushFollow(FOLLOW_table_indexed_by_part_in_table_type_dec_table_of8265);
					table_indexed_by_part111=table_indexed_by_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 869:5: -> table_type_dec_table_of(type_spec=$type_spec.sttable_indexed_by_part=$table_indexed_by_part.stis_not_null=$SQL92_RESERVED_NULL != null)
			{
				retval.st = templateLib.getInstanceOf("table_type_dec_table_of",new STAttrMap().put("type_spec", (type_spec110!=null?((StringTemplate)type_spec110.getTemplate()):null)).put("table_indexed_by_part", (table_indexed_by_part111!=null?((StringTemplate)table_indexed_by_part111.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL112 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_type_dec_table_of"


	public static class table_indexed_by_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_indexed_by_part"
	// PLSQLPrinter.g:873:1: table_indexed_by_part : ^( INDEXED_BY type_spec ) -> table_indexed_by_part(type_spec=$type_spec.st);
	public final PLSQLPrinter.table_indexed_by_part_return table_indexed_by_part() throws RecognitionException {
		PLSQLPrinter.table_indexed_by_part_return retval = new PLSQLPrinter.table_indexed_by_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope type_spec113 =null;

		try {
			// PLSQLPrinter.g:874:5: ( ^( INDEXED_BY type_spec ) -> table_indexed_by_part(type_spec=$type_spec.st))
			// PLSQLPrinter.g:874:10: ^( INDEXED_BY type_spec )
			{
			match(input,INDEXED_BY,FOLLOW_INDEXED_BY_in_table_indexed_by_part8326); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_table_indexed_by_part8328);
			type_spec113=type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 875:5: -> table_indexed_by_part(type_spec=$type_spec.st)
			{
				retval.st = templateLib.getInstanceOf("table_indexed_by_part",new STAttrMap().put("type_spec", (type_spec113!=null?((StringTemplate)type_spec113.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_indexed_by_part"


	public static class varray_type_def_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "varray_type_def"
	// PLSQLPrinter.g:878:1: varray_type_def : ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec ) -> varray_type_def(limit_expression=$expression.stelement_type=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != null);
	public final PLSQLPrinter.varray_type_def_return varray_type_def() throws RecognitionException {
		PLSQLPrinter.varray_type_def_return retval = new PLSQLPrinter.varray_type_def_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL116=null;
		TreeRuleReturnScope expression114 =null;
		TreeRuleReturnScope type_spec115 =null;

		try {
			// PLSQLPrinter.g:879:5: ( ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec ) -> varray_type_def(limit_expression=$expression.stelement_type=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != null))
			// PLSQLPrinter.g:879:10: ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec )
			{
			// PLSQLPrinter.g:879:10: ( SQL92_RESERVED_NULL )?
			int alt194=2;
			int LA194_0 = input.LA(1);
			if ( (LA194_0==SQL92_RESERVED_NULL) ) {
				alt194=1;
			}
			switch (alt194) {
				case 1 :
					// PLSQLPrinter.g:879:10: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL116=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_varray_type_def8364); 
					}
					break;

			}

			match(input,VARR_ARRAY_DEF,FOLLOW_VARR_ARRAY_DEF_in_varray_type_def8368); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_varray_type_def8370);
			expression114=expression();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_varray_type_def8372);
			type_spec115=type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 880:5: -> varray_type_def(limit_expression=$expression.stelement_type=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != null)
			{
				retval.st = templateLib.getInstanceOf("varray_type_def",new STAttrMap().put("limit_expression", (expression114!=null?((StringTemplate)expression114.getTemplate()):null)).put("element_type", (type_spec115!=null?((StringTemplate)type_spec115.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL116 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "varray_type_def"


	public static class table_var_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_var_dec"
	// PLSQLPrinter.g:883:1: table_var_dec : ^( TABLE_VAR_DECLARE table_var_name type_spec ) -> template( \"not implemented: table_var_dec\";
	public final PLSQLPrinter.table_var_dec_return table_var_dec() throws RecognitionException {
		PLSQLPrinter.table_var_dec_return retval = new PLSQLPrinter.table_var_dec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:884:5: ( ^( TABLE_VAR_DECLARE table_var_name type_spec ) -> template( \"not implemented: table_var_dec\")
			// PLSQLPrinter.g:884:10: ^( TABLE_VAR_DECLARE table_var_name type_spec )
			{
			match(input,TABLE_VAR_DECLARE,FOLLOW_TABLE_VAR_DECLARE_in_table_var_dec8419); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_table_var_name_in_table_var_dec8421);
			table_var_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_table_var_dec8423);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 885:5: -> template( \"not implemented: table_var_dec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: table_var_dec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_var_dec"


	public static class seq_of_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "seq_of_statements"
	// PLSQLPrinter.g:892:1: seq_of_statements : ^( STATEMENTS (statements+= statement |statements+= labeled_statement )+ ) -> seq_of_statements(statements=$statements);
	public final PLSQLPrinter.seq_of_statements_return seq_of_statements() throws RecognitionException {
		PLSQLPrinter.seq_of_statements_return retval = new PLSQLPrinter.seq_of_statements_return();
		retval.start = input.LT(1);

		List<Object> list_statements=null;
		RuleReturnScope statements = null;
		try {
			// PLSQLPrinter.g:893:5: ( ^( STATEMENTS (statements+= statement |statements+= labeled_statement )+ ) -> seq_of_statements(statements=$statements))
			// PLSQLPrinter.g:893:11: ^( STATEMENTS (statements+= statement |statements+= labeled_statement )+ )
			{
			match(input,STATEMENTS,FOLLOW_STATEMENTS_in_seq_of_statements8464); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:893:24: (statements+= statement |statements+= labeled_statement )+
			int cnt195=0;
			loop195:
			while (true) {
				int alt195=3;
				int LA195_0 = input.LA(1);
				if ( (LA195_0==PLSQL_RESERVED_IF||LA195_0==PLSQL_RESERVED_LOCK||LA195_0==SQL92_RESERVED_DELETE||LA195_0==SQL92_RESERVED_FETCH||LA195_0==SQL92_RESERVED_GOTO||LA195_0==SQL92_RESERVED_INSERT||LA195_0==SQL92_RESERVED_NULL||LA195_0==SQL92_RESERVED_UPDATE||LA195_0==ASSIGN||LA195_0==BLOCK||LA195_0==BODY||LA195_0==CASCATED_ELEMENT||LA195_0==CLOSE_VK||LA195_0==COMMIT_VK||LA195_0==CONTINUE_VK||(LA195_0 >= EXECUTE_VK && LA195_0 <= EXIT_VK)||LA195_0==FORALL_VK||LA195_0==FOR_LOOP||LA195_0==LOOP_VK||LA195_0==MERGE_VK||LA195_0==OPEN_VK||LA195_0==PIPE_ROW||LA195_0==RAISE_VK||LA195_0==RETURN_VK||LA195_0==ROLLBACK_VK||LA195_0==SAVEPOINT_VK||LA195_0==SEARCHED_CASE||LA195_0==SELECT_STATEMENT||LA195_0==SET_CONSTRAINT||LA195_0==SET_TRANSACTION||LA195_0==SIMPLE_CASE||LA195_0==WHILE_LOOP) ) {
					alt195=1;
				}
				else if ( (LA195_0==LABEL_DECLARE) ) {
					alt195=2;
				}

				switch (alt195) {
				case 1 :
					// PLSQLPrinter.g:893:25: statements+= statement
					{
					pushFollow(FOLLOW_statement_in_seq_of_statements8469);
					statements=statement();
					state._fsp--;

					if (list_statements==null) list_statements=new ArrayList<Object>();
					list_statements.add(statements.getTemplate());
					}
					break;
				case 2 :
					// PLSQLPrinter.g:893:47: statements+= labeled_statement
					{
					pushFollow(FOLLOW_labeled_statement_in_seq_of_statements8473);
					statements=labeled_statement();
					state._fsp--;

					if (list_statements==null) list_statements=new ArrayList<Object>();
					list_statements.add(statements.getTemplate());
					}
					break;

				default :
					if ( cnt195 >= 1 ) break loop195;
					EarlyExitException eee = new EarlyExitException(195, input);
					throw eee;
				}
				cnt195++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 894:5: -> seq_of_statements(statements=$statements)
			{
				retval.st = templateLib.getInstanceOf("seq_of_statements",new STAttrMap().put("statements", list_statements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "seq_of_statements"


	public static class labeled_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "labeled_statement"
	// PLSQLPrinter.g:897:1: labeled_statement : ^( LABEL_DECLARE label_name statement ) -> labeled_statement(name=$label_name.ststatement=$statement.st);
	public final PLSQLPrinter.labeled_statement_return labeled_statement() throws RecognitionException {
		PLSQLPrinter.labeled_statement_return retval = new PLSQLPrinter.labeled_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name117 =null;
		TreeRuleReturnScope statement118 =null;

		try {
			// PLSQLPrinter.g:898:5: ( ^( LABEL_DECLARE label_name statement ) -> labeled_statement(name=$label_name.ststatement=$statement.st))
			// PLSQLPrinter.g:898:10: ^( LABEL_DECLARE label_name statement )
			{
			match(input,LABEL_DECLARE,FOLLOW_LABEL_DECLARE_in_labeled_statement8514); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_label_name_in_labeled_statement8516);
			label_name117=label_name();
			state._fsp--;

			pushFollow(FOLLOW_statement_in_labeled_statement8518);
			statement118=statement();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 898:48: -> labeled_statement(name=$label_name.ststatement=$statement.st)
			{
				retval.st = templateLib.getInstanceOf("labeled_statement",new STAttrMap().put("name", (label_name117!=null?((StringTemplate)label_name117.getTemplate()):null)).put("statement", (statement118!=null?((StringTemplate)statement118.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "labeled_statement"


	public static class statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "statement"
	// PLSQLPrinter.g:901:1: statement : ( assignment_statement -> { $assignment_statement.st }| continue_statement -> { $continue_statement.st }| exit_statement -> { $exit_statement.st }| goto_statement -> { $goto_statement.st }| if_statement -> { $if_statement.st }| loop_statement -> { $loop_statement.st }| forall_statement -> { $forall_statement.st }| null_statement -> { $null_statement.st }| raise_statement -> { $raise_statement.st }| return_statement -> { $return_statement.st }| pipe_row_statement -> { $pipe_row_statement.st }| case_statement -> { $case_statement.st }| sql_statement -> { $sql_statement.st }| general_element -> { $general_element.st }| body -> { $body.st }| block -> { $block.st });
	public final PLSQLPrinter.statement_return statement() throws RecognitionException {
		PLSQLPrinter.statement_return retval = new PLSQLPrinter.statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope assignment_statement119 =null;
		TreeRuleReturnScope continue_statement120 =null;
		TreeRuleReturnScope exit_statement121 =null;
		TreeRuleReturnScope goto_statement122 =null;
		TreeRuleReturnScope if_statement123 =null;
		TreeRuleReturnScope loop_statement124 =null;
		TreeRuleReturnScope forall_statement125 =null;
		TreeRuleReturnScope null_statement126 =null;
		TreeRuleReturnScope raise_statement127 =null;
		TreeRuleReturnScope return_statement128 =null;
		TreeRuleReturnScope pipe_row_statement129 =null;
		TreeRuleReturnScope case_statement130 =null;
		TreeRuleReturnScope sql_statement131 =null;
		TreeRuleReturnScope general_element132 =null;
		TreeRuleReturnScope body133 =null;
		TreeRuleReturnScope block134 =null;

		try {
			// PLSQLPrinter.g:902:5: ( assignment_statement -> { $assignment_statement.st }| continue_statement -> { $continue_statement.st }| exit_statement -> { $exit_statement.st }| goto_statement -> { $goto_statement.st }| if_statement -> { $if_statement.st }| loop_statement -> { $loop_statement.st }| forall_statement -> { $forall_statement.st }| null_statement -> { $null_statement.st }| raise_statement -> { $raise_statement.st }| return_statement -> { $return_statement.st }| pipe_row_statement -> { $pipe_row_statement.st }| case_statement -> { $case_statement.st }| sql_statement -> { $sql_statement.st }| general_element -> { $general_element.st }| body -> { $body.st }| block -> { $block.st })
			int alt196=16;
			switch ( input.LA(1) ) {
			case ASSIGN:
				{
				alt196=1;
				}
				break;
			case CONTINUE_VK:
				{
				alt196=2;
				}
				break;
			case EXIT_VK:
				{
				alt196=3;
				}
				break;
			case SQL92_RESERVED_GOTO:
				{
				alt196=4;
				}
				break;
			case PLSQL_RESERVED_IF:
				{
				alt196=5;
				}
				break;
			case FOR_LOOP:
			case LOOP_VK:
			case WHILE_LOOP:
				{
				alt196=6;
				}
				break;
			case FORALL_VK:
				{
				alt196=7;
				}
				break;
			case SQL92_RESERVED_NULL:
				{
				alt196=8;
				}
				break;
			case RAISE_VK:
				{
				alt196=9;
				}
				break;
			case RETURN_VK:
				{
				alt196=10;
				}
				break;
			case PIPE_ROW:
				{
				alt196=11;
				}
				break;
			case SEARCHED_CASE:
			case SIMPLE_CASE:
				{
				alt196=12;
				}
				break;
			case PLSQL_RESERVED_LOCK:
			case SQL92_RESERVED_DELETE:
			case SQL92_RESERVED_FETCH:
			case SQL92_RESERVED_INSERT:
			case SQL92_RESERVED_UPDATE:
			case CLOSE_VK:
			case COMMIT_VK:
			case EXECUTE_VK:
			case MERGE_VK:
			case OPEN_VK:
			case ROLLBACK_VK:
			case SAVEPOINT_VK:
			case SELECT_STATEMENT:
			case SET_CONSTRAINT:
			case SET_TRANSACTION:
				{
				alt196=13;
				}
				break;
			case CASCATED_ELEMENT:
				{
				alt196=14;
				}
				break;
			case BODY:
				{
				alt196=15;
				}
				break;
			case BLOCK:
				{
				alt196=16;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 196, 0, input);
				throw nvae;
			}
			switch (alt196) {
				case 1 :
					// PLSQLPrinter.g:902:10: assignment_statement
					{
					pushFollow(FOLLOW_assignment_statement_in_statement8553);
					assignment_statement119=assignment_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 902:31: -> { $assignment_statement.st }
					{
						retval.st =  (assignment_statement119!=null?((StringTemplate)assignment_statement119.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:903:10: continue_statement
					{
					pushFollow(FOLLOW_continue_statement_in_statement8568);
					continue_statement120=continue_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 903:29: -> { $continue_statement.st }
					{
						retval.st =  (continue_statement120!=null?((StringTemplate)continue_statement120.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:904:10: exit_statement
					{
					pushFollow(FOLLOW_exit_statement_in_statement8583);
					exit_statement121=exit_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 904:25: -> { $exit_statement.st }
					{
						retval.st =  (exit_statement121!=null?((StringTemplate)exit_statement121.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:905:10: goto_statement
					{
					pushFollow(FOLLOW_goto_statement_in_statement8598);
					goto_statement122=goto_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 905:25: -> { $goto_statement.st }
					{
						retval.st =  (goto_statement122!=null?((StringTemplate)goto_statement122.getTemplate()):null) ;
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:906:10: if_statement
					{
					pushFollow(FOLLOW_if_statement_in_statement8613);
					if_statement123=if_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 906:23: -> { $if_statement.st }
					{
						retval.st =  (if_statement123!=null?((StringTemplate)if_statement123.getTemplate()):null) ;
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:907:10: loop_statement
					{
					pushFollow(FOLLOW_loop_statement_in_statement8628);
					loop_statement124=loop_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 907:25: -> { $loop_statement.st }
					{
						retval.st =  (loop_statement124!=null?((StringTemplate)loop_statement124.getTemplate()):null) ;
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:908:10: forall_statement
					{
					pushFollow(FOLLOW_forall_statement_in_statement8643);
					forall_statement125=forall_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 908:27: -> { $forall_statement.st }
					{
						retval.st =  (forall_statement125!=null?((StringTemplate)forall_statement125.getTemplate()):null) ;
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:909:10: null_statement
					{
					pushFollow(FOLLOW_null_statement_in_statement8658);
					null_statement126=null_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 909:25: -> { $null_statement.st }
					{
						retval.st =  (null_statement126!=null?((StringTemplate)null_statement126.getTemplate()):null) ;
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:910:10: raise_statement
					{
					pushFollow(FOLLOW_raise_statement_in_statement8673);
					raise_statement127=raise_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 910:26: -> { $raise_statement.st }
					{
						retval.st =  (raise_statement127!=null?((StringTemplate)raise_statement127.getTemplate()):null) ;
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:911:10: return_statement
					{
					pushFollow(FOLLOW_return_statement_in_statement8688);
					return_statement128=return_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 911:27: -> { $return_statement.st }
					{
						retval.st =  (return_statement128!=null?((StringTemplate)return_statement128.getTemplate()):null) ;
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:912:10: pipe_row_statement
					{
					pushFollow(FOLLOW_pipe_row_statement_in_statement8703);
					pipe_row_statement129=pipe_row_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 912:29: -> { $pipe_row_statement.st }
					{
						retval.st =  (pipe_row_statement129!=null?((StringTemplate)pipe_row_statement129.getTemplate()):null) ;
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:913:10: case_statement
					{
					pushFollow(FOLLOW_case_statement_in_statement8718);
					case_statement130=case_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 913:25: -> { $case_statement.st }
					{
						retval.st =  (case_statement130!=null?((StringTemplate)case_statement130.getTemplate()):null) ;
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:914:10: sql_statement
					{
					pushFollow(FOLLOW_sql_statement_in_statement8733);
					sql_statement131=sql_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 914:24: -> { $sql_statement.st }
					{
						retval.st =  (sql_statement131!=null?((StringTemplate)sql_statement131.getTemplate()):null) ;
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:915:10: general_element
					{
					pushFollow(FOLLOW_general_element_in_statement8748);
					general_element132=general_element();
					state._fsp--;

					// TEMPLATE REWRITE
					// 915:26: -> { $general_element.st }
					{
						retval.st =  (general_element132!=null?((StringTemplate)general_element132.getTemplate()):null) ;
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:916:10: body
					{
					pushFollow(FOLLOW_body_in_statement8763);
					body133=body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 916:15: -> { $body.st }
					{
						retval.st =  (body133!=null?((StringTemplate)body133.getTemplate()):null) ;
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:917:10: block
					{
					pushFollow(FOLLOW_block_in_statement8778);
					block134=block();
					state._fsp--;

					// TEMPLATE REWRITE
					// 917:16: -> { $block.st }
					{
						retval.st =  (block134!=null?((StringTemplate)block134.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class assignment_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "assignment_statement"
	// PLSQLPrinter.g:920:1: assignment_statement : ^( ASSIGN general_element expression ) -> template( \"not implemented: assignment_statement\";
	public final PLSQLPrinter.assignment_statement_return assignment_statement() throws RecognitionException {
		PLSQLPrinter.assignment_statement_return retval = new PLSQLPrinter.assignment_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:921:5: ( ^( ASSIGN general_element expression ) -> template( \"not implemented: assignment_statement\")
			// PLSQLPrinter.g:921:11: ^( ASSIGN general_element expression )
			{
			match(input,ASSIGN,FOLLOW_ASSIGN_in_assignment_statement8804); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_element_in_assignment_statement8806);
			general_element();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_assignment_statement8808);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 922:5: -> template( \"not implemented: assignment_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: assignment_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "assignment_statement"


	public static class continue_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "continue_statement"
	// PLSQLPrinter.g:925:1: continue_statement : ^( CONTINUE_VK ( label_name )? ( general_when )? ) -> template( \"not implemented: continue_statement\";
	public final PLSQLPrinter.continue_statement_return continue_statement() throws RecognitionException {
		PLSQLPrinter.continue_statement_return retval = new PLSQLPrinter.continue_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:926:5: ( ^( CONTINUE_VK ( label_name )? ( general_when )? ) -> template( \"not implemented: continue_statement\")
			// PLSQLPrinter.g:926:10: ^( CONTINUE_VK ( label_name )? ( general_when )? )
			{
			match(input,CONTINUE_VK,FOLLOW_CONTINUE_VK_in_continue_statement8844); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:926:24: ( label_name )?
				int alt197=2;
				int LA197_0 = input.LA(1);
				if ( (LA197_0==LABEL_NAME) ) {
					alt197=1;
				}
				switch (alt197) {
					case 1 :
						// PLSQLPrinter.g:926:24: label_name
						{
						pushFollow(FOLLOW_label_name_in_continue_statement8846);
						label_name();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:926:36: ( general_when )?
				int alt198=2;
				int LA198_0 = input.LA(1);
				if ( (LA198_0==SQL92_RESERVED_WHEN) ) {
					alt198=1;
				}
				switch (alt198) {
					case 1 :
						// PLSQLPrinter.g:926:36: general_when
						{
						pushFollow(FOLLOW_general_when_in_continue_statement8849);
						general_when();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 927:5: -> template( \"not implemented: continue_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: continue_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "continue_statement"


	public static class general_when_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_when"
	// PLSQLPrinter.g:930:1: general_when : ^( SQL92_RESERVED_WHEN expression ) -> template( \"not implemented: general_when\";
	public final PLSQLPrinter.general_when_return general_when() throws RecognitionException {
		PLSQLPrinter.general_when_return retval = new PLSQLPrinter.general_when_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:931:5: ( ^( SQL92_RESERVED_WHEN expression ) -> template( \"not implemented: general_when\")
			// PLSQLPrinter.g:931:10: ^( SQL92_RESERVED_WHEN expression )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_general_when8886); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_general_when8888);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 932:5: -> template( \"not implemented: general_when\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: general_when");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_when"


	public static class exit_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exit_statement"
	// PLSQLPrinter.g:935:1: exit_statement : ^( EXIT_VK ( label_name )? ( general_when )? ) -> template( \"not implemented: exit_statement\";
	public final PLSQLPrinter.exit_statement_return exit_statement() throws RecognitionException {
		PLSQLPrinter.exit_statement_return retval = new PLSQLPrinter.exit_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:936:5: ( ^( EXIT_VK ( label_name )? ( general_when )? ) -> template( \"not implemented: exit_statement\")
			// PLSQLPrinter.g:936:10: ^( EXIT_VK ( label_name )? ( general_when )? )
			{
			match(input,EXIT_VK,FOLLOW_EXIT_VK_in_exit_statement8924); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:936:20: ( label_name )?
				int alt199=2;
				int LA199_0 = input.LA(1);
				if ( (LA199_0==LABEL_NAME) ) {
					alt199=1;
				}
				switch (alt199) {
					case 1 :
						// PLSQLPrinter.g:936:20: label_name
						{
						pushFollow(FOLLOW_label_name_in_exit_statement8926);
						label_name();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:936:32: ( general_when )?
				int alt200=2;
				int LA200_0 = input.LA(1);
				if ( (LA200_0==SQL92_RESERVED_WHEN) ) {
					alt200=1;
				}
				switch (alt200) {
					case 1 :
						// PLSQLPrinter.g:936:32: general_when
						{
						pushFollow(FOLLOW_general_when_in_exit_statement8929);
						general_when();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 937:5: -> template( \"not implemented: exit_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: exit_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exit_statement"


	public static class goto_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "goto_statement"
	// PLSQLPrinter.g:940:1: goto_statement : ^( SQL92_RESERVED_GOTO label_name ) -> template( \"not implemented: goto_statement\";
	public final PLSQLPrinter.goto_statement_return goto_statement() throws RecognitionException {
		PLSQLPrinter.goto_statement_return retval = new PLSQLPrinter.goto_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:941:5: ( ^( SQL92_RESERVED_GOTO label_name ) -> template( \"not implemented: goto_statement\")
			// PLSQLPrinter.g:941:10: ^( SQL92_RESERVED_GOTO label_name )
			{
			match(input,SQL92_RESERVED_GOTO,FOLLOW_SQL92_RESERVED_GOTO_in_goto_statement8966); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_label_name_in_goto_statement8968);
			label_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 942:5: -> template( \"not implemented: goto_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: goto_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "goto_statement"


	public static class if_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "if_statement"
	// PLSQLPrinter.g:945:1: if_statement : ^( PLSQL_RESERVED_IF expression seq_of_statements (elsif_parts+= elsif_part )* ( else_part )? ) -> if_statement(condition=$expression.stthen_seq_of_statements=$seq_of_statements.stelsif_parts=$elsif_partselse_part=$else_part.st);
	public final PLSQLPrinter.if_statement_return if_statement() throws RecognitionException {
		PLSQLPrinter.if_statement_return retval = new PLSQLPrinter.if_statement_return();
		retval.start = input.LT(1);

		List<Object> list_elsif_parts=null;
		TreeRuleReturnScope expression135 =null;
		TreeRuleReturnScope seq_of_statements136 =null;
		TreeRuleReturnScope else_part137 =null;
		RuleReturnScope elsif_parts = null;
		try {
			// PLSQLPrinter.g:946:5: ( ^( PLSQL_RESERVED_IF expression seq_of_statements (elsif_parts+= elsif_part )* ( else_part )? ) -> if_statement(condition=$expression.stthen_seq_of_statements=$seq_of_statements.stelsif_parts=$elsif_partselse_part=$else_part.st))
			// PLSQLPrinter.g:946:10: ^( PLSQL_RESERVED_IF expression seq_of_statements (elsif_parts+= elsif_part )* ( else_part )? )
			{
			match(input,PLSQL_RESERVED_IF,FOLLOW_PLSQL_RESERVED_IF_in_if_statement9004); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_if_statement9006);
			expression135=expression();
			state._fsp--;

			pushFollow(FOLLOW_seq_of_statements_in_if_statement9008);
			seq_of_statements136=seq_of_statements();
			state._fsp--;

			// PLSQLPrinter.g:946:70: (elsif_parts+= elsif_part )*
			loop201:
			while (true) {
				int alt201=2;
				int LA201_0 = input.LA(1);
				if ( (LA201_0==PLSQL_NON_RESERVED_ELSIF) ) {
					alt201=1;
				}

				switch (alt201) {
				case 1 :
					// PLSQLPrinter.g:946:70: elsif_parts+= elsif_part
					{
					pushFollow(FOLLOW_elsif_part_in_if_statement9012);
					elsif_parts=elsif_part();
					state._fsp--;

					if (list_elsif_parts==null) list_elsif_parts=new ArrayList<Object>();
					list_elsif_parts.add(elsif_parts.getTemplate());
					}
					break;

				default :
					break loop201;
				}
			}

			// PLSQLPrinter.g:946:84: ( else_part )?
			int alt202=2;
			int LA202_0 = input.LA(1);
			if ( (LA202_0==SQL92_RESERVED_ELSE) ) {
				alt202=1;
			}
			switch (alt202) {
				case 1 :
					// PLSQLPrinter.g:946:84: else_part
					{
					pushFollow(FOLLOW_else_part_in_if_statement9015);
					else_part137=else_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 947:5: -> if_statement(condition=$expression.stthen_seq_of_statements=$seq_of_statements.stelsif_parts=$elsif_partselse_part=$else_part.st)
			{
				retval.st = templateLib.getInstanceOf("if_statement",new STAttrMap().put("condition", (expression135!=null?((StringTemplate)expression135.getTemplate()):null)).put("then_seq_of_statements", (seq_of_statements136!=null?((StringTemplate)seq_of_statements136.getTemplate()):null)).put("elsif_parts", list_elsif_parts).put("else_part", (else_part137!=null?((StringTemplate)else_part137.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "if_statement"


	public static class elsif_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "elsif_part"
	// PLSQLPrinter.g:952:1: elsif_part : ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements ) -> elsif_part(condition=$expression.stseq_of_statements=$seq_of_statements.st);
	public final PLSQLPrinter.elsif_part_return elsif_part() throws RecognitionException {
		PLSQLPrinter.elsif_part_return retval = new PLSQLPrinter.elsif_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression138 =null;
		TreeRuleReturnScope seq_of_statements139 =null;

		try {
			// PLSQLPrinter.g:953:5: ( ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements ) -> elsif_part(condition=$expression.stseq_of_statements=$seq_of_statements.st))
			// PLSQLPrinter.g:953:10: ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements )
			{
			match(input,PLSQL_NON_RESERVED_ELSIF,FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_part9089); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_elsif_part9091);
			expression138=expression();
			state._fsp--;

			pushFollow(FOLLOW_seq_of_statements_in_elsif_part9093);
			seq_of_statements139=seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 954:5: -> elsif_part(condition=$expression.stseq_of_statements=$seq_of_statements.st)
			{
				retval.st = templateLib.getInstanceOf("elsif_part",new STAttrMap().put("condition", (expression138!=null?((StringTemplate)expression138.getTemplate()):null)).put("seq_of_statements", (seq_of_statements139!=null?((StringTemplate)seq_of_statements139.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "elsif_part"


	public static class else_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "else_part"
	// PLSQLPrinter.g:957:1: else_part : ^( SQL92_RESERVED_ELSE seq_of_statements ) -> else_part(seq_of_statements=$seq_of_statements.st);
	public final PLSQLPrinter.else_part_return else_part() throws RecognitionException {
		PLSQLPrinter.else_part_return retval = new PLSQLPrinter.else_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope seq_of_statements140 =null;

		try {
			// PLSQLPrinter.g:958:5: ( ^( SQL92_RESERVED_ELSE seq_of_statements ) -> else_part(seq_of_statements=$seq_of_statements.st))
			// PLSQLPrinter.g:958:10: ^( SQL92_RESERVED_ELSE seq_of_statements )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_else_part9135); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_seq_of_statements_in_else_part9137);
			seq_of_statements140=seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 959:5: -> else_part(seq_of_statements=$seq_of_statements.st)
			{
				retval.st = templateLib.getInstanceOf("else_part",new STAttrMap().put("seq_of_statements", (seq_of_statements140!=null?((StringTemplate)seq_of_statements140.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "else_part"


	public static class loop_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "loop_statement"
	// PLSQLPrinter.g:962:1: loop_statement : ( ^( WHILE_LOOP expression seq_of_statements ) -> template( \"not implemented: loop_statement[WHILE_LOOP]\"| ^( FOR_LOOP cursor_loop_param seq_of_statements ) -> for_loop(loopDefinition=$cursor_loop_param.ststatements=$seq_of_statements.st)| ^( LOOP_VK seq_of_statements ) -> template( \"not implemented: loop_statement[LOOP_VK]\");
	public final PLSQLPrinter.loop_statement_return loop_statement() throws RecognitionException {
		PLSQLPrinter.loop_statement_return retval = new PLSQLPrinter.loop_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope cursor_loop_param141 =null;
		TreeRuleReturnScope seq_of_statements142 =null;

		try {
			// PLSQLPrinter.g:963:5: ( ^( WHILE_LOOP expression seq_of_statements ) -> template( \"not implemented: loop_statement[WHILE_LOOP]\"| ^( FOR_LOOP cursor_loop_param seq_of_statements ) -> for_loop(loopDefinition=$cursor_loop_param.ststatements=$seq_of_statements.st)| ^( LOOP_VK seq_of_statements ) -> template( \"not implemented: loop_statement[LOOP_VK]\")
			int alt203=3;
			switch ( input.LA(1) ) {
			case WHILE_LOOP:
				{
				alt203=1;
				}
				break;
			case FOR_LOOP:
				{
				alt203=2;
				}
				break;
			case LOOP_VK:
				{
				alt203=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 203, 0, input);
				throw nvae;
			}
			switch (alt203) {
				case 1 :
					// PLSQLPrinter.g:963:10: ^( WHILE_LOOP expression seq_of_statements )
					{
					match(input,WHILE_LOOP,FOLLOW_WHILE_LOOP_in_loop_statement9174); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_loop_statement9176);
					expression();
					state._fsp--;

					pushFollow(FOLLOW_seq_of_statements_in_loop_statement9178);
					seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 964:5: -> template( \"not implemented: loop_statement[WHILE_LOOP]\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: loop_statement[WHILE_LOOP]");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:965:10: ^( FOR_LOOP cursor_loop_param seq_of_statements )
					{
					match(input,FOR_LOOP,FOLLOW_FOR_LOOP_in_loop_statement9205); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_cursor_loop_param_in_loop_statement9207);
					cursor_loop_param141=cursor_loop_param();
					state._fsp--;

					pushFollow(FOLLOW_seq_of_statements_in_loop_statement9209);
					seq_of_statements142=seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 966:5: -> for_loop(loopDefinition=$cursor_loop_param.ststatements=$seq_of_statements.st)
					{
						retval.st = templateLib.getInstanceOf("for_loop",new STAttrMap().put("loopDefinition", (cursor_loop_param141!=null?((StringTemplate)cursor_loop_param141.getTemplate()):null)).put("statements", (seq_of_statements142!=null?((StringTemplate)seq_of_statements142.getTemplate()):null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:967:10: ^( LOOP_VK seq_of_statements )
					{
					match(input,LOOP_VK,FOLLOW_LOOP_VK_in_loop_statement9242); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_seq_of_statements_in_loop_statement9244);
					seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 968:5: -> template( \"not implemented: loop_statement[LOOP_VK]\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: loop_statement[LOOP_VK]");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "loop_statement"


	public static class cursor_loop_param_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_loop_param"
	// PLSQLPrinter.g:973:1: cursor_loop_param : ( ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND b1= expression b2= expression ) ) -> loopDefinition_bounds(indexVar=$index_name.stisReverse=$REVERSE_VK != nulllowerBound=$b1.stupperBound=$b2.st)| ^( CURSOR_BASED_FOR record_name general_element ) -> template( \"not implemented: cursor_loop_param[CURSOR_BASED_FOR]\"| ^( SELECT_BASED_FOR record_name select_statement ) -> loopDefinition_select(indexVar=$record_name.stselect_statement=$select_statement.st));
	public final PLSQLPrinter.cursor_loop_param_return cursor_loop_param() throws RecognitionException {
		PLSQLPrinter.cursor_loop_param_return retval = new PLSQLPrinter.cursor_loop_param_return();
		retval.start = input.LT(1);

		CommonTree REVERSE_VK144=null;
		TreeRuleReturnScope b1 =null;
		TreeRuleReturnScope b2 =null;
		TreeRuleReturnScope index_name143 =null;
		TreeRuleReturnScope record_name145 =null;
		TreeRuleReturnScope select_statement146 =null;

		try {
			// PLSQLPrinter.g:974:5: ( ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND b1= expression b2= expression ) ) -> loopDefinition_bounds(indexVar=$index_name.stisReverse=$REVERSE_VK != nulllowerBound=$b1.stupperBound=$b2.st)| ^( CURSOR_BASED_FOR record_name general_element ) -> template( \"not implemented: cursor_loop_param[CURSOR_BASED_FOR]\"| ^( SELECT_BASED_FOR record_name select_statement ) -> loopDefinition_select(indexVar=$record_name.stselect_statement=$select_statement.st))
			int alt205=3;
			switch ( input.LA(1) ) {
			case INDEXED_FOR:
				{
				alt205=1;
				}
				break;
			case CURSOR_BASED_FOR:
				{
				alt205=2;
				}
				break;
			case SELECT_BASED_FOR:
				{
				alt205=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 205, 0, input);
				throw nvae;
			}
			switch (alt205) {
				case 1 :
					// PLSQLPrinter.g:974:10: ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND b1= expression b2= expression ) )
					{
					match(input,INDEXED_FOR,FOLLOW_INDEXED_FOR_in_cursor_loop_param9282); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_index_name_in_cursor_loop_param9284);
					index_name143=index_name();
					state._fsp--;

					// PLSQLPrinter.g:974:35: ( REVERSE_VK )?
					int alt204=2;
					int LA204_0 = input.LA(1);
					if ( (LA204_0==REVERSE_VK) ) {
						alt204=1;
					}
					switch (alt204) {
						case 1 :
							// PLSQLPrinter.g:974:35: REVERSE_VK
							{
							REVERSE_VK144=(CommonTree)match(input,REVERSE_VK,FOLLOW_REVERSE_VK_in_cursor_loop_param9286); 
							}
							break;

					}

					match(input,SIMPLE_BOUND,FOLLOW_SIMPLE_BOUND_in_cursor_loop_param9290); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_cursor_loop_param9294);
					b1=expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_cursor_loop_param9298);
					b2=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 975:5: -> loopDefinition_bounds(indexVar=$index_name.stisReverse=$REVERSE_VK != nulllowerBound=$b1.stupperBound=$b2.st)
					{
						retval.st = templateLib.getInstanceOf("loopDefinition_bounds",new STAttrMap().put("indexVar", (index_name143!=null?((StringTemplate)index_name143.getTemplate()):null)).put("isReverse", REVERSE_VK144 != null).put("lowerBound", (b1!=null?((StringTemplate)b1.getTemplate()):null)).put("upperBound", (b2!=null?((StringTemplate)b2.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:976:10: ^( CURSOR_BASED_FOR record_name general_element )
					{
					match(input,CURSOR_BASED_FOR,FOLLOW_CURSOR_BASED_FOR_in_cursor_loop_param9342); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_record_name_in_cursor_loop_param9344);
					record_name();
					state._fsp--;

					pushFollow(FOLLOW_general_element_in_cursor_loop_param9346);
					general_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 977:5: -> template( \"not implemented: cursor_loop_param[CURSOR_BASED_FOR]\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: cursor_loop_param[CURSOR_BASED_FOR]");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:978:10: ^( SELECT_BASED_FOR record_name select_statement )
					{
					match(input,SELECT_BASED_FOR,FOLLOW_SELECT_BASED_FOR_in_cursor_loop_param9373); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_record_name_in_cursor_loop_param9375);
					record_name145=record_name();
					state._fsp--;

					pushFollow(FOLLOW_select_statement_in_cursor_loop_param9377);
					select_statement146=select_statement();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 979:5: -> loopDefinition_select(indexVar=$record_name.stselect_statement=$select_statement.st)
					{
						retval.st = templateLib.getInstanceOf("loopDefinition_select",new STAttrMap().put("indexVar", (record_name145!=null?((StringTemplate)record_name145.getTemplate()):null)).put("select_statement", (select_statement146!=null?((StringTemplate)select_statement146.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_loop_param"


	public static class forall_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "forall_statement"
	// PLSQLPrinter.g:984:1: forall_statement : ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? ) -> template( \"not implemented: forall_statement\";
	public final PLSQLPrinter.forall_statement_return forall_statement() throws RecognitionException {
		PLSQLPrinter.forall_statement_return retval = new PLSQLPrinter.forall_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:985:5: ( ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? ) -> template( \"not implemented: forall_statement\")
			// PLSQLPrinter.g:985:10: ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? )
			{
			match(input,FORALL_VK,FOLLOW_FORALL_VK_in_forall_statement9421); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_index_name_in_forall_statement9423);
			index_name();
			state._fsp--;

			pushFollow(FOLLOW_bounds_clause_in_forall_statement9425);
			bounds_clause();
			state._fsp--;

			pushFollow(FOLLOW_sql_statement_in_forall_statement9427);
			sql_statement();
			state._fsp--;

			// PLSQLPrinter.g:985:61: ( EXCEPTIONS_VK )?
			int alt206=2;
			int LA206_0 = input.LA(1);
			if ( (LA206_0==EXCEPTIONS_VK) ) {
				alt206=1;
			}
			switch (alt206) {
				case 1 :
					// PLSQLPrinter.g:985:61: EXCEPTIONS_VK
					{
					match(input,EXCEPTIONS_VK,FOLLOW_EXCEPTIONS_VK_in_forall_statement9429); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 986:5: -> template( \"not implemented: forall_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: forall_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "forall_statement"


	public static class bounds_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "bounds_clause"
	// PLSQLPrinter.g:989:1: bounds_clause : ( ^( SIMPLE_BOUND expression expression ) -> template( \"not implemented: bounds_clause\"| ^( INDICES_BOUND collection_name ( between_bound )? ) -> template( \"not implemented: bounds_clause\"| ^( VALUES_BOUND index_name ) -> template( \"not implemented: bounds_clause\");
	public final PLSQLPrinter.bounds_clause_return bounds_clause() throws RecognitionException {
		PLSQLPrinter.bounds_clause_return retval = new PLSQLPrinter.bounds_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:990:5: ( ^( SIMPLE_BOUND expression expression ) -> template( \"not implemented: bounds_clause\"| ^( INDICES_BOUND collection_name ( between_bound )? ) -> template( \"not implemented: bounds_clause\"| ^( VALUES_BOUND index_name ) -> template( \"not implemented: bounds_clause\")
			int alt208=3;
			switch ( input.LA(1) ) {
			case SIMPLE_BOUND:
				{
				alt208=1;
				}
				break;
			case INDICES_BOUND:
				{
				alt208=2;
				}
				break;
			case VALUES_BOUND:
				{
				alt208=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 208, 0, input);
				throw nvae;
			}
			switch (alt208) {
				case 1 :
					// PLSQLPrinter.g:990:10: ^( SIMPLE_BOUND expression expression )
					{
					match(input,SIMPLE_BOUND,FOLLOW_SIMPLE_BOUND_in_bounds_clause9466); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_bounds_clause9468);
					expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_bounds_clause9470);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 991:5: -> template( \"not implemented: bounds_clause\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: bounds_clause");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:992:10: ^( INDICES_BOUND collection_name ( between_bound )? )
					{
					match(input,INDICES_BOUND,FOLLOW_INDICES_BOUND_in_bounds_clause9497); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_collection_name_in_bounds_clause9499);
					collection_name();
					state._fsp--;

					// PLSQLPrinter.g:992:42: ( between_bound )?
					int alt207=2;
					int LA207_0 = input.LA(1);
					if ( (LA207_0==SQL92_RESERVED_BETWEEN) ) {
						alt207=1;
					}
					switch (alt207) {
						case 1 :
							// PLSQLPrinter.g:992:42: between_bound
							{
							pushFollow(FOLLOW_between_bound_in_bounds_clause9501);
							between_bound();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 993:5: -> template( \"not implemented: bounds_clause\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: bounds_clause");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:994:10: ^( VALUES_BOUND index_name )
					{
					match(input,VALUES_BOUND,FOLLOW_VALUES_BOUND_in_bounds_clause9529); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_index_name_in_bounds_clause9531);
					index_name();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 995:5: -> template( \"not implemented: bounds_clause\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: bounds_clause");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bounds_clause"


	public static class between_bound_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "between_bound"
	// PLSQLPrinter.g:998:1: between_bound : ^( SQL92_RESERVED_BETWEEN expression expression ) -> template( \"not implemented: between_bound\";
	public final PLSQLPrinter.between_bound_return between_bound() throws RecognitionException {
		PLSQLPrinter.between_bound_return retval = new PLSQLPrinter.between_bound_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:999:5: ( ^( SQL92_RESERVED_BETWEEN expression expression ) -> template( \"not implemented: between_bound\")
			// PLSQLPrinter.g:999:10: ^( SQL92_RESERVED_BETWEEN expression expression )
			{
			match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_between_bound9568); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_between_bound9570);
			expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_between_bound9572);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1000:5: -> template( \"not implemented: between_bound\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: between_bound");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "between_bound"


	public static class null_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "null_statement"
	// PLSQLPrinter.g:1003:1: null_statement : SQL92_RESERVED_NULL -> template( \"not implemented: null_statement\";
	public final PLSQLPrinter.null_statement_return null_statement() throws RecognitionException {
		PLSQLPrinter.null_statement_return retval = new PLSQLPrinter.null_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1004:5: ( SQL92_RESERVED_NULL -> template( \"not implemented: null_statement\")
			// PLSQLPrinter.g:1004:10: SQL92_RESERVED_NULL
			{
			match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_null_statement9607); 
			// TEMPLATE REWRITE
			// 1005:5: -> template( \"not implemented: null_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: null_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "null_statement"


	public static class raise_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "raise_statement"
	// PLSQLPrinter.g:1008:1: raise_statement : ^( RAISE_VK ( exception_name )? ) -> template( \"not implemented: raise_statement\";
	public final PLSQLPrinter.raise_statement_return raise_statement() throws RecognitionException {
		PLSQLPrinter.raise_statement_return retval = new PLSQLPrinter.raise_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1009:5: ( ^( RAISE_VK ( exception_name )? ) -> template( \"not implemented: raise_statement\")
			// PLSQLPrinter.g:1009:10: ^( RAISE_VK ( exception_name )? )
			{
			match(input,RAISE_VK,FOLLOW_RAISE_VK_in_raise_statement9642); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1009:21: ( exception_name )?
				int alt209=2;
				int LA209_0 = input.LA(1);
				if ( (LA209_0==EXCEPTION_NAME) ) {
					alt209=1;
				}
				switch (alt209) {
					case 1 :
						// PLSQLPrinter.g:1009:21: exception_name
						{
						pushFollow(FOLLOW_exception_name_in_raise_statement9644);
						exception_name();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1010:5: -> template( \"not implemented: raise_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: raise_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "raise_statement"


	public static class return_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "return_statement"
	// PLSQLPrinter.g:1013:1: return_statement : ^( RETURN_VK ( expression )? ) -> return_statement(expression=$expression.st);
	public final PLSQLPrinter.return_statement_return return_statement() throws RecognitionException {
		PLSQLPrinter.return_statement_return retval = new PLSQLPrinter.return_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression147 =null;

		try {
			// PLSQLPrinter.g:1014:5: ( ^( RETURN_VK ( expression )? ) -> return_statement(expression=$expression.st))
			// PLSQLPrinter.g:1014:10: ^( RETURN_VK ( expression )? )
			{
			match(input,RETURN_VK,FOLLOW_RETURN_VK_in_return_statement9681); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1014:22: ( expression )?
				int alt210=2;
				int LA210_0 = input.LA(1);
				if ( (LA210_0==EXPR||LA210_0==LOGIC_EXPR) ) {
					alt210=1;
				}
				switch (alt210) {
					case 1 :
						// PLSQLPrinter.g:1014:22: expression
						{
						pushFollow(FOLLOW_expression_in_return_statement9683);
						expression147=expression();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1014:35: -> return_statement(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("return_statement",new STAttrMap().put("expression", (expression147!=null?((StringTemplate)expression147.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "return_statement"


	public static class body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "body"
	// PLSQLPrinter.g:1017:1: body : ^( BODY ( label_name )? seq_of_statements ( exception_clause )? ) -> body(bodyLabel=$label_name.ststatements=$seq_of_statements.stexception_clause=$exception_clause.st);
	public final PLSQLPrinter.body_return body() throws RecognitionException {
		PLSQLPrinter.body_return retval = new PLSQLPrinter.body_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name148 =null;
		TreeRuleReturnScope seq_of_statements149 =null;
		TreeRuleReturnScope exception_clause150 =null;

		try {
			// PLSQLPrinter.g:1018:5: ( ^( BODY ( label_name )? seq_of_statements ( exception_clause )? ) -> body(bodyLabel=$label_name.ststatements=$seq_of_statements.stexception_clause=$exception_clause.st))
			// PLSQLPrinter.g:1018:10: ^( BODY ( label_name )? seq_of_statements ( exception_clause )? )
			{
			match(input,BODY,FOLLOW_BODY_in_body9715); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1018:17: ( label_name )?
			int alt211=2;
			int LA211_0 = input.LA(1);
			if ( (LA211_0==LABEL_NAME) ) {
				alt211=1;
			}
			switch (alt211) {
				case 1 :
					// PLSQLPrinter.g:1018:17: label_name
					{
					pushFollow(FOLLOW_label_name_in_body9717);
					label_name148=label_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_seq_of_statements_in_body9720);
			seq_of_statements149=seq_of_statements();
			state._fsp--;

			// PLSQLPrinter.g:1018:47: ( exception_clause )?
			int alt212=2;
			int LA212_0 = input.LA(1);
			if ( (LA212_0==SQL92_RESERVED_EXCEPTION) ) {
				alt212=1;
			}
			switch (alt212) {
				case 1 :
					// PLSQLPrinter.g:1018:47: exception_clause
					{
					pushFollow(FOLLOW_exception_clause_in_body9722);
					exception_clause150=exception_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1019:5: -> body(bodyLabel=$label_name.ststatements=$seq_of_statements.stexception_clause=$exception_clause.st)
			{
				retval.st = templateLib.getInstanceOf("body",new STAttrMap().put("bodyLabel", (label_name148!=null?((StringTemplate)label_name148.getTemplate()):null)).put("statements", (seq_of_statements149!=null?((StringTemplate)seq_of_statements149.getTemplate()):null)).put("exception_clause", (exception_clause150!=null?((StringTemplate)exception_clause150.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "body"


	public static class exception_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_clause"
	// PLSQLPrinter.g:1024:1: exception_clause : ^( SQL92_RESERVED_EXCEPTION (handlers+= exception_handler )+ ) -> exception_clause(exception_handlers=$handlers);
	public final PLSQLPrinter.exception_clause_return exception_clause() throws RecognitionException {
		PLSQLPrinter.exception_clause_return retval = new PLSQLPrinter.exception_clause_return();
		retval.start = input.LT(1);

		List<Object> list_handlers=null;
		RuleReturnScope handlers = null;
		try {
			// PLSQLPrinter.g:1025:5: ( ^( SQL92_RESERVED_EXCEPTION (handlers+= exception_handler )+ ) -> exception_clause(exception_handlers=$handlers))
			// PLSQLPrinter.g:1025:10: ^( SQL92_RESERVED_EXCEPTION (handlers+= exception_handler )+ )
			{
			match(input,SQL92_RESERVED_EXCEPTION,FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_clause9773); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1025:45: (handlers+= exception_handler )+
			int cnt213=0;
			loop213:
			while (true) {
				int alt213=2;
				int LA213_0 = input.LA(1);
				if ( (LA213_0==SQL92_RESERVED_WHEN) ) {
					alt213=1;
				}

				switch (alt213) {
				case 1 :
					// PLSQLPrinter.g:1025:45: handlers+= exception_handler
					{
					pushFollow(FOLLOW_exception_handler_in_exception_clause9777);
					handlers=exception_handler();
					state._fsp--;

					if (list_handlers==null) list_handlers=new ArrayList<Object>();
					list_handlers.add(handlers.getTemplate());
					}
					break;

				default :
					if ( cnt213 >= 1 ) break loop213;
					EarlyExitException eee = new EarlyExitException(213, input);
					throw eee;
				}
				cnt213++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1026:5: -> exception_clause(exception_handlers=$handlers)
			{
				retval.st = templateLib.getInstanceOf("exception_clause",new STAttrMap().put("exception_handlers", list_handlers));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_clause"


	public static class exception_handler_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_handler"
	// PLSQLPrinter.g:1029:1: exception_handler : ^( SQL92_RESERVED_WHEN (names+= exception_name )+ seq_of_statements ) -> exception_handler(exception_names=$namesseq_of_statements=$seq_of_statements.st);
	public final PLSQLPrinter.exception_handler_return exception_handler() throws RecognitionException {
		PLSQLPrinter.exception_handler_return retval = new PLSQLPrinter.exception_handler_return();
		retval.start = input.LT(1);

		List<Object> list_names=null;
		TreeRuleReturnScope seq_of_statements151 =null;
		RuleReturnScope names = null;
		try {
			// PLSQLPrinter.g:1030:5: ( ^( SQL92_RESERVED_WHEN (names+= exception_name )+ seq_of_statements ) -> exception_handler(exception_names=$namesseq_of_statements=$seq_of_statements.st))
			// PLSQLPrinter.g:1030:10: ^( SQL92_RESERVED_WHEN (names+= exception_name )+ seq_of_statements )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_exception_handler9815); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1030:37: (names+= exception_name )+
			int cnt214=0;
			loop214:
			while (true) {
				int alt214=2;
				int LA214_0 = input.LA(1);
				if ( (LA214_0==EXCEPTION_NAME) ) {
					alt214=1;
				}

				switch (alt214) {
				case 1 :
					// PLSQLPrinter.g:1030:37: names+= exception_name
					{
					pushFollow(FOLLOW_exception_name_in_exception_handler9819);
					names=exception_name();
					state._fsp--;

					if (list_names==null) list_names=new ArrayList<Object>();
					list_names.add(names.getTemplate());
					}
					break;

				default :
					if ( cnt214 >= 1 ) break loop214;
					EarlyExitException eee = new EarlyExitException(214, input);
					throw eee;
				}
				cnt214++;
			}

			pushFollow(FOLLOW_seq_of_statements_in_exception_handler9822);
			seq_of_statements151=seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1031:5: -> exception_handler(exception_names=$namesseq_of_statements=$seq_of_statements.st)
			{
				retval.st = templateLib.getInstanceOf("exception_handler",new STAttrMap().put("exception_names", list_names).put("seq_of_statements", (seq_of_statements151!=null?((StringTemplate)seq_of_statements151.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_handler"


	public static class block_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "block"
	// PLSQLPrinter.g:1036:1: block : ^( BLOCK (specs+= declare_spec )* body ) -> block(declare_spec=$specsbody=$body.st);
	public final PLSQLPrinter.block_return block() throws RecognitionException {
		PLSQLPrinter.block_return retval = new PLSQLPrinter.block_return();
		retval.start = input.LT(1);

		List<Object> list_specs=null;
		TreeRuleReturnScope body152 =null;
		RuleReturnScope specs = null;
		try {
			// PLSQLPrinter.g:1037:5: ( ^( BLOCK (specs+= declare_spec )* body ) -> block(declare_spec=$specsbody=$body.st))
			// PLSQLPrinter.g:1037:10: ^( BLOCK (specs+= declare_spec )* body )
			{
			match(input,BLOCK,FOLLOW_BLOCK_in_block9866); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1037:23: (specs+= declare_spec )*
			loop215:
			while (true) {
				int alt215=2;
				int LA215_0 = input.LA(1);
				if ( (LA215_0==CREATE_FUNCTION||LA215_0==CREATE_PROCEDURE||(LA215_0 >= CREATE_TYPE_BODY && LA215_0 <= CREATE_TYPE_SPEC)||LA215_0==CURSOR_DECLARE||LA215_0==EXCEPTION_DECLARE||LA215_0==PRAGMA_DECLARE||(LA215_0 >= RECORD_TYPE_DECLARE && LA215_0 <= RECORD_VAR_DECLARE)||LA215_0==SUBTYPE_DECLARE||(LA215_0 >= TABLE_TYPE_DECLARE && LA215_0 <= TABLE_VAR_DECLARE)||LA215_0==VARIABLE_DECLARE) ) {
					alt215=1;
				}

				switch (alt215) {
				case 1 :
					// PLSQLPrinter.g:1037:23: specs+= declare_spec
					{
					pushFollow(FOLLOW_declare_spec_in_block9870);
					specs=declare_spec();
					state._fsp--;

					if (list_specs==null) list_specs=new ArrayList<Object>();
					list_specs.add(specs.getTemplate());
					}
					break;

				default :
					break loop215;
				}
			}

			pushFollow(FOLLOW_body_in_block9873);
			body152=body();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1038:5: -> block(declare_spec=$specsbody=$body.st)
			{
				retval.st = templateLib.getInstanceOf("block",new STAttrMap().put("declare_spec", list_specs).put("body", (body152!=null?((StringTemplate)body152.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "block"


	public static class sql_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sql_statement"
	// PLSQLPrinter.g:1045:1: sql_statement : ( execute_immediate -> { $execute_immediate.st }| data_manipulation_language_statements -> { $data_manipulation_language_statements.st }| cursor_manipulation_statements -> { $cursor_manipulation_statements.st }| transaction_control_statements -> { $transaction_control_statements.st });
	public final PLSQLPrinter.sql_statement_return sql_statement() throws RecognitionException {
		PLSQLPrinter.sql_statement_return retval = new PLSQLPrinter.sql_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope execute_immediate153 =null;
		TreeRuleReturnScope data_manipulation_language_statements154 =null;
		TreeRuleReturnScope cursor_manipulation_statements155 =null;
		TreeRuleReturnScope transaction_control_statements156 =null;

		try {
			// PLSQLPrinter.g:1046:5: ( execute_immediate -> { $execute_immediate.st }| data_manipulation_language_statements -> { $data_manipulation_language_statements.st }| cursor_manipulation_statements -> { $cursor_manipulation_statements.st }| transaction_control_statements -> { $transaction_control_statements.st })
			int alt216=4;
			switch ( input.LA(1) ) {
			case EXECUTE_VK:
				{
				alt216=1;
				}
				break;
			case PLSQL_RESERVED_LOCK:
			case SQL92_RESERVED_DELETE:
			case SQL92_RESERVED_INSERT:
			case SQL92_RESERVED_UPDATE:
			case MERGE_VK:
			case SELECT_STATEMENT:
				{
				alt216=2;
				}
				break;
			case SQL92_RESERVED_FETCH:
			case CLOSE_VK:
			case OPEN_VK:
				{
				alt216=3;
				}
				break;
			case COMMIT_VK:
			case ROLLBACK_VK:
			case SAVEPOINT_VK:
			case SET_CONSTRAINT:
			case SET_TRANSACTION:
				{
				alt216=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 216, 0, input);
				throw nvae;
			}
			switch (alt216) {
				case 1 :
					// PLSQLPrinter.g:1046:10: execute_immediate
					{
					pushFollow(FOLLOW_execute_immediate_in_sql_statement9918);
					execute_immediate153=execute_immediate();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1046:28: -> { $execute_immediate.st }
					{
						retval.st =  (execute_immediate153!=null?((StringTemplate)execute_immediate153.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1047:10: data_manipulation_language_statements
					{
					pushFollow(FOLLOW_data_manipulation_language_statements_in_sql_statement9933);
					data_manipulation_language_statements154=data_manipulation_language_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1047:48: -> { $data_manipulation_language_statements.st }
					{
						retval.st =  (data_manipulation_language_statements154!=null?((StringTemplate)data_manipulation_language_statements154.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1048:10: cursor_manipulation_statements
					{
					pushFollow(FOLLOW_cursor_manipulation_statements_in_sql_statement9948);
					cursor_manipulation_statements155=cursor_manipulation_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1048:41: -> { $cursor_manipulation_statements.st }
					{
						retval.st =  (cursor_manipulation_statements155!=null?((StringTemplate)cursor_manipulation_statements155.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1049:10: transaction_control_statements
					{
					pushFollow(FOLLOW_transaction_control_statements_in_sql_statement9963);
					transaction_control_statements156=transaction_control_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1049:41: -> { $transaction_control_statements.st }
					{
						retval.st =  (transaction_control_statements156!=null?((StringTemplate)transaction_control_statements156.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sql_statement"


	public static class execute_immediate_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "execute_immediate"
	// PLSQLPrinter.g:1052:1: execute_immediate : ^( EXECUTE_VK expression ( into_clause ( using_clause )? | using_clause ( dynamic_returning_clause )? | dynamic_returning_clause )? ) -> template( \"not implemented: execute_immediate\";
	public final PLSQLPrinter.execute_immediate_return execute_immediate() throws RecognitionException {
		PLSQLPrinter.execute_immediate_return retval = new PLSQLPrinter.execute_immediate_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1053:5: ( ^( EXECUTE_VK expression ( into_clause ( using_clause )? | using_clause ( dynamic_returning_clause )? | dynamic_returning_clause )? ) -> template( \"not implemented: execute_immediate\")
			// PLSQLPrinter.g:1053:10: ^( EXECUTE_VK expression ( into_clause ( using_clause )? | using_clause ( dynamic_returning_clause )? | dynamic_returning_clause )? )
			{
			match(input,EXECUTE_VK,FOLLOW_EXECUTE_VK_in_execute_immediate9988); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_execute_immediate9990);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1054:11: ( into_clause ( using_clause )? | using_clause ( dynamic_returning_clause )? | dynamic_returning_clause )?
			int alt219=4;
			switch ( input.LA(1) ) {
				case SQL92_RESERVED_INTO:
				case BULK_VK:
					{
					alt219=1;
					}
					break;
				case PLSQL_NON_RESERVED_USING:
					{
					alt219=2;
					}
					break;
				case DYNAMIC_RETURN:
					{
					alt219=3;
					}
					break;
			}
			switch (alt219) {
				case 1 :
					// PLSQLPrinter.g:1054:16: into_clause ( using_clause )?
					{
					pushFollow(FOLLOW_into_clause_in_execute_immediate10007);
					into_clause();
					state._fsp--;

					// PLSQLPrinter.g:1054:28: ( using_clause )?
					int alt217=2;
					int LA217_0 = input.LA(1);
					if ( (LA217_0==PLSQL_NON_RESERVED_USING) ) {
						alt217=1;
					}
					switch (alt217) {
						case 1 :
							// PLSQLPrinter.g:1054:28: using_clause
							{
							pushFollow(FOLLOW_using_clause_in_execute_immediate10009);
							using_clause();
							state._fsp--;

							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1055:16: using_clause ( dynamic_returning_clause )?
					{
					pushFollow(FOLLOW_using_clause_in_execute_immediate10027);
					using_clause();
					state._fsp--;

					// PLSQLPrinter.g:1055:29: ( dynamic_returning_clause )?
					int alt218=2;
					int LA218_0 = input.LA(1);
					if ( (LA218_0==DYNAMIC_RETURN) ) {
						alt218=1;
					}
					switch (alt218) {
						case 1 :
							// PLSQLPrinter.g:1055:29: dynamic_returning_clause
							{
							pushFollow(FOLLOW_dynamic_returning_clause_in_execute_immediate10029);
							dynamic_returning_clause();
							state._fsp--;

							}
							break;

					}

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1056:16: dynamic_returning_clause
					{
					pushFollow(FOLLOW_dynamic_returning_clause_in_execute_immediate10047);
					dynamic_returning_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1059:5: -> template( \"not implemented: execute_immediate\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: execute_immediate");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "execute_immediate"


	public static class dynamic_returning_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dynamic_returning_clause"
	// PLSQLPrinter.g:1063:1: dynamic_returning_clause : ^( DYNAMIC_RETURN into_clause ) -> template( \"not implemented: dynamic_returning_clause\";
	public final PLSQLPrinter.dynamic_returning_clause_return dynamic_returning_clause() throws RecognitionException {
		PLSQLPrinter.dynamic_returning_clause_return retval = new PLSQLPrinter.dynamic_returning_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1064:5: ( ^( DYNAMIC_RETURN into_clause ) -> template( \"not implemented: dynamic_returning_clause\")
			// PLSQLPrinter.g:1064:10: ^( DYNAMIC_RETURN into_clause )
			{
			match(input,DYNAMIC_RETURN,FOLLOW_DYNAMIC_RETURN_in_dynamic_returning_clause10106); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_into_clause_in_dynamic_returning_clause10108);
			into_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1065:5: -> template( \"not implemented: dynamic_returning_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dynamic_returning_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dynamic_returning_clause"


	public static class data_manipulation_language_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "data_manipulation_language_statements"
	// PLSQLPrinter.g:1072:1: data_manipulation_language_statements : ( merge_statement -> { $merge_statement.st }| lock_table_statement -> { $lock_table_statement.st }| select_statement -> { $select_statement.st }| update_statement -> { $update_statement.st }| delete_statement -> { $delete_statement.st }| insert_statement -> { $insert_statement.st });
	public final PLSQLPrinter.data_manipulation_language_statements_return data_manipulation_language_statements() throws RecognitionException {
		PLSQLPrinter.data_manipulation_language_statements_return retval = new PLSQLPrinter.data_manipulation_language_statements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope merge_statement157 =null;
		TreeRuleReturnScope lock_table_statement158 =null;
		TreeRuleReturnScope select_statement159 =null;
		TreeRuleReturnScope update_statement160 =null;
		TreeRuleReturnScope delete_statement161 =null;
		TreeRuleReturnScope insert_statement162 =null;

		try {
			// PLSQLPrinter.g:1073:5: ( merge_statement -> { $merge_statement.st }| lock_table_statement -> { $lock_table_statement.st }| select_statement -> { $select_statement.st }| update_statement -> { $update_statement.st }| delete_statement -> { $delete_statement.st }| insert_statement -> { $insert_statement.st })
			int alt220=6;
			switch ( input.LA(1) ) {
			case MERGE_VK:
				{
				alt220=1;
				}
				break;
			case PLSQL_RESERVED_LOCK:
				{
				alt220=2;
				}
				break;
			case SELECT_STATEMENT:
				{
				alt220=3;
				}
				break;
			case SQL92_RESERVED_UPDATE:
				{
				alt220=4;
				}
				break;
			case SQL92_RESERVED_DELETE:
				{
				alt220=5;
				}
				break;
			case SQL92_RESERVED_INSERT:
				{
				alt220=6;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 220, 0, input);
				throw nvae;
			}
			switch (alt220) {
				case 1 :
					// PLSQLPrinter.g:1073:10: merge_statement
					{
					pushFollow(FOLLOW_merge_statement_in_data_manipulation_language_statements10147);
					merge_statement157=merge_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1073:26: -> { $merge_statement.st }
					{
						retval.st =  (merge_statement157!=null?((StringTemplate)merge_statement157.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1074:10: lock_table_statement
					{
					pushFollow(FOLLOW_lock_table_statement_in_data_manipulation_language_statements10162);
					lock_table_statement158=lock_table_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1074:31: -> { $lock_table_statement.st }
					{
						retval.st =  (lock_table_statement158!=null?((StringTemplate)lock_table_statement158.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1075:10: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_data_manipulation_language_statements10177);
					select_statement159=select_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1075:27: -> { $select_statement.st }
					{
						retval.st =  (select_statement159!=null?((StringTemplate)select_statement159.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1076:10: update_statement
					{
					pushFollow(FOLLOW_update_statement_in_data_manipulation_language_statements10192);
					update_statement160=update_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1076:27: -> { $update_statement.st }
					{
						retval.st =  (update_statement160!=null?((StringTemplate)update_statement160.getTemplate()):null) ;
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1077:10: delete_statement
					{
					pushFollow(FOLLOW_delete_statement_in_data_manipulation_language_statements10207);
					delete_statement161=delete_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1077:27: -> { $delete_statement.st }
					{
						retval.st =  (delete_statement161!=null?((StringTemplate)delete_statement161.getTemplate()):null) ;
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:1078:10: insert_statement
					{
					pushFollow(FOLLOW_insert_statement_in_data_manipulation_language_statements10222);
					insert_statement162=insert_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1078:27: -> { $insert_statement.st }
					{
						retval.st =  (insert_statement162!=null?((StringTemplate)insert_statement162.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "data_manipulation_language_statements"


	public static class select_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "select_statement"
	// PLSQLPrinter.g:1081:1: select_statement : ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( order_by_clause )? ( for_update_clause )? ) -> select_statement(query_partitioning_clause=$subquery_factoring_clause.stsubquery=$subquery.storder_by_clause=$order_by_clause.stfor_update_clause=$for_update_clause.st);
	public final PLSQLPrinter.select_statement_return select_statement() throws RecognitionException {
		PLSQLPrinter.select_statement_return retval = new PLSQLPrinter.select_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope subquery_factoring_clause163 =null;
		TreeRuleReturnScope subquery164 =null;
		TreeRuleReturnScope order_by_clause165 =null;
		TreeRuleReturnScope for_update_clause166 =null;

		try {
			// PLSQLPrinter.g:1082:5: ( ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( order_by_clause )? ( for_update_clause )? ) -> select_statement(query_partitioning_clause=$subquery_factoring_clause.stsubquery=$subquery.storder_by_clause=$order_by_clause.stfor_update_clause=$for_update_clause.st))
			// PLSQLPrinter.g:1082:10: ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( order_by_clause )? ( for_update_clause )? )
			{
			match(input,SELECT_STATEMENT,FOLLOW_SELECT_STATEMENT_in_select_statement10247); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1082:29: ( subquery_factoring_clause )?
			int alt221=2;
			int LA221_0 = input.LA(1);
			if ( (LA221_0==SQL92_RESERVED_WITH) ) {
				alt221=1;
			}
			switch (alt221) {
				case 1 :
					// PLSQLPrinter.g:1082:29: subquery_factoring_clause
					{
					pushFollow(FOLLOW_subquery_factoring_clause_in_select_statement10249);
					subquery_factoring_clause163=subquery_factoring_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_subquery_in_select_statement10252);
			subquery164=subquery();
			state._fsp--;

			// PLSQLPrinter.g:1082:65: ( order_by_clause )?
			int alt222=2;
			int LA222_0 = input.LA(1);
			if ( (LA222_0==SQL92_RESERVED_ORDER) ) {
				alt222=1;
			}
			switch (alt222) {
				case 1 :
					// PLSQLPrinter.g:1082:65: order_by_clause
					{
					pushFollow(FOLLOW_order_by_clause_in_select_statement10254);
					order_by_clause165=order_by_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1082:82: ( for_update_clause )?
			int alt223=2;
			int LA223_0 = input.LA(1);
			if ( (LA223_0==SQL92_RESERVED_FOR) ) {
				alt223=1;
			}
			switch (alt223) {
				case 1 :
					// PLSQLPrinter.g:1082:82: for_update_clause
					{
					pushFollow(FOLLOW_for_update_clause_in_select_statement10257);
					for_update_clause166=for_update_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1083:5: -> select_statement(query_partitioning_clause=$subquery_factoring_clause.stsubquery=$subquery.storder_by_clause=$order_by_clause.stfor_update_clause=$for_update_clause.st)
			{
				retval.st = templateLib.getInstanceOf("select_statement",new STAttrMap().put("query_partitioning_clause", (subquery_factoring_clause163!=null?((StringTemplate)subquery_factoring_clause163.getTemplate()):null)).put("subquery", (subquery164!=null?((StringTemplate)subquery164.getTemplate()):null)).put("order_by_clause", (order_by_clause165!=null?((StringTemplate)order_by_clause165.getTemplate()):null)).put("for_update_clause", (for_update_clause166!=null?((StringTemplate)for_update_clause166.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "select_statement"


	public static class subquery_factoring_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_factoring_clause"
	// PLSQLPrinter.g:1091:1: subquery_factoring_clause : ^( SQL92_RESERVED_WITH ( factoring_element )+ ) -> template( \"not implemented: subquery_factoring_clause\";
	public final PLSQLPrinter.subquery_factoring_clause_return subquery_factoring_clause() throws RecognitionException {
		PLSQLPrinter.subquery_factoring_clause_return retval = new PLSQLPrinter.subquery_factoring_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1092:5: ( ^( SQL92_RESERVED_WITH ( factoring_element )+ ) -> template( \"not implemented: subquery_factoring_clause\")
			// PLSQLPrinter.g:1092:10: ^( SQL92_RESERVED_WITH ( factoring_element )+ )
			{
			match(input,SQL92_RESERVED_WITH,FOLLOW_SQL92_RESERVED_WITH_in_subquery_factoring_clause10360); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1092:32: ( factoring_element )+
			int cnt224=0;
			loop224:
			while (true) {
				int alt224=2;
				int LA224_0 = input.LA(1);
				if ( (LA224_0==FACTORING) ) {
					alt224=1;
				}

				switch (alt224) {
				case 1 :
					// PLSQLPrinter.g:1092:32: factoring_element
					{
					pushFollow(FOLLOW_factoring_element_in_subquery_factoring_clause10362);
					factoring_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt224 >= 1 ) break loop224;
					EarlyExitException eee = new EarlyExitException(224, input);
					throw eee;
				}
				cnt224++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1093:5: -> template( \"not implemented: subquery_factoring_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: subquery_factoring_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_factoring_clause"


	public static class factoring_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "factoring_element"
	// PLSQLPrinter.g:1096:1: factoring_element : ^( FACTORING query_name subquery ) -> template( \"not implemented: factoring_element\";
	public final PLSQLPrinter.factoring_element_return factoring_element() throws RecognitionException {
		PLSQLPrinter.factoring_element_return retval = new PLSQLPrinter.factoring_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1097:5: ( ^( FACTORING query_name subquery ) -> template( \"not implemented: factoring_element\")
			// PLSQLPrinter.g:1097:10: ^( FACTORING query_name subquery )
			{
			match(input,FACTORING,FOLLOW_FACTORING_in_factoring_element10399); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_query_name_in_factoring_element10401);
			query_name();
			state._fsp--;

			pushFollow(FOLLOW_subquery_in_factoring_element10403);
			subquery();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1098:5: -> template( \"not implemented: factoring_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: factoring_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factoring_element"


	public static class subquery_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery"
	// PLSQLPrinter.g:1101:1: subquery : ^( SUBQUERY subquery_basic_elements (parts+= subquery_operation_part )* ) -> subquery(subquery_basic_elements=$subquery_basic_elements.stsubquery_operation_parts=$parts);
	public final PLSQLPrinter.subquery_return subquery() throws RecognitionException {
		PLSQLPrinter.subquery_return retval = new PLSQLPrinter.subquery_return();
		retval.start = input.LT(1);

		List<Object> list_parts=null;
		TreeRuleReturnScope subquery_basic_elements167 =null;
		RuleReturnScope parts = null;
		try {
			// PLSQLPrinter.g:1102:5: ( ^( SUBQUERY subquery_basic_elements (parts+= subquery_operation_part )* ) -> subquery(subquery_basic_elements=$subquery_basic_elements.stsubquery_operation_parts=$parts))
			// PLSQLPrinter.g:1102:10: ^( SUBQUERY subquery_basic_elements (parts+= subquery_operation_part )* )
			{
			match(input,SUBQUERY,FOLLOW_SUBQUERY_in_subquery10439); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_subquery_basic_elements_in_subquery10441);
			subquery_basic_elements167=subquery_basic_elements();
			state._fsp--;

			// PLSQLPrinter.g:1102:50: (parts+= subquery_operation_part )*
			loop225:
			while (true) {
				int alt225=2;
				int LA225_0 = input.LA(1);
				if ( (LA225_0==PLSQL_RESERVED_MINUS||LA225_0==SQL92_RESERVED_INTERSECT||LA225_0==SQL92_RESERVED_UNION) ) {
					alt225=1;
				}

				switch (alt225) {
				case 1 :
					// PLSQLPrinter.g:1102:50: parts+= subquery_operation_part
					{
					pushFollow(FOLLOW_subquery_operation_part_in_subquery10445);
					parts=subquery_operation_part();
					state._fsp--;

					if (list_parts==null) list_parts=new ArrayList<Object>();
					list_parts.add(parts.getTemplate());
					}
					break;

				default :
					break loop225;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1103:5: -> subquery(subquery_basic_elements=$subquery_basic_elements.stsubquery_operation_parts=$parts)
			{
				retval.st = templateLib.getInstanceOf("subquery",new STAttrMap().put("subquery_basic_elements", (subquery_basic_elements167!=null?((StringTemplate)subquery_basic_elements167.getTemplate()):null)).put("subquery_operation_parts", list_parts));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery"


	public static class subquery_operation_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_operation_part"
	// PLSQLPrinter.g:1106:1: subquery_operation_part : ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements ) -> subquery_operation_part(operator=opis_all=$SQL92_RESERVED_ALL != nullsubquery_basic_elements=$subquery_basic_elements.st);
	public final PLSQLPrinter.subquery_operation_part_return subquery_operation_part() throws RecognitionException {
		PLSQLPrinter.subquery_operation_part_return retval = new PLSQLPrinter.subquery_operation_part_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_ALL168=null;
		TreeRuleReturnScope subquery_basic_elements169 =null;

		 String op = null; 
		try {
			// PLSQLPrinter.g:1108:5: ( ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements ) -> subquery_operation_part(operator=opis_all=$SQL92_RESERVED_ALL != nullsubquery_basic_elements=$subquery_basic_elements.st))
			// PLSQLPrinter.g:1108:10: ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements )
			{
			// PLSQLPrinter.g:1109:13: ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS )
			int alt226=3;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_UNION:
				{
				alt226=1;
				}
				break;
			case SQL92_RESERVED_INTERSECT:
				{
				alt226=2;
				}
				break;
			case PLSQL_RESERVED_MINUS:
				{
				alt226=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 226, 0, input);
				throw nvae;
			}
			switch (alt226) {
				case 1 :
					// PLSQLPrinter.g:1110:15: SQL92_RESERVED_UNION
					{
					match(input,SQL92_RESERVED_UNION,FOLLOW_SQL92_RESERVED_UNION_in_subquery_operation_part10522); 
					 op = "union"; 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1111:16: SQL92_RESERVED_INTERSECT
					{
					match(input,SQL92_RESERVED_INTERSECT,FOLLOW_SQL92_RESERVED_INTERSECT_in_subquery_operation_part10541); 
					 op = "intersect"; 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:1112:16: PLSQL_RESERVED_MINUS
					{
					match(input,PLSQL_RESERVED_MINUS,FOLLOW_PLSQL_RESERVED_MINUS_in_subquery_operation_part10560); 
					 op = "minus"; 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1114:13: ( SQL92_RESERVED_ALL )?
			int alt227=2;
			int LA227_0 = input.LA(1);
			if ( (LA227_0==SQL92_RESERVED_ALL) ) {
				alt227=1;
			}
			switch (alt227) {
				case 1 :
					// PLSQLPrinter.g:1114:13: SQL92_RESERVED_ALL
					{
					SQL92_RESERVED_ALL168=(CommonTree)match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_subquery_operation_part10590); 
					}
					break;

			}

			pushFollow(FOLLOW_subquery_basic_elements_in_subquery_operation_part10593);
			subquery_basic_elements169=subquery_basic_elements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1116:5: -> subquery_operation_part(operator=opis_all=$SQL92_RESERVED_ALL != nullsubquery_basic_elements=$subquery_basic_elements.st)
			{
				retval.st = templateLib.getInstanceOf("subquery_operation_part",new STAttrMap().put("operator", op).put("is_all", SQL92_RESERVED_ALL168 != null).put("subquery_basic_elements", (subquery_basic_elements169!=null?((StringTemplate)subquery_basic_elements169.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_operation_part"


	public static class subquery_basic_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_basic_elements"
	// PLSQLPrinter.g:1119:1: subquery_basic_elements : ( query_block -> { $query_block.st }| subquery -> in_parens(val=$subquery.st));
	public final PLSQLPrinter.subquery_basic_elements_return subquery_basic_elements() throws RecognitionException {
		PLSQLPrinter.subquery_basic_elements_return retval = new PLSQLPrinter.subquery_basic_elements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope query_block170 =null;
		TreeRuleReturnScope subquery171 =null;

		try {
			// PLSQLPrinter.g:1120:5: ( query_block -> { $query_block.st }| subquery -> in_parens(val=$subquery.st))
			int alt228=2;
			int LA228_0 = input.LA(1);
			if ( (LA228_0==SQL92_RESERVED_SELECT) ) {
				alt228=1;
			}
			else if ( (LA228_0==SUBQUERY) ) {
				alt228=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 228, 0, input);
				throw nvae;
			}

			switch (alt228) {
				case 1 :
					// PLSQLPrinter.g:1120:10: query_block
					{
					pushFollow(FOLLOW_query_block_in_subquery_basic_elements10650);
					query_block170=query_block();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1120:22: -> { $query_block.st }
					{
						retval.st =  (query_block170!=null?((StringTemplate)query_block170.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1121:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_subquery_basic_elements10665);
					subquery171=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1122:5: -> in_parens(val=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (subquery171!=null?((StringTemplate)subquery171.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_basic_elements"


	public static class query_block_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_block"
	// PLSQLPrinter.g:1125:1: query_block : ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) -> query_block(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullselected_elements=$selectedinto_clause=$into_clause.stfrom_clause=$from_clause.stwhere_clause=$where_clause.sthierarchical_query_clause=$hierarchical_query_clause.stgroup_by_clause=$group_by_clause.stmodel_clause=$model_clause.st);
	public final PLSQLPrinter.query_block_return query_block() throws RecognitionException {
		PLSQLPrinter.query_block_return retval = new PLSQLPrinter.query_block_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_DISTINCT172=null;
		CommonTree SQL92_RESERVED_UNIQUE173=null;
		CommonTree SQL92_RESERVED_ALL174=null;
		CommonTree ASTERISK175=null;
		List<Object> list_selected=null;
		TreeRuleReturnScope into_clause176 =null;
		TreeRuleReturnScope from_clause177 =null;
		TreeRuleReturnScope where_clause178 =null;
		TreeRuleReturnScope hierarchical_query_clause179 =null;
		TreeRuleReturnScope group_by_clause180 =null;
		TreeRuleReturnScope model_clause181 =null;
		RuleReturnScope selected = null;
		try {
			// PLSQLPrinter.g:1126:5: ( ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) -> query_block(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullselected_elements=$selectedinto_clause=$into_clause.stfrom_clause=$from_clause.stwhere_clause=$where_clause.sthierarchical_query_clause=$hierarchical_query_clause.stgroup_by_clause=$group_by_clause.stmodel_clause=$model_clause.st))
			// PLSQLPrinter.g:1126:10: ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
			{
			match(input,SQL92_RESERVED_SELECT,FOLLOW_SQL92_RESERVED_SELECT_in_query_block10701); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_from_clause_in_query_block10716);
			from_clause177=from_clause();
			state._fsp--;

			// PLSQLPrinter.g:1128:13: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )?
			int alt229=4;
			switch ( input.LA(1) ) {
				case SQL92_RESERVED_DISTINCT:
					{
					alt229=1;
					}
					break;
				case SQL92_RESERVED_UNIQUE:
					{
					alt229=2;
					}
					break;
				case SQL92_RESERVED_ALL:
					{
					alt229=3;
					}
					break;
			}
			switch (alt229) {
				case 1 :
					// PLSQLPrinter.g:1128:14: SQL92_RESERVED_DISTINCT
					{
					SQL92_RESERVED_DISTINCT172=(CommonTree)match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_query_block10732); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1128:38: SQL92_RESERVED_UNIQUE
					{
					SQL92_RESERVED_UNIQUE173=(CommonTree)match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_query_block10734); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:1128:60: SQL92_RESERVED_ALL
					{
					SQL92_RESERVED_ALL174=(CommonTree)match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_query_block10736); 
					}
					break;

			}

			// PLSQLPrinter.g:1129:13: ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) )
			int alt231=2;
			int LA231_0 = input.LA(1);
			if ( (LA231_0==ASTERISK) ) {
				alt231=1;
			}
			else if ( (LA231_0==SELECT_LIST) ) {
				alt231=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 231, 0, input);
				throw nvae;
			}

			switch (alt231) {
				case 1 :
					// PLSQLPrinter.g:1129:18: ASTERISK
					{
					ASTERISK175=(CommonTree)match(input,ASTERISK,FOLLOW_ASTERISK_in_query_block10758); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1130:18: ^( SELECT_LIST (selected+= selected_element )+ )
					{
					match(input,SELECT_LIST,FOLLOW_SELECT_LIST_in_query_block10778); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1130:40: (selected+= selected_element )+
					int cnt230=0;
					loop230:
					while (true) {
						int alt230=2;
						int LA230_0 = input.LA(1);
						if ( (LA230_0==SELECT_ITEM) ) {
							alt230=1;
						}

						switch (alt230) {
						case 1 :
							// PLSQLPrinter.g:1130:40: selected+= selected_element
							{
							pushFollow(FOLLOW_selected_element_in_query_block10782);
							selected=selected_element();
							state._fsp--;

							if (list_selected==null) list_selected=new ArrayList<Object>();
							list_selected.add(selected.getTemplate());
							}
							break;

						default :
							if ( cnt230 >= 1 ) break loop230;
							EarlyExitException eee = new EarlyExitException(230, input);
							throw eee;
						}
						cnt230++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}

			// PLSQLPrinter.g:1132:13: ( into_clause )?
			int alt232=2;
			int LA232_0 = input.LA(1);
			if ( (LA232_0==SQL92_RESERVED_INTO||LA232_0==BULK_VK) ) {
				alt232=1;
			}
			switch (alt232) {
				case 1 :
					// PLSQLPrinter.g:1132:13: into_clause
					{
					pushFollow(FOLLOW_into_clause_in_query_block10812);
					into_clause176=into_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1132:26: ( where_clause )?
			int alt233=2;
			int LA233_0 = input.LA(1);
			if ( (LA233_0==SQL92_RESERVED_WHERE) ) {
				alt233=1;
			}
			switch (alt233) {
				case 1 :
					// PLSQLPrinter.g:1132:26: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_query_block10815);
					where_clause178=where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1132:40: ( hierarchical_query_clause )?
			int alt234=2;
			int LA234_0 = input.LA(1);
			if ( (LA234_0==HIERARCHICAL) ) {
				alt234=1;
			}
			switch (alt234) {
				case 1 :
					// PLSQLPrinter.g:1132:40: hierarchical_query_clause
					{
					pushFollow(FOLLOW_hierarchical_query_clause_in_query_block10818);
					hierarchical_query_clause179=hierarchical_query_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1133:13: ( group_by_clause )?
			int alt235=2;
			int LA235_0 = input.LA(1);
			if ( (LA235_0==SQL92_RESERVED_GROUP) ) {
				alt235=1;
			}
			switch (alt235) {
				case 1 :
					// PLSQLPrinter.g:1133:13: group_by_clause
					{
					pushFollow(FOLLOW_group_by_clause_in_query_block10834);
					group_by_clause180=group_by_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1133:30: ( model_clause )?
			int alt236=2;
			int LA236_0 = input.LA(1);
			if ( (LA236_0==PLSQL_NON_RESERVED_MODEL) ) {
				alt236=1;
			}
			switch (alt236) {
				case 1 :
					// PLSQLPrinter.g:1133:30: model_clause
					{
					pushFollow(FOLLOW_model_clause_in_query_block10837);
					model_clause181=model_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1135:5: -> query_block(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullselected_elements=$selectedinto_clause=$into_clause.stfrom_clause=$from_clause.stwhere_clause=$where_clause.sthierarchical_query_clause=$hierarchical_query_clause.stgroup_by_clause=$group_by_clause.stmodel_clause=$model_clause.st)
			{
				retval.st = templateLib.getInstanceOf("query_block",new STAttrMap().put("is_distinct", SQL92_RESERVED_DISTINCT172 != null).put("is_unique", SQL92_RESERVED_UNIQUE173 != null).put("is_all", SQL92_RESERVED_ALL174 != null).put("is_asterisk", ASTERISK175 != null).put("selected_elements", list_selected).put("into_clause", (into_clause176!=null?((StringTemplate)into_clause176.getTemplate()):null)).put("from_clause", (from_clause177!=null?((StringTemplate)from_clause177.getTemplate()):null)).put("where_clause", (where_clause178!=null?((StringTemplate)where_clause178.getTemplate()):null)).put("hierarchical_query_clause", (hierarchical_query_clause179!=null?((StringTemplate)hierarchical_query_clause179.getTemplate()):null)).put("group_by_clause", (group_by_clause180!=null?((StringTemplate)group_by_clause180.getTemplate()):null)).put("model_clause", (model_clause181!=null?((StringTemplate)model_clause181.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_block"


	public static class selected_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "selected_element"
	// PLSQLPrinter.g:1150:1: selected_element : ^( SELECT_ITEM expression ( alias )? ) -> selected_element(expression=$expression.stalias=$alias.st);
	public final PLSQLPrinter.selected_element_return selected_element() throws RecognitionException {
		PLSQLPrinter.selected_element_return retval = new PLSQLPrinter.selected_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression182 =null;
		TreeRuleReturnScope alias183 =null;

		try {
			// PLSQLPrinter.g:1151:5: ( ^( SELECT_ITEM expression ( alias )? ) -> selected_element(expression=$expression.stalias=$alias.st))
			// PLSQLPrinter.g:1151:10: ^( SELECT_ITEM expression ( alias )? )
			{
			match(input,SELECT_ITEM,FOLLOW_SELECT_ITEM_in_selected_element11066); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_selected_element11068);
			expression182=expression();
			state._fsp--;

			// PLSQLPrinter.g:1151:35: ( alias )?
			int alt237=2;
			int LA237_0 = input.LA(1);
			if ( (LA237_0==COLUMN_ALIAS||LA237_0==TABLE_ALIAS) ) {
				alt237=1;
			}
			switch (alt237) {
				case 1 :
					// PLSQLPrinter.g:1151:35: alias
					{
					pushFollow(FOLLOW_alias_in_selected_element11070);
					alias183=alias();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1152:5: -> selected_element(expression=$expression.stalias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("selected_element",new STAttrMap().put("expression", (expression182!=null?((StringTemplate)expression182.getTemplate()):null)).put("alias", (alias183!=null?((StringTemplate)alias183.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selected_element"


	public static class from_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "from_clause"
	// PLSQLPrinter.g:1155:1: from_clause : ^( SQL92_RESERVED_FROM (refs+= table_ref )+ ) -> from_clause(table_refs=$refs);
	public final PLSQLPrinter.from_clause_return from_clause() throws RecognitionException {
		PLSQLPrinter.from_clause_return retval = new PLSQLPrinter.from_clause_return();
		retval.start = input.LT(1);

		List<Object> list_refs=null;
		RuleReturnScope refs = null;
		try {
			// PLSQLPrinter.g:1156:5: ( ^( SQL92_RESERVED_FROM (refs+= table_ref )+ ) -> from_clause(table_refs=$refs))
			// PLSQLPrinter.g:1156:10: ^( SQL92_RESERVED_FROM (refs+= table_ref )+ )
			{
			match(input,SQL92_RESERVED_FROM,FOLLOW_SQL92_RESERVED_FROM_in_from_clause11113); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1156:36: (refs+= table_ref )+
			int cnt238=0;
			loop238:
			while (true) {
				int alt238=2;
				int LA238_0 = input.LA(1);
				if ( (LA238_0==TABLE_REF) ) {
					alt238=1;
				}

				switch (alt238) {
				case 1 :
					// PLSQLPrinter.g:1156:36: refs+= table_ref
					{
					pushFollow(FOLLOW_table_ref_in_from_clause11117);
					refs=table_ref();
					state._fsp--;

					if (list_refs==null) list_refs=new ArrayList<Object>();
					list_refs.add(refs.getTemplate());
					}
					break;

				default :
					if ( cnt238 >= 1 ) break loop238;
					EarlyExitException eee = new EarlyExitException(238, input);
					throw eee;
				}
				cnt238++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1157:5: -> from_clause(table_refs=$refs)
			{
				retval.st = templateLib.getInstanceOf("from_clause",new STAttrMap().put("table_refs", list_refs));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "from_clause"


	public static class table_ref_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_ref"
	// PLSQLPrinter.g:1160:1: table_ref : ^( TABLE_REF table_ref_aux (joins+= join_clause )* ) -> table_ref(table_ref_aux=$table_ref_aux.stjoin_clauses=$joins);
	public final PLSQLPrinter.table_ref_return table_ref() throws RecognitionException {
		PLSQLPrinter.table_ref_return retval = new PLSQLPrinter.table_ref_return();
		retval.start = input.LT(1);

		List<Object> list_joins=null;
		TreeRuleReturnScope table_ref_aux184 =null;
		RuleReturnScope joins = null;
		try {
			// PLSQLPrinter.g:1161:5: ( ^( TABLE_REF table_ref_aux (joins+= join_clause )* ) -> table_ref(table_ref_aux=$table_ref_aux.stjoin_clauses=$joins))
			// PLSQLPrinter.g:1161:10: ^( TABLE_REF table_ref_aux (joins+= join_clause )* )
			{
			match(input,TABLE_REF,FOLLOW_TABLE_REF_in_table_ref11155); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_table_ref_aux_in_table_ref11157);
			table_ref_aux184=table_ref_aux();
			state._fsp--;

			// PLSQLPrinter.g:1161:41: (joins+= join_clause )*
			loop239:
			while (true) {
				int alt239=2;
				int LA239_0 = input.LA(1);
				if ( (LA239_0==JOIN_DEF) ) {
					alt239=1;
				}

				switch (alt239) {
				case 1 :
					// PLSQLPrinter.g:1161:41: joins+= join_clause
					{
					pushFollow(FOLLOW_join_clause_in_table_ref11161);
					joins=join_clause();
					state._fsp--;

					if (list_joins==null) list_joins=new ArrayList<Object>();
					list_joins.add(joins.getTemplate());
					}
					break;

				default :
					break loop239;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1162:5: -> table_ref(table_ref_aux=$table_ref_aux.stjoin_clauses=$joins)
			{
				retval.st = templateLib.getInstanceOf("table_ref",new STAttrMap().put("table_ref_aux", (table_ref_aux184!=null?((StringTemplate)table_ref_aux184.getTemplate()):null)).put("join_clauses", list_joins));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_ref"


	public static class table_ref_aux_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_ref_aux"
	// PLSQLPrinter.g:1165:1: table_ref_aux : ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK | pivot_clause | unpivot_clause )? ( flashback_query_clause )* ) -> table_ref_aux(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.stpivot_clause=$pivot_clause.stunpivot_clause=$unpivot_clause.stflashback_query_clause=$flashback_query_clause.stalias=$alias.st);
	public final PLSQLPrinter.table_ref_aux_return table_ref_aux() throws RecognitionException {
		PLSQLPrinter.table_ref_aux_return retval = new PLSQLPrinter.table_ref_aux_return();
		retval.start = input.LT(1);

		CommonTree ONLY_VK185=null;
		TreeRuleReturnScope dml_table_expression_clause186 =null;
		TreeRuleReturnScope pivot_clause187 =null;
		TreeRuleReturnScope unpivot_clause188 =null;
		TreeRuleReturnScope flashback_query_clause189 =null;
		TreeRuleReturnScope alias190 =null;

		try {
			// PLSQLPrinter.g:1166:5: ( ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK | pivot_clause | unpivot_clause )? ( flashback_query_clause )* ) -> table_ref_aux(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.stpivot_clause=$pivot_clause.stunpivot_clause=$unpivot_clause.stflashback_query_clause=$flashback_query_clause.stalias=$alias.st))
			// PLSQLPrinter.g:1166:10: ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK | pivot_clause | unpivot_clause )? ( flashback_query_clause )* )
			{
			match(input,TABLE_REF_ELEMENT,FOLLOW_TABLE_REF_ELEMENT_in_table_ref_aux11204); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1166:30: ( alias )?
			int alt240=2;
			int LA240_0 = input.LA(1);
			if ( (LA240_0==COLUMN_ALIAS||LA240_0==TABLE_ALIAS) ) {
				alt240=1;
			}
			switch (alt240) {
				case 1 :
					// PLSQLPrinter.g:1166:30: alias
					{
					pushFollow(FOLLOW_alias_in_table_ref_aux11206);
					alias190=alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_table_expression_clause_in_table_ref_aux11209);
			dml_table_expression_clause186=dml_table_expression_clause();
			state._fsp--;

			// PLSQLPrinter.g:1166:65: ( ONLY_VK | pivot_clause | unpivot_clause )?
			int alt241=4;
			switch ( input.LA(1) ) {
				case ONLY_VK:
					{
					alt241=1;
					}
					break;
				case PIVOT_VK:
					{
					alt241=2;
					}
					break;
				case UNPIVOT_VK:
					{
					alt241=3;
					}
					break;
			}
			switch (alt241) {
				case 1 :
					// PLSQLPrinter.g:1166:66: ONLY_VK
					{
					ONLY_VK185=(CommonTree)match(input,ONLY_VK,FOLLOW_ONLY_VK_in_table_ref_aux11212); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1166:74: pivot_clause
					{
					pushFollow(FOLLOW_pivot_clause_in_table_ref_aux11214);
					pivot_clause187=pivot_clause();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1166:87: unpivot_clause
					{
					pushFollow(FOLLOW_unpivot_clause_in_table_ref_aux11216);
					unpivot_clause188=unpivot_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1166:104: ( flashback_query_clause )*
			loop242:
			while (true) {
				int alt242=2;
				int LA242_0 = input.LA(1);
				if ( (LA242_0==SQL92_RESERVED_AS||LA242_0==VERSIONS_VK) ) {
					alt242=1;
				}

				switch (alt242) {
				case 1 :
					// PLSQLPrinter.g:1166:104: flashback_query_clause
					{
					pushFollow(FOLLOW_flashback_query_clause_in_table_ref_aux11220);
					flashback_query_clause189=flashback_query_clause();
					state._fsp--;

					}
					break;

				default :
					break loop242;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1167:5: -> table_ref_aux(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.stpivot_clause=$pivot_clause.stunpivot_clause=$unpivot_clause.stflashback_query_clause=$flashback_query_clause.stalias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("table_ref_aux",new STAttrMap().put("is_only", ONLY_VK185 != null).put("dml_table_expression_clause", (dml_table_expression_clause186!=null?((StringTemplate)dml_table_expression_clause186.getTemplate()):null)).put("pivot_clause", (pivot_clause187!=null?((StringTemplate)pivot_clause187.getTemplate()):null)).put("unpivot_clause", (unpivot_clause188!=null?((StringTemplate)unpivot_clause188.getTemplate()):null)).put("flashback_query_clause", (flashback_query_clause189!=null?((StringTemplate)flashback_query_clause189.getTemplate()):null)).put("alias", (alias190!=null?((StringTemplate)alias190.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_ref_aux"


	public static class join_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "join_clause"
	// PLSQLPrinter.g:1173:1: join_clause : ^( JOIN_DEF (qpc1= query_partition_clause )? ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )? ) -> join_clause(qpc1=$qpc1.stis_cross=$CROSS_VK != nullis_natural=$NATURAL_VK != nullis_inner=$INNER_VK != nullis_left=$LEFT_VK != nullis_right=$RIGHT_VK != nullis_full=$FULL_VK != nulltable_ref_aux=$table_ref_aux.stqpc2=$qpc2.stjoin_on_part=$join_on_part.stjoin_using_part=$join_using_part.st);
	public final PLSQLPrinter.join_clause_return join_clause() throws RecognitionException {
		PLSQLPrinter.join_clause_return retval = new PLSQLPrinter.join_clause_return();
		retval.start = input.LT(1);

		CommonTree CROSS_VK191=null;
		CommonTree NATURAL_VK192=null;
		CommonTree INNER_VK193=null;
		CommonTree LEFT_VK194=null;
		CommonTree RIGHT_VK195=null;
		CommonTree FULL_VK196=null;
		TreeRuleReturnScope qpc1 =null;
		TreeRuleReturnScope qpc2 =null;
		TreeRuleReturnScope table_ref_aux197 =null;
		TreeRuleReturnScope join_on_part198 =null;
		TreeRuleReturnScope join_using_part199 =null;

		try {
			// PLSQLPrinter.g:1174:5: ( ^( JOIN_DEF (qpc1= query_partition_clause )? ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )? ) -> join_clause(qpc1=$qpc1.stis_cross=$CROSS_VK != nullis_natural=$NATURAL_VK != nullis_inner=$INNER_VK != nullis_left=$LEFT_VK != nullis_right=$RIGHT_VK != nullis_full=$FULL_VK != nulltable_ref_aux=$table_ref_aux.stqpc2=$qpc2.stjoin_on_part=$join_on_part.stjoin_using_part=$join_using_part.st))
			// PLSQLPrinter.g:1174:10: ^( JOIN_DEF (qpc1= query_partition_clause )? ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )? )
			{
			match(input,JOIN_DEF,FOLLOW_JOIN_DEF_in_join_clause11317); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1175:17: (qpc1= query_partition_clause )?
			int alt243=2;
			int LA243_0 = input.LA(1);
			if ( (LA243_0==PARTITION_VK) ) {
				alt243=1;
			}
			switch (alt243) {
				case 1 :
					// PLSQLPrinter.g:1175:17: qpc1= query_partition_clause
					{
					pushFollow(FOLLOW_query_partition_clause_in_join_clause11333);
					qpc1=query_partition_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1176:13: ( CROSS_VK | NATURAL_VK )?
			int alt244=3;
			int LA244_0 = input.LA(1);
			if ( (LA244_0==CROSS_VK) ) {
				alt244=1;
			}
			else if ( (LA244_0==NATURAL_VK) ) {
				alt244=2;
			}
			switch (alt244) {
				case 1 :
					// PLSQLPrinter.g:1176:14: CROSS_VK
					{
					CROSS_VK191=(CommonTree)match(input,CROSS_VK,FOLLOW_CROSS_VK_in_join_clause11349); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1176:23: NATURAL_VK
					{
					NATURAL_VK192=(CommonTree)match(input,NATURAL_VK,FOLLOW_NATURAL_VK_in_join_clause11351); 
					}
					break;

			}

			// PLSQLPrinter.g:1176:36: ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )?
			int alt245=5;
			switch ( input.LA(1) ) {
				case INNER_VK:
					{
					alt245=1;
					}
					break;
				case FULL_VK:
					{
					alt245=2;
					}
					break;
				case LEFT_VK:
					{
					alt245=3;
					}
					break;
				case RIGHT_VK:
					{
					alt245=4;
					}
					break;
			}
			switch (alt245) {
				case 1 :
					// PLSQLPrinter.g:1176:37: INNER_VK
					{
					INNER_VK193=(CommonTree)match(input,INNER_VK,FOLLOW_INNER_VK_in_join_clause11356); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1176:46: FULL_VK
					{
					FULL_VK196=(CommonTree)match(input,FULL_VK,FOLLOW_FULL_VK_in_join_clause11358); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:1176:54: LEFT_VK
					{
					LEFT_VK194=(CommonTree)match(input,LEFT_VK,FOLLOW_LEFT_VK_in_join_clause11360); 
					}
					break;
				case 4 :
					// PLSQLPrinter.g:1176:62: RIGHT_VK
					{
					RIGHT_VK195=(CommonTree)match(input,RIGHT_VK,FOLLOW_RIGHT_VK_in_join_clause11362); 
					}
					break;

			}

			pushFollow(FOLLOW_table_ref_aux_in_join_clause11366);
			table_ref_aux197=table_ref_aux();
			state._fsp--;

			// PLSQLPrinter.g:1177:17: (qpc2= query_partition_clause )?
			int alt246=2;
			int LA246_0 = input.LA(1);
			if ( (LA246_0==PARTITION_VK) ) {
				alt246=1;
			}
			switch (alt246) {
				case 1 :
					// PLSQLPrinter.g:1177:17: qpc2= query_partition_clause
					{
					pushFollow(FOLLOW_query_partition_clause_in_join_clause11382);
					qpc2=query_partition_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1178:13: ( join_on_part | join_using_part )?
			int alt247=3;
			int LA247_0 = input.LA(1);
			if ( (LA247_0==SQL92_RESERVED_ON) ) {
				alt247=1;
			}
			else if ( (LA247_0==PLSQL_NON_RESERVED_USING) ) {
				alt247=2;
			}
			switch (alt247) {
				case 1 :
					// PLSQLPrinter.g:1178:14: join_on_part
					{
					pushFollow(FOLLOW_join_on_part_in_join_clause11398);
					join_on_part198=join_on_part();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1178:27: join_using_part
					{
					pushFollow(FOLLOW_join_using_part_in_join_clause11400);
					join_using_part199=join_using_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1179:5: -> join_clause(qpc1=$qpc1.stis_cross=$CROSS_VK != nullis_natural=$NATURAL_VK != nullis_inner=$INNER_VK != nullis_left=$LEFT_VK != nullis_right=$RIGHT_VK != nullis_full=$FULL_VK != nulltable_ref_aux=$table_ref_aux.stqpc2=$qpc2.stjoin_on_part=$join_on_part.stjoin_using_part=$join_using_part.st)
			{
				retval.st = templateLib.getInstanceOf("join_clause",new STAttrMap().put("qpc1", (qpc1!=null?((StringTemplate)qpc1.getTemplate()):null)).put("is_cross", CROSS_VK191 != null).put("is_natural", NATURAL_VK192 != null).put("is_inner", INNER_VK193 != null).put("is_left", LEFT_VK194 != null).put("is_right", RIGHT_VK195 != null).put("is_full", FULL_VK196 != null).put("table_ref_aux", (table_ref_aux197!=null?((StringTemplate)table_ref_aux197.getTemplate()):null)).put("qpc2", (qpc2!=null?((StringTemplate)qpc2.getTemplate()):null)).put("join_on_part", (join_on_part198!=null?((StringTemplate)join_on_part198.getTemplate()):null)).put("join_using_part", (join_using_part199!=null?((StringTemplate)join_using_part199.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_clause"


	public static class join_on_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "join_on_part"
	// PLSQLPrinter.g:1185:1: join_on_part : ^( SQL92_RESERVED_ON expression ) -> join_on_part(expression=$expression.st);
	public final PLSQLPrinter.join_on_part_return join_on_part() throws RecognitionException {
		PLSQLPrinter.join_on_part_return retval = new PLSQLPrinter.join_on_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression200 =null;

		try {
			// PLSQLPrinter.g:1186:5: ( ^( SQL92_RESERVED_ON expression ) -> join_on_part(expression=$expression.st))
			// PLSQLPrinter.g:1186:10: ^( SQL92_RESERVED_ON expression )
			{
			match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_join_on_part11526); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_join_on_part11528);
			expression200=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1187:5: -> join_on_part(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("join_on_part",new STAttrMap().put("expression", (expression200!=null?((StringTemplate)expression200.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_on_part"


	public static class join_using_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "join_using_part"
	// PLSQLPrinter.g:1190:1: join_using_part : ^( PLSQL_NON_RESERVED_USING ( column_name )+ ) -> template( \"not implemented: join_using_part\";
	public final PLSQLPrinter.join_using_part_return join_using_part() throws RecognitionException {
		PLSQLPrinter.join_using_part_return retval = new PLSQLPrinter.join_using_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1191:5: ( ^( PLSQL_NON_RESERVED_USING ( column_name )+ ) -> template( \"not implemented: join_using_part\")
			// PLSQLPrinter.g:1191:10: ^( PLSQL_NON_RESERVED_USING ( column_name )+ )
			{
			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_join_using_part11565); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1191:37: ( column_name )+
			int cnt248=0;
			loop248:
			while (true) {
				int alt248=2;
				int LA248_0 = input.LA(1);
				if ( (LA248_0==COLUMN_NAME) ) {
					alt248=1;
				}

				switch (alt248) {
				case 1 :
					// PLSQLPrinter.g:1191:37: column_name
					{
					pushFollow(FOLLOW_column_name_in_join_using_part11567);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt248 >= 1 ) break loop248;
					EarlyExitException eee = new EarlyExitException(248, input);
					throw eee;
				}
				cnt248++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1192:5: -> template( \"not implemented: join_using_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: join_using_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_using_part"


	public static class query_partition_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_partition_clause"
	// PLSQLPrinter.g:1195:1: query_partition_clause : ^( PARTITION_VK ( subquery | expression_list | ( expression )+ ) ) -> template( \"not implemented: query_partition_clause\";
	public final PLSQLPrinter.query_partition_clause_return query_partition_clause() throws RecognitionException {
		PLSQLPrinter.query_partition_clause_return retval = new PLSQLPrinter.query_partition_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1196:5: ( ^( PARTITION_VK ( subquery | expression_list | ( expression )+ ) ) -> template( \"not implemented: query_partition_clause\")
			// PLSQLPrinter.g:1196:10: ^( PARTITION_VK ( subquery | expression_list | ( expression )+ ) )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_query_partition_clause11604); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1196:25: ( subquery | expression_list | ( expression )+ )
			int alt250=3;
			switch ( input.LA(1) ) {
			case SUBQUERY:
				{
				alt250=1;
				}
				break;
			case EXPR_LIST:
				{
				alt250=2;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt250=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 250, 0, input);
				throw nvae;
			}
			switch (alt250) {
				case 1 :
					// PLSQLPrinter.g:1196:26: subquery
					{
					pushFollow(FOLLOW_subquery_in_query_partition_clause11607);
					subquery();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1196:35: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_query_partition_clause11609);
					expression_list();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1196:51: ( expression )+
					{
					// PLSQLPrinter.g:1196:51: ( expression )+
					int cnt249=0;
					loop249:
					while (true) {
						int alt249=2;
						int LA249_0 = input.LA(1);
						if ( (LA249_0==EXPR||LA249_0==LOGIC_EXPR) ) {
							alt249=1;
						}

						switch (alt249) {
						case 1 :
							// PLSQLPrinter.g:1196:51: expression
							{
							pushFollow(FOLLOW_expression_in_query_partition_clause11611);
							expression();
							state._fsp--;

							}
							break;

						default :
							if ( cnt249 >= 1 ) break loop249;
							EarlyExitException eee = new EarlyExitException(249, input);
							throw eee;
						}
						cnt249++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1197:5: -> template( \"not implemented: query_partition_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: query_partition_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_partition_clause"


	public static class flashback_query_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "flashback_query_clause"
	// PLSQLPrinter.g:1200:1: flashback_query_clause : ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression ) -> template( \"not implemented: flashback_query_clause\";
	public final PLSQLPrinter.flashback_query_clause_return flashback_query_clause() throws RecognitionException {
		PLSQLPrinter.flashback_query_clause_return retval = new PLSQLPrinter.flashback_query_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1201:5: ( ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression ) -> template( \"not implemented: flashback_query_clause\")
			// PLSQLPrinter.g:1201:10: ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression )
			{
			// PLSQLPrinter.g:1201:12: ( VERSIONS_VK | SQL92_RESERVED_AS )
			int alt251=2;
			int LA251_0 = input.LA(1);
			if ( (LA251_0==VERSIONS_VK) ) {
				alt251=1;
			}
			else if ( (LA251_0==SQL92_RESERVED_AS) ) {
				alt251=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 251, 0, input);
				throw nvae;
			}

			switch (alt251) {
				case 1 :
					// PLSQLPrinter.g:1201:13: VERSIONS_VK
					{
					match(input,VERSIONS_VK,FOLLOW_VERSIONS_VK_in_flashback_query_clause11650); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1201:25: SQL92_RESERVED_AS
					{
					match(input,SQL92_RESERVED_AS,FOLLOW_SQL92_RESERVED_AS_in_flashback_query_clause11652); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1201:44: ( SCN_VK | TIMESTAMP_VK )?
			int alt252=3;
			int LA252_0 = input.LA(1);
			if ( (LA252_0==SCN_VK) ) {
				alt252=1;
			}
			else if ( (LA252_0==TIMESTAMP_VK) ) {
				alt252=2;
			}
			switch (alt252) {
				case 1 :
					// PLSQLPrinter.g:1201:45: SCN_VK
					{
					match(input,SCN_VK,FOLLOW_SCN_VK_in_flashback_query_clause11656); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1201:52: TIMESTAMP_VK
					{
					match(input,TIMESTAMP_VK,FOLLOW_TIMESTAMP_VK_in_flashback_query_clause11658); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_flashback_query_clause11662);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1202:5: -> template( \"not implemented: flashback_query_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: flashback_query_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "flashback_query_clause"


	public static class pivot_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_clause"
	// PLSQLPrinter.g:1205:1: pivot_clause : ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) -> template( \"not implemented: pivot_clause\";
	public final PLSQLPrinter.pivot_clause_return pivot_clause() throws RecognitionException {
		PLSQLPrinter.pivot_clause_return retval = new PLSQLPrinter.pivot_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1206:5: ( ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) -> template( \"not implemented: pivot_clause\")
			// PLSQLPrinter.g:1206:10: ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause )
			{
			match(input,PIVOT_VK,FOLLOW_PIVOT_VK_in_pivot_clause11699); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1206:21: ( XML_VK )?
			int alt253=2;
			int LA253_0 = input.LA(1);
			if ( (LA253_0==XML_VK) ) {
				alt253=1;
			}
			switch (alt253) {
				case 1 :
					// PLSQLPrinter.g:1206:21: XML_VK
					{
					match(input,XML_VK,FOLLOW_XML_VK_in_pivot_clause11701); 
					}
					break;

			}

			// PLSQLPrinter.g:1206:29: ( pivot_element )+
			int cnt254=0;
			loop254:
			while (true) {
				int alt254=2;
				int LA254_0 = input.LA(1);
				if ( (LA254_0==PIVOT_ELEMENT) ) {
					alt254=1;
				}

				switch (alt254) {
				case 1 :
					// PLSQLPrinter.g:1206:29: pivot_element
					{
					pushFollow(FOLLOW_pivot_element_in_pivot_clause11704);
					pivot_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt254 >= 1 ) break loop254;
					EarlyExitException eee = new EarlyExitException(254, input);
					throw eee;
				}
				cnt254++;
			}

			pushFollow(FOLLOW_pivot_for_clause_in_pivot_clause11707);
			pivot_for_clause();
			state._fsp--;

			pushFollow(FOLLOW_pivot_in_clause_in_pivot_clause11709);
			pivot_in_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1207:5: -> template( \"not implemented: pivot_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_clause"


	public static class pivot_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_element"
	// PLSQLPrinter.g:1210:1: pivot_element : ^( PIVOT_ELEMENT ( alias )? expression ) -> template( \"not implemented: pivot_element\";
	public final PLSQLPrinter.pivot_element_return pivot_element() throws RecognitionException {
		PLSQLPrinter.pivot_element_return retval = new PLSQLPrinter.pivot_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1211:5: ( ^( PIVOT_ELEMENT ( alias )? expression ) -> template( \"not implemented: pivot_element\")
			// PLSQLPrinter.g:1211:10: ^( PIVOT_ELEMENT ( alias )? expression )
			{
			match(input,PIVOT_ELEMENT,FOLLOW_PIVOT_ELEMENT_in_pivot_element11745); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1211:26: ( alias )?
			int alt255=2;
			int LA255_0 = input.LA(1);
			if ( (LA255_0==COLUMN_ALIAS||LA255_0==TABLE_ALIAS) ) {
				alt255=1;
			}
			switch (alt255) {
				case 1 :
					// PLSQLPrinter.g:1211:26: alias
					{
					pushFollow(FOLLOW_alias_in_pivot_element11747);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_expression_in_pivot_element11750);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1212:5: -> template( \"not implemented: pivot_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_element"


	public static class pivot_for_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_for_clause"
	// PLSQLPrinter.g:1215:1: pivot_for_clause : ^( SQL92_RESERVED_FOR ( column_name )+ ) -> template( \"not implemented: pivot_for_clause\";
	public final PLSQLPrinter.pivot_for_clause_return pivot_for_clause() throws RecognitionException {
		PLSQLPrinter.pivot_for_clause_return retval = new PLSQLPrinter.pivot_for_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1216:5: ( ^( SQL92_RESERVED_FOR ( column_name )+ ) -> template( \"not implemented: pivot_for_clause\")
			// PLSQLPrinter.g:1216:10: ^( SQL92_RESERVED_FOR ( column_name )+ )
			{
			match(input,SQL92_RESERVED_FOR,FOLLOW_SQL92_RESERVED_FOR_in_pivot_for_clause11786); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1216:31: ( column_name )+
			int cnt256=0;
			loop256:
			while (true) {
				int alt256=2;
				int LA256_0 = input.LA(1);
				if ( (LA256_0==COLUMN_NAME) ) {
					alt256=1;
				}

				switch (alt256) {
				case 1 :
					// PLSQLPrinter.g:1216:31: column_name
					{
					pushFollow(FOLLOW_column_name_in_pivot_for_clause11788);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt256 >= 1 ) break loop256;
					EarlyExitException eee = new EarlyExitException(256, input);
					throw eee;
				}
				cnt256++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1217:5: -> template( \"not implemented: pivot_for_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_for_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_for_clause"


	public static class pivot_in_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_in_clause"
	// PLSQLPrinter.g:1220:1: pivot_in_clause : ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ) -> template( \"not implemented: pivot_in_clause\";
	public final PLSQLPrinter.pivot_in_clause_return pivot_in_clause() throws RecognitionException {
		PLSQLPrinter.pivot_in_clause_return retval = new PLSQLPrinter.pivot_in_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1221:5: ( ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ) -> template( \"not implemented: pivot_in_clause\")
			// PLSQLPrinter.g:1221:10: ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) )
			{
			match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_pivot_in_clause11825); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1222:9: ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) )
			int alt259=3;
			switch ( input.LA(1) ) {
			case SUBQUERY:
				{
				alt259=1;
				}
				break;
			case ANY_MODE:
				{
				alt259=2;
				}
				break;
			case ELEMENTS_MODE:
				{
				alt259=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 259, 0, input);
				throw nvae;
			}
			switch (alt259) {
				case 1 :
					// PLSQLPrinter.g:1222:14: subquery
					{
					pushFollow(FOLLOW_subquery_in_pivot_in_clause11841);
					subquery();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1223:14: ^( ANY_MODE ( SQL92_RESERVED_ANY )+ )
					{
					match(input,ANY_MODE,FOLLOW_ANY_MODE_in_pivot_in_clause11857); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1223:25: ( SQL92_RESERVED_ANY )+
					int cnt257=0;
					loop257:
					while (true) {
						int alt257=2;
						int LA257_0 = input.LA(1);
						if ( (LA257_0==SQL92_RESERVED_ANY) ) {
							alt257=1;
						}

						switch (alt257) {
						case 1 :
							// PLSQLPrinter.g:1223:25: SQL92_RESERVED_ANY
							{
							match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_pivot_in_clause11859); 
							}
							break;

						default :
							if ( cnt257 >= 1 ) break loop257;
							EarlyExitException eee = new EarlyExitException(257, input);
							throw eee;
						}
						cnt257++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1224:14: ^( ELEMENTS_MODE ( pivot_in_clause_element )+ )
					{
					match(input,ELEMENTS_MODE,FOLLOW_ELEMENTS_MODE_in_pivot_in_clause11877); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1224:30: ( pivot_in_clause_element )+
					int cnt258=0;
					loop258:
					while (true) {
						int alt258=2;
						int LA258_0 = input.LA(1);
						if ( (LA258_0==PIVOT_IN_ELEMENT) ) {
							alt258=1;
						}

						switch (alt258) {
						case 1 :
							// PLSQLPrinter.g:1224:30: pivot_in_clause_element
							{
							pushFollow(FOLLOW_pivot_in_clause_element_in_pivot_in_clause11879);
							pivot_in_clause_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt258 >= 1 ) break loop258;
							EarlyExitException eee = new EarlyExitException(258, input);
							throw eee;
						}
						cnt258++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1227:5: -> template( \"not implemented: pivot_in_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_in_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_in_clause"


	public static class pivot_in_clause_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_in_clause_element"
	// PLSQLPrinter.g:1230:1: pivot_in_clause_element : ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) ) -> template( \"not implemented: pivot_in_clause_element\";
	public final PLSQLPrinter.pivot_in_clause_element_return pivot_in_clause_element() throws RecognitionException {
		PLSQLPrinter.pivot_in_clause_element_return retval = new PLSQLPrinter.pivot_in_clause_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1231:5: ( ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) ) -> template( \"not implemented: pivot_in_clause_element\")
			// PLSQLPrinter.g:1231:10: ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) )
			{
			match(input,PIVOT_IN_ELEMENT,FOLLOW_PIVOT_IN_ELEMENT_in_pivot_in_clause_element11936); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1231:29: ( alias )?
			int alt260=2;
			int LA260_0 = input.LA(1);
			if ( (LA260_0==COLUMN_ALIAS||LA260_0==TABLE_ALIAS) ) {
				alt260=1;
			}
			switch (alt260) {
				case 1 :
					// PLSQLPrinter.g:1231:29: alias
					{
					pushFollow(FOLLOW_alias_in_pivot_in_clause_element11938);
					alias();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1231:36: ( expression | expression_list )
			int alt261=2;
			int LA261_0 = input.LA(1);
			if ( (LA261_0==EXPR||LA261_0==LOGIC_EXPR) ) {
				alt261=1;
			}
			else if ( (LA261_0==EXPR_LIST) ) {
				alt261=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 261, 0, input);
				throw nvae;
			}

			switch (alt261) {
				case 1 :
					// PLSQLPrinter.g:1231:37: expression
					{
					pushFollow(FOLLOW_expression_in_pivot_in_clause_element11942);
					expression();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1231:48: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_pivot_in_clause_element11944);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1232:5: -> template( \"not implemented: pivot_in_clause_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_in_clause_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_in_clause_element"


	public static class unpivot_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unpivot_clause"
	// PLSQLPrinter.g:1235:1: unpivot_clause : ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause ) -> template( \"not implemented: unpivot_clause\";
	public final PLSQLPrinter.unpivot_clause_return unpivot_clause() throws RecognitionException {
		PLSQLPrinter.unpivot_clause_return retval = new PLSQLPrinter.unpivot_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1236:5: ( ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause ) -> template( \"not implemented: unpivot_clause\")
			// PLSQLPrinter.g:1236:10: ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause )
			{
			match(input,UNPIVOT_VK,FOLLOW_UNPIVOT_VK_in_unpivot_clause11981); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1236:23: ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )?
			int alt264=2;
			int LA264_0 = input.LA(1);
			if ( (LA264_0==EXCLUDE_VK||LA264_0==INCLUDE_VK) ) {
				alt264=1;
			}
			switch (alt264) {
				case 1 :
					// PLSQLPrinter.g:1236:24: ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )?
					{
					// PLSQLPrinter.g:1236:24: ( INCLUDE_VK | EXCLUDE_VK )
					int alt262=2;
					int LA262_0 = input.LA(1);
					if ( (LA262_0==INCLUDE_VK) ) {
						alt262=1;
					}
					else if ( (LA262_0==EXCLUDE_VK) ) {
						alt262=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 262, 0, input);
						throw nvae;
					}

					switch (alt262) {
						case 1 :
							// PLSQLPrinter.g:1236:25: INCLUDE_VK
							{
							match(input,INCLUDE_VK,FOLLOW_INCLUDE_VK_in_unpivot_clause11985); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1236:36: EXCLUDE_VK
							{
							match(input,EXCLUDE_VK,FOLLOW_EXCLUDE_VK_in_unpivot_clause11987); 
							}
							break;

					}

					// PLSQLPrinter.g:1236:48: ( NULLS_VK )?
					int alt263=2;
					int LA263_0 = input.LA(1);
					if ( (LA263_0==NULLS_VK) ) {
						alt263=1;
					}
					switch (alt263) {
						case 1 :
							// PLSQLPrinter.g:1236:48: NULLS_VK
							{
							match(input,NULLS_VK,FOLLOW_NULLS_VK_in_unpivot_clause11990); 
							}
							break;

					}

					}
					break;

			}

			// PLSQLPrinter.g:1236:60: ( column_name )+
			int cnt265=0;
			loop265:
			while (true) {
				int alt265=2;
				int LA265_0 = input.LA(1);
				if ( (LA265_0==COLUMN_NAME) ) {
					alt265=1;
				}

				switch (alt265) {
				case 1 :
					// PLSQLPrinter.g:1236:60: column_name
					{
					pushFollow(FOLLOW_column_name_in_unpivot_clause11995);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt265 >= 1 ) break loop265;
					EarlyExitException eee = new EarlyExitException(265, input);
					throw eee;
				}
				cnt265++;
			}

			pushFollow(FOLLOW_pivot_for_clause_in_unpivot_clause11998);
			pivot_for_clause();
			state._fsp--;

			pushFollow(FOLLOW_unpivot_in_clause_in_unpivot_clause12000);
			unpivot_in_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1237:5: -> template( \"not implemented: unpivot_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: unpivot_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unpivot_clause"


	public static class unpivot_in_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unpivot_in_clause"
	// PLSQLPrinter.g:1240:1: unpivot_in_clause : ^( SQL92_RESERVED_IN ( unpivot_in_element )+ ) -> template( \"not implemented: unpivot_in_clause\";
	public final PLSQLPrinter.unpivot_in_clause_return unpivot_in_clause() throws RecognitionException {
		PLSQLPrinter.unpivot_in_clause_return retval = new PLSQLPrinter.unpivot_in_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1241:5: ( ^( SQL92_RESERVED_IN ( unpivot_in_element )+ ) -> template( \"not implemented: unpivot_in_clause\")
			// PLSQLPrinter.g:1241:10: ^( SQL92_RESERVED_IN ( unpivot_in_element )+ )
			{
			match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_unpivot_in_clause12036); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1241:30: ( unpivot_in_element )+
			int cnt266=0;
			loop266:
			while (true) {
				int alt266=2;
				int LA266_0 = input.LA(1);
				if ( (LA266_0==UNPIVOT_IN_ELEMENT) ) {
					alt266=1;
				}

				switch (alt266) {
				case 1 :
					// PLSQLPrinter.g:1241:30: unpivot_in_element
					{
					pushFollow(FOLLOW_unpivot_in_element_in_unpivot_in_clause12038);
					unpivot_in_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt266 >= 1 ) break loop266;
					EarlyExitException eee = new EarlyExitException(266, input);
					throw eee;
				}
				cnt266++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1242:5: -> template( \"not implemented: unpivot_in_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: unpivot_in_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unpivot_in_clause"


	public static class unpivot_in_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unpivot_in_element"
	// PLSQLPrinter.g:1245:1: unpivot_in_element : ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) ) -> template( \"not implemented: unpivot_in_element\";
	public final PLSQLPrinter.unpivot_in_element_return unpivot_in_element() throws RecognitionException {
		PLSQLPrinter.unpivot_in_element_return retval = new PLSQLPrinter.unpivot_in_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1246:5: ( ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) ) -> template( \"not implemented: unpivot_in_element\")
			// PLSQLPrinter.g:1246:10: ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) )
			{
			match(input,UNPIVOT_IN_ELEMENT,FOLLOW_UNPIVOT_IN_ELEMENT_in_unpivot_in_element12075); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1246:31: ( column_name )+
			int cnt267=0;
			loop267:
			while (true) {
				int alt267=2;
				int LA267_0 = input.LA(1);
				if ( (LA267_0==COLUMN_NAME) ) {
					alt267=1;
				}

				switch (alt267) {
				case 1 :
					// PLSQLPrinter.g:1246:31: column_name
					{
					pushFollow(FOLLOW_column_name_in_unpivot_in_element12077);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt267 >= 1 ) break loop267;
					EarlyExitException eee = new EarlyExitException(267, input);
					throw eee;
				}
				cnt267++;
			}

			match(input,PIVOT_ALIAS,FOLLOW_PIVOT_ALIAS_in_unpivot_in_element12081); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1246:58: ( expression | expression_list )
			int alt268=2;
			int LA268_0 = input.LA(1);
			if ( (LA268_0==EXPR||LA268_0==LOGIC_EXPR) ) {
				alt268=1;
			}
			else if ( (LA268_0==EXPR_LIST) ) {
				alt268=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 268, 0, input);
				throw nvae;
			}

			switch (alt268) {
				case 1 :
					// PLSQLPrinter.g:1246:59: expression
					{
					pushFollow(FOLLOW_expression_in_unpivot_in_element12084);
					expression();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1246:70: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_unpivot_in_element12086);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1247:5: -> template( \"not implemented: unpivot_in_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: unpivot_in_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unpivot_in_element"


	public static class hierarchical_query_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "hierarchical_query_clause"
	// PLSQLPrinter.g:1250:1: hierarchical_query_clause : ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) ) -> template( \"not implemented: hierarchical_query_clause\";
	public final PLSQLPrinter.hierarchical_query_clause_return hierarchical_query_clause() throws RecognitionException {
		PLSQLPrinter.hierarchical_query_clause_return retval = new PLSQLPrinter.hierarchical_query_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1251:5: ( ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) ) -> template( \"not implemented: hierarchical_query_clause\")
			// PLSQLPrinter.g:1251:10: ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) )
			{
			match(input,HIERARCHICAL,FOLLOW_HIERARCHICAL_in_hierarchical_query_clause12124); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1251:25: ( start_part )?
			int alt269=2;
			int LA269_0 = input.LA(1);
			if ( (LA269_0==PLSQL_RESERVED_START) ) {
				alt269=1;
			}
			switch (alt269) {
				case 1 :
					// PLSQLPrinter.g:1251:25: start_part
					{
					pushFollow(FOLLOW_start_part_in_hierarchical_query_clause12126);
					start_part();
					state._fsp--;

					}
					break;

			}

			match(input,SQL92_RESERVED_CONNECT,FOLLOW_SQL92_RESERVED_CONNECT_in_hierarchical_query_clause12130); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1251:62: ( NOCYCLE_VK )?
			int alt270=2;
			int LA270_0 = input.LA(1);
			if ( (LA270_0==NOCYCLE_VK) ) {
				alt270=1;
			}
			switch (alt270) {
				case 1 :
					// PLSQLPrinter.g:1251:62: NOCYCLE_VK
					{
					match(input,NOCYCLE_VK,FOLLOW_NOCYCLE_VK_in_hierarchical_query_clause12132); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_hierarchical_query_clause12135);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1252:5: -> template( \"not implemented: hierarchical_query_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: hierarchical_query_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "hierarchical_query_clause"


	public static class start_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "start_part"
	// PLSQLPrinter.g:1255:1: start_part : ^( PLSQL_RESERVED_START expression ) -> template( \"not implemented: start_part\";
	public final PLSQLPrinter.start_part_return start_part() throws RecognitionException {
		PLSQLPrinter.start_part_return retval = new PLSQLPrinter.start_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1256:5: ( ^( PLSQL_RESERVED_START expression ) -> template( \"not implemented: start_part\")
			// PLSQLPrinter.g:1256:10: ^( PLSQL_RESERVED_START expression )
			{
			match(input,PLSQL_RESERVED_START,FOLLOW_PLSQL_RESERVED_START_in_start_part12172); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_start_part12174);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1257:5: -> template( \"not implemented: start_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: start_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "start_part"


	public static class group_by_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "group_by_clause"
	// PLSQLPrinter.g:1260:1: group_by_clause : ^( SQL92_RESERVED_GROUP ( group_by_element )+ ( having_clause )? ) -> template( \"not implemented: group_by_clause\";
	public final PLSQLPrinter.group_by_clause_return group_by_clause() throws RecognitionException {
		PLSQLPrinter.group_by_clause_return retval = new PLSQLPrinter.group_by_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1261:5: ( ^( SQL92_RESERVED_GROUP ( group_by_element )+ ( having_clause )? ) -> template( \"not implemented: group_by_clause\")
			// PLSQLPrinter.g:1261:10: ^( SQL92_RESERVED_GROUP ( group_by_element )+ ( having_clause )? )
			{
			match(input,SQL92_RESERVED_GROUP,FOLLOW_SQL92_RESERVED_GROUP_in_group_by_clause12210); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1261:33: ( group_by_element )+
			int cnt271=0;
			loop271:
			while (true) {
				int alt271=2;
				int LA271_0 = input.LA(1);
				if ( (LA271_0==GROUP_BY_ELEMENT) ) {
					alt271=1;
				}

				switch (alt271) {
				case 1 :
					// PLSQLPrinter.g:1261:33: group_by_element
					{
					pushFollow(FOLLOW_group_by_element_in_group_by_clause12212);
					group_by_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt271 >= 1 ) break loop271;
					EarlyExitException eee = new EarlyExitException(271, input);
					throw eee;
				}
				cnt271++;
			}

			// PLSQLPrinter.g:1261:51: ( having_clause )?
			int alt272=2;
			int LA272_0 = input.LA(1);
			if ( (LA272_0==SQL92_RESERVED_HAVING) ) {
				alt272=1;
			}
			switch (alt272) {
				case 1 :
					// PLSQLPrinter.g:1261:51: having_clause
					{
					pushFollow(FOLLOW_having_clause_in_group_by_clause12215);
					having_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1262:5: -> template( \"not implemented: group_by_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: group_by_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_by_clause"


	public static class group_by_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "group_by_element"
	// PLSQLPrinter.g:1265:1: group_by_element : ^( GROUP_BY_ELEMENT group_by_elements ) -> template( \"not implemented: group_by_element\";
	public final PLSQLPrinter.group_by_element_return group_by_element() throws RecognitionException {
		PLSQLPrinter.group_by_element_return retval = new PLSQLPrinter.group_by_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1266:5: ( ^( GROUP_BY_ELEMENT group_by_elements ) -> template( \"not implemented: group_by_element\")
			// PLSQLPrinter.g:1266:10: ^( GROUP_BY_ELEMENT group_by_elements )
			{
			match(input,GROUP_BY_ELEMENT,FOLLOW_GROUP_BY_ELEMENT_in_group_by_element12252); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_group_by_elements_in_group_by_element12254);
			group_by_elements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1267:5: -> template( \"not implemented: group_by_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: group_by_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_by_element"


	public static class group_by_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "group_by_elements"
	// PLSQLPrinter.g:1270:1: group_by_elements : ( ^( GROUPING_VK ( groupin_set )+ ) -> template( \"not implemented: group_by_elements\"| grouping_element -> template( \"not implemented: group_by_elements\");
	public final PLSQLPrinter.group_by_elements_return group_by_elements() throws RecognitionException {
		PLSQLPrinter.group_by_elements_return retval = new PLSQLPrinter.group_by_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1271:5: ( ^( GROUPING_VK ( groupin_set )+ ) -> template( \"not implemented: group_by_elements\"| grouping_element -> template( \"not implemented: group_by_elements\")
			int alt274=2;
			int LA274_0 = input.LA(1);
			if ( (LA274_0==GROUPING_VK) ) {
				alt274=1;
			}
			else if ( (LA274_0==CUBE_VK||(LA274_0 >= EXPR && LA274_0 <= EXPR_LIST)||LA274_0==LOGIC_EXPR||LA274_0==ROLLUP_VK) ) {
				alt274=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 274, 0, input);
				throw nvae;
			}

			switch (alt274) {
				case 1 :
					// PLSQLPrinter.g:1271:10: ^( GROUPING_VK ( groupin_set )+ )
					{
					match(input,GROUPING_VK,FOLLOW_GROUPING_VK_in_group_by_elements12290); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1271:24: ( groupin_set )+
					int cnt273=0;
					loop273:
					while (true) {
						int alt273=2;
						int LA273_0 = input.LA(1);
						if ( (LA273_0==GROUPIN_SET) ) {
							alt273=1;
						}

						switch (alt273) {
						case 1 :
							// PLSQLPrinter.g:1271:24: groupin_set
							{
							pushFollow(FOLLOW_groupin_set_in_group_by_elements12292);
							groupin_set();
							state._fsp--;

							}
							break;

						default :
							if ( cnt273 >= 1 ) break loop273;
							EarlyExitException eee = new EarlyExitException(273, input);
							throw eee;
						}
						cnt273++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1272:5: -> template( \"not implemented: group_by_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: group_by_elements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1273:10: grouping_element
					{
					pushFollow(FOLLOW_grouping_element_in_group_by_elements12319);
					grouping_element();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1274:5: -> template( \"not implemented: group_by_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: group_by_elements");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_by_elements"


	public static class groupin_set_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "groupin_set"
	// PLSQLPrinter.g:1277:1: groupin_set : ^( GROUPIN_SET grouping_element ) -> template( \"not implemented: groupin_set\";
	public final PLSQLPrinter.groupin_set_return groupin_set() throws RecognitionException {
		PLSQLPrinter.groupin_set_return retval = new PLSQLPrinter.groupin_set_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1278:5: ( ^( GROUPIN_SET grouping_element ) -> template( \"not implemented: groupin_set\")
			// PLSQLPrinter.g:1278:10: ^( GROUPIN_SET grouping_element )
			{
			match(input,GROUPIN_SET,FOLLOW_GROUPIN_SET_in_groupin_set12355); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_grouping_element_in_groupin_set12357);
			grouping_element();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1279:5: -> template( \"not implemented: groupin_set\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: groupin_set");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "groupin_set"


	public static class grouping_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "grouping_element"
	// PLSQLPrinter.g:1282:1: grouping_element : ( ^( ( ROLLUP_VK | CUBE_VK ) ( grouping_element )+ ) -> template( \"not implemented: grouping_element\"| expression_list -> template( \"not implemented: grouping_element\"| expression -> template( \"not implemented: grouping_element\");
	public final PLSQLPrinter.grouping_element_return grouping_element() throws RecognitionException {
		PLSQLPrinter.grouping_element_return retval = new PLSQLPrinter.grouping_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1283:5: ( ^( ( ROLLUP_VK | CUBE_VK ) ( grouping_element )+ ) -> template( \"not implemented: grouping_element\"| expression_list -> template( \"not implemented: grouping_element\"| expression -> template( \"not implemented: grouping_element\")
			int alt277=3;
			switch ( input.LA(1) ) {
			case CUBE_VK:
			case ROLLUP_VK:
				{
				alt277=1;
				}
				break;
			case EXPR_LIST:
				{
				alt277=2;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt277=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 277, 0, input);
				throw nvae;
			}
			switch (alt277) {
				case 1 :
					// PLSQLPrinter.g:1283:10: ^( ( ROLLUP_VK | CUBE_VK ) ( grouping_element )+ )
					{
					// PLSQLPrinter.g:1283:12: ( ROLLUP_VK | CUBE_VK )
					int alt275=2;
					int LA275_0 = input.LA(1);
					if ( (LA275_0==ROLLUP_VK) ) {
						alt275=1;
					}
					else if ( (LA275_0==CUBE_VK) ) {
						alt275=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 275, 0, input);
						throw nvae;
					}

					switch (alt275) {
						case 1 :
							// PLSQLPrinter.g:1283:13: ROLLUP_VK
							{
							match(input,ROLLUP_VK,FOLLOW_ROLLUP_VK_in_grouping_element12394); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1283:23: CUBE_VK
							{
							match(input,CUBE_VK,FOLLOW_CUBE_VK_in_grouping_element12396); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1283:32: ( grouping_element )+
					int cnt276=0;
					loop276:
					while (true) {
						int alt276=2;
						int LA276_0 = input.LA(1);
						if ( (LA276_0==CUBE_VK||(LA276_0 >= EXPR && LA276_0 <= EXPR_LIST)||LA276_0==LOGIC_EXPR||LA276_0==ROLLUP_VK) ) {
							alt276=1;
						}

						switch (alt276) {
						case 1 :
							// PLSQLPrinter.g:1283:32: grouping_element
							{
							pushFollow(FOLLOW_grouping_element_in_grouping_element12399);
							grouping_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt276 >= 1 ) break loop276;
							EarlyExitException eee = new EarlyExitException(276, input);
							throw eee;
						}
						cnt276++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1284:5: -> template( \"not implemented: grouping_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: grouping_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1285:10: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_grouping_element12426);
					expression_list();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1286:5: -> template( \"not implemented: grouping_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: grouping_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1287:10: expression
					{
					pushFollow(FOLLOW_expression_in_grouping_element12451);
					expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1288:5: -> template( \"not implemented: grouping_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: grouping_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grouping_element"


	public static class having_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "having_clause"
	// PLSQLPrinter.g:1291:1: having_clause : ^( SQL92_RESERVED_HAVING expression ) -> template( \"not implemented: having_clause\";
	public final PLSQLPrinter.having_clause_return having_clause() throws RecognitionException {
		PLSQLPrinter.having_clause_return retval = new PLSQLPrinter.having_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1292:5: ( ^( SQL92_RESERVED_HAVING expression ) -> template( \"not implemented: having_clause\")
			// PLSQLPrinter.g:1292:10: ^( SQL92_RESERVED_HAVING expression )
			{
			match(input,SQL92_RESERVED_HAVING,FOLLOW_SQL92_RESERVED_HAVING_in_having_clause12487); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_having_clause12489);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1293:5: -> template( \"not implemented: having_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: having_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "having_clause"


	public static class model_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_clause"
	// PLSQLPrinter.g:1296:1: model_clause : ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) -> template( \"not implemented: model_clause\";
	public final PLSQLPrinter.model_clause_return model_clause() throws RecognitionException {
		PLSQLPrinter.model_clause_return retval = new PLSQLPrinter.model_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1297:5: ( ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) -> template( \"not implemented: model_clause\")
			// PLSQLPrinter.g:1297:10: ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* )
			{
			match(input,PLSQL_NON_RESERVED_MODEL,FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_clause12525); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_main_model_in_model_clause12527);
			main_model();
			state._fsp--;

			// PLSQLPrinter.g:1297:48: ( cell_reference_options )*
			loop278:
			while (true) {
				int alt278=2;
				int LA278_0 = input.LA(1);
				if ( (LA278_0==SQL92_RESERVED_UNIQUE||LA278_0==IGNORE_VK||LA278_0==KEEP_VK) ) {
					alt278=1;
				}

				switch (alt278) {
				case 1 :
					// PLSQLPrinter.g:1297:48: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_model_clause12529);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop278;
				}
			}

			// PLSQLPrinter.g:1297:72: ( return_rows_clause )?
			int alt279=2;
			int LA279_0 = input.LA(1);
			if ( (LA279_0==RETURN_VK) ) {
				alt279=1;
			}
			switch (alt279) {
				case 1 :
					// PLSQLPrinter.g:1297:72: return_rows_clause
					{
					pushFollow(FOLLOW_return_rows_clause_in_model_clause12532);
					return_rows_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1297:92: ( reference_model )*
			loop280:
			while (true) {
				int alt280=2;
				int LA280_0 = input.LA(1);
				if ( (LA280_0==REFERENCE_VK) ) {
					alt280=1;
				}

				switch (alt280) {
				case 1 :
					// PLSQLPrinter.g:1297:92: reference_model
					{
					pushFollow(FOLLOW_reference_model_in_model_clause12535);
					reference_model();
					state._fsp--;

					}
					break;

				default :
					break loop280;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1298:5: -> template( \"not implemented: model_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_clause"


	public static class cell_reference_options_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cell_reference_options"
	// PLSQLPrinter.g:1301:1: cell_reference_options : ( ^( ( IGNORE_VK | KEEP_VK ) NAV_VK ) | ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) ) -> template( \"not implemented: cell_reference_options\");
	public final PLSQLPrinter.cell_reference_options_return cell_reference_options() throws RecognitionException {
		PLSQLPrinter.cell_reference_options_return retval = new PLSQLPrinter.cell_reference_options_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1302:5: ( ^( ( IGNORE_VK | KEEP_VK ) NAV_VK ) | ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) ) -> template( \"not implemented: cell_reference_options\")
			int alt282=2;
			int LA282_0 = input.LA(1);
			if ( (LA282_0==IGNORE_VK||LA282_0==KEEP_VK) ) {
				alt282=1;
			}
			else if ( (LA282_0==SQL92_RESERVED_UNIQUE) ) {
				alt282=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 282, 0, input);
				throw nvae;
			}

			switch (alt282) {
				case 1 :
					// PLSQLPrinter.g:1302:10: ^( ( IGNORE_VK | KEEP_VK ) NAV_VK )
					{
					if ( input.LA(1)==IGNORE_VK||input.LA(1)==KEEP_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					match(input,NAV_VK,FOLLOW_NAV_VK_in_cell_reference_options12578); 
					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1303:10: ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) )
					{
					match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_cell_reference_options12591); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1303:34: ( DIMENSION_VK | SINGLE_VK )
					int alt281=2;
					int LA281_0 = input.LA(1);
					if ( (LA281_0==DIMENSION_VK) ) {
						alt281=1;
					}
					else if ( (LA281_0==SINGLE_VK) ) {
						alt281=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 281, 0, input);
						throw nvae;
					}

					switch (alt281) {
						case 1 :
							// PLSQLPrinter.g:1303:35: DIMENSION_VK
							{
							match(input,DIMENSION_VK,FOLLOW_DIMENSION_VK_in_cell_reference_options12594); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1303:48: SINGLE_VK
							{
							match(input,SINGLE_VK,FOLLOW_SINGLE_VK_in_cell_reference_options12596); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1304:5: -> template( \"not implemented: cell_reference_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: cell_reference_options");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cell_reference_options"


	public static class return_rows_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "return_rows_clause"
	// PLSQLPrinter.g:1307:1: return_rows_clause : ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) ) -> template( \"not implemented: return_rows_clause\";
	public final PLSQLPrinter.return_rows_clause_return return_rows_clause() throws RecognitionException {
		PLSQLPrinter.return_rows_clause_return retval = new PLSQLPrinter.return_rows_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1308:5: ( ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) ) -> template( \"not implemented: return_rows_clause\")
			// PLSQLPrinter.g:1308:10: ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) )
			{
			match(input,RETURN_VK,FOLLOW_RETURN_VK_in_return_rows_clause12633); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1308:22: ( UPDATED_VK | SQL92_RESERVED_ALL )
			int alt283=2;
			int LA283_0 = input.LA(1);
			if ( (LA283_0==UPDATED_VK) ) {
				alt283=1;
			}
			else if ( (LA283_0==SQL92_RESERVED_ALL) ) {
				alt283=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 283, 0, input);
				throw nvae;
			}

			switch (alt283) {
				case 1 :
					// PLSQLPrinter.g:1308:23: UPDATED_VK
					{
					match(input,UPDATED_VK,FOLLOW_UPDATED_VK_in_return_rows_clause12636); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1308:34: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_return_rows_clause12638); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1309:5: -> template( \"not implemented: return_rows_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: return_rows_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "return_rows_clause"


	public static class reference_model_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "reference_model"
	// PLSQLPrinter.g:1312:1: reference_model : ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* ) -> template( \"not implemented: reference_model\";
	public final PLSQLPrinter.reference_model_return reference_model() throws RecognitionException {
		PLSQLPrinter.reference_model_return retval = new PLSQLPrinter.reference_model_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1313:5: ( ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* ) -> template( \"not implemented: reference_model\")
			// PLSQLPrinter.g:1313:10: ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* )
			{
			match(input,REFERENCE_VK,FOLLOW_REFERENCE_VK_in_reference_model12675); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_reference_model_name_in_reference_model12677);
			reference_model_name();
			state._fsp--;

			pushFollow(FOLLOW_subquery_in_reference_model12679);
			subquery();
			state._fsp--;

			pushFollow(FOLLOW_model_column_clauses_in_reference_model12681);
			model_column_clauses();
			state._fsp--;

			// PLSQLPrinter.g:1313:76: ( cell_reference_options )*
			loop284:
			while (true) {
				int alt284=2;
				int LA284_0 = input.LA(1);
				if ( (LA284_0==SQL92_RESERVED_UNIQUE||LA284_0==IGNORE_VK||LA284_0==KEEP_VK) ) {
					alt284=1;
				}

				switch (alt284) {
				case 1 :
					// PLSQLPrinter.g:1313:76: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_reference_model12683);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop284;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1314:5: -> template( \"not implemented: reference_model\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: reference_model");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reference_model"


	public static class main_model_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "main_model"
	// PLSQLPrinter.g:1317:1: main_model : ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) -> template( \"not implemented: main_model\";
	public final PLSQLPrinter.main_model_return main_model() throws RecognitionException {
		PLSQLPrinter.main_model_return retval = new PLSQLPrinter.main_model_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1318:5: ( ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) -> template( \"not implemented: main_model\")
			// PLSQLPrinter.g:1318:10: ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* )
			{
			match(input,MAIN_MODEL,FOLLOW_MAIN_MODEL_in_main_model12720); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1318:23: ( main_model_name )?
			int alt285=2;
			int LA285_0 = input.LA(1);
			if ( (LA285_0==MAIN_MODEL_NAME) ) {
				alt285=1;
			}
			switch (alt285) {
				case 1 :
					// PLSQLPrinter.g:1318:23: main_model_name
					{
					pushFollow(FOLLOW_main_model_name_in_main_model12722);
					main_model_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_model_column_clauses_in_main_model12725);
			model_column_clauses();
			state._fsp--;

			pushFollow(FOLLOW_model_rules_clause_in_main_model12727);
			model_rules_clause();
			state._fsp--;

			// PLSQLPrinter.g:1318:80: ( cell_reference_options )*
			loop286:
			while (true) {
				int alt286=2;
				int LA286_0 = input.LA(1);
				if ( (LA286_0==SQL92_RESERVED_UNIQUE||LA286_0==IGNORE_VK||LA286_0==KEEP_VK) ) {
					alt286=1;
				}

				switch (alt286) {
				case 1 :
					// PLSQLPrinter.g:1318:80: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_main_model12729);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop286;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1319:5: -> template( \"not implemented: main_model\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: main_model");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "main_model"


	public static class model_column_clauses_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column_clauses"
	// PLSQLPrinter.g:1322:1: model_column_clauses : ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? ) -> template( \"not implemented: model_column_clauses\";
	public final PLSQLPrinter.model_column_clauses_return model_column_clauses() throws RecognitionException {
		PLSQLPrinter.model_column_clauses_return retval = new PLSQLPrinter.model_column_clauses_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1323:5: ( ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? ) -> template( \"not implemented: model_column_clauses\")
			// PLSQLPrinter.g:1323:10: ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? )
			{
			match(input,MODEL_COLUMN,FOLLOW_MODEL_COLUMN_in_model_column_clauses12766); 
			match(input, Token.DOWN, null); 
			match(input,DIMENSION_VK,FOLLOW_DIMENSION_VK_in_model_column_clauses12769); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_clauses12771);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input,MEASURES_VK,FOLLOW_MEASURES_VK_in_model_column_clauses12775); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_clauses12777);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1323:92: ( model_column_partition_part )?
			int alt287=2;
			int LA287_0 = input.LA(1);
			if ( (LA287_0==PARTITION_VK) ) {
				alt287=1;
			}
			switch (alt287) {
				case 1 :
					// PLSQLPrinter.g:1323:92: model_column_partition_part
					{
					pushFollow(FOLLOW_model_column_partition_part_in_model_column_clauses12780);
					model_column_partition_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1324:5: -> template( \"not implemented: model_column_clauses\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column_clauses");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column_clauses"


	public static class model_column_partition_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column_partition_part"
	// PLSQLPrinter.g:1327:1: model_column_partition_part : ^( PARTITION_VK model_column_list ) -> template( \"not implemented: model_column_partition_part\";
	public final PLSQLPrinter.model_column_partition_part_return model_column_partition_part() throws RecognitionException {
		PLSQLPrinter.model_column_partition_part_return retval = new PLSQLPrinter.model_column_partition_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1328:5: ( ^( PARTITION_VK model_column_list ) -> template( \"not implemented: model_column_partition_part\")
			// PLSQLPrinter.g:1328:10: ^( PARTITION_VK model_column_list )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_model_column_partition_part12817); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_partition_part12819);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1329:5: -> template( \"not implemented: model_column_partition_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column_partition_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column_partition_part"


	public static class model_column_list_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column_list"
	// PLSQLPrinter.g:1332:1: model_column_list : ^( MODEL_COLUMNS ( model_column )+ ) -> template( \"not implemented: model_column_list\";
	public final PLSQLPrinter.model_column_list_return model_column_list() throws RecognitionException {
		PLSQLPrinter.model_column_list_return retval = new PLSQLPrinter.model_column_list_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1333:5: ( ^( MODEL_COLUMNS ( model_column )+ ) -> template( \"not implemented: model_column_list\")
			// PLSQLPrinter.g:1333:10: ^( MODEL_COLUMNS ( model_column )+ )
			{
			match(input,MODEL_COLUMNS,FOLLOW_MODEL_COLUMNS_in_model_column_list12855); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1333:26: ( model_column )+
			int cnt288=0;
			loop288:
			while (true) {
				int alt288=2;
				int LA288_0 = input.LA(1);
				if ( (LA288_0==MODEL_COLUMN) ) {
					alt288=1;
				}

				switch (alt288) {
				case 1 :
					// PLSQLPrinter.g:1333:26: model_column
					{
					pushFollow(FOLLOW_model_column_in_model_column_list12857);
					model_column();
					state._fsp--;

					}
					break;

				default :
					if ( cnt288 >= 1 ) break loop288;
					EarlyExitException eee = new EarlyExitException(288, input);
					throw eee;
				}
				cnt288++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1334:5: -> template( \"not implemented: model_column_list\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column_list");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column_list"


	public static class model_column_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column"
	// PLSQLPrinter.g:1337:1: model_column : ^( MODEL_COLUMN ( alias )? expression ) -> template( \"not implemented: model_column\";
	public final PLSQLPrinter.model_column_return model_column() throws RecognitionException {
		PLSQLPrinter.model_column_return retval = new PLSQLPrinter.model_column_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1338:5: ( ^( MODEL_COLUMN ( alias )? expression ) -> template( \"not implemented: model_column\")
			// PLSQLPrinter.g:1338:10: ^( MODEL_COLUMN ( alias )? expression )
			{
			match(input,MODEL_COLUMN,FOLLOW_MODEL_COLUMN_in_model_column12894); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1338:25: ( alias )?
			int alt289=2;
			int LA289_0 = input.LA(1);
			if ( (LA289_0==COLUMN_ALIAS||LA289_0==TABLE_ALIAS) ) {
				alt289=1;
			}
			switch (alt289) {
				case 1 :
					// PLSQLPrinter.g:1338:25: alias
					{
					pushFollow(FOLLOW_alias_in_model_column12896);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_expression_in_model_column12899);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1339:5: -> template( \"not implemented: model_column\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column"


	public static class model_rules_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_rules_clause"
	// PLSQLPrinter.g:1342:1: model_rules_clause : ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) -> template( \"not implemented: model_rules_clause\";
	public final PLSQLPrinter.model_rules_clause_return model_rules_clause() throws RecognitionException {
		PLSQLPrinter.model_rules_clause_return retval = new PLSQLPrinter.model_rules_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1343:5: ( ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) -> template( \"not implemented: model_rules_clause\")
			// PLSQLPrinter.g:1343:10: ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? )
			{
			match(input,MODEL_RULES,FOLLOW_MODEL_RULES_in_model_rules_clause12936); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1343:24: ( model_rules_element )+
			int cnt290=0;
			loop290:
			while (true) {
				int alt290=2;
				int LA290_0 = input.LA(1);
				if ( (LA290_0==MODEL_RULE) ) {
					alt290=1;
				}

				switch (alt290) {
				case 1 :
					// PLSQLPrinter.g:1343:24: model_rules_element
					{
					pushFollow(FOLLOW_model_rules_element_in_model_rules_clause12938);
					model_rules_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt290 >= 1 ) break loop290;
					EarlyExitException eee = new EarlyExitException(290, input);
					throw eee;
				}
				cnt290++;
			}

			// PLSQLPrinter.g:1343:45: ( model_rules_part )?
			int alt291=2;
			int LA291_0 = input.LA(1);
			if ( (LA291_0==RULES_VK) ) {
				alt291=1;
			}
			switch (alt291) {
				case 1 :
					// PLSQLPrinter.g:1343:45: model_rules_part
					{
					pushFollow(FOLLOW_model_rules_part_in_model_rules_clause12941);
					model_rules_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1344:5: -> template( \"not implemented: model_rules_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_rules_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_rules_clause"


	public static class model_rules_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_rules_part"
	// PLSQLPrinter.g:1347:1: model_rules_part : ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? ) -> template( \"not implemented: model_rules_part\";
	public final PLSQLPrinter.model_rules_part_return model_rules_part() throws RecognitionException {
		PLSQLPrinter.model_rules_part_return retval = new PLSQLPrinter.model_rules_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1348:5: ( ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? ) -> template( \"not implemented: model_rules_part\")
			// PLSQLPrinter.g:1348:10: ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? )
			{
			match(input,RULES_VK,FOLLOW_RULES_VK_in_model_rules_part12978); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1349:13: ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )?
				int alt293=3;
				int LA293_0 = input.LA(1);
				if ( (LA293_0==SQL92_RESERVED_UPDATE) ) {
					alt293=1;
				}
				else if ( (LA293_0==UPSERT_VK) ) {
					alt293=2;
				}
				switch (alt293) {
					case 1 :
						// PLSQLPrinter.g:1349:14: SQL92_RESERVED_UPDATE
						{
						match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_part12994); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1349:36: UPSERT_VK ( SQL92_RESERVED_ALL )?
						{
						match(input,UPSERT_VK,FOLLOW_UPSERT_VK_in_model_rules_part12996); 
						// PLSQLPrinter.g:1349:46: ( SQL92_RESERVED_ALL )?
						int alt292=2;
						int LA292_0 = input.LA(1);
						if ( (LA292_0==SQL92_RESERVED_ALL) ) {
							alt292=1;
						}
						switch (alt292) {
							case 1 :
								// PLSQLPrinter.g:1349:46: SQL92_RESERVED_ALL
								{
								match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_model_rules_part12998); 
								}
								break;

						}

						}
						break;

				}

				// PLSQLPrinter.g:1350:13: ( AUTOMATIC_VK | SEQUENTIAL_VK )?
				int alt294=3;
				int LA294_0 = input.LA(1);
				if ( (LA294_0==AUTOMATIC_VK) ) {
					alt294=1;
				}
				else if ( (LA294_0==SEQUENTIAL_VK) ) {
					alt294=2;
				}
				switch (alt294) {
					case 1 :
						// PLSQLPrinter.g:1350:14: AUTOMATIC_VK
						{
						match(input,AUTOMATIC_VK,FOLLOW_AUTOMATIC_VK_in_model_rules_part13017); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1350:27: SEQUENTIAL_VK
						{
						match(input,SEQUENTIAL_VK,FOLLOW_SEQUENTIAL_VK_in_model_rules_part13019); 
						}
						break;

				}

				// PLSQLPrinter.g:1351:13: ( model_iterate_clause )?
				int alt295=2;
				int LA295_0 = input.LA(1);
				if ( (LA295_0==ITERATE_VK) ) {
					alt295=1;
				}
				switch (alt295) {
					case 1 :
						// PLSQLPrinter.g:1351:13: model_iterate_clause
						{
						pushFollow(FOLLOW_model_iterate_clause_in_model_rules_part13036);
						model_iterate_clause();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1353:5: -> template( \"not implemented: model_rules_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_rules_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_rules_part"


	public static class model_rules_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_rules_element"
	// PLSQLPrinter.g:1356:1: model_rules_element : ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? ) -> template( \"not implemented: model_rules_element\";
	public final PLSQLPrinter.model_rules_element_return model_rules_element() throws RecognitionException {
		PLSQLPrinter.model_rules_element_return retval = new PLSQLPrinter.model_rules_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1357:5: ( ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? ) -> template( \"not implemented: model_rules_element\")
			// PLSQLPrinter.g:1357:10: ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? )
			{
			match(input,MODEL_RULE,FOLLOW_MODEL_RULE_in_model_rules_element13082); 
			match(input, Token.DOWN, null); 
			match(input,ASSIGN,FOLLOW_ASSIGN_in_model_rules_element13098); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_expression_in_model_rules_element13100);
			model_expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_model_rules_element13102);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1359:13: ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )?
			int alt297=3;
			int LA297_0 = input.LA(1);
			if ( (LA297_0==SQL92_RESERVED_UPDATE) ) {
				alt297=1;
			}
			else if ( (LA297_0==UPSERT_VK) ) {
				alt297=2;
			}
			switch (alt297) {
				case 1 :
					// PLSQLPrinter.g:1359:14: SQL92_RESERVED_UPDATE
					{
					match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_element13119); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1359:36: UPSERT_VK ( SQL92_RESERVED_ALL )?
					{
					match(input,UPSERT_VK,FOLLOW_UPSERT_VK_in_model_rules_element13121); 
					// PLSQLPrinter.g:1359:46: ( SQL92_RESERVED_ALL )?
					int alt296=2;
					int LA296_0 = input.LA(1);
					if ( (LA296_0==SQL92_RESERVED_ALL) ) {
						alt296=1;
					}
					switch (alt296) {
						case 1 :
							// PLSQLPrinter.g:1359:46: SQL92_RESERVED_ALL
							{
							match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_model_rules_element13123); 
							}
							break;

					}

					}
					break;

			}

			// PLSQLPrinter.g:1360:13: ( order_by_clause )?
			int alt298=2;
			int LA298_0 = input.LA(1);
			if ( (LA298_0==SQL92_RESERVED_ORDER) ) {
				alt298=1;
			}
			switch (alt298) {
				case 1 :
					// PLSQLPrinter.g:1360:13: order_by_clause
					{
					pushFollow(FOLLOW_order_by_clause_in_model_rules_element13141);
					order_by_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1362:5: -> template( \"not implemented: model_rules_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_rules_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_rules_element"


	public static class model_iterate_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_iterate_clause"
	// PLSQLPrinter.g:1365:1: model_iterate_clause : ^( ITERATE_VK expression ( until_part )? ) -> template( \"not implemented: model_iterate_clause\";
	public final PLSQLPrinter.model_iterate_clause_return model_iterate_clause() throws RecognitionException {
		PLSQLPrinter.model_iterate_clause_return retval = new PLSQLPrinter.model_iterate_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1366:5: ( ^( ITERATE_VK expression ( until_part )? ) -> template( \"not implemented: model_iterate_clause\")
			// PLSQLPrinter.g:1366:10: ^( ITERATE_VK expression ( until_part )? )
			{
			match(input,ITERATE_VK,FOLLOW_ITERATE_VK_in_model_iterate_clause13187); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_model_iterate_clause13189);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1366:34: ( until_part )?
			int alt299=2;
			int LA299_0 = input.LA(1);
			if ( (LA299_0==UNTIL_VK) ) {
				alt299=1;
			}
			switch (alt299) {
				case 1 :
					// PLSQLPrinter.g:1366:34: until_part
					{
					pushFollow(FOLLOW_until_part_in_model_iterate_clause13191);
					until_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1367:5: -> template( \"not implemented: model_iterate_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_iterate_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_iterate_clause"


	public static class until_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "until_part"
	// PLSQLPrinter.g:1370:1: until_part : ^( UNTIL_VK expression ) -> template( \"not implemented: until_part\";
	public final PLSQLPrinter.until_part_return until_part() throws RecognitionException {
		PLSQLPrinter.until_part_return retval = new PLSQLPrinter.until_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1371:5: ( ^( UNTIL_VK expression ) -> template( \"not implemented: until_part\")
			// PLSQLPrinter.g:1371:10: ^( UNTIL_VK expression )
			{
			match(input,UNTIL_VK,FOLLOW_UNTIL_VK_in_until_part13228); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_until_part13230);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1372:5: -> template( \"not implemented: until_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: until_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "until_part"


	public static class order_by_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "order_by_clause"
	// PLSQLPrinter.g:1375:1: order_by_clause : ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS (elements+= order_by_elements )+ ) ) -> order_by_clause(is_siblings=$SIBLINGS_VK != nullelements=$elements);
	public final PLSQLPrinter.order_by_clause_return order_by_clause() throws RecognitionException {
		PLSQLPrinter.order_by_clause_return retval = new PLSQLPrinter.order_by_clause_return();
		retval.start = input.LT(1);

		CommonTree SIBLINGS_VK201=null;
		List<Object> list_elements=null;
		RuleReturnScope elements = null;
		try {
			// PLSQLPrinter.g:1376:5: ( ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS (elements+= order_by_elements )+ ) ) -> order_by_clause(is_siblings=$SIBLINGS_VK != nullelements=$elements))
			// PLSQLPrinter.g:1376:10: ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS (elements+= order_by_elements )+ ) )
			{
			match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_order_by_clause13266); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1376:33: ( SIBLINGS_VK )?
			int alt300=2;
			int LA300_0 = input.LA(1);
			if ( (LA300_0==SIBLINGS_VK) ) {
				alt300=1;
			}
			switch (alt300) {
				case 1 :
					// PLSQLPrinter.g:1376:33: SIBLINGS_VK
					{
					SIBLINGS_VK201=(CommonTree)match(input,SIBLINGS_VK,FOLLOW_SIBLINGS_VK_in_order_by_clause13268); 
					}
					break;

			}

			match(input,ORDER_BY_ELEMENTS,FOLLOW_ORDER_BY_ELEMENTS_in_order_by_clause13272); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1376:74: (elements+= order_by_elements )+
			int cnt301=0;
			loop301:
			while (true) {
				int alt301=2;
				int LA301_0 = input.LA(1);
				if ( (LA301_0==ORDER_BY_ELEMENT) ) {
					alt301=1;
				}

				switch (alt301) {
				case 1 :
					// PLSQLPrinter.g:1376:74: elements+= order_by_elements
					{
					pushFollow(FOLLOW_order_by_elements_in_order_by_clause13276);
					elements=order_by_elements();
					state._fsp--;

					if (list_elements==null) list_elements=new ArrayList<Object>();
					list_elements.add(elements.getTemplate());
					}
					break;

				default :
					if ( cnt301 >= 1 ) break loop301;
					EarlyExitException eee = new EarlyExitException(301, input);
					throw eee;
				}
				cnt301++;
			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1377:5: -> order_by_clause(is_siblings=$SIBLINGS_VK != nullelements=$elements)
			{
				retval.st = templateLib.getInstanceOf("order_by_clause",new STAttrMap().put("is_siblings", SIBLINGS_VK201 != null).put("elements", list_elements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "order_by_clause"


	public static class order_by_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "order_by_elements"
	// PLSQLPrinter.g:1380:1: order_by_elements : ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? ) -> order_by_elements(expression=$expression.stis_asc=$SQL92_RESERVED_ASC != nullis_desc=$SQL92_RESERVED_DESC != nullis_nulls_first=$FIRST_VK != nullis_nulls_last=$LAST_VK != null);
	public final PLSQLPrinter.order_by_elements_return order_by_elements() throws RecognitionException {
		PLSQLPrinter.order_by_elements_return retval = new PLSQLPrinter.order_by_elements_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_ASC203=null;
		CommonTree SQL92_RESERVED_DESC204=null;
		CommonTree FIRST_VK205=null;
		CommonTree LAST_VK206=null;
		TreeRuleReturnScope expression202 =null;

		try {
			// PLSQLPrinter.g:1381:5: ( ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? ) -> order_by_elements(expression=$expression.stis_asc=$SQL92_RESERVED_ASC != nullis_desc=$SQL92_RESERVED_DESC != nullis_nulls_first=$FIRST_VK != nullis_nulls_last=$LAST_VK != null))
			// PLSQLPrinter.g:1381:10: ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? )
			{
			match(input,ORDER_BY_ELEMENT,FOLLOW_ORDER_BY_ELEMENT_in_order_by_elements13320); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_order_by_elements13322);
			expression202=expression();
			state._fsp--;

			// PLSQLPrinter.g:1381:40: ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )?
			int alt302=3;
			int LA302_0 = input.LA(1);
			if ( (LA302_0==SQL92_RESERVED_ASC) ) {
				alt302=1;
			}
			else if ( (LA302_0==SQL92_RESERVED_DESC) ) {
				alt302=2;
			}
			switch (alt302) {
				case 1 :
					// PLSQLPrinter.g:1381:41: SQL92_RESERVED_ASC
					{
					SQL92_RESERVED_ASC203=(CommonTree)match(input,SQL92_RESERVED_ASC,FOLLOW_SQL92_RESERVED_ASC_in_order_by_elements13325); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1381:60: SQL92_RESERVED_DESC
					{
					SQL92_RESERVED_DESC204=(CommonTree)match(input,SQL92_RESERVED_DESC,FOLLOW_SQL92_RESERVED_DESC_in_order_by_elements13327); 
					}
					break;

			}

			// PLSQLPrinter.g:1381:82: ( NULLS_VK ( FIRST_VK | LAST_VK ) )?
			int alt304=2;
			int LA304_0 = input.LA(1);
			if ( (LA304_0==NULLS_VK) ) {
				alt304=1;
			}
			switch (alt304) {
				case 1 :
					// PLSQLPrinter.g:1381:83: NULLS_VK ( FIRST_VK | LAST_VK )
					{
					match(input,NULLS_VK,FOLLOW_NULLS_VK_in_order_by_elements13332); 
					// PLSQLPrinter.g:1381:92: ( FIRST_VK | LAST_VK )
					int alt303=2;
					int LA303_0 = input.LA(1);
					if ( (LA303_0==FIRST_VK) ) {
						alt303=1;
					}
					else if ( (LA303_0==LAST_VK) ) {
						alt303=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 303, 0, input);
						throw nvae;
					}

					switch (alt303) {
						case 1 :
							// PLSQLPrinter.g:1381:93: FIRST_VK
							{
							FIRST_VK205=(CommonTree)match(input,FIRST_VK,FOLLOW_FIRST_VK_in_order_by_elements13335); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1381:102: LAST_VK
							{
							LAST_VK206=(CommonTree)match(input,LAST_VK,FOLLOW_LAST_VK_in_order_by_elements13337); 
							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1382:5: -> order_by_elements(expression=$expression.stis_asc=$SQL92_RESERVED_ASC != nullis_desc=$SQL92_RESERVED_DESC != nullis_nulls_first=$FIRST_VK != nullis_nulls_last=$LAST_VK != null)
			{
				retval.st = templateLib.getInstanceOf("order_by_elements",new STAttrMap().put("expression", (expression202!=null?((StringTemplate)expression202.getTemplate()):null)).put("is_asc", SQL92_RESERVED_ASC203 != null).put("is_desc", SQL92_RESERVED_DESC204 != null).put("is_nulls_first", FIRST_VK205 != null).put("is_nulls_last", LAST_VK206 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "order_by_elements"


	public static class for_update_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_update_clause"
	// PLSQLPrinter.g:1387:1: for_update_clause : ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? ) -> template( \"not implemented: for_update_clause\";
	public final PLSQLPrinter.for_update_clause_return for_update_clause() throws RecognitionException {
		PLSQLPrinter.for_update_clause_return retval = new PLSQLPrinter.for_update_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1388:5: ( ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? ) -> template( \"not implemented: for_update_clause\")
			// PLSQLPrinter.g:1388:10: ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? )
			{
			match(input,SQL92_RESERVED_FOR,FOLLOW_SQL92_RESERVED_FOR_in_for_update_clause13418); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1388:31: ( for_update_of_part )?
				int alt305=2;
				int LA305_0 = input.LA(1);
				if ( (LA305_0==SQL92_RESERVED_OF) ) {
					alt305=1;
				}
				switch (alt305) {
					case 1 :
						// PLSQLPrinter.g:1388:31: for_update_of_part
						{
						pushFollow(FOLLOW_for_update_of_part_in_for_update_clause13420);
						for_update_of_part();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1388:51: ( for_update_options )?
				int alt306=2;
				int LA306_0 = input.LA(1);
				if ( (LA306_0==PLSQL_RESERVED_NOWAIT||LA306_0==SKIP_VK||LA306_0==WAIT_VK) ) {
					alt306=1;
				}
				switch (alt306) {
					case 1 :
						// PLSQLPrinter.g:1388:51: for_update_options
						{
						pushFollow(FOLLOW_for_update_options_in_for_update_clause13423);
						for_update_options();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1389:5: -> template( \"not implemented: for_update_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: for_update_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_update_clause"


	public static class for_update_of_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_update_of_part"
	// PLSQLPrinter.g:1392:1: for_update_of_part : ^( SQL92_RESERVED_OF ( column_name )+ ) -> template( \"not implemented: for_update_of_part\";
	public final PLSQLPrinter.for_update_of_part_return for_update_of_part() throws RecognitionException {
		PLSQLPrinter.for_update_of_part_return retval = new PLSQLPrinter.for_update_of_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1393:5: ( ^( SQL92_RESERVED_OF ( column_name )+ ) -> template( \"not implemented: for_update_of_part\")
			// PLSQLPrinter.g:1393:10: ^( SQL92_RESERVED_OF ( column_name )+ )
			{
			match(input,SQL92_RESERVED_OF,FOLLOW_SQL92_RESERVED_OF_in_for_update_of_part13460); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1393:30: ( column_name )+
			int cnt307=0;
			loop307:
			while (true) {
				int alt307=2;
				int LA307_0 = input.LA(1);
				if ( (LA307_0==COLUMN_NAME) ) {
					alt307=1;
				}

				switch (alt307) {
				case 1 :
					// PLSQLPrinter.g:1393:30: column_name
					{
					pushFollow(FOLLOW_column_name_in_for_update_of_part13462);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt307 >= 1 ) break loop307;
					EarlyExitException eee = new EarlyExitException(307, input);
					throw eee;
				}
				cnt307++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1394:5: -> template( \"not implemented: for_update_of_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: for_update_of_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_update_of_part"


	public static class for_update_options_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_update_options"
	// PLSQLPrinter.g:1397:1: for_update_options : ( SKIP_VK -> template( \"not implemented: for_update_options\"| PLSQL_RESERVED_NOWAIT -> template( \"not implemented: for_update_options\"| ^( WAIT_VK expression ) -> template( \"not implemented: for_update_options\");
	public final PLSQLPrinter.for_update_options_return for_update_options() throws RecognitionException {
		PLSQLPrinter.for_update_options_return retval = new PLSQLPrinter.for_update_options_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1398:5: ( SKIP_VK -> template( \"not implemented: for_update_options\"| PLSQL_RESERVED_NOWAIT -> template( \"not implemented: for_update_options\"| ^( WAIT_VK expression ) -> template( \"not implemented: for_update_options\")
			int alt308=3;
			switch ( input.LA(1) ) {
			case SKIP_VK:
				{
				alt308=1;
				}
				break;
			case PLSQL_RESERVED_NOWAIT:
				{
				alt308=2;
				}
				break;
			case WAIT_VK:
				{
				alt308=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 308, 0, input);
				throw nvae;
			}
			switch (alt308) {
				case 1 :
					// PLSQLPrinter.g:1398:10: SKIP_VK
					{
					match(input,SKIP_VK,FOLLOW_SKIP_VK_in_for_update_options13498); 
					// TEMPLATE REWRITE
					// 1399:5: -> template( \"not implemented: for_update_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_update_options");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1400:10: PLSQL_RESERVED_NOWAIT
					{
					match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_for_update_options13523); 
					// TEMPLATE REWRITE
					// 1401:5: -> template( \"not implemented: for_update_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_update_options");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1402:10: ^( WAIT_VK expression )
					{
					match(input,WAIT_VK,FOLLOW_WAIT_VK_in_for_update_options13549); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_update_options13551);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1403:5: -> template( \"not implemented: for_update_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_update_options");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_update_options"


	public static class update_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "update_statement"
	// PLSQLPrinter.g:1408:1: update_statement : ^( SQL92_RESERVED_UPDATE general_table_ref ^( SET_VK (update_elements+= update_set_elements )+ ) ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> update_statement(general_table_ref=$general_table_ref.stupdate_set_elements=$update_elementswhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st);
	public final PLSQLPrinter.update_statement_return update_statement() throws RecognitionException {
		PLSQLPrinter.update_statement_return retval = new PLSQLPrinter.update_statement_return();
		retval.start = input.LT(1);

		List<Object> list_update_elements=null;
		TreeRuleReturnScope general_table_ref207 =null;
		TreeRuleReturnScope where_clause208 =null;
		TreeRuleReturnScope static_returning_clause209 =null;
		TreeRuleReturnScope error_logging_clause210 =null;
		RuleReturnScope update_elements = null;
		try {
			// PLSQLPrinter.g:1409:5: ( ^( SQL92_RESERVED_UPDATE general_table_ref ^( SET_VK (update_elements+= update_set_elements )+ ) ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> update_statement(general_table_ref=$general_table_ref.stupdate_set_elements=$update_elementswhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st))
			// PLSQLPrinter.g:1409:10: ^( SQL92_RESERVED_UPDATE general_table_ref ^( SET_VK (update_elements+= update_set_elements )+ ) ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
			{
			match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_update_statement13589); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_update_statement13591);
			general_table_ref207=general_table_ref();
			state._fsp--;

			match(input,SET_VK,FOLLOW_SET_VK_in_update_statement13606); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1410:37: (update_elements+= update_set_elements )+
			int cnt309=0;
			loop309:
			while (true) {
				int alt309=2;
				int LA309_0 = input.LA(1);
				if ( (LA309_0==ASSIGN||LA309_0==VALUE_VK) ) {
					alt309=1;
				}

				switch (alt309) {
				case 1 :
					// PLSQLPrinter.g:1410:37: update_elements+= update_set_elements
					{
					pushFollow(FOLLOW_update_set_elements_in_update_statement13610);
					update_elements=update_set_elements();
					state._fsp--;

					if (list_update_elements==null) list_update_elements=new ArrayList<Object>();
					list_update_elements.add(update_elements.getTemplate());
					}
					break;

				default :
					if ( cnt309 >= 1 ) break loop309;
					EarlyExitException eee = new EarlyExitException(309, input);
					throw eee;
				}
				cnt309++;
			}

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1411:13: ( where_clause )?
			int alt310=2;
			int LA310_0 = input.LA(1);
			if ( (LA310_0==SQL92_RESERVED_WHERE) ) {
				alt310=1;
			}
			switch (alt310) {
				case 1 :
					// PLSQLPrinter.g:1411:13: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_update_statement13626);
					where_clause208=where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1411:27: ( static_returning_clause )?
			int alt311=2;
			int LA311_0 = input.LA(1);
			if ( (LA311_0==STATIC_RETURNING) ) {
				alt311=1;
			}
			switch (alt311) {
				case 1 :
					// PLSQLPrinter.g:1411:27: static_returning_clause
					{
					pushFollow(FOLLOW_static_returning_clause_in_update_statement13629);
					static_returning_clause209=static_returning_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1411:52: ( error_logging_clause )?
			int alt312=2;
			int LA312_0 = input.LA(1);
			if ( (LA312_0==LOG_VK) ) {
				alt312=1;
			}
			switch (alt312) {
				case 1 :
					// PLSQLPrinter.g:1411:52: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_update_statement13632);
					error_logging_clause210=error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1413:5: -> update_statement(general_table_ref=$general_table_ref.stupdate_set_elements=$update_elementswhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st)
			{
				retval.st = templateLib.getInstanceOf("update_statement",new STAttrMap().put("general_table_ref", (general_table_ref207!=null?((StringTemplate)general_table_ref207.getTemplate()):null)).put("update_set_elements", list_update_elements).put("where_clause", (where_clause208!=null?((StringTemplate)where_clause208.getTemplate()):null)).put("static_returning_clause", (static_returning_clause209!=null?((StringTemplate)static_returning_clause209.getTemplate()):null)).put("error_logging_clause", (error_logging_clause210!=null?((StringTemplate)error_logging_clause210.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "update_statement"


	public static class update_set_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "update_set_elements"
	// PLSQLPrinter.g:1421:1: update_set_elements : ( ^( ASSIGN column_name expression ) -> update_set_element_column_expr(column_name=$column_name.stexpression=$expression.st)| ^( ASSIGN (names+= column_name )+ subquery ) -> update_set_element_columns_subquery(column_names=$namessubquery=$subquery.st)| ^( VALUE_VK ( char_set_name )? ID expression ) -> update_set_element_column_value(column_name=$ID.textexpression=$expression.st));
	public final PLSQLPrinter.update_set_elements_return update_set_elements() throws RecognitionException {
		PLSQLPrinter.update_set_elements_return retval = new PLSQLPrinter.update_set_elements_return();
		retval.start = input.LT(1);

		CommonTree ID214=null;
		List<Object> list_names=null;
		TreeRuleReturnScope column_name211 =null;
		TreeRuleReturnScope expression212 =null;
		TreeRuleReturnScope subquery213 =null;
		TreeRuleReturnScope expression215 =null;
		RuleReturnScope names = null;
		try {
			// PLSQLPrinter.g:1422:5: ( ^( ASSIGN column_name expression ) -> update_set_element_column_expr(column_name=$column_name.stexpression=$expression.st)| ^( ASSIGN (names+= column_name )+ subquery ) -> update_set_element_columns_subquery(column_names=$namessubquery=$subquery.st)| ^( VALUE_VK ( char_set_name )? ID expression ) -> update_set_element_column_value(column_name=$ID.textexpression=$expression.st))
			int alt315=3;
			alt315 = dfa315.predict(input);
			switch (alt315) {
				case 1 :
					// PLSQLPrinter.g:1422:10: ^( ASSIGN column_name expression )
					{
					match(input,ASSIGN,FOLLOW_ASSIGN_in_update_set_elements13738); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_column_name_in_update_set_elements13740);
					column_name211=column_name();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_update_set_elements13742);
					expression212=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1423:5: -> update_set_element_column_expr(column_name=$column_name.stexpression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("update_set_element_column_expr",new STAttrMap().put("column_name", (column_name211!=null?((StringTemplate)column_name211.getTemplate()):null)).put("expression", (expression212!=null?((StringTemplate)expression212.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1424:10: ^( ASSIGN (names+= column_name )+ subquery )
					{
					match(input,ASSIGN,FOLLOW_ASSIGN_in_update_set_elements13775); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1424:24: (names+= column_name )+
					int cnt313=0;
					loop313:
					while (true) {
						int alt313=2;
						int LA313_0 = input.LA(1);
						if ( (LA313_0==COLUMN_NAME) ) {
							alt313=1;
						}

						switch (alt313) {
						case 1 :
							// PLSQLPrinter.g:1424:24: names+= column_name
							{
							pushFollow(FOLLOW_column_name_in_update_set_elements13779);
							names=column_name();
							state._fsp--;

							if (list_names==null) list_names=new ArrayList<Object>();
							list_names.add(names.getTemplate());
							}
							break;

						default :
							if ( cnt313 >= 1 ) break loop313;
							EarlyExitException eee = new EarlyExitException(313, input);
							throw eee;
						}
						cnt313++;
					}

					pushFollow(FOLLOW_subquery_in_update_set_elements13782);
					subquery213=subquery();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1425:5: -> update_set_element_columns_subquery(column_names=$namessubquery=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("update_set_element_columns_subquery",new STAttrMap().put("column_names", list_names).put("subquery", (subquery213!=null?((StringTemplate)subquery213.getTemplate()):null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1426:10: ^( VALUE_VK ( char_set_name )? ID expression )
					{
					match(input,VALUE_VK,FOLLOW_VALUE_VK_in_update_set_elements13815); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1426:21: ( char_set_name )?
					int alt314=2;
					int LA314_0 = input.LA(1);
					if ( (LA314_0==CHAR_SET_NAME) ) {
						alt314=1;
					}
					switch (alt314) {
						case 1 :
							// PLSQLPrinter.g:1426:21: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_update_set_elements13817);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					ID214=(CommonTree)match(input,ID,FOLLOW_ID_in_update_set_elements13820); 
					pushFollow(FOLLOW_expression_in_update_set_elements13822);
					expression215=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1427:5: -> update_set_element_column_value(column_name=$ID.textexpression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("update_set_element_column_value",new STAttrMap().put("column_name", (ID214!=null?ID214.getText():null)).put("expression", (expression215!=null?((StringTemplate)expression215.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "update_set_elements"


	public static class delete_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "delete_statement"
	// PLSQLPrinter.g:1432:1: delete_statement : ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> delete_statement(general_table_ref=$general_table_ref.stwhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st);
	public final PLSQLPrinter.delete_statement_return delete_statement() throws RecognitionException {
		PLSQLPrinter.delete_statement_return retval = new PLSQLPrinter.delete_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope general_table_ref216 =null;
		TreeRuleReturnScope where_clause217 =null;
		TreeRuleReturnScope static_returning_clause218 =null;
		TreeRuleReturnScope error_logging_clause219 =null;

		try {
			// PLSQLPrinter.g:1433:5: ( ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> delete_statement(general_table_ref=$general_table_ref.stwhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st))
			// PLSQLPrinter.g:1433:10: ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
			{
			match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_delete_statement13866); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_delete_statement13868);
			general_table_ref216=general_table_ref();
			state._fsp--;

			// PLSQLPrinter.g:1434:13: ( where_clause )?
			int alt316=2;
			int LA316_0 = input.LA(1);
			if ( (LA316_0==SQL92_RESERVED_WHERE) ) {
				alt316=1;
			}
			switch (alt316) {
				case 1 :
					// PLSQLPrinter.g:1434:13: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_delete_statement13882);
					where_clause217=where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1434:27: ( static_returning_clause )?
			int alt317=2;
			int LA317_0 = input.LA(1);
			if ( (LA317_0==STATIC_RETURNING) ) {
				alt317=1;
			}
			switch (alt317) {
				case 1 :
					// PLSQLPrinter.g:1434:27: static_returning_clause
					{
					pushFollow(FOLLOW_static_returning_clause_in_delete_statement13885);
					static_returning_clause218=static_returning_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1434:52: ( error_logging_clause )?
			int alt318=2;
			int LA318_0 = input.LA(1);
			if ( (LA318_0==LOG_VK) ) {
				alt318=1;
			}
			switch (alt318) {
				case 1 :
					// PLSQLPrinter.g:1434:52: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_delete_statement13888);
					error_logging_clause219=error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1435:5: -> delete_statement(general_table_ref=$general_table_ref.stwhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st)
			{
				retval.st = templateLib.getInstanceOf("delete_statement",new STAttrMap().put("general_table_ref", (general_table_ref216!=null?((StringTemplate)general_table_ref216.getTemplate()):null)).put("where_clause", (where_clause217!=null?((StringTemplate)where_clause217.getTemplate()):null)).put("static_returning_clause", (static_returning_clause218!=null?((StringTemplate)static_returning_clause218.getTemplate()):null)).put("error_logging_clause", (error_logging_clause219!=null?((StringTemplate)error_logging_clause219.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "delete_statement"


	public static class insert_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "insert_statement"
	// PLSQLPrinter.g:1440:1: insert_statement : ^( SQL92_RESERVED_INSERT ( single_table_insert -> { $single_table_insert.st }| multi_table_insert -> { $multi_table_insert.st }) ) ;
	public final PLSQLPrinter.insert_statement_return insert_statement() throws RecognitionException {
		PLSQLPrinter.insert_statement_return retval = new PLSQLPrinter.insert_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope single_table_insert220 =null;
		TreeRuleReturnScope multi_table_insert221 =null;

		try {
			// PLSQLPrinter.g:1441:5: ( ^( SQL92_RESERVED_INSERT ( single_table_insert -> { $single_table_insert.st }| multi_table_insert -> { $multi_table_insert.st }) ) )
			// PLSQLPrinter.g:1441:10: ^( SQL92_RESERVED_INSERT ( single_table_insert -> { $single_table_insert.st }| multi_table_insert -> { $multi_table_insert.st }) )
			{
			match(input,SQL92_RESERVED_INSERT,FOLLOW_SQL92_RESERVED_INSERT_in_insert_statement13966); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1442:13: ( single_table_insert -> { $single_table_insert.st }| multi_table_insert -> { $multi_table_insert.st })
			int alt319=2;
			int LA319_0 = input.LA(1);
			if ( (LA319_0==SINGLE_TABLE_MODE) ) {
				alt319=1;
			}
			else if ( (LA319_0==MULTI_TABLE_MODE) ) {
				alt319=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 319, 0, input);
				throw nvae;
			}

			switch (alt319) {
				case 1 :
					// PLSQLPrinter.g:1443:15: single_table_insert
					{
					pushFollow(FOLLOW_single_table_insert_in_insert_statement13996);
					single_table_insert220=single_table_insert();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1443:35: -> { $single_table_insert.st }
					{
						retval.st =  (single_table_insert220!=null?((StringTemplate)single_table_insert220.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1444:20: multi_table_insert
					{
					pushFollow(FOLLOW_multi_table_insert_in_insert_statement14021);
					multi_table_insert221=multi_table_insert();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1444:39: -> { $multi_table_insert.st }
					{
						retval.st =  (multi_table_insert221!=null?((StringTemplate)multi_table_insert221.getTemplate()):null) ;
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_statement"


	public static class single_table_insert_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "single_table_insert"
	// PLSQLPrinter.g:1451:1: single_table_insert : ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? ) -> single_table_insert(insert_into_clause=$insert_into_clause.stvalues_clause=$values_clause.ststatic_returning_clause=$static_returning_clause.stselect_statement=$select_statement.sterror_logging_clause=$error_logging_clause.st);
	public final PLSQLPrinter.single_table_insert_return single_table_insert() throws RecognitionException {
		PLSQLPrinter.single_table_insert_return retval = new PLSQLPrinter.single_table_insert_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope insert_into_clause222 =null;
		TreeRuleReturnScope values_clause223 =null;
		TreeRuleReturnScope static_returning_clause224 =null;
		TreeRuleReturnScope select_statement225 =null;
		TreeRuleReturnScope error_logging_clause226 =null;

		try {
			// PLSQLPrinter.g:1452:5: ( ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? ) -> single_table_insert(insert_into_clause=$insert_into_clause.stvalues_clause=$values_clause.ststatic_returning_clause=$static_returning_clause.stselect_statement=$select_statement.sterror_logging_clause=$error_logging_clause.st))
			// PLSQLPrinter.g:1452:10: ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? )
			{
			match(input,SINGLE_TABLE_MODE,FOLLOW_SINGLE_TABLE_MODE_in_single_table_insert14074); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_insert_into_clause_in_single_table_insert14076);
			insert_into_clause222=insert_into_clause();
			state._fsp--;

			// PLSQLPrinter.g:1452:49: ( values_clause ( static_returning_clause )? | select_statement )
			int alt321=2;
			int LA321_0 = input.LA(1);
			if ( (LA321_0==SQL92_RESERVED_VALUES) ) {
				alt321=1;
			}
			else if ( (LA321_0==SELECT_STATEMENT) ) {
				alt321=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 321, 0, input);
				throw nvae;
			}

			switch (alt321) {
				case 1 :
					// PLSQLPrinter.g:1452:50: values_clause ( static_returning_clause )?
					{
					pushFollow(FOLLOW_values_clause_in_single_table_insert14079);
					values_clause223=values_clause();
					state._fsp--;

					// PLSQLPrinter.g:1452:64: ( static_returning_clause )?
					int alt320=2;
					int LA320_0 = input.LA(1);
					if ( (LA320_0==STATIC_RETURNING) ) {
						alt320=1;
					}
					switch (alt320) {
						case 1 :
							// PLSQLPrinter.g:1452:64: static_returning_clause
							{
							pushFollow(FOLLOW_static_returning_clause_in_single_table_insert14081);
							static_returning_clause224=static_returning_clause();
							state._fsp--;

							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1452:90: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_single_table_insert14085);
					select_statement225=select_statement();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1452:108: ( error_logging_clause )?
			int alt322=2;
			int LA322_0 = input.LA(1);
			if ( (LA322_0==LOG_VK) ) {
				alt322=1;
			}
			switch (alt322) {
				case 1 :
					// PLSQLPrinter.g:1452:108: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_single_table_insert14088);
					error_logging_clause226=error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1453:5: -> single_table_insert(insert_into_clause=$insert_into_clause.stvalues_clause=$values_clause.ststatic_returning_clause=$static_returning_clause.stselect_statement=$select_statement.sterror_logging_clause=$error_logging_clause.st)
			{
				retval.st = templateLib.getInstanceOf("single_table_insert",new STAttrMap().put("insert_into_clause", (insert_into_clause222!=null?((StringTemplate)insert_into_clause222.getTemplate()):null)).put("values_clause", (values_clause223!=null?((StringTemplate)values_clause223.getTemplate()):null)).put("static_returning_clause", (static_returning_clause224!=null?((StringTemplate)static_returning_clause224.getTemplate()):null)).put("select_statement", (select_statement225!=null?((StringTemplate)select_statement225.getTemplate()):null)).put("error_logging_clause", (error_logging_clause226!=null?((StringTemplate)error_logging_clause226.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "single_table_insert"


	public static class multi_table_insert_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "multi_table_insert"
	// PLSQLPrinter.g:1459:1: multi_table_insert : ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) ) -> template( \"not implemented: multi_table_insert\";
	public final PLSQLPrinter.multi_table_insert_return multi_table_insert() throws RecognitionException {
		PLSQLPrinter.multi_table_insert_return retval = new PLSQLPrinter.multi_table_insert_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1460:5: ( ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) ) -> template( \"not implemented: multi_table_insert\")
			// PLSQLPrinter.g:1460:10: ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) )
			{
			match(input,MULTI_TABLE_MODE,FOLLOW_MULTI_TABLE_MODE_in_multi_table_insert14183); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_select_statement_in_multi_table_insert14185);
			select_statement();
			state._fsp--;

			// PLSQLPrinter.g:1460:46: ( conditional_insert_clause | ( multi_table_element )+ )
			int alt324=2;
			int LA324_0 = input.LA(1);
			if ( (LA324_0==CONDITIONAL_INSERT) ) {
				alt324=1;
			}
			else if ( (LA324_0==TABLE_ELEMENT) ) {
				alt324=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 324, 0, input);
				throw nvae;
			}

			switch (alt324) {
				case 1 :
					// PLSQLPrinter.g:1460:47: conditional_insert_clause
					{
					pushFollow(FOLLOW_conditional_insert_clause_in_multi_table_insert14188);
					conditional_insert_clause();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1460:73: ( multi_table_element )+
					{
					// PLSQLPrinter.g:1460:73: ( multi_table_element )+
					int cnt323=0;
					loop323:
					while (true) {
						int alt323=2;
						int LA323_0 = input.LA(1);
						if ( (LA323_0==TABLE_ELEMENT) ) {
							alt323=1;
						}

						switch (alt323) {
						case 1 :
							// PLSQLPrinter.g:1460:73: multi_table_element
							{
							pushFollow(FOLLOW_multi_table_element_in_multi_table_insert14190);
							multi_table_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt323 >= 1 ) break loop323;
							EarlyExitException eee = new EarlyExitException(323, input);
							throw eee;
						}
						cnt323++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1461:5: -> template( \"not implemented: multi_table_insert\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: multi_table_insert");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "multi_table_insert"


	public static class multi_table_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "multi_table_element"
	// PLSQLPrinter.g:1464:1: multi_table_element : ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) -> template( \"not implemented: multi_table_element\";
	public final PLSQLPrinter.multi_table_element_return multi_table_element() throws RecognitionException {
		PLSQLPrinter.multi_table_element_return retval = new PLSQLPrinter.multi_table_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1465:5: ( ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) -> template( \"not implemented: multi_table_element\")
			// PLSQLPrinter.g:1465:10: ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? )
			{
			match(input,TABLE_ELEMENT,FOLLOW_TABLE_ELEMENT_in_multi_table_element14228); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_insert_into_clause_in_multi_table_element14230);
			insert_into_clause();
			state._fsp--;

			// PLSQLPrinter.g:1465:45: ( values_clause )?
			int alt325=2;
			int LA325_0 = input.LA(1);
			if ( (LA325_0==SQL92_RESERVED_VALUES) ) {
				alt325=1;
			}
			switch (alt325) {
				case 1 :
					// PLSQLPrinter.g:1465:45: values_clause
					{
					pushFollow(FOLLOW_values_clause_in_multi_table_element14232);
					values_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1465:60: ( error_logging_clause )?
			int alt326=2;
			int LA326_0 = input.LA(1);
			if ( (LA326_0==LOG_VK) ) {
				alt326=1;
			}
			switch (alt326) {
				case 1 :
					// PLSQLPrinter.g:1465:60: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_multi_table_element14235);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1466:5: -> template( \"not implemented: multi_table_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: multi_table_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "multi_table_element"


	public static class conditional_insert_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "conditional_insert_clause"
	// PLSQLPrinter.g:1469:1: conditional_insert_clause : ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) -> template( \"not implemented: conditional_insert_clause\";
	public final PLSQLPrinter.conditional_insert_clause_return conditional_insert_clause() throws RecognitionException {
		PLSQLPrinter.conditional_insert_clause_return retval = new PLSQLPrinter.conditional_insert_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1470:5: ( ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) -> template( \"not implemented: conditional_insert_clause\")
			// PLSQLPrinter.g:1470:10: ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? )
			{
			match(input,CONDITIONAL_INSERT,FOLLOW_CONDITIONAL_INSERT_in_conditional_insert_clause14272); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1470:31: ( SQL92_RESERVED_ALL | FIRST_VK )?
			int alt327=3;
			int LA327_0 = input.LA(1);
			if ( (LA327_0==SQL92_RESERVED_ALL) ) {
				alt327=1;
			}
			else if ( (LA327_0==FIRST_VK) ) {
				alt327=2;
			}
			switch (alt327) {
				case 1 :
					// PLSQLPrinter.g:1470:32: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_conditional_insert_clause14275); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1470:51: FIRST_VK
					{
					match(input,FIRST_VK,FOLLOW_FIRST_VK_in_conditional_insert_clause14277); 
					}
					break;

			}

			// PLSQLPrinter.g:1470:62: ( conditional_insert_when_part )+
			int cnt328=0;
			loop328:
			while (true) {
				int alt328=2;
				int LA328_0 = input.LA(1);
				if ( (LA328_0==SQL92_RESERVED_WHEN) ) {
					alt328=1;
				}

				switch (alt328) {
				case 1 :
					// PLSQLPrinter.g:1470:62: conditional_insert_when_part
					{
					pushFollow(FOLLOW_conditional_insert_when_part_in_conditional_insert_clause14281);
					conditional_insert_when_part();
					state._fsp--;

					}
					break;

				default :
					if ( cnt328 >= 1 ) break loop328;
					EarlyExitException eee = new EarlyExitException(328, input);
					throw eee;
				}
				cnt328++;
			}

			// PLSQLPrinter.g:1470:92: ( conditional_insert_else_part )?
			int alt329=2;
			int LA329_0 = input.LA(1);
			if ( (LA329_0==SQL92_RESERVED_ELSE) ) {
				alt329=1;
			}
			switch (alt329) {
				case 1 :
					// PLSQLPrinter.g:1470:92: conditional_insert_else_part
					{
					pushFollow(FOLLOW_conditional_insert_else_part_in_conditional_insert_clause14284);
					conditional_insert_else_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1471:5: -> template( \"not implemented: conditional_insert_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: conditional_insert_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "conditional_insert_clause"


	public static class conditional_insert_when_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "conditional_insert_when_part"
	// PLSQLPrinter.g:1474:1: conditional_insert_when_part : ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_when_part\";
	public final PLSQLPrinter.conditional_insert_when_part_return conditional_insert_when_part() throws RecognitionException {
		PLSQLPrinter.conditional_insert_when_part_return retval = new PLSQLPrinter.conditional_insert_when_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1475:5: ( ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_when_part\")
			// PLSQLPrinter.g:1475:10: ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_conditional_insert_when_part14322); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_conditional_insert_when_part14324);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1475:43: ( multi_table_element )+
			int cnt330=0;
			loop330:
			while (true) {
				int alt330=2;
				int LA330_0 = input.LA(1);
				if ( (LA330_0==TABLE_ELEMENT) ) {
					alt330=1;
				}

				switch (alt330) {
				case 1 :
					// PLSQLPrinter.g:1475:43: multi_table_element
					{
					pushFollow(FOLLOW_multi_table_element_in_conditional_insert_when_part14326);
					multi_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt330 >= 1 ) break loop330;
					EarlyExitException eee = new EarlyExitException(330, input);
					throw eee;
				}
				cnt330++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1476:5: -> template( \"not implemented: conditional_insert_when_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: conditional_insert_when_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "conditional_insert_when_part"


	public static class conditional_insert_else_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "conditional_insert_else_part"
	// PLSQLPrinter.g:1479:1: conditional_insert_else_part : ^( SQL92_RESERVED_ELSE ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_else_part\";
	public final PLSQLPrinter.conditional_insert_else_part_return conditional_insert_else_part() throws RecognitionException {
		PLSQLPrinter.conditional_insert_else_part_return retval = new PLSQLPrinter.conditional_insert_else_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1480:5: ( ^( SQL92_RESERVED_ELSE ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_else_part\")
			// PLSQLPrinter.g:1480:10: ^( SQL92_RESERVED_ELSE ( multi_table_element )+ )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_conditional_insert_else_part14363); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1480:32: ( multi_table_element )+
			int cnt331=0;
			loop331:
			while (true) {
				int alt331=2;
				int LA331_0 = input.LA(1);
				if ( (LA331_0==TABLE_ELEMENT) ) {
					alt331=1;
				}

				switch (alt331) {
				case 1 :
					// PLSQLPrinter.g:1480:32: multi_table_element
					{
					pushFollow(FOLLOW_multi_table_element_in_conditional_insert_else_part14365);
					multi_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt331 >= 1 ) break loop331;
					EarlyExitException eee = new EarlyExitException(331, input);
					throw eee;
				}
				cnt331++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1481:5: -> template( \"not implemented: conditional_insert_else_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: conditional_insert_else_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "conditional_insert_else_part"


	public static class insert_into_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "insert_into_clause"
	// PLSQLPrinter.g:1484:1: insert_into_clause : ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS (columns+= column_name )* ) ) -> insert_into_clause(general_table_ref=$general_table_ref.stcolumns=$columns);
	public final PLSQLPrinter.insert_into_clause_return insert_into_clause() throws RecognitionException {
		PLSQLPrinter.insert_into_clause_return retval = new PLSQLPrinter.insert_into_clause_return();
		retval.start = input.LT(1);

		List<Object> list_columns=null;
		TreeRuleReturnScope general_table_ref227 =null;
		RuleReturnScope columns = null;
		try {
			// PLSQLPrinter.g:1485:5: ( ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS (columns+= column_name )* ) ) -> insert_into_clause(general_table_ref=$general_table_ref.stcolumns=$columns))
			// PLSQLPrinter.g:1485:10: ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS (columns+= column_name )* ) )
			{
			match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_insert_into_clause14402); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_insert_into_clause14404);
			general_table_ref227=general_table_ref();
			state._fsp--;

			match(input,COLUMNS,FOLLOW_COLUMNS_in_insert_into_clause14407); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1485:67: (columns+= column_name )*
				loop332:
				while (true) {
					int alt332=2;
					int LA332_0 = input.LA(1);
					if ( (LA332_0==COLUMN_NAME) ) {
						alt332=1;
					}

					switch (alt332) {
					case 1 :
						// PLSQLPrinter.g:1485:67: columns+= column_name
						{
						pushFollow(FOLLOW_column_name_in_insert_into_clause14411);
						columns=column_name();
						state._fsp--;

						if (list_columns==null) list_columns=new ArrayList<Object>();
						list_columns.add(columns.getTemplate());
						}
						break;

					default :
						break loop332;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1486:5: -> insert_into_clause(general_table_ref=$general_table_ref.stcolumns=$columns)
			{
				retval.st = templateLib.getInstanceOf("insert_into_clause",new STAttrMap().put("general_table_ref", (general_table_ref227!=null?((StringTemplate)general_table_ref227.getTemplate()):null)).put("columns", list_columns));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_into_clause"


	public static class values_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "values_clause"
	// PLSQLPrinter.g:1489:1: values_clause : ^( SQL92_RESERVED_VALUES (r= expression_list |r= expression ) ) -> values_clause(expression_or_expression_list=$r.st);
	public final PLSQLPrinter.values_clause_return values_clause() throws RecognitionException {
		PLSQLPrinter.values_clause_return retval = new PLSQLPrinter.values_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope r =null;

		try {
			// PLSQLPrinter.g:1490:5: ( ^( SQL92_RESERVED_VALUES (r= expression_list |r= expression ) ) -> values_clause(expression_or_expression_list=$r.st))
			// PLSQLPrinter.g:1490:10: ^( SQL92_RESERVED_VALUES (r= expression_list |r= expression ) )
			{
			match(input,SQL92_RESERVED_VALUES,FOLLOW_SQL92_RESERVED_VALUES_in_values_clause14455); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1490:34: (r= expression_list |r= expression )
			int alt333=2;
			int LA333_0 = input.LA(1);
			if ( (LA333_0==EXPR_LIST) ) {
				alt333=1;
			}
			else if ( (LA333_0==EXPR||LA333_0==LOGIC_EXPR) ) {
				alt333=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 333, 0, input);
				throw nvae;
			}

			switch (alt333) {
				case 1 :
					// PLSQLPrinter.g:1490:35: r= expression_list
					{
					pushFollow(FOLLOW_expression_list_in_values_clause14460);
					r=expression_list();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1490:53: r= expression
					{
					pushFollow(FOLLOW_expression_in_values_clause14464);
					r=expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1491:5: -> values_clause(expression_or_expression_list=$r.st)
			{
				retval.st = templateLib.getInstanceOf("values_clause",new STAttrMap().put("expression_or_expression_list", (r!=null?((StringTemplate)r.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "values_clause"


	public static class merge_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_statement"
	// PLSQLPrinter.g:1495:1: merge_statement : ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) -> template( \"not implemented: merge_statement\";
	public final PLSQLPrinter.merge_statement_return merge_statement() throws RecognitionException {
		PLSQLPrinter.merge_statement_return retval = new PLSQLPrinter.merge_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1496:5: ( ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) -> template( \"not implemented: merge_statement\")
			// PLSQLPrinter.g:1496:10: ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? )
			{
			match(input,MERGE_VK,FOLLOW_MERGE_VK_in_merge_statement14503); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1496:21: ( alias )?
			int alt334=2;
			int LA334_0 = input.LA(1);
			if ( (LA334_0==COLUMN_ALIAS||LA334_0==TABLE_ALIAS) ) {
				alt334=1;
			}
			switch (alt334) {
				case 1 :
					// PLSQLPrinter.g:1496:21: alias
					{
					pushFollow(FOLLOW_alias_in_merge_statement14505);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_tableview_name_in_merge_statement14508);
			tableview_name();
			state._fsp--;

			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_merge_statement14524); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_selected_tableview_in_merge_statement14526);
			selected_tableview();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_merge_statement14528);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1498:14: ( merge_update_clause )?
			int alt335=2;
			int LA335_0 = input.LA(1);
			if ( (LA335_0==MERGE_UPDATE) ) {
				alt335=1;
			}
			switch (alt335) {
				case 1 :
					// PLSQLPrinter.g:1498:14: merge_update_clause
					{
					pushFollow(FOLLOW_merge_update_clause_in_merge_statement14544);
					merge_update_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1498:35: ( merge_insert_clause )?
			int alt336=2;
			int LA336_0 = input.LA(1);
			if ( (LA336_0==MERGE_INSERT) ) {
				alt336=1;
			}
			switch (alt336) {
				case 1 :
					// PLSQLPrinter.g:1498:35: merge_insert_clause
					{
					pushFollow(FOLLOW_merge_insert_clause_in_merge_statement14547);
					merge_insert_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1498:56: ( error_logging_clause )?
			int alt337=2;
			int LA337_0 = input.LA(1);
			if ( (LA337_0==LOG_VK) ) {
				alt337=1;
			}
			switch (alt337) {
				case 1 :
					// PLSQLPrinter.g:1498:56: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_merge_statement14550);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1499:5: -> template( \"not implemented: merge_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: merge_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_statement"


	public static class merge_update_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_update_clause"
	// PLSQLPrinter.g:1504:1: merge_update_clause : ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) -> template( \"not implemented: merge_update_clause\";
	public final PLSQLPrinter.merge_update_clause_return merge_update_clause() throws RecognitionException {
		PLSQLPrinter.merge_update_clause_return retval = new PLSQLPrinter.merge_update_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1505:5: ( ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) -> template( \"not implemented: merge_update_clause\")
			// PLSQLPrinter.g:1505:10: ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? )
			{
			match(input,MERGE_UPDATE,FOLLOW_MERGE_UPDATE_in_merge_update_clause14589); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1505:25: ( merge_element )+
			int cnt338=0;
			loop338:
			while (true) {
				int alt338=2;
				int LA338_0 = input.LA(1);
				if ( (LA338_0==ASSIGN) ) {
					alt338=1;
				}

				switch (alt338) {
				case 1 :
					// PLSQLPrinter.g:1505:25: merge_element
					{
					pushFollow(FOLLOW_merge_element_in_merge_update_clause14591);
					merge_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt338 >= 1 ) break loop338;
					EarlyExitException eee = new EarlyExitException(338, input);
					throw eee;
				}
				cnt338++;
			}

			// PLSQLPrinter.g:1505:40: ( where_clause )?
			int alt339=2;
			int LA339_0 = input.LA(1);
			if ( (LA339_0==SQL92_RESERVED_WHERE) ) {
				alt339=1;
			}
			switch (alt339) {
				case 1 :
					// PLSQLPrinter.g:1505:40: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_merge_update_clause14594);
					where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1505:54: ( merge_update_delete_part )?
			int alt340=2;
			int LA340_0 = input.LA(1);
			if ( (LA340_0==SQL92_RESERVED_DELETE) ) {
				alt340=1;
			}
			switch (alt340) {
				case 1 :
					// PLSQLPrinter.g:1505:54: merge_update_delete_part
					{
					pushFollow(FOLLOW_merge_update_delete_part_in_merge_update_clause14597);
					merge_update_delete_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1506:5: -> template( \"not implemented: merge_update_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: merge_update_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_update_clause"


	public static class merge_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_element"
	// PLSQLPrinter.g:1509:1: merge_element : ^( ASSIGN column_name expression ) -> template( \"not implemented: merge_element\";
	public final PLSQLPrinter.merge_element_return merge_element() throws RecognitionException {
		PLSQLPrinter.merge_element_return retval = new PLSQLPrinter.merge_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1510:5: ( ^( ASSIGN column_name expression ) -> template( \"not implemented: merge_element\")
			// PLSQLPrinter.g:1510:10: ^( ASSIGN column_name expression )
			{
			match(input,ASSIGN,FOLLOW_ASSIGN_in_merge_element14634); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_column_name_in_merge_element14636);
			column_name();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_merge_element14638);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1511:5: -> template( \"not implemented: merge_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: merge_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_element"


	public static class merge_update_delete_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_update_delete_part"
	// PLSQLPrinter.g:1514:1: merge_update_delete_part : ^( SQL92_RESERVED_DELETE where_clause ) -> template( \"not implemented: merge_update_delete_part\";
	public final PLSQLPrinter.merge_update_delete_part_return merge_update_delete_part() throws RecognitionException {
		PLSQLPrinter.merge_update_delete_part_return retval = new PLSQLPrinter.merge_update_delete_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1515:5: ( ^( SQL92_RESERVED_DELETE where_clause ) -> template( \"not implemented: merge_update_delete_part\")
			// PLSQLPrinter.g:1515:10: ^( SQL92_RESERVED_DELETE where_clause )
			{
			match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_merge_update_delete_part14674); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_where_clause_in_merge_update_delete_part14676);
			where_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1516:5: -> template( \"not implemented: merge_update_delete_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: merge_update_delete_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_update_delete_part"


	public static class merge_insert_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_insert_clause"
	// PLSQLPrinter.g:1519:1: merge_insert_clause : ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? ) -> template( \"not implemented: merge_insert_clause\";
	public final PLSQLPrinter.merge_insert_clause_return merge_insert_clause() throws RecognitionException {
		PLSQLPrinter.merge_insert_clause_return retval = new PLSQLPrinter.merge_insert_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1520:5: ( ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? ) -> template( \"not implemented: merge_insert_clause\")
			// PLSQLPrinter.g:1520:10: ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? )
			{
			match(input,MERGE_INSERT,FOLLOW_MERGE_INSERT_in_merge_insert_clause14712); 
			match(input, Token.DOWN, null); 
			match(input,COLUMNS,FOLLOW_COLUMNS_in_merge_insert_clause14715); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1520:35: ( column_name )*
				loop341:
				while (true) {
					int alt341=2;
					int LA341_0 = input.LA(1);
					if ( (LA341_0==COLUMN_NAME) ) {
						alt341=1;
					}

					switch (alt341) {
					case 1 :
						// PLSQLPrinter.g:1520:35: column_name
						{
						pushFollow(FOLLOW_column_name_in_merge_insert_clause14717);
						column_name();
						state._fsp--;

						}
						break;

					default :
						break loop341;
					}
				}

				match(input, Token.UP, null); 
			}

			pushFollow(FOLLOW_expression_list_in_merge_insert_clause14721);
			expression_list();
			state._fsp--;

			// PLSQLPrinter.g:1520:65: ( where_clause )?
			int alt342=2;
			int LA342_0 = input.LA(1);
			if ( (LA342_0==SQL92_RESERVED_WHERE) ) {
				alt342=1;
			}
			switch (alt342) {
				case 1 :
					// PLSQLPrinter.g:1520:65: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_merge_insert_clause14723);
					where_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1521:5: -> template( \"not implemented: merge_insert_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: merge_insert_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_insert_clause"


	public static class selected_tableview_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "selected_tableview"
	// PLSQLPrinter.g:1524:1: selected_tableview : ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name | select_statement ) ) -> template( \"not implemented: selected_tableview\";
	public final PLSQLPrinter.selected_tableview_return selected_tableview() throws RecognitionException {
		PLSQLPrinter.selected_tableview_return retval = new PLSQLPrinter.selected_tableview_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1525:5: ( ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name | select_statement ) ) -> template( \"not implemented: selected_tableview\")
			// PLSQLPrinter.g:1525:10: ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name | select_statement ) )
			{
			match(input,SELECTED_TABLEVIEW,FOLLOW_SELECTED_TABLEVIEW_in_selected_tableview14761); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1525:31: ( alias )?
			int alt343=2;
			int LA343_0 = input.LA(1);
			if ( (LA343_0==COLUMN_ALIAS||LA343_0==TABLE_ALIAS) ) {
				alt343=1;
			}
			switch (alt343) {
				case 1 :
					// PLSQLPrinter.g:1525:31: alias
					{
					pushFollow(FOLLOW_alias_in_selected_tableview14763);
					alias();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1525:38: ( tableview_name | select_statement )
			int alt344=2;
			int LA344_0 = input.LA(1);
			if ( (LA344_0==TABLEVIEW_NAME) ) {
				alt344=1;
			}
			else if ( (LA344_0==SELECT_STATEMENT) ) {
				alt344=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 344, 0, input);
				throw nvae;
			}

			switch (alt344) {
				case 1 :
					// PLSQLPrinter.g:1525:39: tableview_name
					{
					pushFollow(FOLLOW_tableview_name_in_selected_tableview14767);
					tableview_name();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1525:54: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_selected_tableview14769);
					select_statement();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1526:5: -> template( \"not implemented: selected_tableview\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: selected_tableview");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selected_tableview"


	public static class lock_table_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "lock_table_statement"
	// PLSQLPrinter.g:1531:1: lock_table_statement : ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) -> template( \"not implemented: lock_table_statement\";
	public final PLSQLPrinter.lock_table_statement_return lock_table_statement() throws RecognitionException {
		PLSQLPrinter.lock_table_statement_return retval = new PLSQLPrinter.lock_table_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1532:5: ( ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) -> template( \"not implemented: lock_table_statement\")
			// PLSQLPrinter.g:1532:10: ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? )
			{
			match(input,PLSQL_RESERVED_LOCK,FOLLOW_PLSQL_RESERVED_LOCK_in_lock_table_statement14808); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1532:32: ( lock_table_element )+
			int cnt345=0;
			loop345:
			while (true) {
				int alt345=2;
				int LA345_0 = input.LA(1);
				if ( (LA345_0==LOCK_TABLE_ELEMENT) ) {
					alt345=1;
				}

				switch (alt345) {
				case 1 :
					// PLSQLPrinter.g:1532:32: lock_table_element
					{
					pushFollow(FOLLOW_lock_table_element_in_lock_table_statement14810);
					lock_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt345 >= 1 ) break loop345;
					EarlyExitException eee = new EarlyExitException(345, input);
					throw eee;
				}
				cnt345++;
			}

			pushFollow(FOLLOW_lock_mode_in_lock_table_statement14813);
			lock_mode();
			state._fsp--;

			// PLSQLPrinter.g:1532:62: ( wait_nowait_part )?
			int alt346=2;
			int LA346_0 = input.LA(1);
			if ( (LA346_0==PLSQL_RESERVED_NOWAIT||LA346_0==WAIT_VK) ) {
				alt346=1;
			}
			switch (alt346) {
				case 1 :
					// PLSQLPrinter.g:1532:62: wait_nowait_part
					{
					pushFollow(FOLLOW_wait_nowait_part_in_lock_table_statement14815);
					wait_nowait_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1533:5: -> template( \"not implemented: lock_table_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: lock_table_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_table_statement"


	public static class wait_nowait_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "wait_nowait_part"
	// PLSQLPrinter.g:1536:1: wait_nowait_part : ( ^( WAIT_VK expression ) -> template( \"not implemented: wait_nowait_part\"| PLSQL_RESERVED_NOWAIT -> template( \"not implemented: wait_nowait_part\");
	public final PLSQLPrinter.wait_nowait_part_return wait_nowait_part() throws RecognitionException {
		PLSQLPrinter.wait_nowait_part_return retval = new PLSQLPrinter.wait_nowait_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1537:5: ( ^( WAIT_VK expression ) -> template( \"not implemented: wait_nowait_part\"| PLSQL_RESERVED_NOWAIT -> template( \"not implemented: wait_nowait_part\")
			int alt347=2;
			int LA347_0 = input.LA(1);
			if ( (LA347_0==WAIT_VK) ) {
				alt347=1;
			}
			else if ( (LA347_0==PLSQL_RESERVED_NOWAIT) ) {
				alt347=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 347, 0, input);
				throw nvae;
			}

			switch (alt347) {
				case 1 :
					// PLSQLPrinter.g:1537:10: ^( WAIT_VK expression )
					{
					match(input,WAIT_VK,FOLLOW_WAIT_VK_in_wait_nowait_part14852); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_wait_nowait_part14854);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1538:5: -> template( \"not implemented: wait_nowait_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: wait_nowait_part");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1539:10: PLSQL_RESERVED_NOWAIT
					{
					match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_wait_nowait_part14880); 
					// TEMPLATE REWRITE
					// 1540:5: -> template( \"not implemented: wait_nowait_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: wait_nowait_part");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "wait_nowait_part"


	public static class lock_table_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "lock_table_element"
	// PLSQLPrinter.g:1545:1: lock_table_element : ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) -> template( \"not implemented: lock_table_element\";
	public final PLSQLPrinter.lock_table_element_return lock_table_element() throws RecognitionException {
		PLSQLPrinter.lock_table_element_return retval = new PLSQLPrinter.lock_table_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1546:5: ( ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) -> template( \"not implemented: lock_table_element\")
			// PLSQLPrinter.g:1546:10: ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? )
			{
			match(input,LOCK_TABLE_ELEMENT,FOLLOW_LOCK_TABLE_ELEMENT_in_lock_table_element14917); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_lock_table_element14919);
			tableview_name();
			state._fsp--;

			// PLSQLPrinter.g:1546:46: ( partition_extension_clause )?
			int alt348=2;
			int LA348_0 = input.LA(1);
			if ( (LA348_0==PARTITION_VK||LA348_0==SUBPARTITION_VK) ) {
				alt348=1;
			}
			switch (alt348) {
				case 1 :
					// PLSQLPrinter.g:1546:46: partition_extension_clause
					{
					pushFollow(FOLLOW_partition_extension_clause_in_lock_table_element14921);
					partition_extension_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1547:5: -> template( \"not implemented: lock_table_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: lock_table_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_table_element"


	public static class lock_mode_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "lock_mode"
	// PLSQLPrinter.g:1550:1: lock_mode : ( ROW_VK PLSQL_RESERVED_SHARE -> template( \"not implemented: lock_mode\"| ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )? -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\");
	public final PLSQLPrinter.lock_mode_return lock_mode() throws RecognitionException {
		PLSQLPrinter.lock_mode_return retval = new PLSQLPrinter.lock_mode_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1551:5: ( ROW_VK PLSQL_RESERVED_SHARE -> template( \"not implemented: lock_mode\"| ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )? -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\")
			int alt350=5;
			switch ( input.LA(1) ) {
			case ROW_VK:
				{
				int LA350_1 = input.LA(2);
				if ( (LA350_1==PLSQL_RESERVED_SHARE) ) {
					alt350=1;
				}
				else if ( (LA350_1==PLSQL_RESERVED_EXCLUSIVE) ) {
					alt350=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 350, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PLSQL_RESERVED_SHARE:
				{
				int LA350_2 = input.LA(2);
				if ( (LA350_2==ROW_VK) ) {
					alt350=4;
				}
				else if ( (LA350_2==UP||LA350_2==PLSQL_RESERVED_NOWAIT||LA350_2==SQL92_RESERVED_UPDATE||LA350_2==WAIT_VK) ) {
					alt350=3;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 350, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PLSQL_RESERVED_EXCLUSIVE:
				{
				alt350=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 350, 0, input);
				throw nvae;
			}
			switch (alt350) {
				case 1 :
					// PLSQLPrinter.g:1551:10: ROW_VK PLSQL_RESERVED_SHARE
					{
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode14957); 
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode14959); 
					// TEMPLATE REWRITE
					// 1552:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1553:10: ROW_VK PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode14984); 
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode14986); 
					// TEMPLATE REWRITE
					// 1554:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1555:10: PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )?
					{
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode15011); 
					// PLSQLPrinter.g:1555:31: ( SQL92_RESERVED_UPDATE )?
					int alt349=2;
					int LA349_0 = input.LA(1);
					if ( (LA349_0==SQL92_RESERVED_UPDATE) ) {
						alt349=1;
					}
					switch (alt349) {
						case 1 :
							// PLSQLPrinter.g:1555:31: SQL92_RESERVED_UPDATE
							{
							match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_lock_mode15013); 
							}
							break;

					}

					// TEMPLATE REWRITE
					// 1556:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1557:10: PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode15039); 
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode15041); 
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode15043); 
					// TEMPLATE REWRITE
					// 1558:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1559:10: PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode15068); 
					// TEMPLATE REWRITE
					// 1560:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_mode"


	public static class general_table_ref_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_table_ref"
	// PLSQLPrinter.g:1566:1: general_table_ref : ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? ) -> general_table_ref(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.sttable_alias=$alias.st);
	public final PLSQLPrinter.general_table_ref_return general_table_ref() throws RecognitionException {
		PLSQLPrinter.general_table_ref_return retval = new PLSQLPrinter.general_table_ref_return();
		retval.start = input.LT(1);

		CommonTree ONLY_VK228=null;
		TreeRuleReturnScope dml_table_expression_clause229 =null;
		TreeRuleReturnScope alias230 =null;

		try {
			// PLSQLPrinter.g:1567:5: ( ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? ) -> general_table_ref(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.sttable_alias=$alias.st))
			// PLSQLPrinter.g:1567:10: ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? )
			{
			match(input,TABLE_REF,FOLLOW_TABLE_REF_in_general_table_ref15106); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1567:22: ( alias )?
			int alt351=2;
			int LA351_0 = input.LA(1);
			if ( (LA351_0==COLUMN_ALIAS||LA351_0==TABLE_ALIAS) ) {
				alt351=1;
			}
			switch (alt351) {
				case 1 :
					// PLSQLPrinter.g:1567:22: alias
					{
					pushFollow(FOLLOW_alias_in_general_table_ref15108);
					alias230=alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_table_expression_clause_in_general_table_ref15111);
			dml_table_expression_clause229=dml_table_expression_clause();
			state._fsp--;

			// PLSQLPrinter.g:1567:57: ( ONLY_VK )?
			int alt352=2;
			int LA352_0 = input.LA(1);
			if ( (LA352_0==ONLY_VK) ) {
				alt352=1;
			}
			switch (alt352) {
				case 1 :
					// PLSQLPrinter.g:1567:57: ONLY_VK
					{
					ONLY_VK228=(CommonTree)match(input,ONLY_VK,FOLLOW_ONLY_VK_in_general_table_ref15113); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1568:5: -> general_table_ref(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.sttable_alias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("general_table_ref",new STAttrMap().put("is_only", ONLY_VK228 != null).put("dml_table_expression_clause", (dml_table_expression_clause229!=null?((StringTemplate)dml_table_expression_clause229.getTemplate()):null)).put("table_alias", (alias230!=null?((StringTemplate)alias230.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_table_ref"


	public static class static_returning_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "static_returning_clause"
	// PLSQLPrinter.g:1574:1: static_returning_clause : ^( STATIC_RETURNING (expressions+= expression )+ into_clause ) -> static_returning_clause(expressions=$expressionsinto_clause=$into_clause.st);
	public final PLSQLPrinter.static_returning_clause_return static_returning_clause() throws RecognitionException {
		PLSQLPrinter.static_returning_clause_return retval = new PLSQLPrinter.static_returning_clause_return();
		retval.start = input.LT(1);

		List<Object> list_expressions=null;
		TreeRuleReturnScope into_clause231 =null;
		RuleReturnScope expressions = null;
		try {
			// PLSQLPrinter.g:1575:5: ( ^( STATIC_RETURNING (expressions+= expression )+ into_clause ) -> static_returning_clause(expressions=$expressionsinto_clause=$into_clause.st))
			// PLSQLPrinter.g:1575:10: ^( STATIC_RETURNING (expressions+= expression )+ into_clause )
			{
			match(input,STATIC_RETURNING,FOLLOW_STATIC_RETURNING_in_static_returning_clause15198); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1575:40: (expressions+= expression )+
			int cnt353=0;
			loop353:
			while (true) {
				int alt353=2;
				int LA353_0 = input.LA(1);
				if ( (LA353_0==EXPR||LA353_0==LOGIC_EXPR) ) {
					alt353=1;
				}

				switch (alt353) {
				case 1 :
					// PLSQLPrinter.g:1575:40: expressions+= expression
					{
					pushFollow(FOLLOW_expression_in_static_returning_clause15202);
					expressions=expression();
					state._fsp--;

					if (list_expressions==null) list_expressions=new ArrayList<Object>();
					list_expressions.add(expressions.getTemplate());
					}
					break;

				default :
					if ( cnt353 >= 1 ) break loop353;
					EarlyExitException eee = new EarlyExitException(353, input);
					throw eee;
				}
				cnt353++;
			}

			pushFollow(FOLLOW_into_clause_in_static_returning_clause15205);
			into_clause231=into_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1576:5: -> static_returning_clause(expressions=$expressionsinto_clause=$into_clause.st)
			{
				retval.st = templateLib.getInstanceOf("static_returning_clause",new STAttrMap().put("expressions", list_expressions).put("into_clause", (into_clause231!=null?((StringTemplate)into_clause231.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "static_returning_clause"


	public static class error_logging_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "error_logging_clause"
	// PLSQLPrinter.g:1579:1: error_logging_clause : ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? ) -> template( \"not implemented: error_logging_clause\";
	public final PLSQLPrinter.error_logging_clause_return error_logging_clause() throws RecognitionException {
		PLSQLPrinter.error_logging_clause_return retval = new PLSQLPrinter.error_logging_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1580:5: ( ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? ) -> template( \"not implemented: error_logging_clause\")
			// PLSQLPrinter.g:1580:10: ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? )
			{
			match(input,LOG_VK,FOLLOW_LOG_VK_in_error_logging_clause15247); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1580:19: ( error_logging_into_part )?
				int alt354=2;
				int LA354_0 = input.LA(1);
				if ( (LA354_0==SQL92_RESERVED_INTO) ) {
					alt354=1;
				}
				switch (alt354) {
					case 1 :
						// PLSQLPrinter.g:1580:19: error_logging_into_part
						{
						pushFollow(FOLLOW_error_logging_into_part_in_error_logging_clause15249);
						error_logging_into_part();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1580:44: ( expression )?
				int alt355=2;
				int LA355_0 = input.LA(1);
				if ( (LA355_0==EXPR||LA355_0==LOGIC_EXPR) ) {
					alt355=1;
				}
				switch (alt355) {
					case 1 :
						// PLSQLPrinter.g:1580:44: expression
						{
						pushFollow(FOLLOW_expression_in_error_logging_clause15252);
						expression();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1580:56: ( error_logging_reject_part )?
				int alt356=2;
				int LA356_0 = input.LA(1);
				if ( (LA356_0==REJECT_VK) ) {
					alt356=1;
				}
				switch (alt356) {
					case 1 :
						// PLSQLPrinter.g:1580:56: error_logging_reject_part
						{
						pushFollow(FOLLOW_error_logging_reject_part_in_error_logging_clause15255);
						error_logging_reject_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1581:5: -> template( \"not implemented: error_logging_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: error_logging_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "error_logging_clause"


	public static class error_logging_into_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "error_logging_into_part"
	// PLSQLPrinter.g:1584:1: error_logging_into_part : ^( SQL92_RESERVED_INTO tableview_name ) -> template( \"not implemented: error_logging_into_part\";
	public final PLSQLPrinter.error_logging_into_part_return error_logging_into_part() throws RecognitionException {
		PLSQLPrinter.error_logging_into_part_return retval = new PLSQLPrinter.error_logging_into_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1585:5: ( ^( SQL92_RESERVED_INTO tableview_name ) -> template( \"not implemented: error_logging_into_part\")
			// PLSQLPrinter.g:1585:10: ^( SQL92_RESERVED_INTO tableview_name )
			{
			match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_error_logging_into_part15292); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_error_logging_into_part15294);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1586:5: -> template( \"not implemented: error_logging_into_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: error_logging_into_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "error_logging_into_part"


	public static class error_logging_reject_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "error_logging_reject_part"
	// PLSQLPrinter.g:1589:1: error_logging_reject_part : ^( REJECT_VK ( UNLIMITED_VK | expression ) ) -> template( \"not implemented: error_logging_reject_part\";
	public final PLSQLPrinter.error_logging_reject_part_return error_logging_reject_part() throws RecognitionException {
		PLSQLPrinter.error_logging_reject_part_return retval = new PLSQLPrinter.error_logging_reject_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1590:5: ( ^( REJECT_VK ( UNLIMITED_VK | expression ) ) -> template( \"not implemented: error_logging_reject_part\")
			// PLSQLPrinter.g:1590:10: ^( REJECT_VK ( UNLIMITED_VK | expression ) )
			{
			match(input,REJECT_VK,FOLLOW_REJECT_VK_in_error_logging_reject_part15330); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1590:22: ( UNLIMITED_VK | expression )
			int alt357=2;
			int LA357_0 = input.LA(1);
			if ( (LA357_0==UNLIMITED_VK) ) {
				alt357=1;
			}
			else if ( (LA357_0==EXPR||LA357_0==LOGIC_EXPR) ) {
				alt357=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 357, 0, input);
				throw nvae;
			}

			switch (alt357) {
				case 1 :
					// PLSQLPrinter.g:1590:23: UNLIMITED_VK
					{
					match(input,UNLIMITED_VK,FOLLOW_UNLIMITED_VK_in_error_logging_reject_part15333); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1590:36: expression
					{
					pushFollow(FOLLOW_expression_in_error_logging_reject_part15335);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1591:5: -> template( \"not implemented: error_logging_reject_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: error_logging_reject_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "error_logging_reject_part"


	public static class dml_table_expression_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_table_expression_clause"
	// PLSQLPrinter.g:1594:1: dml_table_expression_clause : ( ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) -> template( \"not implemented: dml_table_expression_clause[COLLECTION_MODE]\"| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> template( \"not implemented: dml_table_expression_clause[SELECT_MODE]\"| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st }) ) | table_ref -> in_parens(val=$table_ref.st));
	public final PLSQLPrinter.dml_table_expression_clause_return dml_table_expression_clause() throws RecognitionException {
		PLSQLPrinter.dml_table_expression_clause_return retval = new PLSQLPrinter.dml_table_expression_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope tableview_name232 =null;
		TreeRuleReturnScope sample_clause233 =null;
		TreeRuleReturnScope general_element234 =null;
		TreeRuleReturnScope standard_function235 =null;
		TreeRuleReturnScope table_ref236 =null;

		try {
			// PLSQLPrinter.g:1595:5: ( ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) -> template( \"not implemented: dml_table_expression_clause[COLLECTION_MODE]\"| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> template( \"not implemented: dml_table_expression_clause[SELECT_MODE]\"| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st }) ) | table_ref -> in_parens(val=$table_ref.st))
			int alt362=2;
			int LA362_0 = input.LA(1);
			if ( (LA362_0==TABLE_EXPRESSION) ) {
				alt362=1;
			}
			else if ( (LA362_0==TABLE_REF) ) {
				alt362=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 362, 0, input);
				throw nvae;
			}

			switch (alt362) {
				case 1 :
					// PLSQLPrinter.g:1595:10: ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) -> template( \"not implemented: dml_table_expression_clause[COLLECTION_MODE]\"| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> template( \"not implemented: dml_table_expression_clause[SELECT_MODE]\"| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st }) )
					{
					match(input,TABLE_EXPRESSION,FOLLOW_TABLE_EXPRESSION_in_dml_table_expression_clause15372); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1596:9: ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) -> template( \"not implemented: dml_table_expression_clause[COLLECTION_MODE]\"| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> template( \"not implemented: dml_table_expression_clause[SELECT_MODE]\"| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st })
					int alt361=5;
					switch ( input.LA(1) ) {
					case COLLECTION_MODE:
						{
						alt361=1;
						}
						break;
					case SELECT_MODE:
						{
						alt361=2;
						}
						break;
					case DIRECT_MODE:
						{
						alt361=3;
						}
						break;
					case CASCATED_ELEMENT:
						{
						alt361=4;
						}
						break;
					case CAST_VK:
					case CHR_VK:
					case COLLECT_VK:
					case COUNT_VK:
					case DECOMPOSE_VK:
					case EXTRACT_VK:
					case FIRST_VALUE_VK:
					case FUNCTION_ENABLING_OVER:
					case FUNCTION_ENABLING_USING:
					case FUNCTION_ENABLING_WITHIN_OR_OVER:
					case LAST_VALUE_VK:
					case PREDICTION_FUNCTION:
					case TRANSLATE_VK:
					case TREAT_VK:
					case TRIM_VK:
					case XMLAGG_VK:
					case XMLCAST_VK:
					case XMLCOLATTVAL_VK:
					case XMLELEMENT_VK:
					case XMLEXISTS_VK:
					case XMLFOREST_VK:
					case XMLPARSE_VK:
					case XMLPI_VK:
					case XMLQUERY_VK:
					case XMLROOT_VK:
					case XMLSERIALIZE_VK:
					case XMLTABLE_VK:
						{
						alt361=5;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 361, 0, input);
						throw nvae;
					}
					switch (alt361) {
						case 1 :
							// PLSQLPrinter.g:1596:14: ^( COLLECTION_MODE expression ( PLUS_SIGN )? )
							{
							match(input,COLLECTION_MODE,FOLLOW_COLLECTION_MODE_in_dml_table_expression_clause15389); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_expression_in_dml_table_expression_clause15391);
							expression();
							state._fsp--;

							// PLSQLPrinter.g:1596:43: ( PLUS_SIGN )?
							int alt358=2;
							int LA358_0 = input.LA(1);
							if ( (LA358_0==PLUS_SIGN) ) {
								alt358=1;
							}
							switch (alt358) {
								case 1 :
									// PLSQLPrinter.g:1596:43: PLUS_SIGN
									{
									match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_dml_table_expression_clause15393); 
									}
									break;

							}

							match(input, Token.UP, null); 

							// TEMPLATE REWRITE
							// 1597:15: -> template( \"not implemented: dml_table_expression_clause[COLLECTION_MODE]\"
							{
								retval.st = new StringTemplate(templateLib, "not implemented: dml_table_expression_clause[COLLECTION_MODE]");
							}



							}
							break;
						case 2 :
							// PLSQLPrinter.g:1598:14: ^( SELECT_MODE select_statement ( subquery_restriction_clause )? )
							{
							match(input,SELECT_MODE,FOLLOW_SELECT_MODE_in_dml_table_expression_clause15435); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_select_statement_in_dml_table_expression_clause15437);
							select_statement();
							state._fsp--;

							// PLSQLPrinter.g:1598:45: ( subquery_restriction_clause )?
							int alt359=2;
							int LA359_0 = input.LA(1);
							if ( (LA359_0==SQL92_RESERVED_WITH) ) {
								alt359=1;
							}
							switch (alt359) {
								case 1 :
									// PLSQLPrinter.g:1598:45: subquery_restriction_clause
									{
									pushFollow(FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause15439);
									subquery_restriction_clause();
									state._fsp--;

									}
									break;

							}

							match(input, Token.UP, null); 

							// TEMPLATE REWRITE
							// 1599:15: -> template( \"not implemented: dml_table_expression_clause[SELECT_MODE]\"
							{
								retval.st = new StringTemplate(templateLib, "not implemented: dml_table_expression_clause[SELECT_MODE]");
							}



							}
							break;
						case 3 :
							// PLSQLPrinter.g:1600:14: ^( DIRECT_MODE tableview_name ( sample_clause )? )
							{
							match(input,DIRECT_MODE,FOLLOW_DIRECT_MODE_in_dml_table_expression_clause15481); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_tableview_name_in_dml_table_expression_clause15483);
							tableview_name232=tableview_name();
							state._fsp--;

							// PLSQLPrinter.g:1600:43: ( sample_clause )?
							int alt360=2;
							int LA360_0 = input.LA(1);
							if ( (LA360_0==SAMPLE_VK) ) {
								alt360=1;
							}
							switch (alt360) {
								case 1 :
									// PLSQLPrinter.g:1600:43: sample_clause
									{
									pushFollow(FOLLOW_sample_clause_in_dml_table_expression_clause15485);
									sample_clause233=sample_clause();
									state._fsp--;

									}
									break;

							}

							match(input, Token.UP, null); 

							// TEMPLATE REWRITE
							// 1601:15: -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)
							{
								retval.st = templateLib.getInstanceOf("dml_table_expression_clause_direct",new STAttrMap().put("table_or_view_name", (tableview_name232!=null?((StringTemplate)tableview_name232.getTemplate()):null)).put("sample_clause", (sample_clause233!=null?((StringTemplate)sample_clause233.getTemplate()):null)));
							}



							}
							break;
						case 4 :
							// PLSQLPrinter.g:1602:14: general_element
							{
							pushFollow(FOLLOW_general_element_in_dml_table_expression_clause15530);
							general_element234=general_element();
							state._fsp--;

							// TEMPLATE REWRITE
							// 1602:30: -> { $general_element.st }
							{
								retval.st =  (general_element234!=null?((StringTemplate)general_element234.getTemplate()):null) ;
							}



							}
							break;
						case 5 :
							// PLSQLPrinter.g:1603:14: standard_function
							{
							pushFollow(FOLLOW_standard_function_in_dml_table_expression_clause15549);
							standard_function235=standard_function();
							state._fsp--;

							// TEMPLATE REWRITE
							// 1603:32: -> { $standard_function.st }
							{
								retval.st =  (standard_function235!=null?((StringTemplate)standard_function235.getTemplate()):null) ;
							}



							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1606:14: table_ref
					{
					pushFollow(FOLLOW_table_ref_in_dml_table_expression_clause15588);
					table_ref236=table_ref();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1606:24: -> in_parens(val=$table_ref.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (table_ref236!=null?((StringTemplate)table_ref236.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_table_expression_clause"


	public static class subquery_restriction_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_restriction_clause"
	// PLSQLPrinter.g:1609:1: subquery_restriction_clause : ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) ) -> template( \"not implemented: subquery_restriction_clause\";
	public final PLSQLPrinter.subquery_restriction_clause_return subquery_restriction_clause() throws RecognitionException {
		PLSQLPrinter.subquery_restriction_clause_return retval = new PLSQLPrinter.subquery_restriction_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1610:5: ( ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) ) -> template( \"not implemented: subquery_restriction_clause\")
			// PLSQLPrinter.g:1610:10: ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) )
			{
			match(input,SQL92_RESERVED_WITH,FOLLOW_SQL92_RESERVED_WITH_in_subquery_restriction_clause15618); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1610:32: ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? )
			int alt364=2;
			int LA364_0 = input.LA(1);
			if ( (LA364_0==READ_VK) ) {
				alt364=1;
			}
			else if ( (LA364_0==SQL92_RESERVED_CHECK) ) {
				alt364=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 364, 0, input);
				throw nvae;
			}

			switch (alt364) {
				case 1 :
					// PLSQLPrinter.g:1610:33: READ_VK
					{
					match(input,READ_VK,FOLLOW_READ_VK_in_subquery_restriction_clause15621); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1610:41: SQL92_RESERVED_CHECK ( constraint_name )?
					{
					match(input,SQL92_RESERVED_CHECK,FOLLOW_SQL92_RESERVED_CHECK_in_subquery_restriction_clause15623); 
					// PLSQLPrinter.g:1610:62: ( constraint_name )?
					int alt363=2;
					int LA363_0 = input.LA(1);
					if ( (LA363_0==CONSTRAINT_NAME) ) {
						alt363=1;
					}
					switch (alt363) {
						case 1 :
							// PLSQLPrinter.g:1610:62: constraint_name
							{
							pushFollow(FOLLOW_constraint_name_in_subquery_restriction_clause15625);
							constraint_name();
							state._fsp--;

							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1611:5: -> template( \"not implemented: subquery_restriction_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: subquery_restriction_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_restriction_clause"


	public static class sample_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sample_clause"
	// PLSQLPrinter.g:1614:1: sample_clause : ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? ) -> template( \"not implemented: sample_clause\";
	public final PLSQLPrinter.sample_clause_return sample_clause() throws RecognitionException {
		PLSQLPrinter.sample_clause_return retval = new PLSQLPrinter.sample_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1615:5: ( ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? ) -> template( \"not implemented: sample_clause\")
			// PLSQLPrinter.g:1615:10: ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? )
			{
			match(input,SAMPLE_VK,FOLLOW_SAMPLE_VK_in_sample_clause15663); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1615:22: ( BLOCK_VK )?
			int alt365=2;
			int LA365_0 = input.LA(1);
			if ( (LA365_0==BLOCK_VK) ) {
				alt365=1;
			}
			switch (alt365) {
				case 1 :
					// PLSQLPrinter.g:1615:22: BLOCK_VK
					{
					match(input,BLOCK_VK,FOLLOW_BLOCK_VK_in_sample_clause15665); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_sample_clause15668);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1615:43: ( seed_part )?
			int alt366=2;
			int LA366_0 = input.LA(1);
			if ( (LA366_0==SEED_VK) ) {
				alt366=1;
			}
			switch (alt366) {
				case 1 :
					// PLSQLPrinter.g:1615:43: seed_part
					{
					pushFollow(FOLLOW_seed_part_in_sample_clause15670);
					seed_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1616:5: -> template( \"not implemented: sample_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: sample_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sample_clause"


	public static class seed_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "seed_part"
	// PLSQLPrinter.g:1619:1: seed_part : ^( SEED_VK expression ) -> template( \"not implemented: seed_part\";
	public final PLSQLPrinter.seed_part_return seed_part() throws RecognitionException {
		PLSQLPrinter.seed_part_return retval = new PLSQLPrinter.seed_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1620:5: ( ^( SEED_VK expression ) -> template( \"not implemented: seed_part\")
			// PLSQLPrinter.g:1620:10: ^( SEED_VK expression )
			{
			match(input,SEED_VK,FOLLOW_SEED_VK_in_seed_part15708); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_seed_part15710);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1621:5: -> template( \"not implemented: seed_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: seed_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "seed_part"


	public static class cursor_manipulation_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_manipulation_statements"
	// PLSQLPrinter.g:1630:1: cursor_manipulation_statements : ( close_statement -> template( \"not implemented: cursor_manipulation_statements\"| open_statement -> template( \"not implemented: cursor_manipulation_statements\"| fetch_statement -> template( \"not implemented: cursor_manipulation_statements\"| open_for_statement -> template( \"not implemented: cursor_manipulation_statements\");
	public final PLSQLPrinter.cursor_manipulation_statements_return cursor_manipulation_statements() throws RecognitionException {
		PLSQLPrinter.cursor_manipulation_statements_return retval = new PLSQLPrinter.cursor_manipulation_statements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1631:5: ( close_statement -> template( \"not implemented: cursor_manipulation_statements\"| open_statement -> template( \"not implemented: cursor_manipulation_statements\"| fetch_statement -> template( \"not implemented: cursor_manipulation_statements\"| open_for_statement -> template( \"not implemented: cursor_manipulation_statements\")
			int alt367=4;
			switch ( input.LA(1) ) {
			case CLOSE_VK:
				{
				alt367=1;
				}
				break;
			case OPEN_VK:
				{
				int LA367_2 = input.LA(2);
				if ( (LA367_2==DOWN) ) {
					int LA367_4 = input.LA(3);
					if ( (LA367_4==CURSOR_NAME) ) {
						alt367=2;
					}
					else if ( (LA367_4==HOSTED_VARIABLE_NAME||LA367_4==VARIABLE_NAME) ) {
						alt367=4;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 367, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 367, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_FETCH:
				{
				alt367=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 367, 0, input);
				throw nvae;
			}
			switch (alt367) {
				case 1 :
					// PLSQLPrinter.g:1631:10: close_statement
					{
					pushFollow(FOLLOW_close_statement_in_cursor_manipulation_statements15751);
					close_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1632:5: -> template( \"not implemented: cursor_manipulation_statements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: cursor_manipulation_statements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1633:10: open_statement
					{
					pushFollow(FOLLOW_open_statement_in_cursor_manipulation_statements15776);
					open_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1634:5: -> template( \"not implemented: cursor_manipulation_statements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: cursor_manipulation_statements");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1635:10: fetch_statement
					{
					pushFollow(FOLLOW_fetch_statement_in_cursor_manipulation_statements15801);
					fetch_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1636:5: -> template( \"not implemented: cursor_manipulation_statements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: cursor_manipulation_statements");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1637:10: open_for_statement
					{
					pushFollow(FOLLOW_open_for_statement_in_cursor_manipulation_statements15826);
					open_for_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1638:5: -> template( \"not implemented: cursor_manipulation_statements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: cursor_manipulation_statements");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_manipulation_statements"


	public static class close_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "close_statement"
	// PLSQLPrinter.g:1641:1: close_statement : ^( CLOSE_VK cursor_name ) -> template( \"not implemented: close_statement\";
	public final PLSQLPrinter.close_statement_return close_statement() throws RecognitionException {
		PLSQLPrinter.close_statement_return retval = new PLSQLPrinter.close_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1642:5: ( ^( CLOSE_VK cursor_name ) -> template( \"not implemented: close_statement\")
			// PLSQLPrinter.g:1642:11: ^( CLOSE_VK cursor_name )
			{
			match(input,CLOSE_VK,FOLLOW_CLOSE_VK_in_close_statement15862); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_close_statement15864);
			cursor_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1643:5: -> template( \"not implemented: close_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: close_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "close_statement"


	public static class open_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "open_statement"
	// PLSQLPrinter.g:1646:1: open_statement : ^( OPEN_VK cursor_name ( expression_list )? ) -> template( \"not implemented: open_statement\";
	public final PLSQLPrinter.open_statement_return open_statement() throws RecognitionException {
		PLSQLPrinter.open_statement_return retval = new PLSQLPrinter.open_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1647:5: ( ^( OPEN_VK cursor_name ( expression_list )? ) -> template( \"not implemented: open_statement\")
			// PLSQLPrinter.g:1647:10: ^( OPEN_VK cursor_name ( expression_list )? )
			{
			match(input,OPEN_VK,FOLLOW_OPEN_VK_in_open_statement15901); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_open_statement15903);
			cursor_name();
			state._fsp--;

			// PLSQLPrinter.g:1647:32: ( expression_list )?
			int alt368=2;
			int LA368_0 = input.LA(1);
			if ( (LA368_0==EXPR_LIST) ) {
				alt368=1;
			}
			switch (alt368) {
				case 1 :
					// PLSQLPrinter.g:1647:32: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_open_statement15905);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1648:5: -> template( \"not implemented: open_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: open_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "open_statement"


	public static class fetch_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "fetch_statement"
	// PLSQLPrinter.g:1651:1: fetch_statement : ^( SQL92_RESERVED_FETCH cursor_name ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) ) ) -> template( \"not implemented: fetch_statement\";
	public final PLSQLPrinter.fetch_statement_return fetch_statement() throws RecognitionException {
		PLSQLPrinter.fetch_statement_return retval = new PLSQLPrinter.fetch_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1652:5: ( ^( SQL92_RESERVED_FETCH cursor_name ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) ) ) -> template( \"not implemented: fetch_statement\")
			// PLSQLPrinter.g:1652:10: ^( SQL92_RESERVED_FETCH cursor_name ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) ) )
			{
			match(input,SQL92_RESERVED_FETCH,FOLLOW_SQL92_RESERVED_FETCH_in_fetch_statement15942); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_fetch_statement15944);
			cursor_name();
			state._fsp--;

			// PLSQLPrinter.g:1653:13: ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) )
			int alt371=2;
			int LA371_0 = input.LA(1);
			if ( (LA371_0==SQL92_RESERVED_INTO) ) {
				alt371=1;
			}
			else if ( (LA371_0==BULK_VK) ) {
				alt371=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 371, 0, input);
				throw nvae;
			}

			switch (alt371) {
				case 1 :
					// PLSQLPrinter.g:1653:18: ^( SQL92_RESERVED_INTO ( variable_name )+ )
					{
					match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_fetch_statement15965); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1653:40: ( variable_name )+
					int cnt369=0;
					loop369:
					while (true) {
						int alt369=2;
						int LA369_0 = input.LA(1);
						if ( (LA369_0==HOSTED_VARIABLE_NAME||LA369_0==VARIABLE_NAME) ) {
							alt369=1;
						}

						switch (alt369) {
						case 1 :
							// PLSQLPrinter.g:1653:40: variable_name
							{
							pushFollow(FOLLOW_variable_name_in_fetch_statement15967);
							variable_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt369 >= 1 ) break loop369;
							EarlyExitException eee = new EarlyExitException(369, input);
							throw eee;
						}
						cnt369++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1654:18: ^( BULK_VK ( variable_name )+ )
					{
					match(input,BULK_VK,FOLLOW_BULK_VK_in_fetch_statement15989); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1654:28: ( variable_name )+
					int cnt370=0;
					loop370:
					while (true) {
						int alt370=2;
						int LA370_0 = input.LA(1);
						if ( (LA370_0==HOSTED_VARIABLE_NAME||LA370_0==VARIABLE_NAME) ) {
							alt370=1;
						}

						switch (alt370) {
						case 1 :
							// PLSQLPrinter.g:1654:28: variable_name
							{
							pushFollow(FOLLOW_variable_name_in_fetch_statement15991);
							variable_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt370 >= 1 ) break loop370;
							EarlyExitException eee = new EarlyExitException(370, input);
							throw eee;
						}
						cnt370++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1657:5: -> template( \"not implemented: fetch_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: fetch_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fetch_statement"


	public static class open_for_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "open_for_statement"
	// PLSQLPrinter.g:1660:1: open_for_statement : ^( OPEN_VK variable_name ( expression | select_statement ) ( using_clause )? ) -> template( \"not implemented: open_for_statement\";
	public final PLSQLPrinter.open_for_statement_return open_for_statement() throws RecognitionException {
		PLSQLPrinter.open_for_statement_return retval = new PLSQLPrinter.open_for_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1661:5: ( ^( OPEN_VK variable_name ( expression | select_statement ) ( using_clause )? ) -> template( \"not implemented: open_for_statement\")
			// PLSQLPrinter.g:1661:10: ^( OPEN_VK variable_name ( expression | select_statement ) ( using_clause )? )
			{
			match(input,OPEN_VK,FOLLOW_OPEN_VK_in_open_for_statement16052); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_variable_name_in_open_for_statement16054);
			variable_name();
			state._fsp--;

			// PLSQLPrinter.g:1661:34: ( expression | select_statement )
			int alt372=2;
			int LA372_0 = input.LA(1);
			if ( (LA372_0==EXPR||LA372_0==LOGIC_EXPR) ) {
				alt372=1;
			}
			else if ( (LA372_0==SELECT_STATEMENT) ) {
				alt372=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 372, 0, input);
				throw nvae;
			}

			switch (alt372) {
				case 1 :
					// PLSQLPrinter.g:1661:35: expression
					{
					pushFollow(FOLLOW_expression_in_open_for_statement16057);
					expression();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1661:46: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_open_for_statement16059);
					select_statement();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1661:64: ( using_clause )?
			int alt373=2;
			int LA373_0 = input.LA(1);
			if ( (LA373_0==PLSQL_NON_RESERVED_USING) ) {
				alt373=1;
			}
			switch (alt373) {
				case 1 :
					// PLSQLPrinter.g:1661:64: using_clause
					{
					pushFollow(FOLLOW_using_clause_in_open_for_statement16062);
					using_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1662:5: -> template( \"not implemented: open_for_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: open_for_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "open_for_statement"


	public static class transaction_control_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "transaction_control_statements"
	// PLSQLPrinter.g:1669:1: transaction_control_statements : ( set_transaction_command -> template( \"not implemented: transaction_control_statements\"| set_constraint_command -> template( \"not implemented: transaction_control_statements\"| commit_statement -> template( \"not implemented: transaction_control_statements\"| rollback_statement -> template( \"not implemented: transaction_control_statements\"| savepoint_statement -> template( \"not implemented: transaction_control_statements\");
	public final PLSQLPrinter.transaction_control_statements_return transaction_control_statements() throws RecognitionException {
		PLSQLPrinter.transaction_control_statements_return retval = new PLSQLPrinter.transaction_control_statements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1670:5: ( set_transaction_command -> template( \"not implemented: transaction_control_statements\"| set_constraint_command -> template( \"not implemented: transaction_control_statements\"| commit_statement -> template( \"not implemented: transaction_control_statements\"| rollback_statement -> template( \"not implemented: transaction_control_statements\"| savepoint_statement -> template( \"not implemented: transaction_control_statements\")
			int alt374=5;
			switch ( input.LA(1) ) {
			case SET_TRANSACTION:
				{
				alt374=1;
				}
				break;
			case SET_CONSTRAINT:
				{
				alt374=2;
				}
				break;
			case COMMIT_VK:
				{
				alt374=3;
				}
				break;
			case ROLLBACK_VK:
				{
				alt374=4;
				}
				break;
			case SAVEPOINT_VK:
				{
				alt374=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 374, 0, input);
				throw nvae;
			}
			switch (alt374) {
				case 1 :
					// PLSQLPrinter.g:1670:10: set_transaction_command
					{
					pushFollow(FOLLOW_set_transaction_command_in_transaction_control_statements16102);
					set_transaction_command();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1671:5: -> template( \"not implemented: transaction_control_statements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: transaction_control_statements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1672:10: set_constraint_command
					{
					pushFollow(FOLLOW_set_constraint_command_in_transaction_control_statements16127);
					set_constraint_command();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1673:5: -> template( \"not implemented: transaction_control_statements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: transaction_control_statements");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1674:10: commit_statement
					{
					pushFollow(FOLLOW_commit_statement_in_transaction_control_statements16152);
					commit_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1675:5: -> template( \"not implemented: transaction_control_statements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: transaction_control_statements");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1676:10: rollback_statement
					{
					pushFollow(FOLLOW_rollback_statement_in_transaction_control_statements16177);
					rollback_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1677:5: -> template( \"not implemented: transaction_control_statements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: transaction_control_statements");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1678:10: savepoint_statement
					{
					pushFollow(FOLLOW_savepoint_statement_in_transaction_control_statements16202);
					savepoint_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1679:5: -> template( \"not implemented: transaction_control_statements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: transaction_control_statements");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "transaction_control_statements"


	public static class set_transaction_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "set_transaction_command"
	// PLSQLPrinter.g:1682:1: set_transaction_command : ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? ) -> template( \"not implemented: set_transaction_command\";
	public final PLSQLPrinter.set_transaction_command_return set_transaction_command() throws RecognitionException {
		PLSQLPrinter.set_transaction_command_return retval = new PLSQLPrinter.set_transaction_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1683:5: ( ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? ) -> template( \"not implemented: set_transaction_command\")
			// PLSQLPrinter.g:1683:10: ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? )
			{
			match(input,SET_TRANSACTION,FOLLOW_SET_TRANSACTION_in_set_transaction_command16237); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1683:28: ( CHAR_STRING )?
				int alt375=2;
				int LA375_0 = input.LA(1);
				if ( (LA375_0==CHAR_STRING) ) {
					alt375=1;
				}
				switch (alt375) {
					case 1 :
						// PLSQLPrinter.g:1683:28: CHAR_STRING
						{
						match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_set_transaction_command16239); 
						}
						break;

				}

				// PLSQLPrinter.g:1684:13: ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )?
				int alt378=4;
				switch ( input.LA(1) ) {
					case READ_VK:
						{
						alt378=1;
						}
						break;
					case ISOLATION_VK:
						{
						alt378=2;
						}
						break;
					case ROLLBACK_VK:
						{
						alt378=3;
						}
						break;
				}
				switch (alt378) {
					case 1 :
						// PLSQLPrinter.g:1684:18: ^( READ_VK ( ONLY_VK | WRITE_VK ) )
						{
						match(input,READ_VK,FOLLOW_READ_VK_in_set_transaction_command16260); 
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:1684:28: ( ONLY_VK | WRITE_VK )
						int alt376=2;
						int LA376_0 = input.LA(1);
						if ( (LA376_0==ONLY_VK) ) {
							alt376=1;
						}
						else if ( (LA376_0==WRITE_VK) ) {
							alt376=2;
						}

						else {
							NoViableAltException nvae =
								new NoViableAltException("", 376, 0, input);
							throw nvae;
						}

						switch (alt376) {
							case 1 :
								// PLSQLPrinter.g:1684:29: ONLY_VK
								{
								match(input,ONLY_VK,FOLLOW_ONLY_VK_in_set_transaction_command16263); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:1684:37: WRITE_VK
								{
								match(input,WRITE_VK,FOLLOW_WRITE_VK_in_set_transaction_command16265); 
								}
								break;

						}

						match(input, Token.UP, null); 

						}
						break;
					case 2 :
						// PLSQLPrinter.g:1685:18: ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) )
						{
						match(input,ISOLATION_VK,FOLLOW_ISOLATION_VK_in_set_transaction_command16287); 
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:1685:33: ( SERIALIZABLE_VK | COMMITTED_VK )
						int alt377=2;
						int LA377_0 = input.LA(1);
						if ( (LA377_0==SERIALIZABLE_VK) ) {
							alt377=1;
						}
						else if ( (LA377_0==COMMITTED_VK) ) {
							alt377=2;
						}

						else {
							NoViableAltException nvae =
								new NoViableAltException("", 377, 0, input);
							throw nvae;
						}

						switch (alt377) {
							case 1 :
								// PLSQLPrinter.g:1685:34: SERIALIZABLE_VK
								{
								match(input,SERIALIZABLE_VK,FOLLOW_SERIALIZABLE_VK_in_set_transaction_command16290); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:1685:50: COMMITTED_VK
								{
								match(input,COMMITTED_VK,FOLLOW_COMMITTED_VK_in_set_transaction_command16292); 
								}
								break;

						}

						match(input, Token.UP, null); 

						}
						break;
					case 3 :
						// PLSQLPrinter.g:1686:18: ^( ROLLBACK_VK rollback_segment_name )
						{
						match(input,ROLLBACK_VK,FOLLOW_ROLLBACK_VK_in_set_transaction_command16314); 
						match(input, Token.DOWN, null); 
						pushFollow(FOLLOW_rollback_segment_name_in_set_transaction_command16316);
						rollback_segment_name();
						state._fsp--;

						match(input, Token.UP, null); 

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1689:5: -> template( \"not implemented: set_transaction_command\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: set_transaction_command");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_transaction_command"


	public static class set_constraint_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "set_constraint_command"
	// PLSQLPrinter.g:1692:1: set_constraint_command : ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) ) -> template( \"not implemented: set_constraint_command\";
	public final PLSQLPrinter.set_constraint_command_return set_constraint_command() throws RecognitionException {
		PLSQLPrinter.set_constraint_command_return retval = new PLSQLPrinter.set_constraint_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1693:5: ( ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) ) -> template( \"not implemented: set_constraint_command\")
			// PLSQLPrinter.g:1693:10: ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) )
			{
			match(input,SET_CONSTRAINT,FOLLOW_SET_CONSTRAINT_in_set_constraint_command16377); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1693:27: ( SQL92_RESERVED_ALL | ( constraint_name )+ )
			int alt380=2;
			int LA380_0 = input.LA(1);
			if ( (LA380_0==SQL92_RESERVED_ALL) ) {
				alt380=1;
			}
			else if ( (LA380_0==CONSTRAINT_NAME) ) {
				alt380=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 380, 0, input);
				throw nvae;
			}

			switch (alt380) {
				case 1 :
					// PLSQLPrinter.g:1693:28: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_set_constraint_command16380); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1693:47: ( constraint_name )+
					{
					// PLSQLPrinter.g:1693:47: ( constraint_name )+
					int cnt379=0;
					loop379:
					while (true) {
						int alt379=2;
						int LA379_0 = input.LA(1);
						if ( (LA379_0==CONSTRAINT_NAME) ) {
							alt379=1;
						}

						switch (alt379) {
						case 1 :
							// PLSQLPrinter.g:1693:47: constraint_name
							{
							pushFollow(FOLLOW_constraint_name_in_set_constraint_command16382);
							constraint_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt379 >= 1 ) break loop379;
							EarlyExitException eee = new EarlyExitException(379, input);
							throw eee;
						}
						cnt379++;
					}

					}
					break;

			}

			// PLSQLPrinter.g:1693:65: ( IMMEDIATE_VK | DEFERRED_VK )
			int alt381=2;
			int LA381_0 = input.LA(1);
			if ( (LA381_0==IMMEDIATE_VK) ) {
				alt381=1;
			}
			else if ( (LA381_0==DEFERRED_VK) ) {
				alt381=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 381, 0, input);
				throw nvae;
			}

			switch (alt381) {
				case 1 :
					// PLSQLPrinter.g:1693:66: IMMEDIATE_VK
					{
					match(input,IMMEDIATE_VK,FOLLOW_IMMEDIATE_VK_in_set_constraint_command16387); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1693:79: DEFERRED_VK
					{
					match(input,DEFERRED_VK,FOLLOW_DEFERRED_VK_in_set_constraint_command16389); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1694:5: -> template( \"not implemented: set_constraint_command\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: set_constraint_command");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_constraint_command"


	public static class commit_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "commit_statement"
	// PLSQLPrinter.g:1697:1: commit_statement : ^( COMMIT_VK ( WORK_VK )? ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )? ( write_clause )? ) -> template( \"not implemented: commit_statement\";
	public final PLSQLPrinter.commit_statement_return commit_statement() throws RecognitionException {
		PLSQLPrinter.commit_statement_return retval = new PLSQLPrinter.commit_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1698:5: ( ^( COMMIT_VK ( WORK_VK )? ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )? ( write_clause )? ) -> template( \"not implemented: commit_statement\")
			// PLSQLPrinter.g:1698:11: ^( COMMIT_VK ( WORK_VK )? ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )? ( write_clause )? )
			{
			match(input,COMMIT_VK,FOLLOW_COMMIT_VK_in_commit_statement16427); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1698:23: ( WORK_VK )?
				int alt382=2;
				int LA382_0 = input.LA(1);
				if ( (LA382_0==WORK_VK) ) {
					alt382=1;
				}
				switch (alt382) {
					case 1 :
						// PLSQLPrinter.g:1698:23: WORK_VK
						{
						match(input,WORK_VK,FOLLOW_WORK_VK_in_commit_statement16429); 
						}
						break;

				}

				// PLSQLPrinter.g:1699:13: ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )?
				int alt385=3;
				int LA385_0 = input.LA(1);
				if ( (LA385_0==COMMENT_VK) ) {
					alt385=1;
				}
				else if ( (LA385_0==FORCE_VK) ) {
					alt385=2;
				}
				switch (alt385) {
					case 1 :
						// PLSQLPrinter.g:1699:18: ^( COMMENT_VK expression )
						{
						match(input,COMMENT_VK,FOLLOW_COMMENT_VK_in_commit_statement16451); 
						match(input, Token.DOWN, null); 
						pushFollow(FOLLOW_expression_in_commit_statement16453);
						expression();
						state._fsp--;

						match(input, Token.UP, null); 

						}
						break;
					case 2 :
						// PLSQLPrinter.g:1700:18: ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) )
						{
						match(input,FORCE_VK,FOLLOW_FORCE_VK_in_commit_statement16474); 
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:1700:29: ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? )
						int alt384=3;
						switch ( input.LA(1) ) {
						case CORRUPT_XID_VK:
							{
							alt384=1;
							}
							break;
						case CORRUPT_XID_ALL_VK:
							{
							alt384=2;
							}
							break;
						case EXPR:
						case LOGIC_EXPR:
							{
							alt384=3;
							}
							break;
						default:
							NoViableAltException nvae =
								new NoViableAltException("", 384, 0, input);
							throw nvae;
						}
						switch (alt384) {
							case 1 :
								// PLSQLPrinter.g:1700:30: CORRUPT_XID_VK expression
								{
								match(input,CORRUPT_XID_VK,FOLLOW_CORRUPT_XID_VK_in_commit_statement16477); 
								pushFollow(FOLLOW_expression_in_commit_statement16479);
								expression();
								state._fsp--;

								}
								break;
							case 2 :
								// PLSQLPrinter.g:1700:56: CORRUPT_XID_ALL_VK
								{
								match(input,CORRUPT_XID_ALL_VK,FOLLOW_CORRUPT_XID_ALL_VK_in_commit_statement16481); 
								}
								break;
							case 3 :
								// PLSQLPrinter.g:1700:75: expression ( expression )?
								{
								pushFollow(FOLLOW_expression_in_commit_statement16483);
								expression();
								state._fsp--;

								// PLSQLPrinter.g:1700:86: ( expression )?
								int alt383=2;
								int LA383_0 = input.LA(1);
								if ( (LA383_0==EXPR||LA383_0==LOGIC_EXPR) ) {
									alt383=1;
								}
								switch (alt383) {
									case 1 :
										// PLSQLPrinter.g:1700:86: expression
										{
										pushFollow(FOLLOW_expression_in_commit_statement16485);
										expression();
										state._fsp--;

										}
										break;

								}

								}
								break;

						}

						match(input, Token.UP, null); 

						}
						break;

				}

				// PLSQLPrinter.g:1702:13: ( write_clause )?
				int alt386=2;
				int LA386_0 = input.LA(1);
				if ( (LA386_0==WRITE_VK) ) {
					alt386=1;
				}
				switch (alt386) {
					case 1 :
						// PLSQLPrinter.g:1702:13: write_clause
						{
						pushFollow(FOLLOW_write_clause_in_commit_statement16517);
						write_clause();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1704:5: -> template( \"not implemented: commit_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: commit_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commit_statement"


	public static class write_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "write_clause"
	// PLSQLPrinter.g:1707:1: write_clause : ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? ) -> template( \"not implemented: write_clause\";
	public final PLSQLPrinter.write_clause_return write_clause() throws RecognitionException {
		PLSQLPrinter.write_clause_return retval = new PLSQLPrinter.write_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1708:5: ( ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? ) -> template( \"not implemented: write_clause\")
			// PLSQLPrinter.g:1708:10: ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? )
			{
			match(input,WRITE_VK,FOLLOW_WRITE_VK_in_write_clause16563); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1708:21: ( WAIT_VK | PLSQL_RESERVED_NOWAIT )?
				int alt387=3;
				int LA387_0 = input.LA(1);
				if ( (LA387_0==WAIT_VK) ) {
					alt387=1;
				}
				else if ( (LA387_0==PLSQL_RESERVED_NOWAIT) ) {
					alt387=2;
				}
				switch (alt387) {
					case 1 :
						// PLSQLPrinter.g:1708:22: WAIT_VK
						{
						match(input,WAIT_VK,FOLLOW_WAIT_VK_in_write_clause16566); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1708:30: PLSQL_RESERVED_NOWAIT
						{
						match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_write_clause16568); 
						}
						break;

				}

				// PLSQLPrinter.g:1708:54: ( IMMEDIATE_VK | BATCH_VK )?
				int alt388=3;
				int LA388_0 = input.LA(1);
				if ( (LA388_0==IMMEDIATE_VK) ) {
					alt388=1;
				}
				else if ( (LA388_0==BATCH_VK) ) {
					alt388=2;
				}
				switch (alt388) {
					case 1 :
						// PLSQLPrinter.g:1708:55: IMMEDIATE_VK
						{
						match(input,IMMEDIATE_VK,FOLLOW_IMMEDIATE_VK_in_write_clause16573); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1708:68: BATCH_VK
						{
						match(input,BATCH_VK,FOLLOW_BATCH_VK_in_write_clause16575); 
						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1709:5: -> template( \"not implemented: write_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: write_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "write_clause"


	public static class rollback_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "rollback_statement"
	// PLSQLPrinter.g:1712:1: rollback_statement : ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? ) -> template( \"not implemented: rollback_statement\";
	public final PLSQLPrinter.rollback_statement_return rollback_statement() throws RecognitionException {
		PLSQLPrinter.rollback_statement_return retval = new PLSQLPrinter.rollback_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1713:5: ( ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? ) -> template( \"not implemented: rollback_statement\")
			// PLSQLPrinter.g:1713:11: ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? )
			{
			match(input,ROLLBACK_VK,FOLLOW_ROLLBACK_VK_in_rollback_statement16614); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1713:25: ( WORK_VK )?
				int alt389=2;
				int LA389_0 = input.LA(1);
				if ( (LA389_0==WORK_VK) ) {
					alt389=1;
				}
				switch (alt389) {
					case 1 :
						// PLSQLPrinter.g:1713:25: WORK_VK
						{
						match(input,WORK_VK,FOLLOW_WORK_VK_in_rollback_statement16616); 
						}
						break;

				}

				// PLSQLPrinter.g:1714:13: ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )?
				int alt390=3;
				int LA390_0 = input.LA(1);
				if ( (LA390_0==SQL92_RESERVED_TO) ) {
					alt390=1;
				}
				else if ( (LA390_0==FORCE_VK) ) {
					alt390=2;
				}
				switch (alt390) {
					case 1 :
						// PLSQLPrinter.g:1714:18: ^( SQL92_RESERVED_TO savepoint_name )
						{
						match(input,SQL92_RESERVED_TO,FOLLOW_SQL92_RESERVED_TO_in_rollback_statement16638); 
						match(input, Token.DOWN, null); 
						pushFollow(FOLLOW_savepoint_name_in_rollback_statement16640);
						savepoint_name();
						state._fsp--;

						match(input, Token.UP, null); 

						}
						break;
					case 2 :
						// PLSQLPrinter.g:1715:18: ^( FORCE_VK CHAR_STRING )
						{
						match(input,FORCE_VK,FOLLOW_FORCE_VK_in_rollback_statement16661); 
						match(input, Token.DOWN, null); 
						match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_rollback_statement16663); 
						match(input, Token.UP, null); 

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1718:5: -> template( \"not implemented: rollback_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: rollback_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rollback_statement"


	public static class savepoint_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "savepoint_statement"
	// PLSQLPrinter.g:1721:1: savepoint_statement : ^( SAVEPOINT_VK savepoint_name ) -> template( \"not implemented: savepoint_statement\";
	public final PLSQLPrinter.savepoint_statement_return savepoint_statement() throws RecognitionException {
		PLSQLPrinter.savepoint_statement_return retval = new PLSQLPrinter.savepoint_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1722:5: ( ^( SAVEPOINT_VK savepoint_name ) -> template( \"not implemented: savepoint_statement\")
			// PLSQLPrinter.g:1722:10: ^( SAVEPOINT_VK savepoint_name )
			{
			match(input,SAVEPOINT_VK,FOLLOW_SAVEPOINT_VK_in_savepoint_statement16724); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_savepoint_name_in_savepoint_statement16726);
			savepoint_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1723:5: -> template( \"not implemented: savepoint_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: savepoint_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "savepoint_statement"


	public static class pipe_row_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pipe_row_statement"
	// PLSQLPrinter.g:1726:1: pipe_row_statement : ^( PIPE_ROW expression ) -> template( \"not implemented: pipe_row_statement\";
	public final PLSQLPrinter.pipe_row_statement_return pipe_row_statement() throws RecognitionException {
		PLSQLPrinter.pipe_row_statement_return retval = new PLSQLPrinter.pipe_row_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1727:5: ( ^( PIPE_ROW expression ) -> template( \"not implemented: pipe_row_statement\")
			// PLSQLPrinter.g:1727:10: ^( PIPE_ROW expression )
			{
			match(input,PIPE_ROW,FOLLOW_PIPE_ROW_in_pipe_row_statement16767); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_pipe_row_statement16769);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1728:5: -> template( \"not implemented: pipe_row_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pipe_row_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pipe_row_statement"


	public static class expression_list_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "expression_list"
	// PLSQLPrinter.g:1735:1: expression_list : ^( EXPR_LIST (expressions+= expression )* ) -> expression_list(expressions=$expressions);
	public final PLSQLPrinter.expression_list_return expression_list() throws RecognitionException {
		PLSQLPrinter.expression_list_return retval = new PLSQLPrinter.expression_list_return();
		retval.start = input.LT(1);

		List<Object> list_expressions=null;
		RuleReturnScope expressions = null;
		try {
			// PLSQLPrinter.g:1736:5: ( ^( EXPR_LIST (expressions+= expression )* ) -> expression_list(expressions=$expressions))
			// PLSQLPrinter.g:1736:10: ^( EXPR_LIST (expressions+= expression )* )
			{
			match(input,EXPR_LIST,FOLLOW_EXPR_LIST_in_expression_list16809); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1736:33: (expressions+= expression )*
				loop391:
				while (true) {
					int alt391=2;
					int LA391_0 = input.LA(1);
					if ( (LA391_0==EXPR||LA391_0==LOGIC_EXPR) ) {
						alt391=1;
					}

					switch (alt391) {
					case 1 :
						// PLSQLPrinter.g:1736:33: expressions+= expression
						{
						pushFollow(FOLLOW_expression_in_expression_list16813);
						expressions=expression();
						state._fsp--;

						if (list_expressions==null) list_expressions=new ArrayList<Object>();
						list_expressions.add(expressions.getTemplate());
						}
						break;

					default :
						break loop391;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1737:5: -> expression_list(expressions=$expressions)
			{
				retval.st = templateLib.getInstanceOf("expression_list",new STAttrMap().put("expressions", list_expressions));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression_list"


	public static class expression_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "expression"
	// PLSQLPrinter.g:1740:1: expression : ( ^( LOGIC_EXPR expression_element ) -> {$expression_element.st}| ^( EXPR expression_element ) -> {$expression_element.st});
	public final PLSQLPrinter.expression_return expression() throws RecognitionException {
		PLSQLPrinter.expression_return retval = new PLSQLPrinter.expression_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression_element237 =null;
		TreeRuleReturnScope expression_element238 =null;

		try {
			// PLSQLPrinter.g:1741:5: ( ^( LOGIC_EXPR expression_element ) -> {$expression_element.st}| ^( EXPR expression_element ) -> {$expression_element.st})
			int alt392=2;
			int LA392_0 = input.LA(1);
			if ( (LA392_0==LOGIC_EXPR) ) {
				alt392=1;
			}
			else if ( (LA392_0==EXPR) ) {
				alt392=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 392, 0, input);
				throw nvae;
			}

			switch (alt392) {
				case 1 :
					// PLSQLPrinter.g:1741:10: ^( LOGIC_EXPR expression_element )
					{
					match(input,LOGIC_EXPR,FOLLOW_LOGIC_EXPR_in_expression16851); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression16853);
					expression_element237=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1741:43: -> {$expression_element.st}
					{
						retval.st = (expression_element237!=null?((StringTemplate)expression_element237.getTemplate()):null);
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1742:10: ^( EXPR expression_element )
					{
					match(input,EXPR,FOLLOW_EXPR_in_expression16870); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression16872);
					expression_element238=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1742:38: -> {$expression_element.st}
					{
						retval.st = (expression_element238!=null?((StringTemplate)expression_element238.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression"


	public static class expression_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "expression_element"
	// PLSQLPrinter.g:1745:1: expression_element : ( ^( ( SQL92_RESERVED_OR | SQL92_RESERVED_AND | EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP | CONCATENATION_OP | PLUS_SIGN | MINUS_SIGN | ASTERISK | SOLIDUS | PERCENT | MOD_VK | DIV_VK ) arg1= expression_element arg2= expression_element ) -> expression_element_generic_binop(op=oparg1=$arg1.starg2=$arg2.st)| ^( SQL92_RESERVED_NOT expression_element ) -> template( \"not implemented: expression_element\"| ^( ( IS_NOT_NULL | IS_NULL | IS_NOT_NAN | IS_NAN | IS_NOT_PRESENT | IS_PRESENT | IS_NOT_INFINITE | IS_INFINITE | IS_NOT_A_SET | IS_A_SET | IS_NOT_EMPTY | IS_EMPTY ) arg= expression_element ) -> expression_element_generic_suffix_unary_op(op=oparg=$arg.st)| ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^( IS_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( NOT_IN expr= expression_element in_elements ) -> expression_element_not_in(expr=$expr.stin_elements=$in_elements.st)| ^( SQL92_RESERVED_IN expr= expression_element in_elements ) -> expression_element_in(expr=$expr.stin_elements=$in_elements.st)| ^( NOT_BETWEEN expression_element expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( SQL92_RESERVED_BETWEEN expression_element expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( NOT_LIKE expression_element expression_element ( expression_element )? ) -> template( \"not implemented: expression_element\"| ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK ) expression_element expression_element ( expression_element )? ) -> template( \"not implemented: expression_element\"| ^( PIPE_VK expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( UNARY_OPERATOR arg= expression_element ) -> expression_element_generic_prefix_unary_op(op=$UNARY_OPERATOR.textis_spaced=falsearg=$arg.st)| ^( SQL92_RESERVED_PRIOR expression_element ) -> template( \"not implemented: expression_element\"| ^( NEW_VK expression ) -> template( \"not implemented: expression_element\"| ^( SQL92_RESERVED_DISTINCT expression_element ) -> template( \"not implemented: expression_element\"| ^( STANDARD_FUNCTION standard_function ) -> template( \"not implemented: expression_element\"| ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) expression_element ) -> template( \"not implemented: expression_element\"| ^( VECTOR_EXPR ( expression_element )+ ) -> template( \"not implemented: expression_element\"| ^( DATETIME_OP expression_element datetime_element ) -> template( \"not implemented: expression_element\"| model_expression -> template( \"not implemented: expression_element\"| ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? ) -> template( \"not implemented: expression_element\"| ^( DOT_ASTERISK tableview_name ) -> template( \"not implemented: expression_element\"| ^( ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK ) cursor_name ) -> expression_element_cursor_op(op=opcursor_name=$cursor_name.st)| ^( OUTER_JOIN_SIGN expression_element ) -> template( \"not implemented: expression_element\"| case_statement -> template( \"not implemented: expression_element\"| constant -> { $constant.st }| general_element -> { $general_element.st }| subquery -> { $subquery.st });
	public final PLSQLPrinter.expression_element_return expression_element() throws RecognitionException {
		PLSQLPrinter.expression_element_return retval = new PLSQLPrinter.expression_element_return();
		retval.start = input.LT(1);

		CommonTree UNARY_OPERATOR241=null;
		TreeRuleReturnScope arg1 =null;
		TreeRuleReturnScope arg2 =null;
		TreeRuleReturnScope arg =null;
		TreeRuleReturnScope expr =null;
		TreeRuleReturnScope in_elements239 =null;
		TreeRuleReturnScope in_elements240 =null;
		TreeRuleReturnScope cursor_name242 =null;
		TreeRuleReturnScope constant243 =null;
		TreeRuleReturnScope general_element244 =null;
		TreeRuleReturnScope subquery245 =null;

		 String op = null; 
		try {
			// PLSQLPrinter.g:1747:5: ( ^( ( SQL92_RESERVED_OR | SQL92_RESERVED_AND | EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP | CONCATENATION_OP | PLUS_SIGN | MINUS_SIGN | ASTERISK | SOLIDUS | PERCENT | MOD_VK | DIV_VK ) arg1= expression_element arg2= expression_element ) -> expression_element_generic_binop(op=oparg1=$arg1.starg2=$arg2.st)| ^( SQL92_RESERVED_NOT expression_element ) -> template( \"not implemented: expression_element\"| ^( ( IS_NOT_NULL | IS_NULL | IS_NOT_NAN | IS_NAN | IS_NOT_PRESENT | IS_PRESENT | IS_NOT_INFINITE | IS_INFINITE | IS_NOT_A_SET | IS_A_SET | IS_NOT_EMPTY | IS_EMPTY ) arg= expression_element ) -> expression_element_generic_suffix_unary_op(op=oparg=$arg.st)| ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^( IS_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( NOT_IN expr= expression_element in_elements ) -> expression_element_not_in(expr=$expr.stin_elements=$in_elements.st)| ^( SQL92_RESERVED_IN expr= expression_element in_elements ) -> expression_element_in(expr=$expr.stin_elements=$in_elements.st)| ^( NOT_BETWEEN expression_element expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( SQL92_RESERVED_BETWEEN expression_element expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( NOT_LIKE expression_element expression_element ( expression_element )? ) -> template( \"not implemented: expression_element\"| ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK ) expression_element expression_element ( expression_element )? ) -> template( \"not implemented: expression_element\"| ^( PIPE_VK expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( UNARY_OPERATOR arg= expression_element ) -> expression_element_generic_prefix_unary_op(op=$UNARY_OPERATOR.textis_spaced=falsearg=$arg.st)| ^( SQL92_RESERVED_PRIOR expression_element ) -> template( \"not implemented: expression_element\"| ^( NEW_VK expression ) -> template( \"not implemented: expression_element\"| ^( SQL92_RESERVED_DISTINCT expression_element ) -> template( \"not implemented: expression_element\"| ^( STANDARD_FUNCTION standard_function ) -> template( \"not implemented: expression_element\"| ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) expression_element ) -> template( \"not implemented: expression_element\"| ^( VECTOR_EXPR ( expression_element )+ ) -> template( \"not implemented: expression_element\"| ^( DATETIME_OP expression_element datetime_element ) -> template( \"not implemented: expression_element\"| model_expression -> template( \"not implemented: expression_element\"| ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? ) -> template( \"not implemented: expression_element\"| ^( DOT_ASTERISK tableview_name ) -> template( \"not implemented: expression_element\"| ^( ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK ) cursor_name ) -> expression_element_cursor_op(op=opcursor_name=$cursor_name.st)| ^( OUTER_JOIN_SIGN expression_element ) -> template( \"not implemented: expression_element\"| case_statement -> template( \"not implemented: expression_element\"| constant -> { $constant.st }| general_element -> { $general_element.st }| subquery -> { $subquery.st })
			int alt406=30;
			switch ( input.LA(1) ) {
			case ASTERISK:
			case CONCATENATION_OP:
			case EQUALS_OP:
			case GREATER_THAN_OP:
			case GREATER_THAN_OR_EQUALS_OP:
			case LESS_THAN_OP:
			case LESS_THAN_OR_EQUALS_OP:
			case NOT_EQUAL_OP:
			case PERCENT:
			case PLUS_SIGN:
			case SOLIDUS:
			case SQL92_RESERVED_AND:
			case SQL92_RESERVED_OR:
			case DIV_VK:
			case MOD_VK:
				{
				alt406=1;
				}
				break;
			case MINUS_SIGN:
				{
				int LA406_2 = input.LA(2);
				if ( (LA406_2==DOWN) ) {
					int LA406_32 = input.LA(3);
					if ( (LA406_32==UNSIGNED_INTEGER) ) {
						int LA406_33 = input.LA(4);
						if ( (LA406_33==UP) ) {
							alt406=28;
						}
						else if ( (LA406_33==APPROXIMATE_NUM_LIT||LA406_33==ASTERISK||LA406_33==CHAR_STRING||LA406_33==CONCATENATION_OP||(LA406_33 >= EQUALS_OP && LA406_33 <= EXACT_NUM_LIT)||(LA406_33 >= GREATER_THAN_OP && LA406_33 <= GREATER_THAN_OR_EQUALS_OP)||(LA406_33 >= LESS_THAN_OP && LA406_33 <= LESS_THAN_OR_EQUALS_OP)||LA406_33==MINUS_SIGN||LA406_33==NOT_EQUAL_OP||LA406_33==PERCENT||LA406_33==PLUS_SIGN||LA406_33==SOLIDUS||LA406_33==SQL92_RESERVED_ALL||(LA406_33 >= SQL92_RESERVED_AND && LA406_33 <= SQL92_RESERVED_ANY)||LA406_33==SQL92_RESERVED_BETWEEN||LA406_33==SQL92_RESERVED_DEFAULT||LA406_33==SQL92_RESERVED_DISTINCT||(LA406_33 >= SQL92_RESERVED_EXISTS && LA406_33 <= SQL92_RESERVED_FALSE)||LA406_33==SQL92_RESERVED_IN||(LA406_33 >= SQL92_RESERVED_LIKE && LA406_33 <= SQL92_RESERVED_NULL)||LA406_33==SQL92_RESERVED_OR||LA406_33==SQL92_RESERVED_PRIOR||LA406_33==SQL92_RESERVED_TRUE||LA406_33==UNSIGNED_INTEGER||LA406_33==CASCATED_ELEMENT||LA406_33==DATETIME_OP||LA406_33==DBTIMEZONE_VK||LA406_33==DIV_VK||LA406_33==DOT_ASTERISK||(LA406_33 >= IS_A_SET && LA406_33 <= IS_PRESENT)||LA406_33==KEEP_VK||(LA406_33 >= LIKE2_VK && LA406_33 <= LIKEC_VK)||LA406_33==MAXVALUE_VK||LA406_33==MEMBER_VK||LA406_33==MINVALUE_VK||LA406_33==MODEL_EXPRESSION||LA406_33==MOD_VK||LA406_33==NEW_VK||LA406_33==NOT_BETWEEN||(LA406_33 >= NOT_IN && LA406_33 <= NOT_LIKE)||LA406_33==OUTER_JOIN_SIGN||(LA406_33 >= PERCENT_FOUND_VK && LA406_33 <= PERCENT_ROWCOUNT_VK)||LA406_33==PIPE_VK||LA406_33==SEARCHED_CASE||LA406_33==SESSIONTIMEZONE_VK||LA406_33==SIMPLE_CASE||LA406_33==SOME_VK||LA406_33==STANDARD_FUNCTION||LA406_33==SUBMULTISET_VK||LA406_33==SUBQUERY||LA406_33==UNARY_OPERATOR||LA406_33==VECTOR_EXPR) ) {
							alt406=1;
						}

						else {
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 406, 33, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA406_32==APPROXIMATE_NUM_LIT||LA406_32==ASTERISK||LA406_32==CHAR_STRING||LA406_32==CONCATENATION_OP||(LA406_32 >= EQUALS_OP && LA406_32 <= EXACT_NUM_LIT)||(LA406_32 >= GREATER_THAN_OP && LA406_32 <= GREATER_THAN_OR_EQUALS_OP)||(LA406_32 >= LESS_THAN_OP && LA406_32 <= LESS_THAN_OR_EQUALS_OP)||LA406_32==MINUS_SIGN||LA406_32==NOT_EQUAL_OP||LA406_32==PERCENT||LA406_32==PLUS_SIGN||LA406_32==SOLIDUS||LA406_32==SQL92_RESERVED_ALL||(LA406_32 >= SQL92_RESERVED_AND && LA406_32 <= SQL92_RESERVED_ANY)||LA406_32==SQL92_RESERVED_BETWEEN||LA406_32==SQL92_RESERVED_DEFAULT||LA406_32==SQL92_RESERVED_DISTINCT||(LA406_32 >= SQL92_RESERVED_EXISTS && LA406_32 <= SQL92_RESERVED_FALSE)||LA406_32==SQL92_RESERVED_IN||(LA406_32 >= SQL92_RESERVED_LIKE && LA406_32 <= SQL92_RESERVED_NULL)||LA406_32==SQL92_RESERVED_OR||LA406_32==SQL92_RESERVED_PRIOR||LA406_32==SQL92_RESERVED_TRUE||LA406_32==CASCATED_ELEMENT||LA406_32==DATETIME_OP||LA406_32==DBTIMEZONE_VK||LA406_32==DIV_VK||LA406_32==DOT_ASTERISK||(LA406_32 >= IS_A_SET && LA406_32 <= IS_PRESENT)||LA406_32==KEEP_VK||(LA406_32 >= LIKE2_VK && LA406_32 <= LIKEC_VK)||LA406_32==MAXVALUE_VK||LA406_32==MEMBER_VK||LA406_32==MINVALUE_VK||LA406_32==MODEL_EXPRESSION||LA406_32==MOD_VK||LA406_32==NEW_VK||LA406_32==NOT_BETWEEN||(LA406_32 >= NOT_IN && LA406_32 <= NOT_LIKE)||LA406_32==OUTER_JOIN_SIGN||(LA406_32 >= PERCENT_FOUND_VK && LA406_32 <= PERCENT_ROWCOUNT_VK)||LA406_32==PIPE_VK||LA406_32==SEARCHED_CASE||LA406_32==SESSIONTIMEZONE_VK||LA406_32==SIMPLE_CASE||LA406_32==SOME_VK||LA406_32==STANDARD_FUNCTION||LA406_32==SUBMULTISET_VK||LA406_32==SUBQUERY||LA406_32==UNARY_OPERATOR||LA406_32==VECTOR_EXPR) ) {
						alt406=1;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 406, 32, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 406, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_NOT:
				{
				alt406=2;
				}
				break;
			case IS_A_SET:
			case IS_EMPTY:
			case IS_INFINITE:
			case IS_NAN:
			case IS_NOT_A_SET:
			case IS_NOT_EMPTY:
			case IS_NOT_INFINITE:
			case IS_NOT_NAN:
			case IS_NOT_NULL:
			case IS_NOT_PRESENT:
			case IS_NULL:
			case IS_PRESENT:
				{
				alt406=3;
				}
				break;
			case IS_NOT_OF_TYPE:
				{
				alt406=4;
				}
				break;
			case IS_OF_TYPE:
				{
				alt406=5;
				}
				break;
			case MEMBER_VK:
			case SUBMULTISET_VK:
				{
				alt406=6;
				}
				break;
			case NOT_IN:
				{
				alt406=7;
				}
				break;
			case SQL92_RESERVED_IN:
				{
				alt406=8;
				}
				break;
			case NOT_BETWEEN:
				{
				alt406=9;
				}
				break;
			case SQL92_RESERVED_BETWEEN:
				{
				alt406=10;
				}
				break;
			case NOT_LIKE:
				{
				alt406=11;
				}
				break;
			case SQL92_RESERVED_LIKE:
			case LIKE2_VK:
			case LIKE4_VK:
			case LIKEC_VK:
				{
				alt406=12;
				}
				break;
			case PIPE_VK:
				{
				alt406=13;
				}
				break;
			case UNARY_OPERATOR:
				{
				alt406=14;
				}
				break;
			case SQL92_RESERVED_PRIOR:
				{
				alt406=15;
				}
				break;
			case NEW_VK:
				{
				alt406=16;
				}
				break;
			case SQL92_RESERVED_DISTINCT:
				{
				alt406=17;
				}
				break;
			case STANDARD_FUNCTION:
				{
				alt406=18;
				}
				break;
			case SQL92_RESERVED_ALL:
			case SQL92_RESERVED_ANY:
			case SQL92_RESERVED_EXISTS:
			case SOME_VK:
				{
				alt406=19;
				}
				break;
			case VECTOR_EXPR:
				{
				alt406=20;
				}
				break;
			case DATETIME_OP:
				{
				alt406=21;
				}
				break;
			case MODEL_EXPRESSION:
				{
				alt406=22;
				}
				break;
			case KEEP_VK:
				{
				alt406=23;
				}
				break;
			case DOT_ASTERISK:
				{
				alt406=24;
				}
				break;
			case PERCENT_FOUND_VK:
			case PERCENT_ISOPEN_VK:
			case PERCENT_NOTFOUND_VK:
			case PERCENT_ROWCOUNT_VK:
				{
				alt406=25;
				}
				break;
			case OUTER_JOIN_SIGN:
				{
				alt406=26;
				}
				break;
			case SEARCHED_CASE:
			case SIMPLE_CASE:
				{
				alt406=27;
				}
				break;
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case EXACT_NUM_LIT:
			case SQL92_RESERVED_DEFAULT:
			case SQL92_RESERVED_FALSE:
			case SQL92_RESERVED_NULL:
			case SQL92_RESERVED_TRUE:
			case UNSIGNED_INTEGER:
			case DBTIMEZONE_VK:
			case MAXVALUE_VK:
			case MINVALUE_VK:
			case SESSIONTIMEZONE_VK:
				{
				alt406=28;
				}
				break;
			case CASCATED_ELEMENT:
				{
				alt406=29;
				}
				break;
			case SUBQUERY:
				{
				alt406=30;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 406, 0, input);
				throw nvae;
			}
			switch (alt406) {
				case 1 :
					// PLSQLPrinter.g:1747:10: ^( ( SQL92_RESERVED_OR | SQL92_RESERVED_AND | EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP | CONCATENATION_OP | PLUS_SIGN | MINUS_SIGN | ASTERISK | SOLIDUS | PERCENT | MOD_VK | DIV_VK ) arg1= expression_element arg2= expression_element )
					{
					// PLSQLPrinter.g:1748:11: ( SQL92_RESERVED_OR | SQL92_RESERVED_AND | EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP | CONCATENATION_OP | PLUS_SIGN | MINUS_SIGN | ASTERISK | SOLIDUS | PERCENT | MOD_VK | DIV_VK )
					int alt393=16;
					switch ( input.LA(1) ) {
					case SQL92_RESERVED_OR:
						{
						alt393=1;
						}
						break;
					case SQL92_RESERVED_AND:
						{
						alt393=2;
						}
						break;
					case EQUALS_OP:
						{
						alt393=3;
						}
						break;
					case NOT_EQUAL_OP:
						{
						alt393=4;
						}
						break;
					case LESS_THAN_OP:
						{
						alt393=5;
						}
						break;
					case GREATER_THAN_OP:
						{
						alt393=6;
						}
						break;
					case LESS_THAN_OR_EQUALS_OP:
						{
						alt393=7;
						}
						break;
					case GREATER_THAN_OR_EQUALS_OP:
						{
						alt393=8;
						}
						break;
					case CONCATENATION_OP:
						{
						alt393=9;
						}
						break;
					case PLUS_SIGN:
						{
						alt393=10;
						}
						break;
					case MINUS_SIGN:
						{
						alt393=11;
						}
						break;
					case ASTERISK:
						{
						alt393=12;
						}
						break;
					case SOLIDUS:
						{
						alt393=13;
						}
						break;
					case PERCENT:
						{
						alt393=14;
						}
						break;
					case MOD_VK:
						{
						alt393=15;
						}
						break;
					case DIV_VK:
						{
						alt393=16;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 393, 0, input);
						throw nvae;
					}
					switch (alt393) {
						case 1 :
							// PLSQLPrinter.g:1749:13: SQL92_RESERVED_OR
							{
							match(input,SQL92_RESERVED_OR,FOLLOW_SQL92_RESERVED_OR_in_expression_element16929); 
							 op = "or"; 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1750:15: SQL92_RESERVED_AND
							{
							match(input,SQL92_RESERVED_AND,FOLLOW_SQL92_RESERVED_AND_in_expression_element16947); 
							 op = "and"; 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1751:15: EQUALS_OP
							{
							match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_expression_element16965); 
							 op = "="; 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1752:15: NOT_EQUAL_OP
							{
							match(input,NOT_EQUAL_OP,FOLLOW_NOT_EQUAL_OP_in_expression_element16983); 
							 op = "<>"; 
							}
							break;
						case 5 :
							// PLSQLPrinter.g:1753:15: LESS_THAN_OP
							{
							match(input,LESS_THAN_OP,FOLLOW_LESS_THAN_OP_in_expression_element17001); 
							 op = "<"; 
							}
							break;
						case 6 :
							// PLSQLPrinter.g:1754:15: GREATER_THAN_OP
							{
							match(input,GREATER_THAN_OP,FOLLOW_GREATER_THAN_OP_in_expression_element17019); 
							 op = ">"; 
							}
							break;
						case 7 :
							// PLSQLPrinter.g:1755:15: LESS_THAN_OR_EQUALS_OP
							{
							match(input,LESS_THAN_OR_EQUALS_OP,FOLLOW_LESS_THAN_OR_EQUALS_OP_in_expression_element17037); 
							 op = "<="; 
							}
							break;
						case 8 :
							// PLSQLPrinter.g:1756:15: GREATER_THAN_OR_EQUALS_OP
							{
							match(input,GREATER_THAN_OR_EQUALS_OP,FOLLOW_GREATER_THAN_OR_EQUALS_OP_in_expression_element17055); 
							 op = ">="; 
							}
							break;
						case 9 :
							// PLSQLPrinter.g:1757:15: CONCATENATION_OP
							{
							match(input,CONCATENATION_OP,FOLLOW_CONCATENATION_OP_in_expression_element17073); 
							 op = "||"; 
							}
							break;
						case 10 :
							// PLSQLPrinter.g:1758:15: PLUS_SIGN
							{
							match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_expression_element17091); 
							 op = "+"; 
							}
							break;
						case 11 :
							// PLSQLPrinter.g:1759:15: MINUS_SIGN
							{
							match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_expression_element17109); 
							 op = "-"; 
							}
							break;
						case 12 :
							// PLSQLPrinter.g:1760:15: ASTERISK
							{
							match(input,ASTERISK,FOLLOW_ASTERISK_in_expression_element17127); 
							 op = "*"; 
							}
							break;
						case 13 :
							// PLSQLPrinter.g:1761:15: SOLIDUS
							{
							match(input,SOLIDUS,FOLLOW_SOLIDUS_in_expression_element17145); 
							 op = "/"; 
							}
							break;
						case 14 :
							// PLSQLPrinter.g:1762:15: PERCENT
							{
							match(input,PERCENT,FOLLOW_PERCENT_in_expression_element17163); 
							 op = "%"; 
							}
							break;
						case 15 :
							// PLSQLPrinter.g:1763:15: MOD_VK
							{
							match(input,MOD_VK,FOLLOW_MOD_VK_in_expression_element17181); 
							 op = "mod"; 
							}
							break;
						case 16 :
							// PLSQLPrinter.g:1764:15: DIV_VK
							{
							match(input,DIV_VK,FOLLOW_DIV_VK_in_expression_element17199); 
							 op = "div"; 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17227);
					arg1=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17231);
					arg2=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1768:5: -> expression_element_generic_binop(op=oparg1=$arg1.starg2=$arg2.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_generic_binop",new STAttrMap().put("op", op).put("arg1", (arg1!=null?((StringTemplate)arg1.getTemplate()):null)).put("arg2", (arg2!=null?((StringTemplate)arg2.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1769:10: ^( SQL92_RESERVED_NOT expression_element )
					{
					match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_expression_element17279); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17281);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1770:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1771:10: ^( ( IS_NOT_NULL | IS_NULL | IS_NOT_NAN | IS_NAN | IS_NOT_PRESENT | IS_PRESENT | IS_NOT_INFINITE | IS_INFINITE | IS_NOT_A_SET | IS_A_SET | IS_NOT_EMPTY | IS_EMPTY ) arg= expression_element )
					{
					// PLSQLPrinter.g:1772:13: ( IS_NOT_NULL | IS_NULL | IS_NOT_NAN | IS_NAN | IS_NOT_PRESENT | IS_PRESENT | IS_NOT_INFINITE | IS_INFINITE | IS_NOT_A_SET | IS_A_SET | IS_NOT_EMPTY | IS_EMPTY )
					int alt394=12;
					switch ( input.LA(1) ) {
					case IS_NOT_NULL:
						{
						alt394=1;
						}
						break;
					case IS_NULL:
						{
						alt394=2;
						}
						break;
					case IS_NOT_NAN:
						{
						alt394=3;
						}
						break;
					case IS_NAN:
						{
						alt394=4;
						}
						break;
					case IS_NOT_PRESENT:
						{
						alt394=5;
						}
						break;
					case IS_PRESENT:
						{
						alt394=6;
						}
						break;
					case IS_NOT_INFINITE:
						{
						alt394=7;
						}
						break;
					case IS_INFINITE:
						{
						alt394=8;
						}
						break;
					case IS_NOT_A_SET:
						{
						alt394=9;
						}
						break;
					case IS_A_SET:
						{
						alt394=10;
						}
						break;
					case IS_NOT_EMPTY:
						{
						alt394=11;
						}
						break;
					case IS_EMPTY:
						{
						alt394=12;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 394, 0, input);
						throw nvae;
					}
					switch (alt394) {
						case 1 :
							// PLSQLPrinter.g:1773:15: IS_NOT_NULL
							{
							match(input,IS_NOT_NULL,FOLLOW_IS_NOT_NULL_in_expression_element17337); 
							 op = "is not null"; 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1774:17: IS_NULL
							{
							match(input,IS_NULL,FOLLOW_IS_NULL_in_expression_element17357); 
							 op = "is null"; 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1775:17: IS_NOT_NAN
							{
							match(input,IS_NOT_NAN,FOLLOW_IS_NOT_NAN_in_expression_element17377); 
							 op = "is not nan"; 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1776:17: IS_NAN
							{
							match(input,IS_NAN,FOLLOW_IS_NAN_in_expression_element17397); 
							 op = "is nan"; 
							}
							break;
						case 5 :
							// PLSQLPrinter.g:1777:17: IS_NOT_PRESENT
							{
							match(input,IS_NOT_PRESENT,FOLLOW_IS_NOT_PRESENT_in_expression_element17417); 
							 op = "is not present"; 
							}
							break;
						case 6 :
							// PLSQLPrinter.g:1778:17: IS_PRESENT
							{
							match(input,IS_PRESENT,FOLLOW_IS_PRESENT_in_expression_element17437); 
							 op = "is present"; 
							}
							break;
						case 7 :
							// PLSQLPrinter.g:1779:17: IS_NOT_INFINITE
							{
							match(input,IS_NOT_INFINITE,FOLLOW_IS_NOT_INFINITE_in_expression_element17457); 
							 op = "is not infinite"; 
							}
							break;
						case 8 :
							// PLSQLPrinter.g:1780:17: IS_INFINITE
							{
							match(input,IS_INFINITE,FOLLOW_IS_INFINITE_in_expression_element17477); 
							 op = "is infinite"; 
							}
							break;
						case 9 :
							// PLSQLPrinter.g:1781:17: IS_NOT_A_SET
							{
							match(input,IS_NOT_A_SET,FOLLOW_IS_NOT_A_SET_in_expression_element17497); 
							 op = "is not a set"; 
							}
							break;
						case 10 :
							// PLSQLPrinter.g:1782:17: IS_A_SET
							{
							match(input,IS_A_SET,FOLLOW_IS_A_SET_in_expression_element17517); 
							 op = "is a set"; 
							}
							break;
						case 11 :
							// PLSQLPrinter.g:1783:17: IS_NOT_EMPTY
							{
							match(input,IS_NOT_EMPTY,FOLLOW_IS_NOT_EMPTY_in_expression_element17537); 
							 op = "is not empty"; 
							}
							break;
						case 12 :
							// PLSQLPrinter.g:1784:17: IS_EMPTY
							{
							match(input,IS_EMPTY,FOLLOW_IS_EMPTY_in_expression_element17557); 
							 op = "is empty"; 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17589);
					arg=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1788:5: -> expression_element_generic_suffix_unary_op(op=oparg=$arg.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_generic_suffix_unary_op",new STAttrMap().put("op", op).put("arg", (arg!=null?((StringTemplate)arg.getTemplate()):null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1789:10: ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ )
					{
					match(input,IS_NOT_OF_TYPE,FOLLOW_IS_NOT_OF_TYPE_in_expression_element17633); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17635);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1789:46: ( type_spec )+
					int cnt395=0;
					loop395:
					while (true) {
						int alt395=2;
						int LA395_0 = input.LA(1);
						if ( (LA395_0==CUSTOM_TYPE||LA395_0==INTERVAL_DATATYPE||LA395_0==NATIVE_DATATYPE) ) {
							alt395=1;
						}

						switch (alt395) {
						case 1 :
							// PLSQLPrinter.g:1789:46: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_expression_element17637);
							type_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt395 >= 1 ) break loop395;
							EarlyExitException eee = new EarlyExitException(395, input);
							throw eee;
						}
						cnt395++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1790:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1791:10: ^( IS_OF_TYPE expression_element ( type_spec )+ )
					{
					match(input,IS_OF_TYPE,FOLLOW_IS_OF_TYPE_in_expression_element17665); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17667);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1791:42: ( type_spec )+
					int cnt396=0;
					loop396:
					while (true) {
						int alt396=2;
						int LA396_0 = input.LA(1);
						if ( (LA396_0==CUSTOM_TYPE||LA396_0==INTERVAL_DATATYPE||LA396_0==NATIVE_DATATYPE) ) {
							alt396=1;
						}

						switch (alt396) {
						case 1 :
							// PLSQLPrinter.g:1791:42: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_expression_element17669);
							type_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt396 >= 1 ) break loop396;
							EarlyExitException eee = new EarlyExitException(396, input);
							throw eee;
						}
						cnt396++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1792:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:1794:10: ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element )
					{
					// PLSQLPrinter.g:1794:12: ( MEMBER_VK | SUBMULTISET_VK )
					int alt397=2;
					int LA397_0 = input.LA(1);
					if ( (LA397_0==MEMBER_VK) ) {
						alt397=1;
					}
					else if ( (LA397_0==SUBMULTISET_VK) ) {
						alt397=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 397, 0, input);
						throw nvae;
					}

					switch (alt397) {
						case 1 :
							// PLSQLPrinter.g:1794:13: MEMBER_VK
							{
							match(input,MEMBER_VK,FOLLOW_MEMBER_VK_in_expression_element17699); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1794:23: SUBMULTISET_VK
							{
							match(input,SUBMULTISET_VK,FOLLOW_SUBMULTISET_VK_in_expression_element17701); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17704);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17706);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1795:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:1797:10: ^( NOT_IN expr= expression_element in_elements )
					{
					match(input,NOT_IN,FOLLOW_NOT_IN_in_expression_element17734); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17738);
					expr=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_in_elements_in_expression_element17740);
					in_elements239=in_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1798:5: -> expression_element_not_in(expr=$expr.stin_elements=$in_elements.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_not_in",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("in_elements", (in_elements239!=null?((StringTemplate)in_elements239.getTemplate()):null)));
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:1799:10: ^( SQL92_RESERVED_IN expr= expression_element in_elements )
					{
					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_expression_element17773); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17777);
					expr=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_in_elements_in_expression_element17779);
					in_elements240=in_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1800:5: -> expression_element_in(expr=$expr.stin_elements=$in_elements.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_in",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("in_elements", (in_elements240!=null?((StringTemplate)in_elements240.getTemplate()):null)));
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:1801:10: ^( NOT_BETWEEN expression_element expression_element expression_element )
					{
					match(input,NOT_BETWEEN,FOLLOW_NOT_BETWEEN_in_expression_element17812); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17814);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17816);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17818);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1802:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:1803:10: ^( SQL92_RESERVED_BETWEEN expression_element expression_element expression_element )
					{
					match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_expression_element17845); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17847);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17849);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17851);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1804:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:1805:10: ^( NOT_LIKE expression_element expression_element ( expression_element )? )
					{
					match(input,NOT_LIKE,FOLLOW_NOT_LIKE_in_expression_element17878); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17880);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17882);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1805:59: ( expression_element )?
					int alt398=2;
					int LA398_0 = input.LA(1);
					if ( (LA398_0==APPROXIMATE_NUM_LIT||LA398_0==ASTERISK||LA398_0==CHAR_STRING||LA398_0==CONCATENATION_OP||(LA398_0 >= EQUALS_OP && LA398_0 <= EXACT_NUM_LIT)||(LA398_0 >= GREATER_THAN_OP && LA398_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA398_0 >= LESS_THAN_OP && LA398_0 <= LESS_THAN_OR_EQUALS_OP)||LA398_0==MINUS_SIGN||LA398_0==NOT_EQUAL_OP||LA398_0==PERCENT||LA398_0==PLUS_SIGN||LA398_0==SOLIDUS||LA398_0==SQL92_RESERVED_ALL||(LA398_0 >= SQL92_RESERVED_AND && LA398_0 <= SQL92_RESERVED_ANY)||LA398_0==SQL92_RESERVED_BETWEEN||LA398_0==SQL92_RESERVED_DEFAULT||LA398_0==SQL92_RESERVED_DISTINCT||(LA398_0 >= SQL92_RESERVED_EXISTS && LA398_0 <= SQL92_RESERVED_FALSE)||LA398_0==SQL92_RESERVED_IN||(LA398_0 >= SQL92_RESERVED_LIKE && LA398_0 <= SQL92_RESERVED_NULL)||LA398_0==SQL92_RESERVED_OR||LA398_0==SQL92_RESERVED_PRIOR||LA398_0==SQL92_RESERVED_TRUE||LA398_0==UNSIGNED_INTEGER||LA398_0==CASCATED_ELEMENT||LA398_0==DATETIME_OP||LA398_0==DBTIMEZONE_VK||LA398_0==DIV_VK||LA398_0==DOT_ASTERISK||(LA398_0 >= IS_A_SET && LA398_0 <= IS_PRESENT)||LA398_0==KEEP_VK||(LA398_0 >= LIKE2_VK && LA398_0 <= LIKEC_VK)||LA398_0==MAXVALUE_VK||LA398_0==MEMBER_VK||LA398_0==MINVALUE_VK||LA398_0==MODEL_EXPRESSION||LA398_0==MOD_VK||LA398_0==NEW_VK||LA398_0==NOT_BETWEEN||(LA398_0 >= NOT_IN && LA398_0 <= NOT_LIKE)||LA398_0==OUTER_JOIN_SIGN||(LA398_0 >= PERCENT_FOUND_VK && LA398_0 <= PERCENT_ROWCOUNT_VK)||LA398_0==PIPE_VK||LA398_0==SEARCHED_CASE||LA398_0==SESSIONTIMEZONE_VK||LA398_0==SIMPLE_CASE||LA398_0==SOME_VK||LA398_0==STANDARD_FUNCTION||LA398_0==SUBMULTISET_VK||LA398_0==SUBQUERY||LA398_0==UNARY_OPERATOR||LA398_0==VECTOR_EXPR) ) {
						alt398=1;
					}
					switch (alt398) {
						case 1 :
							// PLSQLPrinter.g:1805:59: expression_element
							{
							pushFollow(FOLLOW_expression_element_in_expression_element17884);
							expression_element();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1806:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:1807:10: ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK ) expression_element expression_element ( expression_element )? )
					{
					// PLSQLPrinter.g:1807:12: ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK )
					int alt399=4;
					switch ( input.LA(1) ) {
					case SQL92_RESERVED_LIKE:
						{
						alt399=1;
						}
						break;
					case LIKEC_VK:
						{
						alt399=2;
						}
						break;
					case LIKE2_VK:
						{
						alt399=3;
						}
						break;
					case LIKE4_VK:
						{
						alt399=4;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 399, 0, input);
						throw nvae;
					}
					switch (alt399) {
						case 1 :
							// PLSQLPrinter.g:1807:13: SQL92_RESERVED_LIKE
							{
							match(input,SQL92_RESERVED_LIKE,FOLLOW_SQL92_RESERVED_LIKE_in_expression_element17913); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1807:33: LIKEC_VK
							{
							match(input,LIKEC_VK,FOLLOW_LIKEC_VK_in_expression_element17915); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1807:42: LIKE2_VK
							{
							match(input,LIKE2_VK,FOLLOW_LIKE2_VK_in_expression_element17917); 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1807:51: LIKE4_VK
							{
							match(input,LIKE4_VK,FOLLOW_LIKE4_VK_in_expression_element17919); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17922);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17924);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1807:99: ( expression_element )?
					int alt400=2;
					int LA400_0 = input.LA(1);
					if ( (LA400_0==APPROXIMATE_NUM_LIT||LA400_0==ASTERISK||LA400_0==CHAR_STRING||LA400_0==CONCATENATION_OP||(LA400_0 >= EQUALS_OP && LA400_0 <= EXACT_NUM_LIT)||(LA400_0 >= GREATER_THAN_OP && LA400_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA400_0 >= LESS_THAN_OP && LA400_0 <= LESS_THAN_OR_EQUALS_OP)||LA400_0==MINUS_SIGN||LA400_0==NOT_EQUAL_OP||LA400_0==PERCENT||LA400_0==PLUS_SIGN||LA400_0==SOLIDUS||LA400_0==SQL92_RESERVED_ALL||(LA400_0 >= SQL92_RESERVED_AND && LA400_0 <= SQL92_RESERVED_ANY)||LA400_0==SQL92_RESERVED_BETWEEN||LA400_0==SQL92_RESERVED_DEFAULT||LA400_0==SQL92_RESERVED_DISTINCT||(LA400_0 >= SQL92_RESERVED_EXISTS && LA400_0 <= SQL92_RESERVED_FALSE)||LA400_0==SQL92_RESERVED_IN||(LA400_0 >= SQL92_RESERVED_LIKE && LA400_0 <= SQL92_RESERVED_NULL)||LA400_0==SQL92_RESERVED_OR||LA400_0==SQL92_RESERVED_PRIOR||LA400_0==SQL92_RESERVED_TRUE||LA400_0==UNSIGNED_INTEGER||LA400_0==CASCATED_ELEMENT||LA400_0==DATETIME_OP||LA400_0==DBTIMEZONE_VK||LA400_0==DIV_VK||LA400_0==DOT_ASTERISK||(LA400_0 >= IS_A_SET && LA400_0 <= IS_PRESENT)||LA400_0==KEEP_VK||(LA400_0 >= LIKE2_VK && LA400_0 <= LIKEC_VK)||LA400_0==MAXVALUE_VK||LA400_0==MEMBER_VK||LA400_0==MINVALUE_VK||LA400_0==MODEL_EXPRESSION||LA400_0==MOD_VK||LA400_0==NEW_VK||LA400_0==NOT_BETWEEN||(LA400_0 >= NOT_IN && LA400_0 <= NOT_LIKE)||LA400_0==OUTER_JOIN_SIGN||(LA400_0 >= PERCENT_FOUND_VK && LA400_0 <= PERCENT_ROWCOUNT_VK)||LA400_0==PIPE_VK||LA400_0==SEARCHED_CASE||LA400_0==SESSIONTIMEZONE_VK||LA400_0==SIMPLE_CASE||LA400_0==SOME_VK||LA400_0==STANDARD_FUNCTION||LA400_0==SUBMULTISET_VK||LA400_0==SUBQUERY||LA400_0==UNARY_OPERATOR||LA400_0==VECTOR_EXPR) ) {
						alt400=1;
					}
					switch (alt400) {
						case 1 :
							// PLSQLPrinter.g:1807:99: expression_element
							{
							pushFollow(FOLLOW_expression_element_in_expression_element17926);
							expression_element();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1808:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:1810:10: ^( PIPE_VK expression_element expression_element )
					{
					match(input,PIPE_VK,FOLLOW_PIPE_VK_in_expression_element17959); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17961);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element17963);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1811:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:1813:10: ^( UNARY_OPERATOR arg= expression_element )
					{
					UNARY_OPERATOR241=(CommonTree)match(input,UNARY_OPERATOR,FOLLOW_UNARY_OPERATOR_in_expression_element17991); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element17995);
					arg=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1814:5: -> expression_element_generic_prefix_unary_op(op=$UNARY_OPERATOR.textis_spaced=falsearg=$arg.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_generic_prefix_unary_op",new STAttrMap().put("op", (UNARY_OPERATOR241!=null?UNARY_OPERATOR241.getText():null)).put("is_spaced", false).put("arg", (arg!=null?((StringTemplate)arg.getTemplate()):null)));
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:1815:10: ^( SQL92_RESERVED_PRIOR expression_element )
					{
					match(input,SQL92_RESERVED_PRIOR,FOLLOW_SQL92_RESERVED_PRIOR_in_expression_element18033); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18035);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1816:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:1817:10: ^( NEW_VK expression )
					{
					match(input,NEW_VK,FOLLOW_NEW_VK_in_expression_element18062); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_expression_element18064);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1818:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:1819:10: ^( SQL92_RESERVED_DISTINCT expression_element )
					{
					match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_expression_element18091); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18093);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1820:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:1821:10: ^( STANDARD_FUNCTION standard_function )
					{
					match(input,STANDARD_FUNCTION,FOLLOW_STANDARD_FUNCTION_in_expression_element18120); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_standard_function_in_expression_element18122);
					standard_function();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1822:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 19 :
					// PLSQLPrinter.g:1823:10: ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) expression_element )
					{
					// PLSQLPrinter.g:1823:12: ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY )
					int alt401=4;
					switch ( input.LA(1) ) {
					case SOME_VK:
						{
						alt401=1;
						}
						break;
					case SQL92_RESERVED_EXISTS:
						{
						alt401=2;
						}
						break;
					case SQL92_RESERVED_ALL:
						{
						alt401=3;
						}
						break;
					case SQL92_RESERVED_ANY:
						{
						alt401=4;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 401, 0, input);
						throw nvae;
					}
					switch (alt401) {
						case 1 :
							// PLSQLPrinter.g:1823:13: SOME_VK
							{
							match(input,SOME_VK,FOLLOW_SOME_VK_in_expression_element18150); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1823:21: SQL92_RESERVED_EXISTS
							{
							match(input,SQL92_RESERVED_EXISTS,FOLLOW_SQL92_RESERVED_EXISTS_in_expression_element18152); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1823:43: SQL92_RESERVED_ALL
							{
							match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_expression_element18154); 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1823:62: SQL92_RESERVED_ANY
							{
							match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_expression_element18156); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18159);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1824:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 20 :
					// PLSQLPrinter.g:1825:10: ^( VECTOR_EXPR ( expression_element )+ )
					{
					match(input,VECTOR_EXPR,FOLLOW_VECTOR_EXPR_in_expression_element18186); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1825:24: ( expression_element )+
					int cnt402=0;
					loop402:
					while (true) {
						int alt402=2;
						int LA402_0 = input.LA(1);
						if ( (LA402_0==APPROXIMATE_NUM_LIT||LA402_0==ASTERISK||LA402_0==CHAR_STRING||LA402_0==CONCATENATION_OP||(LA402_0 >= EQUALS_OP && LA402_0 <= EXACT_NUM_LIT)||(LA402_0 >= GREATER_THAN_OP && LA402_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA402_0 >= LESS_THAN_OP && LA402_0 <= LESS_THAN_OR_EQUALS_OP)||LA402_0==MINUS_SIGN||LA402_0==NOT_EQUAL_OP||LA402_0==PERCENT||LA402_0==PLUS_SIGN||LA402_0==SOLIDUS||LA402_0==SQL92_RESERVED_ALL||(LA402_0 >= SQL92_RESERVED_AND && LA402_0 <= SQL92_RESERVED_ANY)||LA402_0==SQL92_RESERVED_BETWEEN||LA402_0==SQL92_RESERVED_DEFAULT||LA402_0==SQL92_RESERVED_DISTINCT||(LA402_0 >= SQL92_RESERVED_EXISTS && LA402_0 <= SQL92_RESERVED_FALSE)||LA402_0==SQL92_RESERVED_IN||(LA402_0 >= SQL92_RESERVED_LIKE && LA402_0 <= SQL92_RESERVED_NULL)||LA402_0==SQL92_RESERVED_OR||LA402_0==SQL92_RESERVED_PRIOR||LA402_0==SQL92_RESERVED_TRUE||LA402_0==UNSIGNED_INTEGER||LA402_0==CASCATED_ELEMENT||LA402_0==DATETIME_OP||LA402_0==DBTIMEZONE_VK||LA402_0==DIV_VK||LA402_0==DOT_ASTERISK||(LA402_0 >= IS_A_SET && LA402_0 <= IS_PRESENT)||LA402_0==KEEP_VK||(LA402_0 >= LIKE2_VK && LA402_0 <= LIKEC_VK)||LA402_0==MAXVALUE_VK||LA402_0==MEMBER_VK||LA402_0==MINVALUE_VK||LA402_0==MODEL_EXPRESSION||LA402_0==MOD_VK||LA402_0==NEW_VK||LA402_0==NOT_BETWEEN||(LA402_0 >= NOT_IN && LA402_0 <= NOT_LIKE)||LA402_0==OUTER_JOIN_SIGN||(LA402_0 >= PERCENT_FOUND_VK && LA402_0 <= PERCENT_ROWCOUNT_VK)||LA402_0==PIPE_VK||LA402_0==SEARCHED_CASE||LA402_0==SESSIONTIMEZONE_VK||LA402_0==SIMPLE_CASE||LA402_0==SOME_VK||LA402_0==STANDARD_FUNCTION||LA402_0==SUBMULTISET_VK||LA402_0==SUBQUERY||LA402_0==UNARY_OPERATOR||LA402_0==VECTOR_EXPR) ) {
							alt402=1;
						}

						switch (alt402) {
						case 1 :
							// PLSQLPrinter.g:1825:24: expression_element
							{
							pushFollow(FOLLOW_expression_element_in_expression_element18188);
							expression_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt402 >= 1 ) break loop402;
							EarlyExitException eee = new EarlyExitException(402, input);
							throw eee;
						}
						cnt402++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1826:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 21 :
					// PLSQLPrinter.g:1828:10: ^( DATETIME_OP expression_element datetime_element )
					{
					match(input,DATETIME_OP,FOLLOW_DATETIME_OP_in_expression_element18217); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18219);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_datetime_element_in_expression_element18221);
					datetime_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1829:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 22 :
					// PLSQLPrinter.g:1830:10: model_expression
					{
					pushFollow(FOLLOW_model_expression_in_expression_element18247);
					model_expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1831:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 23 :
					// PLSQLPrinter.g:1832:10: ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? )
					{
					match(input,KEEP_VK,FOLLOW_KEEP_VK_in_expression_element18273); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18275);
					expression_element();
					state._fsp--;

					match(input,DENSE_RANK_VK,FOLLOW_DENSE_RANK_VK_in_expression_element18277); 
					// PLSQLPrinter.g:1832:53: ( FIRST_VK | LAST_VK )
					int alt403=2;
					int LA403_0 = input.LA(1);
					if ( (LA403_0==FIRST_VK) ) {
						alt403=1;
					}
					else if ( (LA403_0==LAST_VK) ) {
						alt403=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 403, 0, input);
						throw nvae;
					}

					switch (alt403) {
						case 1 :
							// PLSQLPrinter.g:1832:54: FIRST_VK
							{
							match(input,FIRST_VK,FOLLOW_FIRST_VK_in_expression_element18280); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1832:63: LAST_VK
							{
							match(input,LAST_VK,FOLLOW_LAST_VK_in_expression_element18282); 
							}
							break;

					}

					pushFollow(FOLLOW_order_by_clause_in_expression_element18285);
					order_by_clause();
					state._fsp--;

					// PLSQLPrinter.g:1832:88: ( over_clause )?
					int alt404=2;
					int LA404_0 = input.LA(1);
					if ( (LA404_0==OVER_VK) ) {
						alt404=1;
					}
					switch (alt404) {
						case 1 :
							// PLSQLPrinter.g:1832:88: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_expression_element18287);
							over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1833:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 24 :
					// PLSQLPrinter.g:1835:10: ^( DOT_ASTERISK tableview_name )
					{
					match(input,DOT_ASTERISK,FOLLOW_DOT_ASTERISK_in_expression_element18316); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_tableview_name_in_expression_element18318);
					tableview_name();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1836:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 25 :
					// PLSQLPrinter.g:1837:10: ^( ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK ) cursor_name )
					{
					// PLSQLPrinter.g:1838:13: ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK )
					int alt405=4;
					switch ( input.LA(1) ) {
					case PERCENT_FOUND_VK:
						{
						alt405=1;
						}
						break;
					case PERCENT_NOTFOUND_VK:
						{
						alt405=2;
						}
						break;
					case PERCENT_ROWCOUNT_VK:
						{
						alt405=3;
						}
						break;
					case PERCENT_ISOPEN_VK:
						{
						alt405=4;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 405, 0, input);
						throw nvae;
					}
					switch (alt405) {
						case 1 :
							// PLSQLPrinter.g:1839:15: PERCENT_FOUND_VK
							{
							match(input,PERCENT_FOUND_VK,FOLLOW_PERCENT_FOUND_VK_in_expression_element18374); 
							 op = "%FOUND"; 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1840:16: PERCENT_NOTFOUND_VK
							{
							match(input,PERCENT_NOTFOUND_VK,FOLLOW_PERCENT_NOTFOUND_VK_in_expression_element18393); 
							 op = "%NOTFOUND"; 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1841:16: PERCENT_ROWCOUNT_VK
							{
							match(input,PERCENT_ROWCOUNT_VK,FOLLOW_PERCENT_ROWCOUNT_VK_in_expression_element18412); 
							 op = "%ROWCOUNT"; 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1842:16: PERCENT_ISOPEN_VK
							{
							match(input,PERCENT_ISOPEN_VK,FOLLOW_PERCENT_ISOPEN_VK_in_expression_element18431); 
							 op = "%ISOPEN"; 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_cursor_name_in_expression_element18461);
					cursor_name242=cursor_name();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1846:5: -> expression_element_cursor_op(op=opcursor_name=$cursor_name.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_cursor_op",new STAttrMap().put("op", op).put("cursor_name", (cursor_name242!=null?((StringTemplate)cursor_name242.getTemplate()):null)));
					}



					}
					break;
				case 26 :
					// PLSQLPrinter.g:1847:10: ^( OUTER_JOIN_SIGN expression_element )
					{
					match(input,OUTER_JOIN_SIGN,FOLLOW_OUTER_JOIN_SIGN_in_expression_element18505); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18507);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1848:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 27 :
					// PLSQLPrinter.g:1850:10: case_statement
					{
					pushFollow(FOLLOW_case_statement_in_expression_element18534);
					case_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1851:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 28 :
					// PLSQLPrinter.g:1852:10: constant
					{
					pushFollow(FOLLOW_constant_in_expression_element18559);
					constant243=constant();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1852:19: -> { $constant.st }
					{
						retval.st =  (constant243!=null?((StringTemplate)constant243.getTemplate()):null) ;
					}



					}
					break;
				case 29 :
					// PLSQLPrinter.g:1853:10: general_element
					{
					pushFollow(FOLLOW_general_element_in_expression_element18574);
					general_element244=general_element();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1853:26: -> { $general_element.st }
					{
						retval.st =  (general_element244!=null?((StringTemplate)general_element244.getTemplate()):null) ;
					}



					}
					break;
				case 30 :
					// PLSQLPrinter.g:1854:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_expression_element18589);
					subquery245=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1854:19: -> { $subquery.st }
					{
						retval.st =  (subquery245!=null?((StringTemplate)subquery245.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression_element"


	public static class in_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "in_elements"
	// PLSQLPrinter.g:1857:1: in_elements : ( subquery -> in_parens(val=$subquery.st)| expression -> { $expression.st }| expression_list -> { $expression_list.st });
	public final PLSQLPrinter.in_elements_return in_elements() throws RecognitionException {
		PLSQLPrinter.in_elements_return retval = new PLSQLPrinter.in_elements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope subquery246 =null;
		TreeRuleReturnScope expression247 =null;
		TreeRuleReturnScope expression_list248 =null;

		try {
			// PLSQLPrinter.g:1858:5: ( subquery -> in_parens(val=$subquery.st)| expression -> { $expression.st }| expression_list -> { $expression_list.st })
			int alt407=3;
			switch ( input.LA(1) ) {
			case SUBQUERY:
				{
				alt407=1;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt407=2;
				}
				break;
			case EXPR_LIST:
				{
				alt407=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 407, 0, input);
				throw nvae;
			}
			switch (alt407) {
				case 1 :
					// PLSQLPrinter.g:1858:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_in_elements18614);
					subquery246=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1858:19: -> in_parens(val=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (subquery246!=null?((StringTemplate)subquery246.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1859:10: expression
					{
					pushFollow(FOLLOW_expression_in_in_elements18634);
					expression247=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1859:21: -> { $expression.st }
					{
						retval.st =  (expression247!=null?((StringTemplate)expression247.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1860:10: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_in_elements18649);
					expression_list248=expression_list();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1860:26: -> { $expression_list.st }
					{
						retval.st =  (expression_list248!=null?((StringTemplate)expression_list248.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "in_elements"


	public static class datetime_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "datetime_element"
	// PLSQLPrinter.g:1863:1: datetime_element : ( ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) ) -> template( \"not implemented: datetime_element\"| ^( DAY_VK SECOND_VK ( expression )* ) -> template( \"not implemented: datetime_element\"| ^( YEAR_VK MONTH_VK expression ) -> template( \"not implemented: datetime_element\");
	public final PLSQLPrinter.datetime_element_return datetime_element() throws RecognitionException {
		PLSQLPrinter.datetime_element_return retval = new PLSQLPrinter.datetime_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1864:5: ( ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) ) -> template( \"not implemented: datetime_element\"| ^( DAY_VK SECOND_VK ( expression )* ) -> template( \"not implemented: datetime_element\"| ^( YEAR_VK MONTH_VK expression ) -> template( \"not implemented: datetime_element\")
			int alt410=3;
			switch ( input.LA(1) ) {
			case AT_VK:
				{
				alt410=1;
				}
				break;
			case DAY_VK:
				{
				alt410=2;
				}
				break;
			case YEAR_VK:
				{
				alt410=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 410, 0, input);
				throw nvae;
			}
			switch (alt410) {
				case 1 :
					// PLSQLPrinter.g:1864:10: ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) )
					{
					match(input,AT_VK,FOLLOW_AT_VK_in_datetime_element18674); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_datetime_element18676);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1864:37: ( LOCAL_VK | TIME_VK expression )
					int alt408=2;
					int LA408_0 = input.LA(1);
					if ( (LA408_0==LOCAL_VK) ) {
						alt408=1;
					}
					else if ( (LA408_0==TIME_VK) ) {
						alt408=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 408, 0, input);
						throw nvae;
					}

					switch (alt408) {
						case 1 :
							// PLSQLPrinter.g:1864:38: LOCAL_VK
							{
							match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_datetime_element18679); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1864:47: TIME_VK expression
							{
							match(input,TIME_VK,FOLLOW_TIME_VK_in_datetime_element18681); 
							pushFollow(FOLLOW_expression_in_datetime_element18683);
							expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1865:5: -> template( \"not implemented: datetime_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: datetime_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1866:10: ^( DAY_VK SECOND_VK ( expression )* )
					{
					match(input,DAY_VK,FOLLOW_DAY_VK_in_datetime_element18711); 
					match(input, Token.DOWN, null); 
					match(input,SECOND_VK,FOLLOW_SECOND_VK_in_datetime_element18713); 
					// PLSQLPrinter.g:1866:29: ( expression )*
					loop409:
					while (true) {
						int alt409=2;
						int LA409_0 = input.LA(1);
						if ( (LA409_0==EXPR||LA409_0==LOGIC_EXPR) ) {
							alt409=1;
						}

						switch (alt409) {
						case 1 :
							// PLSQLPrinter.g:1866:29: expression
							{
							pushFollow(FOLLOW_expression_in_datetime_element18715);
							expression();
							state._fsp--;

							}
							break;

						default :
							break loop409;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1867:5: -> template( \"not implemented: datetime_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: datetime_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1868:10: ^( YEAR_VK MONTH_VK expression )
					{
					match(input,YEAR_VK,FOLLOW_YEAR_VK_in_datetime_element18743); 
					match(input, Token.DOWN, null); 
					match(input,MONTH_VK,FOLLOW_MONTH_VK_in_datetime_element18745); 
					pushFollow(FOLLOW_expression_in_datetime_element18747);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1869:5: -> template( \"not implemented: datetime_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: datetime_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "datetime_element"


	public static class model_expression_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_expression"
	// PLSQLPrinter.g:1872:1: model_expression : ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ ) -> template( \"not implemented: model_expression\";
	public final PLSQLPrinter.model_expression_return model_expression() throws RecognitionException {
		PLSQLPrinter.model_expression_return retval = new PLSQLPrinter.model_expression_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1873:5: ( ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ ) -> template( \"not implemented: model_expression\")
			// PLSQLPrinter.g:1873:10: ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ )
			{
			match(input,MODEL_EXPRESSION,FOLLOW_MODEL_EXPRESSION_in_model_expression18783); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_element_in_model_expression18785);
			expression_element();
			state._fsp--;

			// PLSQLPrinter.g:1873:48: ( model_expression_element )+
			int cnt411=0;
			loop411:
			while (true) {
				int alt411=2;
				int LA411_0 = input.LA(1);
				if ( (LA411_0==SQL92_RESERVED_ANY||LA411_0==EXPR||(LA411_0 >= FOR_MULTI_COLUMN && LA411_0 <= FOR_SINGLE_COLUMN)||LA411_0==LOGIC_EXPR) ) {
					alt411=1;
				}

				switch (alt411) {
				case 1 :
					// PLSQLPrinter.g:1873:48: model_expression_element
					{
					pushFollow(FOLLOW_model_expression_element_in_model_expression18787);
					model_expression_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt411 >= 1 ) break loop411;
					EarlyExitException eee = new EarlyExitException(411, input);
					throw eee;
				}
				cnt411++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1874:5: -> template( \"not implemented: model_expression\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_expression");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_expression"


	public static class model_expression_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_expression_element"
	// PLSQLPrinter.g:1877:1: model_expression_element : ( SQL92_RESERVED_ANY -> template( \"not implemented: model_expression_element\"| expression -> template( \"not implemented: model_expression_element\"| ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? ) -> template( \"not implemented: model_expression_element\"| ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) ) -> template( \"not implemented: model_expression_element\");
	public final PLSQLPrinter.model_expression_element_return model_expression_element() throws RecognitionException {
		PLSQLPrinter.model_expression_element_return retval = new PLSQLPrinter.model_expression_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1878:5: ( SQL92_RESERVED_ANY -> template( \"not implemented: model_expression_element\"| expression -> template( \"not implemented: model_expression_element\"| ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? ) -> template( \"not implemented: model_expression_element\"| ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) ) -> template( \"not implemented: model_expression_element\")
			int alt416=4;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ANY:
				{
				alt416=1;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt416=2;
				}
				break;
			case FOR_SINGLE_COLUMN:
				{
				alt416=3;
				}
				break;
			case FOR_MULTI_COLUMN:
				{
				alt416=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 416, 0, input);
				throw nvae;
			}
			switch (alt416) {
				case 1 :
					// PLSQLPrinter.g:1878:10: SQL92_RESERVED_ANY
					{
					match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_model_expression_element18823); 
					// TEMPLATE REWRITE
					// 1879:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1880:10: expression
					{
					pushFollow(FOLLOW_expression_in_model_expression_element18848);
					expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1881:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1882:10: ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? )
					{
					match(input,FOR_SINGLE_COLUMN,FOLLOW_FOR_SINGLE_COLUMN_in_model_expression_element18874); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_column_name_in_model_expression_element18876);
					column_name();
					state._fsp--;

					pushFollow(FOLLOW_for_single_column_element_in_model_expression_element18878);
					for_single_column_element();
					state._fsp--;

					// PLSQLPrinter.g:1882:68: ( for_like_part )?
					int alt412=2;
					int LA412_0 = input.LA(1);
					if ( (LA412_0==SQL92_RESERVED_LIKE) ) {
						alt412=1;
					}
					switch (alt412) {
						case 1 :
							// PLSQLPrinter.g:1882:68: for_like_part
							{
							pushFollow(FOLLOW_for_like_part_in_model_expression_element18880);
							for_like_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1883:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1884:10: ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) )
					{
					match(input,FOR_MULTI_COLUMN,FOLLOW_FOR_MULTI_COLUMN_in_model_expression_element18908); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1884:29: ( column_name )+
					int cnt413=0;
					loop413:
					while (true) {
						int alt413=2;
						int LA413_0 = input.LA(1);
						if ( (LA413_0==COLUMN_NAME) ) {
							alt413=1;
						}

						switch (alt413) {
						case 1 :
							// PLSQLPrinter.g:1884:29: column_name
							{
							pushFollow(FOLLOW_column_name_in_model_expression_element18910);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt413 >= 1 ) break loop413;
							EarlyExitException eee = new EarlyExitException(413, input);
							throw eee;
						}
						cnt413++;
					}

					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_model_expression_element18914); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1884:62: ( subquery | ( expression_list )+ )
					int alt415=2;
					int LA415_0 = input.LA(1);
					if ( (LA415_0==SUBQUERY) ) {
						alt415=1;
					}
					else if ( (LA415_0==EXPR_LIST) ) {
						alt415=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 415, 0, input);
						throw nvae;
					}

					switch (alt415) {
						case 1 :
							// PLSQLPrinter.g:1884:63: subquery
							{
							pushFollow(FOLLOW_subquery_in_model_expression_element18917);
							subquery();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1884:72: ( expression_list )+
							{
							// PLSQLPrinter.g:1884:72: ( expression_list )+
							int cnt414=0;
							loop414:
							while (true) {
								int alt414=2;
								int LA414_0 = input.LA(1);
								if ( (LA414_0==EXPR_LIST) ) {
									alt414=1;
								}

								switch (alt414) {
								case 1 :
									// PLSQLPrinter.g:1884:72: expression_list
									{
									pushFollow(FOLLOW_expression_list_in_model_expression_element18919);
									expression_list();
									state._fsp--;

									}
									break;

								default :
									if ( cnt414 >= 1 ) break loop414;
									EarlyExitException eee = new EarlyExitException(414, input);
									throw eee;
								}
								cnt414++;
							}

							}
							break;

					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1885:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_expression_element"


	public static class for_single_column_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_single_column_element"
	// PLSQLPrinter.g:1888:1: for_single_column_element : ( ^( SQL92_RESERVED_IN expression_list ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_FROM expression ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_TO expression ) -> template( \"not implemented: for_single_column_element\"| ^( ( INCREMENT_VK | DECREMENT_VK ) expression ) -> template( \"not implemented: for_single_column_element\");
	public final PLSQLPrinter.for_single_column_element_return for_single_column_element() throws RecognitionException {
		PLSQLPrinter.for_single_column_element_return retval = new PLSQLPrinter.for_single_column_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1889:5: ( ^( SQL92_RESERVED_IN expression_list ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_FROM expression ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_TO expression ) -> template( \"not implemented: for_single_column_element\"| ^( ( INCREMENT_VK | DECREMENT_VK ) expression ) -> template( \"not implemented: for_single_column_element\")
			int alt418=4;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_IN:
				{
				alt418=1;
				}
				break;
			case SQL92_RESERVED_FROM:
				{
				alt418=2;
				}
				break;
			case SQL92_RESERVED_TO:
				{
				alt418=3;
				}
				break;
			case DECREMENT_VK:
			case INCREMENT_VK:
				{
				alt418=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 418, 0, input);
				throw nvae;
			}
			switch (alt418) {
				case 1 :
					// PLSQLPrinter.g:1889:10: ^( SQL92_RESERVED_IN expression_list )
					{
					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_for_single_column_element18958); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_list_in_for_single_column_element18960);
					expression_list();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1890:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1891:10: ^( SQL92_RESERVED_FROM expression )
					{
					match(input,SQL92_RESERVED_FROM,FOLLOW_SQL92_RESERVED_FROM_in_for_single_column_element18987); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element18989);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1892:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1893:10: ^( SQL92_RESERVED_TO expression )
					{
					match(input,SQL92_RESERVED_TO,FOLLOW_SQL92_RESERVED_TO_in_for_single_column_element19017); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element19019);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1894:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1895:10: ^( ( INCREMENT_VK | DECREMENT_VK ) expression )
					{
					// PLSQLPrinter.g:1895:12: ( INCREMENT_VK | DECREMENT_VK )
					int alt417=2;
					int LA417_0 = input.LA(1);
					if ( (LA417_0==INCREMENT_VK) ) {
						alt417=1;
					}
					else if ( (LA417_0==DECREMENT_VK) ) {
						alt417=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 417, 0, input);
						throw nvae;
					}

					switch (alt417) {
						case 1 :
							// PLSQLPrinter.g:1895:13: INCREMENT_VK
							{
							match(input,INCREMENT_VK,FOLLOW_INCREMENT_VK_in_for_single_column_element19048); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1895:26: DECREMENT_VK
							{
							match(input,DECREMENT_VK,FOLLOW_DECREMENT_VK_in_for_single_column_element19050); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element19053);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1896:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_single_column_element"


	public static class for_like_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_like_part"
	// PLSQLPrinter.g:1899:1: for_like_part : ^( SQL92_RESERVED_LIKE expression ) -> template( \"not implemented: for_like_part\";
	public final PLSQLPrinter.for_like_part_return for_like_part() throws RecognitionException {
		PLSQLPrinter.for_like_part_return retval = new PLSQLPrinter.for_like_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1900:5: ( ^( SQL92_RESERVED_LIKE expression ) -> template( \"not implemented: for_like_part\")
			// PLSQLPrinter.g:1900:10: ^( SQL92_RESERVED_LIKE expression )
			{
			match(input,SQL92_RESERVED_LIKE,FOLLOW_SQL92_RESERVED_LIKE_in_for_like_part19090); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_for_like_part19092);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1901:5: -> template( \"not implemented: for_like_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: for_like_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_like_part"


	public static class case_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "case_statement"
	// PLSQLPrinter.g:1904:1: case_statement : ( ^( SIMPLE_CASE ( label_name )* expression ( case_when_part )+ ( case_else_part )? ) -> template( \"not implemented: case_statement\"| ^( SEARCHED_CASE ( label_name )* ( case_when_part )+ ( case_else_part )? ) -> template( \"not implemented: case_statement\");
	public final PLSQLPrinter.case_statement_return case_statement() throws RecognitionException {
		PLSQLPrinter.case_statement_return retval = new PLSQLPrinter.case_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1905:5: ( ^( SIMPLE_CASE ( label_name )* expression ( case_when_part )+ ( case_else_part )? ) -> template( \"not implemented: case_statement\"| ^( SEARCHED_CASE ( label_name )* ( case_when_part )+ ( case_else_part )? ) -> template( \"not implemented: case_statement\")
			int alt425=2;
			int LA425_0 = input.LA(1);
			if ( (LA425_0==SIMPLE_CASE) ) {
				alt425=1;
			}
			else if ( (LA425_0==SEARCHED_CASE) ) {
				alt425=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 425, 0, input);
				throw nvae;
			}

			switch (alt425) {
				case 1 :
					// PLSQLPrinter.g:1905:10: ^( SIMPLE_CASE ( label_name )* expression ( case_when_part )+ ( case_else_part )? )
					{
					match(input,SIMPLE_CASE,FOLLOW_SIMPLE_CASE_in_case_statement19128); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1905:24: ( label_name )*
					loop419:
					while (true) {
						int alt419=2;
						int LA419_0 = input.LA(1);
						if ( (LA419_0==LABEL_NAME) ) {
							alt419=1;
						}

						switch (alt419) {
						case 1 :
							// PLSQLPrinter.g:1905:24: label_name
							{
							pushFollow(FOLLOW_label_name_in_case_statement19130);
							label_name();
							state._fsp--;

							}
							break;

						default :
							break loop419;
						}
					}

					pushFollow(FOLLOW_expression_in_case_statement19133);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1905:47: ( case_when_part )+
					int cnt420=0;
					loop420:
					while (true) {
						int alt420=2;
						int LA420_0 = input.LA(1);
						if ( (LA420_0==SQL92_RESERVED_WHEN) ) {
							alt420=1;
						}

						switch (alt420) {
						case 1 :
							// PLSQLPrinter.g:1905:47: case_when_part
							{
							pushFollow(FOLLOW_case_when_part_in_case_statement19135);
							case_when_part();
							state._fsp--;

							}
							break;

						default :
							if ( cnt420 >= 1 ) break loop420;
							EarlyExitException eee = new EarlyExitException(420, input);
							throw eee;
						}
						cnt420++;
					}

					// PLSQLPrinter.g:1905:63: ( case_else_part )?
					int alt421=2;
					int LA421_0 = input.LA(1);
					if ( (LA421_0==SQL92_RESERVED_ELSE) ) {
						alt421=1;
					}
					switch (alt421) {
						case 1 :
							// PLSQLPrinter.g:1905:63: case_else_part
							{
							pushFollow(FOLLOW_case_else_part_in_case_statement19138);
							case_else_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1906:5: -> template( \"not implemented: case_statement\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: case_statement");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1907:10: ^( SEARCHED_CASE ( label_name )* ( case_when_part )+ ( case_else_part )? )
					{
					match(input,SEARCHED_CASE,FOLLOW_SEARCHED_CASE_in_case_statement19168); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1907:26: ( label_name )*
					loop422:
					while (true) {
						int alt422=2;
						int LA422_0 = input.LA(1);
						if ( (LA422_0==LABEL_NAME) ) {
							alt422=1;
						}

						switch (alt422) {
						case 1 :
							// PLSQLPrinter.g:1907:26: label_name
							{
							pushFollow(FOLLOW_label_name_in_case_statement19170);
							label_name();
							state._fsp--;

							}
							break;

						default :
							break loop422;
						}
					}

					// PLSQLPrinter.g:1907:38: ( case_when_part )+
					int cnt423=0;
					loop423:
					while (true) {
						int alt423=2;
						int LA423_0 = input.LA(1);
						if ( (LA423_0==SQL92_RESERVED_WHEN) ) {
							alt423=1;
						}

						switch (alt423) {
						case 1 :
							// PLSQLPrinter.g:1907:38: case_when_part
							{
							pushFollow(FOLLOW_case_when_part_in_case_statement19173);
							case_when_part();
							state._fsp--;

							}
							break;

						default :
							if ( cnt423 >= 1 ) break loop423;
							EarlyExitException eee = new EarlyExitException(423, input);
							throw eee;
						}
						cnt423++;
					}

					// PLSQLPrinter.g:1907:54: ( case_else_part )?
					int alt424=2;
					int LA424_0 = input.LA(1);
					if ( (LA424_0==SQL92_RESERVED_ELSE) ) {
						alt424=1;
					}
					switch (alt424) {
						case 1 :
							// PLSQLPrinter.g:1907:54: case_else_part
							{
							pushFollow(FOLLOW_case_else_part_in_case_statement19176);
							case_else_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1908:5: -> template( \"not implemented: case_statement\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: case_statement");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_statement"


	public static class case_when_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "case_when_part"
	// PLSQLPrinter.g:1913:1: case_when_part : ^( SQL92_RESERVED_WHEN expression ( seq_of_statements | expression ) ) -> template( \"not implemented: case_when_part\";
	public final PLSQLPrinter.case_when_part_return case_when_part() throws RecognitionException {
		PLSQLPrinter.case_when_part_return retval = new PLSQLPrinter.case_when_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1914:5: ( ^( SQL92_RESERVED_WHEN expression ( seq_of_statements | expression ) ) -> template( \"not implemented: case_when_part\")
			// PLSQLPrinter.g:1914:10: ^( SQL92_RESERVED_WHEN expression ( seq_of_statements | expression ) )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_case_when_part19216); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_case_when_part19218);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1914:43: ( seq_of_statements | expression )
			int alt426=2;
			int LA426_0 = input.LA(1);
			if ( (LA426_0==STATEMENTS) ) {
				alt426=1;
			}
			else if ( (LA426_0==EXPR||LA426_0==LOGIC_EXPR) ) {
				alt426=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 426, 0, input);
				throw nvae;
			}

			switch (alt426) {
				case 1 :
					// PLSQLPrinter.g:1914:44: seq_of_statements
					{
					pushFollow(FOLLOW_seq_of_statements_in_case_when_part19221);
					seq_of_statements();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1914:62: expression
					{
					pushFollow(FOLLOW_expression_in_case_when_part19223);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1915:5: -> template( \"not implemented: case_when_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: case_when_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_when_part"


	public static class case_else_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "case_else_part"
	// PLSQLPrinter.g:1918:1: case_else_part : ^( SQL92_RESERVED_ELSE ( seq_of_statements | expression ) ) -> template( \"not implemented: case_else_part\";
	public final PLSQLPrinter.case_else_part_return case_else_part() throws RecognitionException {
		PLSQLPrinter.case_else_part_return retval = new PLSQLPrinter.case_else_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1919:5: ( ^( SQL92_RESERVED_ELSE ( seq_of_statements | expression ) ) -> template( \"not implemented: case_else_part\")
			// PLSQLPrinter.g:1919:10: ^( SQL92_RESERVED_ELSE ( seq_of_statements | expression ) )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_case_else_part19260); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1919:32: ( seq_of_statements | expression )
			int alt427=2;
			int LA427_0 = input.LA(1);
			if ( (LA427_0==STATEMENTS) ) {
				alt427=1;
			}
			else if ( (LA427_0==EXPR||LA427_0==LOGIC_EXPR) ) {
				alt427=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 427, 0, input);
				throw nvae;
			}

			switch (alt427) {
				case 1 :
					// PLSQLPrinter.g:1919:33: seq_of_statements
					{
					pushFollow(FOLLOW_seq_of_statements_in_case_else_part19263);
					seq_of_statements();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1919:51: expression
					{
					pushFollow(FOLLOW_expression_in_case_else_part19265);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1920:5: -> template( \"not implemented: case_else_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: case_else_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_else_part"


	public static class standard_function_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "standard_function"
	// PLSQLPrinter.g:1924:1: standard_function : ( ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? ) -> template( \"not implemented: standard_function\"| ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( COUNT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | expression ) ( over_clause )? ) -> template( \"not implemented: standard_function\"| ^( ( CAST_VK | XMLCAST_VK ) ( subquery | expression ) type_spec ) -> template( \"not implemented: standard_function\"| ^( CHR_VK expression NCHAR_CS_VK ) -> template( \"not implemented: standard_function\"| ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? ) -> template( \"not implemented: standard_function\"| ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause | over_clause )+ ) -> template( \"not implemented: standard_function\"| ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? ) -> template( \"not implemented: standard_function\"| ^( EXTRACT_VK ID expression ) -> template( \"not implemented: standard_function\"| ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause ) -> template( \"not implemented: standard_function\"| ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( TRANSLATE_VK expression ( CHAR_CS_VK | NCHAR_CS_VK )? ( expression )* ) -> template( \"not implemented: standard_function\"| ^( TREAT_VK expression ( REF_VK )? type_spec ) -> template( \"not implemented: standard_function\"| ^( TRIM_VK ( LEADING_VK | TRAILING_VK | BOTH_VK )? expression_element ( expression_element )? ) -> template( \"not implemented: standard_function\"| ^( XMLAGG_VK expression ( order_by_clause )? ) -> template( \"not implemented: standard_function\"| ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ ) -> template( \"not implemented: standard_function\"| ^( XMLEXISTS_VK expression ( xml_passing_clause )? ) -> template( \"not implemented: standard_function\"| ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? ) -> template( \"not implemented: standard_function\"| ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? ) -> template( \"not implemented: standard_function\"| ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? ) -> template( \"not implemented: standard_function\"| ^( XMLTABLE_VK ( xml_namespaces_clause )? expression ( xml_passing_clause )? ( xml_table_column )* ) -> template( \"not implemented: standard_function\"| ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? ( expression ( alias )? )* ) -> template( \"not implemented: standard_function\"| ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? ) -> template( \"not implemented: standard_function\"| ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? ) -> template( \"not implemented: standard_function\");
	public final PLSQLPrinter.standard_function_return standard_function() throws RecognitionException {
		PLSQLPrinter.standard_function_return retval = new PLSQLPrinter.standard_function_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1925:5: ( ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? ) -> template( \"not implemented: standard_function\"| ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( COUNT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | expression ) ( over_clause )? ) -> template( \"not implemented: standard_function\"| ^( ( CAST_VK | XMLCAST_VK ) ( subquery | expression ) type_spec ) -> template( \"not implemented: standard_function\"| ^( CHR_VK expression NCHAR_CS_VK ) -> template( \"not implemented: standard_function\"| ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? ) -> template( \"not implemented: standard_function\"| ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause | over_clause )+ ) -> template( \"not implemented: standard_function\"| ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? ) -> template( \"not implemented: standard_function\"| ^( EXTRACT_VK ID expression ) -> template( \"not implemented: standard_function\"| ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause ) -> template( \"not implemented: standard_function\"| ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( TRANSLATE_VK expression ( CHAR_CS_VK | NCHAR_CS_VK )? ( expression )* ) -> template( \"not implemented: standard_function\"| ^( TREAT_VK expression ( REF_VK )? type_spec ) -> template( \"not implemented: standard_function\"| ^( TRIM_VK ( LEADING_VK | TRAILING_VK | BOTH_VK )? expression_element ( expression_element )? ) -> template( \"not implemented: standard_function\"| ^( XMLAGG_VK expression ( order_by_clause )? ) -> template( \"not implemented: standard_function\"| ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ ) -> template( \"not implemented: standard_function\"| ^( XMLEXISTS_VK expression ( xml_passing_clause )? ) -> template( \"not implemented: standard_function\"| ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? ) -> template( \"not implemented: standard_function\"| ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? ) -> template( \"not implemented: standard_function\"| ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? ) -> template( \"not implemented: standard_function\"| ^( XMLTABLE_VK ( xml_namespaces_clause )? expression ( xml_passing_clause )? ( xml_table_column )* ) -> template( \"not implemented: standard_function\"| ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? ( expression ( alias )? )* ) -> template( \"not implemented: standard_function\"| ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? ) -> template( \"not implemented: standard_function\"| ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? ) -> template( \"not implemented: standard_function\")
			int alt476=24;
			switch ( input.LA(1) ) {
			case FUNCTION_ENABLING_OVER:
				{
				alt476=1;
				}
				break;
			case FUNCTION_ENABLING_USING:
				{
				alt476=2;
				}
				break;
			case COUNT_VK:
				{
				alt476=3;
				}
				break;
			case CAST_VK:
			case XMLCAST_VK:
				{
				alt476=4;
				}
				break;
			case CHR_VK:
				{
				alt476=5;
				}
				break;
			case COLLECT_VK:
				{
				alt476=6;
				}
				break;
			case FUNCTION_ENABLING_WITHIN_OR_OVER:
				{
				alt476=7;
				}
				break;
			case DECOMPOSE_VK:
				{
				alt476=8;
				}
				break;
			case EXTRACT_VK:
				{
				alt476=9;
				}
				break;
			case FIRST_VALUE_VK:
			case LAST_VALUE_VK:
				{
				alt476=10;
				}
				break;
			case PREDICTION_FUNCTION:
				{
				alt476=11;
				}
				break;
			case TRANSLATE_VK:
				{
				alt476=12;
				}
				break;
			case TREAT_VK:
				{
				alt476=13;
				}
				break;
			case TRIM_VK:
				{
				alt476=14;
				}
				break;
			case XMLAGG_VK:
				{
				alt476=15;
				}
				break;
			case XMLCOLATTVAL_VK:
			case XMLFOREST_VK:
				{
				alt476=16;
				}
				break;
			case XMLEXISTS_VK:
				{
				alt476=17;
				}
				break;
			case XMLPARSE_VK:
				{
				alt476=18;
				}
				break;
			case XMLQUERY_VK:
				{
				alt476=19;
				}
				break;
			case XMLROOT_VK:
				{
				alt476=20;
				}
				break;
			case XMLTABLE_VK:
				{
				alt476=21;
				}
				break;
			case XMLELEMENT_VK:
				{
				alt476=22;
				}
				break;
			case XMLPI_VK:
				{
				alt476=23;
				}
				break;
			case XMLSERIALIZE_VK:
				{
				alt476=24;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 476, 0, input);
				throw nvae;
			}
			switch (alt476) {
				case 1 :
					// PLSQLPrinter.g:1925:10: ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? )
					{
					match(input,FUNCTION_ENABLING_OVER,FOLLOW_FUNCTION_ENABLING_OVER_in_standard_function19303); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function19305);
					function_argument();
					state._fsp--;

					// PLSQLPrinter.g:1925:53: ( over_clause )?
					int alt428=2;
					int LA428_0 = input.LA(1);
					if ( (LA428_0==OVER_VK) ) {
						alt428=1;
					}
					switch (alt428) {
						case 1 :
							// PLSQLPrinter.g:1925:53: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function19307);
							over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1926:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1927:10: ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? )
					{
					match(input,FUNCTION_ENABLING_USING,FOLLOW_FUNCTION_ENABLING_USING_in_standard_function19335); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function19337);
					function_argument();
					state._fsp--;

					// PLSQLPrinter.g:1927:54: ( using_clause )?
					int alt429=2;
					int LA429_0 = input.LA(1);
					if ( (LA429_0==PLSQL_NON_RESERVED_USING) ) {
						alt429=1;
					}
					switch (alt429) {
						case 1 :
							// PLSQLPrinter.g:1927:54: using_clause
							{
							pushFollow(FOLLOW_using_clause_in_standard_function19339);
							using_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1928:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1929:10: ^( COUNT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | expression ) ( over_clause )? )
					{
					match(input,COUNT_VK,FOLLOW_COUNT_VK_in_standard_function19367); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1929:21: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )?
					int alt430=4;
					switch ( input.LA(1) ) {
						case SQL92_RESERVED_DISTINCT:
							{
							alt430=1;
							}
							break;
						case SQL92_RESERVED_UNIQUE:
							{
							alt430=2;
							}
							break;
						case SQL92_RESERVED_ALL:
							{
							alt430=3;
							}
							break;
					}
					switch (alt430) {
						case 1 :
							// PLSQLPrinter.g:1929:22: SQL92_RESERVED_DISTINCT
							{
							match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function19370); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1929:46: SQL92_RESERVED_UNIQUE
							{
							match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function19372); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1929:68: SQL92_RESERVED_ALL
							{
							match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_standard_function19374); 
							}
							break;

					}

					// PLSQLPrinter.g:1929:89: ( ASTERISK | expression )
					int alt431=2;
					int LA431_0 = input.LA(1);
					if ( (LA431_0==ASTERISK) ) {
						alt431=1;
					}
					else if ( (LA431_0==EXPR||LA431_0==LOGIC_EXPR) ) {
						alt431=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 431, 0, input);
						throw nvae;
					}

					switch (alt431) {
						case 1 :
							// PLSQLPrinter.g:1929:91: ASTERISK
							{
							match(input,ASTERISK,FOLLOW_ASTERISK_in_standard_function19380); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1929:102: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function19384);
							expression();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1929:115: ( over_clause )?
					int alt432=2;
					int LA432_0 = input.LA(1);
					if ( (LA432_0==OVER_VK) ) {
						alt432=1;
					}
					switch (alt432) {
						case 1 :
							// PLSQLPrinter.g:1929:115: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function19388);
							over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1930:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1931:10: ^( ( CAST_VK | XMLCAST_VK ) ( subquery | expression ) type_spec )
					{
					// PLSQLPrinter.g:1931:12: ( CAST_VK | XMLCAST_VK )
					int alt433=2;
					int LA433_0 = input.LA(1);
					if ( (LA433_0==CAST_VK) ) {
						alt433=1;
					}
					else if ( (LA433_0==XMLCAST_VK) ) {
						alt433=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 433, 0, input);
						throw nvae;
					}

					switch (alt433) {
						case 1 :
							// PLSQLPrinter.g:1931:13: CAST_VK
							{
							match(input,CAST_VK,FOLLOW_CAST_VK_in_standard_function19417); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1931:21: XMLCAST_VK
							{
							match(input,XMLCAST_VK,FOLLOW_XMLCAST_VK_in_standard_function19419); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1931:33: ( subquery | expression )
					int alt434=2;
					int LA434_0 = input.LA(1);
					if ( (LA434_0==SUBQUERY) ) {
						alt434=1;
					}
					else if ( (LA434_0==EXPR||LA434_0==LOGIC_EXPR) ) {
						alt434=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 434, 0, input);
						throw nvae;
					}

					switch (alt434) {
						case 1 :
							// PLSQLPrinter.g:1931:34: subquery
							{
							pushFollow(FOLLOW_subquery_in_standard_function19423);
							subquery();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1931:43: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function19425);
							expression();
							state._fsp--;

							}
							break;

					}

					pushFollow(FOLLOW_type_spec_in_standard_function19428);
					type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1932:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1933:10: ^( CHR_VK expression NCHAR_CS_VK )
					{
					match(input,CHR_VK,FOLLOW_CHR_VK_in_standard_function19455); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function19457);
					expression();
					state._fsp--;

					match(input,NCHAR_CS_VK,FOLLOW_NCHAR_CS_VK_in_standard_function19459); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1934:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:1935:10: ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? )
					{
					match(input,COLLECT_VK,FOLLOW_COLLECT_VK_in_standard_function19486); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1935:23: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )?
					int alt435=3;
					int LA435_0 = input.LA(1);
					if ( (LA435_0==SQL92_RESERVED_DISTINCT) ) {
						alt435=1;
					}
					else if ( (LA435_0==SQL92_RESERVED_UNIQUE) ) {
						alt435=2;
					}
					switch (alt435) {
						case 1 :
							// PLSQLPrinter.g:1935:24: SQL92_RESERVED_DISTINCT
							{
							match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function19489); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1935:48: SQL92_RESERVED_UNIQUE
							{
							match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function19491); 
							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_standard_function19495);
					column_name();
					state._fsp--;

					// PLSQLPrinter.g:1935:84: ( collect_order_by_part )?
					int alt436=2;
					int LA436_0 = input.LA(1);
					if ( (LA436_0==SQL92_RESERVED_ORDER) ) {
						alt436=1;
					}
					switch (alt436) {
						case 1 :
							// PLSQLPrinter.g:1935:84: collect_order_by_part
							{
							pushFollow(FOLLOW_collect_order_by_part_in_standard_function19497);
							collect_order_by_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1936:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:1937:10: ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause | over_clause )+ )
					{
					match(input,FUNCTION_ENABLING_WITHIN_OR_OVER,FOLLOW_FUNCTION_ENABLING_WITHIN_OR_OVER_in_standard_function19525); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function19527);
					function_argument();
					state._fsp--;

					// PLSQLPrinter.g:1937:63: ( within_clause | over_clause )+
					int cnt437=0;
					loop437:
					while (true) {
						int alt437=3;
						int LA437_0 = input.LA(1);
						if ( (LA437_0==WITHIN_VK) ) {
							alt437=1;
						}
						else if ( (LA437_0==OVER_VK) ) {
							alt437=2;
						}

						switch (alt437) {
						case 1 :
							// PLSQLPrinter.g:1937:64: within_clause
							{
							pushFollow(FOLLOW_within_clause_in_standard_function19530);
							within_clause();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1937:78: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function19532);
							over_clause();
							state._fsp--;

							}
							break;

						default :
							if ( cnt437 >= 1 ) break loop437;
							EarlyExitException eee = new EarlyExitException(437, input);
							throw eee;
						}
						cnt437++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1938:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:1939:10: ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? )
					{
					match(input,DECOMPOSE_VK,FOLLOW_DECOMPOSE_VK_in_standard_function19562); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function19564);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1939:36: ( CANONICAL_VK | COMPATIBILITY_VK )?
					int alt438=3;
					int LA438_0 = input.LA(1);
					if ( (LA438_0==CANONICAL_VK) ) {
						alt438=1;
					}
					else if ( (LA438_0==COMPATIBILITY_VK) ) {
						alt438=2;
					}
					switch (alt438) {
						case 1 :
							// PLSQLPrinter.g:1939:37: CANONICAL_VK
							{
							match(input,CANONICAL_VK,FOLLOW_CANONICAL_VK_in_standard_function19567); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1939:50: COMPATIBILITY_VK
							{
							match(input,COMPATIBILITY_VK,FOLLOW_COMPATIBILITY_VK_in_standard_function19569); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1940:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:1941:10: ^( EXTRACT_VK ID expression )
					{
					match(input,EXTRACT_VK,FOLLOW_EXTRACT_VK_in_standard_function19599); 
					match(input, Token.DOWN, null); 
					match(input,ID,FOLLOW_ID_in_standard_function19601); 
					pushFollow(FOLLOW_expression_in_standard_function19603);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1942:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:1943:10: ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause )
					{
					// PLSQLPrinter.g:1943:12: ( FIRST_VALUE_VK | LAST_VALUE_VK )
					int alt439=2;
					int LA439_0 = input.LA(1);
					if ( (LA439_0==FIRST_VALUE_VK) ) {
						alt439=1;
					}
					else if ( (LA439_0==LAST_VALUE_VK) ) {
						alt439=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 439, 0, input);
						throw nvae;
					}

					switch (alt439) {
						case 1 :
							// PLSQLPrinter.g:1943:13: FIRST_VALUE_VK
							{
							match(input,FIRST_VALUE_VK,FOLLOW_FIRST_VALUE_VK_in_standard_function19631); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1943:28: LAST_VALUE_VK
							{
							match(input,LAST_VALUE_VK,FOLLOW_LAST_VALUE_VK_in_standard_function19633); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function19636);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1943:54: ( NULLS_VK )?
					int alt440=2;
					int LA440_0 = input.LA(1);
					if ( (LA440_0==NULLS_VK) ) {
						alt440=1;
					}
					switch (alt440) {
						case 1 :
							// PLSQLPrinter.g:1943:54: NULLS_VK
							{
							match(input,NULLS_VK,FOLLOW_NULLS_VK_in_standard_function19638); 
							}
							break;

					}

					pushFollow(FOLLOW_over_clause_in_standard_function19641);
					over_clause();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1944:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:1945:10: ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? )
					{
					match(input,PREDICTION_FUNCTION,FOLLOW_PREDICTION_FUNCTION_in_standard_function19669); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1945:32: ( expression )+
					int cnt441=0;
					loop441:
					while (true) {
						int alt441=2;
						int LA441_0 = input.LA(1);
						if ( (LA441_0==EXPR||LA441_0==LOGIC_EXPR) ) {
							alt441=1;
						}

						switch (alt441) {
						case 1 :
							// PLSQLPrinter.g:1945:32: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function19671);
							expression();
							state._fsp--;

							}
							break;

						default :
							if ( cnt441 >= 1 ) break loop441;
							EarlyExitException eee = new EarlyExitException(441, input);
							throw eee;
						}
						cnt441++;
					}

					// PLSQLPrinter.g:1945:44: ( cost_matrix_clause )?
					int alt442=2;
					int LA442_0 = input.LA(1);
					if ( (LA442_0==COST_VK) ) {
						alt442=1;
					}
					switch (alt442) {
						case 1 :
							// PLSQLPrinter.g:1945:44: cost_matrix_clause
							{
							pushFollow(FOLLOW_cost_matrix_clause_in_standard_function19674);
							cost_matrix_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1945:64: ( using_clause )?
					int alt443=2;
					int LA443_0 = input.LA(1);
					if ( (LA443_0==PLSQL_NON_RESERVED_USING) ) {
						alt443=1;
					}
					switch (alt443) {
						case 1 :
							// PLSQLPrinter.g:1945:64: using_clause
							{
							pushFollow(FOLLOW_using_clause_in_standard_function19677);
							using_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1946:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:1947:10: ^( TRANSLATE_VK expression ( CHAR_CS_VK | NCHAR_CS_VK )? ( expression )* )
					{
					match(input,TRANSLATE_VK,FOLLOW_TRANSLATE_VK_in_standard_function19705); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function19707);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1947:36: ( CHAR_CS_VK | NCHAR_CS_VK )?
					int alt444=3;
					int LA444_0 = input.LA(1);
					if ( (LA444_0==CHAR_CS_VK) ) {
						alt444=1;
					}
					else if ( (LA444_0==NCHAR_CS_VK) ) {
						alt444=2;
					}
					switch (alt444) {
						case 1 :
							// PLSQLPrinter.g:1947:37: CHAR_CS_VK
							{
							match(input,CHAR_CS_VK,FOLLOW_CHAR_CS_VK_in_standard_function19710); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1947:48: NCHAR_CS_VK
							{
							match(input,NCHAR_CS_VK,FOLLOW_NCHAR_CS_VK_in_standard_function19712); 
							}
							break;

					}

					// PLSQLPrinter.g:1947:62: ( expression )*
					loop445:
					while (true) {
						int alt445=2;
						int LA445_0 = input.LA(1);
						if ( (LA445_0==EXPR||LA445_0==LOGIC_EXPR) ) {
							alt445=1;
						}

						switch (alt445) {
						case 1 :
							// PLSQLPrinter.g:1947:62: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function19716);
							expression();
							state._fsp--;

							}
							break;

						default :
							break loop445;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1948:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:1949:10: ^( TREAT_VK expression ( REF_VK )? type_spec )
					{
					match(input,TREAT_VK,FOLLOW_TREAT_VK_in_standard_function19744); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function19746);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1949:32: ( REF_VK )?
					int alt446=2;
					int LA446_0 = input.LA(1);
					if ( (LA446_0==REF_VK) ) {
						alt446=1;
					}
					switch (alt446) {
						case 1 :
							// PLSQLPrinter.g:1949:32: REF_VK
							{
							match(input,REF_VK,FOLLOW_REF_VK_in_standard_function19748); 
							}
							break;

					}

					pushFollow(FOLLOW_type_spec_in_standard_function19751);
					type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1950:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:1951:10: ^( TRIM_VK ( LEADING_VK | TRAILING_VK | BOTH_VK )? expression_element ( expression_element )? )
					{
					match(input,TRIM_VK,FOLLOW_TRIM_VK_in_standard_function19778); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1951:20: ( LEADING_VK | TRAILING_VK | BOTH_VK )?
					int alt447=4;
					switch ( input.LA(1) ) {
						case LEADING_VK:
							{
							alt447=1;
							}
							break;
						case TRAILING_VK:
							{
							alt447=2;
							}
							break;
						case BOTH_VK:
							{
							alt447=3;
							}
							break;
					}
					switch (alt447) {
						case 1 :
							// PLSQLPrinter.g:1951:21: LEADING_VK
							{
							match(input,LEADING_VK,FOLLOW_LEADING_VK_in_standard_function19781); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1951:32: TRAILING_VK
							{
							match(input,TRAILING_VK,FOLLOW_TRAILING_VK_in_standard_function19783); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1951:44: BOTH_VK
							{
							match(input,BOTH_VK,FOLLOW_BOTH_VK_in_standard_function19785); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_element_in_standard_function19789);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1951:73: ( expression_element )?
					int alt448=2;
					int LA448_0 = input.LA(1);
					if ( (LA448_0==APPROXIMATE_NUM_LIT||LA448_0==ASTERISK||LA448_0==CHAR_STRING||LA448_0==CONCATENATION_OP||(LA448_0 >= EQUALS_OP && LA448_0 <= EXACT_NUM_LIT)||(LA448_0 >= GREATER_THAN_OP && LA448_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA448_0 >= LESS_THAN_OP && LA448_0 <= LESS_THAN_OR_EQUALS_OP)||LA448_0==MINUS_SIGN||LA448_0==NOT_EQUAL_OP||LA448_0==PERCENT||LA448_0==PLUS_SIGN||LA448_0==SOLIDUS||LA448_0==SQL92_RESERVED_ALL||(LA448_0 >= SQL92_RESERVED_AND && LA448_0 <= SQL92_RESERVED_ANY)||LA448_0==SQL92_RESERVED_BETWEEN||LA448_0==SQL92_RESERVED_DEFAULT||LA448_0==SQL92_RESERVED_DISTINCT||(LA448_0 >= SQL92_RESERVED_EXISTS && LA448_0 <= SQL92_RESERVED_FALSE)||LA448_0==SQL92_RESERVED_IN||(LA448_0 >= SQL92_RESERVED_LIKE && LA448_0 <= SQL92_RESERVED_NULL)||LA448_0==SQL92_RESERVED_OR||LA448_0==SQL92_RESERVED_PRIOR||LA448_0==SQL92_RESERVED_TRUE||LA448_0==UNSIGNED_INTEGER||LA448_0==CASCATED_ELEMENT||LA448_0==DATETIME_OP||LA448_0==DBTIMEZONE_VK||LA448_0==DIV_VK||LA448_0==DOT_ASTERISK||(LA448_0 >= IS_A_SET && LA448_0 <= IS_PRESENT)||LA448_0==KEEP_VK||(LA448_0 >= LIKE2_VK && LA448_0 <= LIKEC_VK)||LA448_0==MAXVALUE_VK||LA448_0==MEMBER_VK||LA448_0==MINVALUE_VK||LA448_0==MODEL_EXPRESSION||LA448_0==MOD_VK||LA448_0==NEW_VK||LA448_0==NOT_BETWEEN||(LA448_0 >= NOT_IN && LA448_0 <= NOT_LIKE)||LA448_0==OUTER_JOIN_SIGN||(LA448_0 >= PERCENT_FOUND_VK && LA448_0 <= PERCENT_ROWCOUNT_VK)||LA448_0==PIPE_VK||LA448_0==SEARCHED_CASE||LA448_0==SESSIONTIMEZONE_VK||LA448_0==SIMPLE_CASE||LA448_0==SOME_VK||LA448_0==STANDARD_FUNCTION||LA448_0==SUBMULTISET_VK||LA448_0==SUBQUERY||LA448_0==UNARY_OPERATOR||LA448_0==VECTOR_EXPR) ) {
						alt448=1;
					}
					switch (alt448) {
						case 1 :
							// PLSQLPrinter.g:1951:73: expression_element
							{
							pushFollow(FOLLOW_expression_element_in_standard_function19791);
							expression_element();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1952:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:1954:10: ^( XMLAGG_VK expression ( order_by_clause )? )
					{
					match(input,XMLAGG_VK,FOLLOW_XMLAGG_VK_in_standard_function19821); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function19823);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1954:33: ( order_by_clause )?
					int alt449=2;
					int LA449_0 = input.LA(1);
					if ( (LA449_0==SQL92_RESERVED_ORDER) ) {
						alt449=1;
					}
					switch (alt449) {
						case 1 :
							// PLSQLPrinter.g:1954:33: order_by_clause
							{
							pushFollow(FOLLOW_order_by_clause_in_standard_function19825);
							order_by_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1955:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:1956:10: ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ )
					{
					// PLSQLPrinter.g:1956:12: ( XMLCOLATTVAL_VK | XMLFOREST_VK )
					int alt450=2;
					int LA450_0 = input.LA(1);
					if ( (LA450_0==XMLCOLATTVAL_VK) ) {
						alt450=1;
					}
					else if ( (LA450_0==XMLFOREST_VK) ) {
						alt450=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 450, 0, input);
						throw nvae;
					}

					switch (alt450) {
						case 1 :
							// PLSQLPrinter.g:1956:13: XMLCOLATTVAL_VK
							{
							match(input,XMLCOLATTVAL_VK,FOLLOW_XMLCOLATTVAL_VK_in_standard_function19854); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1956:29: XMLFOREST_VK
							{
							match(input,XMLFOREST_VK,FOLLOW_XMLFOREST_VK_in_standard_function19856); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1956:43: ( xml_multiuse_expression_element )+
					int cnt451=0;
					loop451:
					while (true) {
						int alt451=2;
						int LA451_0 = input.LA(1);
						if ( (LA451_0==XML_ELEMENT) ) {
							alt451=1;
						}

						switch (alt451) {
						case 1 :
							// PLSQLPrinter.g:1956:43: xml_multiuse_expression_element
							{
							pushFollow(FOLLOW_xml_multiuse_expression_element_in_standard_function19859);
							xml_multiuse_expression_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt451 >= 1 ) break loop451;
							EarlyExitException eee = new EarlyExitException(451, input);
							throw eee;
						}
						cnt451++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1957:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:1958:10: ^( XMLEXISTS_VK expression ( xml_passing_clause )? )
					{
					match(input,XMLEXISTS_VK,FOLLOW_XMLEXISTS_VK_in_standard_function19887); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function19889);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1958:36: ( xml_passing_clause )?
					int alt452=2;
					int LA452_0 = input.LA(1);
					if ( (LA452_0==PASSING_VK) ) {
						alt452=1;
					}
					switch (alt452) {
						case 1 :
							// PLSQLPrinter.g:1958:36: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function19891);
							xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1959:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:1960:10: ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? )
					{
					match(input,XMLPARSE_VK,FOLLOW_XMLPARSE_VK_in_standard_function19919); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1960:24: ( DOCUMENT_VK | CONTENT_VK )
					int alt453=2;
					int LA453_0 = input.LA(1);
					if ( (LA453_0==DOCUMENT_VK) ) {
						alt453=1;
					}
					else if ( (LA453_0==CONTENT_VK) ) {
						alt453=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 453, 0, input);
						throw nvae;
					}

					switch (alt453) {
						case 1 :
							// PLSQLPrinter.g:1960:25: DOCUMENT_VK
							{
							match(input,DOCUMENT_VK,FOLLOW_DOCUMENT_VK_in_standard_function19922); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1960:37: CONTENT_VK
							{
							match(input,CONTENT_VK,FOLLOW_CONTENT_VK_in_standard_function19924); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function19927);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1960:60: ( WELLFORMED_VK )?
					int alt454=2;
					int LA454_0 = input.LA(1);
					if ( (LA454_0==WELLFORMED_VK) ) {
						alt454=1;
					}
					switch (alt454) {
						case 1 :
							// PLSQLPrinter.g:1960:60: WELLFORMED_VK
							{
							match(input,WELLFORMED_VK,FOLLOW_WELLFORMED_VK_in_standard_function19929); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1961:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 19 :
					// PLSQLPrinter.g:1962:10: ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? )
					{
					match(input,XMLQUERY_VK,FOLLOW_XMLQUERY_VK_in_standard_function19957); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function19959);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1962:35: ( xml_passing_clause )?
					int alt455=2;
					int LA455_0 = input.LA(1);
					if ( (LA455_0==PASSING_VK) ) {
						alt455=1;
					}
					switch (alt455) {
						case 1 :
							// PLSQLPrinter.g:1962:35: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function19961);
							xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1962:55: ( SQL92_RESERVED_NULL )?
					int alt456=2;
					int LA456_0 = input.LA(1);
					if ( (LA456_0==SQL92_RESERVED_NULL) ) {
						alt456=1;
					}
					switch (alt456) {
						case 1 :
							// PLSQLPrinter.g:1962:55: SQL92_RESERVED_NULL
							{
							match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_standard_function19964); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1963:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 20 :
					// PLSQLPrinter.g:1964:10: ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? )
					{
					match(input,XMLROOT_VK,FOLLOW_XMLROOT_VK_in_standard_function19992); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function19994);
					expression();
					state._fsp--;

					pushFollow(FOLLOW_xml_param_version_part_in_standard_function19996);
					xml_param_version_part();
					state._fsp--;

					// PLSQLPrinter.g:1964:57: ( xmlroot_param_standalone_part )?
					int alt457=2;
					int LA457_0 = input.LA(1);
					if ( (LA457_0==STANDALONE_VK) ) {
						alt457=1;
					}
					switch (alt457) {
						case 1 :
							// PLSQLPrinter.g:1964:57: xmlroot_param_standalone_part
							{
							pushFollow(FOLLOW_xmlroot_param_standalone_part_in_standard_function19998);
							xmlroot_param_standalone_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1965:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 21 :
					// PLSQLPrinter.g:1966:10: ^( XMLTABLE_VK ( xml_namespaces_clause )? expression ( xml_passing_clause )? ( xml_table_column )* )
					{
					match(input,XMLTABLE_VK,FOLLOW_XMLTABLE_VK_in_standard_function20026); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1966:24: ( xml_namespaces_clause )?
					int alt458=2;
					int LA458_0 = input.LA(1);
					if ( (LA458_0==XMLNAMESPACES_VK) ) {
						alt458=1;
					}
					switch (alt458) {
						case 1 :
							// PLSQLPrinter.g:1966:24: xml_namespaces_clause
							{
							pushFollow(FOLLOW_xml_namespaces_clause_in_standard_function20028);
							xml_namespaces_clause();
							state._fsp--;

							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function20031);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1966:58: ( xml_passing_clause )?
					int alt459=2;
					int LA459_0 = input.LA(1);
					if ( (LA459_0==PASSING_VK) ) {
						alt459=1;
					}
					switch (alt459) {
						case 1 :
							// PLSQLPrinter.g:1966:58: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function20033);
							xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1966:78: ( xml_table_column )*
					loop460:
					while (true) {
						int alt460=2;
						int LA460_0 = input.LA(1);
						if ( (LA460_0==XML_COLUMN) ) {
							alt460=1;
						}

						switch (alt460) {
						case 1 :
							// PLSQLPrinter.g:1966:78: xml_table_column
							{
							pushFollow(FOLLOW_xml_table_column_in_standard_function20036);
							xml_table_column();
							state._fsp--;

							}
							break;

						default :
							break loop460;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1967:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 22 :
					// PLSQLPrinter.g:1968:10: ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? ( expression ( alias )? )* )
					{
					match(input,XMLELEMENT_VK,FOLLOW_XMLELEMENT_VK_in_standard_function20064); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1969:13: ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )?
					int alt461=3;
					int LA461_0 = input.LA(1);
					if ( (LA461_0==ENTITYESCAPING_VK) ) {
						alt461=1;
					}
					else if ( (LA461_0==NOENTITYESCAPING_VK) ) {
						alt461=2;
					}
					switch (alt461) {
						case 1 :
							// PLSQLPrinter.g:1969:14: ENTITYESCAPING_VK
							{
							match(input,ENTITYESCAPING_VK,FOLLOW_ENTITYESCAPING_VK_in_standard_function20079); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1969:32: NOENTITYESCAPING_VK
							{
							match(input,NOENTITYESCAPING_VK,FOLLOW_NOENTITYESCAPING_VK_in_standard_function20081); 
							}
							break;

					}

					// PLSQLPrinter.g:1970:13: ( NAME_VK | EVALNAME_VK )?
					int alt462=3;
					int LA462_0 = input.LA(1);
					if ( (LA462_0==NAME_VK) ) {
						alt462=1;
					}
					else if ( (LA462_0==EVALNAME_VK) ) {
						alt462=2;
					}
					switch (alt462) {
						case 1 :
							// PLSQLPrinter.g:1970:14: NAME_VK
							{
							match(input,NAME_VK,FOLLOW_NAME_VK_in_standard_function20098); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1970:22: EVALNAME_VK
							{
							match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_standard_function20100); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function20104);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1971:13: ( xml_attributes_clause )?
					int alt463=2;
					int LA463_0 = input.LA(1);
					if ( (LA463_0==XMLATTRIBUTES_VK) ) {
						alt463=1;
					}
					switch (alt463) {
						case 1 :
							// PLSQLPrinter.g:1971:13: xml_attributes_clause
							{
							pushFollow(FOLLOW_xml_attributes_clause_in_standard_function20118);
							xml_attributes_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1971:36: ( expression ( alias )? )*
					loop465:
					while (true) {
						int alt465=2;
						int LA465_0 = input.LA(1);
						if ( (LA465_0==EXPR||LA465_0==LOGIC_EXPR) ) {
							alt465=1;
						}

						switch (alt465) {
						case 1 :
							// PLSQLPrinter.g:1971:37: expression ( alias )?
							{
							pushFollow(FOLLOW_expression_in_standard_function20122);
							expression();
							state._fsp--;

							// PLSQLPrinter.g:1971:48: ( alias )?
							int alt464=2;
							int LA464_0 = input.LA(1);
							if ( (LA464_0==COLUMN_ALIAS||LA464_0==TABLE_ALIAS) ) {
								alt464=1;
							}
							switch (alt464) {
								case 1 :
									// PLSQLPrinter.g:1971:48: alias
									{
									pushFollow(FOLLOW_alias_in_standard_function20124);
									alias();
									state._fsp--;

									}
									break;

							}

							}
							break;

						default :
							break loop465;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1973:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 23 :
					// PLSQLPrinter.g:1974:10: ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? )
					{
					match(input,XMLPI_VK,FOLLOW_XMLPI_VK_in_standard_function20163); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1975:17: ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression )
					int alt467=2;
					int LA467_0 = input.LA(1);
					if ( (LA467_0==NAME_VK) ) {
						alt467=1;
					}
					else if ( (LA467_0==EVALNAME_VK) ) {
						alt467=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 467, 0, input);
						throw nvae;
					}

					switch (alt467) {
						case 1 :
							// PLSQLPrinter.g:1975:22: NAME_VK ( char_set_name )? ID
							{
							match(input,NAME_VK,FOLLOW_NAME_VK_in_standard_function20186); 
							// PLSQLPrinter.g:1975:30: ( char_set_name )?
							int alt466=2;
							int LA466_0 = input.LA(1);
							if ( (LA466_0==CHAR_SET_NAME) ) {
								alt466=1;
							}
							switch (alt466) {
								case 1 :
									// PLSQLPrinter.g:1975:30: char_set_name
									{
									pushFollow(FOLLOW_char_set_name_in_standard_function20188);
									char_set_name();
									state._fsp--;

									}
									break;

							}

							match(input,ID,FOLLOW_ID_in_standard_function20191); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1976:22: EVALNAME_VK expression
							{
							match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_standard_function20214); 
							pushFollow(FOLLOW_expression_in_standard_function20216);
							expression();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1978:17: ( expression )?
					int alt468=2;
					int LA468_0 = input.LA(1);
					if ( (LA468_0==EXPR||LA468_0==LOGIC_EXPR) ) {
						alt468=1;
					}
					switch (alt468) {
						case 1 :
							// PLSQLPrinter.g:1978:17: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function20252);
							expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1980:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 24 :
					// PLSQLPrinter.g:1981:10: ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? )
					{
					match(input,XMLSERIALIZE_VK,FOLLOW_XMLSERIALIZE_VK_in_standard_function20289); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1982:17: ( DOCUMENT_VK | CONTENT_VK )
					int alt469=2;
					int LA469_0 = input.LA(1);
					if ( (LA469_0==DOCUMENT_VK) ) {
						alt469=1;
					}
					else if ( (LA469_0==CONTENT_VK) ) {
						alt469=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 469, 0, input);
						throw nvae;
					}

					switch (alt469) {
						case 1 :
							// PLSQLPrinter.g:1982:18: DOCUMENT_VK
							{
							match(input,DOCUMENT_VK,FOLLOW_DOCUMENT_VK_in_standard_function20308); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1982:30: CONTENT_VK
							{
							match(input,CONTENT_VK,FOLLOW_CONTENT_VK_in_standard_function20310); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function20329);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1983:28: ( type_spec )?
					int alt470=2;
					int LA470_0 = input.LA(1);
					if ( (LA470_0==CUSTOM_TYPE||LA470_0==INTERVAL_DATATYPE||LA470_0==NATIVE_DATATYPE) ) {
						alt470=1;
					}
					switch (alt470) {
						case 1 :
							// PLSQLPrinter.g:1983:28: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_standard_function20331);
							type_spec();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1984:17: ( xmlserialize_param_enconding_part )?
					int alt471=2;
					int LA471_0 = input.LA(1);
					if ( (LA471_0==ENCODING_VK) ) {
						alt471=1;
					}
					switch (alt471) {
						case 1 :
							// PLSQLPrinter.g:1984:17: xmlserialize_param_enconding_part
							{
							pushFollow(FOLLOW_xmlserialize_param_enconding_part_in_standard_function20350);
							xmlserialize_param_enconding_part();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1985:17: ( xml_param_version_part )?
					int alt472=2;
					int LA472_0 = input.LA(1);
					if ( (LA472_0==VERSION_VK) ) {
						alt472=1;
					}
					switch (alt472) {
						case 1 :
							// PLSQLPrinter.g:1985:17: xml_param_version_part
							{
							pushFollow(FOLLOW_xml_param_version_part_in_standard_function20369);
							xml_param_version_part();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1986:17: ( xmlserialize_param_ident_part )?
					int alt473=2;
					int LA473_0 = input.LA(1);
					if ( (LA473_0==INDENT_VK||LA473_0==NO_VK) ) {
						alt473=1;
					}
					switch (alt473) {
						case 1 :
							// PLSQLPrinter.g:1986:17: xmlserialize_param_ident_part
							{
							pushFollow(FOLLOW_xmlserialize_param_ident_part_in_standard_function20388);
							xmlserialize_param_ident_part();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1987:17: ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )?
					int alt475=2;
					int LA475_0 = input.LA(1);
					if ( (LA475_0==HIDE_VK||LA475_0==SHOW_VK) ) {
						alt475=1;
					}
					switch (alt475) {
						case 1 :
							// PLSQLPrinter.g:1987:18: ( HIDE_VK | SHOW_VK ) DEFAULTS_VK
							{
							// PLSQLPrinter.g:1987:18: ( HIDE_VK | SHOW_VK )
							int alt474=2;
							int LA474_0 = input.LA(1);
							if ( (LA474_0==HIDE_VK) ) {
								alt474=1;
							}
							else if ( (LA474_0==SHOW_VK) ) {
								alt474=2;
							}

							else {
								NoViableAltException nvae =
									new NoViableAltException("", 474, 0, input);
								throw nvae;
							}

							switch (alt474) {
								case 1 :
									// PLSQLPrinter.g:1987:19: HIDE_VK
									{
									match(input,HIDE_VK,FOLLOW_HIDE_VK_in_standard_function20409); 
									}
									break;
								case 2 :
									// PLSQLPrinter.g:1987:27: SHOW_VK
									{
									match(input,SHOW_VK,FOLLOW_SHOW_VK_in_standard_function20411); 
									}
									break;

							}

							match(input,DEFAULTS_VK,FOLLOW_DEFAULTS_VK_in_standard_function20414); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1989:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "standard_function"


	public static class over_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "over_clause"
	// PLSQLPrinter.g:1992:1: over_clause : ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? ) -> template( \"not implemented: over_clause\";
	public final PLSQLPrinter.over_clause_return over_clause() throws RecognitionException {
		PLSQLPrinter.over_clause_return retval = new PLSQLPrinter.over_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1993:5: ( ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? ) -> template( \"not implemented: over_clause\")
			// PLSQLPrinter.g:1993:10: ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? )
			{
			match(input,OVER_VK,FOLLOW_OVER_VK_in_over_clause20461); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1993:20: ( query_partition_clause )?
				int alt477=2;
				int LA477_0 = input.LA(1);
				if ( (LA477_0==PARTITION_VK) ) {
					alt477=1;
				}
				switch (alt477) {
					case 1 :
						// PLSQLPrinter.g:1993:20: query_partition_clause
						{
						pushFollow(FOLLOW_query_partition_clause_in_over_clause20463);
						query_partition_clause();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1993:44: ( order_by_clause ( windowing_clause )? )?
				int alt479=2;
				int LA479_0 = input.LA(1);
				if ( (LA479_0==SQL92_RESERVED_ORDER) ) {
					alt479=1;
				}
				switch (alt479) {
					case 1 :
						// PLSQLPrinter.g:1993:45: order_by_clause ( windowing_clause )?
						{
						pushFollow(FOLLOW_order_by_clause_in_over_clause20467);
						order_by_clause();
						state._fsp--;

						// PLSQLPrinter.g:1993:61: ( windowing_clause )?
						int alt478=2;
						int LA478_0 = input.LA(1);
						if ( (LA478_0==RANGE_VK||LA478_0==ROWS_VK) ) {
							alt478=1;
						}
						switch (alt478) {
							case 1 :
								// PLSQLPrinter.g:1993:61: windowing_clause
								{
								pushFollow(FOLLOW_windowing_clause_in_over_clause20469);
								windowing_clause();
								state._fsp--;

								}
								break;

						}

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1994:5: -> template( \"not implemented: over_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: over_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "over_clause"


	public static class windowing_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "windowing_clause"
	// PLSQLPrinter.g:1997:1: windowing_clause : ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ ) ) -> template( \"not implemented: windowing_clause\";
	public final PLSQLPrinter.windowing_clause_return windowing_clause() throws RecognitionException {
		PLSQLPrinter.windowing_clause_return retval = new PLSQLPrinter.windowing_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1998:5: ( ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ ) ) -> template( \"not implemented: windowing_clause\")
			// PLSQLPrinter.g:1998:10: ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ ) )
			{
			// PLSQLPrinter.g:1998:12: ( ROWS_VK | RANGE_VK )
			int alt480=2;
			int LA480_0 = input.LA(1);
			if ( (LA480_0==ROWS_VK) ) {
				alt480=1;
			}
			else if ( (LA480_0==RANGE_VK) ) {
				alt480=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 480, 0, input);
				throw nvae;
			}

			switch (alt480) {
				case 1 :
					// PLSQLPrinter.g:1998:13: ROWS_VK
					{
					match(input,ROWS_VK,FOLLOW_ROWS_VK_in_windowing_clause20509); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1998:21: RANGE_VK
					{
					match(input,RANGE_VK,FOLLOW_RANGE_VK_in_windowing_clause20511); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1999:13: ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ )
			int alt482=2;
			int LA482_0 = input.LA(1);
			if ( (LA482_0==SQL92_RESERVED_BETWEEN) ) {
				alt482=1;
			}
			else if ( (LA482_0==CURRENT_VK||LA482_0==FOLLOWING_VK||LA482_0==PRECEDING_VK||LA482_0==UNBOUNDED_VK) ) {
				alt482=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 482, 0, input);
				throw nvae;
			}

			switch (alt482) {
				case 1 :
					// PLSQLPrinter.g:1999:18: ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements )
					{
					match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_windowing_clause20532); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_windowing_elements_in_windowing_clause20534);
					windowing_elements();
					state._fsp--;

					pushFollow(FOLLOW_windowing_elements_in_windowing_clause20536);
					windowing_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:2000:18: ( windowing_elements )+
					{
					// PLSQLPrinter.g:2000:18: ( windowing_elements )+
					int cnt481=0;
					loop481:
					while (true) {
						int alt481=2;
						int LA481_0 = input.LA(1);
						if ( (LA481_0==CURRENT_VK||LA481_0==FOLLOWING_VK||LA481_0==PRECEDING_VK||LA481_0==UNBOUNDED_VK) ) {
							alt481=1;
						}

						switch (alt481) {
						case 1 :
							// PLSQLPrinter.g:2000:18: windowing_elements
							{
							pushFollow(FOLLOW_windowing_elements_in_windowing_clause20556);
							windowing_elements();
							state._fsp--;

							}
							break;

						default :
							if ( cnt481 >= 1 ) break loop481;
							EarlyExitException eee = new EarlyExitException(481, input);
							throw eee;
						}
						cnt481++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2003:5: -> template( \"not implemented: windowing_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: windowing_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "windowing_clause"


	public static class windowing_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "windowing_elements"
	// PLSQLPrinter.g:2006:1: windowing_elements : ( ^( UNBOUNDED_VK PRECEDING_VK ) -> template( \"not implemented: windowing_elements\"| ^( CURRENT_VK ROW_VK ) -> template( \"not implemented: windowing_elements\"| ^( ( PRECEDING_VK | FOLLOWING_VK ) expression ) -> template( \"not implemented: windowing_elements\");
	public final PLSQLPrinter.windowing_elements_return windowing_elements() throws RecognitionException {
		PLSQLPrinter.windowing_elements_return retval = new PLSQLPrinter.windowing_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2007:5: ( ^( UNBOUNDED_VK PRECEDING_VK ) -> template( \"not implemented: windowing_elements\"| ^( CURRENT_VK ROW_VK ) -> template( \"not implemented: windowing_elements\"| ^( ( PRECEDING_VK | FOLLOWING_VK ) expression ) -> template( \"not implemented: windowing_elements\")
			int alt484=3;
			switch ( input.LA(1) ) {
			case UNBOUNDED_VK:
				{
				alt484=1;
				}
				break;
			case CURRENT_VK:
				{
				alt484=2;
				}
				break;
			case FOLLOWING_VK:
			case PRECEDING_VK:
				{
				alt484=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 484, 0, input);
				throw nvae;
			}
			switch (alt484) {
				case 1 :
					// PLSQLPrinter.g:2007:10: ^( UNBOUNDED_VK PRECEDING_VK )
					{
					match(input,UNBOUNDED_VK,FOLLOW_UNBOUNDED_VK_in_windowing_elements20616); 
					match(input, Token.DOWN, null); 
					match(input,PRECEDING_VK,FOLLOW_PRECEDING_VK_in_windowing_elements20618); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2008:5: -> template( \"not implemented: windowing_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: windowing_elements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2009:10: ^( CURRENT_VK ROW_VK )
					{
					match(input,CURRENT_VK,FOLLOW_CURRENT_VK_in_windowing_elements20645); 
					match(input, Token.DOWN, null); 
					match(input,ROW_VK,FOLLOW_ROW_VK_in_windowing_elements20647); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2010:5: -> template( \"not implemented: windowing_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: windowing_elements");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:2011:10: ^( ( PRECEDING_VK | FOLLOWING_VK ) expression )
					{
					// PLSQLPrinter.g:2011:12: ( PRECEDING_VK | FOLLOWING_VK )
					int alt483=2;
					int LA483_0 = input.LA(1);
					if ( (LA483_0==PRECEDING_VK) ) {
						alt483=1;
					}
					else if ( (LA483_0==FOLLOWING_VK) ) {
						alt483=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 483, 0, input);
						throw nvae;
					}

					switch (alt483) {
						case 1 :
							// PLSQLPrinter.g:2011:13: PRECEDING_VK
							{
							match(input,PRECEDING_VK,FOLLOW_PRECEDING_VK_in_windowing_elements20675); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2011:26: FOLLOWING_VK
							{
							match(input,FOLLOWING_VK,FOLLOW_FOLLOWING_VK_in_windowing_elements20677); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_windowing_elements20680);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2012:5: -> template( \"not implemented: windowing_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: windowing_elements");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "windowing_elements"


	public static class using_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "using_clause"
	// PLSQLPrinter.g:2015:1: using_clause : ^( PLSQL_NON_RESERVED_USING ( using_element )+ ) -> template( \"not implemented: using_clause\";
	public final PLSQLPrinter.using_clause_return using_clause() throws RecognitionException {
		PLSQLPrinter.using_clause_return retval = new PLSQLPrinter.using_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2016:5: ( ^( PLSQL_NON_RESERVED_USING ( using_element )+ ) -> template( \"not implemented: using_clause\")
			// PLSQLPrinter.g:2016:10: ^( PLSQL_NON_RESERVED_USING ( using_element )+ )
			{
			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_using_clause20716); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2016:37: ( using_element )+
			int cnt485=0;
			loop485:
			while (true) {
				int alt485=2;
				int LA485_0 = input.LA(1);
				if ( (LA485_0==ASTERISK||LA485_0==ELEMENT) ) {
					alt485=1;
				}

				switch (alt485) {
				case 1 :
					// PLSQLPrinter.g:2016:37: using_element
					{
					pushFollow(FOLLOW_using_element_in_using_clause20718);
					using_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt485 >= 1 ) break loop485;
					EarlyExitException eee = new EarlyExitException(485, input);
					throw eee;
				}
				cnt485++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2017:5: -> template( \"not implemented: using_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: using_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "using_clause"


	public static class using_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "using_element"
	// PLSQLPrinter.g:2020:1: using_element : ( ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? ) -> template( \"not implemented: using_element\"| ASTERISK -> template( \"not implemented: using_element\");
	public final PLSQLPrinter.using_element_return using_element() throws RecognitionException {
		PLSQLPrinter.using_element_return retval = new PLSQLPrinter.using_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2021:5: ( ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? ) -> template( \"not implemented: using_element\"| ASTERISK -> template( \"not implemented: using_element\")
			int alt489=2;
			int LA489_0 = input.LA(1);
			if ( (LA489_0==ELEMENT) ) {
				alt489=1;
			}
			else if ( (LA489_0==ASTERISK) ) {
				alt489=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 489, 0, input);
				throw nvae;
			}

			switch (alt489) {
				case 1 :
					// PLSQLPrinter.g:2021:10: ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? )
					{
					match(input,ELEMENT,FOLLOW_ELEMENT_in_using_element20755); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2021:20: ( SQL92_RESERVED_IN )?
					int alt486=2;
					int LA486_0 = input.LA(1);
					if ( (LA486_0==SQL92_RESERVED_IN) ) {
						alt486=1;
					}
					switch (alt486) {
						case 1 :
							// PLSQLPrinter.g:2021:20: SQL92_RESERVED_IN
							{
							match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_using_element20757); 
							}
							break;

					}

					// PLSQLPrinter.g:2021:39: ( OUT_VK )?
					int alt487=2;
					int LA487_0 = input.LA(1);
					if ( (LA487_0==OUT_VK) ) {
						alt487=1;
					}
					switch (alt487) {
						case 1 :
							// PLSQLPrinter.g:2021:39: OUT_VK
							{
							match(input,OUT_VK,FOLLOW_OUT_VK_in_using_element20760); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_using_element20763);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:2021:58: ( alias )?
					int alt488=2;
					int LA488_0 = input.LA(1);
					if ( (LA488_0==COLUMN_ALIAS||LA488_0==TABLE_ALIAS) ) {
						alt488=1;
					}
					switch (alt488) {
						case 1 :
							// PLSQLPrinter.g:2021:58: alias
							{
							pushFollow(FOLLOW_alias_in_using_element20765);
							alias();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2022:5: -> template( \"not implemented: using_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: using_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2023:10: ASTERISK
					{
					match(input,ASTERISK,FOLLOW_ASTERISK_in_using_element20792); 
					// TEMPLATE REWRITE
					// 2024:5: -> template( \"not implemented: using_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: using_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "using_element"


	public static class collect_order_by_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "collect_order_by_part"
	// PLSQLPrinter.g:2027:1: collect_order_by_part : ^( SQL92_RESERVED_ORDER expression ) -> template( \"not implemented: collect_order_by_part\";
	public final PLSQLPrinter.collect_order_by_part_return collect_order_by_part() throws RecognitionException {
		PLSQLPrinter.collect_order_by_part_return retval = new PLSQLPrinter.collect_order_by_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2028:5: ( ^( SQL92_RESERVED_ORDER expression ) -> template( \"not implemented: collect_order_by_part\")
			// PLSQLPrinter.g:2028:10: ^( SQL92_RESERVED_ORDER expression )
			{
			match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_collect_order_by_part20827); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_collect_order_by_part20829);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2029:5: -> template( \"not implemented: collect_order_by_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: collect_order_by_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "collect_order_by_part"


	public static class within_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "within_clause"
	// PLSQLPrinter.g:2032:1: within_clause : ^( WITHIN_VK order_by_clause ) -> template( \"not implemented: within_clause\";
	public final PLSQLPrinter.within_clause_return within_clause() throws RecognitionException {
		PLSQLPrinter.within_clause_return retval = new PLSQLPrinter.within_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2033:5: ( ^( WITHIN_VK order_by_clause ) -> template( \"not implemented: within_clause\")
			// PLSQLPrinter.g:2033:10: ^( WITHIN_VK order_by_clause )
			{
			match(input,WITHIN_VK,FOLLOW_WITHIN_VK_in_within_clause20865); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_order_by_clause_in_within_clause20867);
			order_by_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2034:5: -> template( \"not implemented: within_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: within_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "within_clause"


	public static class cost_matrix_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cost_matrix_clause"
	// PLSQLPrinter.g:2037:1: cost_matrix_clause : ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) ) -> template( \"not implemented: cost_matrix_clause\";
	public final PLSQLPrinter.cost_matrix_clause_return cost_matrix_clause() throws RecognitionException {
		PLSQLPrinter.cost_matrix_clause_return retval = new PLSQLPrinter.cost_matrix_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2038:5: ( ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) ) -> template( \"not implemented: cost_matrix_clause\")
			// PLSQLPrinter.g:2038:10: ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) )
			{
			match(input,COST_VK,FOLLOW_COST_VK_in_cost_matrix_clause20903); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2039:13: ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list )
			int alt492=2;
			int LA492_0 = input.LA(1);
			if ( (LA492_0==PLSQL_NON_RESERVED_MODEL) ) {
				alt492=1;
			}
			else if ( (LA492_0==COST_CLASS_NAME) ) {
				alt492=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 492, 0, input);
				throw nvae;
			}

			switch (alt492) {
				case 1 :
					// PLSQLPrinter.g:2039:18: PLSQL_NON_RESERVED_MODEL ( AUTO_VK )?
					{
					match(input,PLSQL_NON_RESERVED_MODEL,FOLLOW_PLSQL_NON_RESERVED_MODEL_in_cost_matrix_clause20922); 
					// PLSQLPrinter.g:2039:43: ( AUTO_VK )?
					int alt490=2;
					int LA490_0 = input.LA(1);
					if ( (LA490_0==AUTO_VK) ) {
						alt490=1;
					}
					switch (alt490) {
						case 1 :
							// PLSQLPrinter.g:2039:43: AUTO_VK
							{
							match(input,AUTO_VK,FOLLOW_AUTO_VK_in_cost_matrix_clause20924); 
							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:2040:18: ( cost_class_name )+ expression_list
					{
					// PLSQLPrinter.g:2040:18: ( cost_class_name )+
					int cnt491=0;
					loop491:
					while (true) {
						int alt491=2;
						int LA491_0 = input.LA(1);
						if ( (LA491_0==COST_CLASS_NAME) ) {
							alt491=1;
						}

						switch (alt491) {
						case 1 :
							// PLSQLPrinter.g:2040:18: cost_class_name
							{
							pushFollow(FOLLOW_cost_class_name_in_cost_matrix_clause20944);
							cost_class_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt491 >= 1 ) break loop491;
							EarlyExitException eee = new EarlyExitException(491, input);
							throw eee;
						}
						cnt491++;
					}

					pushFollow(FOLLOW_expression_list_in_cost_matrix_clause20947);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2043:5: -> template( \"not implemented: cost_matrix_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: cost_matrix_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cost_matrix_clause"


	public static class xml_passing_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_passing_clause"
	// PLSQLPrinter.g:2046:1: xml_passing_clause : ^( PASSING_VK ( VALUE_VK )? expression ( alias )? ( expression ( alias )? )? ) -> template( \"not implemented: xml_passing_clause\";
	public final PLSQLPrinter.xml_passing_clause_return xml_passing_clause() throws RecognitionException {
		PLSQLPrinter.xml_passing_clause_return retval = new PLSQLPrinter.xml_passing_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2047:5: ( ^( PASSING_VK ( VALUE_VK )? expression ( alias )? ( expression ( alias )? )? ) -> template( \"not implemented: xml_passing_clause\")
			// PLSQLPrinter.g:2047:10: ^( PASSING_VK ( VALUE_VK )? expression ( alias )? ( expression ( alias )? )? )
			{
			match(input,PASSING_VK,FOLLOW_PASSING_VK_in_xml_passing_clause21006); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2047:23: ( VALUE_VK )?
			int alt493=2;
			int LA493_0 = input.LA(1);
			if ( (LA493_0==VALUE_VK) ) {
				alt493=1;
			}
			switch (alt493) {
				case 1 :
					// PLSQLPrinter.g:2047:23: VALUE_VK
					{
					match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xml_passing_clause21008); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_xml_passing_clause21011);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:2047:44: ( alias )?
			int alt494=2;
			int LA494_0 = input.LA(1);
			if ( (LA494_0==COLUMN_ALIAS||LA494_0==TABLE_ALIAS) ) {
				alt494=1;
			}
			switch (alt494) {
				case 1 :
					// PLSQLPrinter.g:2047:44: alias
					{
					pushFollow(FOLLOW_alias_in_xml_passing_clause21013);
					alias();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2047:51: ( expression ( alias )? )?
			int alt496=2;
			int LA496_0 = input.LA(1);
			if ( (LA496_0==EXPR||LA496_0==LOGIC_EXPR) ) {
				alt496=1;
			}
			switch (alt496) {
				case 1 :
					// PLSQLPrinter.g:2047:52: expression ( alias )?
					{
					pushFollow(FOLLOW_expression_in_xml_passing_clause21017);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:2047:63: ( alias )?
					int alt495=2;
					int LA495_0 = input.LA(1);
					if ( (LA495_0==COLUMN_ALIAS||LA495_0==TABLE_ALIAS) ) {
						alt495=1;
					}
					switch (alt495) {
						case 1 :
							// PLSQLPrinter.g:2047:63: alias
							{
							pushFollow(FOLLOW_alias_in_xml_passing_clause21019);
							alias();
							state._fsp--;

							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2048:5: -> template( \"not implemented: xml_passing_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_passing_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_passing_clause"


	public static class xml_attributes_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_attributes_clause"
	// PLSQLPrinter.g:2051:1: xml_attributes_clause : ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? ( xml_multiuse_expression_element )+ ) -> template( \"not implemented: xml_attributes_clause\";
	public final PLSQLPrinter.xml_attributes_clause_return xml_attributes_clause() throws RecognitionException {
		PLSQLPrinter.xml_attributes_clause_return retval = new PLSQLPrinter.xml_attributes_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2052:5: ( ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? ( xml_multiuse_expression_element )+ ) -> template( \"not implemented: xml_attributes_clause\")
			// PLSQLPrinter.g:2052:10: ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? ( xml_multiuse_expression_element )+ )
			{
			match(input,XMLATTRIBUTES_VK,FOLLOW_XMLATTRIBUTES_VK_in_xml_attributes_clause21058); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2053:13: ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )?
			int alt497=3;
			int LA497_0 = input.LA(1);
			if ( (LA497_0==ENTITYESCAPING_VK) ) {
				alt497=1;
			}
			else if ( (LA497_0==NOENTITYESCAPING_VK) ) {
				alt497=2;
			}
			switch (alt497) {
				case 1 :
					// PLSQLPrinter.g:2053:14: ENTITYESCAPING_VK
					{
					match(input,ENTITYESCAPING_VK,FOLLOW_ENTITYESCAPING_VK_in_xml_attributes_clause21073); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2053:32: NOENTITYESCAPING_VK
					{
					match(input,NOENTITYESCAPING_VK,FOLLOW_NOENTITYESCAPING_VK_in_xml_attributes_clause21075); 
					}
					break;

			}

			// PLSQLPrinter.g:2054:13: ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )?
			int alt498=3;
			int LA498_0 = input.LA(1);
			if ( (LA498_0==SCHEMACHECK_VK) ) {
				alt498=1;
			}
			else if ( (LA498_0==NOSCHEMACHECK_VK) ) {
				alt498=2;
			}
			switch (alt498) {
				case 1 :
					// PLSQLPrinter.g:2054:14: SCHEMACHECK_VK
					{
					match(input,SCHEMACHECK_VK,FOLLOW_SCHEMACHECK_VK_in_xml_attributes_clause21092); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2054:29: NOSCHEMACHECK_VK
					{
					match(input,NOSCHEMACHECK_VK,FOLLOW_NOSCHEMACHECK_VK_in_xml_attributes_clause21094); 
					}
					break;

			}

			// PLSQLPrinter.g:2055:13: ( xml_multiuse_expression_element )+
			int cnt499=0;
			loop499:
			while (true) {
				int alt499=2;
				int LA499_0 = input.LA(1);
				if ( (LA499_0==XML_ELEMENT) ) {
					alt499=1;
				}

				switch (alt499) {
				case 1 :
					// PLSQLPrinter.g:2055:13: xml_multiuse_expression_element
					{
					pushFollow(FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause21110);
					xml_multiuse_expression_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt499 >= 1 ) break loop499;
					EarlyExitException eee = new EarlyExitException(499, input);
					throw eee;
				}
				cnt499++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2057:5: -> template( \"not implemented: xml_attributes_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_attributes_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_attributes_clause"


	public static class xml_namespaces_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_namespaces_clause"
	// PLSQLPrinter.g:2060:1: xml_namespaces_clause : ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? ) -> template( \"not implemented: xml_namespaces_clause\";
	public final PLSQLPrinter.xml_namespaces_clause_return xml_namespaces_clause() throws RecognitionException {
		PLSQLPrinter.xml_namespaces_clause_return retval = new PLSQLPrinter.xml_namespaces_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2061:5: ( ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? ) -> template( \"not implemented: xml_namespaces_clause\")
			// PLSQLPrinter.g:2061:10: ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? )
			{
			match(input,XMLNAMESPACES_VK,FOLLOW_XMLNAMESPACES_VK_in_xml_namespaces_clause21156); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:2062:13: ( expression ( alias )? )*
				loop501:
				while (true) {
					int alt501=2;
					int LA501_0 = input.LA(1);
					if ( (LA501_0==EXPR||LA501_0==LOGIC_EXPR) ) {
						alt501=1;
					}

					switch (alt501) {
					case 1 :
						// PLSQLPrinter.g:2062:14: expression ( alias )?
						{
						pushFollow(FOLLOW_expression_in_xml_namespaces_clause21171);
						expression();
						state._fsp--;

						// PLSQLPrinter.g:2062:25: ( alias )?
						int alt500=2;
						int LA500_0 = input.LA(1);
						if ( (LA500_0==COLUMN_ALIAS||LA500_0==TABLE_ALIAS) ) {
							alt500=1;
						}
						switch (alt500) {
							case 1 :
								// PLSQLPrinter.g:2062:25: alias
								{
								pushFollow(FOLLOW_alias_in_xml_namespaces_clause21173);
								alias();
								state._fsp--;

								}
								break;

						}

						}
						break;

					default :
						break loop501;
					}
				}

				// PLSQLPrinter.g:2062:34: ( xml_general_default_part )?
				int alt502=2;
				int LA502_0 = input.LA(1);
				if ( (LA502_0==SQL92_RESERVED_DEFAULT) ) {
					alt502=1;
				}
				switch (alt502) {
					case 1 :
						// PLSQLPrinter.g:2062:34: xml_general_default_part
						{
						pushFollow(FOLLOW_xml_general_default_part_in_xml_namespaces_clause21178);
						xml_general_default_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 2064:5: -> template( \"not implemented: xml_namespaces_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_namespaces_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_namespaces_clause"


	public static class xml_table_column_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_table_column"
	// PLSQLPrinter.g:2067:1: xml_table_column : ^( XML_COLUMN xml_column_name ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? ) ) -> template( \"not implemented: xml_table_column\";
	public final PLSQLPrinter.xml_table_column_return xml_table_column() throws RecognitionException {
		PLSQLPrinter.xml_table_column_return retval = new PLSQLPrinter.xml_table_column_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2068:5: ( ^( XML_COLUMN xml_column_name ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? ) ) -> template( \"not implemented: xml_table_column\")
			// PLSQLPrinter.g:2068:10: ^( XML_COLUMN xml_column_name ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? ) )
			{
			match(input,XML_COLUMN,FOLLOW_XML_COLUMN_in_xml_table_column21224); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_xml_column_name_in_xml_table_column21226);
			xml_column_name();
			state._fsp--;

			// PLSQLPrinter.g:2068:39: ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? )
			int alt505=2;
			int LA505_0 = input.LA(1);
			if ( (LA505_0==ORDINALITY_VK) ) {
				alt505=1;
			}
			else if ( (LA505_0==CUSTOM_TYPE||LA505_0==INTERVAL_DATATYPE||LA505_0==NATIVE_DATATYPE) ) {
				alt505=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 505, 0, input);
				throw nvae;
			}

			switch (alt505) {
				case 1 :
					// PLSQLPrinter.g:2068:40: ORDINALITY_VK
					{
					match(input,ORDINALITY_VK,FOLLOW_ORDINALITY_VK_in_xml_table_column21229); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2068:54: type_spec ( expression )? ( xml_general_default_part )?
					{
					pushFollow(FOLLOW_type_spec_in_xml_table_column21231);
					type_spec();
					state._fsp--;

					// PLSQLPrinter.g:2068:64: ( expression )?
					int alt503=2;
					int LA503_0 = input.LA(1);
					if ( (LA503_0==EXPR||LA503_0==LOGIC_EXPR) ) {
						alt503=1;
					}
					switch (alt503) {
						case 1 :
							// PLSQLPrinter.g:2068:64: expression
							{
							pushFollow(FOLLOW_expression_in_xml_table_column21233);
							expression();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2068:76: ( xml_general_default_part )?
					int alt504=2;
					int LA504_0 = input.LA(1);
					if ( (LA504_0==SQL92_RESERVED_DEFAULT) ) {
						alt504=1;
					}
					switch (alt504) {
						case 1 :
							// PLSQLPrinter.g:2068:76: xml_general_default_part
							{
							pushFollow(FOLLOW_xml_general_default_part_in_xml_table_column21236);
							xml_general_default_part();
							state._fsp--;

							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2069:5: -> template( \"not implemented: xml_table_column\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_table_column");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_table_column"


	public static class xml_general_default_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_general_default_part"
	// PLSQLPrinter.g:2072:1: xml_general_default_part : ^( SQL92_RESERVED_DEFAULT expression ) -> template( \"not implemented: xml_general_default_part\";
	public final PLSQLPrinter.xml_general_default_part_return xml_general_default_part() throws RecognitionException {
		PLSQLPrinter.xml_general_default_part_return retval = new PLSQLPrinter.xml_general_default_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2073:5: ( ^( SQL92_RESERVED_DEFAULT expression ) -> template( \"not implemented: xml_general_default_part\")
			// PLSQLPrinter.g:2073:10: ^( SQL92_RESERVED_DEFAULT expression )
			{
			match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_xml_general_default_part21275); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xml_general_default_part21277);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2074:5: -> template( \"not implemented: xml_general_default_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_general_default_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_general_default_part"


	public static class xml_multiuse_expression_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_multiuse_expression_element"
	// PLSQLPrinter.g:2077:1: xml_multiuse_expression_element : ^( XML_ELEMENT expression ( xml_alias )? ) -> template( \"not implemented: xml_multiuse_expression_element\";
	public final PLSQLPrinter.xml_multiuse_expression_element_return xml_multiuse_expression_element() throws RecognitionException {
		PLSQLPrinter.xml_multiuse_expression_element_return retval = new PLSQLPrinter.xml_multiuse_expression_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2078:5: ( ^( XML_ELEMENT expression ( xml_alias )? ) -> template( \"not implemented: xml_multiuse_expression_element\")
			// PLSQLPrinter.g:2078:10: ^( XML_ELEMENT expression ( xml_alias )? )
			{
			match(input,XML_ELEMENT,FOLLOW_XML_ELEMENT_in_xml_multiuse_expression_element21313); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xml_multiuse_expression_element21315);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:2078:35: ( xml_alias )?
			int alt506=2;
			int LA506_0 = input.LA(1);
			if ( (LA506_0==XML_ALIAS) ) {
				alt506=1;
			}
			switch (alt506) {
				case 1 :
					// PLSQLPrinter.g:2078:35: xml_alias
					{
					pushFollow(FOLLOW_xml_alias_in_xml_multiuse_expression_element21317);
					xml_alias();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2079:5: -> template( \"not implemented: xml_multiuse_expression_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_multiuse_expression_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_multiuse_expression_element"


	public static class xml_alias_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_alias"
	// PLSQLPrinter.g:2082:1: xml_alias : ( ^( XML_ALIAS ID ) -> template( \"not implemented: xml_alias\"| ^( XML_ALIAS ^( EVALNAME_VK expression ) ) -> template( \"not implemented: xml_alias\");
	public final PLSQLPrinter.xml_alias_return xml_alias() throws RecognitionException {
		PLSQLPrinter.xml_alias_return retval = new PLSQLPrinter.xml_alias_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2083:5: ( ^( XML_ALIAS ID ) -> template( \"not implemented: xml_alias\"| ^( XML_ALIAS ^( EVALNAME_VK expression ) ) -> template( \"not implemented: xml_alias\")
			int alt507=2;
			int LA507_0 = input.LA(1);
			if ( (LA507_0==XML_ALIAS) ) {
				int LA507_1 = input.LA(2);
				if ( (LA507_1==DOWN) ) {
					int LA507_2 = input.LA(3);
					if ( (LA507_2==ID) ) {
						alt507=1;
					}
					else if ( (LA507_2==EVALNAME_VK) ) {
						alt507=2;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 507, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 507, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 507, 0, input);
				throw nvae;
			}

			switch (alt507) {
				case 1 :
					// PLSQLPrinter.g:2083:10: ^( XML_ALIAS ID )
					{
					match(input,XML_ALIAS,FOLLOW_XML_ALIAS_in_xml_alias21354); 
					match(input, Token.DOWN, null); 
					match(input,ID,FOLLOW_ID_in_xml_alias21356); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2084:5: -> template( \"not implemented: xml_alias\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: xml_alias");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2085:10: ^( XML_ALIAS ^( EVALNAME_VK expression ) )
					{
					match(input,XML_ALIAS,FOLLOW_XML_ALIAS_in_xml_alias21383); 
					match(input, Token.DOWN, null); 
					match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_xml_alias21386); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_xml_alias21388);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2086:5: -> template( \"not implemented: xml_alias\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: xml_alias");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_alias"


	public static class xml_param_version_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_param_version_part"
	// PLSQLPrinter.g:2089:1: xml_param_version_part : ^( VERSION_VK ( NO_VK VALUE_VK | expression ) ) -> template( \"not implemented: xml_param_version_part\";
	public final PLSQLPrinter.xml_param_version_part_return xml_param_version_part() throws RecognitionException {
		PLSQLPrinter.xml_param_version_part_return retval = new PLSQLPrinter.xml_param_version_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2090:5: ( ^( VERSION_VK ( NO_VK VALUE_VK | expression ) ) -> template( \"not implemented: xml_param_version_part\")
			// PLSQLPrinter.g:2090:10: ^( VERSION_VK ( NO_VK VALUE_VK | expression ) )
			{
			match(input,VERSION_VK,FOLLOW_VERSION_VK_in_xml_param_version_part21425); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2090:23: ( NO_VK VALUE_VK | expression )
			int alt508=2;
			int LA508_0 = input.LA(1);
			if ( (LA508_0==NO_VK) ) {
				alt508=1;
			}
			else if ( (LA508_0==EXPR||LA508_0==LOGIC_EXPR) ) {
				alt508=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 508, 0, input);
				throw nvae;
			}

			switch (alt508) {
				case 1 :
					// PLSQLPrinter.g:2090:24: NO_VK VALUE_VK
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xml_param_version_part21428); 
					match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xml_param_version_part21430); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2090:39: expression
					{
					pushFollow(FOLLOW_expression_in_xml_param_version_part21432);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2091:5: -> template( \"not implemented: xml_param_version_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_param_version_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_param_version_part"


	public static class xmlroot_param_standalone_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlroot_param_standalone_part"
	// PLSQLPrinter.g:2094:1: xmlroot_param_standalone_part : ^( STANDALONE_VK ( YES_VK | NO_VK ( VALUE_VK )? ) ) -> template( \"not implemented: xmlroot_param_standalone_part\";
	public final PLSQLPrinter.xmlroot_param_standalone_part_return xmlroot_param_standalone_part() throws RecognitionException {
		PLSQLPrinter.xmlroot_param_standalone_part_return retval = new PLSQLPrinter.xmlroot_param_standalone_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2095:5: ( ^( STANDALONE_VK ( YES_VK | NO_VK ( VALUE_VK )? ) ) -> template( \"not implemented: xmlroot_param_standalone_part\")
			// PLSQLPrinter.g:2095:10: ^( STANDALONE_VK ( YES_VK | NO_VK ( VALUE_VK )? ) )
			{
			match(input,STANDALONE_VK,FOLLOW_STANDALONE_VK_in_xmlroot_param_standalone_part21469); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2095:26: ( YES_VK | NO_VK ( VALUE_VK )? )
			int alt510=2;
			int LA510_0 = input.LA(1);
			if ( (LA510_0==YES_VK) ) {
				alt510=1;
			}
			else if ( (LA510_0==NO_VK) ) {
				alt510=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 510, 0, input);
				throw nvae;
			}

			switch (alt510) {
				case 1 :
					// PLSQLPrinter.g:2095:27: YES_VK
					{
					match(input,YES_VK,FOLLOW_YES_VK_in_xmlroot_param_standalone_part21472); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2095:34: NO_VK ( VALUE_VK )?
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xmlroot_param_standalone_part21474); 
					// PLSQLPrinter.g:2095:40: ( VALUE_VK )?
					int alt509=2;
					int LA509_0 = input.LA(1);
					if ( (LA509_0==VALUE_VK) ) {
						alt509=1;
					}
					switch (alt509) {
						case 1 :
							// PLSQLPrinter.g:2095:40: VALUE_VK
							{
							match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xmlroot_param_standalone_part21476); 
							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2096:5: -> template( \"not implemented: xmlroot_param_standalone_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xmlroot_param_standalone_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlroot_param_standalone_part"


	public static class xmlserialize_param_enconding_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlserialize_param_enconding_part"
	// PLSQLPrinter.g:2099:1: xmlserialize_param_enconding_part : ^( ENCODING_VK expression ) -> template( \"not implemented: xmlserialize_param_enconding_part\";
	public final PLSQLPrinter.xmlserialize_param_enconding_part_return xmlserialize_param_enconding_part() throws RecognitionException {
		PLSQLPrinter.xmlserialize_param_enconding_part_return retval = new PLSQLPrinter.xmlserialize_param_enconding_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2100:5: ( ^( ENCODING_VK expression ) -> template( \"not implemented: xmlserialize_param_enconding_part\")
			// PLSQLPrinter.g:2100:10: ^( ENCODING_VK expression )
			{
			match(input,ENCODING_VK,FOLLOW_ENCODING_VK_in_xmlserialize_param_enconding_part21514); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xmlserialize_param_enconding_part21516);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2101:5: -> template( \"not implemented: xmlserialize_param_enconding_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xmlserialize_param_enconding_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlserialize_param_enconding_part"


	public static class xmlserialize_param_ident_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlserialize_param_ident_part"
	// PLSQLPrinter.g:2104:1: xmlserialize_param_ident_part : ( NO_VK INDENT_VK -> template( \"not implemented: xmlserialize_param_ident_part\"| ^( INDENT_VK ( expression )? ) -> template( \"not implemented: xmlserialize_param_ident_part\");
	public final PLSQLPrinter.xmlserialize_param_ident_part_return xmlserialize_param_ident_part() throws RecognitionException {
		PLSQLPrinter.xmlserialize_param_ident_part_return retval = new PLSQLPrinter.xmlserialize_param_ident_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2105:5: ( NO_VK INDENT_VK -> template( \"not implemented: xmlserialize_param_ident_part\"| ^( INDENT_VK ( expression )? ) -> template( \"not implemented: xmlserialize_param_ident_part\")
			int alt512=2;
			int LA512_0 = input.LA(1);
			if ( (LA512_0==NO_VK) ) {
				alt512=1;
			}
			else if ( (LA512_0==INDENT_VK) ) {
				alt512=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 512, 0, input);
				throw nvae;
			}

			switch (alt512) {
				case 1 :
					// PLSQLPrinter.g:2105:10: NO_VK INDENT_VK
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xmlserialize_param_ident_part21551); 
					match(input,INDENT_VK,FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part21553); 
					// TEMPLATE REWRITE
					// 2106:5: -> template( \"not implemented: xmlserialize_param_ident_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: xmlserialize_param_ident_part");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2107:10: ^( INDENT_VK ( expression )? )
					{
					match(input,INDENT_VK,FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part21579); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:2107:22: ( expression )?
						int alt511=2;
						int LA511_0 = input.LA(1);
						if ( (LA511_0==EXPR||LA511_0==LOGIC_EXPR) ) {
							alt511=1;
						}
						switch (alt511) {
							case 1 :
								// PLSQLPrinter.g:2107:22: expression
								{
								pushFollow(FOLLOW_expression_in_xmlserialize_param_ident_part21581);
								expression();
								state._fsp--;

								}
								break;

						}

						match(input, Token.UP, null); 
					}

					// TEMPLATE REWRITE
					// 2108:5: -> template( \"not implemented: xmlserialize_param_ident_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: xmlserialize_param_ident_part");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlserialize_param_ident_part"


	public static class partition_extension_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "partition_extension_clause"
	// PLSQLPrinter.g:2115:1: partition_extension_clause : ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list ) -> template( \"not implemented: partition_extension_clause\";
	public final PLSQLPrinter.partition_extension_clause_return partition_extension_clause() throws RecognitionException {
		PLSQLPrinter.partition_extension_clause_return retval = new PLSQLPrinter.partition_extension_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2116:5: ( ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list ) -> template( \"not implemented: partition_extension_clause\")
			// PLSQLPrinter.g:2116:10: ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list )
			{
			// PLSQLPrinter.g:2116:12: ( SUBPARTITION_VK | PARTITION_VK )
			int alt513=2;
			int LA513_0 = input.LA(1);
			if ( (LA513_0==SUBPARTITION_VK) ) {
				alt513=1;
			}
			else if ( (LA513_0==PARTITION_VK) ) {
				alt513=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 513, 0, input);
				throw nvae;
			}

			switch (alt513) {
				case 1 :
					// PLSQLPrinter.g:2116:13: SUBPARTITION_VK
					{
					match(input,SUBPARTITION_VK,FOLLOW_SUBPARTITION_VK_in_partition_extension_clause21623); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2116:29: PARTITION_VK
					{
					match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_partition_extension_clause21625); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_list_in_partition_extension_clause21628);
			expression_list();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2117:5: -> template( \"not implemented: partition_extension_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: partition_extension_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_extension_clause"


	public static class alias_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alias"
	// PLSQLPrinter.g:2120:1: alias : ( ^( COLUMN_ALIAS ( char_set_name )? ID ) -> column_alias(name=$ID.text)| ^( TABLE_ALIAS ( char_set_name )? ID ) -> table_alias(name=$ID.text));
	public final PLSQLPrinter.alias_return alias() throws RecognitionException {
		PLSQLPrinter.alias_return retval = new PLSQLPrinter.alias_return();
		retval.start = input.LT(1);

		CommonTree ID249=null;
		CommonTree ID250=null;

		try {
			// PLSQLPrinter.g:2121:5: ( ^( COLUMN_ALIAS ( char_set_name )? ID ) -> column_alias(name=$ID.text)| ^( TABLE_ALIAS ( char_set_name )? ID ) -> table_alias(name=$ID.text))
			int alt516=2;
			int LA516_0 = input.LA(1);
			if ( (LA516_0==COLUMN_ALIAS) ) {
				alt516=1;
			}
			else if ( (LA516_0==TABLE_ALIAS) ) {
				alt516=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 516, 0, input);
				throw nvae;
			}

			switch (alt516) {
				case 1 :
					// PLSQLPrinter.g:2121:10: ^( COLUMN_ALIAS ( char_set_name )? ID )
					{
					match(input,COLUMN_ALIAS,FOLLOW_COLUMN_ALIAS_in_alias21664); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2121:25: ( char_set_name )?
					int alt514=2;
					int LA514_0 = input.LA(1);
					if ( (LA514_0==CHAR_SET_NAME) ) {
						alt514=1;
					}
					switch (alt514) {
						case 1 :
							// PLSQLPrinter.g:2121:25: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_alias21666);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					ID249=(CommonTree)match(input,ID,FOLLOW_ID_in_alias21669); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2122:5: -> column_alias(name=$ID.text)
					{
						retval.st = templateLib.getInstanceOf("column_alias",new STAttrMap().put("name", (ID249!=null?ID249.getText():null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2123:10: ^( TABLE_ALIAS ( char_set_name )? ID )
					{
					match(input,TABLE_ALIAS,FOLLOW_TABLE_ALIAS_in_alias21697); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2123:24: ( char_set_name )?
					int alt515=2;
					int LA515_0 = input.LA(1);
					if ( (LA515_0==CHAR_SET_NAME) ) {
						alt515=1;
					}
					switch (alt515) {
						case 1 :
							// PLSQLPrinter.g:2123:24: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_alias21699);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					ID250=(CommonTree)match(input,ID,FOLLOW_ID_in_alias21702); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2124:5: -> table_alias(name=$ID.text)
					{
						retval.st = templateLib.getInstanceOf("table_alias",new STAttrMap().put("name", (ID250!=null?ID250.getText():null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alias"


	public static class where_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "where_clause"
	// PLSQLPrinter.g:2127:1: where_clause : ^( SQL92_RESERVED_WHERE expression ) -> where_clause(expression=$expression.st);
	public final PLSQLPrinter.where_clause_return where_clause() throws RecognitionException {
		PLSQLPrinter.where_clause_return retval = new PLSQLPrinter.where_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression251 =null;

		try {
			// PLSQLPrinter.g:2128:5: ( ^( SQL92_RESERVED_WHERE expression ) -> where_clause(expression=$expression.st))
			// PLSQLPrinter.g:2128:10: ^( SQL92_RESERVED_WHERE expression )
			{
			match(input,SQL92_RESERVED_WHERE,FOLLOW_SQL92_RESERVED_WHERE_in_where_clause21739); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_where_clause21741);
			expression251=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2129:5: -> where_clause(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("where_clause",new STAttrMap().put("expression", (expression251!=null?((StringTemplate)expression251.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "where_clause"


	public static class into_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "into_clause"
	// PLSQLPrinter.g:2132:1: into_clause : ( ^( SQL92_RESERVED_INTO (elements+= general_element )+ ) -> into_clause(is_bulk_collect=falsegeneral_elements=$elements)| ^( BULK_VK (elements+= general_element )+ ) -> into_clause(is_bulk_collect=truegeneral_elements=$elements));
	public final PLSQLPrinter.into_clause_return into_clause() throws RecognitionException {
		PLSQLPrinter.into_clause_return retval = new PLSQLPrinter.into_clause_return();
		retval.start = input.LT(1);

		List<Object> list_elements=null;
		RuleReturnScope elements = null;
		try {
			// PLSQLPrinter.g:2133:5: ( ^( SQL92_RESERVED_INTO (elements+= general_element )+ ) -> into_clause(is_bulk_collect=falsegeneral_elements=$elements)| ^( BULK_VK (elements+= general_element )+ ) -> into_clause(is_bulk_collect=truegeneral_elements=$elements))
			int alt519=2;
			int LA519_0 = input.LA(1);
			if ( (LA519_0==SQL92_RESERVED_INTO) ) {
				alt519=1;
			}
			else if ( (LA519_0==BULK_VK) ) {
				alt519=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 519, 0, input);
				throw nvae;
			}

			switch (alt519) {
				case 1 :
					// PLSQLPrinter.g:2133:10: ^( SQL92_RESERVED_INTO (elements+= general_element )+ )
					{
					match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_into_clause21778); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2133:40: (elements+= general_element )+
					int cnt517=0;
					loop517:
					while (true) {
						int alt517=2;
						int LA517_0 = input.LA(1);
						if ( (LA517_0==CASCATED_ELEMENT) ) {
							alt517=1;
						}

						switch (alt517) {
						case 1 :
							// PLSQLPrinter.g:2133:40: elements+= general_element
							{
							pushFollow(FOLLOW_general_element_in_into_clause21782);
							elements=general_element();
							state._fsp--;

							if (list_elements==null) list_elements=new ArrayList<Object>();
							list_elements.add(elements.getTemplate());
							}
							break;

						default :
							if ( cnt517 >= 1 ) break loop517;
							EarlyExitException eee = new EarlyExitException(517, input);
							throw eee;
						}
						cnt517++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2134:5: -> into_clause(is_bulk_collect=falsegeneral_elements=$elements)
					{
						retval.st = templateLib.getInstanceOf("into_clause",new STAttrMap().put("is_bulk_collect", false).put("general_elements", list_elements));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2135:10: ^( BULK_VK (elements+= general_element )+ )
					{
					match(input,BULK_VK,FOLLOW_BULK_VK_in_into_clause21817); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2135:28: (elements+= general_element )+
					int cnt518=0;
					loop518:
					while (true) {
						int alt518=2;
						int LA518_0 = input.LA(1);
						if ( (LA518_0==CASCATED_ELEMENT) ) {
							alt518=1;
						}

						switch (alt518) {
						case 1 :
							// PLSQLPrinter.g:2135:28: elements+= general_element
							{
							pushFollow(FOLLOW_general_element_in_into_clause21821);
							elements=general_element();
							state._fsp--;

							if (list_elements==null) list_elements=new ArrayList<Object>();
							list_elements.add(elements.getTemplate());
							}
							break;

						default :
							if ( cnt518 >= 1 ) break loop518;
							EarlyExitException eee = new EarlyExitException(518, input);
							throw eee;
						}
						cnt518++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2136:5: -> into_clause(is_bulk_collect=truegeneral_elements=$elements)
					{
						retval.st = templateLib.getInstanceOf("into_clause",new STAttrMap().put("is_bulk_collect", true).put("general_elements", list_elements));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "into_clause"


	public static class xml_column_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_column_name"
	// PLSQLPrinter.g:2143:1: xml_column_name : ^( XML_COLUMN_NAME ( char_set_name )? ID ) -> template( \"not implemented: xml_column_name\";
	public final PLSQLPrinter.xml_column_name_return xml_column_name() throws RecognitionException {
		PLSQLPrinter.xml_column_name_return retval = new PLSQLPrinter.xml_column_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2144:5: ( ^( XML_COLUMN_NAME ( char_set_name )? ID ) -> template( \"not implemented: xml_column_name\")
			// PLSQLPrinter.g:2144:10: ^( XML_COLUMN_NAME ( char_set_name )? ID )
			{
			match(input,XML_COLUMN_NAME,FOLLOW_XML_COLUMN_NAME_in_xml_column_name21869); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2144:28: ( char_set_name )?
			int alt520=2;
			int LA520_0 = input.LA(1);
			if ( (LA520_0==CHAR_SET_NAME) ) {
				alt520=1;
			}
			switch (alt520) {
				case 1 :
					// PLSQLPrinter.g:2144:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_xml_column_name21871);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_xml_column_name21874); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2145:5: -> template( \"not implemented: xml_column_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_column_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_column_name"


	public static class cost_class_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cost_class_name"
	// PLSQLPrinter.g:2148:1: cost_class_name : ^( COST_CLASS_NAME ( char_set_name )? ID ) -> template( \"not implemented: cost_class_name\";
	public final PLSQLPrinter.cost_class_name_return cost_class_name() throws RecognitionException {
		PLSQLPrinter.cost_class_name_return retval = new PLSQLPrinter.cost_class_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2149:5: ( ^( COST_CLASS_NAME ( char_set_name )? ID ) -> template( \"not implemented: cost_class_name\")
			// PLSQLPrinter.g:2149:10: ^( COST_CLASS_NAME ( char_set_name )? ID )
			{
			match(input,COST_CLASS_NAME,FOLLOW_COST_CLASS_NAME_in_cost_class_name21910); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2149:28: ( char_set_name )?
			int alt521=2;
			int LA521_0 = input.LA(1);
			if ( (LA521_0==CHAR_SET_NAME) ) {
				alt521=1;
			}
			switch (alt521) {
				case 1 :
					// PLSQLPrinter.g:2149:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_cost_class_name21912);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_cost_class_name21915); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2150:5: -> template( \"not implemented: cost_class_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: cost_class_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cost_class_name"


	public static class attribute_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "attribute_name"
	// PLSQLPrinter.g:2153:1: attribute_name : ^( ATTRIBUTE_NAME ( char_set_name )? ID ) -> template( \"not implemented: attribute_name\";
	public final PLSQLPrinter.attribute_name_return attribute_name() throws RecognitionException {
		PLSQLPrinter.attribute_name_return retval = new PLSQLPrinter.attribute_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2154:5: ( ^( ATTRIBUTE_NAME ( char_set_name )? ID ) -> template( \"not implemented: attribute_name\")
			// PLSQLPrinter.g:2154:10: ^( ATTRIBUTE_NAME ( char_set_name )? ID )
			{
			match(input,ATTRIBUTE_NAME,FOLLOW_ATTRIBUTE_NAME_in_attribute_name21951); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2154:27: ( char_set_name )?
			int alt522=2;
			int LA522_0 = input.LA(1);
			if ( (LA522_0==CHAR_SET_NAME) ) {
				alt522=1;
			}
			switch (alt522) {
				case 1 :
					// PLSQLPrinter.g:2154:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_attribute_name21953);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_attribute_name21956); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2155:5: -> template( \"not implemented: attribute_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: attribute_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "attribute_name"


	public static class savepoint_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "savepoint_name"
	// PLSQLPrinter.g:2158:1: savepoint_name : ^( SAVEPOINT_NAME ( char_set_name )? ID ) -> template( \"not implemented: savepoint_name\";
	public final PLSQLPrinter.savepoint_name_return savepoint_name() throws RecognitionException {
		PLSQLPrinter.savepoint_name_return retval = new PLSQLPrinter.savepoint_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2159:5: ( ^( SAVEPOINT_NAME ( char_set_name )? ID ) -> template( \"not implemented: savepoint_name\")
			// PLSQLPrinter.g:2159:10: ^( SAVEPOINT_NAME ( char_set_name )? ID )
			{
			match(input,SAVEPOINT_NAME,FOLLOW_SAVEPOINT_NAME_in_savepoint_name21992); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2159:27: ( char_set_name )?
			int alt523=2;
			int LA523_0 = input.LA(1);
			if ( (LA523_0==CHAR_SET_NAME) ) {
				alt523=1;
			}
			switch (alt523) {
				case 1 :
					// PLSQLPrinter.g:2159:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_savepoint_name21994);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_savepoint_name21997); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2160:5: -> template( \"not implemented: savepoint_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: savepoint_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "savepoint_name"


	public static class rollback_segment_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "rollback_segment_name"
	// PLSQLPrinter.g:2163:1: rollback_segment_name : ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID ) -> template( \"not implemented: rollback_segment_name\";
	public final PLSQLPrinter.rollback_segment_name_return rollback_segment_name() throws RecognitionException {
		PLSQLPrinter.rollback_segment_name_return retval = new PLSQLPrinter.rollback_segment_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2164:5: ( ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID ) -> template( \"not implemented: rollback_segment_name\")
			// PLSQLPrinter.g:2164:10: ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID )
			{
			match(input,ROLLBACK_SEGMENT_NAME,FOLLOW_ROLLBACK_SEGMENT_NAME_in_rollback_segment_name22033); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2164:34: ( char_set_name )?
			int alt524=2;
			int LA524_0 = input.LA(1);
			if ( (LA524_0==CHAR_SET_NAME) ) {
				alt524=1;
			}
			switch (alt524) {
				case 1 :
					// PLSQLPrinter.g:2164:34: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_rollback_segment_name22035);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_rollback_segment_name22038); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2165:5: -> template( \"not implemented: rollback_segment_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: rollback_segment_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rollback_segment_name"


	public static class table_var_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_var_name"
	// PLSQLPrinter.g:2169:1: table_var_name : ^( TABLE_VAR_NAME ( char_set_name )? ID ) -> template( \"not implemented: table_var_name\";
	public final PLSQLPrinter.table_var_name_return table_var_name() throws RecognitionException {
		PLSQLPrinter.table_var_name_return retval = new PLSQLPrinter.table_var_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2170:5: ( ^( TABLE_VAR_NAME ( char_set_name )? ID ) -> template( \"not implemented: table_var_name\")
			// PLSQLPrinter.g:2170:10: ^( TABLE_VAR_NAME ( char_set_name )? ID )
			{
			match(input,TABLE_VAR_NAME,FOLLOW_TABLE_VAR_NAME_in_table_var_name22075); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2170:27: ( char_set_name )?
			int alt525=2;
			int LA525_0 = input.LA(1);
			if ( (LA525_0==CHAR_SET_NAME) ) {
				alt525=1;
			}
			switch (alt525) {
				case 1 :
					// PLSQLPrinter.g:2170:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_table_var_name22077);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_table_var_name22080); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2171:5: -> template( \"not implemented: table_var_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: table_var_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_var_name"


	public static class schema_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "schema_name"
	// PLSQLPrinter.g:2174:1: schema_name : ^( SCHEMA_NAME ( char_set_name )? ID ) -> template( \"not implemented: schema_name\";
	public final PLSQLPrinter.schema_name_return schema_name() throws RecognitionException {
		PLSQLPrinter.schema_name_return retval = new PLSQLPrinter.schema_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2175:5: ( ^( SCHEMA_NAME ( char_set_name )? ID ) -> template( \"not implemented: schema_name\")
			// PLSQLPrinter.g:2175:10: ^( SCHEMA_NAME ( char_set_name )? ID )
			{
			match(input,SCHEMA_NAME,FOLLOW_SCHEMA_NAME_in_schema_name22116); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2175:24: ( char_set_name )?
			int alt526=2;
			int LA526_0 = input.LA(1);
			if ( (LA526_0==CHAR_SET_NAME) ) {
				alt526=1;
			}
			switch (alt526) {
				case 1 :
					// PLSQLPrinter.g:2175:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_schema_name22118);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_schema_name22121); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2176:5: -> template( \"not implemented: schema_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: schema_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "schema_name"


	public static class routine_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "routine_name"
	// PLSQLPrinter.g:2179:1: routine_name : ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? ) -> template( \"not implemented: routine_name\";
	public final PLSQLPrinter.routine_name_return routine_name() throws RecognitionException {
		PLSQLPrinter.routine_name_return retval = new PLSQLPrinter.routine_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2180:5: ( ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? ) -> template( \"not implemented: routine_name\")
			// PLSQLPrinter.g:2180:10: ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? )
			{
			match(input,ROUTINE_NAME,FOLLOW_ROUTINE_NAME_in_routine_name22157); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2180:25: ( char_set_name )?
			int alt527=2;
			int LA527_0 = input.LA(1);
			if ( (LA527_0==CHAR_SET_NAME) ) {
				alt527=1;
			}
			switch (alt527) {
				case 1 :
					// PLSQLPrinter.g:2180:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_routine_name22159);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2180:40: ( ID )+
			int cnt528=0;
			loop528:
			while (true) {
				int alt528=2;
				int LA528_0 = input.LA(1);
				if ( (LA528_0==ID) ) {
					alt528=1;
				}

				switch (alt528) {
				case 1 :
					// PLSQLPrinter.g:2180:40: ID
					{
					match(input,ID,FOLLOW_ID_in_routine_name22162); 
					}
					break;

				default :
					if ( cnt528 >= 1 ) break loop528;
					EarlyExitException eee = new EarlyExitException(528, input);
					throw eee;
				}
				cnt528++;
			}

			// PLSQLPrinter.g:2180:44: ( link_name )?
			int alt529=2;
			int LA529_0 = input.LA(1);
			if ( (LA529_0==LINK_NAME) ) {
				alt529=1;
			}
			switch (alt529) {
				case 1 :
					// PLSQLPrinter.g:2180:44: link_name
					{
					pushFollow(FOLLOW_link_name_in_routine_name22165);
					link_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2181:5: -> template( \"not implemented: routine_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: routine_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "routine_name"


	public static class package_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "package_name"
	// PLSQLPrinter.g:2184:1: package_name : ^( PACKAGE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.package_name_return package_name() throws RecognitionException {
		PLSQLPrinter.package_name_return retval = new PLSQLPrinter.package_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2185:5: ( ^( PACKAGE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2185:10: ^( PACKAGE_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,PACKAGE_NAME,FOLLOW_PACKAGE_NAME_in_package_name22202); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2185:25: ( char_set_name )?
			int alt530=2;
			int LA530_0 = input.LA(1);
			if ( (LA530_0==CHAR_SET_NAME) ) {
				alt530=1;
			}
			switch (alt530) {
				case 1 :
					// PLSQLPrinter.g:2185:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_package_name22204);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2185:43: (ids+= ID )+
			int cnt531=0;
			loop531:
			while (true) {
				int alt531=2;
				int LA531_0 = input.LA(1);
				if ( (LA531_0==ID) ) {
					alt531=1;
				}

				switch (alt531) {
				case 1 :
					// PLSQLPrinter.g:2185:43: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_package_name22209); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt531 >= 1 ) break loop531;
					EarlyExitException eee = new EarlyExitException(531, input);
					throw eee;
				}
				cnt531++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2186:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_name"


	public static class implementation_type_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "implementation_type_name"
	// PLSQLPrinter.g:2189:1: implementation_type_name : ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.implementation_type_name_return implementation_type_name() throws RecognitionException {
		PLSQLPrinter.implementation_type_name_return retval = new PLSQLPrinter.implementation_type_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2190:5: ( ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2190:10: ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,IMPLEMENTATION_TYPE_NAME,FOLLOW_IMPLEMENTATION_TYPE_NAME_in_implementation_type_name22247); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2190:37: ( char_set_name )?
			int alt532=2;
			int LA532_0 = input.LA(1);
			if ( (LA532_0==CHAR_SET_NAME) ) {
				alt532=1;
			}
			switch (alt532) {
				case 1 :
					// PLSQLPrinter.g:2190:37: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_implementation_type_name22249);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2190:55: (ids+= ID )+
			int cnt533=0;
			loop533:
			while (true) {
				int alt533=2;
				int LA533_0 = input.LA(1);
				if ( (LA533_0==ID) ) {
					alt533=1;
				}

				switch (alt533) {
				case 1 :
					// PLSQLPrinter.g:2190:55: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_implementation_type_name22254); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt533 >= 1 ) break loop533;
					EarlyExitException eee = new EarlyExitException(533, input);
					throw eee;
				}
				cnt533++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2191:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "implementation_type_name"


	public static class parameter_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parameter_name"
	// PLSQLPrinter.g:2194:1: parameter_name : ^( PARAMETER_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.parameter_name_return parameter_name() throws RecognitionException {
		PLSQLPrinter.parameter_name_return retval = new PLSQLPrinter.parameter_name_return();
		retval.start = input.LT(1);

		CommonTree ID252=null;

		try {
			// PLSQLPrinter.g:2195:5: ( ^( PARAMETER_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2195:10: ^( PARAMETER_NAME ( char_set_name )? ID )
			{
			match(input,PARAMETER_NAME,FOLLOW_PARAMETER_NAME_in_parameter_name22292); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2195:27: ( char_set_name )?
			int alt534=2;
			int LA534_0 = input.LA(1);
			if ( (LA534_0==CHAR_SET_NAME) ) {
				alt534=1;
			}
			switch (alt534) {
				case 1 :
					// PLSQLPrinter.g:2195:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_parameter_name22294);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID252=(CommonTree)match(input,ID,FOLLOW_ID_in_parameter_name22297); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2196:5: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID252!=null?ID252.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter_name"


	public static class reference_model_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "reference_model_name"
	// PLSQLPrinter.g:2199:1: reference_model_name : ^( REFERENCE_MODEL_NAME ( char_set_name )? ID ) -> template( \"not implemented: reference_model_name\";
	public final PLSQLPrinter.reference_model_name_return reference_model_name() throws RecognitionException {
		PLSQLPrinter.reference_model_name_return retval = new PLSQLPrinter.reference_model_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2200:5: ( ^( REFERENCE_MODEL_NAME ( char_set_name )? ID ) -> template( \"not implemented: reference_model_name\")
			// PLSQLPrinter.g:2200:10: ^( REFERENCE_MODEL_NAME ( char_set_name )? ID )
			{
			match(input,REFERENCE_MODEL_NAME,FOLLOW_REFERENCE_MODEL_NAME_in_reference_model_name22334); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2200:33: ( char_set_name )?
			int alt535=2;
			int LA535_0 = input.LA(1);
			if ( (LA535_0==CHAR_SET_NAME) ) {
				alt535=1;
			}
			switch (alt535) {
				case 1 :
					// PLSQLPrinter.g:2200:33: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_reference_model_name22336);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_reference_model_name22339); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2201:5: -> template( \"not implemented: reference_model_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: reference_model_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reference_model_name"


	public static class main_model_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "main_model_name"
	// PLSQLPrinter.g:2204:1: main_model_name : ^( MAIN_MODEL_NAME ( char_set_name )? ID ) -> template( \"not implemented: main_model_name\";
	public final PLSQLPrinter.main_model_name_return main_model_name() throws RecognitionException {
		PLSQLPrinter.main_model_name_return retval = new PLSQLPrinter.main_model_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2205:5: ( ^( MAIN_MODEL_NAME ( char_set_name )? ID ) -> template( \"not implemented: main_model_name\")
			// PLSQLPrinter.g:2205:10: ^( MAIN_MODEL_NAME ( char_set_name )? ID )
			{
			match(input,MAIN_MODEL_NAME,FOLLOW_MAIN_MODEL_NAME_in_main_model_name22375); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2205:28: ( char_set_name )?
			int alt536=2;
			int LA536_0 = input.LA(1);
			if ( (LA536_0==CHAR_SET_NAME) ) {
				alt536=1;
			}
			switch (alt536) {
				case 1 :
					// PLSQLPrinter.g:2205:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_main_model_name22377);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_main_model_name22380); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2206:5: -> template( \"not implemented: main_model_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: main_model_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "main_model_name"


	public static class query_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_name"
	// PLSQLPrinter.g:2209:1: query_name : ^( QUERY_NAME ( char_set_name )? ID ) -> template( \"not implemented: query_name\";
	public final PLSQLPrinter.query_name_return query_name() throws RecognitionException {
		PLSQLPrinter.query_name_return retval = new PLSQLPrinter.query_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2210:5: ( ^( QUERY_NAME ( char_set_name )? ID ) -> template( \"not implemented: query_name\")
			// PLSQLPrinter.g:2210:10: ^( QUERY_NAME ( char_set_name )? ID )
			{
			match(input,QUERY_NAME,FOLLOW_QUERY_NAME_in_query_name22416); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2210:23: ( char_set_name )?
			int alt537=2;
			int LA537_0 = input.LA(1);
			if ( (LA537_0==CHAR_SET_NAME) ) {
				alt537=1;
			}
			switch (alt537) {
				case 1 :
					// PLSQLPrinter.g:2210:23: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_query_name22418);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_query_name22421); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2211:5: -> template( \"not implemented: query_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: query_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_name"


	public static class constraint_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constraint_name"
	// PLSQLPrinter.g:2214:1: constraint_name : ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? ) -> template( \"not implemented: constraint_name\";
	public final PLSQLPrinter.constraint_name_return constraint_name() throws RecognitionException {
		PLSQLPrinter.constraint_name_return retval = new PLSQLPrinter.constraint_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2215:5: ( ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? ) -> template( \"not implemented: constraint_name\")
			// PLSQLPrinter.g:2215:10: ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? )
			{
			match(input,CONSTRAINT_NAME,FOLLOW_CONSTRAINT_NAME_in_constraint_name22457); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2215:28: ( char_set_name )?
			int alt538=2;
			int LA538_0 = input.LA(1);
			if ( (LA538_0==CHAR_SET_NAME) ) {
				alt538=1;
			}
			switch (alt538) {
				case 1 :
					// PLSQLPrinter.g:2215:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_constraint_name22459);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2215:43: ( ID )+
			int cnt539=0;
			loop539:
			while (true) {
				int alt539=2;
				int LA539_0 = input.LA(1);
				if ( (LA539_0==ID) ) {
					alt539=1;
				}

				switch (alt539) {
				case 1 :
					// PLSQLPrinter.g:2215:43: ID
					{
					match(input,ID,FOLLOW_ID_in_constraint_name22462); 
					}
					break;

				default :
					if ( cnt539 >= 1 ) break loop539;
					EarlyExitException eee = new EarlyExitException(539, input);
					throw eee;
				}
				cnt539++;
			}

			// PLSQLPrinter.g:2215:47: ( link_name )?
			int alt540=2;
			int LA540_0 = input.LA(1);
			if ( (LA540_0==LINK_NAME) ) {
				alt540=1;
			}
			switch (alt540) {
				case 1 :
					// PLSQLPrinter.g:2215:47: link_name
					{
					pushFollow(FOLLOW_link_name_in_constraint_name22465);
					link_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2216:5: -> template( \"not implemented: constraint_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: constraint_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constraint_name"


	public static class label_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "label_name"
	// PLSQLPrinter.g:2219:1: label_name : ^( LABEL_NAME ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.label_name_return label_name() throws RecognitionException {
		PLSQLPrinter.label_name_return retval = new PLSQLPrinter.label_name_return();
		retval.start = input.LT(1);

		CommonTree ID253=null;

		try {
			// PLSQLPrinter.g:2220:5: ( ^( LABEL_NAME ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2220:10: ^( LABEL_NAME ID )
			{
			match(input,LABEL_NAME,FOLLOW_LABEL_NAME_in_label_name22502); 
			match(input, Token.DOWN, null); 
			ID253=(CommonTree)match(input,ID,FOLLOW_ID_in_label_name22504); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2220:27: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID253!=null?ID253.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "label_name"


	public static class type_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_name"
	// PLSQLPrinter.g:2223:1: type_name : ^( TYPE_NAME (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.type_name_return type_name() throws RecognitionException {
		PLSQLPrinter.type_name_return retval = new PLSQLPrinter.type_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2224:5: ( ^( TYPE_NAME (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2224:10: ^( TYPE_NAME (ids+= ID )+ )
			{
			match(input,TYPE_NAME,FOLLOW_TYPE_NAME_in_type_name22535); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2224:25: (ids+= ID )+
			int cnt541=0;
			loop541:
			while (true) {
				int alt541=2;
				int LA541_0 = input.LA(1);
				if ( (LA541_0==ID) ) {
					alt541=1;
				}

				switch (alt541) {
				case 1 :
					// PLSQLPrinter.g:2224:25: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_type_name22539); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt541 >= 1 ) break loop541;
					EarlyExitException eee = new EarlyExitException(541, input);
					throw eee;
				}
				cnt541++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2225:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_name"


	public static class sequence_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sequence_name"
	// PLSQLPrinter.g:2228:1: sequence_name : ^( SEQUENCE_NAME ( ID )+ ) -> template( \"not implemented: sequence_name\";
	public final PLSQLPrinter.sequence_name_return sequence_name() throws RecognitionException {
		PLSQLPrinter.sequence_name_return retval = new PLSQLPrinter.sequence_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2229:5: ( ^( SEQUENCE_NAME ( ID )+ ) -> template( \"not implemented: sequence_name\")
			// PLSQLPrinter.g:2229:10: ^( SEQUENCE_NAME ( ID )+ )
			{
			match(input,SEQUENCE_NAME,FOLLOW_SEQUENCE_NAME_in_sequence_name22577); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2229:26: ( ID )+
			int cnt542=0;
			loop542:
			while (true) {
				int alt542=2;
				int LA542_0 = input.LA(1);
				if ( (LA542_0==ID) ) {
					alt542=1;
				}

				switch (alt542) {
				case 1 :
					// PLSQLPrinter.g:2229:26: ID
					{
					match(input,ID,FOLLOW_ID_in_sequence_name22579); 
					}
					break;

				default :
					if ( cnt542 >= 1 ) break loop542;
					EarlyExitException eee = new EarlyExitException(542, input);
					throw eee;
				}
				cnt542++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2230:5: -> template( \"not implemented: sequence_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: sequence_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sequence_name"


	public static class exception_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_name"
	// PLSQLPrinter.g:2233:1: exception_name : ^( EXCEPTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.exception_name_return exception_name() throws RecognitionException {
		PLSQLPrinter.exception_name_return retval = new PLSQLPrinter.exception_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2234:5: ( ^( EXCEPTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2234:10: ^( EXCEPTION_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,EXCEPTION_NAME,FOLLOW_EXCEPTION_NAME_in_exception_name22616); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2234:27: ( char_set_name )?
			int alt543=2;
			int LA543_0 = input.LA(1);
			if ( (LA543_0==CHAR_SET_NAME) ) {
				alt543=1;
			}
			switch (alt543) {
				case 1 :
					// PLSQLPrinter.g:2234:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_exception_name22618);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2234:45: (ids+= ID )+
			int cnt544=0;
			loop544:
			while (true) {
				int alt544=2;
				int LA544_0 = input.LA(1);
				if ( (LA544_0==ID) ) {
					alt544=1;
				}

				switch (alt544) {
				case 1 :
					// PLSQLPrinter.g:2234:45: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_exception_name22623); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt544 >= 1 ) break loop544;
					EarlyExitException eee = new EarlyExitException(544, input);
					throw eee;
				}
				cnt544++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2235:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_name"


	public static class function_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "function_name"
	// PLSQLPrinter.g:2238:1: function_name : ^( FUNCTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.function_name_return function_name() throws RecognitionException {
		PLSQLPrinter.function_name_return retval = new PLSQLPrinter.function_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2239:5: ( ^( FUNCTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2239:10: ^( FUNCTION_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,FUNCTION_NAME,FOLLOW_FUNCTION_NAME_in_function_name22661); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2239:26: ( char_set_name )?
			int alt545=2;
			int LA545_0 = input.LA(1);
			if ( (LA545_0==CHAR_SET_NAME) ) {
				alt545=1;
			}
			switch (alt545) {
				case 1 :
					// PLSQLPrinter.g:2239:26: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_function_name22663);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2239:44: (ids+= ID )+
			int cnt546=0;
			loop546:
			while (true) {
				int alt546=2;
				int LA546_0 = input.LA(1);
				if ( (LA546_0==ID) ) {
					alt546=1;
				}

				switch (alt546) {
				case 1 :
					// PLSQLPrinter.g:2239:44: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_function_name22668); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt546 >= 1 ) break loop546;
					EarlyExitException eee = new EarlyExitException(546, input);
					throw eee;
				}
				cnt546++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2240:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_name"


	public static class procedure_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "procedure_name"
	// PLSQLPrinter.g:2243:1: procedure_name : ^( PROCEDURE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.procedure_name_return procedure_name() throws RecognitionException {
		PLSQLPrinter.procedure_name_return retval = new PLSQLPrinter.procedure_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2244:5: ( ^( PROCEDURE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2244:10: ^( PROCEDURE_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,PROCEDURE_NAME,FOLLOW_PROCEDURE_NAME_in_procedure_name22706); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2244:27: ( char_set_name )?
			int alt547=2;
			int LA547_0 = input.LA(1);
			if ( (LA547_0==CHAR_SET_NAME) ) {
				alt547=1;
			}
			switch (alt547) {
				case 1 :
					// PLSQLPrinter.g:2244:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_procedure_name22708);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2244:45: (ids+= ID )+
			int cnt548=0;
			loop548:
			while (true) {
				int alt548=2;
				int LA548_0 = input.LA(1);
				if ( (LA548_0==ID) ) {
					alt548=1;
				}

				switch (alt548) {
				case 1 :
					// PLSQLPrinter.g:2244:45: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_procedure_name22713); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt548 >= 1 ) break loop548;
					EarlyExitException eee = new EarlyExitException(548, input);
					throw eee;
				}
				cnt548++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2245:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "procedure_name"


	public static class trigger_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_name"
	// PLSQLPrinter.g:2248:1: trigger_name : ^( TRIGGER_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.trigger_name_return trigger_name() throws RecognitionException {
		PLSQLPrinter.trigger_name_return retval = new PLSQLPrinter.trigger_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2249:5: ( ^( TRIGGER_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2249:10: ^( TRIGGER_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,TRIGGER_NAME,FOLLOW_TRIGGER_NAME_in_trigger_name22751); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2249:25: ( char_set_name )?
			int alt549=2;
			int LA549_0 = input.LA(1);
			if ( (LA549_0==CHAR_SET_NAME) ) {
				alt549=1;
			}
			switch (alt549) {
				case 1 :
					// PLSQLPrinter.g:2249:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_trigger_name22753);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2249:43: (ids+= ID )+
			int cnt550=0;
			loop550:
			while (true) {
				int alt550=2;
				int LA550_0 = input.LA(1);
				if ( (LA550_0==ID) ) {
					alt550=1;
				}

				switch (alt550) {
				case 1 :
					// PLSQLPrinter.g:2249:43: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_trigger_name22758); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt550 >= 1 ) break loop550;
					EarlyExitException eee = new EarlyExitException(550, input);
					throw eee;
				}
				cnt550++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2250:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_name"


	public static class variable_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "variable_name"
	// PLSQLPrinter.g:2253:1: variable_name : ( ^( HOSTED_VARIABLE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids)| ^( VARIABLE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids));
	public final PLSQLPrinter.variable_name_return variable_name() throws RecognitionException {
		PLSQLPrinter.variable_name_return retval = new PLSQLPrinter.variable_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2254:5: ( ^( HOSTED_VARIABLE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids)| ^( VARIABLE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			int alt555=2;
			int LA555_0 = input.LA(1);
			if ( (LA555_0==HOSTED_VARIABLE_NAME) ) {
				alt555=1;
			}
			else if ( (LA555_0==VARIABLE_NAME) ) {
				alt555=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 555, 0, input);
				throw nvae;
			}

			switch (alt555) {
				case 1 :
					// PLSQLPrinter.g:2254:10: ^( HOSTED_VARIABLE_NAME ( char_set_name )? (ids+= ID )+ )
					{
					match(input,HOSTED_VARIABLE_NAME,FOLLOW_HOSTED_VARIABLE_NAME_in_variable_name22796); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2254:33: ( char_set_name )?
					int alt551=2;
					int LA551_0 = input.LA(1);
					if ( (LA551_0==CHAR_SET_NAME) ) {
						alt551=1;
					}
					switch (alt551) {
						case 1 :
							// PLSQLPrinter.g:2254:33: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_variable_name22798);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2254:51: (ids+= ID )+
					int cnt552=0;
					loop552:
					while (true) {
						int alt552=2;
						int LA552_0 = input.LA(1);
						if ( (LA552_0==ID) ) {
							alt552=1;
						}

						switch (alt552) {
						case 1 :
							// PLSQLPrinter.g:2254:51: ids+= ID
							{
							ids=(CommonTree)match(input,ID,FOLLOW_ID_in_variable_name22803); 
							if (list_ids==null) list_ids=new ArrayList<Object>();
							list_ids.add(ids);
							}
							break;

						default :
							if ( cnt552 >= 1 ) break loop552;
							EarlyExitException eee = new EarlyExitException(552, input);
							throw eee;
						}
						cnt552++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2255:5: -> dotted_name(ids=$ids)
					{
						retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2256:10: ^( VARIABLE_NAME ( char_set_name )? (ids+= ID )+ )
					{
					match(input,VARIABLE_NAME,FOLLOW_VARIABLE_NAME_in_variable_name22832); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2256:26: ( char_set_name )?
					int alt553=2;
					int LA553_0 = input.LA(1);
					if ( (LA553_0==CHAR_SET_NAME) ) {
						alt553=1;
					}
					switch (alt553) {
						case 1 :
							// PLSQLPrinter.g:2256:26: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_variable_name22834);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2256:44: (ids+= ID )+
					int cnt554=0;
					loop554:
					while (true) {
						int alt554=2;
						int LA554_0 = input.LA(1);
						if ( (LA554_0==ID) ) {
							alt554=1;
						}

						switch (alt554) {
						case 1 :
							// PLSQLPrinter.g:2256:44: ids+= ID
							{
							ids=(CommonTree)match(input,ID,FOLLOW_ID_in_variable_name22839); 
							if (list_ids==null) list_ids=new ArrayList<Object>();
							list_ids.add(ids);
							}
							break;

						default :
							if ( cnt554 >= 1 ) break loop554;
							EarlyExitException eee = new EarlyExitException(554, input);
							throw eee;
						}
						cnt554++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2257:5: -> dotted_name(ids=$ids)
					{
						retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "variable_name"


	public static class index_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "index_name"
	// PLSQLPrinter.g:2260:1: index_name : ^( INDEX_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.index_name_return index_name() throws RecognitionException {
		PLSQLPrinter.index_name_return retval = new PLSQLPrinter.index_name_return();
		retval.start = input.LT(1);

		CommonTree ID254=null;

		try {
			// PLSQLPrinter.g:2261:5: ( ^( INDEX_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2261:10: ^( INDEX_NAME ( char_set_name )? ID )
			{
			match(input,INDEX_NAME,FOLLOW_INDEX_NAME_in_index_name22877); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2261:23: ( char_set_name )?
			int alt556=2;
			int LA556_0 = input.LA(1);
			if ( (LA556_0==CHAR_SET_NAME) ) {
				alt556=1;
			}
			switch (alt556) {
				case 1 :
					// PLSQLPrinter.g:2261:23: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_index_name22879);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID254=(CommonTree)match(input,ID,FOLLOW_ID_in_index_name22882); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2261:42: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID254!=null?ID254.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_name"


	public static class cursor_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_name"
	// PLSQLPrinter.g:2264:1: cursor_name : ^( CURSOR_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.cursor_name_return cursor_name() throws RecognitionException {
		PLSQLPrinter.cursor_name_return retval = new PLSQLPrinter.cursor_name_return();
		retval.start = input.LT(1);

		CommonTree ID255=null;

		try {
			// PLSQLPrinter.g:2265:5: ( ^( CURSOR_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2265:10: ^( CURSOR_NAME ( char_set_name )? ID )
			{
			match(input,CURSOR_NAME,FOLLOW_CURSOR_NAME_in_cursor_name22913); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2265:24: ( char_set_name )?
			int alt557=2;
			int LA557_0 = input.LA(1);
			if ( (LA557_0==CHAR_SET_NAME) ) {
				alt557=1;
			}
			switch (alt557) {
				case 1 :
					// PLSQLPrinter.g:2265:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_cursor_name22915);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID255=(CommonTree)match(input,ID,FOLLOW_ID_in_cursor_name22918); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2265:43: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID255!=null?ID255.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_name"


	public static class record_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_name"
	// PLSQLPrinter.g:2268:1: record_name : ^( RECORD_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.record_name_return record_name() throws RecognitionException {
		PLSQLPrinter.record_name_return retval = new PLSQLPrinter.record_name_return();
		retval.start = input.LT(1);

		CommonTree ID256=null;

		try {
			// PLSQLPrinter.g:2269:5: ( ^( RECORD_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2269:10: ^( RECORD_NAME ( char_set_name )? ID )
			{
			match(input,RECORD_NAME,FOLLOW_RECORD_NAME_in_record_name22949); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2269:24: ( char_set_name )?
			int alt558=2;
			int LA558_0 = input.LA(1);
			if ( (LA558_0==CHAR_SET_NAME) ) {
				alt558=1;
			}
			switch (alt558) {
				case 1 :
					// PLSQLPrinter.g:2269:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_record_name22951);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID256=(CommonTree)match(input,ID,FOLLOW_ID_in_record_name22954); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2269:43: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID256!=null?ID256.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_name"


	public static class collection_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "collection_name"
	// PLSQLPrinter.g:2272:1: collection_name : ^( COLLECTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.collection_name_return collection_name() throws RecognitionException {
		PLSQLPrinter.collection_name_return retval = new PLSQLPrinter.collection_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2273:5: ( ^( COLLECTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2273:10: ^( COLLECTION_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,COLLECTION_NAME,FOLLOW_COLLECTION_NAME_in_collection_name22985); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2273:28: ( char_set_name )?
			int alt559=2;
			int LA559_0 = input.LA(1);
			if ( (LA559_0==CHAR_SET_NAME) ) {
				alt559=1;
			}
			switch (alt559) {
				case 1 :
					// PLSQLPrinter.g:2273:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_collection_name22987);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2273:46: (ids+= ID )+
			int cnt560=0;
			loop560:
			while (true) {
				int alt560=2;
				int LA560_0 = input.LA(1);
				if ( (LA560_0==ID) ) {
					alt560=1;
				}

				switch (alt560) {
				case 1 :
					// PLSQLPrinter.g:2273:46: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_collection_name22992); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt560 >= 1 ) break loop560;
					EarlyExitException eee = new EarlyExitException(560, input);
					throw eee;
				}
				cnt560++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2274:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "collection_name"


	public static class link_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "link_name"
	// PLSQLPrinter.g:2277:1: link_name : ^( LINK_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.link_name_return link_name() throws RecognitionException {
		PLSQLPrinter.link_name_return retval = new PLSQLPrinter.link_name_return();
		retval.start = input.LT(1);

		CommonTree ID257=null;

		try {
			// PLSQLPrinter.g:2278:5: ( ^( LINK_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2278:10: ^( LINK_NAME ( char_set_name )? ID )
			{
			match(input,LINK_NAME,FOLLOW_LINK_NAME_in_link_name23030); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2278:22: ( char_set_name )?
			int alt561=2;
			int LA561_0 = input.LA(1);
			if ( (LA561_0==CHAR_SET_NAME) ) {
				alt561=1;
			}
			switch (alt561) {
				case 1 :
					// PLSQLPrinter.g:2278:22: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_link_name23032);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID257=(CommonTree)match(input,ID,FOLLOW_ID_in_link_name23035); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2278:41: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID257!=null?ID257.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "link_name"


	public static class column_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "column_name"
	// PLSQLPrinter.g:2281:1: column_name : ^( COLUMN_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.column_name_return column_name() throws RecognitionException {
		PLSQLPrinter.column_name_return retval = new PLSQLPrinter.column_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2282:5: ( ^( COLUMN_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2282:10: ^( COLUMN_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,COLUMN_NAME,FOLLOW_COLUMN_NAME_in_column_name23066); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2282:24: ( char_set_name )?
			int alt562=2;
			int LA562_0 = input.LA(1);
			if ( (LA562_0==CHAR_SET_NAME) ) {
				alt562=1;
			}
			switch (alt562) {
				case 1 :
					// PLSQLPrinter.g:2282:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_column_name23068);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2282:42: (ids+= ID )+
			int cnt563=0;
			loop563:
			while (true) {
				int alt563=2;
				int LA563_0 = input.LA(1);
				if ( (LA563_0==ID) ) {
					alt563=1;
				}

				switch (alt563) {
				case 1 :
					// PLSQLPrinter.g:2282:42: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_column_name23073); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt563 >= 1 ) break loop563;
					EarlyExitException eee = new EarlyExitException(563, input);
					throw eee;
				}
				cnt563++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2283:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_name"


	public static class tableview_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "tableview_name"
	// PLSQLPrinter.g:2286:1: tableview_name : ^( TABLEVIEW_NAME ( char_set_name )? (ids+= ID )+ ( link_name )? ( partition_extension_clause )? ) -> tableview_name(ids=$idslink_name=$link_name.stpartition_extension_clause=$partition_extension_clause.st);
	public final PLSQLPrinter.tableview_name_return tableview_name() throws RecognitionException {
		PLSQLPrinter.tableview_name_return retval = new PLSQLPrinter.tableview_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;
		TreeRuleReturnScope link_name258 =null;
		TreeRuleReturnScope partition_extension_clause259 =null;

		try {
			// PLSQLPrinter.g:2287:5: ( ^( TABLEVIEW_NAME ( char_set_name )? (ids+= ID )+ ( link_name )? ( partition_extension_clause )? ) -> tableview_name(ids=$idslink_name=$link_name.stpartition_extension_clause=$partition_extension_clause.st))
			// PLSQLPrinter.g:2287:10: ^( TABLEVIEW_NAME ( char_set_name )? (ids+= ID )+ ( link_name )? ( partition_extension_clause )? )
			{
			match(input,TABLEVIEW_NAME,FOLLOW_TABLEVIEW_NAME_in_tableview_name23111); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2287:27: ( char_set_name )?
			int alt564=2;
			int LA564_0 = input.LA(1);
			if ( (LA564_0==CHAR_SET_NAME) ) {
				alt564=1;
			}
			switch (alt564) {
				case 1 :
					// PLSQLPrinter.g:2287:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_tableview_name23113);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2287:45: (ids+= ID )+
			int cnt565=0;
			loop565:
			while (true) {
				int alt565=2;
				int LA565_0 = input.LA(1);
				if ( (LA565_0==ID) ) {
					alt565=1;
				}

				switch (alt565) {
				case 1 :
					// PLSQLPrinter.g:2287:45: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_tableview_name23118); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt565 >= 1 ) break loop565;
					EarlyExitException eee = new EarlyExitException(565, input);
					throw eee;
				}
				cnt565++;
			}

			// PLSQLPrinter.g:2287:51: ( link_name )?
			int alt566=2;
			int LA566_0 = input.LA(1);
			if ( (LA566_0==LINK_NAME) ) {
				alt566=1;
			}
			switch (alt566) {
				case 1 :
					// PLSQLPrinter.g:2287:51: link_name
					{
					pushFollow(FOLLOW_link_name_in_tableview_name23121);
					link_name258=link_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2287:62: ( partition_extension_clause )?
			int alt567=2;
			int LA567_0 = input.LA(1);
			if ( (LA567_0==PARTITION_VK||LA567_0==SUBPARTITION_VK) ) {
				alt567=1;
			}
			switch (alt567) {
				case 1 :
					// PLSQLPrinter.g:2287:62: partition_extension_clause
					{
					pushFollow(FOLLOW_partition_extension_clause_in_tableview_name23124);
					partition_extension_clause259=partition_extension_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2288:5: -> tableview_name(ids=$idslink_name=$link_name.stpartition_extension_clause=$partition_extension_clause.st)
			{
				retval.st = templateLib.getInstanceOf("tableview_name",new STAttrMap().put("ids", list_ids).put("link_name", (link_name258!=null?((StringTemplate)link_name258.getTemplate()):null)).put("partition_extension_clause", (partition_extension_clause259!=null?((StringTemplate)partition_extension_clause259.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableview_name"


	public static class char_set_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "char_set_name"
	// PLSQLPrinter.g:2291:1: char_set_name : ^( CHAR_SET_NAME (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.char_set_name_return char_set_name() throws RecognitionException {
		PLSQLPrinter.char_set_name_return retval = new PLSQLPrinter.char_set_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2292:5: ( ^( CHAR_SET_NAME (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2292:10: ^( CHAR_SET_NAME (ids+= ID )+ )
			{
			match(input,CHAR_SET_NAME,FOLLOW_CHAR_SET_NAME_in_char_set_name23172); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2292:29: (ids+= ID )+
			int cnt568=0;
			loop568:
			while (true) {
				int alt568=2;
				int LA568_0 = input.LA(1);
				if ( (LA568_0==ID) ) {
					alt568=1;
				}

				switch (alt568) {
				case 1 :
					// PLSQLPrinter.g:2292:29: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_char_set_name23176); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt568 >= 1 ) break loop568;
					EarlyExitException eee = new EarlyExitException(568, input);
					throw eee;
				}
				cnt568++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2293:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "char_set_name"


	public static class function_argument_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "function_argument"
	// PLSQLPrinter.g:2300:1: function_argument : ^( ARGUMENTS (args+= argument )* ) -> function_arguments(arguments=$args);
	public final PLSQLPrinter.function_argument_return function_argument() throws RecognitionException {
		PLSQLPrinter.function_argument_return retval = new PLSQLPrinter.function_argument_return();
		retval.start = input.LT(1);

		List<Object> list_args=null;
		RuleReturnScope args = null;
		try {
			// PLSQLPrinter.g:2301:5: ( ^( ARGUMENTS (args+= argument )* ) -> function_arguments(arguments=$args))
			// PLSQLPrinter.g:2301:10: ^( ARGUMENTS (args+= argument )* )
			{
			match(input,ARGUMENTS,FOLLOW_ARGUMENTS_in_function_argument23218); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:2301:26: (args+= argument )*
				loop569:
				while (true) {
					int alt569=2;
					int LA569_0 = input.LA(1);
					if ( (LA569_0==ARGUMENT) ) {
						alt569=1;
					}

					switch (alt569) {
					case 1 :
						// PLSQLPrinter.g:2301:26: args+= argument
						{
						pushFollow(FOLLOW_argument_in_function_argument23222);
						args=argument();
						state._fsp--;

						if (list_args==null) list_args=new ArrayList<Object>();
						list_args.add(args.getTemplate());
						}
						break;

					default :
						break loop569;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 2302:5: -> function_arguments(arguments=$args)
			{
				retval.st = templateLib.getInstanceOf("function_arguments",new STAttrMap().put("arguments", list_args));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_argument"


	public static class argument_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "argument"
	// PLSQLPrinter.g:2305:1: argument : ^( ARGUMENT expression ( parameter_name )? ) -> function_argument(valueExpr=$expression.stname=$parameter_name.st);
	public final PLSQLPrinter.argument_return argument() throws RecognitionException {
		PLSQLPrinter.argument_return retval = new PLSQLPrinter.argument_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression260 =null;
		TreeRuleReturnScope parameter_name261 =null;

		try {
			// PLSQLPrinter.g:2306:5: ( ^( ARGUMENT expression ( parameter_name )? ) -> function_argument(valueExpr=$expression.stname=$parameter_name.st))
			// PLSQLPrinter.g:2306:10: ^( ARGUMENT expression ( parameter_name )? )
			{
			match(input,ARGUMENT,FOLLOW_ARGUMENT_in_argument23260); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_argument23262);
			expression260=expression();
			state._fsp--;

			// PLSQLPrinter.g:2306:32: ( parameter_name )?
			int alt570=2;
			int LA570_0 = input.LA(1);
			if ( (LA570_0==PARAMETER_NAME) ) {
				alt570=1;
			}
			switch (alt570) {
				case 1 :
					// PLSQLPrinter.g:2306:32: parameter_name
					{
					pushFollow(FOLLOW_parameter_name_in_argument23264);
					parameter_name261=parameter_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2307:5: -> function_argument(valueExpr=$expression.stname=$parameter_name.st)
			{
				retval.st = templateLib.getInstanceOf("function_argument",new STAttrMap().put("valueExpr", (expression260!=null?((StringTemplate)expression260.getTemplate()):null)).put("name", (parameter_name261!=null?((StringTemplate)parameter_name261.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "argument"


	public static class type_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_spec"
	// PLSQLPrinter.g:2310:1: type_spec : ( ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? ) -> typespec_custom(name=$type_name.stis_ref=$REF_VK != nullis_percent_rowtype=$PERCENT_ROWTYPE_VK != nullis_percent_type=$PERCENT_TYPE_VK != null)| native_datatype_spec -> { $native_datatype_spec.st; }| ^( INTERVAL_DATATYPE ( YEAR_VK | DAY_VK ) ( MONTH_VK | SECOND_VK ) ( expression )* ) -> template( \"not implemented: type_spec[INTERVAL_DATATYPE]\");
	public final PLSQLPrinter.type_spec_return type_spec() throws RecognitionException {
		PLSQLPrinter.type_spec_return retval = new PLSQLPrinter.type_spec_return();
		retval.start = input.LT(1);

		CommonTree REF_VK263=null;
		CommonTree PERCENT_ROWTYPE_VK264=null;
		CommonTree PERCENT_TYPE_VK265=null;
		TreeRuleReturnScope type_name262 =null;
		TreeRuleReturnScope native_datatype_spec266 =null;

		try {
			// PLSQLPrinter.g:2311:5: ( ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? ) -> typespec_custom(name=$type_name.stis_ref=$REF_VK != nullis_percent_rowtype=$PERCENT_ROWTYPE_VK != nullis_percent_type=$PERCENT_TYPE_VK != null)| native_datatype_spec -> { $native_datatype_spec.st; }| ^( INTERVAL_DATATYPE ( YEAR_VK | DAY_VK ) ( MONTH_VK | SECOND_VK ) ( expression )* ) -> template( \"not implemented: type_spec[INTERVAL_DATATYPE]\")
			int alt576=3;
			switch ( input.LA(1) ) {
			case CUSTOM_TYPE:
				{
				alt576=1;
				}
				break;
			case NATIVE_DATATYPE:
				{
				alt576=2;
				}
				break;
			case INTERVAL_DATATYPE:
				{
				alt576=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 576, 0, input);
				throw nvae;
			}
			switch (alt576) {
				case 1 :
					// PLSQLPrinter.g:2311:11: ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? )
					{
					match(input,CUSTOM_TYPE,FOLLOW_CUSTOM_TYPE_in_type_spec23308); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_type_name_in_type_spec23310);
					type_name262=type_name();
					state._fsp--;

					// PLSQLPrinter.g:2311:35: ( REF_VK )?
					int alt571=2;
					int LA571_0 = input.LA(1);
					if ( (LA571_0==REF_VK) ) {
						alt571=1;
					}
					switch (alt571) {
						case 1 :
							// PLSQLPrinter.g:2311:35: REF_VK
							{
							REF_VK263=(CommonTree)match(input,REF_VK,FOLLOW_REF_VK_in_type_spec23312); 
							}
							break;

					}

					// PLSQLPrinter.g:2311:43: ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )?
					int alt572=3;
					int LA572_0 = input.LA(1);
					if ( (LA572_0==PERCENT_ROWTYPE_VK) ) {
						alt572=1;
					}
					else if ( (LA572_0==PERCENT_TYPE_VK) ) {
						alt572=2;
					}
					switch (alt572) {
						case 1 :
							// PLSQLPrinter.g:2311:44: PERCENT_ROWTYPE_VK
							{
							PERCENT_ROWTYPE_VK264=(CommonTree)match(input,PERCENT_ROWTYPE_VK,FOLLOW_PERCENT_ROWTYPE_VK_in_type_spec23316); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2311:63: PERCENT_TYPE_VK
							{
							PERCENT_TYPE_VK265=(CommonTree)match(input,PERCENT_TYPE_VK,FOLLOW_PERCENT_TYPE_VK_in_type_spec23318); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2312:5: -> typespec_custom(name=$type_name.stis_ref=$REF_VK != nullis_percent_rowtype=$PERCENT_ROWTYPE_VK != nullis_percent_type=$PERCENT_TYPE_VK != null)
					{
						retval.st = templateLib.getInstanceOf("typespec_custom",new STAttrMap().put("name", (type_name262!=null?((StringTemplate)type_name262.getTemplate()):null)).put("is_ref", REF_VK263 != null).put("is_percent_rowtype", PERCENT_ROWTYPE_VK264 != null).put("is_percent_type", PERCENT_TYPE_VK265 != null));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2315:10: native_datatype_spec
					{
					pushFollow(FOLLOW_native_datatype_spec_in_type_spec23387);
					native_datatype_spec266=native_datatype_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 2315:31: -> { $native_datatype_spec.st; }
					{
						retval.st =  (native_datatype_spec266!=null?((StringTemplate)native_datatype_spec266.getTemplate()):null); ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:2316:10: ^( INTERVAL_DATATYPE ( YEAR_VK | DAY_VK ) ( MONTH_VK | SECOND_VK ) ( expression )* )
					{
					match(input,INTERVAL_DATATYPE,FOLLOW_INTERVAL_DATATYPE_in_type_spec23403); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2316:30: ( YEAR_VK | DAY_VK )
					int alt573=2;
					int LA573_0 = input.LA(1);
					if ( (LA573_0==YEAR_VK) ) {
						alt573=1;
					}
					else if ( (LA573_0==DAY_VK) ) {
						alt573=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 573, 0, input);
						throw nvae;
					}

					switch (alt573) {
						case 1 :
							// PLSQLPrinter.g:2316:31: YEAR_VK
							{
							match(input,YEAR_VK,FOLLOW_YEAR_VK_in_type_spec23406); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2316:39: DAY_VK
							{
							match(input,DAY_VK,FOLLOW_DAY_VK_in_type_spec23408); 
							}
							break;

					}

					// PLSQLPrinter.g:2316:47: ( MONTH_VK | SECOND_VK )
					int alt574=2;
					int LA574_0 = input.LA(1);
					if ( (LA574_0==MONTH_VK) ) {
						alt574=1;
					}
					else if ( (LA574_0==SECOND_VK) ) {
						alt574=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 574, 0, input);
						throw nvae;
					}

					switch (alt574) {
						case 1 :
							// PLSQLPrinter.g:2316:48: MONTH_VK
							{
							match(input,MONTH_VK,FOLLOW_MONTH_VK_in_type_spec23412); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2316:57: SECOND_VK
							{
							match(input,SECOND_VK,FOLLOW_SECOND_VK_in_type_spec23414); 
							}
							break;

					}

					// PLSQLPrinter.g:2316:68: ( expression )*
					loop575:
					while (true) {
						int alt575=2;
						int LA575_0 = input.LA(1);
						if ( (LA575_0==EXPR||LA575_0==LOGIC_EXPR) ) {
							alt575=1;
						}

						switch (alt575) {
						case 1 :
							// PLSQLPrinter.g:2316:68: expression
							{
							pushFollow(FOLLOW_expression_in_type_spec23417);
							expression();
							state._fsp--;

							}
							break;

						default :
							break loop575;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2317:5: -> template( \"not implemented: type_spec[INTERVAL_DATATYPE]\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: type_spec[INTERVAL_DATATYPE]");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_spec"


	public static class type_precision_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_precision"
	// PLSQLPrinter.g:2320:1: type_precision : ^( PRECISION size1= constant (size2= constant )? (precision_char= CHAR_VK |precision_byte= BYTE_VK )? ) -> base_type_spec_precision(size1=$size1.stsize2=$size2.stis_byte=$precision_byte != nullis_char=$precision_char != null);
	public final PLSQLPrinter.type_precision_return type_precision() throws RecognitionException {
		PLSQLPrinter.type_precision_return retval = new PLSQLPrinter.type_precision_return();
		retval.start = input.LT(1);

		CommonTree precision_char=null;
		CommonTree precision_byte=null;
		TreeRuleReturnScope size1 =null;
		TreeRuleReturnScope size2 =null;

		try {
			// PLSQLPrinter.g:2321:5: ( ^( PRECISION size1= constant (size2= constant )? (precision_char= CHAR_VK |precision_byte= BYTE_VK )? ) -> base_type_spec_precision(size1=$size1.stsize2=$size2.stis_byte=$precision_byte != nullis_char=$precision_char != null))
			// PLSQLPrinter.g:2321:10: ^( PRECISION size1= constant (size2= constant )? (precision_char= CHAR_VK |precision_byte= BYTE_VK )? )
			{
			match(input,PRECISION,FOLLOW_PRECISION_in_type_precision23454); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_constant_in_type_precision23458);
			size1=constant();
			state._fsp--;

			// PLSQLPrinter.g:2321:42: (size2= constant )?
			int alt577=2;
			int LA577_0 = input.LA(1);
			if ( (LA577_0==APPROXIMATE_NUM_LIT||LA577_0==CHAR_STRING||LA577_0==EXACT_NUM_LIT||LA577_0==MINUS_SIGN||LA577_0==SQL92_RESERVED_DEFAULT||LA577_0==SQL92_RESERVED_FALSE||LA577_0==SQL92_RESERVED_NULL||LA577_0==SQL92_RESERVED_TRUE||LA577_0==UNSIGNED_INTEGER||LA577_0==DBTIMEZONE_VK||LA577_0==MAXVALUE_VK||LA577_0==MINVALUE_VK||LA577_0==SESSIONTIMEZONE_VK) ) {
				alt577=1;
			}
			switch (alt577) {
				case 1 :
					// PLSQLPrinter.g:2321:42: size2= constant
					{
					pushFollow(FOLLOW_constant_in_type_precision23462);
					size2=constant();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2321:53: (precision_char= CHAR_VK |precision_byte= BYTE_VK )?
			int alt578=3;
			int LA578_0 = input.LA(1);
			if ( (LA578_0==CHAR_VK) ) {
				alt578=1;
			}
			else if ( (LA578_0==BYTE_VK) ) {
				alt578=2;
			}
			switch (alt578) {
				case 1 :
					// PLSQLPrinter.g:2321:54: precision_char= CHAR_VK
					{
					precision_char=(CommonTree)match(input,CHAR_VK,FOLLOW_CHAR_VK_in_type_precision23468); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2321:77: precision_byte= BYTE_VK
					{
					precision_byte=(CommonTree)match(input,BYTE_VK,FOLLOW_BYTE_VK_in_type_precision23472); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2322:5: -> base_type_spec_precision(size1=$size1.stsize2=$size2.stis_byte=$precision_byte != nullis_char=$precision_char != null)
			{
				retval.st = templateLib.getInstanceOf("base_type_spec_precision",new STAttrMap().put("size1", (size1!=null?((StringTemplate)size1.getTemplate()):null)).put("size2", (size2!=null?((StringTemplate)size2.getTemplate()):null)).put("is_byte", precision_byte != null).put("is_char", precision_char != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_precision"


	public static class native_datatype_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "native_datatype_spec"
	// PLSQLPrinter.g:2327:1: native_datatype_spec : ^( NATIVE_DATATYPE ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | DATE_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DOUBLE_VK PRECISION_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_VK RAW_VK | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK ) (prec= type_precision )? (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )? ) -> base_type_spec(baseName=typeBaseNameprecision=$prec.stis_with_time_zone=$is_tz != nullis_time_zone_local=$is_tz_local != null);
	public final PLSQLPrinter.native_datatype_spec_return native_datatype_spec() throws RecognitionException {
		PLSQLPrinter.native_datatype_spec_return retval = new PLSQLPrinter.native_datatype_spec_return();
		retval.start = input.LT(1);

		CommonTree is_tz=null;
		CommonTree is_tz_local=null;
		TreeRuleReturnScope prec =null;

		 String typeBaseName = null; 
		try {
			// PLSQLPrinter.g:2329:5: ( ^( NATIVE_DATATYPE ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | DATE_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DOUBLE_VK PRECISION_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_VK RAW_VK | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK ) (prec= type_precision )? (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )? ) -> base_type_spec(baseName=typeBaseNameprecision=$prec.stis_with_time_zone=$is_tz != nullis_time_zone_local=$is_tz_local != null))
			// PLSQLPrinter.g:2329:10: ^( NATIVE_DATATYPE ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | DATE_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DOUBLE_VK PRECISION_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_VK RAW_VK | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK ) (prec= type_precision )? (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )? )
			{
			match(input,NATIVE_DATATYPE,FOLLOW_NATIVE_DATATYPE_in_native_datatype_spec23535); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2330:5: ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | DATE_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DOUBLE_VK PRECISION_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_VK RAW_VK | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK )
			int alt579=56;
			switch ( input.LA(1) ) {
			case BFILE_VK:
				{
				alt579=1;
				}
				break;
			case BINARY_FLOAT_VK:
				{
				alt579=2;
				}
				break;
			case BINARY_INTEGER_VK:
				{
				alt579=3;
				}
				break;
			case BLOB_VK:
				{
				alt579=4;
				}
				break;
			case BOOLEAN_VK:
				{
				alt579=5;
				}
				break;
			case CHARACTER_VK:
				{
				alt579=6;
				}
				break;
			case CHAR_VK:
				{
				alt579=7;
				}
				break;
			case CLOB_VK:
				{
				alt579=8;
				}
				break;
			case DATE_VK:
				{
				alt579=9;
				}
				break;
			case SQL92_RESERVED_DATE:
				{
				alt579=10;
				}
				break;
			case DAY_VK:
				{
				alt579=11;
				}
				break;
			case DECIMAL_VK:
				{
				alt579=12;
				}
				break;
			case DEC_VK:
				{
				alt579=13;
				}
				break;
			case DOUBLE_VK:
				{
				int LA579_14 = input.LA(2);
				if ( (LA579_14==PRECISION_VK) ) {
					alt579=15;
				}
				else if ( (LA579_14==UP||LA579_14==PRECISION||LA579_14==TIME_VK) ) {
					alt579=14;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 579, 14, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DSINTERVAL_UNCONSTRAINED_VK:
				{
				alt579=16;
				}
				break;
			case FLOAT_VK:
				{
				alt579=17;
				}
				break;
			case HOUR_VK:
				{
				alt579=18;
				}
				break;
			case INTEGER_VK:
				{
				alt579=19;
				}
				break;
			case INT_VK:
				{
				alt579=20;
				}
				break;
			case LONG_VK:
				{
				int LA579_20 = input.LA(2);
				if ( (LA579_20==RAW_VK) ) {
					alt579=22;
				}
				else if ( (LA579_20==UP||LA579_20==PRECISION||LA579_20==TIME_VK) ) {
					alt579=21;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 579, 20, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case MINUTE_VK:
				{
				alt579=23;
				}
				break;
			case MLSLABEL_VK:
				{
				alt579=24;
				}
				break;
			case MONTH_VK:
				{
				alt579=25;
				}
				break;
			case NATURALN_VK:
				{
				alt579=26;
				}
				break;
			case NATURAL_VK:
				{
				alt579=27;
				}
				break;
			case NCHAR_VK:
				{
				alt579=28;
				}
				break;
			case NCLOB_VK:
				{
				alt579=29;
				}
				break;
			case NUMBER_VK:
				{
				alt579=30;
				}
				break;
			case NUMERIC_VK:
				{
				alt579=31;
				}
				break;
			case NVARCHAR2_VK:
				{
				alt579=32;
				}
				break;
			case PLS_INTEGER_VK:
				{
				alt579=33;
				}
				break;
			case POSITIVEN_VK:
				{
				alt579=34;
				}
				break;
			case POSITIVE_VK:
				{
				alt579=35;
				}
				break;
			case RAW_VK:
				{
				alt579=36;
				}
				break;
			case REAL_VK:
				{
				alt579=37;
				}
				break;
			case ROWID_VK:
				{
				alt579=38;
				}
				break;
			case SECOND_VK:
				{
				alt579=39;
				}
				break;
			case SIGNTYPE_VK:
				{
				alt579=40;
				}
				break;
			case SIMPLE_INTEGER_VK:
				{
				alt579=41;
				}
				break;
			case SMALLINT_VK:
				{
				alt579=42;
				}
				break;
			case STRING_VK:
				{
				alt579=43;
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED_VK:
				{
				alt579=44;
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED_VK:
				{
				alt579=45;
				}
				break;
			case TIMESTAMP_UNCONSTRAINED_VK:
				{
				alt579=46;
				}
				break;
			case TIMESTAMP_VK:
				{
				alt579=47;
				}
				break;
			case TIMEZONE_ABBR_VK:
				{
				alt579=48;
				}
				break;
			case TIMEZONE_HOUR_VK:
				{
				alt579=49;
				}
				break;
			case TIMEZONE_MINUTE_VK:
				{
				alt579=50;
				}
				break;
			case TIMEZONE_REGION_VK:
				{
				alt579=51;
				}
				break;
			case UROWID_VK:
				{
				alt579=52;
				}
				break;
			case VARCHAR2_VK:
				{
				alt579=53;
				}
				break;
			case VARCHAR_VK:
				{
				alt579=54;
				}
				break;
			case YEAR_VK:
				{
				alt579=55;
				}
				break;
			case YMINTERVAL_UNCONSTRAINED_VK:
				{
				alt579=56;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 579, 0, input);
				throw nvae;
			}
			switch (alt579) {
				case 1 :
					// PLSQLPrinter.g:2330:10: BFILE_VK
					{
					match(input,BFILE_VK,FOLLOW_BFILE_VK_in_native_datatype_spec23546); 
					 typeBaseName = "bfile"; 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2331:10: BINARY_FLOAT_VK
					{
					match(input,BINARY_FLOAT_VK,FOLLOW_BINARY_FLOAT_VK_in_native_datatype_spec23559); 
					 typeBaseName = "binary_float"; 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:2332:10: BINARY_INTEGER_VK
					{
					match(input,BINARY_INTEGER_VK,FOLLOW_BINARY_INTEGER_VK_in_native_datatype_spec23572); 
					 typeBaseName = "binary_integer"; 
					}
					break;
				case 4 :
					// PLSQLPrinter.g:2333:10: BLOB_VK
					{
					match(input,BLOB_VK,FOLLOW_BLOB_VK_in_native_datatype_spec23585); 
					 typeBaseName = "blob"; 
					}
					break;
				case 5 :
					// PLSQLPrinter.g:2334:10: BOOLEAN_VK
					{
					match(input,BOOLEAN_VK,FOLLOW_BOOLEAN_VK_in_native_datatype_spec23598); 
					 typeBaseName = "boolean"; 
					}
					break;
				case 6 :
					// PLSQLPrinter.g:2335:10: CHARACTER_VK
					{
					match(input,CHARACTER_VK,FOLLOW_CHARACTER_VK_in_native_datatype_spec23611); 
					 typeBaseName = "character"; 
					}
					break;
				case 7 :
					// PLSQLPrinter.g:2336:10: CHAR_VK
					{
					match(input,CHAR_VK,FOLLOW_CHAR_VK_in_native_datatype_spec23625); 
					 typeBaseName = "char"; 
					}
					break;
				case 8 :
					// PLSQLPrinter.g:2337:10: CLOB_VK
					{
					match(input,CLOB_VK,FOLLOW_CLOB_VK_in_native_datatype_spec23638); 
					 typeBaseName = "clob"; 
					}
					break;
				case 9 :
					// PLSQLPrinter.g:2338:10: DATE_VK
					{
					match(input,DATE_VK,FOLLOW_DATE_VK_in_native_datatype_spec23651); 
					 typeBaseName = "date"; 
					}
					break;
				case 10 :
					// PLSQLPrinter.g:2339:10: SQL92_RESERVED_DATE
					{
					match(input,SQL92_RESERVED_DATE,FOLLOW_SQL92_RESERVED_DATE_in_native_datatype_spec23664); 
					 typeBaseName = "date"; 
					}
					break;
				case 11 :
					// PLSQLPrinter.g:2340:10: DAY_VK
					{
					match(input,DAY_VK,FOLLOW_DAY_VK_in_native_datatype_spec23677); 
					}
					break;
				case 12 :
					// PLSQLPrinter.g:2341:10: DECIMAL_VK
					{
					match(input,DECIMAL_VK,FOLLOW_DECIMAL_VK_in_native_datatype_spec23688); 
					 typeBaseName = "decimal"; 
					}
					break;
				case 13 :
					// PLSQLPrinter.g:2342:10: DEC_VK
					{
					match(input,DEC_VK,FOLLOW_DEC_VK_in_native_datatype_spec23702); 
					 typeBaseName = "dec"; 
					}
					break;
				case 14 :
					// PLSQLPrinter.g:2343:10: DOUBLE_VK
					{
					match(input,DOUBLE_VK,FOLLOW_DOUBLE_VK_in_native_datatype_spec23715); 
					 typeBaseName = "double"; 
					}
					break;
				case 15 :
					// PLSQLPrinter.g:2344:10: DOUBLE_VK PRECISION_VK
					{
					match(input,DOUBLE_VK,FOLLOW_DOUBLE_VK_in_native_datatype_spec23728); 
					match(input,PRECISION_VK,FOLLOW_PRECISION_VK_in_native_datatype_spec23730); 
					 typeBaseName = "double precision"; 
					}
					break;
				case 16 :
					// PLSQLPrinter.g:2345:10: DSINTERVAL_UNCONSTRAINED_VK
					{
					match(input,DSINTERVAL_UNCONSTRAINED_VK,FOLLOW_DSINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec23743); 
					}
					break;
				case 17 :
					// PLSQLPrinter.g:2346:10: FLOAT_VK
					{
					match(input,FLOAT_VK,FOLLOW_FLOAT_VK_in_native_datatype_spec23754); 
					 typeBaseName = "float"; 
					}
					break;
				case 18 :
					// PLSQLPrinter.g:2347:10: HOUR_VK
					{
					match(input,HOUR_VK,FOLLOW_HOUR_VK_in_native_datatype_spec23767); 
					}
					break;
				case 19 :
					// PLSQLPrinter.g:2348:10: INTEGER_VK
					{
					match(input,INTEGER_VK,FOLLOW_INTEGER_VK_in_native_datatype_spec23778); 
					 typeBaseName = "integer"; 
					}
					break;
				case 20 :
					// PLSQLPrinter.g:2349:10: INT_VK
					{
					match(input,INT_VK,FOLLOW_INT_VK_in_native_datatype_spec23791); 
					 typeBaseName = "int"; 
					}
					break;
				case 21 :
					// PLSQLPrinter.g:2350:10: LONG_VK
					{
					match(input,LONG_VK,FOLLOW_LONG_VK_in_native_datatype_spec23804); 
					 typeBaseName = "long"; 
					}
					break;
				case 22 :
					// PLSQLPrinter.g:2351:10: LONG_VK RAW_VK
					{
					match(input,LONG_VK,FOLLOW_LONG_VK_in_native_datatype_spec23817); 
					match(input,RAW_VK,FOLLOW_RAW_VK_in_native_datatype_spec23819); 
					 typeBaseName = "long raw"; 
					}
					break;
				case 23 :
					// PLSQLPrinter.g:2352:10: MINUTE_VK
					{
					match(input,MINUTE_VK,FOLLOW_MINUTE_VK_in_native_datatype_spec23832); 
					}
					break;
				case 24 :
					// PLSQLPrinter.g:2353:10: MLSLABEL_VK
					{
					match(input,MLSLABEL_VK,FOLLOW_MLSLABEL_VK_in_native_datatype_spec23843); 
					}
					break;
				case 25 :
					// PLSQLPrinter.g:2354:10: MONTH_VK
					{
					match(input,MONTH_VK,FOLLOW_MONTH_VK_in_native_datatype_spec23854); 
					}
					break;
				case 26 :
					// PLSQLPrinter.g:2355:10: NATURALN_VK
					{
					match(input,NATURALN_VK,FOLLOW_NATURALN_VK_in_native_datatype_spec23865); 
					}
					break;
				case 27 :
					// PLSQLPrinter.g:2356:10: NATURAL_VK
					{
					match(input,NATURAL_VK,FOLLOW_NATURAL_VK_in_native_datatype_spec23876); 
					}
					break;
				case 28 :
					// PLSQLPrinter.g:2357:10: NCHAR_VK
					{
					match(input,NCHAR_VK,FOLLOW_NCHAR_VK_in_native_datatype_spec23887); 
					 typeBaseName = "nchar"; 
					}
					break;
				case 29 :
					// PLSQLPrinter.g:2358:10: NCLOB_VK
					{
					match(input,NCLOB_VK,FOLLOW_NCLOB_VK_in_native_datatype_spec23900); 
					 typeBaseName = "nclob"; 
					}
					break;
				case 30 :
					// PLSQLPrinter.g:2359:10: NUMBER_VK
					{
					match(input,NUMBER_VK,FOLLOW_NUMBER_VK_in_native_datatype_spec23913); 
					 typeBaseName = "number"; 
					}
					break;
				case 31 :
					// PLSQLPrinter.g:2360:10: NUMERIC_VK
					{
					match(input,NUMERIC_VK,FOLLOW_NUMERIC_VK_in_native_datatype_spec23926); 
					 typeBaseName = "numeric"; 
					}
					break;
				case 32 :
					// PLSQLPrinter.g:2361:10: NVARCHAR2_VK
					{
					match(input,NVARCHAR2_VK,FOLLOW_NVARCHAR2_VK_in_native_datatype_spec23939); 
					 typeBaseName = "nvarchar2"; 
					}
					break;
				case 33 :
					// PLSQLPrinter.g:2362:10: PLS_INTEGER_VK
					{
					match(input,PLS_INTEGER_VK,FOLLOW_PLS_INTEGER_VK_in_native_datatype_spec23952); 
					 typeBaseName = "pls_integer"; 
					}
					break;
				case 34 :
					// PLSQLPrinter.g:2363:10: POSITIVEN_VK
					{
					match(input,POSITIVEN_VK,FOLLOW_POSITIVEN_VK_in_native_datatype_spec23965); 
					}
					break;
				case 35 :
					// PLSQLPrinter.g:2364:10: POSITIVE_VK
					{
					match(input,POSITIVE_VK,FOLLOW_POSITIVE_VK_in_native_datatype_spec23976); 
					}
					break;
				case 36 :
					// PLSQLPrinter.g:2365:10: RAW_VK
					{
					match(input,RAW_VK,FOLLOW_RAW_VK_in_native_datatype_spec23987); 
					 typeBaseName = "raw"; 
					}
					break;
				case 37 :
					// PLSQLPrinter.g:2366:10: REAL_VK
					{
					match(input,REAL_VK,FOLLOW_REAL_VK_in_native_datatype_spec24000); 
					}
					break;
				case 38 :
					// PLSQLPrinter.g:2367:10: ROWID_VK
					{
					match(input,ROWID_VK,FOLLOW_ROWID_VK_in_native_datatype_spec24011); 
					 typeBaseName = "rowid"; 
					}
					break;
				case 39 :
					// PLSQLPrinter.g:2368:10: SECOND_VK
					{
					match(input,SECOND_VK,FOLLOW_SECOND_VK_in_native_datatype_spec24024); 
					}
					break;
				case 40 :
					// PLSQLPrinter.g:2369:10: SIGNTYPE_VK
					{
					match(input,SIGNTYPE_VK,FOLLOW_SIGNTYPE_VK_in_native_datatype_spec24035); 
					}
					break;
				case 41 :
					// PLSQLPrinter.g:2370:10: SIMPLE_INTEGER_VK
					{
					match(input,SIMPLE_INTEGER_VK,FOLLOW_SIMPLE_INTEGER_VK_in_native_datatype_spec24046); 
					}
					break;
				case 42 :
					// PLSQLPrinter.g:2371:10: SMALLINT_VK
					{
					match(input,SMALLINT_VK,FOLLOW_SMALLINT_VK_in_native_datatype_spec24057); 
					 typeBaseName = "smallint"; 
					}
					break;
				case 43 :
					// PLSQLPrinter.g:2372:10: STRING_VK
					{
					match(input,STRING_VK,FOLLOW_STRING_VK_in_native_datatype_spec24070); 
					}
					break;
				case 44 :
					// PLSQLPrinter.g:2373:10: TIMESTAMP_LTZ_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_LTZ_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_LTZ_UNCONSTRAINED_VK_in_native_datatype_spec24081); 
					}
					break;
				case 45 :
					// PLSQLPrinter.g:2374:10: TIMESTAMP_TZ_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_TZ_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_TZ_UNCONSTRAINED_VK_in_native_datatype_spec24092); 
					}
					break;
				case 46 :
					// PLSQLPrinter.g:2375:10: TIMESTAMP_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_UNCONSTRAINED_VK_in_native_datatype_spec24103); 
					}
					break;
				case 47 :
					// PLSQLPrinter.g:2376:10: TIMESTAMP_VK
					{
					match(input,TIMESTAMP_VK,FOLLOW_TIMESTAMP_VK_in_native_datatype_spec24114); 
					 typeBaseName = "timestamp"; 
					}
					break;
				case 48 :
					// PLSQLPrinter.g:2377:10: TIMEZONE_ABBR_VK
					{
					match(input,TIMEZONE_ABBR_VK,FOLLOW_TIMEZONE_ABBR_VK_in_native_datatype_spec24127); 
					}
					break;
				case 49 :
					// PLSQLPrinter.g:2378:10: TIMEZONE_HOUR_VK
					{
					match(input,TIMEZONE_HOUR_VK,FOLLOW_TIMEZONE_HOUR_VK_in_native_datatype_spec24138); 
					}
					break;
				case 50 :
					// PLSQLPrinter.g:2379:10: TIMEZONE_MINUTE_VK
					{
					match(input,TIMEZONE_MINUTE_VK,FOLLOW_TIMEZONE_MINUTE_VK_in_native_datatype_spec24149); 
					}
					break;
				case 51 :
					// PLSQLPrinter.g:2380:10: TIMEZONE_REGION_VK
					{
					match(input,TIMEZONE_REGION_VK,FOLLOW_TIMEZONE_REGION_VK_in_native_datatype_spec24160); 
					}
					break;
				case 52 :
					// PLSQLPrinter.g:2381:10: UROWID_VK
					{
					match(input,UROWID_VK,FOLLOW_UROWID_VK_in_native_datatype_spec24171); 
					 typeBaseName = "urowid"; 
					}
					break;
				case 53 :
					// PLSQLPrinter.g:2382:10: VARCHAR2_VK
					{
					match(input,VARCHAR2_VK,FOLLOW_VARCHAR2_VK_in_native_datatype_spec24184); 
					 typeBaseName = "varchar2"; 
					}
					break;
				case 54 :
					// PLSQLPrinter.g:2383:10: VARCHAR_VK
					{
					match(input,VARCHAR_VK,FOLLOW_VARCHAR_VK_in_native_datatype_spec24197); 
					 typeBaseName = "varchar"; 
					}
					break;
				case 55 :
					// PLSQLPrinter.g:2384:10: YEAR_VK
					{
					match(input,YEAR_VK,FOLLOW_YEAR_VK_in_native_datatype_spec24210); 
					}
					break;
				case 56 :
					// PLSQLPrinter.g:2385:10: YMINTERVAL_UNCONSTRAINED_VK
					{
					match(input,YMINTERVAL_UNCONSTRAINED_VK,FOLLOW_YMINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec24221); 
					}
					break;

			}

			// PLSQLPrinter.g:2386:9: (prec= type_precision )?
			int alt580=2;
			int LA580_0 = input.LA(1);
			if ( (LA580_0==PRECISION) ) {
				alt580=1;
			}
			switch (alt580) {
				case 1 :
					// PLSQLPrinter.g:2386:9: prec= type_precision
					{
					pushFollow(FOLLOW_type_precision_in_native_datatype_spec24230);
					prec=type_precision();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2387:5: (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )?
			int alt582=2;
			int LA582_0 = input.LA(1);
			if ( (LA582_0==TIME_VK) ) {
				alt582=1;
			}
			switch (alt582) {
				case 1 :
					// PLSQLPrinter.g:2387:6: is_tz= TIME_VK (is_tz_local= LOCAL_VK )?
					{
					is_tz=(CommonTree)match(input,TIME_VK,FOLLOW_TIME_VK_in_native_datatype_spec24240); 
					// PLSQLPrinter.g:2387:31: (is_tz_local= LOCAL_VK )?
					int alt581=2;
					int LA581_0 = input.LA(1);
					if ( (LA581_0==LOCAL_VK) ) {
						alt581=1;
					}
					switch (alt581) {
						case 1 :
							// PLSQLPrinter.g:2387:31: is_tz_local= LOCAL_VK
							{
							is_tz_local=(CommonTree)match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_native_datatype_spec24244); 
							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			 if (typeBaseName == null) { typeBaseName = "Unsupported datatype"; } 
			// TEMPLATE REWRITE
			// 2390:5: -> base_type_spec(baseName=typeBaseNameprecision=$prec.stis_with_time_zone=$is_tz != nullis_time_zone_local=$is_tz_local != null)
			{
				retval.st = templateLib.getInstanceOf("base_type_spec",new STAttrMap().put("baseName", typeBaseName).put("precision", (prec!=null?((StringTemplate)prec.getTemplate()):null)).put("is_with_time_zone", is_tz != null).put("is_time_zone_local", is_tz_local != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "native_datatype_spec"


	public static class general_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_element"
	// PLSQLPrinter.g:2396:1: general_element : ^( CASCATED_ELEMENT ( general_element_id | function_argument )+ ) -> general_element(parts=parts);
	public final PLSQLPrinter.general_element_return general_element() throws RecognitionException {
		PLSQLPrinter.general_element_return retval = new PLSQLPrinter.general_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope general_element_id267 =null;
		TreeRuleReturnScope function_argument268 =null;


		    List<StringTemplate> parts = new ArrayList<StringTemplate>();

		try {
			// PLSQLPrinter.g:2400:5: ( ^( CASCATED_ELEMENT ( general_element_id | function_argument )+ ) -> general_element(parts=parts))
			// PLSQLPrinter.g:2400:10: ^( CASCATED_ELEMENT ( general_element_id | function_argument )+ )
			{
			match(input,CASCATED_ELEMENT,FOLLOW_CASCATED_ELEMENT_in_general_element24319); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2401:13: ( general_element_id | function_argument )+
			int cnt583=0;
			loop583:
			while (true) {
				int alt583=3;
				int LA583_0 = input.LA(1);
				if ( (LA583_0==ANY_ELEMENT) ) {
					alt583=1;
				}
				else if ( (LA583_0==ARGUMENTS) ) {
					alt583=2;
				}

				switch (alt583) {
				case 1 :
					// PLSQLPrinter.g:2402:15: general_element_id
					{
					pushFollow(FOLLOW_general_element_id_in_general_element24349);
					general_element_id267=general_element_id();
					state._fsp--;


					                if (parts.size() > 0) {
					                   parts.add(templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", ".")));
					                }
					                parts.add((general_element_id267!=null?((StringTemplate)general_element_id267.getTemplate()):null));
					              
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2408:17: function_argument
					{
					pushFollow(FOLLOW_function_argument_in_general_element24369);
					function_argument268=function_argument();
					state._fsp--;

					 parts.add((function_argument268!=null?((StringTemplate)function_argument268.getTemplate()):null)); 
					}
					break;

				default :
					if ( cnt583 >= 1 ) break loop583;
					EarlyExitException eee = new EarlyExitException(583, input);
					throw eee;
				}
				cnt583++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2411:5: -> general_element(parts=parts)
			{
				retval.st = templateLib.getInstanceOf("general_element",new STAttrMap().put("parts", parts));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_element"


	public static class general_element_id_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_element_id"
	// PLSQLPrinter.g:2414:1: general_element_id : ^( ANY_ELEMENT ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.general_element_id_return general_element_id() throws RecognitionException {
		PLSQLPrinter.general_element_id_return retval = new PLSQLPrinter.general_element_id_return();
		retval.start = input.LT(1);

		CommonTree ID269=null;

		try {
			// PLSQLPrinter.g:2415:5: ( ^( ANY_ELEMENT ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2415:7: ^( ANY_ELEMENT ID )
			{
			match(input,ANY_ELEMENT,FOLLOW_ANY_ELEMENT_in_general_element_id24432); 
			match(input, Token.DOWN, null); 
			ID269=(CommonTree)match(input,ID,FOLLOW_ID_in_general_element_id24434); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2415:25: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID269!=null?ID269.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_element_id"


	public static class constant_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constant"
	// PLSQLPrinter.g:2422:1: constant : (v1= UNSIGNED_INTEGER -> string_literal(val=$v1.text)| ^( MINUS_SIGN v2= UNSIGNED_INTEGER ) -> string_literal(val=\"-\" + $v2.text)| EXACT_NUM_LIT -> string_literal(val=$EXACT_NUM_LIT.text)| APPROXIMATE_NUM_LIT -> string_literal(val=$APPROXIMATE_NUM_LIT.text)| CHAR_STRING -> string_literal(val=$CHAR_STRING.text)| SQL92_RESERVED_NULL -> string_literal(val=\"null\")| SQL92_RESERVED_TRUE -> string_literal(val=\"true\")| SQL92_RESERVED_FALSE -> string_literal(val=\"false\")| DBTIMEZONE_VK -> string_literal(val=\"dbtimezone\")| SESSIONTIMEZONE_VK -> string_literal(val=\"sessiontimezone\")| MINVALUE_VK -> string_literal(val=\"minvalue\")| MAXVALUE_VK -> string_literal(val=\"maxvalue\")| SQL92_RESERVED_DEFAULT -> string_literal(val=\"default\"));
	public final PLSQLPrinter.constant_return constant() throws RecognitionException {
		PLSQLPrinter.constant_return retval = new PLSQLPrinter.constant_return();
		retval.start = input.LT(1);

		CommonTree v1=null;
		CommonTree v2=null;
		CommonTree EXACT_NUM_LIT270=null;
		CommonTree APPROXIMATE_NUM_LIT271=null;
		CommonTree CHAR_STRING272=null;

		try {
			// PLSQLPrinter.g:2423:5: (v1= UNSIGNED_INTEGER -> string_literal(val=$v1.text)| ^( MINUS_SIGN v2= UNSIGNED_INTEGER ) -> string_literal(val=\"-\" + $v2.text)| EXACT_NUM_LIT -> string_literal(val=$EXACT_NUM_LIT.text)| APPROXIMATE_NUM_LIT -> string_literal(val=$APPROXIMATE_NUM_LIT.text)| CHAR_STRING -> string_literal(val=$CHAR_STRING.text)| SQL92_RESERVED_NULL -> string_literal(val=\"null\")| SQL92_RESERVED_TRUE -> string_literal(val=\"true\")| SQL92_RESERVED_FALSE -> string_literal(val=\"false\")| DBTIMEZONE_VK -> string_literal(val=\"dbtimezone\")| SESSIONTIMEZONE_VK -> string_literal(val=\"sessiontimezone\")| MINVALUE_VK -> string_literal(val=\"minvalue\")| MAXVALUE_VK -> string_literal(val=\"maxvalue\")| SQL92_RESERVED_DEFAULT -> string_literal(val=\"default\"))
			int alt584=13;
			switch ( input.LA(1) ) {
			case UNSIGNED_INTEGER:
				{
				alt584=1;
				}
				break;
			case MINUS_SIGN:
				{
				alt584=2;
				}
				break;
			case EXACT_NUM_LIT:
				{
				alt584=3;
				}
				break;
			case APPROXIMATE_NUM_LIT:
				{
				alt584=4;
				}
				break;
			case CHAR_STRING:
				{
				alt584=5;
				}
				break;
			case SQL92_RESERVED_NULL:
				{
				alt584=6;
				}
				break;
			case SQL92_RESERVED_TRUE:
				{
				alt584=7;
				}
				break;
			case SQL92_RESERVED_FALSE:
				{
				alt584=8;
				}
				break;
			case DBTIMEZONE_VK:
				{
				alt584=9;
				}
				break;
			case SESSIONTIMEZONE_VK:
				{
				alt584=10;
				}
				break;
			case MINVALUE_VK:
				{
				alt584=11;
				}
				break;
			case MAXVALUE_VK:
				{
				alt584=12;
				}
				break;
			case SQL92_RESERVED_DEFAULT:
				{
				alt584=13;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 584, 0, input);
				throw nvae;
			}
			switch (alt584) {
				case 1 :
					// PLSQLPrinter.g:2423:10: v1= UNSIGNED_INTEGER
					{
					v1=(CommonTree)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_constant24470); 
					// TEMPLATE REWRITE
					// 2423:30: -> string_literal(val=$v1.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (v1!=null?v1.getText():null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2424:10: ^( MINUS_SIGN v2= UNSIGNED_INTEGER )
					{
					match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_constant24491); 
					match(input, Token.DOWN, null); 
					v2=(CommonTree)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_constant24495); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2424:44: -> string_literal(val=\"-\" + $v2.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "-" + (v2!=null?v2.getText():null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:2425:10: EXACT_NUM_LIT
					{
					EXACT_NUM_LIT270=(CommonTree)match(input,EXACT_NUM_LIT,FOLLOW_EXACT_NUM_LIT_in_constant24516); 
					// TEMPLATE REWRITE
					// 2425:24: -> string_literal(val=$EXACT_NUM_LIT.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (EXACT_NUM_LIT270!=null?EXACT_NUM_LIT270.getText():null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:2426:10: APPROXIMATE_NUM_LIT
					{
					APPROXIMATE_NUM_LIT271=(CommonTree)match(input,APPROXIMATE_NUM_LIT,FOLLOW_APPROXIMATE_NUM_LIT_in_constant24536); 
					// TEMPLATE REWRITE
					// 2426:30: -> string_literal(val=$APPROXIMATE_NUM_LIT.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (APPROXIMATE_NUM_LIT271!=null?APPROXIMATE_NUM_LIT271.getText():null)));
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:2427:10: CHAR_STRING
					{
					CHAR_STRING272=(CommonTree)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_constant24556); 
					// TEMPLATE REWRITE
					// 2427:22: -> string_literal(val=$CHAR_STRING.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (CHAR_STRING272!=null?CHAR_STRING272.getText():null)));
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:2428:10: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_constant24576); 
					// TEMPLATE REWRITE
					// 2428:30: -> string_literal(val=\"null\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "null"));
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:2429:10: SQL92_RESERVED_TRUE
					{
					match(input,SQL92_RESERVED_TRUE,FOLLOW_SQL92_RESERVED_TRUE_in_constant24596); 
					// TEMPLATE REWRITE
					// 2429:30: -> string_literal(val=\"true\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "true"));
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:2430:10: SQL92_RESERVED_FALSE
					{
					match(input,SQL92_RESERVED_FALSE,FOLLOW_SQL92_RESERVED_FALSE_in_constant24616); 
					// TEMPLATE REWRITE
					// 2430:31: -> string_literal(val=\"false\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "false"));
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:2431:10: DBTIMEZONE_VK
					{
					match(input,DBTIMEZONE_VK,FOLLOW_DBTIMEZONE_VK_in_constant24636); 
					// TEMPLATE REWRITE
					// 2431:25: -> string_literal(val=\"dbtimezone\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "dbtimezone"));
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:2432:10: SESSIONTIMEZONE_VK
					{
					match(input,SESSIONTIMEZONE_VK,FOLLOW_SESSIONTIMEZONE_VK_in_constant24657); 
					// TEMPLATE REWRITE
					// 2432:29: -> string_literal(val=\"sessiontimezone\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "sessiontimezone"));
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:2433:10: MINVALUE_VK
					{
					match(input,MINVALUE_VK,FOLLOW_MINVALUE_VK_in_constant24677); 
					// TEMPLATE REWRITE
					// 2433:22: -> string_literal(val=\"minvalue\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "minvalue"));
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:2434:10: MAXVALUE_VK
					{
					match(input,MAXVALUE_VK,FOLLOW_MAXVALUE_VK_in_constant24697); 
					// TEMPLATE REWRITE
					// 2434:22: -> string_literal(val=\"maxvalue\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "maxvalue"));
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:2435:10: SQL92_RESERVED_DEFAULT
					{
					match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_constant24717); 
					// TEMPLATE REWRITE
					// 2435:33: -> string_literal(val=\"default\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "default"));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constant"


	public static class id_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "id"
	// PLSQLPrinter.g:2440:1: id : ( char_set_name )? ID -> string_literal(val=$ID.text);
	public final PLSQLPrinter.id_return id() throws RecognitionException {
		PLSQLPrinter.id_return retval = new PLSQLPrinter.id_return();
		retval.start = input.LT(1);

		CommonTree ID273=null;

		try {
			// PLSQLPrinter.g:2441:5: ( ( char_set_name )? ID -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2441:10: ( char_set_name )? ID
			{
			// PLSQLPrinter.g:2441:10: ( char_set_name )?
			int alt585=2;
			int LA585_0 = input.LA(1);
			if ( (LA585_0==CHAR_SET_NAME) ) {
				alt585=1;
			}
			switch (alt585) {
				case 1 :
					// PLSQLPrinter.g:2441:10: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_id24748);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID273=(CommonTree)match(input,ID,FOLLOW_ID_in_id24751); 
			// TEMPLATE REWRITE
			// 2442:5: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID273!=null?ID273.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "id"

	// Delegated rules


	protected DFA182 dfa182 = new DFA182(this);
	protected DFA315 dfa315 = new DFA315(this);
	static final String DFA182_eotS =
		"\11\uffff";
	static final String DFA182_eofS =
		"\11\uffff";
	static final String DFA182_minS =
		"\1\u0251\1\2\1\u0305\1\2\1\u018e\2\3\2\uffff";
	static final String DFA182_maxS =
		"\1\u0251\1\2\1\u0305\1\2\2\u018e\1\u0256\2\uffff";
	static final String DFA182_acceptS =
		"\7\uffff\1\1\1\2";
	static final String DFA182_specialS =
		"\11\uffff}>";
	static final String[] DFA182_transitionS = {
			"\1\1",
			"\1\2",
			"\1\3",
			"\1\4",
			"\1\5",
			"\1\6\u018a\uffff\1\5",
			"\1\7\u016a\uffff\1\7\u00e7\uffff\1\10",
			"",
			""
	};

	static final short[] DFA182_eot = DFA.unpackEncodedString(DFA182_eotS);
	static final short[] DFA182_eof = DFA.unpackEncodedString(DFA182_eofS);
	static final char[] DFA182_min = DFA.unpackEncodedStringToUnsignedChars(DFA182_minS);
	static final char[] DFA182_max = DFA.unpackEncodedStringToUnsignedChars(DFA182_maxS);
	static final short[] DFA182_accept = DFA.unpackEncodedString(DFA182_acceptS);
	static final short[] DFA182_special = DFA.unpackEncodedString(DFA182_specialS);
	static final short[][] DFA182_transition;

	static {
		int numStates = DFA182_transitionS.length;
		DFA182_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA182_transition[i] = DFA.unpackEncodedString(DFA182_transitionS[i]);
		}
	}

	protected class DFA182 extends DFA {

		public DFA182(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 182;
			this.eot = DFA182_eot;
			this.eof = DFA182_eof;
			this.min = DFA182_min;
			this.max = DFA182_max;
			this.accept = DFA182_accept;
			this.special = DFA182_special;
			this.transition = DFA182_transition;
		}
		@Override
		public String getDescription() {
			return "823:1: record_type_dec : ( record_type_dec_record -> { $record_type_dec_record.st }| record_type_dec_refcursor -> { $record_type_dec_refcursor.st });";
		}
	}

	static final String DFA315_eotS =
		"\16\uffff";
	static final String DFA315_eofS =
		"\16\uffff";
	static final String DFA315_minS =
		"\1\u00c9\1\2\1\uffff\1\u0103\1\2\1\u00f5\1\2\1\3\1\u018e\1\u0103\1\3\2"+
		"\uffff\1\u018e";
	static final String DFA315_maxS =
		"\1\u0315\1\2\1\uffff\1\u0103\1\2\1\u018e\1\2\2\u018e\1\u02e8\1\u018e\2"+
		"\uffff\1\u018e";
	static final String DFA315_acceptS =
		"\2\uffff\1\3\10\uffff\1\1\1\2\1\uffff";
	static final String DFA315_specialS =
		"\16\uffff}>";
	static final String[] DFA315_transitionS = {
			"\1\1\u024b\uffff\1\2",
			"\1\3",
			"",
			"\1\4",
			"\1\5",
			"\1\6\u0098\uffff\1\7",
			"\1\10",
			"\1\11\u018a\uffff\1\7",
			"\1\12",
			"\1\14\144\uffff\1\13\141\uffff\1\13\u011d\uffff\1\14",
			"\1\15\u018a\uffff\1\12",
			"",
			"",
			"\1\7"
	};

	static final short[] DFA315_eot = DFA.unpackEncodedString(DFA315_eotS);
	static final short[] DFA315_eof = DFA.unpackEncodedString(DFA315_eofS);
	static final char[] DFA315_min = DFA.unpackEncodedStringToUnsignedChars(DFA315_minS);
	static final char[] DFA315_max = DFA.unpackEncodedStringToUnsignedChars(DFA315_maxS);
	static final short[] DFA315_accept = DFA.unpackEncodedString(DFA315_acceptS);
	static final short[] DFA315_special = DFA.unpackEncodedString(DFA315_specialS);
	static final short[][] DFA315_transition;

	static {
		int numStates = DFA315_transitionS.length;
		DFA315_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA315_transition[i] = DFA.unpackEncodedString(DFA315_transitionS[i]);
		}
	}

	protected class DFA315 extends DFA {

		public DFA315(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 315;
			this.eot = DFA315_eot;
			this.eof = DFA315_eof;
			this.min = DFA315_min;
			this.max = DFA315_max;
			this.accept = DFA315_accept;
			this.special = DFA315_special;
			this.transition = DFA315_transition;
		}
		@Override
		public String getDescription() {
			return "1421:1: update_set_elements : ( ^( ASSIGN column_name expression ) -> update_set_element_column_expr(column_name=$column_name.stexpression=$expression.st)| ^( ASSIGN (names+= column_name )+ subquery ) -> update_set_element_columns_subquery(column_names=$namessubquery=$subquery.st)| ^( VALUE_VK ( char_set_name )? ID expression ) -> update_set_element_column_value(column_name=$ID.textexpression=$expression.st));";
		}
	}

	public static final BitSet FOLLOW_COMPILATION_UNIT_in_compilation_unit69 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unit_statement_in_compilation_unit73 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0xC800000000000000L,0x0000000000000007L,0x0000001FE0000000L,0x00000000000FC000L});
	public static final BitSet FOLLOW_SQL_SCRIPT_in_sql_script112 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unit_statement_in_sql_script116 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0xC800000000000000L,0x0000000000000007L,0x0000001FE0000000L,0x00000000000FC000L});
	public static final BitSet FOLLOW_SET_SERVEROUTPUT_in_serveroutput_declaration155 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_serveroutput_declaration158 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OFF_VK_in_serveroutput_declaration160 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_alter_function_in_unit_statement196 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_package_in_unit_statement211 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_procedure_in_unit_statement226 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_sequence_in_unit_statement241 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_trigger_in_unit_statement256 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_type_in_unit_statement271 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_unit_statement286 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_unit_statement301 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_package_in_unit_statement316 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_sequence_in_unit_statement331 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_trigger_in_unit_statement346 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_unit_statement361 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_function_in_unit_statement376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_package_in_unit_statement391 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_procedure_in_unit_statement406 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_sequence_in_unit_statement421 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_trigger_in_unit_statement436 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_type_in_unit_statement451 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_FUNCTION_in_drop_function480 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_name_in_drop_function482 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_FUNCTION_in_alter_function518 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_name_in_alter_function520 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_function522 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_function525 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_function528 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_FUNCTION_in_create_function_body565 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_create_function_body567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_function_body570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_FUNCTION_NAME_in_create_function_body574 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_create_function_body578 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_type_spec_in_create_function_body584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_create_function_body587 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_create_function_body591 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_function_body609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101000040000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000010001000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_parallel_enable_clause_in_create_function_body614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000010001000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_result_cache_clause_in_create_function_body619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_DETERMINISTIC_VK_in_create_function_body622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_PIPELINED_VK_in_create_function_body625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_USING_MODE_in_create_function_body646 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_AGGREGATE_VK_in_create_function_body648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_implementation_type_name_in_create_function_body651 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CALL_MODE_in_create_function_body686 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_create_function_body688 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_create_function_body723 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_create_function_body725 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARALLEL_ENABLE_VK_in_parallel_enable_clause896 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_partition_by_clause_in_parallel_enable_clause898 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARTITION_VK_in_partition_by_clause935 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_partition_by_clause937 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_partition_by_clause957 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_HASH_VK_in_partition_by_clause977 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_partition_by_clause980 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_partition_by_clause982 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_RANGE_VK_in_partition_by_clause1005 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_partition_by_clause1008 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_partition_by_clause1010 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_streaming_clause_in_partition_by_clause1042 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RESULT_CACHE_VK_in_result_cache_clause1088 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_relies_on_part_in_result_cache_clause1090 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RELIES_ON_VK_in_relies_on_part1127 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_relies_on_part1129 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_STREAMING_CLAUSE_in_streaming_clause1166 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_streaming_clause1169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CLUSTER_VK_in_streaming_clause1171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_streaming_clause1174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_COLUMNS_in_streaming_clause1177 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_streaming_clause1179 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_PACKAGE_in_drop_package1222 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_package_name_in_drop_package1224 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_BODY_VK_in_drop_package1226 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_PACKAGE_in_alter_package1263 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_package_name_in_alter_package1265 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0040000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000100000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_package1267 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000100000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_package1270 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PACKAGE_VK_in_alter_package1291 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_BODY_VK_in_alter_package1293 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SPECIFICATION_VK_in_alter_package1295 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_package1299 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_PACKAGE_SPEC_in_create_package1336 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_package1338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_package_name_in_create_package1341 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L,0x0000040000000000L,0x0000000100000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000060102L,0x0000000000000000L,0x0006020000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_package1343 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000100000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000060102L,0x0000000000000000L,0x0006020000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_package_obj_spec_in_create_package1348 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000100000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000060102L,0x0000000000000000L,0x0006020000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_CREATE_PACKAGE_BODY_in_create_package1416 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_package1418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_package_name_in_create_package1421 = new BitSet(new long[]{0x0000000000000008L,0x1000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041920000000L,0x0000000100000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000060100L,0x0000000000000000L,0x0006020100000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_package_obj_body_in_create_package1425 = new BitSet(new long[]{0x0000000000000008L,0x1000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041920000000L,0x0000000100000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000060100L,0x0000000000000000L,0x0006020100000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_create_package1428 = new BitSet(new long[]{0x0000000000000008L,0x1000000000000000L});
	public static final BitSet FOLLOW_exception_clause_in_create_package1431 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_variable_declaration_in_package_obj_spec1524 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_package_obj_spec1540 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_package_obj_spec1556 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_package_obj_spec1572 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_package_obj_spec1588 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_package_obj_spec1604 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedure_spec_in_package_obj_spec1620 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_spec_in_package_obj_spec1636 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pragma_declaration_in_package_obj_spec1652 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_SPEC_in_procedure_spec1678 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_name_in_procedure_spec1680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_procedure_spec1683 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_procedure_spec1687 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_CALL_MODE_in_procedure_spec1705 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_procedure_spec1707 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_SPEC_in_function_spec1757 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_name_in_function_spec1759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_function_spec1761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_function_spec1764 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_function_spec1768 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_PIPELINED_VK_in_function_spec1784 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RESULT_CACHE_VK_in_function_spec1787 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_DETERMINISTIC_VK_in_function_spec1790 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_procedure_spec_in_package_obj_body1885 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_spec_in_package_obj_body1901 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variable_declaration_in_package_obj_body1917 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_package_obj_body1933 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_package_obj_body1949 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_package_obj_body1965 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_package_obj_body1981 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_package_obj_body1997 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_package_obj_body2013 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_package_obj_body2029 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_package_obj_body2045 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_PROCEDURE_in_drop_procedure2076 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_name_in_drop_procedure2078 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_PROCEDURE_in_alter_procedure2114 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_name_in_alter_procedure2116 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_procedure2118 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_procedure2121 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_procedure2124 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_PROCEDURE_in_create_procedure_body2161 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_create_procedure_body2163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000080L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_procedure_body2166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_procedure_name_in_create_procedure_body2169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_create_procedure_body2172 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_create_procedure_body2176 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_procedure_body2180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_create_procedure_body_impl_in_create_procedure_body2194 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXTERNAL_VK_in_create_procedure_body_impl2288 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CALL_MODE_in_create_procedure_body_impl2310 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_create_procedure_body_impl2312 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_create_procedure_body_impl2347 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_create_procedure_body_impl2349 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_TRIGGER_in_drop_trigger2379 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_drop_trigger2381 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_TRIGGER_in_alter_trigger2417 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_alter_trigger2419 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000400L,0x0000000002000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000104000000L});
	public static final BitSet FOLLOW_ENABLE_VK_in_alter_trigger2440 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DISABLE_VK_in_alter_trigger2442 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RENAME_VK_in_alter_trigger2463 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_alter_trigger2465 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_trigger2485 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_trigger2488 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_trigger2491 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_TRIGGER_in_create_trigger2551 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_trigger2553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_trigger_name_in_create_trigger2556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000003000L,0x0020000002000040L,0x0000000000000000L,0x0400000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_simple_dml_trigger_in_create_trigger2572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000003000L,0x0020000002000040L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_compound_dml_trigger_in_create_trigger2575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000002000L,0x0020000002000040L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_non_dml_trigger_in_create_trigger2578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000002000L,0x0020000002000040L});
	public static final BitSet FOLLOW_trigger_follows_clause_in_create_trigger2593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000002000L,0x0000000002000040L});
	public static final BitSet FOLLOW_ENABLE_VK_in_create_trigger2597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_DISABLE_VK_in_create_trigger2599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_trigger_when_clause_in_create_trigger2603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000201000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_trigger_body_in_create_trigger2606 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOLLOWS_VK_in_trigger_follows_clause2642 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_trigger_follows_clause2644 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_trigger_when_clause2681 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_trigger_when_clause2683 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_DML_in_simple_dml_trigger2720 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BEFORE_VK_in_simple_dml_trigger2723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_AFTER_VK_in_simple_dml_trigger2725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_INSTEAD_VK_in_simple_dml_trigger2727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_FOR_EACH_ROW_in_simple_dml_trigger2730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_referencing_clause_in_simple_dml_trigger2733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_dml_event_clause_in_simple_dml_trigger2736 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPOUND_DML_in_compound_dml_trigger2772 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_referencing_clause_in_compound_dml_trigger2774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_dml_event_clause_in_compound_dml_trigger2777 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NON_DML_in_non_dml_trigger2813 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BEFORE_VK_in_non_dml_trigger2816 = new BitSet(new long[]{0x0000000000000000L,0x0201002000000000L,0x0000000000800008L,0x0000000000020408L,0x0031000000000020L,0x0020000000000080L,0x0000000000000000L,0x0008000000001800L,0x0000000000000000L,0x0008000004000000L,0x0000000000002040L,0x0000040080000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_AFTER_VK_in_non_dml_trigger2818 = new BitSet(new long[]{0x0000000000000000L,0x0201002000000000L,0x0000000000800008L,0x0000000000020408L,0x0031000000000020L,0x0020000000000080L,0x0000000000000000L,0x0008000000001800L,0x0000000000000000L,0x0008000004000000L,0x0000000000002040L,0x0000040080000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_non_dml_event_in_non_dml_trigger2821 = new BitSet(new long[]{0x0000000000000000L,0x0201002000000000L,0x0000000000800008L,0x0000000000020408L,0x0031000000000020L,0x0020000000000080L,0x0000000000000000L,0x0008000000001800L,0x0000000000000000L,0x000C000004000000L,0x0000000000002040L,0x0000040080000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_DATABASE_VK_in_non_dml_trigger2825 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_schema_name_in_non_dml_trigger2827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_SCHEMA_VK_in_non_dml_trigger2830 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPOUND_VK_in_trigger_body2867 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_trigger_body2869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0030000000000000L,0x0000000001800000L,0x0000041920000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060002L,0x0000000000000000L,0x0006020000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_declare_spec_in_trigger_body2871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0030000000000000L,0x0000000001800000L,0x0000041920000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060002L,0x0000000000000000L,0x0006020000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_timing_point_section_in_trigger_body2874 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0030000000000000L,0x0000000001800000L});
	public static final BitSet FOLLOW_CALL_VK_in_trigger_body2902 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_routine_name_in_trigger_body2904 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_function_argument_in_trigger_body2906 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_trigger_body2935 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_trigger_body2937 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BEFORE_STATEMENT_in_timing_point_section2973 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section2975 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BEFORE_EACH_ROW_in_timing_point_section3002 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section3004 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AFTER_STATEMENT_in_timing_point_section3031 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section3033 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AFTER_EACH_ROW_in_timing_point_section3060 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section3062 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALTER_in_non_dml_event3097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANALYZE_VK_in_non_dml_event3122 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASSOCIATE_VK_in_non_dml_event3147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_STATISTICS_VK_in_non_dml_event3149 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUDIT_VK_in_non_dml_event3174 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMENT_VK_in_non_dml_event3199 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_non_dml_event3224 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DISASSOCIATE_VK_in_non_dml_event3249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_STATISTICS_VK_in_non_dml_event3251 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DROP_in_non_dml_event3276 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GRANT_in_non_dml_event3301 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOAUDIT_VK_in_non_dml_event3326 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RENAME_VK_in_non_dml_event3351 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_REVOKE_in_non_dml_event3376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUNCATE_VK_in_non_dml_event3401 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DDL_VK_in_non_dml_event3426 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STARTUP_VK_in_non_dml_event3451 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SHUTDOWN_VK_in_non_dml_event3476 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DB_ROLE_CHANGE_VK_in_non_dml_event3501 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOGON_VK_in_non_dml_event3526 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOGOFF_VK_in_non_dml_event3551 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SERVERERROR_VK_in_non_dml_event3576 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SUSPEND_VK_in_non_dml_event3601 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATABASE_VK_in_non_dml_event3626 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SCHEMA_VK_in_non_dml_event3651 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOLLOWS_VK_in_non_dml_event3676 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DML_EVENT_in_dml_event_clause3711 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_dml_event_element_in_dml_event_clause3713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_dml_event_clause3717 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_event_clause3719 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_dml_event_nested_clause_in_dml_event_clause3721 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DML_EVENT_ELEMENT_in_dml_event_element3761 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_dml_event_element3764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INSERT_in_dml_event_element3766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_dml_event_element3768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_COLUMNS_in_dml_event_element3772 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_dml_event_element3774 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_NESTED_VK_in_dml_event_nested_clause3812 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_event_nested_clause3814 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCING_VK_in_referencing_clause3850 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_referencing_element_in_referencing_clause3852 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000020000800L});
	public static final BitSet FOLLOW_NEW_VK_in_referencing_element3890 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_OLD_VK_in_referencing_element3892 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PARENT_VK_in_referencing_element3894 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_referencing_element3897 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_TYPE_in_drop_type3938 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_drop_type3940 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_BODY_VK_in_drop_type3942 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_FORCE_VK_in_drop_type3945 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_VALIDATE_VK_in_drop_type3948 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_TYPE_in_alter_type3985 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_alter_type3987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1600000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_REPLACE_VK_in_alter_type4008 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_OBJECT_MEMBERS_in_alter_type4011 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_element_spec_in_alter_type4013 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_alter_type4017 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_ATTRIBUTE_in_alter_type4039 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ADD_VK_in_alter_type4042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_MODIFY_VK_in_alter_type4044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DROP_in_alter_type4046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_ATTRIBUTES_in_alter_type4050 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_attribute_definition_in_alter_type4052 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_ALTER_METHOD_in_alter_type4075 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alter_method_element_in_alter_type4077 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_alter_collection_clauses_in_alter_type4098 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_modifier_clause_in_alter_type4117 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_COMPILE_VK_in_alter_type4137 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SPECIFICATION_VK_in_alter_type4140 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_BODY_VK_in_alter_type4142 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_type4146 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_type4149 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_type4152 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_dependent_handling_clause_in_alter_type4183 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_METHOD_ELEMENT_in_alter_method_element4231 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ADD_VK_in_alter_method_element4234 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DROP_in_alter_method_element4236 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_map_order_function_spec_in_alter_method_element4239 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_subprogram_spec_in_alter_method_element4242 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ATTRIBUTE_in_attribute_definition4279 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_attribute_name_in_attribute_definition4281 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_attribute_definition4283 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_COLLECTION_in_alter_collection_clauses4320 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_TYPE_VK_in_alter_collection_clauses4341 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_alter_collection_clauses4343 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LIMIT_VK_in_alter_collection_clauses4364 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_alter_collection_clauses4366 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEPENDENT_HANDLING_in_dependent_handling_clause4427 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_INVALIDATE_VK_in_dependent_handling_clause4447 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CASCADE_VK_in_dependent_handling_clause4467 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CONVERT_VK_in_dependent_handling_clause4495 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_dependent_handling_clause4522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_INCLUDING_VK_in_dependent_handling_clause4525 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXCEPTIONS_VK_in_dependent_exceptions_part4625 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_FORCE_VK_in_dependent_exceptions_part4627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_tableview_name_in_dependent_exceptions_part4630 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CREATE_TYPE_BODY_in_create_type4668 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_type4670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_type_name_in_create_type4673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_TYPE_BODY_ELEMENTS_in_create_type4676 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_body_elements_in_create_type4678 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_CREATE_TYPE_SPEC_in_create_type4707 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_type4709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_type_name_in_create_type4712 = new BitSet(new long[]{0x0000000000008008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_CHAR_STRING_in_create_type4714 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_object_type_def_in_create_type4717 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OBJECT_TYPE_DEF_in_object_type_def4754 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_object_as_part_in_object_type_def4757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_object_under_part_in_object_type_def4759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_object_type_def4762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_sqlj_object_type_in_object_type_def4778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_modifier_clause_in_object_type_def4781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_OBJECT_MEMBERS_in_object_type_def4785 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_element_spec_in_object_type_def4787 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_OBJECT_AS_in_object_as_part4827 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_OBJECT_VK_in_object_as_part4830 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_varray_type_def_in_object_as_part4832 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_nested_table_type_def_in_object_as_part4834 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNDER_VK_in_object_under_part4871 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_object_under_part4873 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NESTED_TABLE_TYPE_DEF_in_nested_table_type_def4909 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_nested_table_type_def4911 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_nested_table_type_def4913 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_table_indexed_by_part_in_nested_table_type_def4916 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_JAVA_VK_in_sqlj_object_type4953 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_sqlj_object_type4955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_SQLDATA_VK_in_sqlj_object_type4958 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CUSTOMDATUM_VK_in_sqlj_object_type4960 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ORADATA_VK_in_sqlj_object_type4962 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_map_order_func_declaration_in_type_body_elements4998 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subprog_decl_in_type_in_type_body_elements5023 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MAP_VK_in_map_order_func_declaration5059 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_map_order_func_declaration5061 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_create_function_body_in_map_order_func_declaration5064 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MEMBER_VK_in_subprog_decl_in_type5101 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_STATIC_VK_in_subprog_decl_in_type5103 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_create_procedure_body_in_subprog_decl_in_type5123 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_create_function_body_in_subprog_decl_in_type5142 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_constructor_declaration_in_subprog_decl_in_type5161 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRUCTOR_VK_in_constructor_declaration5220 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_constructor_declaration5222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_FINAL_VK_in_constructor_declaration5224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_INSTANTIABLE_VK_in_constructor_declaration5227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_constructor_declaration5231 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_elements_parameter_in_constructor_declaration5233 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_CALL_MODE_in_constructor_declaration5256 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_constructor_declaration5258 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_constructor_declaration5279 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_constructor_declaration5281 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODIFIER_in_modifier_clause5345 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_modifier_clause5347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_INSTANTIABLE_VK_in_modifier_clause5351 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FINAL_VK_in_modifier_clause5353 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OVERRIDING_VK_in_modifier_clause5355 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXTERNAL_VK_in_sqlj_object_type_attr5392 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_sqlj_object_type_attr5394 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ELEMENT_SPEC_in_element_spec5430 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_element_spec_options_in_element_spec5432 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000040000L,0x0000800000000000L,0x0000000000000000L,0x0000000400240000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_modifier_clause_in_element_spec5435 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_pragma_clause_in_element_spec5438 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_subprogram_spec_in_element_spec_options5474 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constructor_spec_in_element_spec_options5499 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_map_order_function_spec_in_element_spec_options5524 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FIELD_SPEC_in_element_spec_options5550 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_element_spec_options5552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_element_spec_options5554 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_sqlj_object_type_attr_in_element_spec_options5556 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MEMBER_VK_in_subprogram_spec5594 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_STATIC_VK_in_subprogram_spec5596 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_spec_in_subprogram_spec5616 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_function_spec_in_subprogram_spec5635 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRUCTOR_SPEC_in_constructor_spec5694 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_constructor_spec5696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_FINAL_VK_in_constructor_spec5698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_INSTANTIABLE_VK_in_constructor_spec5701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_constructor_spec5705 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_elements_parameter_in_constructor_spec5707 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_constructor_call_mode_in_constructor_spec5711 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CALL_MODE_in_constructor_call_mode5748 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_constructor_call_mode5750 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MAP_VK_in_map_order_function_spec5787 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_map_order_function_spec5789 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_spec_in_map_order_function_spec5792 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRAGMA_VK_in_pragma_clause5828 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pragma_elements_in_pragma_clause5830 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_id_in_pragma_elements5866 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_elements5891 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PARAMETER_in_type_elements_parameter5926 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_type_elements_parameter5928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_type_elements_parameter5930 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_SEQUENCE_in_drop_sequence5971 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_sequence_name_in_drop_sequence5973 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_SEQUENCE_in_alter_sequence6009 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_sequence_name_in_alter_sequence6011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000100000L,0x0B50000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3000000000000000L});
	public static final BitSet FOLLOW_sequence_spec_in_alter_sequence6013 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000100000L,0x0B50000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3000000000000000L});
	public static final BitSet FOLLOW_CREATE_SEQUENCE_in_create_sequence6050 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_sequence_name_in_create_sequence6052 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000100000L,0x0B50000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3000000000000000L});
	public static final BitSet FOLLOW_sequence_spec_in_create_sequence6054 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000100000L,0x0B50000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3000000000000000L});
	public static final BitSet FOLLOW_START_VK_in_sequence_spec6093 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6095 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INCREMENT_VK_in_sequence_spec6122 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6124 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MAXVALUE_VK_in_sequence_spec6151 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6153 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MINVALUE_VK_in_sequence_spec6180 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6182 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CACHE_VK_in_sequence_spec6209 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6211 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOMAXVALUE_VK_in_sequence_spec6237 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOMINVALUE_VK_in_sequence_spec6262 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CYCLE_VK_in_sequence_spec6287 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOCYCLE_VK_in_sequence_spec6312 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOCACHE_VK_in_sequence_spec6337 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ORDER_VK_in_sequence_spec6362 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOORDER_VK_in_sequence_spec6387 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTHID_VK_in_invoker_rights_clause6428 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CURRENT_USER_VK_in_invoker_rights_clause6431 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEFINER_VK_in_invoker_rights_clause6433 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPILER_PARAMETER_in_compiler_parameters_clause6470 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASSIGN_in_compiler_parameters_clause6473 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_compiler_parameters_clause6475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_compiler_parameters_clause6477 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LANGUAGE_VK_in_call_spec6514 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_java_spec_in_call_spec6518 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_c_spec_in_call_spec6522 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_JAVA_VK_in_java_spec6562 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_java_spec6564 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_C_VK_in_c_spec6600 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_c_spec6602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_CONTEXT_VK_in_c_spec6605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_LIBRARY_VK_in_c_spec6609 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_c_spec6611 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_c_agent_in_clause_in_c_spec6614 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_c_parameters_clause_in_c_spec6617 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AGENT_VK_in_c_agent_in_clause6654 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_c_agent_in_clause6656 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_PARAMETERS_VK_in_c_parameters_clause6693 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_THREE_DOTS_in_c_parameters_clause6696 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_c_parameters_clause6698 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_PARAMETER_in_parameter6738 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_parameter6740 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000110000000L,0x0000020000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_parameter6743 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000110000000L,0x0000020000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_OUT_VK_in_parameter6745 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000110000000L,0x0000020000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_INOUT_VK_in_parameter6747 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000110000000L,0x0000020000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_type_spec_in_parameter6751 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_parameter6754 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEFAULT_VALUE_in_default_value_part6844 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_default_value_part6846 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_variable_declaration_in_declare_spec6888 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_declare_spec6904 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_declare_spec6920 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_declare_spec6936 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pragma_declaration_in_declare_spec6952 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_declare_spec6968 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_declare_spec6984 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_declare_spec7000 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_declare_spec7016 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_declare_spec7032 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIABLE_DECLARE_in_variable_declaration7058 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_variable_declaration7060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_variable_declaration7062 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x1000000000010000L});
	public static final BitSet FOLLOW_CONSTANT_VK_in_variable_declaration7064 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_variable_declaration7067 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_variable_declaration7070 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBTYPE_DECLARE_in_subtype_declaration7155 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_subtype_declaration7157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_subtype_declaration7159 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_subtype_declaration7161 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_subtype_range_in_subtype_declaration7164 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RANGE_VK_in_subtype_range7242 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_subtype_range7246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_subtype_range7250 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_DECLARE_in_cursor_declaration7293 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_cursor_declaration7295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L,0x0000000004000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_type_spec_in_cursor_declaration7297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_select_statement_in_cursor_declaration7300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_cursor_declaration7304 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_spec_in_cursor_declaration7306 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_PARAMETER_in_parameter_spec7345 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_parameter_spec7347 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_parameter_spec7349 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_parameter_spec7352 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXCEPTION_DECLARE_in_exception_declaration7390 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_exception_declaration7392 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRAGMA_DECLARE_in_pragma_declaration7441 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pragma_declaration_impl_in_pragma_declaration7443 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SERIALLY_REUSABLE_VK_in_pragma_declaration_impl7488 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTONOMOUS_TRANSACTION_VK_in_pragma_declaration_impl7511 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXCEPTION_INIT_VK_in_pragma_declaration_impl7534 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_pragma_declaration_impl7536 = new BitSet(new long[]{0x0000200008008040L,0x4020000000000000L,0x0000080040002000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_constant_in_pragma_declaration_impl7538 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INLINE_VK_in_pragma_declaration_impl7581 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_pragma_declaration_impl7583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_pragma_declaration_impl7585 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RESTRICT_REFERENCES_VK_in_pragma_declaration_impl7628 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_declaration_impl7666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_id_in_pragma_declaration_impl7692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_id_in_pragma_declaration_impl7732 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_record_type_dec_in_record_declaration7798 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_var_dec_in_record_declaration7813 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_type_dec_record_in_record_type_dec7840 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_type_dec_refcursor_in_record_type_dec7855 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_TYPE_DECLARE_in_record_type_dec_record7884 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_record_type_dec_record7886 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_FIELDS_in_record_type_dec_record7890 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_field_spec_in_record_type_dec_record7894 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_RECORD_TYPE_DECLARE_in_record_type_dec_refcursor7944 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_record_type_dec_refcursor7946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_REF_VK_in_record_type_dec_refcursor7948 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_record_type_dec_refcursor7950 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FIELD_SPEC_in_field_spec7993 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_field_spec7995 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_field_spec7997 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_field_spec8000 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_field_spec8003 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RECORD_VAR_DECLARE_in_record_var_dec8076 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_record_var_dec8078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_type_name_in_record_var_dec8080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000006000000000L});
	public static final BitSet FOLLOW_PERCENT_ROWTYPE_VK_in_record_var_dec8083 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PERCENT_TYPE_VK_in_record_var_dec8085 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_type_dec_in_table_declaration8123 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_var_dec_in_table_declaration8138 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_TYPE_DECLARE_in_table_type_dec8163 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_table_type_dec8165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_table_type_dec_impl_in_table_type_dec8167 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_type_dec_table_of_in_table_type_dec_impl8213 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varray_type_def_in_table_type_dec_impl8229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_table_type_dec_table_of8257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TABLE_in_table_type_dec_table_of8261 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_table_type_dec_table_of8263 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_table_indexed_by_part_in_table_type_dec_table_of8265 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDEXED_BY_in_table_indexed_by_part8326 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_table_indexed_by_part8328 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_varray_type_def8364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_VARR_ARRAY_DEF_in_varray_type_def8368 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_varray_type_def8370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_varray_type_def8372 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_VAR_DECLARE_in_table_var_dec8419 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_var_name_in_table_var_dec8421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_table_var_dec8423 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STATEMENTS_in_seq_of_statements8464 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_statement_in_seq_of_statements8469 = new BitSet(new long[]{0x0000000000000008L,0x8040000000000024L,0x0000000200002084L,0x0802000A00000200L,0x0000000000400080L,0x0240006000000000L,0x0080000000000000L,0x0000000001008000L,0x0000020000002000L,0x4021004080000800L,0x0000000000020500L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_labeled_statement_in_seq_of_statements8473 = new BitSet(new long[]{0x0000000000000008L,0x8040000000000024L,0x0000000200002084L,0x0802000A00000200L,0x0000000000400080L,0x0240006000000000L,0x0080000000000000L,0x0000000001008000L,0x0000020000002000L,0x4021004080000800L,0x0000000000020500L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_LABEL_DECLARE_in_labeled_statement8514 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_labeled_statement8516 = new BitSet(new long[]{0x0000000000000000L,0x8040000000000024L,0x0000000200002084L,0x0802000A00000200L,0x0000000000400080L,0x0240006000000000L,0x0000000000000000L,0x0000000001008000L,0x0000020000002000L,0x4021004080000800L,0x0000000000020500L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_statement_in_labeled_statement8518 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_assignment_statement_in_statement8553 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_continue_statement_in_statement8568 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exit_statement_in_statement8583 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_goto_statement_in_statement8598 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_if_statement_in_statement8613 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_loop_statement_in_statement8628 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_forall_statement_in_statement8643 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_null_statement_in_statement8658 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_raise_statement_in_statement8673 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_return_statement_in_statement8688 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pipe_row_statement_in_statement8703 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_statement_in_statement8718 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sql_statement_in_statement8733 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_general_element_in_statement8748 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_body_in_statement8763 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_statement8778 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASSIGN_in_assignment_statement8804 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_assignment_statement8806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_assignment_statement8808 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONTINUE_VK_in_continue_statement8844 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_continue_statement8846 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_general_when_in_continue_statement8849 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_general_when8886 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_general_when8888 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXIT_VK_in_exit_statement8924 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_exit_statement8926 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_general_when_in_exit_statement8929 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GOTO_in_goto_statement8966 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_goto_statement8968 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_IF_in_if_statement9004 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_if_statement9006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_if_statement9008 = new BitSet(new long[]{0x0080000000000008L,0x0400000000000000L});
	public static final BitSet FOLLOW_elsif_part_in_if_statement9012 = new BitSet(new long[]{0x0080000000000008L,0x0400000000000000L});
	public static final BitSet FOLLOW_else_part_in_if_statement9015 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_part9089 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_elsif_part9091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_elsif_part9093 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_else_part9135 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_else_part9137 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WHILE_LOOP_in_loop_statement9174 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_loop_statement9176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement9178 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOR_LOOP_in_loop_statement9205 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_loop_param_in_loop_statement9207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement9209 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LOOP_VK_in_loop_statement9242 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement9244 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDEXED_FOR_in_cursor_loop_param9282 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_cursor_loop_param9284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_REVERSE_VK_in_cursor_loop_param9286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_SIMPLE_BOUND_in_cursor_loop_param9290 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_cursor_loop_param9294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_cursor_loop_param9298 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_BASED_FOR_in_cursor_loop_param9342 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_cursor_loop_param9344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_general_element_in_cursor_loop_param9346 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_BASED_FOR_in_cursor_loop_param9373 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_cursor_loop_param9375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_select_statement_in_cursor_loop_param9377 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FORALL_VK_in_forall_statement9421 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_forall_statement9423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_bounds_clause_in_forall_statement9425 = new BitSet(new long[]{0x0000000000000000L,0x8040000000000020L,0x0000000200000080L,0x0800000000000000L,0x0000000000000080L,0x0000002000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000002000L,0x4001004000000000L,0x0000000000000500L});
	public static final BitSet FOLLOW_sql_statement_in_forall_statement9427 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_EXCEPTIONS_VK_in_forall_statement9429 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_BOUND_in_bounds_clause9466 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_bounds_clause9468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_bounds_clause9470 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDICES_BOUND_in_bounds_clause9497 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_collection_name_in_bounds_clause9499 = new BitSet(new long[]{0x0000000000000008L,0x0000080000000000L});
	public static final BitSet FOLLOW_between_bound_in_bounds_clause9501 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VALUES_BOUND_in_bounds_clause9529 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_bounds_clause9531 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_between_bound9568 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_between_bound9570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_between_bound9572 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_null_statement9607 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RAISE_VK_in_raise_statement9642 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_raise_statement9644 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RETURN_VK_in_return_statement9681 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_return_statement9683 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_in_body9715 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_body9717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_body9720 = new BitSet(new long[]{0x0000000000000008L,0x1000000000000000L});
	public static final BitSet FOLLOW_exception_clause_in_body9722 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_clause9773 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_handler_in_exception_clause9777 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_exception_handler9815 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_exception_handler9819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_exception_handler9822 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BLOCK_in_block9866 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_declare_spec_in_block9870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000041920000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060002L,0x0000000000000000L,0x0006020000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_body_in_block9873 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_execute_immediate_in_sql_statement9918 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_data_manipulation_language_statements_in_sql_statement9933 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_manipulation_statements_in_sql_statement9948 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_transaction_control_statements_in_sql_statement9963 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXECUTE_VK_in_execute_immediate9988 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_execute_immediate9990 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000000200L,0x0000020000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_into_clause_in_execute_immediate10007 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_execute_immediate10009 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_using_clause_in_execute_immediate10027 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_dynamic_returning_clause_in_execute_immediate10029 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_dynamic_returning_clause_in_execute_immediate10047 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DYNAMIC_RETURN_in_dynamic_returning_clause10106 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_into_clause_in_dynamic_returning_clause10108 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_merge_statement_in_data_manipulation_language_statements10147 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lock_table_statement_in_data_manipulation_language_statements10162 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_select_statement_in_data_manipulation_language_statements10177 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_update_statement_in_data_manipulation_language_statements10192 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delete_statement_in_data_manipulation_language_statements10207 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statement_in_data_manipulation_language_statements10222 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SELECT_STATEMENT_in_select_statement10247 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_factoring_clause_in_select_statement10249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_subquery_in_select_statement10252 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040001L});
	public static final BitSet FOLLOW_order_by_clause_in_select_statement10254 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_for_update_clause_in_select_statement10257 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WITH_in_subquery_factoring_clause10360 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_factoring_element_in_subquery_factoring_clause10362 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_FACTORING_in_factoring_element10399 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_name_in_factoring_element10401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_subquery_in_factoring_element10403 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBQUERY_in_subquery10439 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_basic_elements_in_subquery10441 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000040L,0x0000000080000100L});
	public static final BitSet FOLLOW_subquery_operation_part_in_subquery10445 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000040L,0x0000000080000100L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNION_in_subquery_operation_part10522 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTERSECT_in_subquery_operation_part10541 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_MINUS_in_subquery_operation_part10560 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_subquery_operation_part10590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_subquery_basic_elements_in_subquery_operation_part10593 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_query_block_in_subquery_basic_elements10650 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_subquery_basic_elements10665 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_SELECT_in_query_block10701 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_from_clause_in_query_block10716 = new BitSet(new long[]{0x0000000000000100L,0x0100001000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_query_block10732 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_query_block10734 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_query_block10736 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_ASTERISK_in_query_block10758 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000002000000210L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_SELECT_LIST_in_query_block10778 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_selected_element_in_query_block10782 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_into_clause_in_query_block10812 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000002000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_where_clause_in_query_block10815 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_hierarchical_query_clause_in_query_block10818 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_group_by_clause_in_query_block10834 = new BitSet(new long[]{0x0100000000000008L});
	public static final BitSet FOLLOW_model_clause_in_query_block10837 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_ITEM_in_selected_element11066 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_selected_element11068 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_alias_in_selected_element11070 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FROM_in_from_clause11113 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_ref_in_from_clause11117 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_TABLE_REF_in_table_ref11155 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_ref_aux_in_table_ref11157 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_join_clause_in_table_ref11161 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_TABLE_REF_ELEMENT_in_table_ref_aux11204 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_table_ref_aux11206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000C00000000000L});
	public static final BitSet FOLLOW_dml_table_expression_clause_in_table_ref_aux11209 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010001000L});
	public static final BitSet FOLLOW_ONLY_VK_in_table_ref_aux11212 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_pivot_clause_in_table_ref_aux11214 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_unpivot_clause_in_table_ref_aux11216 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_flashback_query_clause_in_table_ref_aux11220 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_JOIN_DEF_in_join_clause11317 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_partition_clause_in_join_clause11333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x1000000000000000L,0x8000000008000000L,0x0000080000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_CROSS_VK_in_join_clause11349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x8000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_NATURAL_VK_in_join_clause11351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x8000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_INNER_VK_in_join_clause11356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_FULL_VK_in_join_clause11358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_LEFT_VK_in_join_clause11360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_RIGHT_VK_in_join_clause11362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_table_ref_aux_in_join_clause11366 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_query_partition_clause_in_join_clause11382 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_join_on_part_in_join_clause11398 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_join_using_part_in_join_clause11400 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_join_on_part11526 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_join_on_part11528 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_join_using_part11565 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_join_using_part11567 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_PARTITION_VK_in_query_partition_clause11604 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_query_partition_clause11607 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_query_partition_clause11609 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_query_partition_clause11611 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_VERSIONS_VK_in_flashback_query_clause11650 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_AS_in_flashback_query_clause11652 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SCN_VK_in_flashback_query_clause11656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_TIMESTAMP_VK_in_flashback_query_clause11658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_flashback_query_clause11662 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIVOT_VK_in_pivot_clause11699 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_XML_VK_in_pivot_clause11701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_pivot_element_in_pivot_clause11704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_pivot_for_clause_in_pivot_clause11707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_pivot_in_clause_in_pivot_clause11709 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIVOT_ELEMENT_in_pivot_element11745 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_pivot_element11747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_pivot_element11750 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FOR_in_pivot_for_clause11786 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_pivot_for_clause11788 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_pivot_in_clause11825 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_pivot_in_clause11841 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ANY_MODE_in_pivot_in_clause11857 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_pivot_in_clause11859 = new BitSet(new long[]{0x0000000000000008L,0x0000008000000000L});
	public static final BitSet FOLLOW_ELEMENTS_MODE_in_pivot_in_clause11877 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pivot_in_clause_element_in_pivot_in_clause11879 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_PIVOT_IN_ELEMENT_in_pivot_in_clause_element11936 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_pivot_in_clause_element11938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_pivot_in_clause_element11942 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_pivot_in_clause_element11944 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNPIVOT_VK_in_unpivot_clause11981 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_INCLUDE_VK_in_unpivot_clause11985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_EXCLUDE_VK_in_unpivot_clause11987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_NULLS_VK_in_unpivot_clause11990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_column_name_in_unpivot_clause11995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_pivot_for_clause_in_unpivot_clause11998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_unpivot_in_clause_in_unpivot_clause12000 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_unpivot_in_clause12036 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unpivot_in_element_in_unpivot_in_clause12038 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_UNPIVOT_IN_ELEMENT_in_unpivot_in_element12075 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_unpivot_in_element12077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_PIVOT_ALIAS_in_unpivot_in_element12081 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_unpivot_in_element12084 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_unpivot_in_element12086 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_HIERARCHICAL_in_hierarchical_query_clause12124 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_start_part_in_hierarchical_query_clause12126 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CONNECT_in_hierarchical_query_clause12130 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NOCYCLE_VK_in_hierarchical_query_clause12132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_hierarchical_query_clause12135 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_START_in_start_part12172 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_start_part12174 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GROUP_in_group_by_clause12210 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_group_by_element_in_group_by_clause12212 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_having_clause_in_group_by_clause12215 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_GROUP_BY_ELEMENT_in_group_by_element12252 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_group_by_elements_in_group_by_element12254 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_GROUPING_VK_in_group_by_elements12290 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_groupin_set_in_group_by_elements12292 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_grouping_element_in_group_by_elements12319 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GROUPIN_SET_in_groupin_set12355 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_grouping_element_in_groupin_set12357 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLUP_VK_in_grouping_element12394 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CUBE_VK_in_grouping_element12396 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_grouping_element_in_grouping_element12399 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_expression_list_in_grouping_element12426 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_grouping_element12451 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_HAVING_in_having_clause12487 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_having_clause12489 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_clause12525 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_main_model_in_model_clause12527 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000080100000L});
	public static final BitSet FOLLOW_cell_reference_options_in_model_clause12529 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000080100000L});
	public static final BitSet FOLLOW_return_rows_clause_in_model_clause12532 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_reference_model_in_model_clause12535 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_set_in_cell_reference_options12572 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NAV_VK_in_cell_reference_options12578 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_cell_reference_options12591 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DIMENSION_VK_in_cell_reference_options12594 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SINGLE_VK_in_cell_reference_options12596 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RETURN_VK_in_return_rows_clause12633 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UPDATED_VK_in_return_rows_clause12636 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_return_rows_clause12638 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCE_VK_in_reference_model12675 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_reference_model_name_in_reference_model12677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_subquery_in_reference_model12679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_model_column_clauses_in_reference_model12681 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L});
	public static final BitSet FOLLOW_cell_reference_options_in_reference_model12683 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L});
	public static final BitSet FOLLOW_MAIN_MODEL_in_main_model12720 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_main_model_name_in_main_model12722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_model_column_clauses_in_main_model12725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_model_rules_clause_in_main_model12727 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L});
	public static final BitSet FOLLOW_cell_reference_options_in_main_model12729 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L});
	public static final BitSet FOLLOW_MODEL_COLUMN_in_model_column_clauses12766 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DIMENSION_VK_in_model_column_clauses12769 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_clauses12771 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MEASURES_VK_in_model_column_clauses12775 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_clauses12777 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_model_column_partition_part_in_model_column_clauses12780 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARTITION_VK_in_model_column_partition_part12817 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_partition_part12819 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_COLUMNS_in_model_column_list12855 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_in_model_column_list12857 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_MODEL_COLUMN_in_model_column12894 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_model_column12896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_model_column12899 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_RULES_in_model_rules_clause12936 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_rules_element_in_model_rules_clause12938 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_model_rules_part_in_model_rules_clause12941 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RULES_VK_in_model_rules_part12978 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_part12994 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_UPSERT_VK_in_model_rules_part12996 = new BitSet(new long[]{0x0000000000000008L,0x0000001000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_model_rules_part12998 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_AUTOMATIC_VK_in_model_rules_part13017 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_SEQUENTIAL_VK_in_model_rules_part13019 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_model_iterate_clause_in_model_rules_part13036 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_RULE_in_model_rules_element13082 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASSIGN_in_model_rules_element13098 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_expression_in_model_rules_element13100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_model_rules_element13102 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_element13119 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_UPSERT_VK_in_model_rules_element13121 = new BitSet(new long[]{0x0000000000000008L,0x0000001000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_model_rules_element13123 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_model_rules_element13141 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ITERATE_VK_in_model_iterate_clause13187 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_model_iterate_clause13189 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_until_part_in_model_iterate_clause13191 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNTIL_VK_in_until_part13228 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_until_part13230 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_order_by_clause13266 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SIBLINGS_VK_in_order_by_clause13268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ORDER_BY_ELEMENTS_in_order_by_clause13272 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_order_by_elements_in_order_by_clause13276 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_ORDER_BY_ELEMENT_in_order_by_elements13320 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_order_by_elements13322 = new BitSet(new long[]{0x0000000000000008L,0x0080020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ASC_in_order_by_elements13325 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DESC_in_order_by_elements13327 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_NULLS_VK_in_order_by_elements13332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_FIRST_VK_in_order_by_elements13335 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LAST_VK_in_order_by_elements13337 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FOR_in_for_update_clause13418 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_for_update_of_part_in_for_update_clause13420 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_for_update_options_in_for_update_clause13423 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_OF_in_for_update_of_part13460 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_for_update_of_part13462 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SKIP_VK_in_for_update_options13498 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_for_update_options13523 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WAIT_VK_in_for_update_options13549 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_update_options13551 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_update_statement13589 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_update_statement13591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_SET_VK_in_update_statement13606 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_update_set_elements_in_update_statement13610 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_where_clause_in_update_statement13626 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_static_returning_clause_in_update_statement13629 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_update_statement13632 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_update_set_elements13738 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_update_set_elements13740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_update_set_elements13742 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_update_set_elements13775 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_update_set_elements13779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_subquery_in_update_set_elements13782 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VALUE_VK_in_update_set_elements13815 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_update_set_elements13817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_update_set_elements13820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_update_set_elements13822 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_delete_statement13866 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_delete_statement13868 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_where_clause_in_delete_statement13882 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_static_returning_clause_in_delete_statement13885 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_delete_statement13888 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INSERT_in_insert_statement13966 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_single_table_insert_in_insert_statement13996 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_multi_table_insert_in_insert_statement14021 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SINGLE_TABLE_MODE_in_single_table_insert14074 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_insert_into_clause_in_single_table_insert14076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_values_clause_in_single_table_insert14079 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_static_returning_clause_in_single_table_insert14081 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_select_statement_in_single_table_insert14085 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_single_table_insert14088 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MULTI_TABLE_MODE_in_multi_table_insert14183 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_select_statement_in_multi_table_insert14185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_conditional_insert_clause_in_multi_table_insert14188 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_multi_table_element_in_multi_table_insert14190 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_TABLE_ELEMENT_in_multi_table_element14228 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_insert_into_clause_in_multi_table_element14230 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_values_clause_in_multi_table_element14232 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_multi_table_element14235 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONDITIONAL_INSERT_in_conditional_insert_clause14272 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_conditional_insert_clause14275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_FIRST_VK_in_conditional_insert_clause14277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_conditional_insert_when_part_in_conditional_insert_clause14281 = new BitSet(new long[]{0x0000000000000008L,0x0400000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_conditional_insert_else_part_in_conditional_insert_clause14284 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_conditional_insert_when_part14322 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_conditional_insert_when_part14324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_when_part14326 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_conditional_insert_else_part14363 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_else_part14365 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_insert_into_clause14402 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_insert_into_clause14404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_COLUMNS_in_insert_into_clause14407 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_insert_into_clause14411 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_VALUES_in_values_clause14455 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_values_clause14460 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_values_clause14464 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_VK_in_merge_statement14503 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_merge_statement14505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_tableview_name_in_merge_statement14508 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_merge_statement14524 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_selected_tableview_in_merge_statement14526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_merge_statement14528 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_merge_update_clause_in_merge_statement14544 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000402000L});
	public static final BitSet FOLLOW_merge_insert_clause_in_merge_statement14547 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_merge_statement14550 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_UPDATE_in_merge_update_clause14589 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_merge_element_in_merge_update_clause14591 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000002000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_where_clause_in_merge_update_clause14594 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L});
	public static final BitSet FOLLOW_merge_update_delete_part_in_merge_update_clause14597 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_merge_element14634 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_merge_element14636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_merge_element14638 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_merge_update_delete_part14674 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_where_clause_in_merge_update_delete_part14676 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_INSERT_in_merge_insert_clause14712 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_merge_insert_clause14715 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_merge_insert_clause14717 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_merge_insert_clause14721 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_where_clause_in_merge_insert_clause14723 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECTED_TABLEVIEW_in_selected_tableview14761 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_selected_tableview14763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_tableview_name_in_selected_tableview14767 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_select_statement_in_selected_tableview14769 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_LOCK_in_lock_table_statement14808 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_lock_table_element_in_lock_table_statement14810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000801L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_lock_mode_in_lock_table_statement14813 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_wait_nowait_part_in_lock_table_statement14815 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WAIT_VK_in_wait_nowait_part14852 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_wait_nowait_part14854 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_wait_nowait_part14880 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCK_TABLE_ELEMENT_in_lock_table_element14917 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_lock_table_element14919 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_partition_extension_clause_in_lock_table_element14921 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode14957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode14959 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode14984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode14986 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode15011 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_lock_mode15013 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode15039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode15041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode15043 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode15068 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_REF_in_general_table_ref15106 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_general_table_ref15108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000C00000000000L});
	public static final BitSet FOLLOW_dml_table_expression_clause_in_general_table_ref15111 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_ONLY_VK_in_general_table_ref15113 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STATIC_RETURNING_in_static_returning_clause15198 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_static_returning_clause15202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000020000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_into_clause_in_static_returning_clause15205 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LOG_VK_in_error_logging_clause15247 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_error_logging_into_part_in_error_logging_clause15249 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_expression_in_error_logging_clause15252 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_error_logging_reject_part_in_error_logging_clause15255 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_error_logging_into_part15292 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_error_logging_into_part15294 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REJECT_VK_in_error_logging_reject_part15330 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNLIMITED_VK_in_error_logging_reject_part15333 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_error_logging_reject_part15335 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_EXPRESSION_in_dml_table_expression_clause15372 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLLECTION_MODE_in_dml_table_expression_clause15389 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_dml_table_expression_clause15391 = new BitSet(new long[]{0x0000000000000008L,0x0000000000008000L});
	public static final BitSet FOLLOW_PLUS_SIGN_in_dml_table_expression_clause15393 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_MODE_in_dml_table_expression_clause15435 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_select_statement_in_dml_table_expression_clause15437 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause15439 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DIRECT_MODE_in_dml_table_expression_clause15481 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_table_expression_clause15483 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_sample_clause_in_dml_table_expression_clause15485 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_general_element_in_dml_table_expression_clause15530 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_standard_function_in_dml_table_expression_clause15549 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_ref_in_dml_table_expression_clause15588 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WITH_in_subquery_restriction_clause15618 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_READ_VK_in_subquery_restriction_clause15621 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CHECK_in_subquery_restriction_clause15623 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_constraint_name_in_subquery_restriction_clause15625 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAMPLE_VK_in_sample_clause15663 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BLOCK_VK_in_sample_clause15665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_sample_clause15668 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_seed_part_in_sample_clause15670 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SEED_VK_in_seed_part15708 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_seed_part15710 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_close_statement_in_cursor_manipulation_statements15751 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_open_statement_in_cursor_manipulation_statements15776 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fetch_statement_in_cursor_manipulation_statements15801 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_open_for_statement_in_cursor_manipulation_statements15826 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLOSE_VK_in_close_statement15862 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_close_statement15864 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OPEN_VK_in_open_statement15901 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_open_statement15903 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_expression_list_in_open_statement15905 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FETCH_in_fetch_statement15942 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_fetch_statement15944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000020000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_fetch_statement15965 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_fetch_statement15967 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_BULK_VK_in_fetch_statement15989 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_fetch_statement15991 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_OPEN_VK_in_open_for_statement16052 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_open_for_statement16054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_expression_in_open_for_statement16057 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_select_statement_in_open_for_statement16059 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_open_for_statement16062 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_transaction_command_in_transaction_control_statements16102 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_constraint_command_in_transaction_control_statements16127 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_commit_statement_in_transaction_control_statements16152 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rollback_statement_in_transaction_control_statements16177 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_savepoint_statement_in_transaction_control_statements16202 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_TRANSACTION_in_set_transaction_command16237 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_set_transaction_command16239 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004000L});
	public static final BitSet FOLLOW_READ_VK_in_set_transaction_command16260 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ONLY_VK_in_set_transaction_command16263 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WRITE_VK_in_set_transaction_command16265 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ISOLATION_VK_in_set_transaction_command16287 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SERIALIZABLE_VK_in_set_transaction_command16290 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMMITTED_VK_in_set_transaction_command16292 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_VK_in_set_transaction_command16314 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_rollback_segment_name_in_set_transaction_command16316 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SET_CONSTRAINT_in_set_constraint_command16377 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_set_constraint_command16380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_constraint_name_in_set_constraint_command16382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000020000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_IMMEDIATE_VK_in_set_constraint_command16387 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEFERRED_VK_in_set_constraint_command16389 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMMIT_VK_in_commit_statement16427 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WORK_VK_in_commit_statement16429 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L,0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_COMMENT_VK_in_commit_statement16451 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_commit_statement16453 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FORCE_VK_in_commit_statement16474 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CORRUPT_XID_VK_in_commit_statement16477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_commit_statement16479 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CORRUPT_XID_ALL_VK_in_commit_statement16481 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_commit_statement16483 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_commit_statement16485 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_write_clause_in_commit_statement16517 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WRITE_VK_in_write_clause16563 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WAIT_VK_in_write_clause16566 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_write_clause16568 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_IMMEDIATE_VK_in_write_clause16573 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BATCH_VK_in_write_clause16575 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_VK_in_rollback_statement16614 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WORK_VK_in_rollback_statement16616 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TO_in_rollback_statement16638 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_savepoint_name_in_rollback_statement16640 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FORCE_VK_in_rollback_statement16661 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_rollback_statement16663 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAVEPOINT_VK_in_savepoint_statement16724 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_savepoint_name_in_savepoint_statement16726 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIPE_ROW_in_pipe_row_statement16767 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_pipe_row_statement16769 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXPR_LIST_in_expression_list16809 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_expression_list16813 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_LOGIC_EXPR_in_expression16851 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression16853 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXPR_in_expression16870 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression16872 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_OR_in_expression_element16929 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_AND_in_expression_element16947 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_EQUALS_OP_in_expression_element16965 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NOT_EQUAL_OP_in_expression_element16983 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LESS_THAN_OP_in_expression_element17001 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_GREATER_THAN_OP_in_expression_element17019 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LESS_THAN_OR_EQUALS_OP_in_expression_element17037 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_GREATER_THAN_OR_EQUALS_OP_in_expression_element17055 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CONCATENATION_OP_in_expression_element17073 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PLUS_SIGN_in_expression_element17091 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_MINUS_SIGN_in_expression_element17109 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASTERISK_in_expression_element17127 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SOLIDUS_in_expression_element17145 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_in_expression_element17163 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_MOD_VK_in_expression_element17181 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DIV_VK_in_expression_element17199 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17227 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000008000080L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17231 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_expression_element17279 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17281 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_NULL_in_expression_element17337 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NULL_in_expression_element17357 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_NAN_in_expression_element17377 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NAN_in_expression_element17397 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_PRESENT_in_expression_element17417 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_PRESENT_in_expression_element17437 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_INFINITE_in_expression_element17457 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_INFINITE_in_expression_element17477 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_A_SET_in_expression_element17497 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_A_SET_in_expression_element17517 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_EMPTY_in_expression_element17537 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_EMPTY_in_expression_element17557 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17589 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_OF_TYPE_in_expression_element17633 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_expression_element17637 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_IS_OF_TYPE_in_expression_element17665 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_expression_element17669 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_MEMBER_VK_in_expression_element17699 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SUBMULTISET_VK_in_expression_element17701 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17704 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000008000080L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17706 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOT_IN_in_expression_element17734 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_in_elements_in_expression_element17740 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_expression_element17773 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_in_elements_in_expression_element17779 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOT_BETWEEN_in_expression_element17812 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17814 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000008000080L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17816 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000008000080L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17818 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_expression_element17845 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17847 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000008000080L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17849 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000008000080L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17851 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOT_LIKE_in_expression_element17878 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17880 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000008000080L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17882 = new BitSet(new long[]{0x00122C018C108148L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000008000080L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17884 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_LIKE_in_expression_element17913 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LIKEC_VK_in_expression_element17915 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LIKE2_VK_in_expression_element17917 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LIKE4_VK_in_expression_element17919 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17922 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000008000080L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17924 = new BitSet(new long[]{0x00122C018C108148L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000008000080L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17926 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIPE_VK_in_expression_element17959 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17961 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000008000080L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17963 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNARY_OPERATOR_in_expression_element17991 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element17995 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_PRIOR_in_expression_element18033 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18035 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NEW_VK_in_expression_element18062 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_expression_element18064 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_expression_element18091 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18093 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STANDARD_FUNCTION_in_expression_element18120 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_standard_function_in_expression_element18122 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SOME_VK_in_expression_element18150 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_EXISTS_in_expression_element18152 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_expression_element18154 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_expression_element18156 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18159 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VECTOR_EXPR_in_expression_element18186 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18188 = new BitSet(new long[]{0x00122C018C108148L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000008000080L});
	public static final BitSet FOLLOW_DATETIME_OP_in_expression_element18217 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_datetime_element_in_expression_element18221 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_model_expression_in_expression_element18247 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KEEP_VK_in_expression_element18273 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_DENSE_RANK_VK_in_expression_element18277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_FIRST_VK_in_expression_element18280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_LAST_VK_in_expression_element18282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_expression_element18285 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_over_clause_in_expression_element18287 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DOT_ASTERISK_in_expression_element18316 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_expression_element18318 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PERCENT_FOUND_VK_in_expression_element18374 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_NOTFOUND_VK_in_expression_element18393 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_ROWCOUNT_VK_in_expression_element18412 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_ISOPEN_VK_in_expression_element18431 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_expression_element18461 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OUTER_JOIN_SIGN_in_expression_element18505 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18507 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_case_statement_in_expression_element18534 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constant_in_expression_element18559 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_general_element_in_expression_element18574 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_expression_element18589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_in_elements18614 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_in_elements18634 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_in_elements18649 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_VK_in_datetime_element18674 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_datetime_element18676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_LOCAL_VK_in_datetime_element18679 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TIME_VK_in_datetime_element18681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_datetime_element18683 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DAY_VK_in_datetime_element18711 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SECOND_VK_in_datetime_element18713 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_datetime_element18715 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_YEAR_VK_in_datetime_element18743 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_MONTH_VK_in_datetime_element18745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_datetime_element18747 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_EXPRESSION_in_model_expression18783 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_model_expression18785 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0C00010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_model_expression_element_in_model_expression18787 = new BitSet(new long[]{0x0000000000000008L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0C00010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_model_expression_element18823 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_model_expression_element18848 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_SINGLE_COLUMN_in_model_expression_element18874 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_model_expression_element18876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000042L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_for_single_column_element_in_model_expression_element18878 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_for_like_part_in_model_expression_element18880 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOR_MULTI_COLUMN_in_model_expression_element18908 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_model_expression_element18910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_model_expression_element18914 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_model_expression_element18917 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_model_expression_element18919 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_for_single_column_element18958 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_for_single_column_element18960 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FROM_in_for_single_column_element18987 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element18989 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TO_in_for_single_column_element19017 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element19019 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INCREMENT_VK_in_for_single_column_element19048 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DECREMENT_VK_in_for_single_column_element19050 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element19053 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_LIKE_in_for_like_part19090 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_like_part19092 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_CASE_in_case_statement19128 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_case_statement19130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0100000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_case_statement19133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_case_when_part_in_case_statement19135 = new BitSet(new long[]{0x0000000000000008L,0x0400000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_case_else_part_in_case_statement19138 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SEARCHED_CASE_in_case_statement19168 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_case_statement19170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_case_when_part_in_case_statement19173 = new BitSet(new long[]{0x0000000000000008L,0x0400000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_case_else_part_in_case_statement19176 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_case_when_part19216 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_case_when_part19218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_case_when_part19221 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_case_when_part19223 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_case_else_part19260 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_case_else_part19263 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_case_else_part19265 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_OVER_in_standard_function19303 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function19305 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function19307 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_USING_in_standard_function19335 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function19337 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_standard_function19339 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COUNT_VK_in_standard_function19367 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function19370 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function19372 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_standard_function19374 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_ASTERISK_in_standard_function19380 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_expression_in_standard_function19384 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function19388 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CAST_VK_in_standard_function19417 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_XMLCAST_VK_in_standard_function19419 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_standard_function19423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_expression_in_standard_function19425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function19428 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CHR_VK_in_standard_function19455 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_NCHAR_CS_VK_in_standard_function19459 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLLECT_VK_in_standard_function19486 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function19489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function19491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_column_name_in_standard_function19495 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_collect_order_by_part_in_standard_function19497 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_WITHIN_OR_OVER_in_standard_function19525 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function19527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_within_clause_in_standard_function19530 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function19532 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_DECOMPOSE_VK_in_standard_function19562 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19564 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_CANONICAL_VK_in_standard_function19567 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPATIBILITY_VK_in_standard_function19569 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXTRACT_VK_in_standard_function19599 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_standard_function19601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function19603 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FIRST_VALUE_VK_in_standard_function19631 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LAST_VALUE_VK_in_standard_function19633 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200004L});
	public static final BitSet FOLLOW_NULLS_VK_in_standard_function19638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function19641 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PREDICTION_FUNCTION_in_standard_function19669 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19671 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_cost_matrix_clause_in_standard_function19674 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_standard_function19677 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TRANSLATE_VK_in_standard_function19705 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19707 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000200000000400L});
	public static final BitSet FOLLOW_CHAR_CS_VK_in_standard_function19710 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_NCHAR_CS_VK_in_standard_function19712 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function19716 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_TREAT_VK_in_standard_function19744 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_REF_VK_in_standard_function19748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function19751 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TRIM_VK_in_standard_function19778 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LEADING_VK_in_standard_function19781 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000008000080L});
	public static final BitSet FOLLOW_TRAILING_VK_in_standard_function19783 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000008000080L});
	public static final BitSet FOLLOW_BOTH_VK_in_standard_function19785 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000008000080L});
	public static final BitSet FOLLOW_expression_element_in_standard_function19789 = new BitSet(new long[]{0x00122C018C108148L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000000L,0xA004001088280038L,0x0000041E00040001L,0x0020000000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000008000080L});
	public static final BitSet FOLLOW_expression_element_in_standard_function19791 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLAGG_VK_in_standard_function19821 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19823 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_standard_function19825 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLCOLATTVAL_VK_in_standard_function19854 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_XMLFOREST_VK_in_standard_function19856 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_multiuse_expression_element_in_standard_function19859 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_XMLEXISTS_VK_in_standard_function19887 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19889 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function19891 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLPARSE_VK_in_standard_function19919 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DOCUMENT_VK_in_standard_function19922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CONTENT_VK_in_standard_function19924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function19927 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_WELLFORMED_VK_in_standard_function19929 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLQUERY_VK_in_standard_function19957 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19959 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function19961 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_standard_function19964 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLROOT_VK_in_standard_function19992 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function19994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_xml_param_version_part_in_standard_function19996 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_xmlroot_param_standalone_part_in_standard_function19998 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLTABLE_VK_in_standard_function20026 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_namespaces_clause_in_standard_function20028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function20031 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function20033 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_xml_table_column_in_standard_function20036 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_XMLELEMENT_VK_in_standard_function20064 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ENTITYESCAPING_VK_in_standard_function20079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010020000000L,0x0000000000000000L,0x0000008000000400L});
	public static final BitSet FOLLOW_NOENTITYESCAPING_VK_in_standard_function20081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010020000000L,0x0000000000000000L,0x0000008000000400L});
	public static final BitSet FOLLOW_NAME_VK_in_standard_function20098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_standard_function20100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function20104 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_xml_attributes_clause_in_standard_function20118 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function20122 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_alias_in_standard_function20124 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_XMLPI_VK_in_standard_function20163 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NAME_VK_in_standard_function20186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_char_set_name_in_standard_function20188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_standard_function20191 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_standard_function20214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function20216 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function20252 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLSERIALIZE_VK_in_standard_function20289 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DOCUMENT_VK_in_standard_function20308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CONTENT_VK_in_standard_function20310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function20329 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000004000000L,0x0000000100200100L,0x0000020000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function20331 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000200100L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_xmlserialize_param_enconding_part_in_standard_function20350 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200100L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_xml_param_version_part_in_standard_function20369 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200100L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_xmlserialize_param_ident_part_in_standard_function20388 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_HIDE_VK_in_standard_function20409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_SHOW_VK_in_standard_function20411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_DEFAULTS_VK_in_standard_function20414 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OVER_VK_in_over_clause20461 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_partition_clause_in_over_clause20463 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_over_clause20467 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000001000L});
	public static final BitSet FOLLOW_windowing_clause_in_over_clause20469 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROWS_VK_in_windowing_clause20509 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_RANGE_VK_in_windowing_clause20511 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_windowing_clause20532 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause20534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause20536 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause20556 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNBOUNDED_VK_in_windowing_elements20616 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PRECEDING_VK_in_windowing_elements20618 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURRENT_VK_in_windowing_elements20645 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ROW_VK_in_windowing_elements20647 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRECEDING_VK_in_windowing_elements20675 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_FOLLOWING_VK_in_windowing_elements20677 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_windowing_elements20680 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_using_clause20716 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_using_element_in_using_clause20718 = new BitSet(new long[]{0x0000000000000108L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_ELEMENT_in_using_element20755 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_using_element20757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000080000L});
	public static final BitSet FOLLOW_OUT_VK_in_using_element20760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_using_element20763 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_alias_in_using_element20765 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASTERISK_in_using_element20792 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_collect_order_by_part20827 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_collect_order_by_part20829 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WITHIN_VK_in_within_clause20865 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_order_by_clause_in_within_clause20867 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COST_VK_in_cost_matrix_clause20903 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_MODEL_in_cost_matrix_clause20922 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_AUTO_VK_in_cost_matrix_clause20924 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_cost_class_name_in_cost_matrix_clause20944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_expression_list_in_cost_matrix_clause20947 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PASSING_VK_in_xml_passing_clause21006 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_VALUE_VK_in_xml_passing_clause21008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_xml_passing_clause21011 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_alias_in_xml_passing_clause21013 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_xml_passing_clause21017 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_alias_in_xml_passing_clause21019 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLATTRIBUTES_VK_in_xml_attributes_clause21058 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ENTITYESCAPING_VK_in_xml_attributes_clause21073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_NOENTITYESCAPING_VK_in_xml_attributes_clause21075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_SCHEMACHECK_VK_in_xml_attributes_clause21092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_NOSCHEMACHECK_VK_in_xml_attributes_clause21094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause21110 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_XMLNAMESPACES_VK_in_xml_namespaces_clause21156 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_namespaces_clause21171 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_alias_in_xml_namespaces_clause21173 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_xml_general_default_part_in_xml_namespaces_clause21178 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_COLUMN_in_xml_table_column21224 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_column_name_in_xml_table_column21226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ORDINALITY_VK_in_xml_table_column21229 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_type_spec_in_xml_table_column21231 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_xml_table_column21233 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L});
	public static final BitSet FOLLOW_xml_general_default_part_in_xml_table_column21236 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_xml_general_default_part21275 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_general_default_part21277 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ELEMENT_in_xml_multiuse_expression_element21313 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_multiuse_expression_element21315 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_xml_alias_in_xml_multiuse_expression_element21317 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ALIAS_in_xml_alias21354 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_xml_alias21356 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ALIAS_in_xml_alias21383 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_xml_alias21386 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_alias21388 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VERSION_VK_in_xml_param_version_part21425 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NO_VK_in_xml_param_version_part21428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_VALUE_VK_in_xml_param_version_part21430 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_xml_param_version_part21432 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STANDALONE_VK_in_xmlroot_param_standalone_part21469 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_YES_VK_in_xmlroot_param_standalone_part21472 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NO_VK_in_xmlroot_param_standalone_part21474 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_VALUE_VK_in_xmlroot_param_standalone_part21476 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ENCODING_VK_in_xmlserialize_param_enconding_part21514 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xmlserialize_param_enconding_part21516 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NO_VK_in_xmlserialize_param_ident_part21551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part21553 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part21579 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xmlserialize_param_ident_part21581 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBPARTITION_VK_in_partition_extension_clause21623 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PARTITION_VK_in_partition_extension_clause21625 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_partition_extension_clause21628 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLUMN_ALIAS_in_alias21664 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_alias21666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_alias21669 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_ALIAS_in_alias21697 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_alias21699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_alias21702 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHERE_in_where_clause21739 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_where_clause21741 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_into_clause21778 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_into_clause21782 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_BULK_VK_in_into_clause21817 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_into_clause21821 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_XML_COLUMN_NAME_in_xml_column_name21869 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_xml_column_name21871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_xml_column_name21874 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COST_CLASS_NAME_in_cost_class_name21910 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_cost_class_name21912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_cost_class_name21915 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ATTRIBUTE_NAME_in_attribute_name21951 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_attribute_name21953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_attribute_name21956 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAVEPOINT_NAME_in_savepoint_name21992 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_savepoint_name21994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_savepoint_name21997 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_SEGMENT_NAME_in_rollback_segment_name22033 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_rollback_segment_name22035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_rollback_segment_name22038 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_VAR_NAME_in_table_var_name22075 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_table_var_name22077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_table_var_name22080 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SCHEMA_NAME_in_schema_name22116 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_schema_name22118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_schema_name22121 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROUTINE_NAME_in_routine_name22157 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_routine_name22159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_routine_name22162 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000080L});
	public static final BitSet FOLLOW_link_name_in_routine_name22165 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PACKAGE_NAME_in_package_name22202 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_package_name22204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_package_name22209 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_IMPLEMENTATION_TYPE_NAME_in_implementation_type_name22247 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_implementation_type_name22249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_implementation_type_name22254 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_PARAMETER_NAME_in_parameter_name22292 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_parameter_name22294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_parameter_name22297 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCE_MODEL_NAME_in_reference_model_name22334 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_reference_model_name22336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_reference_model_name22339 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MAIN_MODEL_NAME_in_main_model_name22375 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_main_model_name22377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_main_model_name22380 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_QUERY_NAME_in_query_name22416 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_query_name22418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_query_name22421 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRAINT_NAME_in_constraint_name22457 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_constraint_name22459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_constraint_name22462 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000080L});
	public static final BitSet FOLLOW_link_name_in_constraint_name22465 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LABEL_NAME_in_label_name22502 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_label_name22504 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TYPE_NAME_in_type_name22535 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_type_name22539 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SEQUENCE_NAME_in_sequence_name22577 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_sequence_name22579 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_EXCEPTION_NAME_in_exception_name22616 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_exception_name22618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_exception_name22623 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_FUNCTION_NAME_in_function_name22661 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_function_name22663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_function_name22668 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_PROCEDURE_NAME_in_procedure_name22706 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_procedure_name22708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_procedure_name22713 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_TRIGGER_NAME_in_trigger_name22751 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_trigger_name22753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_trigger_name22758 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_HOSTED_VARIABLE_NAME_in_variable_name22796 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_variable_name22798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_variable_name22803 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_VARIABLE_NAME_in_variable_name22832 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_variable_name22834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_variable_name22839 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_INDEX_NAME_in_index_name22877 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_index_name22879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_index_name22882 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_NAME_in_cursor_name22913 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_cursor_name22915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_cursor_name22918 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RECORD_NAME_in_record_name22949 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_record_name22951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_record_name22954 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLLECTION_NAME_in_collection_name22985 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_collection_name22987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_collection_name22992 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LINK_NAME_in_link_name23030 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_link_name23032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_link_name23035 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLUMN_NAME_in_column_name23066 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_column_name23068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_column_name23073 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_TABLEVIEW_NAME_in_tableview_name23111 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_tableview_name23113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_tableview_name23118 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000080L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_link_name_in_tableview_name23121 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_partition_extension_clause_in_tableview_name23124 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CHAR_SET_NAME_in_char_set_name23172 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_char_set_name23176 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ARGUMENTS_in_function_argument23218 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_argument_in_function_argument23222 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_ARGUMENT_in_argument23260 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_argument23262 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_parameter_name_in_argument23264 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CUSTOM_TYPE_in_type_spec23308 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_type_spec23310 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000006000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_REF_VK_in_type_spec23312 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000006000000000L});
	public static final BitSet FOLLOW_PERCENT_ROWTYPE_VK_in_type_spec23316 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PERCENT_TYPE_VK_in_type_spec23318 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_native_datatype_spec_in_type_spec23387 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTERVAL_DATATYPE_in_type_spec23403 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_YEAR_VK_in_type_spec23406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_DAY_VK_in_type_spec23408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_MONTH_VK_in_type_spec23412 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SECOND_VK_in_type_spec23414 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_type_spec23417 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_PRECISION_in_type_precision23454 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_constant_in_type_precision23458 = new BitSet(new long[]{0x0000200008008048L,0x4020000000000000L,0x0000080040002000L,0x0100040000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_constant_in_type_precision23462 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0100040000000000L});
	public static final BitSet FOLLOW_CHAR_VK_in_type_precision23468 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BYTE_VK_in_type_precision23472 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NATIVE_DATATYPE_in_native_datatype_spec23535 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BFILE_VK_in_native_datatype_spec23546 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_BINARY_FLOAT_VK_in_native_datatype_spec23559 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_BINARY_INTEGER_VK_in_native_datatype_spec23572 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_BLOB_VK_in_native_datatype_spec23585 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_BOOLEAN_VK_in_native_datatype_spec23598 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_CHARACTER_VK_in_native_datatype_spec23611 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_CHAR_VK_in_native_datatype_spec23625 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_CLOB_VK_in_native_datatype_spec23638 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_DATE_VK_in_native_datatype_spec23651 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DATE_in_native_datatype_spec23664 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_DAY_VK_in_native_datatype_spec23677 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_DECIMAL_VK_in_native_datatype_spec23688 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_DEC_VK_in_native_datatype_spec23702 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_DOUBLE_VK_in_native_datatype_spec23715 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_DOUBLE_VK_in_native_datatype_spec23728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_PRECISION_VK_in_native_datatype_spec23730 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_DSINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec23743 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_FLOAT_VK_in_native_datatype_spec23754 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_HOUR_VK_in_native_datatype_spec23767 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_INTEGER_VK_in_native_datatype_spec23778 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_INT_VK_in_native_datatype_spec23791 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_LONG_VK_in_native_datatype_spec23804 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_LONG_VK_in_native_datatype_spec23817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_RAW_VK_in_native_datatype_spec23819 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_MINUTE_VK_in_native_datatype_spec23832 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_MLSLABEL_VK_in_native_datatype_spec23843 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_MONTH_VK_in_native_datatype_spec23854 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_NATURALN_VK_in_native_datatype_spec23865 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_NATURAL_VK_in_native_datatype_spec23876 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_NCHAR_VK_in_native_datatype_spec23887 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_NCLOB_VK_in_native_datatype_spec23900 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_NUMBER_VK_in_native_datatype_spec23913 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_NUMERIC_VK_in_native_datatype_spec23926 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_NVARCHAR2_VK_in_native_datatype_spec23939 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_PLS_INTEGER_VK_in_native_datatype_spec23952 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_POSITIVEN_VK_in_native_datatype_spec23965 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_POSITIVE_VK_in_native_datatype_spec23976 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_RAW_VK_in_native_datatype_spec23987 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_REAL_VK_in_native_datatype_spec24000 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_ROWID_VK_in_native_datatype_spec24011 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_SECOND_VK_in_native_datatype_spec24024 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_SIGNTYPE_VK_in_native_datatype_spec24035 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_SIMPLE_INTEGER_VK_in_native_datatype_spec24046 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_SMALLINT_VK_in_native_datatype_spec24057 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_STRING_VK_in_native_datatype_spec24070 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_TIMESTAMP_LTZ_UNCONSTRAINED_VK_in_native_datatype_spec24081 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_TIMESTAMP_TZ_UNCONSTRAINED_VK_in_native_datatype_spec24092 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_TIMESTAMP_UNCONSTRAINED_VK_in_native_datatype_spec24103 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_TIMESTAMP_VK_in_native_datatype_spec24114 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_TIMEZONE_ABBR_VK_in_native_datatype_spec24127 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_TIMEZONE_HOUR_VK_in_native_datatype_spec24138 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_TIMEZONE_MINUTE_VK_in_native_datatype_spec24149 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_TIMEZONE_REGION_VK_in_native_datatype_spec24160 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_UROWID_VK_in_native_datatype_spec24171 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_VARCHAR2_VK_in_native_datatype_spec24184 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_VARCHAR_VK_in_native_datatype_spec24197 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_YEAR_VK_in_native_datatype_spec24210 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_YMINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec24221 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_type_precision_in_native_datatype_spec24230 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_TIME_VK_in_native_datatype_spec24240 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LOCAL_VK_in_native_datatype_spec24244 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CASCATED_ELEMENT_in_general_element24319 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_id_in_general_element24349 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000110L});
	public static final BitSet FOLLOW_function_argument_in_general_element24369 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000110L});
	public static final BitSet FOLLOW_ANY_ELEMENT_in_general_element_id24432 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_general_element_id24434 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_constant24470 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUS_SIGN_in_constant24491 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_constant24495 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXACT_NUM_LIT_in_constant24516 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_APPROXIMATE_NUM_LIT_in_constant24536 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHAR_STRING_in_constant24556 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_constant24576 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TRUE_in_constant24596 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FALSE_in_constant24616 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DBTIMEZONE_VK_in_constant24636 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SESSIONTIMEZONE_VK_in_constant24657 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINVALUE_VK_in_constant24677 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MAXVALUE_VK_in_constant24697 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_constant24717 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_char_set_name_in_id24748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_id24751 = new BitSet(new long[]{0x0000000000000002L});
}
