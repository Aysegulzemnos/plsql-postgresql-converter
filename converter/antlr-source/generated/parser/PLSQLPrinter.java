// $ANTLR 3.5.2 PLSQLPrinter.g 2014-09-08 10:31:59

/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2014 Bars Group
 */
package parser;


import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.stringtemplate.*;
import org.antlr.stringtemplate.language.*;
import java.util.HashMap;
/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2014 Bars Group
 */
@SuppressWarnings("all")
public class PLSQLPrinter extends TreeParser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "AMPERSAND", "APPROXIMATE_NUM_LIT", 
		"ASSIGN_OP", "ASTERISK", "AT_SIGN", "B", "BINDVAR", "BIT_STRING_LIT", 
		"C", "CARRET_OPERATOR_PART", "CHAR_STRING", "CHAR_STRING_PERL", "COLON", 
		"COMMA", "COMMENT", "CONCATENATION_OP", "D", "DELIMITED_ID", "DOUBLE_ASTERISK", 
		"DOUBLE_PERIOD", "E", "EQUALS_OP", "EXACT_NUM_LIT", "EXCLAMATION_OPERATOR_PART", 
		"F", "G", "GREATER_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "H", "HEX_STRING_LIT", 
		"I", "INTRODUCER", "J", "K", "L", "LEFT_BRACKET", "LEFT_PAREN", "LESS_THAN_OP", 
		"LESS_THAN_OR_EQUALS_OP", "M", "MINUS_SIGN", "N", "NATIONAL_CHAR_STRING_LIT", 
		"NEWLINE", "NOT_EQUAL_OP", "O", "P", "PERCENT", "PERIOD", "PLSQL_NON_RESERVED_CONNECT_BY_ROOT", 
		"PLSQL_NON_RESERVED_ELSIF", "PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_PIVOT", 
		"PLSQL_NON_RESERVED_UNPIVOT", "PLSQL_NON_RESERVED_USING", "PLSQL_RESERVED_CLUSTERS", 
		"PLSQL_RESERVED_COLAUTH", "PLSQL_RESERVED_COMPRESS", "PLSQL_RESERVED_CRASH", 
		"PLSQL_RESERVED_EXCLUSIVE", "PLSQL_RESERVED_IDENTIFIED", "PLSQL_RESERVED_IF", 
		"PLSQL_RESERVED_INDEX", "PLSQL_RESERVED_INDEXES", "PLSQL_RESERVED_LOCK", 
		"PLSQL_RESERVED_MINUS", "PLSQL_RESERVED_MODE", "PLSQL_RESERVED_NOCOMPRESS", 
		"PLSQL_RESERVED_NOWAIT", "PLSQL_RESERVED_RESOURCE", "PLSQL_RESERVED_SHARE", 
		"PLSQL_RESERVED_START", "PLSQL_RESERVED_TABAUTH", "PLSQL_RESERVED_VIEWS", 
		"PLUS_SIGN", "PROMPT", "Q", "QS_ANGLE", "QS_BRACE", "QS_BRACK", "QS_OTHER", 
		"QS_OTHER_CH", "QS_PAREN", "QUESTION_MARK", "QUOTE", "R", "REGULAR_ID", 
		"RIGHT_BRACKET", "RIGHT_PAREN", "S", "SEMICOLON", "SEPARATOR", "SIMPLE_LETTER", 
		"SOLIDUS", "SPACE", "SQL92_RESERVED_ALL", "SQL92_RESERVED_ALTER", "SQL92_RESERVED_AND", 
		"SQL92_RESERVED_ANY", "SQL92_RESERVED_AS", "SQL92_RESERVED_ASC", "SQL92_RESERVED_BEGIN", 
		"SQL92_RESERVED_BETWEEN", "SQL92_RESERVED_BY", "SQL92_RESERVED_CASE", 
		"SQL92_RESERVED_CHECK", "SQL92_RESERVED_CONNECT", "SQL92_RESERVED_CREATE", 
		"SQL92_RESERVED_CURRENT", "SQL92_RESERVED_CURSOR", "SQL92_RESERVED_DATE", 
		"SQL92_RESERVED_DECLARE", "SQL92_RESERVED_DEFAULT", "SQL92_RESERVED_DELETE", 
		"SQL92_RESERVED_DESC", "SQL92_RESERVED_DISTINCT", "SQL92_RESERVED_DROP", 
		"SQL92_RESERVED_ELSE", "SQL92_RESERVED_END", "SQL92_RESERVED_EXCEPTION", 
		"SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE", "SQL92_RESERVED_FETCH", 
		"SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", "SQL92_RESERVED_GOTO", "SQL92_RESERVED_GRANT", 
		"SQL92_RESERVED_GROUP", "SQL92_RESERVED_HAVING", "SQL92_RESERVED_IN", 
		"SQL92_RESERVED_INSERT", "SQL92_RESERVED_INTERSECT", "SQL92_RESERVED_INTO", 
		"SQL92_RESERVED_IS", "SQL92_RESERVED_LIKE", "SQL92_RESERVED_NOT", "SQL92_RESERVED_NULL", 
		"SQL92_RESERVED_OF", "SQL92_RESERVED_ON", "SQL92_RESERVED_OPTION", "SQL92_RESERVED_OR", 
		"SQL92_RESERVED_ORDER", "SQL92_RESERVED_OVERLAPS", "SQL92_RESERVED_PRIOR", 
		"SQL92_RESERVED_PROCEDURE", "SQL92_RESERVED_PUBLIC", "SQL92_RESERVED_REVOKE", 
		"SQL92_RESERVED_SELECT", "SQL92_RESERVED_SIZE", "SQL92_RESERVED_TABLE", 
		"SQL92_RESERVED_THE", "SQL92_RESERVED_THEN", "SQL92_RESERVED_TO", "SQL92_RESERVED_TRUE", 
		"SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", "SQL92_RESERVED_UPDATE", 
		"SQL92_RESERVED_VALUES", "SQL92_RESERVED_VIEW", "SQL92_RESERVED_WHEN", 
		"SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH", "T", "TILDE_OPERATOR_PART", 
		"U", "UNDERSCORE", "UNSIGNED_INTEGER", "V", "VERTICAL_BAR", "W", "X", 
		"Y", "Z", "ZV", "ADD_VK", "AFTER_EACH_ROW", "AFTER_STATEMENT", "AFTER_VK", 
		"AGENT_VK", "AGGREGATE_VK", "ALIAS", "ALTER_ATTRIBUTE", "ALTER_COLLECTION", 
		"ALTER_FUNCTION", "ALTER_METHOD", "ALTER_METHOD_ELEMENT", "ALTER_PACKAGE", 
		"ALTER_PROCEDURE", "ALTER_SEQUENCE", "ALTER_TRIGGER", "ALTER_TYPE", "ANALYZE_VK", 
		"ANY_ELEMENT", "ANY_MODE", "ARGUMENT", "ARGUMENTS", "ASSIGN", "ASSOCIATE_VK", 
		"ATTRIBUTE", "ATTRIBUTES", "ATTRIBUTE_NAME", "AT_VK", "AUDIT_VK", "AUTHID_VK", 
		"AUTOMATIC_VK", "AUTONOMOUS_TRANSACTION_VK", "AUTO_VK", "BATCH_VK", "BEFORE_EACH_ROW", 
		"BEFORE_STATEMENT", "BEFORE_VK", "BFILE_VK", "BINARY_DOUBLE_VK", "BINARY_FLOAT_VK", 
		"BINARY_INTEGER_VK", "BIT_VK", "BLOB_VK", "BLOCK", "BLOCK_VK", "BODY", 
		"BODY_MODE", "BODY_VK", "BOOLEAN_VK", "BOTH_VK", "BREADTH_VK", "BULK_VK", 
		"BYTE_VK", "CACHE_VK", "CALL_MODE", "CALL_VK", "CANONICAL_VK", "CASCADE_VK", 
		"CASCATED_ELEMENT", "CAST_VK", "CHARACTER_VK", "CHAR_CS_VK", "CHAR_SET_NAME", 
		"CHAR_VK", "CHR_VK", "CLOB_VK", "CLOSE_VK", "CLUSTER_VK", "COLLECTION_MODE", 
		"COLLECTION_NAME", "COLLECT_VK", "COLUMNS", "COLUMN_NAME", "COMMENT_VK", 
		"COMMITTED_VK", "COMMIT_VK", "COMPATIBILITY_VK", "COMPILATION_UNIT", "COMPILER_PARAMETER", 
		"COMPILE_VK", "COMPOUND_DML", "COMPOUND_VK", "CONDITIONAL_INSERT", "CONSTANT_VK", 
		"CONSTRAINT_NAME", "CONSTRUCTOR_SPEC", "CONSTRUCTOR_VK", "CONTENT_VK", 
		"CONTEXT_VK", "CONTINUE_VK", "CONVERT_VK", "CORRUPT_XID_ALL_VK", "CORRUPT_XID_VK", 
		"COST_CLASS_NAME", "COST_VK", "COUNT_VK", "CREATE_FUNCTION", "CREATE_PACKAGE_BODY", 
		"CREATE_PACKAGE_SPEC", "CREATE_PROCEDURE", "CREATE_SEQUENCE", "CREATE_TRIGGER", 
		"CREATE_TYPE_BODY", "CREATE_TYPE_SPEC", "CROSS_VK", "CUBE_VK", "CURRENT_USER_VK", 
		"CURRENT_VK", "CURSOR_BASED_FOR", "CURSOR_DECLARE", "CURSOR_NAME", "CUSTOMDATUM_VK", 
		"CUSTOM_TYPE", "CYCLE_VK", "C_VK", "DATABASE_VK", "DATETIME_OP", "DAY_VK", 
		"DBTIMEZONE_VK", "DB_ROLE_CHANGE_VK", "DDL_VK", "DEBUG_VK", "DECIMAL_VK", 
		"DECOMPOSE_VK", "DECREMENT_VK", "DEC_VK", "DEFAULTS_VK", "DEFAULT_VALUE", 
		"DEFERRED_VK", "DEFINER_VK", "DENSE_RANK_VK", "DEPENDENT_HANDLING", "DEPTH_VK", 
		"DETERMINISTIC_VK", "DIMENSION_VK", "DIRECT_MODE", "DISABLE_VK", "DISASSOCIATE_VK", 
		"DIV_VK", "DML_EVENT", "DML_EVENT_ELEMENT", "DOCUMENT_VK", "DOT_ASTERISK", 
		"DOUBLE_VK", "DROP_FUNCTION", "DROP_PACKAGE", "DROP_PROCEDURE", "DROP_SEQUENCE", 
		"DROP_TRIGGER", "DROP_TYPE", "DSINTERVAL_UNCONSTRAINED_VK", "DYNAMIC_RETURN", 
		"ELEMENT", "ELEMENTS_MODE", "ELEMENT_SPEC", "ENABLE_VK", "ENCODING_VK", 
		"ENTITYESCAPING_VK", "EVALNAME_VK", "EXCEPTIONS_VK", "EXCEPTION_DECLARE", 
		"EXCEPTION_INIT_VK", "EXCEPTION_NAME", "EXCLUDE_VK", "EXECUTE_VK", "EXIT_VK", 
		"EXPLAIN_STATEMENT", "EXPR", "EXPR_LIST", "EXTERNAL_MODE", "EXTERNAL_VK", 
		"EXTRACT_VK", "FACTORING", "FIELDS", "FIELD_SPEC", "FINAL_VK", "FIRST_VALUE_VK", 
		"FIRST_VK", "FLOAT_VK", "FOLLOWING_VK", "FOLLOWS_VK", "FORALL_VK", "FORCE_VK", 
		"FOR_EACH_ROW", "FOR_LOOP", "FOR_MULTI_COLUMN", "FOR_SINGLE_COLUMN", "FULL_VK", 
		"FUNCTION_ENABLING_OVER", "FUNCTION_ENABLING_USING", "FUNCTION_ENABLING_WITHIN_OR_OVER", 
		"FUNCTION_NAME", "FUNCTION_SPEC", "GROUPING_VK", "GROUPIN_SET", "GROUP_BY_ELEMENT", 
		"HASH_VK", "HIDE_VK", "HIERARCHICAL", "HOSTED_VARIABLE", "HOSTED_VARIABLE_NAME", 
		"HOSTED_VARIABLE_ROUTINE_CALL", "HOUR_VK", "ID", "IGNORE_VK", "IMMEDIATE_VK", 
		"IMPLEMENTATION_TYPE_NAME", "INCLUDE_VK", "INCLUDING_VK", "INCREMENT_VK", 
		"INDENT_VK", "INDEXED_BY", "INDEXED_FOR", "INDEX_NAME", "INDICES_BOUND", 
		"INLINE_VK", "INNER_VK", "INOUT_VK", "INSTANTIABLE_VK", "INSTEAD_VK", 
		"INTEGER_VK", "INTERVAL_DATATYPE", "INT_VK", "INVALIDATE_VK", "ISOLATION_VK", 
		"IS_A_SET", "IS_EMPTY", "IS_INFINITE", "IS_NAN", "IS_NOT_A_SET", "IS_NOT_EMPTY", 
		"IS_NOT_INFINITE", "IS_NOT_NAN", "IS_NOT_NULL", "IS_NOT_OF_TYPE", "IS_NOT_PRESENT", 
		"IS_NULL", "IS_OF_TYPE", "IS_PRESENT", "ITERATE_VK", "JAVA_VK", "JOIN_DEF", 
		"KEEP_VK", "LABEL_DECLARE", "LABEL_NAME", "LANGUAGE_VK", "LAST_VALUE_VK", 
		"LAST_VK", "LEADING_VK", "LEFT_VK", "LIBRARY_VK", "LIKE2_VK", "LIKE4_VK", 
		"LIKEC_VK", "LIMIT_VK", "LINK_NAME", "LOCAL_VK", "LOCK_TABLE_ELEMENT", 
		"LOGIC_EXPR", "LOGOFF_VK", "LOGON_VK", "LOG_VK", "LONG_VK", "LOOP_VK", 
		"MAIN_MODEL", "MAIN_MODEL_NAME", "MAP_VK", "MAXVALUE_VK", "MEASURES_VK", 
		"MEMBER_VK", "MERGE_INSERT", "MERGE_UPDATE", "MERGE_VK", "MINUTE_VK", 
		"MINVALUE_VK", "MLSLABEL_VK", "MODEL_COLUMN", "MODEL_COLUMNS", "MODEL_EXPRESSION", 
		"MODEL_RULE", "MODEL_RULES", "MODIFIER", "MODIFY_VK", "MOD_VK", "MONTH_VK", 
		"MULTI_TABLE_MODE", "NAME_VK", "NATIVE_DATATYPE", "NATURALN_VK", "NATURAL_VK", 
		"NAV_VK", "NCHAR_CS_VK", "NCHAR_VK", "NCLOB_VK", "NESTED_TABLE_TYPE_DEF", 
		"NESTED_VK", "NEW_VK", "NOAUDIT_VK", "NOCACHE_VK", "NOCOPY_VK", "NOCYCLE_VK", 
		"NOENTITYESCAPING_VK", "NOMAXVALUE_VK", "NOMINVALUE_VK", "NON_DML", "NOORDER_VK", 
		"NOSCHEMACHECK_VK", "NOT_BETWEEN", "NOT_IN", "NOT_LIKE", "NO_VK", "NULLS_VK", 
		"NUMBER_VK", "NUMERIC_VK", "NVARCHAR2_VK", "OBJECT_AS", "OBJECT_MEMBERS", 
		"OBJECT_TYPE_DEF", "OBJECT_VK", "OFF_VK", "OLD_VK", "ONLY_VK", "OPEN_VK", 
		"ORADATA_VK", "ORDER_BY_ELEMENT", "ORDER_BY_ELEMENTS", "ORDINALITY_VK", 
		"OUTER_JOIN_SIGN", "OUT_VK", "OVERRIDING_VK", "OVER_VK", "PACKAGE_NAME", 
		"PACKAGE_VK", "PARALLEL_ENABLE_VK", "PARAMETER", "PARAMETERS", "PARAMETERS_VK", 
		"PARAMETER_NAME", "PARENT_VK", "PARTITION_VK", "PASSING_VK", "PERCENT_FOUND_VK", 
		"PERCENT_ISOPEN_VK", "PERCENT_NOTFOUND_VK", "PERCENT_ROWCOUNT_VK", "PERCENT_ROWTYPE_VK", 
		"PERCENT_TYPE_VK", "PIPELINED_VK", "PIPE_ROW", "PIPE_VK", "PIVOT_ALIAS", 
		"PIVOT_ELEMENT", "PIVOT_IN_ELEMENT", "PIVOT_VK", "PLS_INTEGER_VK", "POSITIVEN_VK", 
		"POSITIVE_VK", "PRAGMA_DECLARE", "PRAGMA_VK", "PRECEDING_VK", "PRECISION", 
		"PRECISION_VK", "PREDICTION_FUNCTION", "PROCEDURE_NAME", "PROCEDURE_SPEC", 
		"QUERY_NAME", "RAISE_VK", "RANGE_VK", "RAW_VK", "READ_VK", "REAL_VK", 
		"RECORD_NAME", "RECORD_TYPE_DECLARE", "RECORD_VAR_DECLARE", "REFERENCE_MODEL_NAME", 
		"REFERENCE_VK", "REFERENCING_VK", "REF_VK", "REJECT_VK", "RELIES_ON_VK", 
		"RENAME_VK", "REPLACE_VK", "RESPECT_VK", "RESTRICT_REFERENCES_VK", "RESULT_CACHE_VK", 
		"RETURN_VK", "REUSE_VK", "REVERSE_VK", "RIGHT_VK", "ROLLBACK_SEGMENT_NAME", 
		"ROLLBACK_VK", "ROLLUP_VK", "ROUTINE_CALL", "ROUTINE_NAME", "ROWID_VK", 
		"ROWS_VK", "ROW_VK", "RULES_VK", "SAMPLE_VK", "SAVEPOINT_NAME", "SAVEPOINT_VK", 
		"SCHEMACHECK_VK", "SCHEMA_NAME", "SCHEMA_VK", "SCN_VK", "SEARCHED_CASE", 
		"SEARCH_VK", "SECOND_VK", "SEED_VK", "SELECTED_TABLEVIEW", "SELECT_BASED_FOR", 
		"SELECT_ITEM", "SELECT_LIST", "SELECT_MODE", "SELECT_STATEMENT", "SELF_VK", 
		"SEQUENCE_NAME", "SEQUENCE_VK", "SEQUENTIAL_VK", "SERIALIZABLE_VK", "SERIALLY_REUSABLE_VK", 
		"SERVERERROR_VK", "SESSIONTIMEZONE_VK", "SET_CONSTRAINT", "SET_SERVEROUTPUT", 
		"SET_TRANSACTION", "SET_VK", "SHOW_VK", "SHUTDOWN_VK", "SIBLINGS_VK", 
		"SIGNTYPE_VK", "SIMPLE_BOUND", "SIMPLE_CASE", "SIMPLE_DML", "SIMPLE_INTEGER_VK", 
		"SINGLE_TABLE_MODE", "SINGLE_VK", "SKIP_VK", "SMALLINT_VK", "SOME_VK", 
		"SPECIFICATION_VK", "SQLDATA_VK", "SQL_SCRIPT", "STANDALONE_VK", "STANDARD_FUNCTION", 
		"STARTUP_VK", "STATEMENTS", "STATIC_RETURNING", "STATIC_VK", "STATISTICS_VK", 
		"STREAMING_CLAUSE", "STRING_VK", "SUBMULTISET_VK", "SUBPARTITION_VK", 
		"SUBQUERY", "SUBTYPE_DECLARE", "SUSPEND_VK", "TABLEVIEW_NAME", "TABLE_ELEMENT", 
		"TABLE_EXPRESSION", "TABLE_REF", "TABLE_REF_ELEMENT", "TABLE_TYPE_DECLARE", 
		"TABLE_VAR_DECLARE", "TABLE_VAR_NAME", "THREE_DOTS", "TIMESTAMP_LTZ_UNCONSTRAINED_VK", 
		"TIMESTAMP_TZ_UNCONSTRAINED_VK", "TIMESTAMP_UNCONSTRAINED_VK", "TIMESTAMP_VK", 
		"TIMEZONE_ABBR_VK", "TIMEZONE_HOUR_VK", "TIMEZONE_MINUTE_VK", "TIMEZONE_REGION_VK", 
		"TIME_VK", "TRAILING_VK", "TRANSLATE_VK", "TREAT_VK", "TRIGGER_NAME", 
		"TRIM_VK", "TRUNCATE_VK", "TYPE_BODY_ELEMENTS", "TYPE_NAME", "TYPE_VK", 
		"UNARY_OPERATOR", "UNBOUNDED_VK", "UNDER_VK", "UNLIMITED_VK", "UNPIVOT_IN_ELEMENT", 
		"UNPIVOT_VK", "UNTIL_VK", "UPDATED_VK", "UPSERT_VK", "UROWID_VK", "USING_MODE", 
		"VALIDATE_VK", "VALUES_BOUND", "VALUE_VK", "VARCHAR2_VK", "VARCHAR_VK", 
		"VARIABLE_DECLARE", "VARIABLE_NAME", "VARR_ARRAY_DEF", "VECTOR_EXPR", 
		"VERSIONS_VK", "VERSION_VK", "WAIT_VK", "WELLFORMED_VK", "WHILE_LOOP", 
		"WITHIN_VK", "WORK_VK", "WRITE_VK", "XMLAGG_VK", "XMLATTRIBUTES_VK", "XMLCAST_VK", 
		"XMLCOLATTVAL_VK", "XMLELEMENT_VK", "XMLEXISTS_VK", "XMLFOREST_VK", "XMLNAMESPACES_VK", 
		"XMLPARSE_VK", "XMLPI_VK", "XMLQUERY_VK", "XMLROOT_VK", "XMLSERIALIZE_VK", 
		"XMLTABLE_VK", "XML_ALIAS", "XML_COLUMN", "XML_COLUMN_NAME", "XML_ELEMENT", 
		"XML_VK", "YEAR_VK", "YES_VK", "YMINTERVAL_UNCONSTRAINED_VK", "DATE_VK", 
		"ORDER_VK", "START_VK"
	};
	public static final int EOF=-1;
	public static final int A=4;
	public static final int AMPERSAND=5;
	public static final int APPROXIMATE_NUM_LIT=6;
	public static final int ASSIGN_OP=7;
	public static final int ASTERISK=8;
	public static final int AT_SIGN=9;
	public static final int B=10;
	public static final int BINDVAR=11;
	public static final int BIT_STRING_LIT=12;
	public static final int C=13;
	public static final int CARRET_OPERATOR_PART=14;
	public static final int CHAR_STRING=15;
	public static final int CHAR_STRING_PERL=16;
	public static final int COLON=17;
	public static final int COMMA=18;
	public static final int COMMENT=19;
	public static final int CONCATENATION_OP=20;
	public static final int D=21;
	public static final int DELIMITED_ID=22;
	public static final int DOUBLE_ASTERISK=23;
	public static final int DOUBLE_PERIOD=24;
	public static final int E=25;
	public static final int EQUALS_OP=26;
	public static final int EXACT_NUM_LIT=27;
	public static final int EXCLAMATION_OPERATOR_PART=28;
	public static final int F=29;
	public static final int G=30;
	public static final int GREATER_THAN_OP=31;
	public static final int GREATER_THAN_OR_EQUALS_OP=32;
	public static final int H=33;
	public static final int HEX_STRING_LIT=34;
	public static final int I=35;
	public static final int INTRODUCER=36;
	public static final int J=37;
	public static final int K=38;
	public static final int L=39;
	public static final int LEFT_BRACKET=40;
	public static final int LEFT_PAREN=41;
	public static final int LESS_THAN_OP=42;
	public static final int LESS_THAN_OR_EQUALS_OP=43;
	public static final int M=44;
	public static final int MINUS_SIGN=45;
	public static final int N=46;
	public static final int NATIONAL_CHAR_STRING_LIT=47;
	public static final int NEWLINE=48;
	public static final int NOT_EQUAL_OP=49;
	public static final int O=50;
	public static final int P=51;
	public static final int PERCENT=52;
	public static final int PERIOD=53;
	public static final int PLSQL_NON_RESERVED_CONNECT_BY_ROOT=54;
	public static final int PLSQL_NON_RESERVED_ELSIF=55;
	public static final int PLSQL_NON_RESERVED_MODEL=56;
	public static final int PLSQL_NON_RESERVED_PIVOT=57;
	public static final int PLSQL_NON_RESERVED_UNPIVOT=58;
	public static final int PLSQL_NON_RESERVED_USING=59;
	public static final int PLSQL_RESERVED_CLUSTERS=60;
	public static final int PLSQL_RESERVED_COLAUTH=61;
	public static final int PLSQL_RESERVED_COMPRESS=62;
	public static final int PLSQL_RESERVED_CRASH=63;
	public static final int PLSQL_RESERVED_EXCLUSIVE=64;
	public static final int PLSQL_RESERVED_IDENTIFIED=65;
	public static final int PLSQL_RESERVED_IF=66;
	public static final int PLSQL_RESERVED_INDEX=67;
	public static final int PLSQL_RESERVED_INDEXES=68;
	public static final int PLSQL_RESERVED_LOCK=69;
	public static final int PLSQL_RESERVED_MINUS=70;
	public static final int PLSQL_RESERVED_MODE=71;
	public static final int PLSQL_RESERVED_NOCOMPRESS=72;
	public static final int PLSQL_RESERVED_NOWAIT=73;
	public static final int PLSQL_RESERVED_RESOURCE=74;
	public static final int PLSQL_RESERVED_SHARE=75;
	public static final int PLSQL_RESERVED_START=76;
	public static final int PLSQL_RESERVED_TABAUTH=77;
	public static final int PLSQL_RESERVED_VIEWS=78;
	public static final int PLUS_SIGN=79;
	public static final int PROMPT=80;
	public static final int Q=81;
	public static final int QS_ANGLE=82;
	public static final int QS_BRACE=83;
	public static final int QS_BRACK=84;
	public static final int QS_OTHER=85;
	public static final int QS_OTHER_CH=86;
	public static final int QS_PAREN=87;
	public static final int QUESTION_MARK=88;
	public static final int QUOTE=89;
	public static final int R=90;
	public static final int REGULAR_ID=91;
	public static final int RIGHT_BRACKET=92;
	public static final int RIGHT_PAREN=93;
	public static final int S=94;
	public static final int SEMICOLON=95;
	public static final int SEPARATOR=96;
	public static final int SIMPLE_LETTER=97;
	public static final int SOLIDUS=98;
	public static final int SPACE=99;
	public static final int SQL92_RESERVED_ALL=100;
	public static final int SQL92_RESERVED_ALTER=101;
	public static final int SQL92_RESERVED_AND=102;
	public static final int SQL92_RESERVED_ANY=103;
	public static final int SQL92_RESERVED_AS=104;
	public static final int SQL92_RESERVED_ASC=105;
	public static final int SQL92_RESERVED_BEGIN=106;
	public static final int SQL92_RESERVED_BETWEEN=107;
	public static final int SQL92_RESERVED_BY=108;
	public static final int SQL92_RESERVED_CASE=109;
	public static final int SQL92_RESERVED_CHECK=110;
	public static final int SQL92_RESERVED_CONNECT=111;
	public static final int SQL92_RESERVED_CREATE=112;
	public static final int SQL92_RESERVED_CURRENT=113;
	public static final int SQL92_RESERVED_CURSOR=114;
	public static final int SQL92_RESERVED_DATE=115;
	public static final int SQL92_RESERVED_DECLARE=116;
	public static final int SQL92_RESERVED_DEFAULT=117;
	public static final int SQL92_RESERVED_DELETE=118;
	public static final int SQL92_RESERVED_DESC=119;
	public static final int SQL92_RESERVED_DISTINCT=120;
	public static final int SQL92_RESERVED_DROP=121;
	public static final int SQL92_RESERVED_ELSE=122;
	public static final int SQL92_RESERVED_END=123;
	public static final int SQL92_RESERVED_EXCEPTION=124;
	public static final int SQL92_RESERVED_EXISTS=125;
	public static final int SQL92_RESERVED_FALSE=126;
	public static final int SQL92_RESERVED_FETCH=127;
	public static final int SQL92_RESERVED_FOR=128;
	public static final int SQL92_RESERVED_FROM=129;
	public static final int SQL92_RESERVED_GOTO=130;
	public static final int SQL92_RESERVED_GRANT=131;
	public static final int SQL92_RESERVED_GROUP=132;
	public static final int SQL92_RESERVED_HAVING=133;
	public static final int SQL92_RESERVED_IN=134;
	public static final int SQL92_RESERVED_INSERT=135;
	public static final int SQL92_RESERVED_INTERSECT=136;
	public static final int SQL92_RESERVED_INTO=137;
	public static final int SQL92_RESERVED_IS=138;
	public static final int SQL92_RESERVED_LIKE=139;
	public static final int SQL92_RESERVED_NOT=140;
	public static final int SQL92_RESERVED_NULL=141;
	public static final int SQL92_RESERVED_OF=142;
	public static final int SQL92_RESERVED_ON=143;
	public static final int SQL92_RESERVED_OPTION=144;
	public static final int SQL92_RESERVED_OR=145;
	public static final int SQL92_RESERVED_ORDER=146;
	public static final int SQL92_RESERVED_OVERLAPS=147;
	public static final int SQL92_RESERVED_PRIOR=148;
	public static final int SQL92_RESERVED_PROCEDURE=149;
	public static final int SQL92_RESERVED_PUBLIC=150;
	public static final int SQL92_RESERVED_REVOKE=151;
	public static final int SQL92_RESERVED_SELECT=152;
	public static final int SQL92_RESERVED_SIZE=153;
	public static final int SQL92_RESERVED_TABLE=154;
	public static final int SQL92_RESERVED_THE=155;
	public static final int SQL92_RESERVED_THEN=156;
	public static final int SQL92_RESERVED_TO=157;
	public static final int SQL92_RESERVED_TRUE=158;
	public static final int SQL92_RESERVED_UNION=159;
	public static final int SQL92_RESERVED_UNIQUE=160;
	public static final int SQL92_RESERVED_UPDATE=161;
	public static final int SQL92_RESERVED_VALUES=162;
	public static final int SQL92_RESERVED_VIEW=163;
	public static final int SQL92_RESERVED_WHEN=164;
	public static final int SQL92_RESERVED_WHERE=165;
	public static final int SQL92_RESERVED_WITH=166;
	public static final int T=167;
	public static final int TILDE_OPERATOR_PART=168;
	public static final int U=169;
	public static final int UNDERSCORE=170;
	public static final int UNSIGNED_INTEGER=171;
	public static final int V=172;
	public static final int VERTICAL_BAR=173;
	public static final int W=174;
	public static final int X=175;
	public static final int Y=176;
	public static final int Z=177;
	public static final int ZV=178;
	public static final int ADD_VK=179;
	public static final int AFTER_EACH_ROW=180;
	public static final int AFTER_STATEMENT=181;
	public static final int AFTER_VK=182;
	public static final int AGENT_VK=183;
	public static final int AGGREGATE_VK=184;
	public static final int ALIAS=185;
	public static final int ALTER_ATTRIBUTE=186;
	public static final int ALTER_COLLECTION=187;
	public static final int ALTER_FUNCTION=188;
	public static final int ALTER_METHOD=189;
	public static final int ALTER_METHOD_ELEMENT=190;
	public static final int ALTER_PACKAGE=191;
	public static final int ALTER_PROCEDURE=192;
	public static final int ALTER_SEQUENCE=193;
	public static final int ALTER_TRIGGER=194;
	public static final int ALTER_TYPE=195;
	public static final int ANALYZE_VK=196;
	public static final int ANY_ELEMENT=197;
	public static final int ANY_MODE=198;
	public static final int ARGUMENT=200;
	public static final int ARGUMENTS=201;
	public static final int ASSIGN=202;
	public static final int ASSOCIATE_VK=203;
	public static final int ATTRIBUTE=205;
	public static final int ATTRIBUTES=206;
	public static final int ATTRIBUTE_NAME=207;
	public static final int AT_VK=209;
	public static final int AUDIT_VK=210;
	public static final int AUTHID_VK=211;
	public static final int AUTOMATIC_VK=212;
	public static final int AUTONOMOUS_TRANSACTION_VK=213;
	public static final int AUTO_VK=214;
	public static final int BATCH_VK=215;
	public static final int BEFORE_EACH_ROW=216;
	public static final int BEFORE_STATEMENT=217;
	public static final int BEFORE_VK=218;
	public static final int BFILE_VK=219;
	public static final int BINARY_DOUBLE_VK=220;
	public static final int BINARY_FLOAT_VK=221;
	public static final int BINARY_INTEGER_VK=222;
	public static final int BIT_VK=224;
	public static final int BLOB_VK=225;
	public static final int BLOCK=226;
	public static final int BLOCK_VK=227;
	public static final int BODY=228;
	public static final int BODY_MODE=229;
	public static final int BODY_VK=230;
	public static final int BOOLEAN_VK=231;
	public static final int BOTH_VK=232;
	public static final int BREADTH_VK=233;
	public static final int BULK_VK=234;
	public static final int BYTE_VK=235;
	public static final int CACHE_VK=236;
	public static final int CALL_MODE=237;
	public static final int CALL_VK=238;
	public static final int CANONICAL_VK=239;
	public static final int CASCADE_VK=241;
	public static final int CASCATED_ELEMENT=242;
	public static final int CAST_VK=243;
	public static final int CHARACTER_VK=244;
	public static final int CHAR_CS_VK=245;
	public static final int CHAR_SET_NAME=246;
	public static final int CHAR_VK=249;
	public static final int CHR_VK=250;
	public static final int CLOB_VK=251;
	public static final int CLOSE_VK=252;
	public static final int CLUSTER_VK=253;
	public static final int COLLECTION_MODE=254;
	public static final int COLLECTION_NAME=255;
	public static final int COLLECT_VK=256;
	public static final int COLUMNS=258;
	public static final int COLUMN_NAME=259;
	public static final int COMMENT_VK=261;
	public static final int COMMITTED_VK=262;
	public static final int COMMIT_VK=263;
	public static final int COMPATIBILITY_VK=264;
	public static final int COMPILATION_UNIT=265;
	public static final int COMPILER_PARAMETER=266;
	public static final int COMPILE_VK=267;
	public static final int COMPOUND_DML=268;
	public static final int COMPOUND_VK=269;
	public static final int CONDITIONAL_INSERT=271;
	public static final int CONSTANT_VK=272;
	public static final int CONSTRAINT_NAME=273;
	public static final int CONSTRUCTOR_SPEC=274;
	public static final int CONSTRUCTOR_VK=275;
	public static final int CONTENT_VK=276;
	public static final int CONTEXT_VK=277;
	public static final int CONTINUE_VK=278;
	public static final int CONVERT_VK=279;
	public static final int CORRUPT_XID_ALL_VK=280;
	public static final int CORRUPT_XID_VK=281;
	public static final int COST_CLASS_NAME=282;
	public static final int COST_VK=283;
	public static final int COUNT_VK=284;
	public static final int CREATE_FUNCTION=285;
	public static final int CREATE_PACKAGE_BODY=286;
	public static final int CREATE_PACKAGE_SPEC=287;
	public static final int CREATE_PROCEDURE=288;
	public static final int CREATE_SEQUENCE=289;
	public static final int CREATE_TRIGGER=290;
	public static final int CREATE_TYPE_BODY=291;
	public static final int CREATE_TYPE_SPEC=292;
	public static final int CROSS_VK=293;
	public static final int CUBE_VK=294;
	public static final int CURRENT_USER_VK=295;
	public static final int CURRENT_VK=296;
	public static final int CURSOR_BASED_FOR=297;
	public static final int CURSOR_DECLARE=298;
	public static final int CURSOR_NAME=299;
	public static final int CUSTOMDATUM_VK=300;
	public static final int CUSTOM_TYPE=301;
	public static final int CYCLE_VK=302;
	public static final int C_VK=303;
	public static final int DATABASE_VK=304;
	public static final int DATETIME_OP=305;
	public static final int DAY_VK=306;
	public static final int DBTIMEZONE_VK=307;
	public static final int DB_ROLE_CHANGE_VK=308;
	public static final int DDL_VK=309;
	public static final int DEBUG_VK=310;
	public static final int DECIMAL_VK=311;
	public static final int DECOMPOSE_VK=312;
	public static final int DECREMENT_VK=313;
	public static final int DEC_VK=314;
	public static final int DEFAULTS_VK=315;
	public static final int DEFAULT_VALUE=316;
	public static final int DEFERRED_VK=317;
	public static final int DEFINER_VK=318;
	public static final int DENSE_RANK_VK=320;
	public static final int DEPENDENT_HANDLING=321;
	public static final int DEPTH_VK=322;
	public static final int DETERMINISTIC_VK=323;
	public static final int DIMENSION_VK=324;
	public static final int DIRECT_MODE=325;
	public static final int DISABLE_VK=326;
	public static final int DISASSOCIATE_VK=327;
	public static final int DIV_VK=328;
	public static final int DML_EVENT=329;
	public static final int DML_EVENT_ELEMENT=330;
	public static final int DOCUMENT_VK=331;
	public static final int DOT_ASTERISK=332;
	public static final int DOUBLE_VK=333;
	public static final int DROP_FUNCTION=334;
	public static final int DROP_PACKAGE=335;
	public static final int DROP_PROCEDURE=336;
	public static final int DROP_SEQUENCE=337;
	public static final int DROP_TRIGGER=338;
	public static final int DROP_TYPE=339;
	public static final int DSINTERVAL_UNCONSTRAINED_VK=340;
	public static final int DYNAMIC_RETURN=341;
	public static final int ELEMENT=342;
	public static final int ELEMENTS_MODE=343;
	public static final int ELEMENT_SPEC=344;
	public static final int ENABLE_VK=345;
	public static final int ENCODING_VK=346;
	public static final int ENTITYESCAPING_VK=347;
	public static final int EVALNAME_VK=349;
	public static final int EXCEPTIONS_VK=351;
	public static final int EXCEPTION_DECLARE=352;
	public static final int EXCEPTION_INIT_VK=353;
	public static final int EXCEPTION_NAME=354;
	public static final int EXCLUDE_VK=356;
	public static final int EXECUTE_VK=357;
	public static final int EXIT_VK=358;
	public static final int EXPLAIN_STATEMENT=359;
	public static final int EXPR=360;
	public static final int EXPR_LIST=361;
	public static final int EXTERNAL_MODE=362;
	public static final int EXTERNAL_VK=363;
	public static final int EXTRACT_VK=364;
	public static final int FACTORING=365;
	public static final int FIELDS=366;
	public static final int FIELD_SPEC=367;
	public static final int FINAL_VK=368;
	public static final int FIRST_VALUE_VK=369;
	public static final int FIRST_VK=370;
	public static final int FLOAT_VK=371;
	public static final int FOLLOWING_VK=372;
	public static final int FOLLOWS_VK=373;
	public static final int FORALL_VK=374;
	public static final int FORCE_VK=375;
	public static final int FOR_EACH_ROW=376;
	public static final int FOR_LOOP=377;
	public static final int FOR_MULTI_COLUMN=378;
	public static final int FOR_SINGLE_COLUMN=379;
	public static final int FULL_VK=380;
	public static final int FUNCTION_ENABLING_OVER=381;
	public static final int FUNCTION_ENABLING_USING=382;
	public static final int FUNCTION_ENABLING_WITHIN_OR_OVER=383;
	public static final int FUNCTION_NAME=384;
	public static final int FUNCTION_SPEC=385;
	public static final int GROUPING_VK=388;
	public static final int GROUPIN_SET=389;
	public static final int GROUP_BY_ELEMENT=390;
	public static final int HASH_VK=391;
	public static final int HIDE_VK=392;
	public static final int HIERARCHICAL=393;
	public static final int HOSTED_VARIABLE=394;
	public static final int HOSTED_VARIABLE_NAME=395;
	public static final int HOSTED_VARIABLE_ROUTINE_CALL=396;
	public static final int HOUR_VK=397;
	public static final int ID=398;
	public static final int IGNORE_VK=399;
	public static final int IMMEDIATE_VK=400;
	public static final int IMPLEMENTATION_TYPE_NAME=401;
	public static final int INCLUDE_VK=402;
	public static final int INCLUDING_VK=403;
	public static final int INCREMENT_VK=404;
	public static final int INDENT_VK=405;
	public static final int INDEXED_BY=406;
	public static final int INDEXED_FOR=407;
	public static final int INDEX_NAME=408;
	public static final int INDICES_BOUND=409;
	public static final int INLINE_VK=410;
	public static final int INNER_VK=411;
	public static final int INOUT_VK=412;
	public static final int INSTANTIABLE_VK=413;
	public static final int INSTEAD_VK=414;
	public static final int INTEGER_VK=415;
	public static final int INTERVAL_DATATYPE=416;
	public static final int INT_VK=418;
	public static final int INVALIDATE_VK=419;
	public static final int ISOLATION_VK=420;
	public static final int IS_A_SET=421;
	public static final int IS_EMPTY=422;
	public static final int IS_INFINITE=423;
	public static final int IS_NAN=424;
	public static final int IS_NOT_A_SET=425;
	public static final int IS_NOT_EMPTY=426;
	public static final int IS_NOT_INFINITE=427;
	public static final int IS_NOT_NAN=428;
	public static final int IS_NOT_NULL=429;
	public static final int IS_NOT_OF_TYPE=430;
	public static final int IS_NOT_PRESENT=431;
	public static final int IS_NULL=432;
	public static final int IS_OF_TYPE=433;
	public static final int IS_PRESENT=434;
	public static final int ITERATE_VK=435;
	public static final int JAVA_VK=436;
	public static final int JOIN_DEF=437;
	public static final int KEEP_VK=438;
	public static final int LABEL_DECLARE=439;
	public static final int LABEL_NAME=440;
	public static final int LANGUAGE_VK=441;
	public static final int LAST_VALUE_VK=442;
	public static final int LAST_VK=443;
	public static final int LEADING_VK=444;
	public static final int LEFT_VK=447;
	public static final int LIBRARY_VK=450;
	public static final int LIKE2_VK=451;
	public static final int LIKE4_VK=452;
	public static final int LIKEC_VK=453;
	public static final int LIMIT_VK=454;
	public static final int LINK_NAME=455;
	public static final int LOCAL_VK=456;
	public static final int LOCK_TABLE_ELEMENT=457;
	public static final int LOGIC_EXPR=458;
	public static final int LOGOFF_VK=459;
	public static final int LOGON_VK=460;
	public static final int LOG_VK=461;
	public static final int LONG_VK=462;
	public static final int LOOP_VK=463;
	public static final int MAIN_MODEL=464;
	public static final int MAIN_MODEL_NAME=465;
	public static final int MAP_VK=466;
	public static final int MAXVALUE_VK=467;
	public static final int MEASURES_VK=468;
	public static final int MEMBER_VK=469;
	public static final int MERGE_INSERT=470;
	public static final int MERGE_UPDATE=471;
	public static final int MERGE_VK=472;
	public static final int MINUTE_VK=474;
	public static final int MINVALUE_VK=475;
	public static final int MLSLABEL_VK=476;
	public static final int MODEL_COLUMN=477;
	public static final int MODEL_COLUMNS=478;
	public static final int MODEL_EXPRESSION=479;
	public static final int MODEL_RULE=480;
	public static final int MODEL_RULES=481;
	public static final int MODIFIER=482;
	public static final int MODIFY_VK=483;
	public static final int MOD_VK=484;
	public static final int MONTH_VK=485;
	public static final int MULTI_TABLE_MODE=486;
	public static final int NAME_VK=487;
	public static final int NATIVE_DATATYPE=489;
	public static final int NATURALN_VK=490;
	public static final int NATURAL_VK=491;
	public static final int NAV_VK=492;
	public static final int NCHAR_CS_VK=493;
	public static final int NCHAR_VK=494;
	public static final int NCLOB_VK=495;
	public static final int NESTED_TABLE_TYPE_DEF=496;
	public static final int NESTED_VK=497;
	public static final int NEW_VK=498;
	public static final int NOAUDIT_VK=499;
	public static final int NOCACHE_VK=500;
	public static final int NOCOPY_VK=501;
	public static final int NOCYCLE_VK=502;
	public static final int NOENTITYESCAPING_VK=503;
	public static final int NOMAXVALUE_VK=504;
	public static final int NOMINVALUE_VK=505;
	public static final int NON_DML=506;
	public static final int NOORDER_VK=507;
	public static final int NOSCHEMACHECK_VK=508;
	public static final int NOT_BETWEEN=509;
	public static final int NOT_IN=511;
	public static final int NOT_LIKE=512;
	public static final int NO_VK=513;
	public static final int NULLS_VK=514;
	public static final int NUMBER_VK=515;
	public static final int NUMERIC_VK=516;
	public static final int NVARCHAR2_VK=517;
	public static final int OBJECT_AS=518;
	public static final int OBJECT_MEMBERS=519;
	public static final int OBJECT_TYPE_DEF=520;
	public static final int OBJECT_VK=521;
	public static final int OFF_VK=522;
	public static final int OLD_VK=523;
	public static final int ONLY_VK=524;
	public static final int OPEN_VK=525;
	public static final int ORADATA_VK=526;
	public static final int ORDER_BY_ELEMENT=527;
	public static final int ORDER_BY_ELEMENTS=528;
	public static final int ORDINALITY_VK=529;
	public static final int OUTER_JOIN_SIGN=530;
	public static final int OUT_VK=531;
	public static final int OVERRIDING_VK=532;
	public static final int OVER_VK=533;
	public static final int PACKAGE_NAME=534;
	public static final int PACKAGE_VK=535;
	public static final int PARALLEL_ENABLE_VK=536;
	public static final int PARAMETER=537;
	public static final int PARAMETERS=538;
	public static final int PARAMETERS_VK=539;
	public static final int PARAMETER_NAME=540;
	public static final int PARENT_VK=541;
	public static final int PARTITION_VK=542;
	public static final int PASSING_VK=543;
	public static final int PERCENT_FOUND_VK=545;
	public static final int PERCENT_ISOPEN_VK=546;
	public static final int PERCENT_NOTFOUND_VK=547;
	public static final int PERCENT_ROWCOUNT_VK=548;
	public static final int PERCENT_ROWTYPE_VK=549;
	public static final int PERCENT_TYPE_VK=550;
	public static final int PIPELINED_VK=552;
	public static final int PIPE_ROW=553;
	public static final int PIPE_VK=554;
	public static final int PIVOT_ALIAS=555;
	public static final int PIVOT_ELEMENT=556;
	public static final int PIVOT_IN_ELEMENT=557;
	public static final int PIVOT_VK=558;
	public static final int PLS_INTEGER_VK=573;
	public static final int POSITIVEN_VK=575;
	public static final int POSITIVE_VK=576;
	public static final int PRAGMA_DECLARE=577;
	public static final int PRAGMA_VK=578;
	public static final int PRECEDING_VK=579;
	public static final int PRECISION=580;
	public static final int PRECISION_VK=581;
	public static final int PREDICTION_FUNCTION=582;
	public static final int PROCEDURE_NAME=583;
	public static final int PROCEDURE_SPEC=584;
	public static final int QUERY_NAME=586;
	public static final int RAISE_VK=587;
	public static final int RANGE_VK=588;
	public static final int RAW_VK=589;
	public static final int READ_VK=590;
	public static final int REAL_VK=591;
	public static final int RECORD_NAME=592;
	public static final int RECORD_TYPE_DECLARE=593;
	public static final int RECORD_VAR_DECLARE=594;
	public static final int REFERENCE_MODEL_NAME=595;
	public static final int REFERENCE_VK=596;
	public static final int REFERENCING_VK=597;
	public static final int REF_VK=598;
	public static final int REJECT_VK=600;
	public static final int RELIES_ON_VK=601;
	public static final int RENAME_VK=602;
	public static final int REPLACE_VK=603;
	public static final int RESPECT_VK=604;
	public static final int RESTRICT_REFERENCES_VK=605;
	public static final int RESULT_CACHE_VK=606;
	public static final int RETURN_VK=607;
	public static final int REUSE_VK=608;
	public static final int REVERSE_VK=609;
	public static final int RIGHT_VK=612;
	public static final int ROLLBACK_SEGMENT_NAME=613;
	public static final int ROLLBACK_VK=614;
	public static final int ROLLUP_VK=615;
	public static final int ROUTINE_CALL=616;
	public static final int ROUTINE_NAME=617;
	public static final int ROWID_VK=618;
	public static final int ROWS_VK=619;
	public static final int ROW_VK=620;
	public static final int RULES_VK=621;
	public static final int SAMPLE_VK=622;
	public static final int SAVEPOINT_NAME=623;
	public static final int SAVEPOINT_VK=624;
	public static final int SCHEMACHECK_VK=625;
	public static final int SCHEMA_NAME=626;
	public static final int SCHEMA_VK=627;
	public static final int SCN_VK=628;
	public static final int SEARCHED_CASE=629;
	public static final int SEARCH_VK=630;
	public static final int SECOND_VK=631;
	public static final int SEED_VK=632;
	public static final int SELECTED_TABLEVIEW=633;
	public static final int SELECT_BASED_FOR=634;
	public static final int SELECT_ITEM=635;
	public static final int SELECT_LIST=636;
	public static final int SELECT_MODE=637;
	public static final int SELECT_STATEMENT=638;
	public static final int SELF_VK=639;
	public static final int SEQUENCE_NAME=641;
	public static final int SEQUENCE_VK=642;
	public static final int SEQUENTIAL_VK=643;
	public static final int SERIALIZABLE_VK=644;
	public static final int SERIALLY_REUSABLE_VK=645;
	public static final int SERVERERROR_VK=646;
	public static final int SESSIONTIMEZONE_VK=647;
	public static final int SET_CONSTRAINT=648;
	public static final int SET_SERVEROUTPUT=649;
	public static final int SET_TRANSACTION=650;
	public static final int SET_VK=651;
	public static final int SHOW_VK=652;
	public static final int SHUTDOWN_VK=653;
	public static final int SIBLINGS_VK=654;
	public static final int SIGNTYPE_VK=655;
	public static final int SIMPLE_BOUND=656;
	public static final int SIMPLE_CASE=657;
	public static final int SIMPLE_DML=658;
	public static final int SIMPLE_INTEGER_VK=659;
	public static final int SINGLE_TABLE_MODE=660;
	public static final int SINGLE_VK=661;
	public static final int SKIP_VK=662;
	public static final int SMALLINT_VK=663;
	public static final int SOME_VK=665;
	public static final int SPECIFICATION_VK=666;
	public static final int SQLDATA_VK=731;
	public static final int SQL_SCRIPT=732;
	public static final int STANDALONE_VK=733;
	public static final int STANDARD_FUNCTION=734;
	public static final int STARTUP_VK=735;
	public static final int STATEMENTS=736;
	public static final int STATIC_RETURNING=737;
	public static final int STATIC_VK=738;
	public static final int STATISTICS_VK=739;
	public static final int STREAMING_CLAUSE=740;
	public static final int STRING_VK=741;
	public static final int SUBMULTISET_VK=742;
	public static final int SUBPARTITION_VK=743;
	public static final int SUBQUERY=744;
	public static final int SUBTYPE_DECLARE=745;
	public static final int SUSPEND_VK=746;
	public static final int TABLEVIEW_NAME=747;
	public static final int TABLE_ELEMENT=748;
	public static final int TABLE_EXPRESSION=749;
	public static final int TABLE_REF=750;
	public static final int TABLE_REF_ELEMENT=751;
	public static final int TABLE_TYPE_DECLARE=752;
	public static final int TABLE_VAR_DECLARE=753;
	public static final int TABLE_VAR_NAME=754;
	public static final int THREE_DOTS=755;
	public static final int TIMESTAMP_LTZ_UNCONSTRAINED_VK=756;
	public static final int TIMESTAMP_TZ_UNCONSTRAINED_VK=757;
	public static final int TIMESTAMP_UNCONSTRAINED_VK=758;
	public static final int TIMESTAMP_VK=759;
	public static final int TIMEZONE_ABBR_VK=760;
	public static final int TIMEZONE_HOUR_VK=761;
	public static final int TIMEZONE_MINUTE_VK=762;
	public static final int TIMEZONE_REGION_VK=763;
	public static final int TIME_VK=764;
	public static final int TRAILING_VK=765;
	public static final int TRANSLATE_VK=766;
	public static final int TREAT_VK=767;
	public static final int TRIGGER_NAME=768;
	public static final int TRIM_VK=769;
	public static final int TRUNCATE_VK=770;
	public static final int TYPE_BODY_ELEMENTS=771;
	public static final int TYPE_NAME=772;
	public static final int TYPE_VK=773;
	public static final int UNARY_OPERATOR=774;
	public static final int UNBOUNDED_VK=775;
	public static final int UNDER_VK=776;
	public static final int UNLIMITED_VK=777;
	public static final int UNPIVOT_IN_ELEMENT=778;
	public static final int UNPIVOT_VK=779;
	public static final int UNTIL_VK=781;
	public static final int UPDATED_VK=782;
	public static final int UPSERT_VK=783;
	public static final int UROWID_VK=784;
	public static final int USING_MODE=785;
	public static final int VALIDATE_VK=786;
	public static final int VALUES_BOUND=787;
	public static final int VALUE_VK=788;
	public static final int VARCHAR2_VK=789;
	public static final int VARCHAR_VK=790;
	public static final int VARIABLE_DECLARE=791;
	public static final int VARIABLE_NAME=792;
	public static final int VARR_ARRAY_DEF=793;
	public static final int VECTOR_EXPR=794;
	public static final int VERSIONS_VK=795;
	public static final int VERSION_VK=796;
	public static final int WAIT_VK=798;
	public static final int WELLFORMED_VK=799;
	public static final int WHILE_LOOP=800;
	public static final int WITHIN_VK=801;
	public static final int WORK_VK=802;
	public static final int WRITE_VK=803;
	public static final int XMLAGG_VK=804;
	public static final int XMLATTRIBUTES_VK=805;
	public static final int XMLCAST_VK=806;
	public static final int XMLCOLATTVAL_VK=807;
	public static final int XMLELEMENT_VK=808;
	public static final int XMLEXISTS_VK=809;
	public static final int XMLFOREST_VK=810;
	public static final int XMLNAMESPACES_VK=811;
	public static final int XMLPARSE_VK=812;
	public static final int XMLPI_VK=813;
	public static final int XMLQUERY_VK=814;
	public static final int XMLROOT_VK=815;
	public static final int XMLSERIALIZE_VK=816;
	public static final int XMLTABLE_VK=817;
	public static final int XML_ALIAS=818;
	public static final int XML_COLUMN=819;
	public static final int XML_COLUMN_NAME=820;
	public static final int XML_ELEMENT=821;
	public static final int XML_VK=822;
	public static final int YEAR_VK=823;
	public static final int YES_VK=824;
	public static final int YMINTERVAL_UNCONSTRAINED_VK=825;
	public static final int DATE_VK=826;
	public static final int ORDER_VK=827;
	public static final int START_VK=828;

	// delegates
	public TreeParser[] getDelegates() {
		return new TreeParser[] {};
	}

	// delegators


	public PLSQLPrinter(TreeNodeStream input) {
		this(input, new RecognizerSharedState());
	}
	public PLSQLPrinter(TreeNodeStream input, RecognizerSharedState state) {
		super(input, state);
	}

	protected StringTemplateGroup templateLib =
	  new StringTemplateGroup("PLSQLPrinterTemplates", AngleBracketTemplateLexer.class);

	public void setTemplateLib(StringTemplateGroup templateLib) {
	  this.templateLib = templateLib;
	}
	public StringTemplateGroup getTemplateLib() {
	  return templateLib;
	}
	/** allows convenient multi-value initialization:
	 *  "new STAttrMap().put(...).put(...)"
	 */
	@SuppressWarnings("serial")
	public static class STAttrMap extends HashMap<String, Object> {
		public STAttrMap put(String attrName, Object value) {
			super.put(attrName, value);
			return this;
		}
	}
	@Override public String[] getTokenNames() { return PLSQLPrinter.tokenNames; }
	@Override public String getGrammarFileName() { return "PLSQLPrinter.g"; }



	  static String[] correctTokenNames = getCorrectTokenNames();

	  static String[] getCorrectTokenNames() {
	    // This is workaround for bug in antlr3 (at least in 3.5.2)
	    java.lang.reflect.Field[] fields = PLSQLPrinter.class.getDeclaredFields();
	    java.util.Map<Integer, String> tokenNamesMap = new java.util.HashMap<Integer, String>();
	    int maxTokenValue = 0;
	    for (java.lang.reflect.Field field: fields) {
	      int mod = field.getModifiers();
	      if (java.lang.reflect.Modifier.isStatic(mod) && java.lang.reflect.Modifier.isFinal(mod) && field.getType() == int.class) {
	        String name = field.getName();
	        int value;
	        try {
	          value = field.getInt(null);
	        } catch (Exception e) {
	          throw new RuntimeException(e);
	        }
	        tokenNamesMap.put(value, name);
	        maxTokenValue = Math.max(maxTokenValue, value);
	      }
	    }
	    String[] result = new String[maxTokenValue + 1];
	    for (int i = 0; i < maxTokenValue; ++i) {
	      if (tokenNamesMap.containsKey(i)) {
	        result[i] = tokenNamesMap.get(i);
	      } else {
	        result[i] = "<none>";
	      }
	    }
	    return result;
	  }
	  
	  
	  public void reportError(RecognitionException e) {
	    // if we've already reported an error and have not matched a token
	    // yet successfully, don't report any errors.
	    if ( state.errorRecovery ) {
	      //System.err.print("[SPURIOUS] ");
	      return;
	    }
	    state.syntaxErrors++; // don't count spurious
	    state.errorRecovery = true;

	    displayRecognitionError(correctTokenNames, e);
	  }



	public static class compilation_unit_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "compilation_unit"
	// PLSQLPrinter.g:74:1: compilation_unit : ^( COMPILATION_UNIT (u+= unit_statement )* ) -> template(statements=$u) <<\n--Compilation unit\n<statements:{v|<v>}; separator=\"\\n\\n\">\n>>;
	public final PLSQLPrinter.compilation_unit_return compilation_unit() throws RecognitionException {
		PLSQLPrinter.compilation_unit_return retval = new PLSQLPrinter.compilation_unit_return();
		retval.start = input.LT(1);

		List<Object> list_u=null;
		RuleReturnScope u = null;
		try {
			// PLSQLPrinter.g:75:5: ( ^( COMPILATION_UNIT (u+= unit_statement )* ) -> template(statements=$u) <<\n--Compilation unit\n<statements:{v|<v>}; separator=\"\\n\\n\">\n>>)
			// PLSQLPrinter.g:75:10: ^( COMPILATION_UNIT (u+= unit_statement )* )
			{
			match(input,COMPILATION_UNIT,FOLLOW_COMPILATION_UNIT_in_compilation_unit69); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:75:30: (u+= unit_statement )*
				loop1:
				while (true) {
					int alt1=2;
					int LA1_0 = input.LA(1);
					if ( (LA1_0==ALTER_FUNCTION||(LA1_0 >= ALTER_PACKAGE && LA1_0 <= ALTER_TYPE)||(LA1_0 >= CREATE_FUNCTION && LA1_0 <= CREATE_TYPE_SPEC)||(LA1_0 >= DROP_FUNCTION && LA1_0 <= DROP_TYPE)) ) {
						alt1=1;
					}

					switch (alt1) {
					case 1 :
						// PLSQLPrinter.g:75:30: u+= unit_statement
						{
						pushFollow(FOLLOW_unit_statement_in_compilation_unit73);
						u=unit_statement();
						state._fsp--;

						if (list_u==null) list_u=new ArrayList<Object>();
						list_u.add(u.getTemplate());
						}
						break;

					default :
						break loop1;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 76:5: -> template(statements=$u) <<\n--Compilation unit\n<statements:{v|<v>}; separator=\"\\n\\n\">\n>>
			{
				retval.st = new StringTemplate(templateLib, "\n--Compilation unit\n<statements:{v|<v>}; separator=\"\\n\\n\">\n",new STAttrMap().put("statements", list_u));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compilation_unit"


	public static class sql_script_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sql_script"
	// PLSQLPrinter.g:83:1: sql_script : ^( SQL_SCRIPT (u+= unit_statement )* ) -> template(statements=$u) <<\n--SQL script\n<statements:{v|--script\n<v>}; separator=\"\\n\\n\">\n>>;
	public final PLSQLPrinter.sql_script_return sql_script() throws RecognitionException {
		PLSQLPrinter.sql_script_return retval = new PLSQLPrinter.sql_script_return();
		retval.start = input.LT(1);

		List<Object> list_u=null;
		RuleReturnScope u = null;
		try {
			// PLSQLPrinter.g:84:5: ( ^( SQL_SCRIPT (u+= unit_statement )* ) -> template(statements=$u) <<\n--SQL script\n<statements:{v|--script\n<v>}; separator=\"\\n\\n\">\n>>)
			// PLSQLPrinter.g:84:10: ^( SQL_SCRIPT (u+= unit_statement )* )
			{
			match(input,SQL_SCRIPT,FOLLOW_SQL_SCRIPT_in_sql_script112); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:84:24: (u+= unit_statement )*
				loop2:
				while (true) {
					int alt2=2;
					int LA2_0 = input.LA(1);
					if ( (LA2_0==ALTER_FUNCTION||(LA2_0 >= ALTER_PACKAGE && LA2_0 <= ALTER_TYPE)||(LA2_0 >= CREATE_FUNCTION && LA2_0 <= CREATE_TYPE_SPEC)||(LA2_0 >= DROP_FUNCTION && LA2_0 <= DROP_TYPE)) ) {
						alt2=1;
					}

					switch (alt2) {
					case 1 :
						// PLSQLPrinter.g:84:24: u+= unit_statement
						{
						pushFollow(FOLLOW_unit_statement_in_sql_script116);
						u=unit_statement();
						state._fsp--;

						if (list_u==null) list_u=new ArrayList<Object>();
						list_u.add(u.getTemplate());
						}
						break;

					default :
						break loop2;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 85:5: -> template(statements=$u) <<\n--SQL script\n<statements:{v|--script\n<v>}; separator=\"\\n\\n\">\n>>
			{
				retval.st = new StringTemplate(templateLib, "\n--SQL script\n<statements:{v|--script\n<v>}; separator=\"\\n\\n\">\n",new STAttrMap().put("statements", list_u));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sql_script"


	public static class serveroutput_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "serveroutput_declaration"
	// PLSQLPrinter.g:93:1: serveroutput_declaration : ^( SET_SERVEROUTPUT ( SQL92_RESERVED_ON | OFF_VK ) ) ;
	public final PLSQLPrinter.serveroutput_declaration_return serveroutput_declaration() throws RecognitionException {
		PLSQLPrinter.serveroutput_declaration_return retval = new PLSQLPrinter.serveroutput_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:94:5: ( ^( SET_SERVEROUTPUT ( SQL92_RESERVED_ON | OFF_VK ) ) )
			// PLSQLPrinter.g:94:10: ^( SET_SERVEROUTPUT ( SQL92_RESERVED_ON | OFF_VK ) )
			{
			match(input,SET_SERVEROUTPUT,FOLLOW_SET_SERVEROUTPUT_in_serveroutput_declaration155); 
			match(input, Token.DOWN, null); 
			if ( input.LA(1)==SQL92_RESERVED_ON||input.LA(1)==OFF_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "serveroutput_declaration"


	public static class unit_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unit_statement"
	// PLSQLPrinter.g:97:1: unit_statement : ( alter_function | alter_package | alter_procedure | alter_sequence | alter_trigger | alter_type | create_function_body | create_procedure_body | create_package | create_sequence | create_trigger | create_type | drop_function | drop_package | drop_procedure | drop_sequence | drop_trigger | drop_type );
	public final PLSQLPrinter.unit_statement_return unit_statement() throws RecognitionException {
		PLSQLPrinter.unit_statement_return retval = new PLSQLPrinter.unit_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope create_function_body1 =null;

		try {
			// PLSQLPrinter.g:98:5: ( alter_function | alter_package | alter_procedure | alter_sequence | alter_trigger | alter_type | create_function_body | create_procedure_body | create_package | create_sequence | create_trigger | create_type | drop_function | drop_package | drop_procedure | drop_sequence | drop_trigger | drop_type )
			int alt3=18;
			switch ( input.LA(1) ) {
			case ALTER_FUNCTION:
				{
				alt3=1;
				}
				break;
			case ALTER_PACKAGE:
				{
				alt3=2;
				}
				break;
			case ALTER_PROCEDURE:
				{
				alt3=3;
				}
				break;
			case ALTER_SEQUENCE:
				{
				alt3=4;
				}
				break;
			case ALTER_TRIGGER:
				{
				alt3=5;
				}
				break;
			case ALTER_TYPE:
				{
				alt3=6;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt3=7;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt3=8;
				}
				break;
			case CREATE_PACKAGE_BODY:
			case CREATE_PACKAGE_SPEC:
				{
				alt3=9;
				}
				break;
			case CREATE_SEQUENCE:
				{
				alt3=10;
				}
				break;
			case CREATE_TRIGGER:
				{
				alt3=11;
				}
				break;
			case CREATE_TYPE_BODY:
			case CREATE_TYPE_SPEC:
				{
				alt3=12;
				}
				break;
			case DROP_FUNCTION:
				{
				alt3=13;
				}
				break;
			case DROP_PACKAGE:
				{
				alt3=14;
				}
				break;
			case DROP_PROCEDURE:
				{
				alt3=15;
				}
				break;
			case DROP_SEQUENCE:
				{
				alt3=16;
				}
				break;
			case DROP_TRIGGER:
				{
				alt3=17;
				}
				break;
			case DROP_TYPE:
				{
				alt3=18;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 3, 0, input);
				throw nvae;
			}
			switch (alt3) {
				case 1 :
					// PLSQLPrinter.g:98:10: alter_function
					{
					pushFollow(FOLLOW_alter_function_in_unit_statement182);
					alter_function();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:99:10: alter_package
					{
					pushFollow(FOLLOW_alter_package_in_unit_statement193);
					alter_package();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:100:10: alter_procedure
					{
					pushFollow(FOLLOW_alter_procedure_in_unit_statement204);
					alter_procedure();
					state._fsp--;

					}
					break;
				case 4 :
					// PLSQLPrinter.g:101:10: alter_sequence
					{
					pushFollow(FOLLOW_alter_sequence_in_unit_statement215);
					alter_sequence();
					state._fsp--;

					}
					break;
				case 5 :
					// PLSQLPrinter.g:102:10: alter_trigger
					{
					pushFollow(FOLLOW_alter_trigger_in_unit_statement226);
					alter_trigger();
					state._fsp--;

					}
					break;
				case 6 :
					// PLSQLPrinter.g:103:10: alter_type
					{
					pushFollow(FOLLOW_alter_type_in_unit_statement237);
					alter_type();
					state._fsp--;

					}
					break;
				case 7 :
					// PLSQLPrinter.g:104:10: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_unit_statement248);
					create_function_body1=create_function_body();
					state._fsp--;

					 retval.st = (create_function_body1!=null?((StringTemplate)create_function_body1.getTemplate()):null); 
					}
					break;
				case 8 :
					// PLSQLPrinter.g:105:10: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_unit_statement261);
					create_procedure_body();
					state._fsp--;

					}
					break;
				case 9 :
					// PLSQLPrinter.g:106:10: create_package
					{
					pushFollow(FOLLOW_create_package_in_unit_statement272);
					create_package();
					state._fsp--;

					}
					break;
				case 10 :
					// PLSQLPrinter.g:107:10: create_sequence
					{
					pushFollow(FOLLOW_create_sequence_in_unit_statement283);
					create_sequence();
					state._fsp--;

					}
					break;
				case 11 :
					// PLSQLPrinter.g:108:10: create_trigger
					{
					pushFollow(FOLLOW_create_trigger_in_unit_statement294);
					create_trigger();
					state._fsp--;

					}
					break;
				case 12 :
					// PLSQLPrinter.g:109:10: create_type
					{
					pushFollow(FOLLOW_create_type_in_unit_statement305);
					create_type();
					state._fsp--;

					}
					break;
				case 13 :
					// PLSQLPrinter.g:110:10: drop_function
					{
					pushFollow(FOLLOW_drop_function_in_unit_statement316);
					drop_function();
					state._fsp--;

					}
					break;
				case 14 :
					// PLSQLPrinter.g:111:10: drop_package
					{
					pushFollow(FOLLOW_drop_package_in_unit_statement327);
					drop_package();
					state._fsp--;

					}
					break;
				case 15 :
					// PLSQLPrinter.g:112:10: drop_procedure
					{
					pushFollow(FOLLOW_drop_procedure_in_unit_statement338);
					drop_procedure();
					state._fsp--;

					}
					break;
				case 16 :
					// PLSQLPrinter.g:113:10: drop_sequence
					{
					pushFollow(FOLLOW_drop_sequence_in_unit_statement349);
					drop_sequence();
					state._fsp--;

					}
					break;
				case 17 :
					// PLSQLPrinter.g:114:10: drop_trigger
					{
					pushFollow(FOLLOW_drop_trigger_in_unit_statement360);
					drop_trigger();
					state._fsp--;

					}
					break;
				case 18 :
					// PLSQLPrinter.g:115:10: drop_type
					{
					pushFollow(FOLLOW_drop_type_in_unit_statement371);
					drop_type();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unit_statement"


	public static class drop_function_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_function"
	// PLSQLPrinter.g:122:1: drop_function : ^( DROP_FUNCTION function_name ) ;
	public final PLSQLPrinter.drop_function_return drop_function() throws RecognitionException {
		PLSQLPrinter.drop_function_return retval = new PLSQLPrinter.drop_function_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:123:5: ( ^( DROP_FUNCTION function_name ) )
			// PLSQLPrinter.g:123:10: ^( DROP_FUNCTION function_name )
			{
			match(input,DROP_FUNCTION,FOLLOW_DROP_FUNCTION_in_drop_function396); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_name_in_drop_function398);
			function_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_function"


	public static class alter_function_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_function"
	// PLSQLPrinter.g:126:1: alter_function : ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ;
	public final PLSQLPrinter.alter_function_return alter_function() throws RecognitionException {
		PLSQLPrinter.alter_function_return retval = new PLSQLPrinter.alter_function_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:127:5: ( ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
			// PLSQLPrinter.g:127:10: ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
			{
			match(input,ALTER_FUNCTION,FOLLOW_ALTER_FUNCTION_in_alter_function420); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_name_in_alter_function422);
			function_name();
			state._fsp--;

			// PLSQLPrinter.g:127:41: ( DEBUG_VK )?
			int alt4=2;
			int LA4_0 = input.LA(1);
			if ( (LA4_0==DEBUG_VK) ) {
				alt4=1;
			}
			switch (alt4) {
				case 1 :
					// PLSQLPrinter.g:127:41: DEBUG_VK
					{
					match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_function424); 
					}
					break;

			}

			// PLSQLPrinter.g:127:51: ( REUSE_VK )?
			int alt5=2;
			int LA5_0 = input.LA(1);
			if ( (LA5_0==REUSE_VK) ) {
				alt5=1;
			}
			switch (alt5) {
				case 1 :
					// PLSQLPrinter.g:127:51: REUSE_VK
					{
					match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_function427); 
					}
					break;

			}

			// PLSQLPrinter.g:127:61: ( compiler_parameters_clause )*
			loop6:
			while (true) {
				int alt6=2;
				int LA6_0 = input.LA(1);
				if ( (LA6_0==COMPILER_PARAMETER) ) {
					alt6=1;
				}

				switch (alt6) {
				case 1 :
					// PLSQLPrinter.g:127:61: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_function430);
					compiler_parameters_clause();
					state._fsp--;

					}
					break;

				default :
					break loop6;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_function"


	public static class create_function_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_function_body"
	// PLSQLPrinter.g:130:1: create_function_body : ^( CREATE_FUNCTION ( REPLACE_VK )? ^( FUNCTION_NAME (name+= ID )+ ) type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( DETERMINISTIC_VK )* ( ^( USING_MODE ( PIPELINED_VK )? ( AGGREGATE_VK )? implementation_type_name ) | ^( CALL_MODE ( PIPELINED_VK )? call_spec ) | ^( BODY_MODE ( PIPELINED_VK )? ( declare_spec )* body ) ) ) -> template(isreplace=$REPLACE_VK != nullreplace=$REPLACE_VKname=$name) <<\ncreate<if(isreplace)>replace:<replace> or replace<endif> function <name; separator=\".\">\n>>;
	public final PLSQLPrinter.create_function_body_return create_function_body() throws RecognitionException {
		PLSQLPrinter.create_function_body_return retval = new PLSQLPrinter.create_function_body_return();
		retval.start = input.LT(1);

		CommonTree REPLACE_VK2=null;
		CommonTree name=null;
		List<Object> list_name=null;

		try {
			// PLSQLPrinter.g:131:5: ( ^( CREATE_FUNCTION ( REPLACE_VK )? ^( FUNCTION_NAME (name+= ID )+ ) type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( DETERMINISTIC_VK )* ( ^( USING_MODE ( PIPELINED_VK )? ( AGGREGATE_VK )? implementation_type_name ) | ^( CALL_MODE ( PIPELINED_VK )? call_spec ) | ^( BODY_MODE ( PIPELINED_VK )? ( declare_spec )* body ) ) ) -> template(isreplace=$REPLACE_VK != nullreplace=$REPLACE_VKname=$name) <<\ncreate<if(isreplace)>replace:<replace> or replace<endif> function <name; separator=\".\">\n>>)
			// PLSQLPrinter.g:131:10: ^( CREATE_FUNCTION ( REPLACE_VK )? ^( FUNCTION_NAME (name+= ID )+ ) type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( DETERMINISTIC_VK )* ( ^( USING_MODE ( PIPELINED_VK )? ( AGGREGATE_VK )? implementation_type_name ) | ^( CALL_MODE ( PIPELINED_VK )? call_spec ) | ^( BODY_MODE ( PIPELINED_VK )? ( declare_spec )* body ) ) )
			{
			match(input,CREATE_FUNCTION,FOLLOW_CREATE_FUNCTION_in_create_function_body453); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:131:28: ( REPLACE_VK )?
			int alt7=2;
			int LA7_0 = input.LA(1);
			if ( (LA7_0==REPLACE_VK) ) {
				alt7=1;
			}
			switch (alt7) {
				case 1 :
					// PLSQLPrinter.g:131:28: REPLACE_VK
					{
					REPLACE_VK2=(CommonTree)match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_function_body455); 
					}
					break;

			}

			match(input,FUNCTION_NAME,FOLLOW_FUNCTION_NAME_in_create_function_body459); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:131:56: (name+= ID )+
			int cnt8=0;
			loop8:
			while (true) {
				int alt8=2;
				int LA8_0 = input.LA(1);
				if ( (LA8_0==ID) ) {
					alt8=1;
				}

				switch (alt8) {
				case 1 :
					// PLSQLPrinter.g:131:57: name+= ID
					{
					name=(CommonTree)match(input,ID,FOLLOW_ID_in_create_function_body464); 
					if (list_name==null) list_name=new ArrayList<Object>();
					list_name.add(name);
					}
					break;

				default :
					if ( cnt8 >= 1 ) break loop8;
					EarlyExitException eee = new EarlyExitException(8, input);
					throw eee;
				}
				cnt8++;
			}

			match(input, Token.UP, null); 

			pushFollow(FOLLOW_type_spec_in_create_function_body469);
			type_spec();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_create_function_body472); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:131:92: ( parameter )*
				loop9:
				while (true) {
					int alt9=2;
					int LA9_0 = input.LA(1);
					if ( (LA9_0==PARAMETER) ) {
						alt9=1;
					}

					switch (alt9) {
					case 1 :
						// PLSQLPrinter.g:131:92: parameter
						{
						pushFollow(FOLLOW_parameter_in_create_function_body474);
						parameter();
						state._fsp--;

						}
						break;

					default :
						break loop9;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:132:13: ( invoker_rights_clause )*
			loop10:
			while (true) {
				int alt10=2;
				int LA10_0 = input.LA(1);
				if ( (LA10_0==AUTHID_VK) ) {
					alt10=1;
				}

				switch (alt10) {
				case 1 :
					// PLSQLPrinter.g:132:13: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_create_function_body490);
					invoker_rights_clause();
					state._fsp--;

					}
					break;

				default :
					break loop10;
				}
			}

			// PLSQLPrinter.g:132:36: ( parallel_enable_clause )*
			loop11:
			while (true) {
				int alt11=2;
				int LA11_0 = input.LA(1);
				if ( (LA11_0==PARALLEL_ENABLE_VK) ) {
					alt11=1;
				}

				switch (alt11) {
				case 1 :
					// PLSQLPrinter.g:132:36: parallel_enable_clause
					{
					pushFollow(FOLLOW_parallel_enable_clause_in_create_function_body493);
					parallel_enable_clause();
					state._fsp--;

					}
					break;

				default :
					break loop11;
				}
			}

			// PLSQLPrinter.g:132:60: ( result_cache_clause )*
			loop12:
			while (true) {
				int alt12=2;
				int LA12_0 = input.LA(1);
				if ( (LA12_0==RESULT_CACHE_VK) ) {
					alt12=1;
				}

				switch (alt12) {
				case 1 :
					// PLSQLPrinter.g:132:60: result_cache_clause
					{
					pushFollow(FOLLOW_result_cache_clause_in_create_function_body496);
					result_cache_clause();
					state._fsp--;

					}
					break;

				default :
					break loop12;
				}
			}

			// PLSQLPrinter.g:132:81: ( DETERMINISTIC_VK )*
			loop13:
			while (true) {
				int alt13=2;
				int LA13_0 = input.LA(1);
				if ( (LA13_0==DETERMINISTIC_VK) ) {
					alt13=1;
				}

				switch (alt13) {
				case 1 :
					// PLSQLPrinter.g:132:81: DETERMINISTIC_VK
					{
					match(input,DETERMINISTIC_VK,FOLLOW_DETERMINISTIC_VK_in_create_function_body499); 
					}
					break;

				default :
					break loop13;
				}
			}

			// PLSQLPrinter.g:133:13: ( ^( USING_MODE ( PIPELINED_VK )? ( AGGREGATE_VK )? implementation_type_name ) | ^( CALL_MODE ( PIPELINED_VK )? call_spec ) | ^( BODY_MODE ( PIPELINED_VK )? ( declare_spec )* body ) )
			int alt19=3;
			switch ( input.LA(1) ) {
			case USING_MODE:
				{
				alt19=1;
				}
				break;
			case CALL_MODE:
				{
				alt19=2;
				}
				break;
			case BODY_MODE:
				{
				alt19=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 19, 0, input);
				throw nvae;
			}
			switch (alt19) {
				case 1 :
					// PLSQLPrinter.g:133:18: ^( USING_MODE ( PIPELINED_VK )? ( AGGREGATE_VK )? implementation_type_name )
					{
					match(input,USING_MODE,FOLLOW_USING_MODE_in_create_function_body520); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:133:31: ( PIPELINED_VK )?
					int alt14=2;
					int LA14_0 = input.LA(1);
					if ( (LA14_0==PIPELINED_VK) ) {
						alt14=1;
					}
					switch (alt14) {
						case 1 :
							// PLSQLPrinter.g:133:31: PIPELINED_VK
							{
							match(input,PIPELINED_VK,FOLLOW_PIPELINED_VK_in_create_function_body522); 
							}
							break;

					}

					// PLSQLPrinter.g:133:45: ( AGGREGATE_VK )?
					int alt15=2;
					int LA15_0 = input.LA(1);
					if ( (LA15_0==AGGREGATE_VK) ) {
						alt15=1;
					}
					switch (alt15) {
						case 1 :
							// PLSQLPrinter.g:133:45: AGGREGATE_VK
							{
							match(input,AGGREGATE_VK,FOLLOW_AGGREGATE_VK_in_create_function_body525); 
							}
							break;

					}

					pushFollow(FOLLOW_implementation_type_name_in_create_function_body528);
					implementation_type_name();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:134:18: ^( CALL_MODE ( PIPELINED_VK )? call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_create_function_body549); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:134:30: ( PIPELINED_VK )?
					int alt16=2;
					int LA16_0 = input.LA(1);
					if ( (LA16_0==PIPELINED_VK) ) {
						alt16=1;
					}
					switch (alt16) {
						case 1 :
							// PLSQLPrinter.g:134:30: PIPELINED_VK
							{
							match(input,PIPELINED_VK,FOLLOW_PIPELINED_VK_in_create_function_body551); 
							}
							break;

					}

					pushFollow(FOLLOW_call_spec_in_create_function_body554);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:135:18: ^( BODY_MODE ( PIPELINED_VK )? ( declare_spec )* body )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_create_function_body575); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:135:30: ( PIPELINED_VK )?
					int alt17=2;
					int LA17_0 = input.LA(1);
					if ( (LA17_0==PIPELINED_VK) ) {
						alt17=1;
					}
					switch (alt17) {
						case 1 :
							// PLSQLPrinter.g:135:30: PIPELINED_VK
							{
							match(input,PIPELINED_VK,FOLLOW_PIPELINED_VK_in_create_function_body577); 
							}
							break;

					}

					// PLSQLPrinter.g:135:44: ( declare_spec )*
					loop18:
					while (true) {
						int alt18=2;
						int LA18_0 = input.LA(1);
						if ( (LA18_0==CREATE_FUNCTION||LA18_0==CREATE_PROCEDURE||LA18_0==CURSOR_DECLARE||LA18_0==EXCEPTION_DECLARE||LA18_0==PRAGMA_DECLARE||(LA18_0 >= RECORD_TYPE_DECLARE && LA18_0 <= RECORD_VAR_DECLARE)||LA18_0==SUBTYPE_DECLARE||(LA18_0 >= TABLE_TYPE_DECLARE && LA18_0 <= TABLE_VAR_DECLARE)||LA18_0==VARIABLE_DECLARE) ) {
							alt18=1;
						}

						switch (alt18) {
						case 1 :
							// PLSQLPrinter.g:135:44: declare_spec
							{
							pushFollow(FOLLOW_declare_spec_in_create_function_body580);
							declare_spec();
							state._fsp--;

							}
							break;

						default :
							break loop18;
						}
					}

					pushFollow(FOLLOW_body_in_create_function_body583);
					body();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 138:9: -> template(isreplace=$REPLACE_VK != nullreplace=$REPLACE_VKname=$name) <<\ncreate<if(isreplace)>replace:<replace> or replace<endif> function <name; separator=\".\">\n>>
			{
				retval.st = new StringTemplate(templateLib, "\ncreate<if(isreplace)>replace:<replace> or replace<endif> function <name; separator=\".\">\n",new STAttrMap().put("isreplace", REPLACE_VK2 != null).put("replace", REPLACE_VK2).put("name", list_name));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_function_body"


	public static class parallel_enable_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parallel_enable_clause"
	// PLSQLPrinter.g:145:1: parallel_enable_clause : ^( PARALLEL_ENABLE_VK ( partition_by_clause )? ) ;
	public final PLSQLPrinter.parallel_enable_clause_return parallel_enable_clause() throws RecognitionException {
		PLSQLPrinter.parallel_enable_clause_return retval = new PLSQLPrinter.parallel_enable_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:146:5: ( ^( PARALLEL_ENABLE_VK ( partition_by_clause )? ) )
			// PLSQLPrinter.g:146:10: ^( PARALLEL_ENABLE_VK ( partition_by_clause )? )
			{
			match(input,PARALLEL_ENABLE_VK,FOLLOW_PARALLEL_ENABLE_VK_in_parallel_enable_clause655); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:146:31: ( partition_by_clause )?
				int alt20=2;
				int LA20_0 = input.LA(1);
				if ( (LA20_0==PARTITION_VK) ) {
					alt20=1;
				}
				switch (alt20) {
					case 1 :
						// PLSQLPrinter.g:146:31: partition_by_clause
						{
						pushFollow(FOLLOW_partition_by_clause_in_parallel_enable_clause657);
						partition_by_clause();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parallel_enable_clause"


	public static class partition_by_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "partition_by_clause"
	// PLSQLPrinter.g:149:1: partition_by_clause : ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? ) ;
	public final PLSQLPrinter.partition_by_clause_return partition_by_clause() throws RecognitionException {
		PLSQLPrinter.partition_by_clause_return retval = new PLSQLPrinter.partition_by_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:150:5: ( ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? ) )
			// PLSQLPrinter.g:150:10: ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_partition_by_clause680); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_partition_by_clause682);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:151:13: ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) )
			int alt23=3;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ANY:
				{
				alt23=1;
				}
				break;
			case HASH_VK:
				{
				alt23=2;
				}
				break;
			case RANGE_VK:
				{
				alt23=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 23, 0, input);
				throw nvae;
			}
			switch (alt23) {
				case 1 :
					// PLSQLPrinter.g:151:18: SQL92_RESERVED_ANY
					{
					match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_partition_by_clause702); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:152:18: ^( HASH_VK ^( COLUMNS ( column_name )+ ) )
					{
					match(input,HASH_VK,FOLLOW_HASH_VK_in_partition_by_clause722); 
					match(input, Token.DOWN, null); 
					match(input,COLUMNS,FOLLOW_COLUMNS_in_partition_by_clause725); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:152:38: ( column_name )+
					int cnt21=0;
					loop21:
					while (true) {
						int alt21=2;
						int LA21_0 = input.LA(1);
						if ( (LA21_0==COLUMN_NAME) ) {
							alt21=1;
						}

						switch (alt21) {
						case 1 :
							// PLSQLPrinter.g:152:38: column_name
							{
							pushFollow(FOLLOW_column_name_in_partition_by_clause727);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt21 >= 1 ) break loop21;
							EarlyExitException eee = new EarlyExitException(21, input);
							throw eee;
						}
						cnt21++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:153:18: ^( RANGE_VK ^( COLUMNS ( column_name )+ ) )
					{
					match(input,RANGE_VK,FOLLOW_RANGE_VK_in_partition_by_clause750); 
					match(input, Token.DOWN, null); 
					match(input,COLUMNS,FOLLOW_COLUMNS_in_partition_by_clause753); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:153:39: ( column_name )+
					int cnt22=0;
					loop22:
					while (true) {
						int alt22=2;
						int LA22_0 = input.LA(1);
						if ( (LA22_0==COLUMN_NAME) ) {
							alt22=1;
						}

						switch (alt22) {
						case 1 :
							// PLSQLPrinter.g:153:39: column_name
							{
							pushFollow(FOLLOW_column_name_in_partition_by_clause755);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt22 >= 1 ) break loop22;
							EarlyExitException eee = new EarlyExitException(22, input);
							throw eee;
						}
						cnt22++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;

			}

			// PLSQLPrinter.g:155:13: ( streaming_clause )?
			int alt24=2;
			int LA24_0 = input.LA(1);
			if ( (LA24_0==STREAMING_CLAUSE) ) {
				alt24=1;
			}
			switch (alt24) {
				case 1 :
					// PLSQLPrinter.g:155:13: streaming_clause
					{
					pushFollow(FOLLOW_streaming_clause_in_partition_by_clause787);
					streaming_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_by_clause"


	public static class result_cache_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "result_cache_clause"
	// PLSQLPrinter.g:159:1: result_cache_clause : ^( RESULT_CACHE_VK ( relies_on_part )? ) ;
	public final PLSQLPrinter.result_cache_clause_return result_cache_clause() throws RecognitionException {
		PLSQLPrinter.result_cache_clause_return retval = new PLSQLPrinter.result_cache_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:160:5: ( ^( RESULT_CACHE_VK ( relies_on_part )? ) )
			// PLSQLPrinter.g:160:10: ^( RESULT_CACHE_VK ( relies_on_part )? )
			{
			match(input,RESULT_CACHE_VK,FOLLOW_RESULT_CACHE_VK_in_result_cache_clause819); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:160:28: ( relies_on_part )?
				int alt25=2;
				int LA25_0 = input.LA(1);
				if ( (LA25_0==RELIES_ON_VK) ) {
					alt25=1;
				}
				switch (alt25) {
					case 1 :
						// PLSQLPrinter.g:160:28: relies_on_part
						{
						pushFollow(FOLLOW_relies_on_part_in_result_cache_clause821);
						relies_on_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "result_cache_clause"


	public static class relies_on_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "relies_on_part"
	// PLSQLPrinter.g:163:1: relies_on_part : ^( RELIES_ON_VK ( tableview_name )+ ) ;
	public final PLSQLPrinter.relies_on_part_return relies_on_part() throws RecognitionException {
		PLSQLPrinter.relies_on_part_return retval = new PLSQLPrinter.relies_on_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:164:5: ( ^( RELIES_ON_VK ( tableview_name )+ ) )
			// PLSQLPrinter.g:164:10: ^( RELIES_ON_VK ( tableview_name )+ )
			{
			match(input,RELIES_ON_VK,FOLLOW_RELIES_ON_VK_in_relies_on_part844); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:164:25: ( tableview_name )+
			int cnt26=0;
			loop26:
			while (true) {
				int alt26=2;
				int LA26_0 = input.LA(1);
				if ( (LA26_0==TABLEVIEW_NAME) ) {
					alt26=1;
				}

				switch (alt26) {
				case 1 :
					// PLSQLPrinter.g:164:25: tableview_name
					{
					pushFollow(FOLLOW_tableview_name_in_relies_on_part846);
					tableview_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt26 >= 1 ) break loop26;
					EarlyExitException eee = new EarlyExitException(26, input);
					throw eee;
				}
				cnt26++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "relies_on_part"


	public static class streaming_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "streaming_clause"
	// PLSQLPrinter.g:167:1: streaming_clause : ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) ) ;
	public final PLSQLPrinter.streaming_clause_return streaming_clause() throws RecognitionException {
		PLSQLPrinter.streaming_clause_return retval = new PLSQLPrinter.streaming_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:168:5: ( ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) ) )
			// PLSQLPrinter.g:168:10: ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) )
			{
			match(input,STREAMING_CLAUSE,FOLLOW_STREAMING_CLAUSE_in_streaming_clause869); 
			match(input, Token.DOWN, null); 
			if ( input.LA(1)==SQL92_RESERVED_ORDER||input.LA(1)==CLUSTER_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			pushFollow(FOLLOW_expression_in_streaming_clause877);
			expression();
			state._fsp--;

			match(input,COLUMNS,FOLLOW_COLUMNS_in_streaming_clause880); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:168:84: ( column_name )+
			int cnt27=0;
			loop27:
			while (true) {
				int alt27=2;
				int LA27_0 = input.LA(1);
				if ( (LA27_0==COLUMN_NAME) ) {
					alt27=1;
				}

				switch (alt27) {
				case 1 :
					// PLSQLPrinter.g:168:84: column_name
					{
					pushFollow(FOLLOW_column_name_in_streaming_clause882);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt27 >= 1 ) break loop27;
					EarlyExitException eee = new EarlyExitException(27, input);
					throw eee;
				}
				cnt27++;
			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "streaming_clause"


	public static class drop_package_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_package"
	// PLSQLPrinter.g:175:1: drop_package : ^( DROP_PACKAGE package_name ( BODY_VK )? ) ;
	public final PLSQLPrinter.drop_package_return drop_package() throws RecognitionException {
		PLSQLPrinter.drop_package_return retval = new PLSQLPrinter.drop_package_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:176:5: ( ^( DROP_PACKAGE package_name ( BODY_VK )? ) )
			// PLSQLPrinter.g:176:10: ^( DROP_PACKAGE package_name ( BODY_VK )? )
			{
			match(input,DROP_PACKAGE,FOLLOW_DROP_PACKAGE_in_drop_package911); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_package_name_in_drop_package913);
			package_name();
			state._fsp--;

			// PLSQLPrinter.g:176:38: ( BODY_VK )?
			int alt28=2;
			int LA28_0 = input.LA(1);
			if ( (LA28_0==BODY_VK) ) {
				alt28=1;
			}
			switch (alt28) {
				case 1 :
					// PLSQLPrinter.g:176:38: BODY_VK
					{
					match(input,BODY_VK,FOLLOW_BODY_VK_in_drop_package915); 
					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_package"


	public static class alter_package_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_package"
	// PLSQLPrinter.g:179:1: alter_package : ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* ) ;
	public final PLSQLPrinter.alter_package_return alter_package() throws RecognitionException {
		PLSQLPrinter.alter_package_return retval = new PLSQLPrinter.alter_package_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:180:5: ( ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* ) )
			// PLSQLPrinter.g:180:10: ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* )
			{
			match(input,ALTER_PACKAGE,FOLLOW_ALTER_PACKAGE_in_alter_package938); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_package_name_in_alter_package940);
			package_name();
			state._fsp--;

			// PLSQLPrinter.g:180:39: ( DEBUG_VK )?
			int alt29=2;
			int LA29_0 = input.LA(1);
			if ( (LA29_0==DEBUG_VK) ) {
				alt29=1;
			}
			switch (alt29) {
				case 1 :
					// PLSQLPrinter.g:180:39: DEBUG_VK
					{
					match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_package942); 
					}
					break;

			}

			// PLSQLPrinter.g:180:49: ( REUSE_VK )?
			int alt30=2;
			int LA30_0 = input.LA(1);
			if ( (LA30_0==REUSE_VK) ) {
				alt30=1;
			}
			switch (alt30) {
				case 1 :
					// PLSQLPrinter.g:180:49: REUSE_VK
					{
					match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_package945); 
					}
					break;

			}

			// PLSQLPrinter.g:181:17: ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )?
			int alt31=2;
			int LA31_0 = input.LA(1);
			if ( (LA31_0==BODY_VK||LA31_0==PACKAGE_VK||LA31_0==SPECIFICATION_VK) ) {
				alt31=1;
			}
			switch (alt31) {
				case 1 :
					// PLSQLPrinter.g:
					{
					if ( input.LA(1)==BODY_VK||input.LA(1)==PACKAGE_VK||input.LA(1)==SPECIFICATION_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// PLSQLPrinter.g:181:56: ( compiler_parameters_clause )*
			loop32:
			while (true) {
				int alt32=2;
				int LA32_0 = input.LA(1);
				if ( (LA32_0==COMPILER_PARAMETER) ) {
					alt32=1;
				}

				switch (alt32) {
				case 1 :
					// PLSQLPrinter.g:181:56: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_package974);
					compiler_parameters_clause();
					state._fsp--;

					}
					break;

				default :
					break loop32;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_package"


	public static class create_package_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_package"
	// PLSQLPrinter.g:184:1: create_package : ( ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? package_name ( invoker_rights_clause )? ( package_obj_spec )* ) | ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? package_name ( package_obj_body )* ( seq_of_statements )? ) );
	public final PLSQLPrinter.create_package_return create_package() throws RecognitionException {
		PLSQLPrinter.create_package_return retval = new PLSQLPrinter.create_package_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:185:5: ( ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? package_name ( invoker_rights_clause )? ( package_obj_spec )* ) | ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? package_name ( package_obj_body )* ( seq_of_statements )? ) )
			int alt39=2;
			int LA39_0 = input.LA(1);
			if ( (LA39_0==CREATE_PACKAGE_SPEC) ) {
				alt39=1;
			}
			else if ( (LA39_0==CREATE_PACKAGE_BODY) ) {
				alt39=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 39, 0, input);
				throw nvae;
			}

			switch (alt39) {
				case 1 :
					// PLSQLPrinter.g:185:10: ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? package_name ( invoker_rights_clause )? ( package_obj_spec )* )
					{
					match(input,CREATE_PACKAGE_SPEC,FOLLOW_CREATE_PACKAGE_SPEC_in_create_package997); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:185:32: ( REPLACE_VK )?
					int alt33=2;
					int LA33_0 = input.LA(1);
					if ( (LA33_0==REPLACE_VK) ) {
						alt33=1;
					}
					switch (alt33) {
						case 1 :
							// PLSQLPrinter.g:185:32: REPLACE_VK
							{
							match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_package999); 
							}
							break;

					}

					pushFollow(FOLLOW_package_name_in_create_package1002);
					package_name();
					state._fsp--;

					// PLSQLPrinter.g:185:57: ( invoker_rights_clause )?
					int alt34=2;
					int LA34_0 = input.LA(1);
					if ( (LA34_0==AUTHID_VK) ) {
						alt34=1;
					}
					switch (alt34) {
						case 1 :
							// PLSQLPrinter.g:185:57: invoker_rights_clause
							{
							pushFollow(FOLLOW_invoker_rights_clause_in_create_package1004);
							invoker_rights_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:185:80: ( package_obj_spec )*
					loop35:
					while (true) {
						int alt35=2;
						int LA35_0 = input.LA(1);
						if ( (LA35_0==CURSOR_DECLARE||LA35_0==EXCEPTION_DECLARE||LA35_0==FUNCTION_SPEC||LA35_0==PRAGMA_DECLARE||LA35_0==PROCEDURE_SPEC||(LA35_0 >= RECORD_TYPE_DECLARE && LA35_0 <= RECORD_VAR_DECLARE)||LA35_0==SUBTYPE_DECLARE||(LA35_0 >= TABLE_TYPE_DECLARE && LA35_0 <= TABLE_VAR_DECLARE)||LA35_0==VARIABLE_DECLARE) ) {
							alt35=1;
						}

						switch (alt35) {
						case 1 :
							// PLSQLPrinter.g:185:80: package_obj_spec
							{
							pushFollow(FOLLOW_package_obj_spec_in_create_package1007);
							package_obj_spec();
							state._fsp--;

							}
							break;

						default :
							break loop35;
						}
					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:186:10: ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? package_name ( package_obj_body )* ( seq_of_statements )? )
					{
					match(input,CREATE_PACKAGE_BODY,FOLLOW_CREATE_PACKAGE_BODY_in_create_package1022); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:186:32: ( REPLACE_VK )?
					int alt36=2;
					int LA36_0 = input.LA(1);
					if ( (LA36_0==REPLACE_VK) ) {
						alt36=1;
					}
					switch (alt36) {
						case 1 :
							// PLSQLPrinter.g:186:32: REPLACE_VK
							{
							match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_package1024); 
							}
							break;

					}

					pushFollow(FOLLOW_package_name_in_create_package1027);
					package_name();
					state._fsp--;

					// PLSQLPrinter.g:186:57: ( package_obj_body )*
					loop37:
					while (true) {
						int alt37=2;
						int LA37_0 = input.LA(1);
						if ( (LA37_0==CREATE_FUNCTION||LA37_0==CREATE_PROCEDURE||(LA37_0 >= CREATE_TYPE_BODY && LA37_0 <= CREATE_TYPE_SPEC)||LA37_0==CURSOR_DECLARE||LA37_0==EXCEPTION_DECLARE||(LA37_0 >= RECORD_TYPE_DECLARE && LA37_0 <= RECORD_VAR_DECLARE)||LA37_0==SUBTYPE_DECLARE||(LA37_0 >= TABLE_TYPE_DECLARE && LA37_0 <= TABLE_VAR_DECLARE)||LA37_0==VARIABLE_DECLARE) ) {
							alt37=1;
						}

						switch (alt37) {
						case 1 :
							// PLSQLPrinter.g:186:57: package_obj_body
							{
							pushFollow(FOLLOW_package_obj_body_in_create_package1029);
							package_obj_body();
							state._fsp--;

							}
							break;

						default :
							break loop37;
						}
					}

					// PLSQLPrinter.g:186:75: ( seq_of_statements )?
					int alt38=2;
					int LA38_0 = input.LA(1);
					if ( (LA38_0==STATEMENTS) ) {
						alt38=1;
					}
					switch (alt38) {
						case 1 :
							// PLSQLPrinter.g:186:75: seq_of_statements
							{
							pushFollow(FOLLOW_seq_of_statements_in_create_package1032);
							seq_of_statements();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_package"


	public static class package_obj_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "package_obj_spec"
	// PLSQLPrinter.g:191:1: package_obj_spec : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | procedure_spec | function_spec | pragma_declaration );
	public final PLSQLPrinter.package_obj_spec_return package_obj_spec() throws RecognitionException {
		PLSQLPrinter.package_obj_spec_return retval = new PLSQLPrinter.package_obj_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:192:5: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | procedure_spec | function_spec | pragma_declaration )
			int alt40=9;
			switch ( input.LA(1) ) {
			case VARIABLE_DECLARE:
				{
				alt40=1;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt40=2;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt40=3;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt40=4;
				}
				break;
			case RECORD_TYPE_DECLARE:
			case RECORD_VAR_DECLARE:
				{
				alt40=5;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt40=6;
				}
				break;
			case PROCEDURE_SPEC:
				{
				alt40=7;
				}
				break;
			case FUNCTION_SPEC:
				{
				alt40=8;
				}
				break;
			case PRAGMA_DECLARE:
				{
				alt40=9;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 40, 0, input);
				throw nvae;
			}
			switch (alt40) {
				case 1 :
					// PLSQLPrinter.g:192:10: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_package_obj_spec1056);
					variable_declaration();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:193:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_package_obj_spec1068);
					subtype_declaration();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:194:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_package_obj_spec1080);
					cursor_declaration();
					state._fsp--;

					}
					break;
				case 4 :
					// PLSQLPrinter.g:195:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_package_obj_spec1092);
					exception_declaration();
					state._fsp--;

					}
					break;
				case 5 :
					// PLSQLPrinter.g:196:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_package_obj_spec1104);
					record_declaration();
					state._fsp--;

					}
					break;
				case 6 :
					// PLSQLPrinter.g:197:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_package_obj_spec1116);
					table_declaration();
					state._fsp--;

					}
					break;
				case 7 :
					// PLSQLPrinter.g:198:11: procedure_spec
					{
					pushFollow(FOLLOW_procedure_spec_in_package_obj_spec1128);
					procedure_spec();
					state._fsp--;

					}
					break;
				case 8 :
					// PLSQLPrinter.g:199:11: function_spec
					{
					pushFollow(FOLLOW_function_spec_in_package_obj_spec1140);
					function_spec();
					state._fsp--;

					}
					break;
				case 9 :
					// PLSQLPrinter.g:200:11: pragma_declaration
					{
					pushFollow(FOLLOW_pragma_declaration_in_package_obj_spec1152);
					pragma_declaration();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_obj_spec"


	public static class procedure_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "procedure_spec"
	// PLSQLPrinter.g:203:1: procedure_spec : ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( parameter )* ) ( ^( CALL_MODE call_spec ) )? ) ;
	public final PLSQLPrinter.procedure_spec_return procedure_spec() throws RecognitionException {
		PLSQLPrinter.procedure_spec_return retval = new PLSQLPrinter.procedure_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:204:5: ( ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( parameter )* ) ( ^( CALL_MODE call_spec ) )? ) )
			// PLSQLPrinter.g:204:11: ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( parameter )* ) ( ^( CALL_MODE call_spec ) )? )
			{
			match(input,PROCEDURE_SPEC,FOLLOW_PROCEDURE_SPEC_in_procedure_spec1174); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_procedure_name_in_procedure_spec1176);
			procedure_name();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_procedure_spec1179); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:204:56: ( parameter )*
				loop41:
				while (true) {
					int alt41=2;
					int LA41_0 = input.LA(1);
					if ( (LA41_0==PARAMETER) ) {
						alt41=1;
					}

					switch (alt41) {
					case 1 :
						// PLSQLPrinter.g:204:56: parameter
						{
						pushFollow(FOLLOW_parameter_in_procedure_spec1181);
						parameter();
						state._fsp--;

						}
						break;

					default :
						break loop41;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:205:13: ( ^( CALL_MODE call_spec ) )?
			int alt42=2;
			int LA42_0 = input.LA(1);
			if ( (LA42_0==CALL_MODE) ) {
				alt42=1;
			}
			switch (alt42) {
				case 1 :
					// PLSQLPrinter.g:205:14: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_procedure_spec1199); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_procedure_spec1201);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "procedure_spec"


	public static class function_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "function_spec"
	// PLSQLPrinter.g:209:1: function_spec : ^( FUNCTION_SPEC function_name ( type_spec | SELF_VK ) ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( DETERMINISTIC_VK )* ( ^( CALL_MODE call_spec ) | ^( EXTERNAL_VK expression ) )? ) ;
	public final PLSQLPrinter.function_spec_return function_spec() throws RecognitionException {
		PLSQLPrinter.function_spec_return retval = new PLSQLPrinter.function_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:210:5: ( ^( FUNCTION_SPEC function_name ( type_spec | SELF_VK ) ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( DETERMINISTIC_VK )* ( ^( CALL_MODE call_spec ) | ^( EXTERNAL_VK expression ) )? ) )
			// PLSQLPrinter.g:210:10: ^( FUNCTION_SPEC function_name ( type_spec | SELF_VK ) ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( DETERMINISTIC_VK )* ( ^( CALL_MODE call_spec ) | ^( EXTERNAL_VK expression ) )? )
			{
			match(input,FUNCTION_SPEC,FOLLOW_FUNCTION_SPEC_in_function_spec1232); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_name_in_function_spec1234);
			function_name();
			state._fsp--;

			// PLSQLPrinter.g:210:40: ( type_spec | SELF_VK )
			int alt43=2;
			int LA43_0 = input.LA(1);
			if ( (LA43_0==CUSTOM_TYPE||LA43_0==INTERVAL_DATATYPE||LA43_0==NATIVE_DATATYPE) ) {
				alt43=1;
			}
			else if ( (LA43_0==SELF_VK) ) {
				alt43=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 43, 0, input);
				throw nvae;
			}

			switch (alt43) {
				case 1 :
					// PLSQLPrinter.g:210:41: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_function_spec1237);
					type_spec();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:210:51: SELF_VK
					{
					match(input,SELF_VK,FOLLOW_SELF_VK_in_function_spec1239); 
					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_function_spec1243); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:210:73: ( parameter )*
				loop44:
				while (true) {
					int alt44=2;
					int LA44_0 = input.LA(1);
					if ( (LA44_0==PARAMETER) ) {
						alt44=1;
					}

					switch (alt44) {
					case 1 :
						// PLSQLPrinter.g:210:73: parameter
						{
						pushFollow(FOLLOW_parameter_in_function_spec1245);
						parameter();
						state._fsp--;

						}
						break;

					default :
						break loop44;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:211:13: ( invoker_rights_clause )*
			loop45:
			while (true) {
				int alt45=2;
				int LA45_0 = input.LA(1);
				if ( (LA45_0==AUTHID_VK) ) {
					alt45=1;
				}

				switch (alt45) {
				case 1 :
					// PLSQLPrinter.g:211:13: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_function_spec1261);
					invoker_rights_clause();
					state._fsp--;

					}
					break;

				default :
					break loop45;
				}
			}

			// PLSQLPrinter.g:211:36: ( parallel_enable_clause )*
			loop46:
			while (true) {
				int alt46=2;
				int LA46_0 = input.LA(1);
				if ( (LA46_0==PARALLEL_ENABLE_VK) ) {
					alt46=1;
				}

				switch (alt46) {
				case 1 :
					// PLSQLPrinter.g:211:36: parallel_enable_clause
					{
					pushFollow(FOLLOW_parallel_enable_clause_in_function_spec1264);
					parallel_enable_clause();
					state._fsp--;

					}
					break;

				default :
					break loop46;
				}
			}

			// PLSQLPrinter.g:211:60: ( result_cache_clause )*
			loop47:
			while (true) {
				int alt47=2;
				int LA47_0 = input.LA(1);
				if ( (LA47_0==RESULT_CACHE_VK) ) {
					alt47=1;
				}

				switch (alt47) {
				case 1 :
					// PLSQLPrinter.g:211:60: result_cache_clause
					{
					pushFollow(FOLLOW_result_cache_clause_in_function_spec1267);
					result_cache_clause();
					state._fsp--;

					}
					break;

				default :
					break loop47;
				}
			}

			// PLSQLPrinter.g:211:81: ( DETERMINISTIC_VK )*
			loop48:
			while (true) {
				int alt48=2;
				int LA48_0 = input.LA(1);
				if ( (LA48_0==DETERMINISTIC_VK) ) {
					alt48=1;
				}

				switch (alt48) {
				case 1 :
					// PLSQLPrinter.g:211:81: DETERMINISTIC_VK
					{
					match(input,DETERMINISTIC_VK,FOLLOW_DETERMINISTIC_VK_in_function_spec1270); 
					}
					break;

				default :
					break loop48;
				}
			}

			// PLSQLPrinter.g:212:13: ( ^( CALL_MODE call_spec ) | ^( EXTERNAL_VK expression ) )?
			int alt49=3;
			int LA49_0 = input.LA(1);
			if ( (LA49_0==CALL_MODE) ) {
				alt49=1;
			}
			else if ( (LA49_0==EXTERNAL_VK) ) {
				alt49=2;
			}
			switch (alt49) {
				case 1 :
					// PLSQLPrinter.g:212:18: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_function_spec1291); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_function_spec1293);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:213:18: ^( EXTERNAL_VK expression )
					{
					match(input,EXTERNAL_VK,FOLLOW_EXTERNAL_VK_in_function_spec1314); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_function_spec1316);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_spec"


	public static class package_obj_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "package_obj_body"
	// PLSQLPrinter.g:218:1: package_obj_body : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body | create_type );
	public final PLSQLPrinter.package_obj_body_return package_obj_body() throws RecognitionException {
		PLSQLPrinter.package_obj_body_return retval = new PLSQLPrinter.package_obj_body_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:219:5: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body | create_type )
			int alt50=9;
			switch ( input.LA(1) ) {
			case VARIABLE_DECLARE:
				{
				alt50=1;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt50=2;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt50=3;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt50=4;
				}
				break;
			case RECORD_TYPE_DECLARE:
			case RECORD_VAR_DECLARE:
				{
				alt50=5;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt50=6;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt50=7;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt50=8;
				}
				break;
			case CREATE_TYPE_BODY:
			case CREATE_TYPE_SPEC:
				{
				alt50=9;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 50, 0, input);
				throw nvae;
			}
			switch (alt50) {
				case 1 :
					// PLSQLPrinter.g:219:11: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_package_obj_body1363);
					variable_declaration();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:220:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_package_obj_body1376);
					subtype_declaration();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:221:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_package_obj_body1389);
					cursor_declaration();
					state._fsp--;

					}
					break;
				case 4 :
					// PLSQLPrinter.g:222:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_package_obj_body1402);
					exception_declaration();
					state._fsp--;

					}
					break;
				case 5 :
					// PLSQLPrinter.g:223:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_package_obj_body1415);
					record_declaration();
					state._fsp--;

					}
					break;
				case 6 :
					// PLSQLPrinter.g:224:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_package_obj_body1427);
					table_declaration();
					state._fsp--;

					}
					break;
				case 7 :
					// PLSQLPrinter.g:225:11: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_package_obj_body1439);
					create_procedure_body();
					state._fsp--;

					}
					break;
				case 8 :
					// PLSQLPrinter.g:226:11: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_package_obj_body1451);
					create_function_body();
					state._fsp--;

					}
					break;
				case 9 :
					// PLSQLPrinter.g:227:11: create_type
					{
					pushFollow(FOLLOW_create_type_in_package_obj_body1463);
					create_type();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_obj_body"


	public static class drop_procedure_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_procedure"
	// PLSQLPrinter.g:236:1: drop_procedure : ^( DROP_PROCEDURE procedure_name ) ;
	public final PLSQLPrinter.drop_procedure_return drop_procedure() throws RecognitionException {
		PLSQLPrinter.drop_procedure_return retval = new PLSQLPrinter.drop_procedure_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:237:5: ( ^( DROP_PROCEDURE procedure_name ) )
			// PLSQLPrinter.g:237:10: ^( DROP_PROCEDURE procedure_name )
			{
			match(input,DROP_PROCEDURE,FOLLOW_DROP_PROCEDURE_in_drop_procedure1490); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_procedure_name_in_drop_procedure1492);
			procedure_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_procedure"


	public static class alter_procedure_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_procedure"
	// PLSQLPrinter.g:240:1: alter_procedure : ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ;
	public final PLSQLPrinter.alter_procedure_return alter_procedure() throws RecognitionException {
		PLSQLPrinter.alter_procedure_return retval = new PLSQLPrinter.alter_procedure_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:241:5: ( ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
			// PLSQLPrinter.g:241:10: ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
			{
			match(input,ALTER_PROCEDURE,FOLLOW_ALTER_PROCEDURE_in_alter_procedure1514); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_procedure_name_in_alter_procedure1516);
			procedure_name();
			state._fsp--;

			// PLSQLPrinter.g:241:43: ( DEBUG_VK )?
			int alt51=2;
			int LA51_0 = input.LA(1);
			if ( (LA51_0==DEBUG_VK) ) {
				alt51=1;
			}
			switch (alt51) {
				case 1 :
					// PLSQLPrinter.g:241:43: DEBUG_VK
					{
					match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_procedure1518); 
					}
					break;

			}

			// PLSQLPrinter.g:241:53: ( REUSE_VK )?
			int alt52=2;
			int LA52_0 = input.LA(1);
			if ( (LA52_0==REUSE_VK) ) {
				alt52=1;
			}
			switch (alt52) {
				case 1 :
					// PLSQLPrinter.g:241:53: REUSE_VK
					{
					match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_procedure1521); 
					}
					break;

			}

			// PLSQLPrinter.g:241:63: ( compiler_parameters_clause )*
			loop53:
			while (true) {
				int alt53=2;
				int LA53_0 = input.LA(1);
				if ( (LA53_0==COMPILER_PARAMETER) ) {
					alt53=1;
				}

				switch (alt53) {
				case 1 :
					// PLSQLPrinter.g:241:63: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_procedure1524);
					compiler_parameters_clause();
					state._fsp--;

					}
					break;

				default :
					break loop53;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_procedure"


	public static class create_procedure_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_procedure_body"
	// PLSQLPrinter.g:244:1: create_procedure_body : ^( CREATE_PROCEDURE ( REPLACE_VK )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ( EXTERNAL_VK | ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) ) ) ;
	public final PLSQLPrinter.create_procedure_body_return create_procedure_body() throws RecognitionException {
		PLSQLPrinter.create_procedure_body_return retval = new PLSQLPrinter.create_procedure_body_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:245:5: ( ^( CREATE_PROCEDURE ( REPLACE_VK )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ( EXTERNAL_VK | ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) ) ) )
			// PLSQLPrinter.g:245:10: ^( CREATE_PROCEDURE ( REPLACE_VK )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ( EXTERNAL_VK | ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) ) )
			{
			match(input,CREATE_PROCEDURE,FOLLOW_CREATE_PROCEDURE_in_create_procedure_body1547); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:245:29: ( REPLACE_VK )?
			int alt54=2;
			int LA54_0 = input.LA(1);
			if ( (LA54_0==REPLACE_VK) ) {
				alt54=1;
			}
			switch (alt54) {
				case 1 :
					// PLSQLPrinter.g:245:29: REPLACE_VK
					{
					match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_procedure_body1549); 
					}
					break;

			}

			pushFollow(FOLLOW_procedure_name_in_create_procedure_body1552);
			procedure_name();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_create_procedure_body1555); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:245:69: ( parameter )*
				loop55:
				while (true) {
					int alt55=2;
					int LA55_0 = input.LA(1);
					if ( (LA55_0==PARAMETER) ) {
						alt55=1;
					}

					switch (alt55) {
					case 1 :
						// PLSQLPrinter.g:245:69: parameter
						{
						pushFollow(FOLLOW_parameter_in_create_procedure_body1557);
						parameter();
						state._fsp--;

						}
						break;

					default :
						break loop55;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:245:81: ( invoker_rights_clause )?
			int alt56=2;
			int LA56_0 = input.LA(1);
			if ( (LA56_0==AUTHID_VK) ) {
				alt56=1;
			}
			switch (alt56) {
				case 1 :
					// PLSQLPrinter.g:245:81: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_create_procedure_body1561);
					invoker_rights_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:246:13: ( EXTERNAL_VK | ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) )
			int alt58=3;
			switch ( input.LA(1) ) {
			case EXTERNAL_VK:
				{
				alt58=1;
				}
				break;
			case CALL_MODE:
				{
				alt58=2;
				}
				break;
			case BODY_MODE:
				{
				alt58=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 58, 0, input);
				throw nvae;
			}
			switch (alt58) {
				case 1 :
					// PLSQLPrinter.g:246:18: EXTERNAL_VK
					{
					match(input,EXTERNAL_VK,FOLLOW_EXTERNAL_VK_in_create_procedure_body1581); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:247:18: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_create_procedure_body1601); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_create_procedure_body1603);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:248:18: ^( BODY_MODE ( declare_spec )* body )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_create_procedure_body1624); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:248:30: ( declare_spec )*
					loop57:
					while (true) {
						int alt57=2;
						int LA57_0 = input.LA(1);
						if ( (LA57_0==CREATE_FUNCTION||LA57_0==CREATE_PROCEDURE||LA57_0==CURSOR_DECLARE||LA57_0==EXCEPTION_DECLARE||LA57_0==PRAGMA_DECLARE||(LA57_0 >= RECORD_TYPE_DECLARE && LA57_0 <= RECORD_VAR_DECLARE)||LA57_0==SUBTYPE_DECLARE||(LA57_0 >= TABLE_TYPE_DECLARE && LA57_0 <= TABLE_VAR_DECLARE)||LA57_0==VARIABLE_DECLARE) ) {
							alt57=1;
						}

						switch (alt57) {
						case 1 :
							// PLSQLPrinter.g:248:30: declare_spec
							{
							pushFollow(FOLLOW_declare_spec_in_create_procedure_body1626);
							declare_spec();
							state._fsp--;

							}
							break;

						default :
							break loop57;
						}
					}

					pushFollow(FOLLOW_body_in_create_procedure_body1629);
					body();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_procedure_body"


	public static class drop_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_trigger"
	// PLSQLPrinter.g:257:1: drop_trigger : ^( DROP_TRIGGER trigger_name ) ;
	public final PLSQLPrinter.drop_trigger_return drop_trigger() throws RecognitionException {
		PLSQLPrinter.drop_trigger_return retval = new PLSQLPrinter.drop_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:258:5: ( ^( DROP_TRIGGER trigger_name ) )
			// PLSQLPrinter.g:258:10: ^( DROP_TRIGGER trigger_name )
			{
			match(input,DROP_TRIGGER,FOLLOW_DROP_TRIGGER_in_drop_trigger1679); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_trigger_name_in_drop_trigger1681);
			trigger_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_trigger"


	public static class alter_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_trigger"
	// PLSQLPrinter.g:261:1: alter_trigger : ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ;
	public final PLSQLPrinter.alter_trigger_return alter_trigger() throws RecognitionException {
		PLSQLPrinter.alter_trigger_return retval = new PLSQLPrinter.alter_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:262:5: ( ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) )
			// PLSQLPrinter.g:262:10: ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
			{
			match(input,ALTER_TRIGGER,FOLLOW_ALTER_TRIGGER_in_alter_trigger1703); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_trigger_name_in_alter_trigger1705);
			trigger_name();
			state._fsp--;

			// PLSQLPrinter.g:263:13: ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
			int alt62=3;
			switch ( input.LA(1) ) {
			case DISABLE_VK:
			case ENABLE_VK:
				{
				alt62=1;
				}
				break;
			case RENAME_VK:
				{
				alt62=2;
				}
				break;
			case UP:
			case COMPILER_PARAMETER:
			case DEBUG_VK:
			case REUSE_VK:
				{
				alt62=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 62, 0, input);
				throw nvae;
			}
			switch (alt62) {
				case 1 :
					// PLSQLPrinter.g:263:18: ( ENABLE_VK | DISABLE_VK )
					{
					if ( input.LA(1)==DISABLE_VK||input.LA(1)==ENABLE_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;
				case 2 :
					// PLSQLPrinter.g:264:18: ^( RENAME_VK trigger_name )
					{
					match(input,RENAME_VK,FOLLOW_RENAME_VK_in_alter_trigger1749); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_trigger_name_in_alter_trigger1751);
					trigger_name();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:265:18: ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )*
					{
					// PLSQLPrinter.g:265:18: ( DEBUG_VK )?
					int alt59=2;
					int LA59_0 = input.LA(1);
					if ( (LA59_0==DEBUG_VK) ) {
						alt59=1;
					}
					switch (alt59) {
						case 1 :
							// PLSQLPrinter.g:265:18: DEBUG_VK
							{
							match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_trigger1771); 
							}
							break;

					}

					// PLSQLPrinter.g:265:28: ( REUSE_VK )?
					int alt60=2;
					int LA60_0 = input.LA(1);
					if ( (LA60_0==REUSE_VK) ) {
						alt60=1;
					}
					switch (alt60) {
						case 1 :
							// PLSQLPrinter.g:265:28: REUSE_VK
							{
							match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_trigger1774); 
							}
							break;

					}

					// PLSQLPrinter.g:265:38: ( compiler_parameters_clause )*
					loop61:
					while (true) {
						int alt61=2;
						int LA61_0 = input.LA(1);
						if ( (LA61_0==COMPILER_PARAMETER) ) {
							alt61=1;
						}

						switch (alt61) {
						case 1 :
							// PLSQLPrinter.g:265:38: compiler_parameters_clause
							{
							pushFollow(FOLLOW_compiler_parameters_clause_in_alter_trigger1777);
							compiler_parameters_clause();
							state._fsp--;

							}
							break;

						default :
							break loop61;
						}
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_trigger"


	public static class create_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_trigger"
	// PLSQLPrinter.g:270:1: create_trigger : ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body ) ;
	public final PLSQLPrinter.create_trigger_return create_trigger() throws RecognitionException {
		PLSQLPrinter.create_trigger_return retval = new PLSQLPrinter.create_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:271:5: ( ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body ) )
			// PLSQLPrinter.g:271:10: ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body )
			{
			match(input,CREATE_TRIGGER,FOLLOW_CREATE_TRIGGER_in_create_trigger1823); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:271:27: ( REPLACE_VK )?
			int alt63=2;
			int LA63_0 = input.LA(1);
			if ( (LA63_0==REPLACE_VK) ) {
				alt63=1;
			}
			switch (alt63) {
				case 1 :
					// PLSQLPrinter.g:271:27: REPLACE_VK
					{
					match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_trigger1825); 
					}
					break;

			}

			pushFollow(FOLLOW_trigger_name_in_create_trigger1828);
			trigger_name();
			state._fsp--;

			// PLSQLPrinter.g:272:13: ( simple_dml_trigger )?
			int alt64=2;
			int LA64_0 = input.LA(1);
			if ( (LA64_0==SIMPLE_DML) ) {
				alt64=1;
			}
			switch (alt64) {
				case 1 :
					// PLSQLPrinter.g:272:13: simple_dml_trigger
					{
					pushFollow(FOLLOW_simple_dml_trigger_in_create_trigger1844);
					simple_dml_trigger();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:272:33: ( compound_dml_trigger )?
			int alt65=2;
			int LA65_0 = input.LA(1);
			if ( (LA65_0==COMPOUND_DML) ) {
				alt65=1;
			}
			switch (alt65) {
				case 1 :
					// PLSQLPrinter.g:272:33: compound_dml_trigger
					{
					pushFollow(FOLLOW_compound_dml_trigger_in_create_trigger1847);
					compound_dml_trigger();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:272:55: ( non_dml_trigger )?
			int alt66=2;
			int LA66_0 = input.LA(1);
			if ( (LA66_0==NON_DML) ) {
				alt66=1;
			}
			switch (alt66) {
				case 1 :
					// PLSQLPrinter.g:272:55: non_dml_trigger
					{
					pushFollow(FOLLOW_non_dml_trigger_in_create_trigger1850);
					non_dml_trigger();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:273:13: ( trigger_follows_clause )?
			int alt67=2;
			int LA67_0 = input.LA(1);
			if ( (LA67_0==FOLLOWS_VK) ) {
				alt67=1;
			}
			switch (alt67) {
				case 1 :
					// PLSQLPrinter.g:273:13: trigger_follows_clause
					{
					pushFollow(FOLLOW_trigger_follows_clause_in_create_trigger1865);
					trigger_follows_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:273:37: ( ENABLE_VK | DISABLE_VK )?
			int alt68=2;
			int LA68_0 = input.LA(1);
			if ( (LA68_0==DISABLE_VK||LA68_0==ENABLE_VK) ) {
				alt68=1;
			}
			switch (alt68) {
				case 1 :
					// PLSQLPrinter.g:
					{
					if ( input.LA(1)==DISABLE_VK||input.LA(1)==ENABLE_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// PLSQLPrinter.g:273:61: ( trigger_when_clause )?
			int alt69=2;
			int LA69_0 = input.LA(1);
			if ( (LA69_0==SQL92_RESERVED_WHEN) ) {
				alt69=1;
			}
			switch (alt69) {
				case 1 :
					// PLSQLPrinter.g:273:61: trigger_when_clause
					{
					pushFollow(FOLLOW_trigger_when_clause_in_create_trigger1875);
					trigger_when_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_trigger_body_in_create_trigger1878);
			trigger_body();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_trigger"


	public static class trigger_follows_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_follows_clause"
	// PLSQLPrinter.g:276:1: trigger_follows_clause : ^( FOLLOWS_VK ( trigger_name )+ ) ;
	public final PLSQLPrinter.trigger_follows_clause_return trigger_follows_clause() throws RecognitionException {
		PLSQLPrinter.trigger_follows_clause_return retval = new PLSQLPrinter.trigger_follows_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:277:5: ( ^( FOLLOWS_VK ( trigger_name )+ ) )
			// PLSQLPrinter.g:277:10: ^( FOLLOWS_VK ( trigger_name )+ )
			{
			match(input,FOLLOWS_VK,FOLLOW_FOLLOWS_VK_in_trigger_follows_clause1900); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:277:23: ( trigger_name )+
			int cnt70=0;
			loop70:
			while (true) {
				int alt70=2;
				int LA70_0 = input.LA(1);
				if ( (LA70_0==TRIGGER_NAME) ) {
					alt70=1;
				}

				switch (alt70) {
				case 1 :
					// PLSQLPrinter.g:277:23: trigger_name
					{
					pushFollow(FOLLOW_trigger_name_in_trigger_follows_clause1902);
					trigger_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt70 >= 1 ) break loop70;
					EarlyExitException eee = new EarlyExitException(70, input);
					throw eee;
				}
				cnt70++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_follows_clause"


	public static class trigger_when_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_when_clause"
	// PLSQLPrinter.g:280:1: trigger_when_clause : ^( SQL92_RESERVED_WHEN expression ) ;
	public final PLSQLPrinter.trigger_when_clause_return trigger_when_clause() throws RecognitionException {
		PLSQLPrinter.trigger_when_clause_return retval = new PLSQLPrinter.trigger_when_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:281:5: ( ^( SQL92_RESERVED_WHEN expression ) )
			// PLSQLPrinter.g:281:10: ^( SQL92_RESERVED_WHEN expression )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_trigger_when_clause1925); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_trigger_when_clause1927);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_when_clause"


	public static class simple_dml_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "simple_dml_trigger"
	// PLSQLPrinter.g:285:1: simple_dml_trigger : ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause ) ;
	public final PLSQLPrinter.simple_dml_trigger_return simple_dml_trigger() throws RecognitionException {
		PLSQLPrinter.simple_dml_trigger_return retval = new PLSQLPrinter.simple_dml_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:286:5: ( ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause ) )
			// PLSQLPrinter.g:286:10: ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause )
			{
			match(input,SIMPLE_DML,FOLLOW_SIMPLE_DML_in_simple_dml_trigger1950); 
			match(input, Token.DOWN, null); 
			if ( input.LA(1)==AFTER_VK||input.LA(1)==BEFORE_VK||input.LA(1)==INSTEAD_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// PLSQLPrinter.g:286:55: ( FOR_EACH_ROW )?
			int alt71=2;
			int LA71_0 = input.LA(1);
			if ( (LA71_0==FOR_EACH_ROW) ) {
				alt71=1;
			}
			switch (alt71) {
				case 1 :
					// PLSQLPrinter.g:286:55: FOR_EACH_ROW
					{
					match(input,FOR_EACH_ROW,FOLLOW_FOR_EACH_ROW_in_simple_dml_trigger1960); 
					}
					break;

			}

			// PLSQLPrinter.g:286:69: ( referencing_clause )?
			int alt72=2;
			int LA72_0 = input.LA(1);
			if ( (LA72_0==REFERENCING_VK) ) {
				alt72=1;
			}
			switch (alt72) {
				case 1 :
					// PLSQLPrinter.g:286:69: referencing_clause
					{
					pushFollow(FOLLOW_referencing_clause_in_simple_dml_trigger1963);
					referencing_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_event_clause_in_simple_dml_trigger1966);
			dml_event_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "simple_dml_trigger"


	public static class compound_dml_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "compound_dml_trigger"
	// PLSQLPrinter.g:289:1: compound_dml_trigger : ^( COMPOUND_DML ( referencing_clause )? dml_event_clause ) ;
	public final PLSQLPrinter.compound_dml_trigger_return compound_dml_trigger() throws RecognitionException {
		PLSQLPrinter.compound_dml_trigger_return retval = new PLSQLPrinter.compound_dml_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:290:5: ( ^( COMPOUND_DML ( referencing_clause )? dml_event_clause ) )
			// PLSQLPrinter.g:290:10: ^( COMPOUND_DML ( referencing_clause )? dml_event_clause )
			{
			match(input,COMPOUND_DML,FOLLOW_COMPOUND_DML_in_compound_dml_trigger1988); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:290:25: ( referencing_clause )?
			int alt73=2;
			int LA73_0 = input.LA(1);
			if ( (LA73_0==REFERENCING_VK) ) {
				alt73=1;
			}
			switch (alt73) {
				case 1 :
					// PLSQLPrinter.g:290:25: referencing_clause
					{
					pushFollow(FOLLOW_referencing_clause_in_compound_dml_trigger1990);
					referencing_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_event_clause_in_compound_dml_trigger1993);
			dml_event_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compound_dml_trigger"


	public static class non_dml_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "non_dml_trigger"
	// PLSQLPrinter.g:293:1: non_dml_trigger : ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) ) ;
	public final PLSQLPrinter.non_dml_trigger_return non_dml_trigger() throws RecognitionException {
		PLSQLPrinter.non_dml_trigger_return retval = new PLSQLPrinter.non_dml_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:294:5: ( ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) ) )
			// PLSQLPrinter.g:294:10: ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) )
			{
			match(input,NON_DML,FOLLOW_NON_DML_in_non_dml_trigger2015); 
			match(input, Token.DOWN, null); 
			if ( input.LA(1)==AFTER_VK||input.LA(1)==BEFORE_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// PLSQLPrinter.g:294:41: ( non_dml_event )+
			int cnt74=0;
			loop74:
			while (true) {
				int alt74=2;
				switch ( input.LA(1) ) {
				case DATABASE_VK:
					{
					int LA74_1 = input.LA(2);
					if ( (LA74_1==SQL92_RESERVED_ALTER||LA74_1==SQL92_RESERVED_CREATE||LA74_1==SQL92_RESERVED_DROP||LA74_1==SQL92_RESERVED_GRANT||LA74_1==SQL92_RESERVED_REVOKE||LA74_1==ANALYZE_VK||LA74_1==ASSOCIATE_VK||LA74_1==AUDIT_VK||LA74_1==COMMENT_VK||LA74_1==DATABASE_VK||(LA74_1 >= DB_ROLE_CHANGE_VK && LA74_1 <= DDL_VK)||LA74_1==DISASSOCIATE_VK||LA74_1==FOLLOWS_VK||(LA74_1 >= LOGOFF_VK && LA74_1 <= LOGON_VK)||LA74_1==NOAUDIT_VK||LA74_1==RENAME_VK||(LA74_1 >= SCHEMA_NAME && LA74_1 <= SCHEMA_VK)||LA74_1==SERVERERROR_VK||LA74_1==SHUTDOWN_VK||LA74_1==STARTUP_VK||LA74_1==SUSPEND_VK||LA74_1==TRUNCATE_VK) ) {
						alt74=1;
					}

					}
					break;
				case SCHEMA_VK:
					{
					int LA74_3 = input.LA(2);
					if ( (LA74_3==SQL92_RESERVED_ALTER||LA74_3==SQL92_RESERVED_CREATE||LA74_3==SQL92_RESERVED_DROP||LA74_3==SQL92_RESERVED_GRANT||LA74_3==SQL92_RESERVED_REVOKE||LA74_3==ANALYZE_VK||LA74_3==ASSOCIATE_VK||LA74_3==AUDIT_VK||LA74_3==COMMENT_VK||LA74_3==DATABASE_VK||(LA74_3 >= DB_ROLE_CHANGE_VK && LA74_3 <= DDL_VK)||LA74_3==DISASSOCIATE_VK||LA74_3==FOLLOWS_VK||(LA74_3 >= LOGOFF_VK && LA74_3 <= LOGON_VK)||LA74_3==NOAUDIT_VK||LA74_3==RENAME_VK||(LA74_3 >= SCHEMA_NAME && LA74_3 <= SCHEMA_VK)||LA74_3==SERVERERROR_VK||LA74_3==SHUTDOWN_VK||LA74_3==STARTUP_VK||LA74_3==SUSPEND_VK||LA74_3==TRUNCATE_VK) ) {
						alt74=1;
					}

					}
					break;
				case SQL92_RESERVED_ALTER:
				case SQL92_RESERVED_CREATE:
				case SQL92_RESERVED_DROP:
				case SQL92_RESERVED_GRANT:
				case SQL92_RESERVED_REVOKE:
				case ANALYZE_VK:
				case ASSOCIATE_VK:
				case AUDIT_VK:
				case COMMENT_VK:
				case DB_ROLE_CHANGE_VK:
				case DDL_VK:
				case DISASSOCIATE_VK:
				case FOLLOWS_VK:
				case LOGOFF_VK:
				case LOGON_VK:
				case NOAUDIT_VK:
				case RENAME_VK:
				case SERVERERROR_VK:
				case SHUTDOWN_VK:
				case STARTUP_VK:
				case SUSPEND_VK:
				case TRUNCATE_VK:
					{
					alt74=1;
					}
					break;
				}
				switch (alt74) {
				case 1 :
					// PLSQLPrinter.g:294:41: non_dml_event
					{
					pushFollow(FOLLOW_non_dml_event_in_non_dml_trigger2023);
					non_dml_event();
					state._fsp--;

					}
					break;

				default :
					if ( cnt74 >= 1 ) break loop74;
					EarlyExitException eee = new EarlyExitException(74, input);
					throw eee;
				}
				cnt74++;
			}

			// PLSQLPrinter.g:294:56: ( DATABASE_VK | ( schema_name )? SCHEMA_VK )
			int alt76=2;
			int LA76_0 = input.LA(1);
			if ( (LA76_0==DATABASE_VK) ) {
				alt76=1;
			}
			else if ( ((LA76_0 >= SCHEMA_NAME && LA76_0 <= SCHEMA_VK)) ) {
				alt76=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 76, 0, input);
				throw nvae;
			}

			switch (alt76) {
				case 1 :
					// PLSQLPrinter.g:294:57: DATABASE_VK
					{
					match(input,DATABASE_VK,FOLLOW_DATABASE_VK_in_non_dml_trigger2027); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:294:69: ( schema_name )? SCHEMA_VK
					{
					// PLSQLPrinter.g:294:69: ( schema_name )?
					int alt75=2;
					int LA75_0 = input.LA(1);
					if ( (LA75_0==SCHEMA_NAME) ) {
						alt75=1;
					}
					switch (alt75) {
						case 1 :
							// PLSQLPrinter.g:294:69: schema_name
							{
							pushFollow(FOLLOW_schema_name_in_non_dml_trigger2029);
							schema_name();
							state._fsp--;

							}
							break;

					}

					match(input,SCHEMA_VK,FOLLOW_SCHEMA_VK_in_non_dml_trigger2032); 
					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "non_dml_trigger"


	public static class trigger_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_body"
	// PLSQLPrinter.g:297:1: trigger_body : ( ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ ) | ^( CALL_VK routine_name ( function_argument )? ) | ^( BODY_MODE block ) );
	public final PLSQLPrinter.trigger_body_return trigger_body() throws RecognitionException {
		PLSQLPrinter.trigger_body_return retval = new PLSQLPrinter.trigger_body_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:298:5: ( ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ ) | ^( CALL_VK routine_name ( function_argument )? ) | ^( BODY_MODE block ) )
			int alt80=3;
			switch ( input.LA(1) ) {
			case COMPOUND_VK:
				{
				alt80=1;
				}
				break;
			case CALL_VK:
				{
				alt80=2;
				}
				break;
			case BODY_MODE:
				{
				alt80=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 80, 0, input);
				throw nvae;
			}
			switch (alt80) {
				case 1 :
					// PLSQLPrinter.g:298:10: ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ )
					{
					match(input,COMPOUND_VK,FOLLOW_COMPOUND_VK_in_trigger_body2055); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_trigger_name_in_trigger_body2057);
					trigger_name();
					state._fsp--;

					// PLSQLPrinter.g:298:37: ( declare_spec )*
					loop77:
					while (true) {
						int alt77=2;
						int LA77_0 = input.LA(1);
						if ( (LA77_0==CREATE_FUNCTION||LA77_0==CREATE_PROCEDURE||LA77_0==CURSOR_DECLARE||LA77_0==EXCEPTION_DECLARE||LA77_0==PRAGMA_DECLARE||(LA77_0 >= RECORD_TYPE_DECLARE && LA77_0 <= RECORD_VAR_DECLARE)||LA77_0==SUBTYPE_DECLARE||(LA77_0 >= TABLE_TYPE_DECLARE && LA77_0 <= TABLE_VAR_DECLARE)||LA77_0==VARIABLE_DECLARE) ) {
							alt77=1;
						}

						switch (alt77) {
						case 1 :
							// PLSQLPrinter.g:298:37: declare_spec
							{
							pushFollow(FOLLOW_declare_spec_in_trigger_body2059);
							declare_spec();
							state._fsp--;

							}
							break;

						default :
							break loop77;
						}
					}

					// PLSQLPrinter.g:298:51: ( timing_point_section )+
					int cnt78=0;
					loop78:
					while (true) {
						int alt78=2;
						int LA78_0 = input.LA(1);
						if ( ((LA78_0 >= AFTER_EACH_ROW && LA78_0 <= AFTER_STATEMENT)||(LA78_0 >= BEFORE_EACH_ROW && LA78_0 <= BEFORE_STATEMENT)) ) {
							alt78=1;
						}

						switch (alt78) {
						case 1 :
							// PLSQLPrinter.g:298:51: timing_point_section
							{
							pushFollow(FOLLOW_timing_point_section_in_trigger_body2062);
							timing_point_section();
							state._fsp--;

							}
							break;

						default :
							if ( cnt78 >= 1 ) break loop78;
							EarlyExitException eee = new EarlyExitException(78, input);
							throw eee;
						}
						cnt78++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:299:10: ^( CALL_VK routine_name ( function_argument )? )
					{
					match(input,CALL_VK,FOLLOW_CALL_VK_in_trigger_body2076); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_routine_name_in_trigger_body2078);
					routine_name();
					state._fsp--;

					// PLSQLPrinter.g:299:33: ( function_argument )?
					int alt79=2;
					int LA79_0 = input.LA(1);
					if ( (LA79_0==ARGUMENTS) ) {
						alt79=1;
					}
					switch (alt79) {
						case 1 :
							// PLSQLPrinter.g:299:33: function_argument
							{
							pushFollow(FOLLOW_function_argument_in_trigger_body2080);
							function_argument();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:300:10: ^( BODY_MODE block )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_trigger_body2095); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_trigger_body2097);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_body"


	public static class timing_point_section_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "timing_point_section"
	// PLSQLPrinter.g:303:1: timing_point_section : ( ^( BEFORE_STATEMENT block ) | ^( BEFORE_EACH_ROW block ) | ^( AFTER_STATEMENT block ) | ^( AFTER_EACH_ROW block ) );
	public final PLSQLPrinter.timing_point_section_return timing_point_section() throws RecognitionException {
		PLSQLPrinter.timing_point_section_return retval = new PLSQLPrinter.timing_point_section_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:304:5: ( ^( BEFORE_STATEMENT block ) | ^( BEFORE_EACH_ROW block ) | ^( AFTER_STATEMENT block ) | ^( AFTER_EACH_ROW block ) )
			int alt81=4;
			switch ( input.LA(1) ) {
			case BEFORE_STATEMENT:
				{
				alt81=1;
				}
				break;
			case BEFORE_EACH_ROW:
				{
				alt81=2;
				}
				break;
			case AFTER_STATEMENT:
				{
				alt81=3;
				}
				break;
			case AFTER_EACH_ROW:
				{
				alt81=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 81, 0, input);
				throw nvae;
			}
			switch (alt81) {
				case 1 :
					// PLSQLPrinter.g:304:10: ^( BEFORE_STATEMENT block )
					{
					match(input,BEFORE_STATEMENT,FOLLOW_BEFORE_STATEMENT_in_timing_point_section2119); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section2121);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:305:10: ^( BEFORE_EACH_ROW block )
					{
					match(input,BEFORE_EACH_ROW,FOLLOW_BEFORE_EACH_ROW_in_timing_point_section2134); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section2136);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:306:10: ^( AFTER_STATEMENT block )
					{
					match(input,AFTER_STATEMENT,FOLLOW_AFTER_STATEMENT_in_timing_point_section2149); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section2151);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// PLSQLPrinter.g:307:10: ^( AFTER_EACH_ROW block )
					{
					match(input,AFTER_EACH_ROW,FOLLOW_AFTER_EACH_ROW_in_timing_point_section2164); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section2166);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "timing_point_section"


	public static class non_dml_event_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "non_dml_event"
	// PLSQLPrinter.g:310:1: non_dml_event : ( SQL92_RESERVED_ALTER | ANALYZE_VK | ASSOCIATE_VK STATISTICS_VK | AUDIT_VK | COMMENT_VK | SQL92_RESERVED_CREATE | DISASSOCIATE_VK STATISTICS_VK | SQL92_RESERVED_DROP | SQL92_RESERVED_GRANT | NOAUDIT_VK | RENAME_VK | SQL92_RESERVED_REVOKE | TRUNCATE_VK | DDL_VK | STARTUP_VK | SHUTDOWN_VK | DB_ROLE_CHANGE_VK | LOGON_VK | LOGOFF_VK | SERVERERROR_VK | SUSPEND_VK | DATABASE_VK | SCHEMA_VK | FOLLOWS_VK );
	public final PLSQLPrinter.non_dml_event_return non_dml_event() throws RecognitionException {
		PLSQLPrinter.non_dml_event_return retval = new PLSQLPrinter.non_dml_event_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:311:5: ( SQL92_RESERVED_ALTER | ANALYZE_VK | ASSOCIATE_VK STATISTICS_VK | AUDIT_VK | COMMENT_VK | SQL92_RESERVED_CREATE | DISASSOCIATE_VK STATISTICS_VK | SQL92_RESERVED_DROP | SQL92_RESERVED_GRANT | NOAUDIT_VK | RENAME_VK | SQL92_RESERVED_REVOKE | TRUNCATE_VK | DDL_VK | STARTUP_VK | SHUTDOWN_VK | DB_ROLE_CHANGE_VK | LOGON_VK | LOGOFF_VK | SERVERERROR_VK | SUSPEND_VK | DATABASE_VK | SCHEMA_VK | FOLLOWS_VK )
			int alt82=24;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ALTER:
				{
				alt82=1;
				}
				break;
			case ANALYZE_VK:
				{
				alt82=2;
				}
				break;
			case ASSOCIATE_VK:
				{
				alt82=3;
				}
				break;
			case AUDIT_VK:
				{
				alt82=4;
				}
				break;
			case COMMENT_VK:
				{
				alt82=5;
				}
				break;
			case SQL92_RESERVED_CREATE:
				{
				alt82=6;
				}
				break;
			case DISASSOCIATE_VK:
				{
				alt82=7;
				}
				break;
			case SQL92_RESERVED_DROP:
				{
				alt82=8;
				}
				break;
			case SQL92_RESERVED_GRANT:
				{
				alt82=9;
				}
				break;
			case NOAUDIT_VK:
				{
				alt82=10;
				}
				break;
			case RENAME_VK:
				{
				alt82=11;
				}
				break;
			case SQL92_RESERVED_REVOKE:
				{
				alt82=12;
				}
				break;
			case TRUNCATE_VK:
				{
				alt82=13;
				}
				break;
			case DDL_VK:
				{
				alt82=14;
				}
				break;
			case STARTUP_VK:
				{
				alt82=15;
				}
				break;
			case SHUTDOWN_VK:
				{
				alt82=16;
				}
				break;
			case DB_ROLE_CHANGE_VK:
				{
				alt82=17;
				}
				break;
			case LOGON_VK:
				{
				alt82=18;
				}
				break;
			case LOGOFF_VK:
				{
				alt82=19;
				}
				break;
			case SERVERERROR_VK:
				{
				alt82=20;
				}
				break;
			case SUSPEND_VK:
				{
				alt82=21;
				}
				break;
			case DATABASE_VK:
				{
				alt82=22;
				}
				break;
			case SCHEMA_VK:
				{
				alt82=23;
				}
				break;
			case FOLLOWS_VK:
				{
				alt82=24;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 82, 0, input);
				throw nvae;
			}
			switch (alt82) {
				case 1 :
					// PLSQLPrinter.g:311:10: SQL92_RESERVED_ALTER
					{
					match(input,SQL92_RESERVED_ALTER,FOLLOW_SQL92_RESERVED_ALTER_in_non_dml_event2187); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:312:10: ANALYZE_VK
					{
					match(input,ANALYZE_VK,FOLLOW_ANALYZE_VK_in_non_dml_event2198); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:313:10: ASSOCIATE_VK STATISTICS_VK
					{
					match(input,ASSOCIATE_VK,FOLLOW_ASSOCIATE_VK_in_non_dml_event2209); 
					match(input,STATISTICS_VK,FOLLOW_STATISTICS_VK_in_non_dml_event2211); 
					}
					break;
				case 4 :
					// PLSQLPrinter.g:314:10: AUDIT_VK
					{
					match(input,AUDIT_VK,FOLLOW_AUDIT_VK_in_non_dml_event2222); 
					}
					break;
				case 5 :
					// PLSQLPrinter.g:315:10: COMMENT_VK
					{
					match(input,COMMENT_VK,FOLLOW_COMMENT_VK_in_non_dml_event2233); 
					}
					break;
				case 6 :
					// PLSQLPrinter.g:316:10: SQL92_RESERVED_CREATE
					{
					match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_non_dml_event2244); 
					}
					break;
				case 7 :
					// PLSQLPrinter.g:317:10: DISASSOCIATE_VK STATISTICS_VK
					{
					match(input,DISASSOCIATE_VK,FOLLOW_DISASSOCIATE_VK_in_non_dml_event2255); 
					match(input,STATISTICS_VK,FOLLOW_STATISTICS_VK_in_non_dml_event2257); 
					}
					break;
				case 8 :
					// PLSQLPrinter.g:318:10: SQL92_RESERVED_DROP
					{
					match(input,SQL92_RESERVED_DROP,FOLLOW_SQL92_RESERVED_DROP_in_non_dml_event2268); 
					}
					break;
				case 9 :
					// PLSQLPrinter.g:319:10: SQL92_RESERVED_GRANT
					{
					match(input,SQL92_RESERVED_GRANT,FOLLOW_SQL92_RESERVED_GRANT_in_non_dml_event2279); 
					}
					break;
				case 10 :
					// PLSQLPrinter.g:320:10: NOAUDIT_VK
					{
					match(input,NOAUDIT_VK,FOLLOW_NOAUDIT_VK_in_non_dml_event2290); 
					}
					break;
				case 11 :
					// PLSQLPrinter.g:321:10: RENAME_VK
					{
					match(input,RENAME_VK,FOLLOW_RENAME_VK_in_non_dml_event2301); 
					}
					break;
				case 12 :
					// PLSQLPrinter.g:322:10: SQL92_RESERVED_REVOKE
					{
					match(input,SQL92_RESERVED_REVOKE,FOLLOW_SQL92_RESERVED_REVOKE_in_non_dml_event2312); 
					}
					break;
				case 13 :
					// PLSQLPrinter.g:323:10: TRUNCATE_VK
					{
					match(input,TRUNCATE_VK,FOLLOW_TRUNCATE_VK_in_non_dml_event2323); 
					}
					break;
				case 14 :
					// PLSQLPrinter.g:324:10: DDL_VK
					{
					match(input,DDL_VK,FOLLOW_DDL_VK_in_non_dml_event2334); 
					}
					break;
				case 15 :
					// PLSQLPrinter.g:325:10: STARTUP_VK
					{
					match(input,STARTUP_VK,FOLLOW_STARTUP_VK_in_non_dml_event2345); 
					}
					break;
				case 16 :
					// PLSQLPrinter.g:326:10: SHUTDOWN_VK
					{
					match(input,SHUTDOWN_VK,FOLLOW_SHUTDOWN_VK_in_non_dml_event2356); 
					}
					break;
				case 17 :
					// PLSQLPrinter.g:327:10: DB_ROLE_CHANGE_VK
					{
					match(input,DB_ROLE_CHANGE_VK,FOLLOW_DB_ROLE_CHANGE_VK_in_non_dml_event2367); 
					}
					break;
				case 18 :
					// PLSQLPrinter.g:328:10: LOGON_VK
					{
					match(input,LOGON_VK,FOLLOW_LOGON_VK_in_non_dml_event2378); 
					}
					break;
				case 19 :
					// PLSQLPrinter.g:329:10: LOGOFF_VK
					{
					match(input,LOGOFF_VK,FOLLOW_LOGOFF_VK_in_non_dml_event2389); 
					}
					break;
				case 20 :
					// PLSQLPrinter.g:330:10: SERVERERROR_VK
					{
					match(input,SERVERERROR_VK,FOLLOW_SERVERERROR_VK_in_non_dml_event2400); 
					}
					break;
				case 21 :
					// PLSQLPrinter.g:331:10: SUSPEND_VK
					{
					match(input,SUSPEND_VK,FOLLOW_SUSPEND_VK_in_non_dml_event2411); 
					}
					break;
				case 22 :
					// PLSQLPrinter.g:332:10: DATABASE_VK
					{
					match(input,DATABASE_VK,FOLLOW_DATABASE_VK_in_non_dml_event2422); 
					}
					break;
				case 23 :
					// PLSQLPrinter.g:333:10: SCHEMA_VK
					{
					match(input,SCHEMA_VK,FOLLOW_SCHEMA_VK_in_non_dml_event2433); 
					}
					break;
				case 24 :
					// PLSQLPrinter.g:334:10: FOLLOWS_VK
					{
					match(input,FOLLOWS_VK,FOLLOW_FOLLOWS_VK_in_non_dml_event2444); 
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "non_dml_event"


	public static class dml_event_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_event_clause"
	// PLSQLPrinter.g:337:1: dml_event_clause : ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) ) ;
	public final PLSQLPrinter.dml_event_clause_return dml_event_clause() throws RecognitionException {
		PLSQLPrinter.dml_event_clause_return retval = new PLSQLPrinter.dml_event_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:338:5: ( ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) ) )
			// PLSQLPrinter.g:338:10: ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) )
			{
			match(input,DML_EVENT,FOLLOW_DML_EVENT_in_dml_event_clause2465); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:338:22: ( dml_event_element )+
			int cnt83=0;
			loop83:
			while (true) {
				int alt83=2;
				int LA83_0 = input.LA(1);
				if ( (LA83_0==DML_EVENT_ELEMENT) ) {
					alt83=1;
				}

				switch (alt83) {
				case 1 :
					// PLSQLPrinter.g:338:22: dml_event_element
					{
					pushFollow(FOLLOW_dml_event_element_in_dml_event_clause2467);
					dml_event_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt83 >= 1 ) break loop83;
					EarlyExitException eee = new EarlyExitException(83, input);
					throw eee;
				}
				cnt83++;
			}

			match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_dml_event_clause2471); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_dml_event_clause2473);
			tableview_name();
			state._fsp--;

			// PLSQLPrinter.g:338:76: ( dml_event_nested_clause )?
			int alt84=2;
			int LA84_0 = input.LA(1);
			if ( (LA84_0==NESTED_VK) ) {
				alt84=1;
			}
			switch (alt84) {
				case 1 :
					// PLSQLPrinter.g:338:76: dml_event_nested_clause
					{
					pushFollow(FOLLOW_dml_event_nested_clause_in_dml_event_clause2475);
					dml_event_nested_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_event_clause"


	public static class dml_event_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_event_element"
	// PLSQLPrinter.g:341:1: dml_event_element : ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) ) ;
	public final PLSQLPrinter.dml_event_element_return dml_event_element() throws RecognitionException {
		PLSQLPrinter.dml_event_element_return retval = new PLSQLPrinter.dml_event_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:342:5: ( ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) ) )
			// PLSQLPrinter.g:342:10: ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) )
			{
			match(input,DML_EVENT_ELEMENT,FOLLOW_DML_EVENT_ELEMENT_in_dml_event_element2501); 
			match(input, Token.DOWN, null); 
			if ( input.LA(1)==SQL92_RESERVED_DELETE||input.LA(1)==SQL92_RESERVED_INSERT||input.LA(1)==SQL92_RESERVED_UPDATE ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input,COLUMNS,FOLLOW_COLUMNS_in_dml_event_element2512); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:342:108: ( column_name )*
				loop85:
				while (true) {
					int alt85=2;
					int LA85_0 = input.LA(1);
					if ( (LA85_0==COLUMN_NAME) ) {
						alt85=1;
					}

					switch (alt85) {
					case 1 :
						// PLSQLPrinter.g:342:108: column_name
						{
						pushFollow(FOLLOW_column_name_in_dml_event_element2514);
						column_name();
						state._fsp--;

						}
						break;

					default :
						break loop85;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_event_element"


	public static class dml_event_nested_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_event_nested_clause"
	// PLSQLPrinter.g:345:1: dml_event_nested_clause : ^( NESTED_VK tableview_name ) ;
	public final PLSQLPrinter.dml_event_nested_clause_return dml_event_nested_clause() throws RecognitionException {
		PLSQLPrinter.dml_event_nested_clause_return retval = new PLSQLPrinter.dml_event_nested_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:346:5: ( ^( NESTED_VK tableview_name ) )
			// PLSQLPrinter.g:346:10: ^( NESTED_VK tableview_name )
			{
			match(input,NESTED_VK,FOLLOW_NESTED_VK_in_dml_event_nested_clause2538); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_dml_event_nested_clause2540);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_event_nested_clause"


	public static class referencing_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "referencing_clause"
	// PLSQLPrinter.g:349:1: referencing_clause : ^( REFERENCING_VK ( referencing_element )+ ) ;
	public final PLSQLPrinter.referencing_clause_return referencing_clause() throws RecognitionException {
		PLSQLPrinter.referencing_clause_return retval = new PLSQLPrinter.referencing_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:350:5: ( ^( REFERENCING_VK ( referencing_element )+ ) )
			// PLSQLPrinter.g:350:10: ^( REFERENCING_VK ( referencing_element )+ )
			{
			match(input,REFERENCING_VK,FOLLOW_REFERENCING_VK_in_referencing_clause2562); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:350:27: ( referencing_element )+
			int cnt86=0;
			loop86:
			while (true) {
				int alt86=2;
				int LA86_0 = input.LA(1);
				if ( (LA86_0==NEW_VK||LA86_0==OLD_VK||LA86_0==PARENT_VK) ) {
					alt86=1;
				}

				switch (alt86) {
				case 1 :
					// PLSQLPrinter.g:350:27: referencing_element
					{
					pushFollow(FOLLOW_referencing_element_in_referencing_clause2564);
					referencing_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt86 >= 1 ) break loop86;
					EarlyExitException eee = new EarlyExitException(86, input);
					throw eee;
				}
				cnt86++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "referencing_clause"


	public static class referencing_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "referencing_element"
	// PLSQLPrinter.g:353:1: referencing_element : ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias ) ;
	public final PLSQLPrinter.referencing_element_return referencing_element() throws RecognitionException {
		PLSQLPrinter.referencing_element_return retval = new PLSQLPrinter.referencing_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:354:5: ( ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias ) )
			// PLSQLPrinter.g:354:10: ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias )
			{
			if ( input.LA(1)==NEW_VK||input.LA(1)==OLD_VK||input.LA(1)==PARENT_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_alias_in_referencing_element2595);
			alias();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "referencing_element"


	public static class drop_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_type"
	// PLSQLPrinter.g:362:1: drop_type : ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? ) ;
	public final PLSQLPrinter.drop_type_return drop_type() throws RecognitionException {
		PLSQLPrinter.drop_type_return retval = new PLSQLPrinter.drop_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:363:5: ( ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? ) )
			// PLSQLPrinter.g:363:10: ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? )
			{
			match(input,DROP_TYPE,FOLLOW_DROP_TYPE_in_drop_type2622); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_drop_type2624);
			type_name();
			state._fsp--;

			// PLSQLPrinter.g:363:32: ( BODY_VK )?
			int alt87=2;
			int LA87_0 = input.LA(1);
			if ( (LA87_0==BODY_VK) ) {
				alt87=1;
			}
			switch (alt87) {
				case 1 :
					// PLSQLPrinter.g:363:32: BODY_VK
					{
					match(input,BODY_VK,FOLLOW_BODY_VK_in_drop_type2626); 
					}
					break;

			}

			// PLSQLPrinter.g:363:41: ( FORCE_VK )?
			int alt88=2;
			int LA88_0 = input.LA(1);
			if ( (LA88_0==FORCE_VK) ) {
				alt88=1;
			}
			switch (alt88) {
				case 1 :
					// PLSQLPrinter.g:363:41: FORCE_VK
					{
					match(input,FORCE_VK,FOLLOW_FORCE_VK_in_drop_type2629); 
					}
					break;

			}

			// PLSQLPrinter.g:363:51: ( VALIDATE_VK )?
			int alt89=2;
			int LA89_0 = input.LA(1);
			if ( (LA89_0==VALIDATE_VK) ) {
				alt89=1;
			}
			switch (alt89) {
				case 1 :
					// PLSQLPrinter.g:363:51: VALIDATE_VK
					{
					match(input,VALIDATE_VK,FOLLOW_VALIDATE_VK_in_drop_type2632); 
					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_type"


	public static class alter_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_type"
	// PLSQLPrinter.g:366:1: alter_type : ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? ) ;
	public final PLSQLPrinter.alter_type_return alter_type() throws RecognitionException {
		PLSQLPrinter.alter_type_return retval = new PLSQLPrinter.alter_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:367:5: ( ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? ) )
			// PLSQLPrinter.g:367:10: ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? )
			{
			match(input,ALTER_TYPE,FOLLOW_ALTER_TYPE_in_alter_type2655); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_alter_type2657);
			type_name();
			state._fsp--;

			// PLSQLPrinter.g:368:13: ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
			int alt98=6;
			switch ( input.LA(1) ) {
			case REPLACE_VK:
				{
				alt98=1;
				}
				break;
			case ALTER_ATTRIBUTE:
				{
				alt98=2;
				}
				break;
			case ALTER_METHOD:
				{
				alt98=3;
				}
				break;
			case ALTER_COLLECTION:
				{
				alt98=4;
				}
				break;
			case MODIFIER:
				{
				alt98=5;
				}
				break;
			case COMPILE_VK:
				{
				alt98=6;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 98, 0, input);
				throw nvae;
			}
			switch (alt98) {
				case 1 :
					// PLSQLPrinter.g:368:18: ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? )
					{
					match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_alter_type2678); 
					match(input, Token.DOWN, null); 
					match(input,OBJECT_MEMBERS,FOLLOW_OBJECT_MEMBERS_in_alter_type2681); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:368:48: ( element_spec )+
					int cnt90=0;
					loop90:
					while (true) {
						int alt90=2;
						int LA90_0 = input.LA(1);
						if ( (LA90_0==ELEMENT_SPEC) ) {
							alt90=1;
						}

						switch (alt90) {
						case 1 :
							// PLSQLPrinter.g:368:48: element_spec
							{
							pushFollow(FOLLOW_element_spec_in_alter_type2683);
							element_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt90 >= 1 ) break loop90;
							EarlyExitException eee = new EarlyExitException(90, input);
							throw eee;
						}
						cnt90++;
					}

					match(input, Token.UP, null); 

					// PLSQLPrinter.g:368:63: ( invoker_rights_clause )?
					int alt91=2;
					int LA91_0 = input.LA(1);
					if ( (LA91_0==AUTHID_VK) ) {
						alt91=1;
					}
					switch (alt91) {
						case 1 :
							// PLSQLPrinter.g:368:63: invoker_rights_clause
							{
							pushFollow(FOLLOW_invoker_rights_clause_in_alter_type2687);
							invoker_rights_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:369:18: ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) )
					{
					match(input,ALTER_ATTRIBUTE,FOLLOW_ALTER_ATTRIBUTE_in_alter_type2709); 
					match(input, Token.DOWN, null); 
					if ( input.LA(1)==SQL92_RESERVED_DROP||input.LA(1)==ADD_VK||input.LA(1)==MODIFY_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input,ATTRIBUTES,FOLLOW_ATTRIBUTES_in_alter_type2720); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:369:88: ( attribute_definition )+
					int cnt92=0;
					loop92:
					while (true) {
						int alt92=2;
						int LA92_0 = input.LA(1);
						if ( (LA92_0==ATTRIBUTE) ) {
							alt92=1;
						}

						switch (alt92) {
						case 1 :
							// PLSQLPrinter.g:369:88: attribute_definition
							{
							pushFollow(FOLLOW_attribute_definition_in_alter_type2722);
							attribute_definition();
							state._fsp--;

							}
							break;

						default :
							if ( cnt92 >= 1 ) break loop92;
							EarlyExitException eee = new EarlyExitException(92, input);
							throw eee;
						}
						cnt92++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:370:18: ^( ALTER_METHOD ( alter_method_element )+ )
					{
					match(input,ALTER_METHOD,FOLLOW_ALTER_METHOD_in_alter_type2745); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:370:33: ( alter_method_element )+
					int cnt93=0;
					loop93:
					while (true) {
						int alt93=2;
						int LA93_0 = input.LA(1);
						if ( (LA93_0==ALTER_METHOD_ELEMENT) ) {
							alt93=1;
						}

						switch (alt93) {
						case 1 :
							// PLSQLPrinter.g:370:33: alter_method_element
							{
							pushFollow(FOLLOW_alter_method_element_in_alter_type2747);
							alter_method_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt93 >= 1 ) break loop93;
							EarlyExitException eee = new EarlyExitException(93, input);
							throw eee;
						}
						cnt93++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// PLSQLPrinter.g:371:18: alter_collection_clauses
					{
					pushFollow(FOLLOW_alter_collection_clauses_in_alter_type2768);
					alter_collection_clauses();
					state._fsp--;

					}
					break;
				case 5 :
					// PLSQLPrinter.g:372:18: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_alter_type2787);
					modifier_clause();
					state._fsp--;

					}
					break;
				case 6 :
					// PLSQLPrinter.g:373:18: ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
					{
					match(input,COMPILE_VK,FOLLOW_COMPILE_VK_in_alter_type2807); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:373:31: ( SPECIFICATION_VK | BODY_VK )?
						int alt94=2;
						int LA94_0 = input.LA(1);
						if ( (LA94_0==BODY_VK||LA94_0==SPECIFICATION_VK) ) {
							alt94=1;
						}
						switch (alt94) {
							case 1 :
								// PLSQLPrinter.g:
								{
								if ( input.LA(1)==BODY_VK||input.LA(1)==SPECIFICATION_VK ) {
									input.consume();
									state.errorRecovery=false;
								}
								else {
									MismatchedSetException mse = new MismatchedSetException(null,input);
									throw mse;
								}
								}
								break;

						}

						// PLSQLPrinter.g:373:59: ( DEBUG_VK )?
						int alt95=2;
						int LA95_0 = input.LA(1);
						if ( (LA95_0==DEBUG_VK) ) {
							alt95=1;
						}
						switch (alt95) {
							case 1 :
								// PLSQLPrinter.g:373:59: DEBUG_VK
								{
								match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_type2816); 
								}
								break;

						}

						// PLSQLPrinter.g:373:69: ( REUSE_VK )?
						int alt96=2;
						int LA96_0 = input.LA(1);
						if ( (LA96_0==REUSE_VK) ) {
							alt96=1;
						}
						switch (alt96) {
							case 1 :
								// PLSQLPrinter.g:373:69: REUSE_VK
								{
								match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_type2819); 
								}
								break;

						}

						// PLSQLPrinter.g:373:79: ( compiler_parameters_clause )*
						loop97:
						while (true) {
							int alt97=2;
							int LA97_0 = input.LA(1);
							if ( (LA97_0==COMPILER_PARAMETER) ) {
								alt97=1;
							}

							switch (alt97) {
							case 1 :
								// PLSQLPrinter.g:373:79: compiler_parameters_clause
								{
								pushFollow(FOLLOW_compiler_parameters_clause_in_alter_type2822);
								compiler_parameters_clause();
								state._fsp--;

								}
								break;

							default :
								break loop97;
							}
						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}

			// PLSQLPrinter.g:375:13: ( dependent_handling_clause )?
			int alt99=2;
			int LA99_0 = input.LA(1);
			if ( (LA99_0==DEPENDENT_HANDLING) ) {
				alt99=1;
			}
			switch (alt99) {
				case 1 :
					// PLSQLPrinter.g:375:13: dependent_handling_clause
					{
					pushFollow(FOLLOW_dependent_handling_clause_in_alter_type2853);
					dependent_handling_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_type"


	public static class alter_method_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_method_element"
	// PLSQLPrinter.g:381:1: alter_method_element : ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? ) ;
	public final PLSQLPrinter.alter_method_element_return alter_method_element() throws RecognitionException {
		PLSQLPrinter.alter_method_element_return retval = new PLSQLPrinter.alter_method_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:382:5: ( ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? ) )
			// PLSQLPrinter.g:382:10: ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? )
			{
			match(input,ALTER_METHOD_ELEMENT,FOLLOW_ALTER_METHOD_ELEMENT_in_alter_method_element2887); 
			match(input, Token.DOWN, null); 
			if ( input.LA(1)==SQL92_RESERVED_DROP||input.LA(1)==ADD_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// PLSQLPrinter.g:382:62: ( map_order_function_spec )?
			int alt100=2;
			int LA100_0 = input.LA(1);
			if ( (LA100_0==SQL92_RESERVED_ORDER||LA100_0==MAP_VK) ) {
				alt100=1;
			}
			switch (alt100) {
				case 1 :
					// PLSQLPrinter.g:382:62: map_order_function_spec
					{
					pushFollow(FOLLOW_map_order_function_spec_in_alter_method_element2895);
					map_order_function_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:382:87: ( subprogram_spec )?
			int alt101=2;
			int LA101_0 = input.LA(1);
			if ( (LA101_0==MEMBER_VK||LA101_0==STATIC_VK) ) {
				alt101=1;
			}
			switch (alt101) {
				case 1 :
					// PLSQLPrinter.g:382:87: subprogram_spec
					{
					pushFollow(FOLLOW_subprogram_spec_in_alter_method_element2898);
					subprogram_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_method_element"


	public static class attribute_definition_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "attribute_definition"
	// PLSQLPrinter.g:385:1: attribute_definition : ^( ATTRIBUTE attribute_name ( type_spec )? ) ;
	public final PLSQLPrinter.attribute_definition_return attribute_definition() throws RecognitionException {
		PLSQLPrinter.attribute_definition_return retval = new PLSQLPrinter.attribute_definition_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:386:5: ( ^( ATTRIBUTE attribute_name ( type_spec )? ) )
			// PLSQLPrinter.g:386:10: ^( ATTRIBUTE attribute_name ( type_spec )? )
			{
			match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_attribute_definition2921); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_attribute_name_in_attribute_definition2923);
			attribute_name();
			state._fsp--;

			// PLSQLPrinter.g:386:37: ( type_spec )?
			int alt102=2;
			int LA102_0 = input.LA(1);
			if ( (LA102_0==CUSTOM_TYPE||LA102_0==INTERVAL_DATATYPE||LA102_0==NATIVE_DATATYPE) ) {
				alt102=1;
			}
			switch (alt102) {
				case 1 :
					// PLSQLPrinter.g:386:37: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_attribute_definition2925);
					type_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "attribute_definition"


	public static class alter_collection_clauses_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_collection_clauses"
	// PLSQLPrinter.g:389:1: alter_collection_clauses : ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) ) ;
	public final PLSQLPrinter.alter_collection_clauses_return alter_collection_clauses() throws RecognitionException {
		PLSQLPrinter.alter_collection_clauses_return retval = new PLSQLPrinter.alter_collection_clauses_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:390:5: ( ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) ) )
			// PLSQLPrinter.g:390:10: ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) )
			{
			match(input,ALTER_COLLECTION,FOLLOW_ALTER_COLLECTION_in_alter_collection_clauses2948); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:391:13: ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) )
			int alt103=2;
			int LA103_0 = input.LA(1);
			if ( (LA103_0==TYPE_VK) ) {
				alt103=1;
			}
			else if ( (LA103_0==LIMIT_VK) ) {
				alt103=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 103, 0, input);
				throw nvae;
			}

			switch (alt103) {
				case 1 :
					// PLSQLPrinter.g:391:18: ^( TYPE_VK type_spec )
					{
					match(input,TYPE_VK,FOLLOW_TYPE_VK_in_alter_collection_clauses2969); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_type_spec_in_alter_collection_clauses2971);
					type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:392:18: ^( LIMIT_VK expression )
					{
					match(input,LIMIT_VK,FOLLOW_LIMIT_VK_in_alter_collection_clauses2992); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_alter_collection_clauses2994);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_collection_clauses"


	public static class dependent_handling_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dependent_handling_clause"
	// PLSQLPrinter.g:397:1: dependent_handling_clause : ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) ) ;
	public final PLSQLPrinter.dependent_handling_clause_return dependent_handling_clause() throws RecognitionException {
		PLSQLPrinter.dependent_handling_clause_return retval = new PLSQLPrinter.dependent_handling_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:398:5: ( ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) ) )
			// PLSQLPrinter.g:398:10: ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) )
			{
			match(input,DEPENDENT_HANDLING,FOLLOW_DEPENDENT_HANDLING_in_dependent_handling_clause3041); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:399:13: ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) )
			int alt106=2;
			int LA106_0 = input.LA(1);
			if ( (LA106_0==INVALIDATE_VK) ) {
				alt106=1;
			}
			else if ( (LA106_0==CASCADE_VK) ) {
				alt106=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 106, 0, input);
				throw nvae;
			}

			switch (alt106) {
				case 1 :
					// PLSQLPrinter.g:399:18: INVALIDATE_VK
					{
					match(input,INVALIDATE_VK,FOLLOW_INVALIDATE_VK_in_dependent_handling_clause3061); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:400:18: ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? )
					{
					match(input,CASCADE_VK,FOLLOW_CASCADE_VK_in_dependent_handling_clause3081); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:401:21: ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )?
						int alt105=3;
						int LA105_0 = input.LA(1);
						if ( (LA105_0==CONVERT_VK) ) {
							alt105=1;
						}
						else if ( (LA105_0==SQL92_RESERVED_NOT||LA105_0==INCLUDING_VK) ) {
							alt105=2;
						}
						switch (alt105) {
							case 1 :
								// PLSQLPrinter.g:401:26: CONVERT_VK
								{
								match(input,CONVERT_VK,FOLLOW_CONVERT_VK_in_dependent_handling_clause3109); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:402:26: ( SQL92_RESERVED_NOT )? INCLUDING_VK
								{
								// PLSQLPrinter.g:402:26: ( SQL92_RESERVED_NOT )?
								int alt104=2;
								int LA104_0 = input.LA(1);
								if ( (LA104_0==SQL92_RESERVED_NOT) ) {
									alt104=1;
								}
								switch (alt104) {
									case 1 :
										// PLSQLPrinter.g:402:26: SQL92_RESERVED_NOT
										{
										match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_dependent_handling_clause3136); 
										}
										break;

								}

								match(input,INCLUDING_VK,FOLLOW_INCLUDING_VK_in_dependent_handling_clause3139); 
								}
								break;

						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dependent_handling_clause"


	public static class dependent_exceptions_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dependent_exceptions_part"
	// PLSQLPrinter.g:409:1: dependent_exceptions_part : ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name ) ;
	public final PLSQLPrinter.dependent_exceptions_part_return dependent_exceptions_part() throws RecognitionException {
		PLSQLPrinter.dependent_exceptions_part_return retval = new PLSQLPrinter.dependent_exceptions_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:410:5: ( ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name ) )
			// PLSQLPrinter.g:410:10: ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name )
			{
			match(input,EXCEPTIONS_VK,FOLLOW_EXCEPTIONS_VK_in_dependent_exceptions_part3225); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:410:26: ( FORCE_VK )?
			int alt107=2;
			int LA107_0 = input.LA(1);
			if ( (LA107_0==FORCE_VK) ) {
				alt107=1;
			}
			switch (alt107) {
				case 1 :
					// PLSQLPrinter.g:410:26: FORCE_VK
					{
					match(input,FORCE_VK,FOLLOW_FORCE_VK_in_dependent_exceptions_part3227); 
					}
					break;

			}

			pushFollow(FOLLOW_tableview_name_in_dependent_exceptions_part3230);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dependent_exceptions_part"


	public static class create_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_type"
	// PLSQLPrinter.g:415:1: create_type : ( ^( CREATE_TYPE_BODY ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) ) | ^( CREATE_TYPE_SPEC ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? ) );
	public final PLSQLPrinter.create_type_return create_type() throws RecognitionException {
		PLSQLPrinter.create_type_return retval = new PLSQLPrinter.create_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:416:5: ( ^( CREATE_TYPE_BODY ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) ) | ^( CREATE_TYPE_SPEC ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? ) )
			int alt113=2;
			int LA113_0 = input.LA(1);
			if ( (LA113_0==CREATE_TYPE_BODY) ) {
				alt113=1;
			}
			else if ( (LA113_0==CREATE_TYPE_SPEC) ) {
				alt113=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 113, 0, input);
				throw nvae;
			}

			switch (alt113) {
				case 1 :
					// PLSQLPrinter.g:416:10: ^( CREATE_TYPE_BODY ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) )
					{
					match(input,CREATE_TYPE_BODY,FOLLOW_CREATE_TYPE_BODY_in_create_type3254); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:416:29: ( REPLACE_VK )?
					int alt108=2;
					int LA108_0 = input.LA(1);
					if ( (LA108_0==REPLACE_VK) ) {
						alt108=1;
					}
					switch (alt108) {
						case 1 :
							// PLSQLPrinter.g:416:29: REPLACE_VK
							{
							match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_type3256); 
							}
							break;

					}

					pushFollow(FOLLOW_type_name_in_create_type3259);
					type_name();
					state._fsp--;

					match(input,TYPE_BODY_ELEMENTS,FOLLOW_TYPE_BODY_ELEMENTS_in_create_type3262); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:416:72: ( type_body_elements )+
					int cnt109=0;
					loop109:
					while (true) {
						int alt109=2;
						int LA109_0 = input.LA(1);
						if ( (LA109_0==SQL92_RESERVED_ORDER||LA109_0==MAP_VK||LA109_0==MEMBER_VK||LA109_0==STATIC_VK) ) {
							alt109=1;
						}

						switch (alt109) {
						case 1 :
							// PLSQLPrinter.g:416:72: type_body_elements
							{
							pushFollow(FOLLOW_type_body_elements_in_create_type3264);
							type_body_elements();
							state._fsp--;

							}
							break;

						default :
							if ( cnt109 >= 1 ) break loop109;
							EarlyExitException eee = new EarlyExitException(109, input);
							throw eee;
						}
						cnt109++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:417:10: ^( CREATE_TYPE_SPEC ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? )
					{
					match(input,CREATE_TYPE_SPEC,FOLLOW_CREATE_TYPE_SPEC_in_create_type3279); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:417:29: ( REPLACE_VK )?
					int alt110=2;
					int LA110_0 = input.LA(1);
					if ( (LA110_0==REPLACE_VK) ) {
						alt110=1;
					}
					switch (alt110) {
						case 1 :
							// PLSQLPrinter.g:417:29: REPLACE_VK
							{
							match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_type3281); 
							}
							break;

					}

					pushFollow(FOLLOW_type_name_in_create_type3284);
					type_name();
					state._fsp--;

					// PLSQLPrinter.g:417:51: ( CHAR_STRING )?
					int alt111=2;
					int LA111_0 = input.LA(1);
					if ( (LA111_0==CHAR_STRING) ) {
						alt111=1;
					}
					switch (alt111) {
						case 1 :
							// PLSQLPrinter.g:417:51: CHAR_STRING
							{
							match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_create_type3286); 
							}
							break;

					}

					// PLSQLPrinter.g:417:64: ( object_type_def )?
					int alt112=2;
					int LA112_0 = input.LA(1);
					if ( (LA112_0==OBJECT_TYPE_DEF) ) {
						alt112=1;
					}
					switch (alt112) {
						case 1 :
							// PLSQLPrinter.g:417:64: object_type_def
							{
							pushFollow(FOLLOW_object_type_def_in_create_type3289);
							object_type_def();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_type"


	public static class object_type_def_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "object_type_def"
	// PLSQLPrinter.g:420:1: object_type_def : ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) ) ;
	public final PLSQLPrinter.object_type_def_return object_type_def() throws RecognitionException {
		PLSQLPrinter.object_type_def_return retval = new PLSQLPrinter.object_type_def_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:421:5: ( ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) ) )
			// PLSQLPrinter.g:421:10: ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) )
			{
			match(input,OBJECT_TYPE_DEF,FOLLOW_OBJECT_TYPE_DEF_in_object_type_def3312); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:421:28: ( object_as_part | object_under_part )
			int alt114=2;
			int LA114_0 = input.LA(1);
			if ( (LA114_0==OBJECT_AS) ) {
				alt114=1;
			}
			else if ( (LA114_0==UNDER_VK) ) {
				alt114=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 114, 0, input);
				throw nvae;
			}

			switch (alt114) {
				case 1 :
					// PLSQLPrinter.g:421:29: object_as_part
					{
					pushFollow(FOLLOW_object_as_part_in_object_type_def3315);
					object_as_part();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:421:44: object_under_part
					{
					pushFollow(FOLLOW_object_under_part_in_object_type_def3317);
					object_under_part();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:421:63: ( invoker_rights_clause )?
			int alt115=2;
			int LA115_0 = input.LA(1);
			if ( (LA115_0==AUTHID_VK) ) {
				alt115=1;
			}
			switch (alt115) {
				case 1 :
					// PLSQLPrinter.g:421:63: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_object_type_def3320);
					invoker_rights_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:422:14: ( sqlj_object_type )?
			int alt116=2;
			int LA116_0 = input.LA(1);
			if ( (LA116_0==JAVA_VK) ) {
				alt116=1;
			}
			switch (alt116) {
				case 1 :
					// PLSQLPrinter.g:422:14: sqlj_object_type
					{
					pushFollow(FOLLOW_sqlj_object_type_in_object_type_def3336);
					sqlj_object_type();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:422:32: ( modifier_clause )*
			loop117:
			while (true) {
				int alt117=2;
				int LA117_0 = input.LA(1);
				if ( (LA117_0==MODIFIER) ) {
					alt117=1;
				}

				switch (alt117) {
				case 1 :
					// PLSQLPrinter.g:422:32: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_object_type_def3339);
					modifier_clause();
					state._fsp--;

					}
					break;

				default :
					break loop117;
				}
			}

			match(input,OBJECT_MEMBERS,FOLLOW_OBJECT_MEMBERS_in_object_type_def3343); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:422:66: ( element_spec )*
				loop118:
				while (true) {
					int alt118=2;
					int LA118_0 = input.LA(1);
					if ( (LA118_0==ELEMENT_SPEC) ) {
						alt118=1;
					}

					switch (alt118) {
					case 1 :
						// PLSQLPrinter.g:422:66: element_spec
						{
						pushFollow(FOLLOW_element_spec_in_object_type_def3345);
						element_spec();
						state._fsp--;

						}
						break;

					default :
						break loop118;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_type_def"


	public static class object_as_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "object_as_part"
	// PLSQLPrinter.g:425:1: object_as_part : ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) ) ;
	public final PLSQLPrinter.object_as_part_return object_as_part() throws RecognitionException {
		PLSQLPrinter.object_as_part_return retval = new PLSQLPrinter.object_as_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:426:5: ( ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) ) )
			// PLSQLPrinter.g:426:10: ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) )
			{
			match(input,OBJECT_AS,FOLLOW_OBJECT_AS_in_object_as_part3371); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:426:22: ( OBJECT_VK | varray_type_def | nested_table_type_def )
			int alt119=3;
			switch ( input.LA(1) ) {
			case OBJECT_VK:
				{
				alt119=1;
				}
				break;
			case SQL92_RESERVED_NULL:
			case VARR_ARRAY_DEF:
				{
				alt119=2;
				}
				break;
			case NESTED_TABLE_TYPE_DEF:
				{
				alt119=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 119, 0, input);
				throw nvae;
			}
			switch (alt119) {
				case 1 :
					// PLSQLPrinter.g:426:23: OBJECT_VK
					{
					match(input,OBJECT_VK,FOLLOW_OBJECT_VK_in_object_as_part3374); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:426:33: varray_type_def
					{
					pushFollow(FOLLOW_varray_type_def_in_object_as_part3376);
					varray_type_def();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:426:49: nested_table_type_def
					{
					pushFollow(FOLLOW_nested_table_type_def_in_object_as_part3378);
					nested_table_type_def();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_as_part"


	public static class object_under_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "object_under_part"
	// PLSQLPrinter.g:429:1: object_under_part : ^( UNDER_VK type_spec ) ;
	public final PLSQLPrinter.object_under_part_return object_under_part() throws RecognitionException {
		PLSQLPrinter.object_under_part_return retval = new PLSQLPrinter.object_under_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:430:5: ( ^( UNDER_VK type_spec ) )
			// PLSQLPrinter.g:430:10: ^( UNDER_VK type_spec )
			{
			match(input,UNDER_VK,FOLLOW_UNDER_VK_in_object_under_part3401); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_object_under_part3403);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_under_part"


	public static class nested_table_type_def_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "nested_table_type_def"
	// PLSQLPrinter.g:433:1: nested_table_type_def : ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ( table_indexed_by_part )? ) ;
	public final PLSQLPrinter.nested_table_type_def_return nested_table_type_def() throws RecognitionException {
		PLSQLPrinter.nested_table_type_def_return retval = new PLSQLPrinter.nested_table_type_def_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:434:5: ( ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ( table_indexed_by_part )? ) )
			// PLSQLPrinter.g:434:10: ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ( table_indexed_by_part )? )
			{
			match(input,NESTED_TABLE_TYPE_DEF,FOLLOW_NESTED_TABLE_TYPE_DEF_in_nested_table_type_def3425); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_nested_table_type_def3427);
			type_spec();
			state._fsp--;

			// PLSQLPrinter.g:434:44: ( SQL92_RESERVED_NULL )?
			int alt120=2;
			int LA120_0 = input.LA(1);
			if ( (LA120_0==SQL92_RESERVED_NULL) ) {
				alt120=1;
			}
			switch (alt120) {
				case 1 :
					// PLSQLPrinter.g:434:44: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_nested_table_type_def3429); 
					}
					break;

			}

			// PLSQLPrinter.g:434:65: ( table_indexed_by_part )?
			int alt121=2;
			int LA121_0 = input.LA(1);
			if ( (LA121_0==INDEXED_BY) ) {
				alt121=1;
			}
			switch (alt121) {
				case 1 :
					// PLSQLPrinter.g:434:65: table_indexed_by_part
					{
					pushFollow(FOLLOW_table_indexed_by_part_in_nested_table_type_def3432);
					table_indexed_by_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "nested_table_type_def"


	public static class sqlj_object_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sqlj_object_type"
	// PLSQLPrinter.g:437:1: sqlj_object_type : ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) ) ;
	public final PLSQLPrinter.sqlj_object_type_return sqlj_object_type() throws RecognitionException {
		PLSQLPrinter.sqlj_object_type_return retval = new PLSQLPrinter.sqlj_object_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:438:5: ( ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) ) )
			// PLSQLPrinter.g:438:10: ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) )
			{
			match(input,JAVA_VK,FOLLOW_JAVA_VK_in_sqlj_object_type3455); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_sqlj_object_type3457);
			expression();
			state._fsp--;

			if ( input.LA(1)==CUSTOMDATUM_VK||input.LA(1)==ORADATA_VK||input.LA(1)==SQLDATA_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sqlj_object_type"


	public static class type_body_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_body_elements"
	// PLSQLPrinter.g:441:1: type_body_elements : ( map_order_func_declaration | subprog_decl_in_type );
	public final PLSQLPrinter.type_body_elements_return type_body_elements() throws RecognitionException {
		PLSQLPrinter.type_body_elements_return retval = new PLSQLPrinter.type_body_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:442:5: ( map_order_func_declaration | subprog_decl_in_type )
			int alt122=2;
			int LA122_0 = input.LA(1);
			if ( (LA122_0==SQL92_RESERVED_ORDER||LA122_0==MAP_VK) ) {
				alt122=1;
			}
			else if ( (LA122_0==MEMBER_VK||LA122_0==STATIC_VK) ) {
				alt122=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 122, 0, input);
				throw nvae;
			}

			switch (alt122) {
				case 1 :
					// PLSQLPrinter.g:442:10: map_order_func_declaration
					{
					pushFollow(FOLLOW_map_order_func_declaration_in_type_body_elements3486);
					map_order_func_declaration();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:443:10: subprog_decl_in_type
					{
					pushFollow(FOLLOW_subprog_decl_in_type_in_type_body_elements3497);
					subprog_decl_in_type();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_body_elements"


	public static class map_order_func_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "map_order_func_declaration"
	// PLSQLPrinter.g:446:1: map_order_func_declaration : ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body ) ;
	public final PLSQLPrinter.map_order_func_declaration_return map_order_func_declaration() throws RecognitionException {
		PLSQLPrinter.map_order_func_declaration_return retval = new PLSQLPrinter.map_order_func_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:447:5: ( ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body ) )
			// PLSQLPrinter.g:447:10: ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body )
			{
			if ( input.LA(1)==SQL92_RESERVED_ORDER||input.LA(1)==MAP_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_create_function_body_in_map_order_func_declaration3524);
			create_function_body();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "map_order_func_declaration"


	public static class subprog_decl_in_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subprog_decl_in_type"
	// PLSQLPrinter.g:450:1: subprog_decl_in_type : ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) ) ;
	public final PLSQLPrinter.subprog_decl_in_type_return subprog_decl_in_type() throws RecognitionException {
		PLSQLPrinter.subprog_decl_in_type_return retval = new PLSQLPrinter.subprog_decl_in_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:451:5: ( ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) ) )
			// PLSQLPrinter.g:451:10: ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) )
			{
			if ( input.LA(1)==MEMBER_VK||input.LA(1)==STATIC_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:452:13: ( create_procedure_body | create_function_body | constructor_declaration )
			int alt123=3;
			switch ( input.LA(1) ) {
			case CREATE_PROCEDURE:
				{
				alt123=1;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt123=2;
				}
				break;
			case CONSTRUCTOR_VK:
				{
				alt123=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 123, 0, input);
				throw nvae;
			}
			switch (alt123) {
				case 1 :
					// PLSQLPrinter.g:452:18: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_subprog_decl_in_type3569);
					create_procedure_body();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:453:18: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_subprog_decl_in_type3588);
					create_function_body();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:454:18: constructor_declaration
					{
					pushFollow(FOLLOW_constructor_declaration_in_subprog_decl_in_type3607);
					constructor_declaration();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subprog_decl_in_type"


	public static class constructor_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constructor_declaration"
	// PLSQLPrinter.g:459:1: constructor_declaration : ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) ) ) ;
	public final PLSQLPrinter.constructor_declaration_return constructor_declaration() throws RecognitionException {
		PLSQLPrinter.constructor_declaration_return retval = new PLSQLPrinter.constructor_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:460:5: ( ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) ) ) )
			// PLSQLPrinter.g:460:10: ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) ) )
			{
			match(input,CONSTRUCTOR_VK,FOLLOW_CONSTRUCTOR_VK_in_constructor_declaration3652); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_constructor_declaration3654);
			type_spec();
			state._fsp--;

			// PLSQLPrinter.g:460:37: ( FINAL_VK )?
			int alt124=2;
			int LA124_0 = input.LA(1);
			if ( (LA124_0==FINAL_VK) ) {
				alt124=1;
			}
			switch (alt124) {
				case 1 :
					// PLSQLPrinter.g:460:37: FINAL_VK
					{
					match(input,FINAL_VK,FOLLOW_FINAL_VK_in_constructor_declaration3656); 
					}
					break;

			}

			// PLSQLPrinter.g:460:47: ( INSTANTIABLE_VK )?
			int alt125=2;
			int LA125_0 = input.LA(1);
			if ( (LA125_0==INSTANTIABLE_VK) ) {
				alt125=1;
			}
			switch (alt125) {
				case 1 :
					// PLSQLPrinter.g:460:47: INSTANTIABLE_VK
					{
					match(input,INSTANTIABLE_VK,FOLLOW_INSTANTIABLE_VK_in_constructor_declaration3659); 
					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_constructor_declaration3663); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:460:77: ( type_elements_parameter )*
				loop126:
				while (true) {
					int alt126=2;
					int LA126_0 = input.LA(1);
					if ( (LA126_0==PARAMETER) ) {
						alt126=1;
					}

					switch (alt126) {
					case 1 :
						// PLSQLPrinter.g:460:77: type_elements_parameter
						{
						pushFollow(FOLLOW_type_elements_parameter_in_constructor_declaration3665);
						type_elements_parameter();
						state._fsp--;

						}
						break;

					default :
						break loop126;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:461:13: ( ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) )
			int alt128=2;
			int LA128_0 = input.LA(1);
			if ( (LA128_0==CALL_MODE) ) {
				alt128=1;
			}
			else if ( (LA128_0==BODY_MODE) ) {
				alt128=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 128, 0, input);
				throw nvae;
			}

			switch (alt128) {
				case 1 :
					// PLSQLPrinter.g:461:18: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_constructor_declaration3688); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_constructor_declaration3690);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:462:18: ^( BODY_MODE ( declare_spec )* body )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_constructor_declaration3711); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:462:30: ( declare_spec )*
					loop127:
					while (true) {
						int alt127=2;
						int LA127_0 = input.LA(1);
						if ( (LA127_0==CREATE_FUNCTION||LA127_0==CREATE_PROCEDURE||LA127_0==CURSOR_DECLARE||LA127_0==EXCEPTION_DECLARE||LA127_0==PRAGMA_DECLARE||(LA127_0 >= RECORD_TYPE_DECLARE && LA127_0 <= RECORD_VAR_DECLARE)||LA127_0==SUBTYPE_DECLARE||(LA127_0 >= TABLE_TYPE_DECLARE && LA127_0 <= TABLE_VAR_DECLARE)||LA127_0==VARIABLE_DECLARE) ) {
							alt127=1;
						}

						switch (alt127) {
						case 1 :
							// PLSQLPrinter.g:462:30: declare_spec
							{
							pushFollow(FOLLOW_declare_spec_in_constructor_declaration3713);
							declare_spec();
							state._fsp--;

							}
							break;

						default :
							break loop127;
						}
					}

					pushFollow(FOLLOW_body_in_constructor_declaration3716);
					body();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constructor_declaration"


	public static class modifier_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "modifier_clause"
	// PLSQLPrinter.g:471:1: modifier_clause : ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) ) ;
	public final PLSQLPrinter.modifier_clause_return modifier_clause() throws RecognitionException {
		PLSQLPrinter.modifier_clause_return retval = new PLSQLPrinter.modifier_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:472:5: ( ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) ) )
			// PLSQLPrinter.g:472:10: ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) )
			{
			match(input,MODIFIER,FOLLOW_MODIFIER_in_modifier_clause3766); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:472:21: ( SQL92_RESERVED_NOT )?
			int alt129=2;
			int LA129_0 = input.LA(1);
			if ( (LA129_0==SQL92_RESERVED_NOT) ) {
				alt129=1;
			}
			switch (alt129) {
				case 1 :
					// PLSQLPrinter.g:472:21: SQL92_RESERVED_NOT
					{
					match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_modifier_clause3768); 
					}
					break;

			}

			if ( input.LA(1)==FINAL_VK||input.LA(1)==INSTANTIABLE_VK||input.LA(1)==OVERRIDING_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "modifier_clause"


	public static class sqlj_object_type_attr_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sqlj_object_type_attr"
	// PLSQLPrinter.g:475:1: sqlj_object_type_attr : ^( EXTERNAL_VK expression ) ;
	public final PLSQLPrinter.sqlj_object_type_attr_return sqlj_object_type_attr() throws RecognitionException {
		PLSQLPrinter.sqlj_object_type_attr_return retval = new PLSQLPrinter.sqlj_object_type_attr_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:476:5: ( ^( EXTERNAL_VK expression ) )
			// PLSQLPrinter.g:476:10: ^( EXTERNAL_VK expression )
			{
			match(input,EXTERNAL_VK,FOLLOW_EXTERNAL_VK_in_sqlj_object_type_attr3799); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_sqlj_object_type_attr3801);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sqlj_object_type_attr"


	public static class element_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "element_spec"
	// PLSQLPrinter.g:479:1: element_spec : ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? ) ;
	public final PLSQLPrinter.element_spec_return element_spec() throws RecognitionException {
		PLSQLPrinter.element_spec_return retval = new PLSQLPrinter.element_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:480:5: ( ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? ) )
			// PLSQLPrinter.g:480:10: ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? )
			{
			match(input,ELEMENT_SPEC,FOLLOW_ELEMENT_SPEC_in_element_spec3823); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:480:25: ( element_spec_options )+
			int cnt130=0;
			loop130:
			while (true) {
				int alt130=2;
				int LA130_0 = input.LA(1);
				if ( (LA130_0==SQL92_RESERVED_ORDER||LA130_0==CONSTRUCTOR_SPEC||LA130_0==FIELD_SPEC||LA130_0==MAP_VK||LA130_0==MEMBER_VK||LA130_0==STATIC_VK) ) {
					alt130=1;
				}

				switch (alt130) {
				case 1 :
					// PLSQLPrinter.g:480:25: element_spec_options
					{
					pushFollow(FOLLOW_element_spec_options_in_element_spec3825);
					element_spec_options();
					state._fsp--;

					}
					break;

				default :
					if ( cnt130 >= 1 ) break loop130;
					EarlyExitException eee = new EarlyExitException(130, input);
					throw eee;
				}
				cnt130++;
			}

			// PLSQLPrinter.g:480:47: ( modifier_clause )?
			int alt131=2;
			int LA131_0 = input.LA(1);
			if ( (LA131_0==MODIFIER) ) {
				alt131=1;
			}
			switch (alt131) {
				case 1 :
					// PLSQLPrinter.g:480:47: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_element_spec3828);
					modifier_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:480:64: ( pragma_clause )?
			int alt132=2;
			int LA132_0 = input.LA(1);
			if ( (LA132_0==PRAGMA_VK) ) {
				alt132=1;
			}
			switch (alt132) {
				case 1 :
					// PLSQLPrinter.g:480:64: pragma_clause
					{
					pushFollow(FOLLOW_pragma_clause_in_element_spec3831);
					pragma_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "element_spec"


	public static class element_spec_options_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "element_spec_options"
	// PLSQLPrinter.g:483:1: element_spec_options : ( subprogram_spec | constructor_spec | map_order_function_spec | ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) );
	public final PLSQLPrinter.element_spec_options_return element_spec_options() throws RecognitionException {
		PLSQLPrinter.element_spec_options_return retval = new PLSQLPrinter.element_spec_options_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:484:5: ( subprogram_spec | constructor_spec | map_order_function_spec | ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) )
			int alt134=4;
			switch ( input.LA(1) ) {
			case MEMBER_VK:
			case STATIC_VK:
				{
				alt134=1;
				}
				break;
			case CONSTRUCTOR_SPEC:
				{
				alt134=2;
				}
				break;
			case SQL92_RESERVED_ORDER:
			case MAP_VK:
				{
				alt134=3;
				}
				break;
			case FIELD_SPEC:
				{
				alt134=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 134, 0, input);
				throw nvae;
			}
			switch (alt134) {
				case 1 :
					// PLSQLPrinter.g:484:10: subprogram_spec
					{
					pushFollow(FOLLOW_subprogram_spec_in_element_spec_options3853);
					subprogram_spec();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:485:10: constructor_spec
					{
					pushFollow(FOLLOW_constructor_spec_in_element_spec_options3864);
					constructor_spec();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:486:10: map_order_function_spec
					{
					pushFollow(FOLLOW_map_order_function_spec_in_element_spec_options3875);
					map_order_function_spec();
					state._fsp--;

					}
					break;
				case 4 :
					// PLSQLPrinter.g:487:10: ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? )
					{
					match(input,FIELD_SPEC,FOLLOW_FIELD_SPEC_in_element_spec_options3887); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_id_in_element_spec_options3889);
					id();
					state._fsp--;

					pushFollow(FOLLOW_type_spec_in_element_spec_options3891);
					type_spec();
					state._fsp--;

					// PLSQLPrinter.g:487:36: ( sqlj_object_type_attr )?
					int alt133=2;
					int LA133_0 = input.LA(1);
					if ( (LA133_0==EXTERNAL_VK) ) {
						alt133=1;
					}
					switch (alt133) {
						case 1 :
							// PLSQLPrinter.g:487:36: sqlj_object_type_attr
							{
							pushFollow(FOLLOW_sqlj_object_type_attr_in_element_spec_options3893);
							sqlj_object_type_attr();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "element_spec_options"


	public static class subprogram_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subprogram_spec"
	// PLSQLPrinter.g:490:1: subprogram_spec : ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) ) ;
	public final PLSQLPrinter.subprogram_spec_return subprogram_spec() throws RecognitionException {
		PLSQLPrinter.subprogram_spec_return retval = new PLSQLPrinter.subprogram_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:491:5: ( ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) ) )
			// PLSQLPrinter.g:491:10: ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) )
			{
			if ( input.LA(1)==MEMBER_VK||input.LA(1)==STATIC_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:492:13: ( procedure_spec | function_spec )
			int alt135=2;
			int LA135_0 = input.LA(1);
			if ( (LA135_0==PROCEDURE_SPEC) ) {
				alt135=1;
			}
			else if ( (LA135_0==FUNCTION_SPEC) ) {
				alt135=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 135, 0, input);
				throw nvae;
			}

			switch (alt135) {
				case 1 :
					// PLSQLPrinter.g:492:18: procedure_spec
					{
					pushFollow(FOLLOW_procedure_spec_in_subprogram_spec3939);
					procedure_spec();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:493:18: function_spec
					{
					pushFollow(FOLLOW_function_spec_in_subprogram_spec3958);
					function_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subprogram_spec"


	public static class constructor_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constructor_spec"
	// PLSQLPrinter.g:498:1: constructor_spec : ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? ) ;
	public final PLSQLPrinter.constructor_spec_return constructor_spec() throws RecognitionException {
		PLSQLPrinter.constructor_spec_return retval = new PLSQLPrinter.constructor_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:499:5: ( ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? ) )
			// PLSQLPrinter.g:499:10: ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? )
			{
			match(input,CONSTRUCTOR_SPEC,FOLLOW_CONSTRUCTOR_SPEC_in_constructor_spec4003); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_constructor_spec4005);
			type_spec();
			state._fsp--;

			// PLSQLPrinter.g:499:39: ( FINAL_VK )?
			int alt136=2;
			int LA136_0 = input.LA(1);
			if ( (LA136_0==FINAL_VK) ) {
				alt136=1;
			}
			switch (alt136) {
				case 1 :
					// PLSQLPrinter.g:499:39: FINAL_VK
					{
					match(input,FINAL_VK,FOLLOW_FINAL_VK_in_constructor_spec4007); 
					}
					break;

			}

			// PLSQLPrinter.g:499:49: ( INSTANTIABLE_VK )?
			int alt137=2;
			int LA137_0 = input.LA(1);
			if ( (LA137_0==INSTANTIABLE_VK) ) {
				alt137=1;
			}
			switch (alt137) {
				case 1 :
					// PLSQLPrinter.g:499:49: INSTANTIABLE_VK
					{
					match(input,INSTANTIABLE_VK,FOLLOW_INSTANTIABLE_VK_in_constructor_spec4010); 
					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_constructor_spec4014); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:499:79: ( type_elements_parameter )*
				loop138:
				while (true) {
					int alt138=2;
					int LA138_0 = input.LA(1);
					if ( (LA138_0==PARAMETER) ) {
						alt138=1;
					}

					switch (alt138) {
					case 1 :
						// PLSQLPrinter.g:499:79: type_elements_parameter
						{
						pushFollow(FOLLOW_type_elements_parameter_in_constructor_spec4016);
						type_elements_parameter();
						state._fsp--;

						}
						break;

					default :
						break loop138;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:499:105: ( constructor_call_mode )?
			int alt139=2;
			int LA139_0 = input.LA(1);
			if ( (LA139_0==CALL_MODE) ) {
				alt139=1;
			}
			switch (alt139) {
				case 1 :
					// PLSQLPrinter.g:499:105: constructor_call_mode
					{
					pushFollow(FOLLOW_constructor_call_mode_in_constructor_spec4020);
					constructor_call_mode();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constructor_spec"


	public static class constructor_call_mode_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constructor_call_mode"
	// PLSQLPrinter.g:502:1: constructor_call_mode : ^( CALL_MODE call_spec ) ;
	public final PLSQLPrinter.constructor_call_mode_return constructor_call_mode() throws RecognitionException {
		PLSQLPrinter.constructor_call_mode_return retval = new PLSQLPrinter.constructor_call_mode_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:503:5: ( ^( CALL_MODE call_spec ) )
			// PLSQLPrinter.g:503:10: ^( CALL_MODE call_spec )
			{
			match(input,CALL_MODE,FOLLOW_CALL_MODE_in_constructor_call_mode4043); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_call_spec_in_constructor_call_mode4045);
			call_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constructor_call_mode"


	public static class map_order_function_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "map_order_function_spec"
	// PLSQLPrinter.g:506:1: map_order_function_spec : ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec ) ;
	public final PLSQLPrinter.map_order_function_spec_return map_order_function_spec() throws RecognitionException {
		PLSQLPrinter.map_order_function_spec_return retval = new PLSQLPrinter.map_order_function_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:507:5: ( ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec ) )
			// PLSQLPrinter.g:507:10: ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec )
			{
			if ( input.LA(1)==SQL92_RESERVED_ORDER||input.LA(1)==MAP_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_spec_in_map_order_function_spec4073);
			function_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "map_order_function_spec"


	public static class pragma_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_clause"
	// PLSQLPrinter.g:510:1: pragma_clause : ^( PRAGMA_VK ( pragma_elements )+ ) ;
	public final PLSQLPrinter.pragma_clause_return pragma_clause() throws RecognitionException {
		PLSQLPrinter.pragma_clause_return retval = new PLSQLPrinter.pragma_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:511:5: ( ^( PRAGMA_VK ( pragma_elements )+ ) )
			// PLSQLPrinter.g:511:10: ^( PRAGMA_VK ( pragma_elements )+ )
			{
			match(input,PRAGMA_VK,FOLLOW_PRAGMA_VK_in_pragma_clause4095); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:511:22: ( pragma_elements )+
			int cnt140=0;
			loop140:
			while (true) {
				int alt140=2;
				int LA140_0 = input.LA(1);
				if ( (LA140_0==SQL92_RESERVED_DEFAULT||LA140_0==CHAR_SET_NAME||LA140_0==ID) ) {
					alt140=1;
				}

				switch (alt140) {
				case 1 :
					// PLSQLPrinter.g:511:22: pragma_elements
					{
					pushFollow(FOLLOW_pragma_elements_in_pragma_clause4097);
					pragma_elements();
					state._fsp--;

					}
					break;

				default :
					if ( cnt140 >= 1 ) break loop140;
					EarlyExitException eee = new EarlyExitException(140, input);
					throw eee;
				}
				cnt140++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_clause"


	public static class pragma_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_elements"
	// PLSQLPrinter.g:514:1: pragma_elements : ( id | SQL92_RESERVED_DEFAULT );
	public final PLSQLPrinter.pragma_elements_return pragma_elements() throws RecognitionException {
		PLSQLPrinter.pragma_elements_return retval = new PLSQLPrinter.pragma_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:515:5: ( id | SQL92_RESERVED_DEFAULT )
			int alt141=2;
			int LA141_0 = input.LA(1);
			if ( (LA141_0==CHAR_SET_NAME||LA141_0==ID) ) {
				alt141=1;
			}
			else if ( (LA141_0==SQL92_RESERVED_DEFAULT) ) {
				alt141=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 141, 0, input);
				throw nvae;
			}

			switch (alt141) {
				case 1 :
					// PLSQLPrinter.g:515:10: id
					{
					pushFollow(FOLLOW_id_in_pragma_elements4119);
					id();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:516:10: SQL92_RESERVED_DEFAULT
					{
					match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_elements4130); 
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_elements"


	public static class type_elements_parameter_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_elements_parameter"
	// PLSQLPrinter.g:519:1: type_elements_parameter : ^( PARAMETER parameter_name type_spec ) ;
	public final PLSQLPrinter.type_elements_parameter_return type_elements_parameter() throws RecognitionException {
		PLSQLPrinter.type_elements_parameter_return retval = new PLSQLPrinter.type_elements_parameter_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:520:5: ( ^( PARAMETER parameter_name type_spec ) )
			// PLSQLPrinter.g:520:10: ^( PARAMETER parameter_name type_spec )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_type_elements_parameter4151); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_type_elements_parameter4153);
			parameter_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_type_elements_parameter4155);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_elements_parameter"


	public static class drop_sequence_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_sequence"
	// PLSQLPrinter.g:529:1: drop_sequence : ^( DROP_SEQUENCE sequence_name ) ;
	public final PLSQLPrinter.drop_sequence_return drop_sequence() throws RecognitionException {
		PLSQLPrinter.drop_sequence_return retval = new PLSQLPrinter.drop_sequence_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:530:5: ( ^( DROP_SEQUENCE sequence_name ) )
			// PLSQLPrinter.g:530:9: ^( DROP_SEQUENCE sequence_name )
			{
			match(input,DROP_SEQUENCE,FOLLOW_DROP_SEQUENCE_in_drop_sequence4182); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_sequence_name_in_drop_sequence4184);
			sequence_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_sequence"


	public static class alter_sequence_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_sequence"
	// PLSQLPrinter.g:533:1: alter_sequence : ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ ) ;
	public final PLSQLPrinter.alter_sequence_return alter_sequence() throws RecognitionException {
		PLSQLPrinter.alter_sequence_return retval = new PLSQLPrinter.alter_sequence_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:534:5: ( ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ ) )
			// PLSQLPrinter.g:534:10: ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ )
			{
			match(input,ALTER_SEQUENCE,FOLLOW_ALTER_SEQUENCE_in_alter_sequence4206); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_sequence_name_in_alter_sequence4208);
			sequence_name();
			state._fsp--;

			// PLSQLPrinter.g:534:41: ( sequence_spec )+
			int cnt142=0;
			loop142:
			while (true) {
				int alt142=2;
				int LA142_0 = input.LA(1);
				if ( (LA142_0==CACHE_VK||LA142_0==CYCLE_VK||LA142_0==INCREMENT_VK||LA142_0==MAXVALUE_VK||LA142_0==MINVALUE_VK||LA142_0==NOCACHE_VK||LA142_0==NOCYCLE_VK||(LA142_0 >= NOMAXVALUE_VK && LA142_0 <= NOMINVALUE_VK)||LA142_0==NOORDER_VK||(LA142_0 >= ORDER_VK && LA142_0 <= START_VK)) ) {
					alt142=1;
				}

				switch (alt142) {
				case 1 :
					// PLSQLPrinter.g:534:41: sequence_spec
					{
					pushFollow(FOLLOW_sequence_spec_in_alter_sequence4210);
					sequence_spec();
					state._fsp--;

					}
					break;

				default :
					if ( cnt142 >= 1 ) break loop142;
					EarlyExitException eee = new EarlyExitException(142, input);
					throw eee;
				}
				cnt142++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_sequence"


	public static class create_sequence_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_sequence"
	// PLSQLPrinter.g:537:1: create_sequence : ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* ) ;
	public final PLSQLPrinter.create_sequence_return create_sequence() throws RecognitionException {
		PLSQLPrinter.create_sequence_return retval = new PLSQLPrinter.create_sequence_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:538:5: ( ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* ) )
			// PLSQLPrinter.g:538:10: ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* )
			{
			match(input,CREATE_SEQUENCE,FOLLOW_CREATE_SEQUENCE_in_create_sequence4233); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_sequence_name_in_create_sequence4235);
			sequence_name();
			state._fsp--;

			// PLSQLPrinter.g:538:42: ( sequence_spec )*
			loop143:
			while (true) {
				int alt143=2;
				int LA143_0 = input.LA(1);
				if ( (LA143_0==CACHE_VK||LA143_0==CYCLE_VK||LA143_0==INCREMENT_VK||LA143_0==MAXVALUE_VK||LA143_0==MINVALUE_VK||LA143_0==NOCACHE_VK||LA143_0==NOCYCLE_VK||(LA143_0 >= NOMAXVALUE_VK && LA143_0 <= NOMINVALUE_VK)||LA143_0==NOORDER_VK||(LA143_0 >= ORDER_VK && LA143_0 <= START_VK)) ) {
					alt143=1;
				}

				switch (alt143) {
				case 1 :
					// PLSQLPrinter.g:538:42: sequence_spec
					{
					pushFollow(FOLLOW_sequence_spec_in_create_sequence4237);
					sequence_spec();
					state._fsp--;

					}
					break;

				default :
					break loop143;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_sequence"


	public static class sequence_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sequence_spec"
	// PLSQLPrinter.g:543:1: sequence_spec : ( ^( START_VK UNSIGNED_INTEGER ) | ^( INCREMENT_VK UNSIGNED_INTEGER ) | ^( MAXVALUE_VK UNSIGNED_INTEGER ) | ^( MINVALUE_VK UNSIGNED_INTEGER ) | ^( CACHE_VK UNSIGNED_INTEGER ) | NOMAXVALUE_VK | NOMINVALUE_VK | CYCLE_VK | NOCYCLE_VK | NOCACHE_VK | ORDER_VK | NOORDER_VK );
	public final PLSQLPrinter.sequence_spec_return sequence_spec() throws RecognitionException {
		PLSQLPrinter.sequence_spec_return retval = new PLSQLPrinter.sequence_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:544:5: ( ^( START_VK UNSIGNED_INTEGER ) | ^( INCREMENT_VK UNSIGNED_INTEGER ) | ^( MAXVALUE_VK UNSIGNED_INTEGER ) | ^( MINVALUE_VK UNSIGNED_INTEGER ) | ^( CACHE_VK UNSIGNED_INTEGER ) | NOMAXVALUE_VK | NOMINVALUE_VK | CYCLE_VK | NOCYCLE_VK | NOCACHE_VK | ORDER_VK | NOORDER_VK )
			int alt144=12;
			switch ( input.LA(1) ) {
			case START_VK:
				{
				alt144=1;
				}
				break;
			case INCREMENT_VK:
				{
				alt144=2;
				}
				break;
			case MAXVALUE_VK:
				{
				alt144=3;
				}
				break;
			case MINVALUE_VK:
				{
				alt144=4;
				}
				break;
			case CACHE_VK:
				{
				alt144=5;
				}
				break;
			case NOMAXVALUE_VK:
				{
				alt144=6;
				}
				break;
			case NOMINVALUE_VK:
				{
				alt144=7;
				}
				break;
			case CYCLE_VK:
				{
				alt144=8;
				}
				break;
			case NOCYCLE_VK:
				{
				alt144=9;
				}
				break;
			case NOCACHE_VK:
				{
				alt144=10;
				}
				break;
			case ORDER_VK:
				{
				alt144=11;
				}
				break;
			case NOORDER_VK:
				{
				alt144=12;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 144, 0, input);
				throw nvae;
			}
			switch (alt144) {
				case 1 :
					// PLSQLPrinter.g:544:10: ^( START_VK UNSIGNED_INTEGER )
					{
					match(input,START_VK,FOLLOW_START_VK_in_sequence_spec4262); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4264); 
					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:545:10: ^( INCREMENT_VK UNSIGNED_INTEGER )
					{
					match(input,INCREMENT_VK,FOLLOW_INCREMENT_VK_in_sequence_spec4277); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4279); 
					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:546:10: ^( MAXVALUE_VK UNSIGNED_INTEGER )
					{
					match(input,MAXVALUE_VK,FOLLOW_MAXVALUE_VK_in_sequence_spec4292); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4294); 
					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// PLSQLPrinter.g:547:10: ^( MINVALUE_VK UNSIGNED_INTEGER )
					{
					match(input,MINVALUE_VK,FOLLOW_MINVALUE_VK_in_sequence_spec4307); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4309); 
					match(input, Token.UP, null); 

					}
					break;
				case 5 :
					// PLSQLPrinter.g:548:10: ^( CACHE_VK UNSIGNED_INTEGER )
					{
					match(input,CACHE_VK,FOLLOW_CACHE_VK_in_sequence_spec4322); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4324); 
					match(input, Token.UP, null); 

					}
					break;
				case 6 :
					// PLSQLPrinter.g:549:10: NOMAXVALUE_VK
					{
					match(input,NOMAXVALUE_VK,FOLLOW_NOMAXVALUE_VK_in_sequence_spec4336); 
					}
					break;
				case 7 :
					// PLSQLPrinter.g:550:10: NOMINVALUE_VK
					{
					match(input,NOMINVALUE_VK,FOLLOW_NOMINVALUE_VK_in_sequence_spec4347); 
					}
					break;
				case 8 :
					// PLSQLPrinter.g:551:10: CYCLE_VK
					{
					match(input,CYCLE_VK,FOLLOW_CYCLE_VK_in_sequence_spec4358); 
					}
					break;
				case 9 :
					// PLSQLPrinter.g:552:10: NOCYCLE_VK
					{
					match(input,NOCYCLE_VK,FOLLOW_NOCYCLE_VK_in_sequence_spec4369); 
					}
					break;
				case 10 :
					// PLSQLPrinter.g:553:10: NOCACHE_VK
					{
					match(input,NOCACHE_VK,FOLLOW_NOCACHE_VK_in_sequence_spec4380); 
					}
					break;
				case 11 :
					// PLSQLPrinter.g:554:10: ORDER_VK
					{
					match(input,ORDER_VK,FOLLOW_ORDER_VK_in_sequence_spec4391); 
					}
					break;
				case 12 :
					// PLSQLPrinter.g:555:10: NOORDER_VK
					{
					match(input,NOORDER_VK,FOLLOW_NOORDER_VK_in_sequence_spec4402); 
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sequence_spec"


	public static class invoker_rights_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "invoker_rights_clause"
	// PLSQLPrinter.g:564:1: invoker_rights_clause : ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) ) ;
	public final PLSQLPrinter.invoker_rights_clause_return invoker_rights_clause() throws RecognitionException {
		PLSQLPrinter.invoker_rights_clause_return retval = new PLSQLPrinter.invoker_rights_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:565:5: ( ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) ) )
			// PLSQLPrinter.g:565:10: ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) )
			{
			match(input,AUTHID_VK,FOLLOW_AUTHID_VK_in_invoker_rights_clause4429); 
			match(input, Token.DOWN, null); 
			if ( input.LA(1)==CURRENT_USER_VK||input.LA(1)==DEFINER_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "invoker_rights_clause"


	public static class compiler_parameters_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "compiler_parameters_clause"
	// PLSQLPrinter.g:568:1: compiler_parameters_clause : ^( COMPILER_PARAMETER ^( ASSIGN id expression ) ) ;
	public final PLSQLPrinter.compiler_parameters_clause_return compiler_parameters_clause() throws RecognitionException {
		PLSQLPrinter.compiler_parameters_clause_return retval = new PLSQLPrinter.compiler_parameters_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:569:5: ( ^( COMPILER_PARAMETER ^( ASSIGN id expression ) ) )
			// PLSQLPrinter.g:569:10: ^( COMPILER_PARAMETER ^( ASSIGN id expression ) )
			{
			match(input,COMPILER_PARAMETER,FOLLOW_COMPILER_PARAMETER_in_compiler_parameters_clause4457); 
			match(input, Token.DOWN, null); 
			match(input,ASSIGN,FOLLOW_ASSIGN_in_compiler_parameters_clause4460); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_id_in_compiler_parameters_clause4462);
			id();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_compiler_parameters_clause4464);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compiler_parameters_clause"


	public static class call_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "call_spec"
	// PLSQLPrinter.g:572:1: call_spec : ^( LANGUAGE_VK ( java_spec | c_spec ) ) ;
	public final PLSQLPrinter.call_spec_return call_spec() throws RecognitionException {
		PLSQLPrinter.call_spec_return retval = new PLSQLPrinter.call_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:573:5: ( ^( LANGUAGE_VK ( java_spec | c_spec ) ) )
			// PLSQLPrinter.g:573:10: ^( LANGUAGE_VK ( java_spec | c_spec ) )
			{
			match(input,LANGUAGE_VK,FOLLOW_LANGUAGE_VK_in_call_spec4487); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:573:24: ( java_spec | c_spec )
			int alt145=2;
			int LA145_0 = input.LA(1);
			if ( (LA145_0==JAVA_VK) ) {
				alt145=1;
			}
			else if ( (LA145_0==C_VK) ) {
				alt145=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 145, 0, input);
				throw nvae;
			}

			switch (alt145) {
				case 1 :
					// PLSQLPrinter.g:573:26: java_spec
					{
					pushFollow(FOLLOW_java_spec_in_call_spec4491);
					java_spec();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:573:38: c_spec
					{
					pushFollow(FOLLOW_c_spec_in_call_spec4495);
					c_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "call_spec"


	public static class java_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "java_spec"
	// PLSQLPrinter.g:578:1: java_spec : ^( JAVA_VK CHAR_STRING ) ;
	public final PLSQLPrinter.java_spec_return java_spec() throws RecognitionException {
		PLSQLPrinter.java_spec_return retval = new PLSQLPrinter.java_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:579:5: ( ^( JAVA_VK CHAR_STRING ) )
			// PLSQLPrinter.g:579:10: ^( JAVA_VK CHAR_STRING )
			{
			match(input,JAVA_VK,FOLLOW_JAVA_VK_in_java_spec4521); 
			match(input, Token.DOWN, null); 
			match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_java_spec4523); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "java_spec"


	public static class c_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "c_spec"
	// PLSQLPrinter.g:582:1: c_spec : ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? ) ;
	public final PLSQLPrinter.c_spec_return c_spec() throws RecognitionException {
		PLSQLPrinter.c_spec_return retval = new PLSQLPrinter.c_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:583:5: ( ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? ) )
			// PLSQLPrinter.g:583:10: ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? )
			{
			match(input,C_VK,FOLLOW_C_VK_in_c_spec4545); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:583:17: ( CHAR_STRING )?
			int alt146=2;
			int LA146_0 = input.LA(1);
			if ( (LA146_0==CHAR_STRING) ) {
				alt146=1;
			}
			switch (alt146) {
				case 1 :
					// PLSQLPrinter.g:583:17: CHAR_STRING
					{
					match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_c_spec4547); 
					}
					break;

			}

			// PLSQLPrinter.g:583:30: ( CONTEXT_VK )?
			int alt147=2;
			int LA147_0 = input.LA(1);
			if ( (LA147_0==CONTEXT_VK) ) {
				alt147=1;
			}
			switch (alt147) {
				case 1 :
					// PLSQLPrinter.g:583:30: CONTEXT_VK
					{
					match(input,CONTEXT_VK,FOLLOW_CONTEXT_VK_in_c_spec4550); 
					}
					break;

			}

			match(input,LIBRARY_VK,FOLLOW_LIBRARY_VK_in_c_spec4554); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_id_in_c_spec4556);
			id();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:583:59: ( c_agent_in_clause )?
			int alt148=2;
			int LA148_0 = input.LA(1);
			if ( (LA148_0==AGENT_VK) ) {
				alt148=1;
			}
			switch (alt148) {
				case 1 :
					// PLSQLPrinter.g:583:59: c_agent_in_clause
					{
					pushFollow(FOLLOW_c_agent_in_clause_in_c_spec4559);
					c_agent_in_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:583:78: ( c_parameters_clause )?
			int alt149=2;
			int LA149_0 = input.LA(1);
			if ( (LA149_0==PARAMETERS_VK) ) {
				alt149=1;
			}
			switch (alt149) {
				case 1 :
					// PLSQLPrinter.g:583:78: c_parameters_clause
					{
					pushFollow(FOLLOW_c_parameters_clause_in_c_spec4562);
					c_parameters_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "c_spec"


	public static class c_agent_in_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "c_agent_in_clause"
	// PLSQLPrinter.g:586:1: c_agent_in_clause : ^( AGENT_VK ( expression )+ ) ;
	public final PLSQLPrinter.c_agent_in_clause_return c_agent_in_clause() throws RecognitionException {
		PLSQLPrinter.c_agent_in_clause_return retval = new PLSQLPrinter.c_agent_in_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:587:5: ( ^( AGENT_VK ( expression )+ ) )
			// PLSQLPrinter.g:587:10: ^( AGENT_VK ( expression )+ )
			{
			match(input,AGENT_VK,FOLLOW_AGENT_VK_in_c_agent_in_clause4585); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:587:21: ( expression )+
			int cnt150=0;
			loop150:
			while (true) {
				int alt150=2;
				int LA150_0 = input.LA(1);
				if ( (LA150_0==EXPR||LA150_0==LOGIC_EXPR) ) {
					alt150=1;
				}

				switch (alt150) {
				case 1 :
					// PLSQLPrinter.g:587:21: expression
					{
					pushFollow(FOLLOW_expression_in_c_agent_in_clause4587);
					expression();
					state._fsp--;

					}
					break;

				default :
					if ( cnt150 >= 1 ) break loop150;
					EarlyExitException eee = new EarlyExitException(150, input);
					throw eee;
				}
				cnt150++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "c_agent_in_clause"


	public static class c_parameters_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "c_parameters_clause"
	// PLSQLPrinter.g:590:1: c_parameters_clause : ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) ) ;
	public final PLSQLPrinter.c_parameters_clause_return c_parameters_clause() throws RecognitionException {
		PLSQLPrinter.c_parameters_clause_return retval = new PLSQLPrinter.c_parameters_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:591:5: ( ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) ) )
			// PLSQLPrinter.g:591:10: ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) )
			{
			match(input,PARAMETERS_VK,FOLLOW_PARAMETERS_VK_in_c_parameters_clause4610); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:591:26: ( THREE_DOTS | ( expression )+ )
			int alt152=2;
			int LA152_0 = input.LA(1);
			if ( (LA152_0==THREE_DOTS) ) {
				alt152=1;
			}
			else if ( (LA152_0==EXPR||LA152_0==LOGIC_EXPR) ) {
				alt152=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 152, 0, input);
				throw nvae;
			}

			switch (alt152) {
				case 1 :
					// PLSQLPrinter.g:591:27: THREE_DOTS
					{
					match(input,THREE_DOTS,FOLLOW_THREE_DOTS_in_c_parameters_clause4613); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:591:38: ( expression )+
					{
					// PLSQLPrinter.g:591:38: ( expression )+
					int cnt151=0;
					loop151:
					while (true) {
						int alt151=2;
						int LA151_0 = input.LA(1);
						if ( (LA151_0==EXPR||LA151_0==LOGIC_EXPR) ) {
							alt151=1;
						}

						switch (alt151) {
						case 1 :
							// PLSQLPrinter.g:591:38: expression
							{
							pushFollow(FOLLOW_expression_in_c_parameters_clause4615);
							expression();
							state._fsp--;

							}
							break;

						default :
							if ( cnt151 >= 1 ) break loop151;
							EarlyExitException eee = new EarlyExitException(151, input);
							throw eee;
						}
						cnt151++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "c_parameters_clause"


	public static class parameter_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parameter"
	// PLSQLPrinter.g:596:1: parameter : ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? ) ;
	public final PLSQLPrinter.parameter_return parameter() throws RecognitionException {
		PLSQLPrinter.parameter_return retval = new PLSQLPrinter.parameter_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:597:5: ( ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? ) )
			// PLSQLPrinter.g:597:10: ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_parameter4641); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_parameter4643);
			parameter_name();
			state._fsp--;

			// PLSQLPrinter.g:597:37: ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )*
			loop153:
			while (true) {
				int alt153=2;
				int LA153_0 = input.LA(1);
				if ( (LA153_0==SQL92_RESERVED_IN||LA153_0==INOUT_VK||LA153_0==OUT_VK) ) {
					alt153=1;
				}

				switch (alt153) {
				case 1 :
					// PLSQLPrinter.g:
					{
					if ( input.LA(1)==SQL92_RESERVED_IN||input.LA(1)==INOUT_VK||input.LA(1)==OUT_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

				default :
					break loop153;
				}
			}

			// PLSQLPrinter.g:597:74: ( type_spec )?
			int alt154=2;
			int LA154_0 = input.LA(1);
			if ( (LA154_0==CUSTOM_TYPE||LA154_0==INTERVAL_DATATYPE||LA154_0==NATIVE_DATATYPE) ) {
				alt154=1;
			}
			switch (alt154) {
				case 1 :
					// PLSQLPrinter.g:597:74: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_parameter4654);
					type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:597:85: ( default_value_part )?
			int alt155=2;
			int LA155_0 = input.LA(1);
			if ( (LA155_0==DEFAULT_VALUE) ) {
				alt155=1;
			}
			switch (alt155) {
				case 1 :
					// PLSQLPrinter.g:597:85: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_parameter4657);
					default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter"


	public static class default_value_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "default_value_part"
	// PLSQLPrinter.g:600:1: default_value_part : ^( DEFAULT_VALUE expression ) ;
	public final PLSQLPrinter.default_value_part_return default_value_part() throws RecognitionException {
		PLSQLPrinter.default_value_part_return retval = new PLSQLPrinter.default_value_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:601:5: ( ^( DEFAULT_VALUE expression ) )
			// PLSQLPrinter.g:601:10: ^( DEFAULT_VALUE expression )
			{
			match(input,DEFAULT_VALUE,FOLLOW_DEFAULT_VALUE_in_default_value_part4680); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_default_value_part4682);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "default_value_part"


	public static class declare_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "declare_spec"
	// PLSQLPrinter.g:610:1: declare_spec : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | pragma_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body );
	public final PLSQLPrinter.declare_spec_return declare_spec() throws RecognitionException {
		PLSQLPrinter.declare_spec_return retval = new PLSQLPrinter.declare_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:611:5: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | pragma_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body )
			int alt156=9;
			switch ( input.LA(1) ) {
			case VARIABLE_DECLARE:
				{
				alt156=1;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt156=2;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt156=3;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt156=4;
				}
				break;
			case PRAGMA_DECLARE:
				{
				alt156=5;
				}
				break;
			case RECORD_TYPE_DECLARE:
			case RECORD_VAR_DECLARE:
				{
				alt156=6;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt156=7;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt156=8;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt156=9;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 156, 0, input);
				throw nvae;
			}
			switch (alt156) {
				case 1 :
					// PLSQLPrinter.g:611:10: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_declare_spec4709);
					variable_declaration();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:612:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_declare_spec4721);
					subtype_declaration();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:613:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_declare_spec4733);
					cursor_declaration();
					state._fsp--;

					}
					break;
				case 4 :
					// PLSQLPrinter.g:614:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_declare_spec4745);
					exception_declaration();
					state._fsp--;

					}
					break;
				case 5 :
					// PLSQLPrinter.g:615:11: pragma_declaration
					{
					pushFollow(FOLLOW_pragma_declaration_in_declare_spec4757);
					pragma_declaration();
					state._fsp--;

					}
					break;
				case 6 :
					// PLSQLPrinter.g:616:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_declare_spec4769);
					record_declaration();
					state._fsp--;

					}
					break;
				case 7 :
					// PLSQLPrinter.g:617:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_declare_spec4781);
					table_declaration();
					state._fsp--;

					}
					break;
				case 8 :
					// PLSQLPrinter.g:618:11: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_declare_spec4793);
					create_procedure_body();
					state._fsp--;

					}
					break;
				case 9 :
					// PLSQLPrinter.g:619:11: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_declare_spec4805);
					create_function_body();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "declare_spec"


	public static class variable_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "variable_declaration"
	// PLSQLPrinter.g:623:1: variable_declaration : ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) ;
	public final PLSQLPrinter.variable_declaration_return variable_declaration() throws RecognitionException {
		PLSQLPrinter.variable_declaration_return retval = new PLSQLPrinter.variable_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:624:5: ( ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) )
			// PLSQLPrinter.g:624:10: ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? )
			{
			match(input,VARIABLE_DECLARE,FOLLOW_VARIABLE_DECLARE_in_variable_declaration4827); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_variable_name_in_variable_declaration4829);
			variable_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_variable_declaration4831);
			type_spec();
			state._fsp--;

			// PLSQLPrinter.g:624:53: ( CONSTANT_VK )?
			int alt157=2;
			int LA157_0 = input.LA(1);
			if ( (LA157_0==CONSTANT_VK) ) {
				alt157=1;
			}
			switch (alt157) {
				case 1 :
					// PLSQLPrinter.g:624:53: CONSTANT_VK
					{
					match(input,CONSTANT_VK,FOLLOW_CONSTANT_VK_in_variable_declaration4833); 
					}
					break;

			}

			// PLSQLPrinter.g:624:66: ( SQL92_RESERVED_NULL )?
			int alt158=2;
			int LA158_0 = input.LA(1);
			if ( (LA158_0==SQL92_RESERVED_NULL) ) {
				alt158=1;
			}
			switch (alt158) {
				case 1 :
					// PLSQLPrinter.g:624:66: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_variable_declaration4836); 
					}
					break;

			}

			// PLSQLPrinter.g:624:87: ( default_value_part )?
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==DEFAULT_VALUE) ) {
				alt159=1;
			}
			switch (alt159) {
				case 1 :
					// PLSQLPrinter.g:624:87: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_variable_declaration4839);
					default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "variable_declaration"


	public static class subtype_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subtype_declaration"
	// PLSQLPrinter.g:627:1: subtype_declaration : ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? ) ;
	public final PLSQLPrinter.subtype_declaration_return subtype_declaration() throws RecognitionException {
		PLSQLPrinter.subtype_declaration_return retval = new PLSQLPrinter.subtype_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:628:7: ( ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? ) )
			// PLSQLPrinter.g:628:12: ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? )
			{
			match(input,SUBTYPE_DECLARE,FOLLOW_SUBTYPE_DECLARE_in_subtype_declaration4868); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_subtype_declaration4870);
			type_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_subtype_declaration4872);
			type_spec();
			state._fsp--;

			// PLSQLPrinter.g:628:50: ( SQL92_RESERVED_NULL )?
			int alt160=2;
			int LA160_0 = input.LA(1);
			if ( (LA160_0==SQL92_RESERVED_NULL) ) {
				alt160=1;
			}
			switch (alt160) {
				case 1 :
					// PLSQLPrinter.g:628:50: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_subtype_declaration4874); 
					}
					break;

			}

			// PLSQLPrinter.g:628:71: ( subtype_range )?
			int alt161=2;
			int LA161_0 = input.LA(1);
			if ( (LA161_0==RANGE_VK) ) {
				alt161=1;
			}
			switch (alt161) {
				case 1 :
					// PLSQLPrinter.g:628:71: subtype_range
					{
					pushFollow(FOLLOW_subtype_range_in_subtype_declaration4877);
					subtype_range();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subtype_declaration"


	public static class subtype_range_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subtype_range"
	// PLSQLPrinter.g:631:1: subtype_range : ^( RANGE_VK ( expression )+ ) ;
	public final PLSQLPrinter.subtype_range_return subtype_range() throws RecognitionException {
		PLSQLPrinter.subtype_range_return retval = new PLSQLPrinter.subtype_range_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:632:5: ( ^( RANGE_VK ( expression )+ ) )
			// PLSQLPrinter.g:632:10: ^( RANGE_VK ( expression )+ )
			{
			match(input,RANGE_VK,FOLLOW_RANGE_VK_in_subtype_range4902); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:632:21: ( expression )+
			int cnt162=0;
			loop162:
			while (true) {
				int alt162=2;
				int LA162_0 = input.LA(1);
				if ( (LA162_0==EXPR||LA162_0==LOGIC_EXPR) ) {
					alt162=1;
				}

				switch (alt162) {
				case 1 :
					// PLSQLPrinter.g:632:21: expression
					{
					pushFollow(FOLLOW_expression_in_subtype_range4904);
					expression();
					state._fsp--;

					}
					break;

				default :
					if ( cnt162 >= 1 ) break loop162;
					EarlyExitException eee = new EarlyExitException(162, input);
					throw eee;
				}
				cnt162++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subtype_range"


	public static class cursor_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_declaration"
	// PLSQLPrinter.g:636:1: cursor_declaration : ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) ) ;
	public final PLSQLPrinter.cursor_declaration_return cursor_declaration() throws RecognitionException {
		PLSQLPrinter.cursor_declaration_return retval = new PLSQLPrinter.cursor_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:637:5: ( ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) ) )
			// PLSQLPrinter.g:637:10: ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) )
			{
			match(input,CURSOR_DECLARE,FOLLOW_CURSOR_DECLARE_in_cursor_declaration4928); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_cursor_declaration4930);
			cursor_name();
			state._fsp--;

			// PLSQLPrinter.g:637:39: ( type_spec )?
			int alt163=2;
			int LA163_0 = input.LA(1);
			if ( (LA163_0==CUSTOM_TYPE||LA163_0==INTERVAL_DATATYPE||LA163_0==NATIVE_DATATYPE) ) {
				alt163=1;
			}
			switch (alt163) {
				case 1 :
					// PLSQLPrinter.g:637:39: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_cursor_declaration4932);
					type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:637:50: ( select_statement )?
			int alt164=2;
			int LA164_0 = input.LA(1);
			if ( (LA164_0==SELECT_STATEMENT) ) {
				alt164=1;
			}
			switch (alt164) {
				case 1 :
					// PLSQLPrinter.g:637:50: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_cursor_declaration4935);
					select_statement();
					state._fsp--;

					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_cursor_declaration4939); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:637:81: ( parameter_spec )*
				loop165:
				while (true) {
					int alt165=2;
					int LA165_0 = input.LA(1);
					if ( (LA165_0==PARAMETER) ) {
						alt165=1;
					}

					switch (alt165) {
					case 1 :
						// PLSQLPrinter.g:637:81: parameter_spec
						{
						pushFollow(FOLLOW_parameter_spec_in_cursor_declaration4941);
						parameter_spec();
						state._fsp--;

						}
						break;

					default :
						break loop165;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_declaration"


	public static class parameter_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parameter_spec"
	// PLSQLPrinter.g:640:1: parameter_spec : ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) ;
	public final PLSQLPrinter.parameter_spec_return parameter_spec() throws RecognitionException {
		PLSQLPrinter.parameter_spec_return retval = new PLSQLPrinter.parameter_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:641:5: ( ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) )
			// PLSQLPrinter.g:641:10: ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_parameter_spec4966); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_parameter_spec4968);
			parameter_name();
			state._fsp--;

			// PLSQLPrinter.g:641:37: ( type_spec )?
			int alt166=2;
			int LA166_0 = input.LA(1);
			if ( (LA166_0==CUSTOM_TYPE||LA166_0==INTERVAL_DATATYPE||LA166_0==NATIVE_DATATYPE) ) {
				alt166=1;
			}
			switch (alt166) {
				case 1 :
					// PLSQLPrinter.g:641:37: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_parameter_spec4970);
					type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:641:48: ( default_value_part )?
			int alt167=2;
			int LA167_0 = input.LA(1);
			if ( (LA167_0==DEFAULT_VALUE) ) {
				alt167=1;
			}
			switch (alt167) {
				case 1 :
					// PLSQLPrinter.g:641:48: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_parameter_spec4973);
					default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter_spec"


	public static class exception_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_declaration"
	// PLSQLPrinter.g:644:1: exception_declaration : ^( EXCEPTION_DECLARE exception_name ) ;
	public final PLSQLPrinter.exception_declaration_return exception_declaration() throws RecognitionException {
		PLSQLPrinter.exception_declaration_return retval = new PLSQLPrinter.exception_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:645:5: ( ^( EXCEPTION_DECLARE exception_name ) )
			// PLSQLPrinter.g:645:10: ^( EXCEPTION_DECLARE exception_name )
			{
			match(input,EXCEPTION_DECLARE,FOLLOW_EXCEPTION_DECLARE_in_exception_declaration4997); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_exception_name_in_exception_declaration4999);
			exception_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_declaration"


	public static class pragma_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_declaration"
	// PLSQLPrinter.g:648:1: pragma_declaration : ^( PRAGMA_DECLARE ( SERIALLY_REUSABLE_VK | AUTONOMOUS_TRANSACTION_VK | ^( EXCEPTION_INIT_VK exception_name constant ) | ^( INLINE_VK id expression ) | ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT )? ( id )* ) ) ) ;
	public final PLSQLPrinter.pragma_declaration_return pragma_declaration() throws RecognitionException {
		PLSQLPrinter.pragma_declaration_return retval = new PLSQLPrinter.pragma_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:649:5: ( ^( PRAGMA_DECLARE ( SERIALLY_REUSABLE_VK | AUTONOMOUS_TRANSACTION_VK | ^( EXCEPTION_INIT_VK exception_name constant ) | ^( INLINE_VK id expression ) | ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT )? ( id )* ) ) ) )
			// PLSQLPrinter.g:649:10: ^( PRAGMA_DECLARE ( SERIALLY_REUSABLE_VK | AUTONOMOUS_TRANSACTION_VK | ^( EXCEPTION_INIT_VK exception_name constant ) | ^( INLINE_VK id expression ) | ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT )? ( id )* ) ) )
			{
			match(input,PRAGMA_DECLARE,FOLLOW_PRAGMA_DECLARE_in_pragma_declaration5034); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:650:13: ( SERIALLY_REUSABLE_VK | AUTONOMOUS_TRANSACTION_VK | ^( EXCEPTION_INIT_VK exception_name constant ) | ^( INLINE_VK id expression ) | ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT )? ( id )* ) )
			int alt170=5;
			switch ( input.LA(1) ) {
			case SERIALLY_REUSABLE_VK:
				{
				alt170=1;
				}
				break;
			case AUTONOMOUS_TRANSACTION_VK:
				{
				alt170=2;
				}
				break;
			case EXCEPTION_INIT_VK:
				{
				alt170=3;
				}
				break;
			case INLINE_VK:
				{
				alt170=4;
				}
				break;
			case RESTRICT_REFERENCES_VK:
				{
				alt170=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 170, 0, input);
				throw nvae;
			}
			switch (alt170) {
				case 1 :
					// PLSQLPrinter.g:650:18: SERIALLY_REUSABLE_VK
					{
					match(input,SERIALLY_REUSABLE_VK,FOLLOW_SERIALLY_REUSABLE_VK_in_pragma_declaration5054); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:651:19: AUTONOMOUS_TRANSACTION_VK
					{
					match(input,AUTONOMOUS_TRANSACTION_VK,FOLLOW_AUTONOMOUS_TRANSACTION_VK_in_pragma_declaration5074); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:652:18: ^( EXCEPTION_INIT_VK exception_name constant )
					{
					match(input,EXCEPTION_INIT_VK,FOLLOW_EXCEPTION_INIT_VK_in_pragma_declaration5094); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_exception_name_in_pragma_declaration5096);
					exception_name();
					state._fsp--;

					pushFollow(FOLLOW_constant_in_pragma_declaration5098);
					constant();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// PLSQLPrinter.g:653:18: ^( INLINE_VK id expression )
					{
					match(input,INLINE_VK,FOLLOW_INLINE_VK_in_pragma_declaration5119); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_id_in_pragma_declaration5121);
					id();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_pragma_declaration5123);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 5 :
					// PLSQLPrinter.g:654:18: ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT )? ( id )* )
					{
					match(input,RESTRICT_REFERENCES_VK,FOLLOW_RESTRICT_REFERENCES_VK_in_pragma_declaration5144); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:654:43: ( SQL92_RESERVED_DEFAULT )?
						int alt168=2;
						int LA168_0 = input.LA(1);
						if ( (LA168_0==SQL92_RESERVED_DEFAULT) ) {
							alt168=1;
						}
						switch (alt168) {
							case 1 :
								// PLSQLPrinter.g:654:43: SQL92_RESERVED_DEFAULT
								{
								match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_declaration5146); 
								}
								break;

						}

						// PLSQLPrinter.g:654:67: ( id )*
						loop169:
						while (true) {
							int alt169=2;
							int LA169_0 = input.LA(1);
							if ( (LA169_0==CHAR_SET_NAME||LA169_0==ID) ) {
								alt169=1;
							}

							switch (alt169) {
							case 1 :
								// PLSQLPrinter.g:654:67: id
								{
								pushFollow(FOLLOW_id_in_pragma_declaration5149);
								id();
								state._fsp--;

								}
								break;

							default :
								break loop169;
							}
						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_declaration"


	public static class record_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_declaration"
	// PLSQLPrinter.g:659:1: record_declaration : ( record_type_dec | record_var_dec );
	public final PLSQLPrinter.record_declaration_return record_declaration() throws RecognitionException {
		PLSQLPrinter.record_declaration_return retval = new PLSQLPrinter.record_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:660:5: ( record_type_dec | record_var_dec )
			int alt171=2;
			int LA171_0 = input.LA(1);
			if ( (LA171_0==RECORD_TYPE_DECLARE) ) {
				alt171=1;
			}
			else if ( (LA171_0==RECORD_VAR_DECLARE) ) {
				alt171=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 171, 0, input);
				throw nvae;
			}

			switch (alt171) {
				case 1 :
					// PLSQLPrinter.g:660:10: record_type_dec
					{
					pushFollow(FOLLOW_record_type_dec_in_record_declaration5195);
					record_type_dec();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:661:10: record_var_dec
					{
					pushFollow(FOLLOW_record_var_dec_in_record_declaration5206);
					record_var_dec();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_declaration"


	public static class record_type_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_type_dec"
	// PLSQLPrinter.g:667:1: record_type_dec : ^( RECORD_TYPE_DECLARE type_name ( REF_VK )? ( type_spec )? ^( FIELDS ( field_spec )* ) ) ;
	public final PLSQLPrinter.record_type_dec_return record_type_dec() throws RecognitionException {
		PLSQLPrinter.record_type_dec_return retval = new PLSQLPrinter.record_type_dec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:668:5: ( ^( RECORD_TYPE_DECLARE type_name ( REF_VK )? ( type_spec )? ^( FIELDS ( field_spec )* ) ) )
			// PLSQLPrinter.g:668:10: ^( RECORD_TYPE_DECLARE type_name ( REF_VK )? ( type_spec )? ^( FIELDS ( field_spec )* ) )
			{
			match(input,RECORD_TYPE_DECLARE,FOLLOW_RECORD_TYPE_DECLARE_in_record_type_dec5230); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_record_type_dec5232);
			type_name();
			state._fsp--;

			// PLSQLPrinter.g:668:42: ( REF_VK )?
			int alt172=2;
			int LA172_0 = input.LA(1);
			if ( (LA172_0==REF_VK) ) {
				alt172=1;
			}
			switch (alt172) {
				case 1 :
					// PLSQLPrinter.g:668:42: REF_VK
					{
					match(input,REF_VK,FOLLOW_REF_VK_in_record_type_dec5234); 
					}
					break;

			}

			// PLSQLPrinter.g:668:50: ( type_spec )?
			int alt173=2;
			int LA173_0 = input.LA(1);
			if ( (LA173_0==CUSTOM_TYPE||LA173_0==INTERVAL_DATATYPE||LA173_0==NATIVE_DATATYPE) ) {
				alt173=1;
			}
			switch (alt173) {
				case 1 :
					// PLSQLPrinter.g:668:50: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_record_type_dec5237);
					type_spec();
					state._fsp--;

					}
					break;

			}

			match(input,FIELDS,FOLLOW_FIELDS_in_record_type_dec5241); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:668:70: ( field_spec )*
				loop174:
				while (true) {
					int alt174=2;
					int LA174_0 = input.LA(1);
					if ( (LA174_0==FIELD_SPEC) ) {
						alt174=1;
					}

					switch (alt174) {
					case 1 :
						// PLSQLPrinter.g:668:70: field_spec
						{
						pushFollow(FOLLOW_field_spec_in_record_type_dec5243);
						field_spec();
						state._fsp--;

						}
						break;

					default :
						break loop174;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_type_dec"


	public static class field_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "field_spec"
	// PLSQLPrinter.g:671:1: field_spec : ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) ;
	public final PLSQLPrinter.field_spec_return field_spec() throws RecognitionException {
		PLSQLPrinter.field_spec_return retval = new PLSQLPrinter.field_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:672:5: ( ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) )
			// PLSQLPrinter.g:672:10: ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? )
			{
			match(input,FIELD_SPEC,FOLLOW_FIELD_SPEC_in_field_spec5267); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_column_name_in_field_spec5269);
			column_name();
			state._fsp--;

			// PLSQLPrinter.g:672:35: ( type_spec )?
			int alt175=2;
			int LA175_0 = input.LA(1);
			if ( (LA175_0==CUSTOM_TYPE||LA175_0==INTERVAL_DATATYPE||LA175_0==NATIVE_DATATYPE) ) {
				alt175=1;
			}
			switch (alt175) {
				case 1 :
					// PLSQLPrinter.g:672:35: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_field_spec5271);
					type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:672:46: ( SQL92_RESERVED_NULL )?
			int alt176=2;
			int LA176_0 = input.LA(1);
			if ( (LA176_0==SQL92_RESERVED_NULL) ) {
				alt176=1;
			}
			switch (alt176) {
				case 1 :
					// PLSQLPrinter.g:672:46: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_field_spec5274); 
					}
					break;

			}

			// PLSQLPrinter.g:672:67: ( default_value_part )?
			int alt177=2;
			int LA177_0 = input.LA(1);
			if ( (LA177_0==DEFAULT_VALUE) ) {
				alt177=1;
			}
			switch (alt177) {
				case 1 :
					// PLSQLPrinter.g:672:67: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_field_spec5277);
					default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "field_spec"


	public static class record_var_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_var_dec"
	// PLSQLPrinter.g:675:1: record_var_dec : ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) ) ;
	public final PLSQLPrinter.record_var_dec_return record_var_dec() throws RecognitionException {
		PLSQLPrinter.record_var_dec_return retval = new PLSQLPrinter.record_var_dec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:676:5: ( ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) ) )
			// PLSQLPrinter.g:676:10: ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) )
			{
			match(input,RECORD_VAR_DECLARE,FOLLOW_RECORD_VAR_DECLARE_in_record_var_dec5300); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_record_name_in_record_var_dec5302);
			record_name();
			state._fsp--;

			pushFollow(FOLLOW_type_name_in_record_var_dec5304);
			type_name();
			state._fsp--;

			if ( (input.LA(1) >= PERCENT_ROWTYPE_VK && input.LA(1) <= PERCENT_TYPE_VK) ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_var_dec"


	public static class table_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_declaration"
	// PLSQLPrinter.g:681:1: table_declaration : ( table_type_dec | table_var_dec );
	public final PLSQLPrinter.table_declaration_return table_declaration() throws RecognitionException {
		PLSQLPrinter.table_declaration_return retval = new PLSQLPrinter.table_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:682:5: ( table_type_dec | table_var_dec )
			int alt178=2;
			int LA178_0 = input.LA(1);
			if ( (LA178_0==TABLE_TYPE_DECLARE) ) {
				alt178=1;
			}
			else if ( (LA178_0==TABLE_VAR_DECLARE) ) {
				alt178=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 178, 0, input);
				throw nvae;
			}

			switch (alt178) {
				case 1 :
					// PLSQLPrinter.g:682:10: table_type_dec
					{
					pushFollow(FOLLOW_table_type_dec_in_table_declaration5333);
					table_type_dec();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:683:10: table_var_dec
					{
					pushFollow(FOLLOW_table_var_dec_in_table_declaration5344);
					table_var_dec();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_declaration"


	public static class table_type_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_type_dec"
	// PLSQLPrinter.g:686:1: table_type_dec : ^( TABLE_TYPE_DECLARE type_name ( varray_type_def | ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) ) ) ;
	public final PLSQLPrinter.table_type_dec_return table_type_dec() throws RecognitionException {
		PLSQLPrinter.table_type_dec_return retval = new PLSQLPrinter.table_type_dec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:687:5: ( ^( TABLE_TYPE_DECLARE type_name ( varray_type_def | ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) ) ) )
			// PLSQLPrinter.g:687:10: ^( TABLE_TYPE_DECLARE type_name ( varray_type_def | ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) ) )
			{
			match(input,TABLE_TYPE_DECLARE,FOLLOW_TABLE_TYPE_DECLARE_in_table_type_dec5365); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_table_type_dec5367);
			type_name();
			state._fsp--;

			// PLSQLPrinter.g:688:13: ( varray_type_def | ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) )
			int alt181=2;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_NULL:
				{
				int LA181_1 = input.LA(2);
				if ( (LA181_1==VARR_ARRAY_DEF) ) {
					alt181=1;
				}
				else if ( (LA181_1==SQL92_RESERVED_TABLE) ) {
					alt181=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 181, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case VARR_ARRAY_DEF:
				{
				alt181=1;
				}
				break;
			case SQL92_RESERVED_TABLE:
				{
				alt181=2;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 181, 0, input);
				throw nvae;
			}
			switch (alt181) {
				case 1 :
					// PLSQLPrinter.g:688:18: varray_type_def
					{
					pushFollow(FOLLOW_varray_type_def_in_table_type_dec5387);
					varray_type_def();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:689:18: ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? )
					{
					// PLSQLPrinter.g:689:18: ( SQL92_RESERVED_NULL )?
					int alt179=2;
					int LA179_0 = input.LA(1);
					if ( (LA179_0==SQL92_RESERVED_NULL) ) {
						alt179=1;
					}
					switch (alt179) {
						case 1 :
							// PLSQLPrinter.g:689:18: SQL92_RESERVED_NULL
							{
							match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_table_type_dec5406); 
							}
							break;

					}

					match(input,SQL92_RESERVED_TABLE,FOLLOW_SQL92_RESERVED_TABLE_in_table_type_dec5410); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_type_spec_in_table_type_dec5412);
					type_spec();
					state._fsp--;

					// PLSQLPrinter.g:689:72: ( table_indexed_by_part )?
					int alt180=2;
					int LA180_0 = input.LA(1);
					if ( (LA180_0==INDEXED_BY) ) {
						alt180=1;
					}
					switch (alt180) {
						case 1 :
							// PLSQLPrinter.g:689:72: table_indexed_by_part
							{
							pushFollow(FOLLOW_table_indexed_by_part_in_table_type_dec5414);
							table_indexed_by_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_type_dec"


	public static class table_indexed_by_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_indexed_by_part"
	// PLSQLPrinter.g:694:1: table_indexed_by_part : ^( INDEXED_BY type_spec ) ;
	public final PLSQLPrinter.table_indexed_by_part_return table_indexed_by_part() throws RecognitionException {
		PLSQLPrinter.table_indexed_by_part_return retval = new PLSQLPrinter.table_indexed_by_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:695:5: ( ^( INDEXED_BY type_spec ) )
			// PLSQLPrinter.g:695:10: ^( INDEXED_BY type_spec )
			{
			match(input,INDEXED_BY,FOLLOW_INDEXED_BY_in_table_indexed_by_part5461); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_table_indexed_by_part5463);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_indexed_by_part"


	public static class varray_type_def_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "varray_type_def"
	// PLSQLPrinter.g:698:1: varray_type_def : ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec ) ;
	public final PLSQLPrinter.varray_type_def_return varray_type_def() throws RecognitionException {
		PLSQLPrinter.varray_type_def_return retval = new PLSQLPrinter.varray_type_def_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:699:5: ( ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec ) )
			// PLSQLPrinter.g:699:10: ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec )
			{
			// PLSQLPrinter.g:699:10: ( SQL92_RESERVED_NULL )?
			int alt182=2;
			int LA182_0 = input.LA(1);
			if ( (LA182_0==SQL92_RESERVED_NULL) ) {
				alt182=1;
			}
			switch (alt182) {
				case 1 :
					// PLSQLPrinter.g:699:10: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_varray_type_def5484); 
					}
					break;

			}

			match(input,VARR_ARRAY_DEF,FOLLOW_VARR_ARRAY_DEF_in_varray_type_def5488); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_varray_type_def5490);
			expression();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_varray_type_def5492);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "varray_type_def"


	public static class table_var_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_var_dec"
	// PLSQLPrinter.g:702:1: table_var_dec : ^( TABLE_VAR_DECLARE table_var_name type_spec ) ;
	public final PLSQLPrinter.table_var_dec_return table_var_dec() throws RecognitionException {
		PLSQLPrinter.table_var_dec_return retval = new PLSQLPrinter.table_var_dec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:703:5: ( ^( TABLE_VAR_DECLARE table_var_name type_spec ) )
			// PLSQLPrinter.g:703:10: ^( TABLE_VAR_DECLARE table_var_name type_spec )
			{
			match(input,TABLE_VAR_DECLARE,FOLLOW_TABLE_VAR_DECLARE_in_table_var_dec5514); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_table_var_name_in_table_var_dec5516);
			table_var_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_table_var_dec5518);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_var_dec"


	public static class seq_of_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "seq_of_statements"
	// PLSQLPrinter.g:710:1: seq_of_statements : ^( STATEMENTS ( statement )+ ) ;
	public final PLSQLPrinter.seq_of_statements_return seq_of_statements() throws RecognitionException {
		PLSQLPrinter.seq_of_statements_return retval = new PLSQLPrinter.seq_of_statements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:711:5: ( ^( STATEMENTS ( statement )+ ) )
			// PLSQLPrinter.g:711:11: ^( STATEMENTS ( statement )+ )
			{
			match(input,STATEMENTS,FOLLOW_STATEMENTS_in_seq_of_statements5545); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:711:24: ( statement )+
			int cnt183=0;
			loop183:
			while (true) {
				int alt183=2;
				int LA183_0 = input.LA(1);
				if ( (LA183_0==PLSQL_RESERVED_IF||LA183_0==PLSQL_RESERVED_LOCK||LA183_0==SQL92_RESERVED_DELETE||LA183_0==SQL92_RESERVED_FETCH||LA183_0==SQL92_RESERVED_GOTO||LA183_0==SQL92_RESERVED_INSERT||LA183_0==SQL92_RESERVED_NULL||LA183_0==SQL92_RESERVED_UPDATE||LA183_0==ASSIGN||LA183_0==BLOCK||LA183_0==BODY||LA183_0==CLOSE_VK||LA183_0==COMMIT_VK||LA183_0==CONTINUE_VK||(LA183_0 >= EXECUTE_VK && LA183_0 <= EXIT_VK)||LA183_0==FORALL_VK||LA183_0==FOR_LOOP||LA183_0==LABEL_DECLARE||LA183_0==LOOP_VK||LA183_0==MERGE_VK||LA183_0==OPEN_VK||LA183_0==PIPE_ROW||LA183_0==RAISE_VK||LA183_0==RETURN_VK||LA183_0==ROLLBACK_VK||LA183_0==ROUTINE_CALL||LA183_0==SAVEPOINT_VK||LA183_0==SEARCHED_CASE||LA183_0==SELECT_STATEMENT||LA183_0==SET_CONSTRAINT||LA183_0==SET_TRANSACTION||LA183_0==SIMPLE_CASE||LA183_0==WHILE_LOOP) ) {
					alt183=1;
				}

				switch (alt183) {
				case 1 :
					// PLSQLPrinter.g:711:24: statement
					{
					pushFollow(FOLLOW_statement_in_seq_of_statements5547);
					statement();
					state._fsp--;

					}
					break;

				default :
					if ( cnt183 >= 1 ) break loop183;
					EarlyExitException eee = new EarlyExitException(183, input);
					throw eee;
				}
				cnt183++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "seq_of_statements"


	public static class statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "statement"
	// PLSQLPrinter.g:714:1: statement : ( label_declaration | assignment_statement | continue_statement | exit_statement | goto_statement | if_statement | loop_statement | forall_statement | null_statement | raise_statement | return_statement | pipe_row_statement | case_statement | sql_statement | function_call | body | block );
	public final PLSQLPrinter.statement_return statement() throws RecognitionException {
		PLSQLPrinter.statement_return retval = new PLSQLPrinter.statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:715:5: ( label_declaration | assignment_statement | continue_statement | exit_statement | goto_statement | if_statement | loop_statement | forall_statement | null_statement | raise_statement | return_statement | pipe_row_statement | case_statement | sql_statement | function_call | body | block )
			int alt184=17;
			switch ( input.LA(1) ) {
			case LABEL_DECLARE:
				{
				alt184=1;
				}
				break;
			case ASSIGN:
				{
				alt184=2;
				}
				break;
			case CONTINUE_VK:
				{
				alt184=3;
				}
				break;
			case EXIT_VK:
				{
				alt184=4;
				}
				break;
			case SQL92_RESERVED_GOTO:
				{
				alt184=5;
				}
				break;
			case PLSQL_RESERVED_IF:
				{
				alt184=6;
				}
				break;
			case FOR_LOOP:
			case LOOP_VK:
			case WHILE_LOOP:
				{
				alt184=7;
				}
				break;
			case FORALL_VK:
				{
				alt184=8;
				}
				break;
			case SQL92_RESERVED_NULL:
				{
				alt184=9;
				}
				break;
			case RAISE_VK:
				{
				alt184=10;
				}
				break;
			case RETURN_VK:
				{
				alt184=11;
				}
				break;
			case PIPE_ROW:
				{
				alt184=12;
				}
				break;
			case SEARCHED_CASE:
			case SIMPLE_CASE:
				{
				alt184=13;
				}
				break;
			case PLSQL_RESERVED_LOCK:
			case SQL92_RESERVED_DELETE:
			case SQL92_RESERVED_FETCH:
			case SQL92_RESERVED_INSERT:
			case SQL92_RESERVED_UPDATE:
			case CLOSE_VK:
			case COMMIT_VK:
			case EXECUTE_VK:
			case MERGE_VK:
			case OPEN_VK:
			case ROLLBACK_VK:
			case SAVEPOINT_VK:
			case SELECT_STATEMENT:
			case SET_CONSTRAINT:
			case SET_TRANSACTION:
				{
				alt184=14;
				}
				break;
			case ROUTINE_CALL:
				{
				alt184=15;
				}
				break;
			case BODY:
				{
				alt184=16;
				}
				break;
			case BLOCK:
				{
				alt184=17;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 184, 0, input);
				throw nvae;
			}
			switch (alt184) {
				case 1 :
					// PLSQLPrinter.g:715:10: label_declaration
					{
					pushFollow(FOLLOW_label_declaration_in_statement5569);
					label_declaration();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:716:10: assignment_statement
					{
					pushFollow(FOLLOW_assignment_statement_in_statement5580);
					assignment_statement();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:717:10: continue_statement
					{
					pushFollow(FOLLOW_continue_statement_in_statement5591);
					continue_statement();
					state._fsp--;

					}
					break;
				case 4 :
					// PLSQLPrinter.g:718:10: exit_statement
					{
					pushFollow(FOLLOW_exit_statement_in_statement5602);
					exit_statement();
					state._fsp--;

					}
					break;
				case 5 :
					// PLSQLPrinter.g:719:10: goto_statement
					{
					pushFollow(FOLLOW_goto_statement_in_statement5613);
					goto_statement();
					state._fsp--;

					}
					break;
				case 6 :
					// PLSQLPrinter.g:720:10: if_statement
					{
					pushFollow(FOLLOW_if_statement_in_statement5624);
					if_statement();
					state._fsp--;

					}
					break;
				case 7 :
					// PLSQLPrinter.g:721:10: loop_statement
					{
					pushFollow(FOLLOW_loop_statement_in_statement5635);
					loop_statement();
					state._fsp--;

					}
					break;
				case 8 :
					// PLSQLPrinter.g:722:10: forall_statement
					{
					pushFollow(FOLLOW_forall_statement_in_statement5646);
					forall_statement();
					state._fsp--;

					}
					break;
				case 9 :
					// PLSQLPrinter.g:723:10: null_statement
					{
					pushFollow(FOLLOW_null_statement_in_statement5657);
					null_statement();
					state._fsp--;

					}
					break;
				case 10 :
					// PLSQLPrinter.g:724:10: raise_statement
					{
					pushFollow(FOLLOW_raise_statement_in_statement5668);
					raise_statement();
					state._fsp--;

					}
					break;
				case 11 :
					// PLSQLPrinter.g:725:10: return_statement
					{
					pushFollow(FOLLOW_return_statement_in_statement5679);
					return_statement();
					state._fsp--;

					}
					break;
				case 12 :
					// PLSQLPrinter.g:726:10: pipe_row_statement
					{
					pushFollow(FOLLOW_pipe_row_statement_in_statement5690);
					pipe_row_statement();
					state._fsp--;

					}
					break;
				case 13 :
					// PLSQLPrinter.g:727:10: case_statement
					{
					pushFollow(FOLLOW_case_statement_in_statement5701);
					case_statement();
					state._fsp--;

					}
					break;
				case 14 :
					// PLSQLPrinter.g:728:10: sql_statement
					{
					pushFollow(FOLLOW_sql_statement_in_statement5712);
					sql_statement();
					state._fsp--;

					}
					break;
				case 15 :
					// PLSQLPrinter.g:729:10: function_call
					{
					pushFollow(FOLLOW_function_call_in_statement5723);
					function_call();
					state._fsp--;

					}
					break;
				case 16 :
					// PLSQLPrinter.g:730:10: body
					{
					pushFollow(FOLLOW_body_in_statement5734);
					body();
					state._fsp--;

					}
					break;
				case 17 :
					// PLSQLPrinter.g:731:10: block
					{
					pushFollow(FOLLOW_block_in_statement5745);
					block();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class label_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "label_declaration"
	// PLSQLPrinter.g:734:1: label_declaration : ^( LABEL_DECLARE label_name ) ;
	public final PLSQLPrinter.label_declaration_return label_declaration() throws RecognitionException {
		PLSQLPrinter.label_declaration_return retval = new PLSQLPrinter.label_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:735:5: ( ^( LABEL_DECLARE label_name ) )
			// PLSQLPrinter.g:735:10: ^( LABEL_DECLARE label_name )
			{
			match(input,LABEL_DECLARE,FOLLOW_LABEL_DECLARE_in_label_declaration5766); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_label_name_in_label_declaration5768);
			label_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "label_declaration"


	public static class assignment_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "assignment_statement"
	// PLSQLPrinter.g:738:1: assignment_statement : ^( ASSIGN general_element expression ) ;
	public final PLSQLPrinter.assignment_statement_return assignment_statement() throws RecognitionException {
		PLSQLPrinter.assignment_statement_return retval = new PLSQLPrinter.assignment_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:739:5: ( ^( ASSIGN general_element expression ) )
			// PLSQLPrinter.g:739:11: ^( ASSIGN general_element expression )
			{
			match(input,ASSIGN,FOLLOW_ASSIGN_in_assignment_statement5791); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_element_in_assignment_statement5793);
			general_element();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_assignment_statement5795);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "assignment_statement"


	public static class continue_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "continue_statement"
	// PLSQLPrinter.g:742:1: continue_statement : ^( CONTINUE_VK ( label_name )? ( general_when )? ) ;
	public final PLSQLPrinter.continue_statement_return continue_statement() throws RecognitionException {
		PLSQLPrinter.continue_statement_return retval = new PLSQLPrinter.continue_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:743:5: ( ^( CONTINUE_VK ( label_name )? ( general_when )? ) )
			// PLSQLPrinter.g:743:10: ^( CONTINUE_VK ( label_name )? ( general_when )? )
			{
			match(input,CONTINUE_VK,FOLLOW_CONTINUE_VK_in_continue_statement5817); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:743:24: ( label_name )?
				int alt185=2;
				int LA185_0 = input.LA(1);
				if ( (LA185_0==LABEL_NAME) ) {
					alt185=1;
				}
				switch (alt185) {
					case 1 :
						// PLSQLPrinter.g:743:24: label_name
						{
						pushFollow(FOLLOW_label_name_in_continue_statement5819);
						label_name();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:743:36: ( general_when )?
				int alt186=2;
				int LA186_0 = input.LA(1);
				if ( (LA186_0==SQL92_RESERVED_WHEN) ) {
					alt186=1;
				}
				switch (alt186) {
					case 1 :
						// PLSQLPrinter.g:743:36: general_when
						{
						pushFollow(FOLLOW_general_when_in_continue_statement5822);
						general_when();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "continue_statement"


	public static class general_when_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_when"
	// PLSQLPrinter.g:746:1: general_when : ^( SQL92_RESERVED_WHEN expression ) ;
	public final PLSQLPrinter.general_when_return general_when() throws RecognitionException {
		PLSQLPrinter.general_when_return retval = new PLSQLPrinter.general_when_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:747:5: ( ^( SQL92_RESERVED_WHEN expression ) )
			// PLSQLPrinter.g:747:10: ^( SQL92_RESERVED_WHEN expression )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_general_when5845); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_general_when5847);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_when"


	public static class exit_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exit_statement"
	// PLSQLPrinter.g:750:1: exit_statement : ^( EXIT_VK ( label_name )? ( general_when )? ) ;
	public final PLSQLPrinter.exit_statement_return exit_statement() throws RecognitionException {
		PLSQLPrinter.exit_statement_return retval = new PLSQLPrinter.exit_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:751:5: ( ^( EXIT_VK ( label_name )? ( general_when )? ) )
			// PLSQLPrinter.g:751:10: ^( EXIT_VK ( label_name )? ( general_when )? )
			{
			match(input,EXIT_VK,FOLLOW_EXIT_VK_in_exit_statement5869); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:751:20: ( label_name )?
				int alt187=2;
				int LA187_0 = input.LA(1);
				if ( (LA187_0==LABEL_NAME) ) {
					alt187=1;
				}
				switch (alt187) {
					case 1 :
						// PLSQLPrinter.g:751:20: label_name
						{
						pushFollow(FOLLOW_label_name_in_exit_statement5871);
						label_name();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:751:32: ( general_when )?
				int alt188=2;
				int LA188_0 = input.LA(1);
				if ( (LA188_0==SQL92_RESERVED_WHEN) ) {
					alt188=1;
				}
				switch (alt188) {
					case 1 :
						// PLSQLPrinter.g:751:32: general_when
						{
						pushFollow(FOLLOW_general_when_in_exit_statement5874);
						general_when();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exit_statement"


	public static class goto_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "goto_statement"
	// PLSQLPrinter.g:754:1: goto_statement : ^( SQL92_RESERVED_GOTO label_name ) ;
	public final PLSQLPrinter.goto_statement_return goto_statement() throws RecognitionException {
		PLSQLPrinter.goto_statement_return retval = new PLSQLPrinter.goto_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:755:5: ( ^( SQL92_RESERVED_GOTO label_name ) )
			// PLSQLPrinter.g:755:10: ^( SQL92_RESERVED_GOTO label_name )
			{
			match(input,SQL92_RESERVED_GOTO,FOLLOW_SQL92_RESERVED_GOTO_in_goto_statement5897); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_label_name_in_goto_statement5899);
			label_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "goto_statement"


	public static class if_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "if_statement"
	// PLSQLPrinter.g:758:1: if_statement : ^( PLSQL_RESERVED_IF expression seq_of_statements ( elsif_part )* ( else_part )? ) ;
	public final PLSQLPrinter.if_statement_return if_statement() throws RecognitionException {
		PLSQLPrinter.if_statement_return retval = new PLSQLPrinter.if_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:759:5: ( ^( PLSQL_RESERVED_IF expression seq_of_statements ( elsif_part )* ( else_part )? ) )
			// PLSQLPrinter.g:759:10: ^( PLSQL_RESERVED_IF expression seq_of_statements ( elsif_part )* ( else_part )? )
			{
			match(input,PLSQL_RESERVED_IF,FOLLOW_PLSQL_RESERVED_IF_in_if_statement5921); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_if_statement5923);
			expression();
			state._fsp--;

			pushFollow(FOLLOW_seq_of_statements_in_if_statement5925);
			seq_of_statements();
			state._fsp--;

			// PLSQLPrinter.g:759:59: ( elsif_part )*
			loop189:
			while (true) {
				int alt189=2;
				int LA189_0 = input.LA(1);
				if ( (LA189_0==PLSQL_NON_RESERVED_ELSIF) ) {
					alt189=1;
				}

				switch (alt189) {
				case 1 :
					// PLSQLPrinter.g:759:59: elsif_part
					{
					pushFollow(FOLLOW_elsif_part_in_if_statement5927);
					elsif_part();
					state._fsp--;

					}
					break;

				default :
					break loop189;
				}
			}

			// PLSQLPrinter.g:759:71: ( else_part )?
			int alt190=2;
			int LA190_0 = input.LA(1);
			if ( (LA190_0==SQL92_RESERVED_ELSE) ) {
				alt190=1;
			}
			switch (alt190) {
				case 1 :
					// PLSQLPrinter.g:759:71: else_part
					{
					pushFollow(FOLLOW_else_part_in_if_statement5930);
					else_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "if_statement"


	public static class elsif_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "elsif_part"
	// PLSQLPrinter.g:762:1: elsif_part : ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements ) ;
	public final PLSQLPrinter.elsif_part_return elsif_part() throws RecognitionException {
		PLSQLPrinter.elsif_part_return retval = new PLSQLPrinter.elsif_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:763:5: ( ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements ) )
			// PLSQLPrinter.g:763:10: ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements )
			{
			match(input,PLSQL_NON_RESERVED_ELSIF,FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_part5953); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_elsif_part5955);
			expression();
			state._fsp--;

			pushFollow(FOLLOW_seq_of_statements_in_elsif_part5957);
			seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "elsif_part"


	public static class else_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "else_part"
	// PLSQLPrinter.g:766:1: else_part : ^( SQL92_RESERVED_ELSE seq_of_statements ) ;
	public final PLSQLPrinter.else_part_return else_part() throws RecognitionException {
		PLSQLPrinter.else_part_return retval = new PLSQLPrinter.else_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:767:5: ( ^( SQL92_RESERVED_ELSE seq_of_statements ) )
			// PLSQLPrinter.g:767:10: ^( SQL92_RESERVED_ELSE seq_of_statements )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_else_part5979); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_seq_of_statements_in_else_part5981);
			seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "else_part"


	public static class loop_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "loop_statement"
	// PLSQLPrinter.g:770:1: loop_statement : ( ^( WHILE_LOOP ( label_name )* expression seq_of_statements ) | ^( FOR_LOOP ( label_name )* cursor_loop_param seq_of_statements ) | ^( LOOP_VK ( label_name )* seq_of_statements ) );
	public final PLSQLPrinter.loop_statement_return loop_statement() throws RecognitionException {
		PLSQLPrinter.loop_statement_return retval = new PLSQLPrinter.loop_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:771:5: ( ^( WHILE_LOOP ( label_name )* expression seq_of_statements ) | ^( FOR_LOOP ( label_name )* cursor_loop_param seq_of_statements ) | ^( LOOP_VK ( label_name )* seq_of_statements ) )
			int alt194=3;
			switch ( input.LA(1) ) {
			case WHILE_LOOP:
				{
				alt194=1;
				}
				break;
			case FOR_LOOP:
				{
				alt194=2;
				}
				break;
			case LOOP_VK:
				{
				alt194=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 194, 0, input);
				throw nvae;
			}
			switch (alt194) {
				case 1 :
					// PLSQLPrinter.g:771:10: ^( WHILE_LOOP ( label_name )* expression seq_of_statements )
					{
					match(input,WHILE_LOOP,FOLLOW_WHILE_LOOP_in_loop_statement6003); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:771:23: ( label_name )*
					loop191:
					while (true) {
						int alt191=2;
						int LA191_0 = input.LA(1);
						if ( (LA191_0==LABEL_NAME) ) {
							alt191=1;
						}

						switch (alt191) {
						case 1 :
							// PLSQLPrinter.g:771:23: label_name
							{
							pushFollow(FOLLOW_label_name_in_loop_statement6005);
							label_name();
							state._fsp--;

							}
							break;

						default :
							break loop191;
						}
					}

					pushFollow(FOLLOW_expression_in_loop_statement6008);
					expression();
					state._fsp--;

					pushFollow(FOLLOW_seq_of_statements_in_loop_statement6010);
					seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:772:10: ^( FOR_LOOP ( label_name )* cursor_loop_param seq_of_statements )
					{
					match(input,FOR_LOOP,FOLLOW_FOR_LOOP_in_loop_statement6023); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:772:21: ( label_name )*
					loop192:
					while (true) {
						int alt192=2;
						int LA192_0 = input.LA(1);
						if ( (LA192_0==LABEL_NAME) ) {
							alt192=1;
						}

						switch (alt192) {
						case 1 :
							// PLSQLPrinter.g:772:21: label_name
							{
							pushFollow(FOLLOW_label_name_in_loop_statement6025);
							label_name();
							state._fsp--;

							}
							break;

						default :
							break loop192;
						}
					}

					pushFollow(FOLLOW_cursor_loop_param_in_loop_statement6028);
					cursor_loop_param();
					state._fsp--;

					pushFollow(FOLLOW_seq_of_statements_in_loop_statement6030);
					seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:773:10: ^( LOOP_VK ( label_name )* seq_of_statements )
					{
					match(input,LOOP_VK,FOLLOW_LOOP_VK_in_loop_statement6043); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:773:20: ( label_name )*
					loop193:
					while (true) {
						int alt193=2;
						int LA193_0 = input.LA(1);
						if ( (LA193_0==LABEL_NAME) ) {
							alt193=1;
						}

						switch (alt193) {
						case 1 :
							// PLSQLPrinter.g:773:20: label_name
							{
							pushFollow(FOLLOW_label_name_in_loop_statement6045);
							label_name();
							state._fsp--;

							}
							break;

						default :
							break loop193;
						}
					}

					pushFollow(FOLLOW_seq_of_statements_in_loop_statement6048);
					seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "loop_statement"


	public static class cursor_loop_param_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_loop_param"
	// PLSQLPrinter.g:778:1: cursor_loop_param : ( ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND expression expression ) ) | ^( CURSOR_BASED_FOR record_name cursor_name ( expression_list )? ) | ^( SELECT_BASED_FOR record_name select_statement ) );
	public final PLSQLPrinter.cursor_loop_param_return cursor_loop_param() throws RecognitionException {
		PLSQLPrinter.cursor_loop_param_return retval = new PLSQLPrinter.cursor_loop_param_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:779:5: ( ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND expression expression ) ) | ^( CURSOR_BASED_FOR record_name cursor_name ( expression_list )? ) | ^( SELECT_BASED_FOR record_name select_statement ) )
			int alt197=3;
			switch ( input.LA(1) ) {
			case INDEXED_FOR:
				{
				alt197=1;
				}
				break;
			case CURSOR_BASED_FOR:
				{
				alt197=2;
				}
				break;
			case SELECT_BASED_FOR:
				{
				alt197=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 197, 0, input);
				throw nvae;
			}
			switch (alt197) {
				case 1 :
					// PLSQLPrinter.g:779:10: ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND expression expression ) )
					{
					match(input,INDEXED_FOR,FOLLOW_INDEXED_FOR_in_cursor_loop_param6072); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_index_name_in_cursor_loop_param6074);
					index_name();
					state._fsp--;

					// PLSQLPrinter.g:779:35: ( REVERSE_VK )?
					int alt195=2;
					int LA195_0 = input.LA(1);
					if ( (LA195_0==REVERSE_VK) ) {
						alt195=1;
					}
					switch (alt195) {
						case 1 :
							// PLSQLPrinter.g:779:35: REVERSE_VK
							{
							match(input,REVERSE_VK,FOLLOW_REVERSE_VK_in_cursor_loop_param6076); 
							}
							break;

					}

					match(input,SIMPLE_BOUND,FOLLOW_SIMPLE_BOUND_in_cursor_loop_param6080); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_cursor_loop_param6082);
					expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_cursor_loop_param6084);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:780:10: ^( CURSOR_BASED_FOR record_name cursor_name ( expression_list )? )
					{
					match(input,CURSOR_BASED_FOR,FOLLOW_CURSOR_BASED_FOR_in_cursor_loop_param6098); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_record_name_in_cursor_loop_param6100);
					record_name();
					state._fsp--;

					pushFollow(FOLLOW_cursor_name_in_cursor_loop_param6102);
					cursor_name();
					state._fsp--;

					// PLSQLPrinter.g:780:53: ( expression_list )?
					int alt196=2;
					int LA196_0 = input.LA(1);
					if ( (LA196_0==EXPR_LIST) ) {
						alt196=1;
					}
					switch (alt196) {
						case 1 :
							// PLSQLPrinter.g:780:53: expression_list
							{
							pushFollow(FOLLOW_expression_list_in_cursor_loop_param6104);
							expression_list();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:781:10: ^( SELECT_BASED_FOR record_name select_statement )
					{
					match(input,SELECT_BASED_FOR,FOLLOW_SELECT_BASED_FOR_in_cursor_loop_param6118); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_record_name_in_cursor_loop_param6120);
					record_name();
					state._fsp--;

					pushFollow(FOLLOW_select_statement_in_cursor_loop_param6122);
					select_statement();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_loop_param"


	public static class forall_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "forall_statement"
	// PLSQLPrinter.g:786:1: forall_statement : ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? ) ;
	public final PLSQLPrinter.forall_statement_return forall_statement() throws RecognitionException {
		PLSQLPrinter.forall_statement_return retval = new PLSQLPrinter.forall_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:787:5: ( ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? ) )
			// PLSQLPrinter.g:787:10: ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? )
			{
			match(input,FORALL_VK,FOLLOW_FORALL_VK_in_forall_statement6146); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_index_name_in_forall_statement6148);
			index_name();
			state._fsp--;

			pushFollow(FOLLOW_bounds_clause_in_forall_statement6150);
			bounds_clause();
			state._fsp--;

			pushFollow(FOLLOW_sql_statement_in_forall_statement6152);
			sql_statement();
			state._fsp--;

			// PLSQLPrinter.g:787:61: ( EXCEPTIONS_VK )?
			int alt198=2;
			int LA198_0 = input.LA(1);
			if ( (LA198_0==EXCEPTIONS_VK) ) {
				alt198=1;
			}
			switch (alt198) {
				case 1 :
					// PLSQLPrinter.g:787:61: EXCEPTIONS_VK
					{
					match(input,EXCEPTIONS_VK,FOLLOW_EXCEPTIONS_VK_in_forall_statement6154); 
					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "forall_statement"


	public static class bounds_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "bounds_clause"
	// PLSQLPrinter.g:790:1: bounds_clause : ( ^( SIMPLE_BOUND expression expression ) | ^( INDICES_BOUND collection_name ( between_bound )? ) | ^( VALUES_BOUND index_name ) );
	public final PLSQLPrinter.bounds_clause_return bounds_clause() throws RecognitionException {
		PLSQLPrinter.bounds_clause_return retval = new PLSQLPrinter.bounds_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:791:5: ( ^( SIMPLE_BOUND expression expression ) | ^( INDICES_BOUND collection_name ( between_bound )? ) | ^( VALUES_BOUND index_name ) )
			int alt200=3;
			switch ( input.LA(1) ) {
			case SIMPLE_BOUND:
				{
				alt200=1;
				}
				break;
			case INDICES_BOUND:
				{
				alt200=2;
				}
				break;
			case VALUES_BOUND:
				{
				alt200=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 200, 0, input);
				throw nvae;
			}
			switch (alt200) {
				case 1 :
					// PLSQLPrinter.g:791:10: ^( SIMPLE_BOUND expression expression )
					{
					match(input,SIMPLE_BOUND,FOLLOW_SIMPLE_BOUND_in_bounds_clause6177); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_bounds_clause6179);
					expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_bounds_clause6181);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:792:10: ^( INDICES_BOUND collection_name ( between_bound )? )
					{
					match(input,INDICES_BOUND,FOLLOW_INDICES_BOUND_in_bounds_clause6194); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_collection_name_in_bounds_clause6196);
					collection_name();
					state._fsp--;

					// PLSQLPrinter.g:792:42: ( between_bound )?
					int alt199=2;
					int LA199_0 = input.LA(1);
					if ( (LA199_0==SQL92_RESERVED_BETWEEN) ) {
						alt199=1;
					}
					switch (alt199) {
						case 1 :
							// PLSQLPrinter.g:792:42: between_bound
							{
							pushFollow(FOLLOW_between_bound_in_bounds_clause6198);
							between_bound();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:793:10: ^( VALUES_BOUND index_name )
					{
					match(input,VALUES_BOUND,FOLLOW_VALUES_BOUND_in_bounds_clause6212); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_index_name_in_bounds_clause6214);
					index_name();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bounds_clause"


	public static class between_bound_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "between_bound"
	// PLSQLPrinter.g:796:1: between_bound : ^( SQL92_RESERVED_BETWEEN expression expression ) ;
	public final PLSQLPrinter.between_bound_return between_bound() throws RecognitionException {
		PLSQLPrinter.between_bound_return retval = new PLSQLPrinter.between_bound_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:797:5: ( ^( SQL92_RESERVED_BETWEEN expression expression ) )
			// PLSQLPrinter.g:797:10: ^( SQL92_RESERVED_BETWEEN expression expression )
			{
			match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_between_bound6237); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_between_bound6239);
			expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_between_bound6241);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "between_bound"


	public static class null_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "null_statement"
	// PLSQLPrinter.g:800:1: null_statement : SQL92_RESERVED_NULL ;
	public final PLSQLPrinter.null_statement_return null_statement() throws RecognitionException {
		PLSQLPrinter.null_statement_return retval = new PLSQLPrinter.null_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:801:5: ( SQL92_RESERVED_NULL )
			// PLSQLPrinter.g:801:10: SQL92_RESERVED_NULL
			{
			match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_null_statement6262); 
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "null_statement"


	public static class raise_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "raise_statement"
	// PLSQLPrinter.g:804:1: raise_statement : ^( RAISE_VK ( exception_name )? ) ;
	public final PLSQLPrinter.raise_statement_return raise_statement() throws RecognitionException {
		PLSQLPrinter.raise_statement_return retval = new PLSQLPrinter.raise_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:805:5: ( ^( RAISE_VK ( exception_name )? ) )
			// PLSQLPrinter.g:805:10: ^( RAISE_VK ( exception_name )? )
			{
			match(input,RAISE_VK,FOLLOW_RAISE_VK_in_raise_statement6283); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:805:21: ( exception_name )?
				int alt201=2;
				int LA201_0 = input.LA(1);
				if ( (LA201_0==EXCEPTION_NAME) ) {
					alt201=1;
				}
				switch (alt201) {
					case 1 :
						// PLSQLPrinter.g:805:21: exception_name
						{
						pushFollow(FOLLOW_exception_name_in_raise_statement6285);
						exception_name();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "raise_statement"


	public static class return_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "return_statement"
	// PLSQLPrinter.g:808:1: return_statement : ^( RETURN_VK ( expression )? ) ;
	public final PLSQLPrinter.return_statement_return return_statement() throws RecognitionException {
		PLSQLPrinter.return_statement_return retval = new PLSQLPrinter.return_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:809:5: ( ^( RETURN_VK ( expression )? ) )
			// PLSQLPrinter.g:809:10: ^( RETURN_VK ( expression )? )
			{
			match(input,RETURN_VK,FOLLOW_RETURN_VK_in_return_statement6308); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:809:22: ( expression )?
				int alt202=2;
				int LA202_0 = input.LA(1);
				if ( (LA202_0==EXPR||LA202_0==LOGIC_EXPR) ) {
					alt202=1;
				}
				switch (alt202) {
					case 1 :
						// PLSQLPrinter.g:809:22: expression
						{
						pushFollow(FOLLOW_expression_in_return_statement6310);
						expression();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "return_statement"


	public static class function_call_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "function_call"
	// PLSQLPrinter.g:812:1: function_call : ^( ROUTINE_CALL general_element ) ;
	public final PLSQLPrinter.function_call_return function_call() throws RecognitionException {
		PLSQLPrinter.function_call_return retval = new PLSQLPrinter.function_call_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:813:5: ( ^( ROUTINE_CALL general_element ) )
			// PLSQLPrinter.g:813:10: ^( ROUTINE_CALL general_element )
			{
			match(input,ROUTINE_CALL,FOLLOW_ROUTINE_CALL_in_function_call6333); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_element_in_function_call6335);
			general_element();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_call"


	public static class body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "body"
	// PLSQLPrinter.g:816:1: body : ^( BODY ( label_name )? seq_of_statements ( exception_clause )? ) ;
	public final PLSQLPrinter.body_return body() throws RecognitionException {
		PLSQLPrinter.body_return retval = new PLSQLPrinter.body_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:817:5: ( ^( BODY ( label_name )? seq_of_statements ( exception_clause )? ) )
			// PLSQLPrinter.g:817:10: ^( BODY ( label_name )? seq_of_statements ( exception_clause )? )
			{
			match(input,BODY,FOLLOW_BODY_in_body6357); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:817:17: ( label_name )?
			int alt203=2;
			int LA203_0 = input.LA(1);
			if ( (LA203_0==LABEL_NAME) ) {
				alt203=1;
			}
			switch (alt203) {
				case 1 :
					// PLSQLPrinter.g:817:17: label_name
					{
					pushFollow(FOLLOW_label_name_in_body6359);
					label_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_seq_of_statements_in_body6362);
			seq_of_statements();
			state._fsp--;

			// PLSQLPrinter.g:817:47: ( exception_clause )?
			int alt204=2;
			int LA204_0 = input.LA(1);
			if ( (LA204_0==SQL92_RESERVED_EXCEPTION) ) {
				alt204=1;
			}
			switch (alt204) {
				case 1 :
					// PLSQLPrinter.g:817:47: exception_clause
					{
					pushFollow(FOLLOW_exception_clause_in_body6364);
					exception_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "body"


	public static class exception_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_clause"
	// PLSQLPrinter.g:822:1: exception_clause : ^( SQL92_RESERVED_EXCEPTION ( exception_handler )+ ) ;
	public final PLSQLPrinter.exception_clause_return exception_clause() throws RecognitionException {
		PLSQLPrinter.exception_clause_return retval = new PLSQLPrinter.exception_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:823:5: ( ^( SQL92_RESERVED_EXCEPTION ( exception_handler )+ ) )
			// PLSQLPrinter.g:823:10: ^( SQL92_RESERVED_EXCEPTION ( exception_handler )+ )
			{
			match(input,SQL92_RESERVED_EXCEPTION,FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_clause6390); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:823:37: ( exception_handler )+
			int cnt205=0;
			loop205:
			while (true) {
				int alt205=2;
				int LA205_0 = input.LA(1);
				if ( (LA205_0==SQL92_RESERVED_WHEN) ) {
					alt205=1;
				}

				switch (alt205) {
				case 1 :
					// PLSQLPrinter.g:823:37: exception_handler
					{
					pushFollow(FOLLOW_exception_handler_in_exception_clause6392);
					exception_handler();
					state._fsp--;

					}
					break;

				default :
					if ( cnt205 >= 1 ) break loop205;
					EarlyExitException eee = new EarlyExitException(205, input);
					throw eee;
				}
				cnt205++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_clause"


	public static class exception_handler_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_handler"
	// PLSQLPrinter.g:826:1: exception_handler : ^( SQL92_RESERVED_WHEN ( exception_name )+ seq_of_statements ) ;
	public final PLSQLPrinter.exception_handler_return exception_handler() throws RecognitionException {
		PLSQLPrinter.exception_handler_return retval = new PLSQLPrinter.exception_handler_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:827:5: ( ^( SQL92_RESERVED_WHEN ( exception_name )+ seq_of_statements ) )
			// PLSQLPrinter.g:827:10: ^( SQL92_RESERVED_WHEN ( exception_name )+ seq_of_statements )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_exception_handler6415); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:827:32: ( exception_name )+
			int cnt206=0;
			loop206:
			while (true) {
				int alt206=2;
				int LA206_0 = input.LA(1);
				if ( (LA206_0==EXCEPTION_NAME) ) {
					alt206=1;
				}

				switch (alt206) {
				case 1 :
					// PLSQLPrinter.g:827:32: exception_name
					{
					pushFollow(FOLLOW_exception_name_in_exception_handler6417);
					exception_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt206 >= 1 ) break loop206;
					EarlyExitException eee = new EarlyExitException(206, input);
					throw eee;
				}
				cnt206++;
			}

			pushFollow(FOLLOW_seq_of_statements_in_exception_handler6420);
			seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_handler"


	public static class block_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "block"
	// PLSQLPrinter.g:832:1: block : ^( BLOCK ( declare_spec )* body ) ;
	public final PLSQLPrinter.block_return block() throws RecognitionException {
		PLSQLPrinter.block_return retval = new PLSQLPrinter.block_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:833:5: ( ^( BLOCK ( declare_spec )* body ) )
			// PLSQLPrinter.g:833:10: ^( BLOCK ( declare_spec )* body )
			{
			match(input,BLOCK,FOLLOW_BLOCK_in_block6444); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:833:18: ( declare_spec )*
			loop207:
			while (true) {
				int alt207=2;
				int LA207_0 = input.LA(1);
				if ( (LA207_0==CREATE_FUNCTION||LA207_0==CREATE_PROCEDURE||LA207_0==CURSOR_DECLARE||LA207_0==EXCEPTION_DECLARE||LA207_0==PRAGMA_DECLARE||(LA207_0 >= RECORD_TYPE_DECLARE && LA207_0 <= RECORD_VAR_DECLARE)||LA207_0==SUBTYPE_DECLARE||(LA207_0 >= TABLE_TYPE_DECLARE && LA207_0 <= TABLE_VAR_DECLARE)||LA207_0==VARIABLE_DECLARE) ) {
					alt207=1;
				}

				switch (alt207) {
				case 1 :
					// PLSQLPrinter.g:833:18: declare_spec
					{
					pushFollow(FOLLOW_declare_spec_in_block6446);
					declare_spec();
					state._fsp--;

					}
					break;

				default :
					break loop207;
				}
			}

			pushFollow(FOLLOW_body_in_block6449);
			body();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "block"


	public static class sql_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sql_statement"
	// PLSQLPrinter.g:840:1: sql_statement : ( execute_immediate | data_manipulation_language_statements | cursor_manipulation_statements | transaction_control_statements );
	public final PLSQLPrinter.sql_statement_return sql_statement() throws RecognitionException {
		PLSQLPrinter.sql_statement_return retval = new PLSQLPrinter.sql_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:841:5: ( execute_immediate | data_manipulation_language_statements | cursor_manipulation_statements | transaction_control_statements )
			int alt208=4;
			switch ( input.LA(1) ) {
			case EXECUTE_VK:
				{
				alt208=1;
				}
				break;
			case PLSQL_RESERVED_LOCK:
			case SQL92_RESERVED_DELETE:
			case SQL92_RESERVED_INSERT:
			case SQL92_RESERVED_UPDATE:
			case MERGE_VK:
			case SELECT_STATEMENT:
				{
				alt208=2;
				}
				break;
			case SQL92_RESERVED_FETCH:
			case CLOSE_VK:
			case OPEN_VK:
				{
				alt208=3;
				}
				break;
			case COMMIT_VK:
			case ROLLBACK_VK:
			case SAVEPOINT_VK:
			case SET_CONSTRAINT:
			case SET_TRANSACTION:
				{
				alt208=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 208, 0, input);
				throw nvae;
			}
			switch (alt208) {
				case 1 :
					// PLSQLPrinter.g:841:10: execute_immediate
					{
					pushFollow(FOLLOW_execute_immediate_in_sql_statement6474);
					execute_immediate();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:842:10: data_manipulation_language_statements
					{
					pushFollow(FOLLOW_data_manipulation_language_statements_in_sql_statement6485);
					data_manipulation_language_statements();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:843:10: cursor_manipulation_statements
					{
					pushFollow(FOLLOW_cursor_manipulation_statements_in_sql_statement6496);
					cursor_manipulation_statements();
					state._fsp--;

					}
					break;
				case 4 :
					// PLSQLPrinter.g:844:10: transaction_control_statements
					{
					pushFollow(FOLLOW_transaction_control_statements_in_sql_statement6507);
					transaction_control_statements();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sql_statement"


	public static class execute_immediate_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "execute_immediate"
	// PLSQLPrinter.g:847:1: execute_immediate : ^( EXECUTE_VK expression ( into_clause | using_clause | dynamic_returning_clause )? ) ;
	public final PLSQLPrinter.execute_immediate_return execute_immediate() throws RecognitionException {
		PLSQLPrinter.execute_immediate_return retval = new PLSQLPrinter.execute_immediate_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:848:5: ( ^( EXECUTE_VK expression ( into_clause | using_clause | dynamic_returning_clause )? ) )
			// PLSQLPrinter.g:848:10: ^( EXECUTE_VK expression ( into_clause | using_clause | dynamic_returning_clause )? )
			{
			match(input,EXECUTE_VK,FOLLOW_EXECUTE_VK_in_execute_immediate6528); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_execute_immediate6530);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:848:34: ( into_clause | using_clause | dynamic_returning_clause )?
			int alt209=4;
			switch ( input.LA(1) ) {
				case SQL92_RESERVED_INTO:
				case BULK_VK:
					{
					alt209=1;
					}
					break;
				case PLSQL_NON_RESERVED_USING:
					{
					alt209=2;
					}
					break;
				case DYNAMIC_RETURN:
					{
					alt209=3;
					}
					break;
			}
			switch (alt209) {
				case 1 :
					// PLSQLPrinter.g:848:35: into_clause
					{
					pushFollow(FOLLOW_into_clause_in_execute_immediate6533);
					into_clause();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:848:47: using_clause
					{
					pushFollow(FOLLOW_using_clause_in_execute_immediate6535);
					using_clause();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:848:60: dynamic_returning_clause
					{
					pushFollow(FOLLOW_dynamic_returning_clause_in_execute_immediate6537);
					dynamic_returning_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "execute_immediate"


	public static class dynamic_returning_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dynamic_returning_clause"
	// PLSQLPrinter.g:852:1: dynamic_returning_clause : ^( DYNAMIC_RETURN into_clause ) ;
	public final PLSQLPrinter.dynamic_returning_clause_return dynamic_returning_clause() throws RecognitionException {
		PLSQLPrinter.dynamic_returning_clause_return retval = new PLSQLPrinter.dynamic_returning_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:853:5: ( ^( DYNAMIC_RETURN into_clause ) )
			// PLSQLPrinter.g:853:10: ^( DYNAMIC_RETURN into_clause )
			{
			match(input,DYNAMIC_RETURN,FOLLOW_DYNAMIC_RETURN_in_dynamic_returning_clause6563); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_into_clause_in_dynamic_returning_clause6565);
			into_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dynamic_returning_clause"


	public static class data_manipulation_language_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "data_manipulation_language_statements"
	// PLSQLPrinter.g:860:1: data_manipulation_language_statements : ( merge_statement | lock_table_statement | select_statement | update_statement | delete_statement | insert_statement );
	public final PLSQLPrinter.data_manipulation_language_statements_return data_manipulation_language_statements() throws RecognitionException {
		PLSQLPrinter.data_manipulation_language_statements_return retval = new PLSQLPrinter.data_manipulation_language_statements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:861:5: ( merge_statement | lock_table_statement | select_statement | update_statement | delete_statement | insert_statement )
			int alt210=6;
			switch ( input.LA(1) ) {
			case MERGE_VK:
				{
				alt210=1;
				}
				break;
			case PLSQL_RESERVED_LOCK:
				{
				alt210=2;
				}
				break;
			case SELECT_STATEMENT:
				{
				alt210=3;
				}
				break;
			case SQL92_RESERVED_UPDATE:
				{
				alt210=4;
				}
				break;
			case SQL92_RESERVED_DELETE:
				{
				alt210=5;
				}
				break;
			case SQL92_RESERVED_INSERT:
				{
				alt210=6;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 210, 0, input);
				throw nvae;
			}
			switch (alt210) {
				case 1 :
					// PLSQLPrinter.g:861:10: merge_statement
					{
					pushFollow(FOLLOW_merge_statement_in_data_manipulation_language_statements6590);
					merge_statement();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:862:10: lock_table_statement
					{
					pushFollow(FOLLOW_lock_table_statement_in_data_manipulation_language_statements6601);
					lock_table_statement();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:863:10: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_data_manipulation_language_statements6612);
					select_statement();
					state._fsp--;

					}
					break;
				case 4 :
					// PLSQLPrinter.g:864:11: update_statement
					{
					pushFollow(FOLLOW_update_statement_in_data_manipulation_language_statements6624);
					update_statement();
					state._fsp--;

					}
					break;
				case 5 :
					// PLSQLPrinter.g:865:11: delete_statement
					{
					pushFollow(FOLLOW_delete_statement_in_data_manipulation_language_statements6636);
					delete_statement();
					state._fsp--;

					}
					break;
				case 6 :
					// PLSQLPrinter.g:866:10: insert_statement
					{
					pushFollow(FOLLOW_insert_statement_in_data_manipulation_language_statements6647);
					insert_statement();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "data_manipulation_language_statements"


	public static class select_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "select_statement"
	// PLSQLPrinter.g:869:1: select_statement : ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* ) ;
	public final PLSQLPrinter.select_statement_return select_statement() throws RecognitionException {
		PLSQLPrinter.select_statement_return retval = new PLSQLPrinter.select_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:870:5: ( ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* ) )
			// PLSQLPrinter.g:870:10: ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* )
			{
			match(input,SELECT_STATEMENT,FOLLOW_SELECT_STATEMENT_in_select_statement6668); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:870:29: ( subquery_factoring_clause )?
			int alt211=2;
			int LA211_0 = input.LA(1);
			if ( (LA211_0==SQL92_RESERVED_WITH) ) {
				alt211=1;
			}
			switch (alt211) {
				case 1 :
					// PLSQLPrinter.g:870:29: subquery_factoring_clause
					{
					pushFollow(FOLLOW_subquery_factoring_clause_in_select_statement6670);
					subquery_factoring_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_subquery_in_select_statement6673);
			subquery();
			state._fsp--;

			// PLSQLPrinter.g:870:65: ( for_update_clause )*
			loop212:
			while (true) {
				int alt212=2;
				int LA212_0 = input.LA(1);
				if ( (LA212_0==SQL92_RESERVED_FOR) ) {
					alt212=1;
				}

				switch (alt212) {
				case 1 :
					// PLSQLPrinter.g:870:65: for_update_clause
					{
					pushFollow(FOLLOW_for_update_clause_in_select_statement6675);
					for_update_clause();
					state._fsp--;

					}
					break;

				default :
					break loop212;
				}
			}

			// PLSQLPrinter.g:870:84: ( order_by_clause )*
			loop213:
			while (true) {
				int alt213=2;
				int LA213_0 = input.LA(1);
				if ( (LA213_0==SQL92_RESERVED_ORDER) ) {
					alt213=1;
				}

				switch (alt213) {
				case 1 :
					// PLSQLPrinter.g:870:84: order_by_clause
					{
					pushFollow(FOLLOW_order_by_clause_in_select_statement6678);
					order_by_clause();
					state._fsp--;

					}
					break;

				default :
					break loop213;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "select_statement"


	public static class subquery_factoring_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_factoring_clause"
	// PLSQLPrinter.g:874:1: subquery_factoring_clause : ^( SQL92_RESERVED_WITH ( factoring_element )+ ) ;
	public final PLSQLPrinter.subquery_factoring_clause_return subquery_factoring_clause() throws RecognitionException {
		PLSQLPrinter.subquery_factoring_clause_return retval = new PLSQLPrinter.subquery_factoring_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:875:5: ( ^( SQL92_RESERVED_WITH ( factoring_element )+ ) )
			// PLSQLPrinter.g:875:10: ^( SQL92_RESERVED_WITH ( factoring_element )+ )
			{
			match(input,SQL92_RESERVED_WITH,FOLLOW_SQL92_RESERVED_WITH_in_subquery_factoring_clause6704); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:875:32: ( factoring_element )+
			int cnt214=0;
			loop214:
			while (true) {
				int alt214=2;
				int LA214_0 = input.LA(1);
				if ( (LA214_0==FACTORING) ) {
					alt214=1;
				}

				switch (alt214) {
				case 1 :
					// PLSQLPrinter.g:875:32: factoring_element
					{
					pushFollow(FOLLOW_factoring_element_in_subquery_factoring_clause6706);
					factoring_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt214 >= 1 ) break loop214;
					EarlyExitException eee = new EarlyExitException(214, input);
					throw eee;
				}
				cnt214++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_factoring_clause"


	public static class factoring_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "factoring_element"
	// PLSQLPrinter.g:878:1: factoring_element : ^( FACTORING query_name subquery ) ;
	public final PLSQLPrinter.factoring_element_return factoring_element() throws RecognitionException {
		PLSQLPrinter.factoring_element_return retval = new PLSQLPrinter.factoring_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:879:5: ( ^( FACTORING query_name subquery ) )
			// PLSQLPrinter.g:879:10: ^( FACTORING query_name subquery )
			{
			match(input,FACTORING,FOLLOW_FACTORING_in_factoring_element6729); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_query_name_in_factoring_element6731);
			query_name();
			state._fsp--;

			pushFollow(FOLLOW_subquery_in_factoring_element6733);
			subquery();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factoring_element"


	public static class subquery_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery"
	// PLSQLPrinter.g:882:1: subquery : ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* ) ;
	public final PLSQLPrinter.subquery_return subquery() throws RecognitionException {
		PLSQLPrinter.subquery_return retval = new PLSQLPrinter.subquery_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:883:5: ( ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* ) )
			// PLSQLPrinter.g:883:10: ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* )
			{
			match(input,SUBQUERY,FOLLOW_SUBQUERY_in_subquery6755); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_subquery_basic_elements_in_subquery6757);
			subquery_basic_elements();
			state._fsp--;

			// PLSQLPrinter.g:883:45: ( subquery_operation_part )*
			loop215:
			while (true) {
				int alt215=2;
				int LA215_0 = input.LA(1);
				if ( (LA215_0==PLSQL_RESERVED_MINUS||LA215_0==SQL92_RESERVED_INTERSECT||LA215_0==SQL92_RESERVED_UNION) ) {
					alt215=1;
				}

				switch (alt215) {
				case 1 :
					// PLSQLPrinter.g:883:45: subquery_operation_part
					{
					pushFollow(FOLLOW_subquery_operation_part_in_subquery6759);
					subquery_operation_part();
					state._fsp--;

					}
					break;

				default :
					break loop215;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery"


	public static class subquery_operation_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_operation_part"
	// PLSQLPrinter.g:886:1: subquery_operation_part : ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements ) ;
	public final PLSQLPrinter.subquery_operation_part_return subquery_operation_part() throws RecognitionException {
		PLSQLPrinter.subquery_operation_part_return retval = new PLSQLPrinter.subquery_operation_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:887:5: ( ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements ) )
			// PLSQLPrinter.g:887:10: ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements )
			{
			if ( input.LA(1)==PLSQL_RESERVED_MINUS||input.LA(1)==SQL92_RESERVED_INTERSECT||input.LA(1)==SQL92_RESERVED_UNION ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:887:81: ( SQL92_RESERVED_ALL )?
			int alt216=2;
			int LA216_0 = input.LA(1);
			if ( (LA216_0==SQL92_RESERVED_ALL) ) {
				alt216=1;
			}
			switch (alt216) {
				case 1 :
					// PLSQLPrinter.g:887:81: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_subquery_operation_part6790); 
					}
					break;

			}

			pushFollow(FOLLOW_subquery_basic_elements_in_subquery_operation_part6793);
			subquery_basic_elements();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_operation_part"


	public static class subquery_basic_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_basic_elements"
	// PLSQLPrinter.g:890:1: subquery_basic_elements : ( query_block | subquery );
	public final PLSQLPrinter.subquery_basic_elements_return subquery_basic_elements() throws RecognitionException {
		PLSQLPrinter.subquery_basic_elements_return retval = new PLSQLPrinter.subquery_basic_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:891:5: ( query_block | subquery )
			int alt217=2;
			int LA217_0 = input.LA(1);
			if ( (LA217_0==SQL92_RESERVED_SELECT) ) {
				alt217=1;
			}
			else if ( (LA217_0==SUBQUERY) ) {
				alt217=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 217, 0, input);
				throw nvae;
			}

			switch (alt217) {
				case 1 :
					// PLSQLPrinter.g:891:10: query_block
					{
					pushFollow(FOLLOW_query_block_in_subquery_basic_elements6814);
					query_block();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:892:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_subquery_basic_elements6825);
					subquery();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_basic_elements"


	public static class query_block_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_block"
	// PLSQLPrinter.g:895:1: query_block : ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? ( SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST ( selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( having_clause )? ( model_clause )? ) ;
	public final PLSQLPrinter.query_block_return query_block() throws RecognitionException {
		PLSQLPrinter.query_block_return retval = new PLSQLPrinter.query_block_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:896:5: ( ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? ( SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST ( selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( having_clause )? ( model_clause )? ) )
			// PLSQLPrinter.g:896:10: ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? ( SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST ( selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( having_clause )? ( model_clause )? )
			{
			match(input,SQL92_RESERVED_SELECT,FOLLOW_SQL92_RESERVED_SELECT_in_query_block6846); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_from_clause_in_query_block6861);
			from_clause();
			state._fsp--;

			// PLSQLPrinter.g:898:13: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )?
			int alt218=2;
			int LA218_0 = input.LA(1);
			if ( (LA218_0==SQL92_RESERVED_DISTINCT||LA218_0==SQL92_RESERVED_UNIQUE) ) {
				alt218=1;
			}
			switch (alt218) {
				case 1 :
					// PLSQLPrinter.g:
					{
					if ( input.LA(1)==SQL92_RESERVED_DISTINCT||input.LA(1)==SQL92_RESERVED_UNIQUE ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// PLSQLPrinter.g:898:62: ( SQL92_RESERVED_ALL )?
			int alt219=2;
			int LA219_0 = input.LA(1);
			if ( (LA219_0==SQL92_RESERVED_ALL) ) {
				alt219=1;
			}
			switch (alt219) {
				case 1 :
					// PLSQLPrinter.g:898:62: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_query_block6883); 
					}
					break;

			}

			// PLSQLPrinter.g:899:13: ( ASTERISK | ^( SELECT_LIST ( selected_element )+ ) )
			int alt221=2;
			int LA221_0 = input.LA(1);
			if ( (LA221_0==ASTERISK) ) {
				alt221=1;
			}
			else if ( (LA221_0==SELECT_LIST) ) {
				alt221=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 221, 0, input);
				throw nvae;
			}

			switch (alt221) {
				case 1 :
					// PLSQLPrinter.g:899:18: ASTERISK
					{
					match(input,ASTERISK,FOLLOW_ASTERISK_in_query_block6904); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:900:18: ^( SELECT_LIST ( selected_element )+ )
					{
					match(input,SELECT_LIST,FOLLOW_SELECT_LIST_in_query_block6924); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:900:32: ( selected_element )+
					int cnt220=0;
					loop220:
					while (true) {
						int alt220=2;
						int LA220_0 = input.LA(1);
						if ( (LA220_0==SELECT_ITEM) ) {
							alt220=1;
						}

						switch (alt220) {
						case 1 :
							// PLSQLPrinter.g:900:32: selected_element
							{
							pushFollow(FOLLOW_selected_element_in_query_block6926);
							selected_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt220 >= 1 ) break loop220;
							EarlyExitException eee = new EarlyExitException(220, input);
							throw eee;
						}
						cnt220++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}

			// PLSQLPrinter.g:902:13: ( into_clause )?
			int alt222=2;
			int LA222_0 = input.LA(1);
			if ( (LA222_0==SQL92_RESERVED_INTO||LA222_0==BULK_VK) ) {
				alt222=1;
			}
			switch (alt222) {
				case 1 :
					// PLSQLPrinter.g:902:13: into_clause
					{
					pushFollow(FOLLOW_into_clause_in_query_block6956);
					into_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:902:26: ( where_clause )?
			int alt223=2;
			int LA223_0 = input.LA(1);
			if ( (LA223_0==SQL92_RESERVED_WHERE) ) {
				alt223=1;
			}
			switch (alt223) {
				case 1 :
					// PLSQLPrinter.g:902:26: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_query_block6959);
					where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:902:40: ( hierarchical_query_clause )?
			int alt224=2;
			int LA224_0 = input.LA(1);
			if ( (LA224_0==HIERARCHICAL) ) {
				alt224=1;
			}
			switch (alt224) {
				case 1 :
					// PLSQLPrinter.g:902:40: hierarchical_query_clause
					{
					pushFollow(FOLLOW_hierarchical_query_clause_in_query_block6962);
					hierarchical_query_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:903:13: ( group_by_clause )?
			int alt225=2;
			int LA225_0 = input.LA(1);
			if ( (LA225_0==SQL92_RESERVED_GROUP) ) {
				alt225=1;
			}
			switch (alt225) {
				case 1 :
					// PLSQLPrinter.g:903:13: group_by_clause
					{
					pushFollow(FOLLOW_group_by_clause_in_query_block6978);
					group_by_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:903:30: ( having_clause )?
			int alt226=2;
			int LA226_0 = input.LA(1);
			if ( (LA226_0==SQL92_RESERVED_HAVING) ) {
				alt226=1;
			}
			switch (alt226) {
				case 1 :
					// PLSQLPrinter.g:903:30: having_clause
					{
					pushFollow(FOLLOW_having_clause_in_query_block6981);
					having_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:903:45: ( model_clause )?
			int alt227=2;
			int LA227_0 = input.LA(1);
			if ( (LA227_0==PLSQL_NON_RESERVED_MODEL) ) {
				alt227=1;
			}
			switch (alt227) {
				case 1 :
					// PLSQLPrinter.g:903:45: model_clause
					{
					pushFollow(FOLLOW_model_clause_in_query_block6984);
					model_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_block"


	public static class selected_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "selected_element"
	// PLSQLPrinter.g:907:1: selected_element : ^( SELECT_ITEM expression ( alias )? ) ;
	public final PLSQLPrinter.selected_element_return selected_element() throws RecognitionException {
		PLSQLPrinter.selected_element_return retval = new PLSQLPrinter.selected_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:908:5: ( ^( SELECT_ITEM expression ( alias )? ) )
			// PLSQLPrinter.g:908:10: ^( SELECT_ITEM expression ( alias )? )
			{
			match(input,SELECT_ITEM,FOLLOW_SELECT_ITEM_in_selected_element7016); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_selected_element7018);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:908:35: ( alias )?
			int alt228=2;
			int LA228_0 = input.LA(1);
			if ( (LA228_0==ALIAS) ) {
				alt228=1;
			}
			switch (alt228) {
				case 1 :
					// PLSQLPrinter.g:908:35: alias
					{
					pushFollow(FOLLOW_alias_in_selected_element7020);
					alias();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selected_element"


	public static class from_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "from_clause"
	// PLSQLPrinter.g:911:1: from_clause : ^( SQL92_RESERVED_FROM ( table_ref )+ ) ;
	public final PLSQLPrinter.from_clause_return from_clause() throws RecognitionException {
		PLSQLPrinter.from_clause_return retval = new PLSQLPrinter.from_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:912:5: ( ^( SQL92_RESERVED_FROM ( table_ref )+ ) )
			// PLSQLPrinter.g:912:10: ^( SQL92_RESERVED_FROM ( table_ref )+ )
			{
			match(input,SQL92_RESERVED_FROM,FOLLOW_SQL92_RESERVED_FROM_in_from_clause7043); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:912:32: ( table_ref )+
			int cnt229=0;
			loop229:
			while (true) {
				int alt229=2;
				int LA229_0 = input.LA(1);
				if ( (LA229_0==TABLE_REF) ) {
					alt229=1;
				}

				switch (alt229) {
				case 1 :
					// PLSQLPrinter.g:912:32: table_ref
					{
					pushFollow(FOLLOW_table_ref_in_from_clause7045);
					table_ref();
					state._fsp--;

					}
					break;

				default :
					if ( cnt229 >= 1 ) break loop229;
					EarlyExitException eee = new EarlyExitException(229, input);
					throw eee;
				}
				cnt229++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "from_clause"


	public static class table_ref_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_ref"
	// PLSQLPrinter.g:915:1: table_ref : ^( TABLE_REF table_ref_aux ( join_clause )* ) ;
	public final PLSQLPrinter.table_ref_return table_ref() throws RecognitionException {
		PLSQLPrinter.table_ref_return retval = new PLSQLPrinter.table_ref_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:916:5: ( ^( TABLE_REF table_ref_aux ( join_clause )* ) )
			// PLSQLPrinter.g:916:10: ^( TABLE_REF table_ref_aux ( join_clause )* )
			{
			match(input,TABLE_REF,FOLLOW_TABLE_REF_in_table_ref7068); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_table_ref_aux_in_table_ref7070);
			table_ref_aux();
			state._fsp--;

			// PLSQLPrinter.g:916:36: ( join_clause )*
			loop230:
			while (true) {
				int alt230=2;
				int LA230_0 = input.LA(1);
				if ( (LA230_0==JOIN_DEF) ) {
					alt230=1;
				}

				switch (alt230) {
				case 1 :
					// PLSQLPrinter.g:916:36: join_clause
					{
					pushFollow(FOLLOW_join_clause_in_table_ref7072);
					join_clause();
					state._fsp--;

					}
					break;

				default :
					break loop230;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_ref"


	public static class table_ref_aux_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_ref_aux"
	// PLSQLPrinter.g:919:1: table_ref_aux : ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ) ;
	public final PLSQLPrinter.table_ref_aux_return table_ref_aux() throws RecognitionException {
		PLSQLPrinter.table_ref_aux_return retval = new PLSQLPrinter.table_ref_aux_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:920:5: ( ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ) )
			// PLSQLPrinter.g:920:10: ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* )
			{
			match(input,TABLE_REF_ELEMENT,FOLLOW_TABLE_REF_ELEMENT_in_table_ref_aux7095); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:920:30: ( alias )?
			int alt231=2;
			int LA231_0 = input.LA(1);
			if ( (LA231_0==ALIAS) ) {
				alt231=1;
			}
			switch (alt231) {
				case 1 :
					// PLSQLPrinter.g:920:30: alias
					{
					pushFollow(FOLLOW_alias_in_table_ref_aux7097);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_table_expression_clause_in_table_ref_aux7100);
			dml_table_expression_clause();
			state._fsp--;

			// PLSQLPrinter.g:920:65: ( ONLY_VK )?
			int alt232=2;
			int LA232_0 = input.LA(1);
			if ( (LA232_0==ONLY_VK) ) {
				alt232=1;
			}
			switch (alt232) {
				case 1 :
					// PLSQLPrinter.g:920:65: ONLY_VK
					{
					match(input,ONLY_VK,FOLLOW_ONLY_VK_in_table_ref_aux7102); 
					}
					break;

			}

			// PLSQLPrinter.g:920:74: ( pivot_clause )?
			int alt233=2;
			int LA233_0 = input.LA(1);
			if ( (LA233_0==PIVOT_VK) ) {
				alt233=1;
			}
			switch (alt233) {
				case 1 :
					// PLSQLPrinter.g:920:74: pivot_clause
					{
					pushFollow(FOLLOW_pivot_clause_in_table_ref_aux7105);
					pivot_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:920:88: ( unpivot_clause )?
			int alt234=2;
			int LA234_0 = input.LA(1);
			if ( (LA234_0==UNPIVOT_VK) ) {
				alt234=1;
			}
			switch (alt234) {
				case 1 :
					// PLSQLPrinter.g:920:88: unpivot_clause
					{
					pushFollow(FOLLOW_unpivot_clause_in_table_ref_aux7108);
					unpivot_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:920:104: ( flashback_query_clause )*
			loop235:
			while (true) {
				int alt235=2;
				int LA235_0 = input.LA(1);
				if ( (LA235_0==SQL92_RESERVED_AS||LA235_0==VERSIONS_VK) ) {
					alt235=1;
				}

				switch (alt235) {
				case 1 :
					// PLSQLPrinter.g:920:104: flashback_query_clause
					{
					pushFollow(FOLLOW_flashback_query_clause_in_table_ref_aux7111);
					flashback_query_clause();
					state._fsp--;

					}
					break;

				default :
					break loop235;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_ref_aux"


	public static class join_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "join_clause"
	// PLSQLPrinter.g:923:1: join_clause : ^( JOIN_DEF ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux ( query_partition_clause )* ( join_on_part | join_using_part )? ) ;
	public final PLSQLPrinter.join_clause_return join_clause() throws RecognitionException {
		PLSQLPrinter.join_clause_return retval = new PLSQLPrinter.join_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:924:5: ( ^( JOIN_DEF ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux ( query_partition_clause )* ( join_on_part | join_using_part )? ) )
			// PLSQLPrinter.g:924:10: ^( JOIN_DEF ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux ( query_partition_clause )* ( join_on_part | join_using_part )? )
			{
			match(input,JOIN_DEF,FOLLOW_JOIN_DEF_in_join_clause7134); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:924:21: ( CROSS_VK | NATURAL_VK )?
			int alt236=2;
			int LA236_0 = input.LA(1);
			if ( (LA236_0==CROSS_VK||LA236_0==NATURAL_VK) ) {
				alt236=1;
			}
			switch (alt236) {
				case 1 :
					// PLSQLPrinter.g:
					{
					if ( input.LA(1)==CROSS_VK||input.LA(1)==NATURAL_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// PLSQLPrinter.g:924:44: ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )?
			int alt237=2;
			int LA237_0 = input.LA(1);
			if ( (LA237_0==FULL_VK||LA237_0==INNER_VK||LA237_0==LEFT_VK||LA237_0==RIGHT_VK) ) {
				alt237=1;
			}
			switch (alt237) {
				case 1 :
					// PLSQLPrinter.g:
					{
					if ( input.LA(1)==FULL_VK||input.LA(1)==INNER_VK||input.LA(1)==LEFT_VK||input.LA(1)==RIGHT_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			pushFollow(FOLLOW_table_ref_aux_in_join_clause7154);
			table_ref_aux();
			state._fsp--;

			// PLSQLPrinter.g:924:95: ( query_partition_clause )*
			loop238:
			while (true) {
				int alt238=2;
				int LA238_0 = input.LA(1);
				if ( (LA238_0==PARTITION_VK) ) {
					alt238=1;
				}

				switch (alt238) {
				case 1 :
					// PLSQLPrinter.g:924:95: query_partition_clause
					{
					pushFollow(FOLLOW_query_partition_clause_in_join_clause7156);
					query_partition_clause();
					state._fsp--;

					}
					break;

				default :
					break loop238;
				}
			}

			// PLSQLPrinter.g:924:119: ( join_on_part | join_using_part )?
			int alt239=3;
			int LA239_0 = input.LA(1);
			if ( (LA239_0==SQL92_RESERVED_ON) ) {
				alt239=1;
			}
			else if ( (LA239_0==PLSQL_NON_RESERVED_USING) ) {
				alt239=2;
			}
			switch (alt239) {
				case 1 :
					// PLSQLPrinter.g:924:120: join_on_part
					{
					pushFollow(FOLLOW_join_on_part_in_join_clause7160);
					join_on_part();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:924:133: join_using_part
					{
					pushFollow(FOLLOW_join_using_part_in_join_clause7162);
					join_using_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_clause"


	public static class join_on_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "join_on_part"
	// PLSQLPrinter.g:927:1: join_on_part : ^( SQL92_RESERVED_ON expression ) ;
	public final PLSQLPrinter.join_on_part_return join_on_part() throws RecognitionException {
		PLSQLPrinter.join_on_part_return retval = new PLSQLPrinter.join_on_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:928:5: ( ^( SQL92_RESERVED_ON expression ) )
			// PLSQLPrinter.g:928:10: ^( SQL92_RESERVED_ON expression )
			{
			match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_join_on_part7187); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_join_on_part7189);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_on_part"


	public static class join_using_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "join_using_part"
	// PLSQLPrinter.g:931:1: join_using_part : ^( PLSQL_NON_RESERVED_USING ( column_name )+ ) ;
	public final PLSQLPrinter.join_using_part_return join_using_part() throws RecognitionException {
		PLSQLPrinter.join_using_part_return retval = new PLSQLPrinter.join_using_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:932:5: ( ^( PLSQL_NON_RESERVED_USING ( column_name )+ ) )
			// PLSQLPrinter.g:932:10: ^( PLSQL_NON_RESERVED_USING ( column_name )+ )
			{
			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_join_using_part7212); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:932:37: ( column_name )+
			int cnt240=0;
			loop240:
			while (true) {
				int alt240=2;
				int LA240_0 = input.LA(1);
				if ( (LA240_0==COLUMN_NAME) ) {
					alt240=1;
				}

				switch (alt240) {
				case 1 :
					// PLSQLPrinter.g:932:37: column_name
					{
					pushFollow(FOLLOW_column_name_in_join_using_part7214);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt240 >= 1 ) break loop240;
					EarlyExitException eee = new EarlyExitException(240, input);
					throw eee;
				}
				cnt240++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_using_part"


	public static class query_partition_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_partition_clause"
	// PLSQLPrinter.g:935:1: query_partition_clause : ^( PARTITION_VK ( subquery | expression_list | ( expression )+ ) ) ;
	public final PLSQLPrinter.query_partition_clause_return query_partition_clause() throws RecognitionException {
		PLSQLPrinter.query_partition_clause_return retval = new PLSQLPrinter.query_partition_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:936:5: ( ^( PARTITION_VK ( subquery | expression_list | ( expression )+ ) ) )
			// PLSQLPrinter.g:936:10: ^( PARTITION_VK ( subquery | expression_list | ( expression )+ ) )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_query_partition_clause7237); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:936:25: ( subquery | expression_list | ( expression )+ )
			int alt242=3;
			switch ( input.LA(1) ) {
			case SUBQUERY:
				{
				alt242=1;
				}
				break;
			case EXPR_LIST:
				{
				alt242=2;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt242=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 242, 0, input);
				throw nvae;
			}
			switch (alt242) {
				case 1 :
					// PLSQLPrinter.g:936:26: subquery
					{
					pushFollow(FOLLOW_subquery_in_query_partition_clause7240);
					subquery();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:936:35: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_query_partition_clause7242);
					expression_list();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:936:51: ( expression )+
					{
					// PLSQLPrinter.g:936:51: ( expression )+
					int cnt241=0;
					loop241:
					while (true) {
						int alt241=2;
						int LA241_0 = input.LA(1);
						if ( (LA241_0==EXPR||LA241_0==LOGIC_EXPR) ) {
							alt241=1;
						}

						switch (alt241) {
						case 1 :
							// PLSQLPrinter.g:936:51: expression
							{
							pushFollow(FOLLOW_expression_in_query_partition_clause7244);
							expression();
							state._fsp--;

							}
							break;

						default :
							if ( cnt241 >= 1 ) break loop241;
							EarlyExitException eee = new EarlyExitException(241, input);
							throw eee;
						}
						cnt241++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_partition_clause"


	public static class flashback_query_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "flashback_query_clause"
	// PLSQLPrinter.g:939:1: flashback_query_clause : ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression ) ;
	public final PLSQLPrinter.flashback_query_clause_return flashback_query_clause() throws RecognitionException {
		PLSQLPrinter.flashback_query_clause_return retval = new PLSQLPrinter.flashback_query_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:940:5: ( ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression ) )
			// PLSQLPrinter.g:940:10: ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression )
			{
			if ( input.LA(1)==SQL92_RESERVED_AS||input.LA(1)==VERSIONS_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:940:44: ( SCN_VK | TIMESTAMP_VK )?
			int alt243=2;
			int LA243_0 = input.LA(1);
			if ( (LA243_0==SCN_VK||LA243_0==TIMESTAMP_VK) ) {
				alt243=1;
			}
			switch (alt243) {
				case 1 :
					// PLSQLPrinter.g:
					{
					if ( input.LA(1)==SCN_VK||input.LA(1)==TIMESTAMP_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_flashback_query_clause7281);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "flashback_query_clause"


	public static class pivot_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_clause"
	// PLSQLPrinter.g:943:1: pivot_clause : ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) ;
	public final PLSQLPrinter.pivot_clause_return pivot_clause() throws RecognitionException {
		PLSQLPrinter.pivot_clause_return retval = new PLSQLPrinter.pivot_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:944:5: ( ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) )
			// PLSQLPrinter.g:944:10: ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause )
			{
			match(input,PIVOT_VK,FOLLOW_PIVOT_VK_in_pivot_clause7304); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:944:21: ( XML_VK )?
			int alt244=2;
			int LA244_0 = input.LA(1);
			if ( (LA244_0==XML_VK) ) {
				alt244=1;
			}
			switch (alt244) {
				case 1 :
					// PLSQLPrinter.g:944:21: XML_VK
					{
					match(input,XML_VK,FOLLOW_XML_VK_in_pivot_clause7306); 
					}
					break;

			}

			// PLSQLPrinter.g:944:29: ( pivot_element )+
			int cnt245=0;
			loop245:
			while (true) {
				int alt245=2;
				int LA245_0 = input.LA(1);
				if ( (LA245_0==PIVOT_ELEMENT) ) {
					alt245=1;
				}

				switch (alt245) {
				case 1 :
					// PLSQLPrinter.g:944:29: pivot_element
					{
					pushFollow(FOLLOW_pivot_element_in_pivot_clause7309);
					pivot_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt245 >= 1 ) break loop245;
					EarlyExitException eee = new EarlyExitException(245, input);
					throw eee;
				}
				cnt245++;
			}

			pushFollow(FOLLOW_pivot_for_clause_in_pivot_clause7312);
			pivot_for_clause();
			state._fsp--;

			pushFollow(FOLLOW_pivot_in_clause_in_pivot_clause7314);
			pivot_in_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_clause"


	public static class pivot_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_element"
	// PLSQLPrinter.g:947:1: pivot_element : ^( PIVOT_ELEMENT ( alias )? expression ) ;
	public final PLSQLPrinter.pivot_element_return pivot_element() throws RecognitionException {
		PLSQLPrinter.pivot_element_return retval = new PLSQLPrinter.pivot_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:948:5: ( ^( PIVOT_ELEMENT ( alias )? expression ) )
			// PLSQLPrinter.g:948:10: ^( PIVOT_ELEMENT ( alias )? expression )
			{
			match(input,PIVOT_ELEMENT,FOLLOW_PIVOT_ELEMENT_in_pivot_element7336); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:948:26: ( alias )?
			int alt246=2;
			int LA246_0 = input.LA(1);
			if ( (LA246_0==ALIAS) ) {
				alt246=1;
			}
			switch (alt246) {
				case 1 :
					// PLSQLPrinter.g:948:26: alias
					{
					pushFollow(FOLLOW_alias_in_pivot_element7338);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_expression_in_pivot_element7341);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_element"


	public static class pivot_for_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_for_clause"
	// PLSQLPrinter.g:951:1: pivot_for_clause : ^( SQL92_RESERVED_FOR ( column_name )+ ) ;
	public final PLSQLPrinter.pivot_for_clause_return pivot_for_clause() throws RecognitionException {
		PLSQLPrinter.pivot_for_clause_return retval = new PLSQLPrinter.pivot_for_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:952:5: ( ^( SQL92_RESERVED_FOR ( column_name )+ ) )
			// PLSQLPrinter.g:952:10: ^( SQL92_RESERVED_FOR ( column_name )+ )
			{
			match(input,SQL92_RESERVED_FOR,FOLLOW_SQL92_RESERVED_FOR_in_pivot_for_clause7363); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:952:31: ( column_name )+
			int cnt247=0;
			loop247:
			while (true) {
				int alt247=2;
				int LA247_0 = input.LA(1);
				if ( (LA247_0==COLUMN_NAME) ) {
					alt247=1;
				}

				switch (alt247) {
				case 1 :
					// PLSQLPrinter.g:952:31: column_name
					{
					pushFollow(FOLLOW_column_name_in_pivot_for_clause7365);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt247 >= 1 ) break loop247;
					EarlyExitException eee = new EarlyExitException(247, input);
					throw eee;
				}
				cnt247++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_for_clause"


	public static class pivot_in_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_in_clause"
	// PLSQLPrinter.g:955:1: pivot_in_clause : ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ) ;
	public final PLSQLPrinter.pivot_in_clause_return pivot_in_clause() throws RecognitionException {
		PLSQLPrinter.pivot_in_clause_return retval = new PLSQLPrinter.pivot_in_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:956:5: ( ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ) )
			// PLSQLPrinter.g:956:10: ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) )
			{
			match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_pivot_in_clause7388); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:957:9: ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) )
			int alt250=3;
			switch ( input.LA(1) ) {
			case SUBQUERY:
				{
				alt250=1;
				}
				break;
			case ANY_MODE:
				{
				alt250=2;
				}
				break;
			case ELEMENTS_MODE:
				{
				alt250=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 250, 0, input);
				throw nvae;
			}
			switch (alt250) {
				case 1 :
					// PLSQLPrinter.g:957:14: subquery
					{
					pushFollow(FOLLOW_subquery_in_pivot_in_clause7404);
					subquery();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:958:14: ^( ANY_MODE ( SQL92_RESERVED_ANY )+ )
					{
					match(input,ANY_MODE,FOLLOW_ANY_MODE_in_pivot_in_clause7420); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:958:25: ( SQL92_RESERVED_ANY )+
					int cnt248=0;
					loop248:
					while (true) {
						int alt248=2;
						int LA248_0 = input.LA(1);
						if ( (LA248_0==SQL92_RESERVED_ANY) ) {
							alt248=1;
						}

						switch (alt248) {
						case 1 :
							// PLSQLPrinter.g:958:25: SQL92_RESERVED_ANY
							{
							match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_pivot_in_clause7422); 
							}
							break;

						default :
							if ( cnt248 >= 1 ) break loop248;
							EarlyExitException eee = new EarlyExitException(248, input);
							throw eee;
						}
						cnt248++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:959:14: ^( ELEMENTS_MODE ( pivot_in_clause_element )+ )
					{
					match(input,ELEMENTS_MODE,FOLLOW_ELEMENTS_MODE_in_pivot_in_clause7440); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:959:30: ( pivot_in_clause_element )+
					int cnt249=0;
					loop249:
					while (true) {
						int alt249=2;
						int LA249_0 = input.LA(1);
						if ( (LA249_0==PIVOT_IN_ELEMENT) ) {
							alt249=1;
						}

						switch (alt249) {
						case 1 :
							// PLSQLPrinter.g:959:30: pivot_in_clause_element
							{
							pushFollow(FOLLOW_pivot_in_clause_element_in_pivot_in_clause7442);
							pivot_in_clause_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt249 >= 1 ) break loop249;
							EarlyExitException eee = new EarlyExitException(249, input);
							throw eee;
						}
						cnt249++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_in_clause"


	public static class pivot_in_clause_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_in_clause_element"
	// PLSQLPrinter.g:964:1: pivot_in_clause_element : ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) ) ;
	public final PLSQLPrinter.pivot_in_clause_element_return pivot_in_clause_element() throws RecognitionException {
		PLSQLPrinter.pivot_in_clause_element_return retval = new PLSQLPrinter.pivot_in_clause_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:965:5: ( ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) ) )
			// PLSQLPrinter.g:965:10: ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) )
			{
			match(input,PIVOT_IN_ELEMENT,FOLLOW_PIVOT_IN_ELEMENT_in_pivot_in_clause_element7485); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:965:29: ( alias )?
			int alt251=2;
			int LA251_0 = input.LA(1);
			if ( (LA251_0==ALIAS) ) {
				alt251=1;
			}
			switch (alt251) {
				case 1 :
					// PLSQLPrinter.g:965:29: alias
					{
					pushFollow(FOLLOW_alias_in_pivot_in_clause_element7487);
					alias();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:965:36: ( expression | expression_list )
			int alt252=2;
			int LA252_0 = input.LA(1);
			if ( (LA252_0==EXPR||LA252_0==LOGIC_EXPR) ) {
				alt252=1;
			}
			else if ( (LA252_0==EXPR_LIST) ) {
				alt252=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 252, 0, input);
				throw nvae;
			}

			switch (alt252) {
				case 1 :
					// PLSQLPrinter.g:965:37: expression
					{
					pushFollow(FOLLOW_expression_in_pivot_in_clause_element7491);
					expression();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:965:48: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_pivot_in_clause_element7493);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_in_clause_element"


	public static class unpivot_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unpivot_clause"
	// PLSQLPrinter.g:968:1: unpivot_clause : ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause ) ;
	public final PLSQLPrinter.unpivot_clause_return unpivot_clause() throws RecognitionException {
		PLSQLPrinter.unpivot_clause_return retval = new PLSQLPrinter.unpivot_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:969:5: ( ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause ) )
			// PLSQLPrinter.g:969:10: ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause )
			{
			match(input,UNPIVOT_VK,FOLLOW_UNPIVOT_VK_in_unpivot_clause7516); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:969:23: ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )?
			int alt254=2;
			int LA254_0 = input.LA(1);
			if ( (LA254_0==EXCLUDE_VK||LA254_0==INCLUDE_VK) ) {
				alt254=1;
			}
			switch (alt254) {
				case 1 :
					// PLSQLPrinter.g:969:24: ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )?
					{
					if ( input.LA(1)==EXCLUDE_VK||input.LA(1)==INCLUDE_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// PLSQLPrinter.g:969:48: ( NULLS_VK )?
					int alt253=2;
					int LA253_0 = input.LA(1);
					if ( (LA253_0==NULLS_VK) ) {
						alt253=1;
					}
					switch (alt253) {
						case 1 :
							// PLSQLPrinter.g:969:48: NULLS_VK
							{
							match(input,NULLS_VK,FOLLOW_NULLS_VK_in_unpivot_clause7525); 
							}
							break;

					}

					}
					break;

			}

			// PLSQLPrinter.g:969:60: ( column_name )+
			int cnt255=0;
			loop255:
			while (true) {
				int alt255=2;
				int LA255_0 = input.LA(1);
				if ( (LA255_0==COLUMN_NAME) ) {
					alt255=1;
				}

				switch (alt255) {
				case 1 :
					// PLSQLPrinter.g:969:60: column_name
					{
					pushFollow(FOLLOW_column_name_in_unpivot_clause7530);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt255 >= 1 ) break loop255;
					EarlyExitException eee = new EarlyExitException(255, input);
					throw eee;
				}
				cnt255++;
			}

			pushFollow(FOLLOW_pivot_for_clause_in_unpivot_clause7533);
			pivot_for_clause();
			state._fsp--;

			pushFollow(FOLLOW_unpivot_in_clause_in_unpivot_clause7535);
			unpivot_in_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unpivot_clause"


	public static class unpivot_in_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unpivot_in_clause"
	// PLSQLPrinter.g:972:1: unpivot_in_clause : ^( SQL92_RESERVED_IN ( unpivot_in_element )+ ) ;
	public final PLSQLPrinter.unpivot_in_clause_return unpivot_in_clause() throws RecognitionException {
		PLSQLPrinter.unpivot_in_clause_return retval = new PLSQLPrinter.unpivot_in_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:973:5: ( ^( SQL92_RESERVED_IN ( unpivot_in_element )+ ) )
			// PLSQLPrinter.g:973:10: ^( SQL92_RESERVED_IN ( unpivot_in_element )+ )
			{
			match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_unpivot_in_clause7557); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:973:30: ( unpivot_in_element )+
			int cnt256=0;
			loop256:
			while (true) {
				int alt256=2;
				int LA256_0 = input.LA(1);
				if ( (LA256_0==UNPIVOT_IN_ELEMENT) ) {
					alt256=1;
				}

				switch (alt256) {
				case 1 :
					// PLSQLPrinter.g:973:30: unpivot_in_element
					{
					pushFollow(FOLLOW_unpivot_in_element_in_unpivot_in_clause7559);
					unpivot_in_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt256 >= 1 ) break loop256;
					EarlyExitException eee = new EarlyExitException(256, input);
					throw eee;
				}
				cnt256++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unpivot_in_clause"


	public static class unpivot_in_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unpivot_in_element"
	// PLSQLPrinter.g:976:1: unpivot_in_element : ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) ) ;
	public final PLSQLPrinter.unpivot_in_element_return unpivot_in_element() throws RecognitionException {
		PLSQLPrinter.unpivot_in_element_return retval = new PLSQLPrinter.unpivot_in_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:977:5: ( ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) ) )
			// PLSQLPrinter.g:977:10: ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) )
			{
			match(input,UNPIVOT_IN_ELEMENT,FOLLOW_UNPIVOT_IN_ELEMENT_in_unpivot_in_element7582); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:977:31: ( column_name )+
			int cnt257=0;
			loop257:
			while (true) {
				int alt257=2;
				int LA257_0 = input.LA(1);
				if ( (LA257_0==COLUMN_NAME) ) {
					alt257=1;
				}

				switch (alt257) {
				case 1 :
					// PLSQLPrinter.g:977:31: column_name
					{
					pushFollow(FOLLOW_column_name_in_unpivot_in_element7584);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt257 >= 1 ) break loop257;
					EarlyExitException eee = new EarlyExitException(257, input);
					throw eee;
				}
				cnt257++;
			}

			match(input,PIVOT_ALIAS,FOLLOW_PIVOT_ALIAS_in_unpivot_in_element7588); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:977:58: ( expression | expression_list )
			int alt258=2;
			int LA258_0 = input.LA(1);
			if ( (LA258_0==EXPR||LA258_0==LOGIC_EXPR) ) {
				alt258=1;
			}
			else if ( (LA258_0==EXPR_LIST) ) {
				alt258=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 258, 0, input);
				throw nvae;
			}

			switch (alt258) {
				case 1 :
					// PLSQLPrinter.g:977:59: expression
					{
					pushFollow(FOLLOW_expression_in_unpivot_in_element7591);
					expression();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:977:70: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_unpivot_in_element7593);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unpivot_in_element"


	public static class hierarchical_query_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "hierarchical_query_clause"
	// PLSQLPrinter.g:980:1: hierarchical_query_clause : ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) ) ;
	public final PLSQLPrinter.hierarchical_query_clause_return hierarchical_query_clause() throws RecognitionException {
		PLSQLPrinter.hierarchical_query_clause_return retval = new PLSQLPrinter.hierarchical_query_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:981:5: ( ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) ) )
			// PLSQLPrinter.g:981:10: ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) )
			{
			match(input,HIERARCHICAL,FOLLOW_HIERARCHICAL_in_hierarchical_query_clause7617); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:981:25: ( start_part )?
			int alt259=2;
			int LA259_0 = input.LA(1);
			if ( (LA259_0==PLSQL_RESERVED_START) ) {
				alt259=1;
			}
			switch (alt259) {
				case 1 :
					// PLSQLPrinter.g:981:25: start_part
					{
					pushFollow(FOLLOW_start_part_in_hierarchical_query_clause7619);
					start_part();
					state._fsp--;

					}
					break;

			}

			match(input,SQL92_RESERVED_CONNECT,FOLLOW_SQL92_RESERVED_CONNECT_in_hierarchical_query_clause7623); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:981:62: ( NOCYCLE_VK )?
			int alt260=2;
			int LA260_0 = input.LA(1);
			if ( (LA260_0==NOCYCLE_VK) ) {
				alt260=1;
			}
			switch (alt260) {
				case 1 :
					// PLSQLPrinter.g:981:62: NOCYCLE_VK
					{
					match(input,NOCYCLE_VK,FOLLOW_NOCYCLE_VK_in_hierarchical_query_clause7625); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_hierarchical_query_clause7628);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "hierarchical_query_clause"


	public static class start_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "start_part"
	// PLSQLPrinter.g:984:1: start_part : ^( PLSQL_RESERVED_START expression ) ;
	public final PLSQLPrinter.start_part_return start_part() throws RecognitionException {
		PLSQLPrinter.start_part_return retval = new PLSQLPrinter.start_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:985:5: ( ^( PLSQL_RESERVED_START expression ) )
			// PLSQLPrinter.g:985:10: ^( PLSQL_RESERVED_START expression )
			{
			match(input,PLSQL_RESERVED_START,FOLLOW_PLSQL_RESERVED_START_in_start_part7651); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_start_part7653);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "start_part"


	public static class group_by_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "group_by_clause"
	// PLSQLPrinter.g:988:1: group_by_clause : ^( SQL92_RESERVED_GROUP ( group_by_element )+ ) ;
	public final PLSQLPrinter.group_by_clause_return group_by_clause() throws RecognitionException {
		PLSQLPrinter.group_by_clause_return retval = new PLSQLPrinter.group_by_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:989:5: ( ^( SQL92_RESERVED_GROUP ( group_by_element )+ ) )
			// PLSQLPrinter.g:989:10: ^( SQL92_RESERVED_GROUP ( group_by_element )+ )
			{
			match(input,SQL92_RESERVED_GROUP,FOLLOW_SQL92_RESERVED_GROUP_in_group_by_clause7675); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:989:33: ( group_by_element )+
			int cnt261=0;
			loop261:
			while (true) {
				int alt261=2;
				int LA261_0 = input.LA(1);
				if ( (LA261_0==GROUP_BY_ELEMENT) ) {
					alt261=1;
				}

				switch (alt261) {
				case 1 :
					// PLSQLPrinter.g:989:33: group_by_element
					{
					pushFollow(FOLLOW_group_by_element_in_group_by_clause7677);
					group_by_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt261 >= 1 ) break loop261;
					EarlyExitException eee = new EarlyExitException(261, input);
					throw eee;
				}
				cnt261++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_by_clause"


	public static class group_by_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "group_by_element"
	// PLSQLPrinter.g:992:1: group_by_element : ^( GROUP_BY_ELEMENT group_by_elements ) ;
	public final PLSQLPrinter.group_by_element_return group_by_element() throws RecognitionException {
		PLSQLPrinter.group_by_element_return retval = new PLSQLPrinter.group_by_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:993:5: ( ^( GROUP_BY_ELEMENT group_by_elements ) )
			// PLSQLPrinter.g:993:10: ^( GROUP_BY_ELEMENT group_by_elements )
			{
			match(input,GROUP_BY_ELEMENT,FOLLOW_GROUP_BY_ELEMENT_in_group_by_element7700); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_group_by_elements_in_group_by_element7702);
			group_by_elements();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_by_element"


	public static class group_by_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "group_by_elements"
	// PLSQLPrinter.g:996:1: group_by_elements : ( ^( GROUPING_VK ( groupin_set )+ ) | grouping_element );
	public final PLSQLPrinter.group_by_elements_return group_by_elements() throws RecognitionException {
		PLSQLPrinter.group_by_elements_return retval = new PLSQLPrinter.group_by_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:997:5: ( ^( GROUPING_VK ( groupin_set )+ ) | grouping_element )
			int alt263=2;
			int LA263_0 = input.LA(1);
			if ( (LA263_0==GROUPING_VK) ) {
				alt263=1;
			}
			else if ( (LA263_0==CUBE_VK||(LA263_0 >= EXPR && LA263_0 <= EXPR_LIST)||LA263_0==LOGIC_EXPR||LA263_0==ROLLUP_VK) ) {
				alt263=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 263, 0, input);
				throw nvae;
			}

			switch (alt263) {
				case 1 :
					// PLSQLPrinter.g:997:10: ^( GROUPING_VK ( groupin_set )+ )
					{
					match(input,GROUPING_VK,FOLLOW_GROUPING_VK_in_group_by_elements7724); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:997:24: ( groupin_set )+
					int cnt262=0;
					loop262:
					while (true) {
						int alt262=2;
						int LA262_0 = input.LA(1);
						if ( (LA262_0==GROUPIN_SET) ) {
							alt262=1;
						}

						switch (alt262) {
						case 1 :
							// PLSQLPrinter.g:997:24: groupin_set
							{
							pushFollow(FOLLOW_groupin_set_in_group_by_elements7726);
							groupin_set();
							state._fsp--;

							}
							break;

						default :
							if ( cnt262 >= 1 ) break loop262;
							EarlyExitException eee = new EarlyExitException(262, input);
							throw eee;
						}
						cnt262++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:998:10: grouping_element
					{
					pushFollow(FOLLOW_grouping_element_in_group_by_elements7739);
					grouping_element();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_by_elements"


	public static class groupin_set_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "groupin_set"
	// PLSQLPrinter.g:1001:1: groupin_set : ^( GROUPIN_SET grouping_element ) ;
	public final PLSQLPrinter.groupin_set_return groupin_set() throws RecognitionException {
		PLSQLPrinter.groupin_set_return retval = new PLSQLPrinter.groupin_set_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1002:5: ( ^( GROUPIN_SET grouping_element ) )
			// PLSQLPrinter.g:1002:10: ^( GROUPIN_SET grouping_element )
			{
			match(input,GROUPIN_SET,FOLLOW_GROUPIN_SET_in_groupin_set7761); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_grouping_element_in_groupin_set7763);
			grouping_element();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "groupin_set"


	public static class grouping_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "grouping_element"
	// PLSQLPrinter.g:1005:1: grouping_element : ( ^( ( ROLLUP_VK | CUBE_VK ) ( grouping_element )+ ) | expression_list | expression );
	public final PLSQLPrinter.grouping_element_return grouping_element() throws RecognitionException {
		PLSQLPrinter.grouping_element_return retval = new PLSQLPrinter.grouping_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1006:5: ( ^( ( ROLLUP_VK | CUBE_VK ) ( grouping_element )+ ) | expression_list | expression )
			int alt265=3;
			switch ( input.LA(1) ) {
			case CUBE_VK:
			case ROLLUP_VK:
				{
				alt265=1;
				}
				break;
			case EXPR_LIST:
				{
				alt265=2;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt265=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 265, 0, input);
				throw nvae;
			}
			switch (alt265) {
				case 1 :
					// PLSQLPrinter.g:1006:10: ^( ( ROLLUP_VK | CUBE_VK ) ( grouping_element )+ )
					{
					if ( input.LA(1)==CUBE_VK||input.LA(1)==ROLLUP_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1006:32: ( grouping_element )+
					int cnt264=0;
					loop264:
					while (true) {
						int alt264=2;
						int LA264_0 = input.LA(1);
						if ( (LA264_0==CUBE_VK||(LA264_0 >= EXPR && LA264_0 <= EXPR_LIST)||LA264_0==LOGIC_EXPR||LA264_0==ROLLUP_VK) ) {
							alt264=1;
						}

						switch (alt264) {
						case 1 :
							// PLSQLPrinter.g:1006:32: grouping_element
							{
							pushFollow(FOLLOW_grouping_element_in_grouping_element7791);
							grouping_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt264 >= 1 ) break loop264;
							EarlyExitException eee = new EarlyExitException(264, input);
							throw eee;
						}
						cnt264++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1007:10: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_grouping_element7804);
					expression_list();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1008:10: expression
					{
					pushFollow(FOLLOW_expression_in_grouping_element7815);
					expression();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grouping_element"


	public static class having_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "having_clause"
	// PLSQLPrinter.g:1011:1: having_clause : ^( SQL92_RESERVED_HAVING expression ) ;
	public final PLSQLPrinter.having_clause_return having_clause() throws RecognitionException {
		PLSQLPrinter.having_clause_return retval = new PLSQLPrinter.having_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1012:5: ( ^( SQL92_RESERVED_HAVING expression ) )
			// PLSQLPrinter.g:1012:10: ^( SQL92_RESERVED_HAVING expression )
			{
			match(input,SQL92_RESERVED_HAVING,FOLLOW_SQL92_RESERVED_HAVING_in_having_clause7837); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_having_clause7839);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "having_clause"


	public static class model_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_clause"
	// PLSQLPrinter.g:1015:1: model_clause : ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) ;
	public final PLSQLPrinter.model_clause_return model_clause() throws RecognitionException {
		PLSQLPrinter.model_clause_return retval = new PLSQLPrinter.model_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1016:5: ( ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) )
			// PLSQLPrinter.g:1016:10: ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* )
			{
			match(input,PLSQL_NON_RESERVED_MODEL,FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_clause7861); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_main_model_in_model_clause7863);
			main_model();
			state._fsp--;

			// PLSQLPrinter.g:1016:48: ( cell_reference_options )*
			loop266:
			while (true) {
				int alt266=2;
				int LA266_0 = input.LA(1);
				if ( (LA266_0==SQL92_RESERVED_UNIQUE||LA266_0==IGNORE_VK||LA266_0==KEEP_VK) ) {
					alt266=1;
				}

				switch (alt266) {
				case 1 :
					// PLSQLPrinter.g:1016:48: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_model_clause7865);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop266;
				}
			}

			// PLSQLPrinter.g:1016:72: ( return_rows_clause )?
			int alt267=2;
			int LA267_0 = input.LA(1);
			if ( (LA267_0==RETURN_VK) ) {
				alt267=1;
			}
			switch (alt267) {
				case 1 :
					// PLSQLPrinter.g:1016:72: return_rows_clause
					{
					pushFollow(FOLLOW_return_rows_clause_in_model_clause7868);
					return_rows_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1016:92: ( reference_model )*
			loop268:
			while (true) {
				int alt268=2;
				int LA268_0 = input.LA(1);
				if ( (LA268_0==REFERENCE_VK) ) {
					alt268=1;
				}

				switch (alt268) {
				case 1 :
					// PLSQLPrinter.g:1016:92: reference_model
					{
					pushFollow(FOLLOW_reference_model_in_model_clause7871);
					reference_model();
					state._fsp--;

					}
					break;

				default :
					break loop268;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_clause"


	public static class cell_reference_options_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cell_reference_options"
	// PLSQLPrinter.g:1019:1: cell_reference_options : ( ^( ( IGNORE_VK | KEEP_VK ) NAV_VK ) | ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) ) );
	public final PLSQLPrinter.cell_reference_options_return cell_reference_options() throws RecognitionException {
		PLSQLPrinter.cell_reference_options_return retval = new PLSQLPrinter.cell_reference_options_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1020:5: ( ^( ( IGNORE_VK | KEEP_VK ) NAV_VK ) | ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) ) )
			int alt269=2;
			int LA269_0 = input.LA(1);
			if ( (LA269_0==IGNORE_VK||LA269_0==KEEP_VK) ) {
				alt269=1;
			}
			else if ( (LA269_0==SQL92_RESERVED_UNIQUE) ) {
				alt269=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 269, 0, input);
				throw nvae;
			}

			switch (alt269) {
				case 1 :
					// PLSQLPrinter.g:1020:10: ^( ( IGNORE_VK | KEEP_VK ) NAV_VK )
					{
					if ( input.LA(1)==IGNORE_VK||input.LA(1)==KEEP_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					match(input,NAV_VK,FOLLOW_NAV_VK_in_cell_reference_options7900); 
					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1021:10: ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) )
					{
					match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_cell_reference_options7913); 
					match(input, Token.DOWN, null); 
					if ( input.LA(1)==DIMENSION_VK||input.LA(1)==SINGLE_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cell_reference_options"


	public static class return_rows_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "return_rows_clause"
	// PLSQLPrinter.g:1024:1: return_rows_clause : ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) ) ;
	public final PLSQLPrinter.return_rows_clause_return return_rows_clause() throws RecognitionException {
		PLSQLPrinter.return_rows_clause_return retval = new PLSQLPrinter.return_rows_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1025:5: ( ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) ) )
			// PLSQLPrinter.g:1025:10: ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) )
			{
			match(input,RETURN_VK,FOLLOW_RETURN_VK_in_return_rows_clause7941); 
			match(input, Token.DOWN, null); 
			if ( input.LA(1)==SQL92_RESERVED_ALL||input.LA(1)==UPDATED_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "return_rows_clause"


	public static class reference_model_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "reference_model"
	// PLSQLPrinter.g:1028:1: reference_model : ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* ) ;
	public final PLSQLPrinter.reference_model_return reference_model() throws RecognitionException {
		PLSQLPrinter.reference_model_return retval = new PLSQLPrinter.reference_model_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1029:5: ( ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* ) )
			// PLSQLPrinter.g:1029:10: ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* )
			{
			match(input,REFERENCE_VK,FOLLOW_REFERENCE_VK_in_reference_model7969); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_reference_model_name_in_reference_model7971);
			reference_model_name();
			state._fsp--;

			pushFollow(FOLLOW_subquery_in_reference_model7973);
			subquery();
			state._fsp--;

			pushFollow(FOLLOW_model_column_clauses_in_reference_model7975);
			model_column_clauses();
			state._fsp--;

			// PLSQLPrinter.g:1029:76: ( cell_reference_options )*
			loop270:
			while (true) {
				int alt270=2;
				int LA270_0 = input.LA(1);
				if ( (LA270_0==SQL92_RESERVED_UNIQUE||LA270_0==IGNORE_VK||LA270_0==KEEP_VK) ) {
					alt270=1;
				}

				switch (alt270) {
				case 1 :
					// PLSQLPrinter.g:1029:76: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_reference_model7977);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop270;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reference_model"


	public static class main_model_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "main_model"
	// PLSQLPrinter.g:1032:1: main_model : ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) ;
	public final PLSQLPrinter.main_model_return main_model() throws RecognitionException {
		PLSQLPrinter.main_model_return retval = new PLSQLPrinter.main_model_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1033:5: ( ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) )
			// PLSQLPrinter.g:1033:10: ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* )
			{
			match(input,MAIN_MODEL,FOLLOW_MAIN_MODEL_in_main_model8000); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1033:23: ( main_model_name )?
			int alt271=2;
			int LA271_0 = input.LA(1);
			if ( (LA271_0==MAIN_MODEL_NAME) ) {
				alt271=1;
			}
			switch (alt271) {
				case 1 :
					// PLSQLPrinter.g:1033:23: main_model_name
					{
					pushFollow(FOLLOW_main_model_name_in_main_model8002);
					main_model_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_model_column_clauses_in_main_model8005);
			model_column_clauses();
			state._fsp--;

			pushFollow(FOLLOW_model_rules_clause_in_main_model8007);
			model_rules_clause();
			state._fsp--;

			// PLSQLPrinter.g:1033:80: ( cell_reference_options )*
			loop272:
			while (true) {
				int alt272=2;
				int LA272_0 = input.LA(1);
				if ( (LA272_0==SQL92_RESERVED_UNIQUE||LA272_0==IGNORE_VK||LA272_0==KEEP_VK) ) {
					alt272=1;
				}

				switch (alt272) {
				case 1 :
					// PLSQLPrinter.g:1033:80: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_main_model8009);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop272;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "main_model"


	public static class model_column_clauses_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column_clauses"
	// PLSQLPrinter.g:1036:1: model_column_clauses : ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? ) ;
	public final PLSQLPrinter.model_column_clauses_return model_column_clauses() throws RecognitionException {
		PLSQLPrinter.model_column_clauses_return retval = new PLSQLPrinter.model_column_clauses_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1037:5: ( ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? ) )
			// PLSQLPrinter.g:1037:10: ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? )
			{
			match(input,MODEL_COLUMN,FOLLOW_MODEL_COLUMN_in_model_column_clauses8032); 
			match(input, Token.DOWN, null); 
			match(input,DIMENSION_VK,FOLLOW_DIMENSION_VK_in_model_column_clauses8035); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_clauses8037);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input,MEASURES_VK,FOLLOW_MEASURES_VK_in_model_column_clauses8041); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_clauses8043);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1037:92: ( model_column_partition_part )?
			int alt273=2;
			int LA273_0 = input.LA(1);
			if ( (LA273_0==PARTITION_VK) ) {
				alt273=1;
			}
			switch (alt273) {
				case 1 :
					// PLSQLPrinter.g:1037:92: model_column_partition_part
					{
					pushFollow(FOLLOW_model_column_partition_part_in_model_column_clauses8046);
					model_column_partition_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column_clauses"


	public static class model_column_partition_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column_partition_part"
	// PLSQLPrinter.g:1040:1: model_column_partition_part : ^( PARTITION_VK model_column_list ) ;
	public final PLSQLPrinter.model_column_partition_part_return model_column_partition_part() throws RecognitionException {
		PLSQLPrinter.model_column_partition_part_return retval = new PLSQLPrinter.model_column_partition_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1041:5: ( ^( PARTITION_VK model_column_list ) )
			// PLSQLPrinter.g:1041:10: ^( PARTITION_VK model_column_list )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_model_column_partition_part8069); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_partition_part8071);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column_partition_part"


	public static class model_column_list_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column_list"
	// PLSQLPrinter.g:1044:1: model_column_list : ^( MODEL_COLUMNS ( model_column )+ ) ;
	public final PLSQLPrinter.model_column_list_return model_column_list() throws RecognitionException {
		PLSQLPrinter.model_column_list_return retval = new PLSQLPrinter.model_column_list_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1045:5: ( ^( MODEL_COLUMNS ( model_column )+ ) )
			// PLSQLPrinter.g:1045:10: ^( MODEL_COLUMNS ( model_column )+ )
			{
			match(input,MODEL_COLUMNS,FOLLOW_MODEL_COLUMNS_in_model_column_list8093); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1045:26: ( model_column )+
			int cnt274=0;
			loop274:
			while (true) {
				int alt274=2;
				int LA274_0 = input.LA(1);
				if ( (LA274_0==MODEL_COLUMN) ) {
					alt274=1;
				}

				switch (alt274) {
				case 1 :
					// PLSQLPrinter.g:1045:26: model_column
					{
					pushFollow(FOLLOW_model_column_in_model_column_list8095);
					model_column();
					state._fsp--;

					}
					break;

				default :
					if ( cnt274 >= 1 ) break loop274;
					EarlyExitException eee = new EarlyExitException(274, input);
					throw eee;
				}
				cnt274++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column_list"


	public static class model_column_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column"
	// PLSQLPrinter.g:1048:1: model_column : ^( MODEL_COLUMN ( alias )? expression ) ;
	public final PLSQLPrinter.model_column_return model_column() throws RecognitionException {
		PLSQLPrinter.model_column_return retval = new PLSQLPrinter.model_column_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1049:5: ( ^( MODEL_COLUMN ( alias )? expression ) )
			// PLSQLPrinter.g:1049:10: ^( MODEL_COLUMN ( alias )? expression )
			{
			match(input,MODEL_COLUMN,FOLLOW_MODEL_COLUMN_in_model_column8118); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1049:25: ( alias )?
			int alt275=2;
			int LA275_0 = input.LA(1);
			if ( (LA275_0==ALIAS) ) {
				alt275=1;
			}
			switch (alt275) {
				case 1 :
					// PLSQLPrinter.g:1049:25: alias
					{
					pushFollow(FOLLOW_alias_in_model_column8120);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_expression_in_model_column8123);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column"


	public static class model_rules_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_rules_clause"
	// PLSQLPrinter.g:1052:1: model_rules_clause : ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) ;
	public final PLSQLPrinter.model_rules_clause_return model_rules_clause() throws RecognitionException {
		PLSQLPrinter.model_rules_clause_return retval = new PLSQLPrinter.model_rules_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1053:5: ( ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) )
			// PLSQLPrinter.g:1053:10: ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? )
			{
			match(input,MODEL_RULES,FOLLOW_MODEL_RULES_in_model_rules_clause8146); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1053:24: ( model_rules_element )+
			int cnt276=0;
			loop276:
			while (true) {
				int alt276=2;
				int LA276_0 = input.LA(1);
				if ( (LA276_0==MODEL_RULE) ) {
					alt276=1;
				}

				switch (alt276) {
				case 1 :
					// PLSQLPrinter.g:1053:24: model_rules_element
					{
					pushFollow(FOLLOW_model_rules_element_in_model_rules_clause8148);
					model_rules_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt276 >= 1 ) break loop276;
					EarlyExitException eee = new EarlyExitException(276, input);
					throw eee;
				}
				cnt276++;
			}

			// PLSQLPrinter.g:1053:45: ( model_rules_part )?
			int alt277=2;
			int LA277_0 = input.LA(1);
			if ( (LA277_0==RULES_VK) ) {
				alt277=1;
			}
			switch (alt277) {
				case 1 :
					// PLSQLPrinter.g:1053:45: model_rules_part
					{
					pushFollow(FOLLOW_model_rules_part_in_model_rules_clause8151);
					model_rules_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_rules_clause"


	public static class model_rules_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_rules_part"
	// PLSQLPrinter.g:1056:1: model_rules_part : ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? ) ;
	public final PLSQLPrinter.model_rules_part_return model_rules_part() throws RecognitionException {
		PLSQLPrinter.model_rules_part_return retval = new PLSQLPrinter.model_rules_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1057:5: ( ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? ) )
			// PLSQLPrinter.g:1057:10: ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? )
			{
			match(input,RULES_VK,FOLLOW_RULES_VK_in_model_rules_part8174); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1058:13: ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )?
				int alt279=3;
				int LA279_0 = input.LA(1);
				if ( (LA279_0==SQL92_RESERVED_UPDATE) ) {
					alt279=1;
				}
				else if ( (LA279_0==UPSERT_VK) ) {
					alt279=2;
				}
				switch (alt279) {
					case 1 :
						// PLSQLPrinter.g:1058:14: SQL92_RESERVED_UPDATE
						{
						match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_part8190); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1058:36: UPSERT_VK ( SQL92_RESERVED_ALL )?
						{
						match(input,UPSERT_VK,FOLLOW_UPSERT_VK_in_model_rules_part8192); 
						// PLSQLPrinter.g:1058:46: ( SQL92_RESERVED_ALL )?
						int alt278=2;
						int LA278_0 = input.LA(1);
						if ( (LA278_0==SQL92_RESERVED_ALL) ) {
							alt278=1;
						}
						switch (alt278) {
							case 1 :
								// PLSQLPrinter.g:1058:46: SQL92_RESERVED_ALL
								{
								match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_model_rules_part8194); 
								}
								break;

						}

						}
						break;

				}

				// PLSQLPrinter.g:1059:13: ( AUTOMATIC_VK | SEQUENTIAL_VK )?
				int alt280=2;
				int LA280_0 = input.LA(1);
				if ( (LA280_0==AUTOMATIC_VK||LA280_0==SEQUENTIAL_VK) ) {
					alt280=1;
				}
				switch (alt280) {
					case 1 :
						// PLSQLPrinter.g:
						{
						if ( input.LA(1)==AUTOMATIC_VK||input.LA(1)==SEQUENTIAL_VK ) {
							input.consume();
							state.errorRecovery=false;
						}
						else {
							MismatchedSetException mse = new MismatchedSetException(null,input);
							throw mse;
						}
						}
						break;

				}

				// PLSQLPrinter.g:1060:13: ( model_iterate_clause )?
				int alt281=2;
				int LA281_0 = input.LA(1);
				if ( (LA281_0==ITERATE_VK) ) {
					alt281=1;
				}
				switch (alt281) {
					case 1 :
						// PLSQLPrinter.g:1060:13: model_iterate_clause
						{
						pushFollow(FOLLOW_model_iterate_clause_in_model_rules_part8232);
						model_iterate_clause();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_rules_part"


	public static class model_rules_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_rules_element"
	// PLSQLPrinter.g:1064:1: model_rules_element : ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? ) ;
	public final PLSQLPrinter.model_rules_element_return model_rules_element() throws RecognitionException {
		PLSQLPrinter.model_rules_element_return retval = new PLSQLPrinter.model_rules_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1065:5: ( ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? ) )
			// PLSQLPrinter.g:1065:10: ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? )
			{
			match(input,MODEL_RULE,FOLLOW_MODEL_RULE_in_model_rules_element8264); 
			match(input, Token.DOWN, null); 
			match(input,ASSIGN,FOLLOW_ASSIGN_in_model_rules_element8280); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_expression_in_model_rules_element8282);
			model_expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_model_rules_element8284);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1067:13: ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )?
			int alt283=3;
			int LA283_0 = input.LA(1);
			if ( (LA283_0==SQL92_RESERVED_UPDATE) ) {
				alt283=1;
			}
			else if ( (LA283_0==UPSERT_VK) ) {
				alt283=2;
			}
			switch (alt283) {
				case 1 :
					// PLSQLPrinter.g:1067:14: SQL92_RESERVED_UPDATE
					{
					match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_element8301); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1067:36: UPSERT_VK ( SQL92_RESERVED_ALL )?
					{
					match(input,UPSERT_VK,FOLLOW_UPSERT_VK_in_model_rules_element8303); 
					// PLSQLPrinter.g:1067:46: ( SQL92_RESERVED_ALL )?
					int alt282=2;
					int LA282_0 = input.LA(1);
					if ( (LA282_0==SQL92_RESERVED_ALL) ) {
						alt282=1;
					}
					switch (alt282) {
						case 1 :
							// PLSQLPrinter.g:1067:46: SQL92_RESERVED_ALL
							{
							match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_model_rules_element8305); 
							}
							break;

					}

					}
					break;

			}

			// PLSQLPrinter.g:1068:13: ( order_by_clause )?
			int alt284=2;
			int LA284_0 = input.LA(1);
			if ( (LA284_0==SQL92_RESERVED_ORDER) ) {
				alt284=1;
			}
			switch (alt284) {
				case 1 :
					// PLSQLPrinter.g:1068:13: order_by_clause
					{
					pushFollow(FOLLOW_order_by_clause_in_model_rules_element8323);
					order_by_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_rules_element"


	public static class model_iterate_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_iterate_clause"
	// PLSQLPrinter.g:1072:1: model_iterate_clause : ^( ITERATE_VK expression ( until_part )? ) ;
	public final PLSQLPrinter.model_iterate_clause_return model_iterate_clause() throws RecognitionException {
		PLSQLPrinter.model_iterate_clause_return retval = new PLSQLPrinter.model_iterate_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1073:5: ( ^( ITERATE_VK expression ( until_part )? ) )
			// PLSQLPrinter.g:1073:10: ^( ITERATE_VK expression ( until_part )? )
			{
			match(input,ITERATE_VK,FOLLOW_ITERATE_VK_in_model_iterate_clause8355); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_model_iterate_clause8357);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1073:34: ( until_part )?
			int alt285=2;
			int LA285_0 = input.LA(1);
			if ( (LA285_0==UNTIL_VK) ) {
				alt285=1;
			}
			switch (alt285) {
				case 1 :
					// PLSQLPrinter.g:1073:34: until_part
					{
					pushFollow(FOLLOW_until_part_in_model_iterate_clause8359);
					until_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_iterate_clause"


	public static class until_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "until_part"
	// PLSQLPrinter.g:1076:1: until_part : ^( UNTIL_VK expression ) ;
	public final PLSQLPrinter.until_part_return until_part() throws RecognitionException {
		PLSQLPrinter.until_part_return retval = new PLSQLPrinter.until_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1077:5: ( ^( UNTIL_VK expression ) )
			// PLSQLPrinter.g:1077:10: ^( UNTIL_VK expression )
			{
			match(input,UNTIL_VK,FOLLOW_UNTIL_VK_in_until_part8382); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_until_part8384);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "until_part"


	public static class order_by_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "order_by_clause"
	// PLSQLPrinter.g:1080:1: order_by_clause : ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) ) ;
	public final PLSQLPrinter.order_by_clause_return order_by_clause() throws RecognitionException {
		PLSQLPrinter.order_by_clause_return retval = new PLSQLPrinter.order_by_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1081:5: ( ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) ) )
			// PLSQLPrinter.g:1081:10: ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) )
			{
			match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_order_by_clause8406); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1081:33: ( SIBLINGS_VK )?
			int alt286=2;
			int LA286_0 = input.LA(1);
			if ( (LA286_0==SIBLINGS_VK) ) {
				alt286=1;
			}
			switch (alt286) {
				case 1 :
					// PLSQLPrinter.g:1081:33: SIBLINGS_VK
					{
					match(input,SIBLINGS_VK,FOLLOW_SIBLINGS_VK_in_order_by_clause8408); 
					}
					break;

			}

			match(input,ORDER_BY_ELEMENTS,FOLLOW_ORDER_BY_ELEMENTS_in_order_by_clause8412); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1081:66: ( order_by_elements )+
			int cnt287=0;
			loop287:
			while (true) {
				int alt287=2;
				int LA287_0 = input.LA(1);
				if ( (LA287_0==ORDER_BY_ELEMENT) ) {
					alt287=1;
				}

				switch (alt287) {
				case 1 :
					// PLSQLPrinter.g:1081:66: order_by_elements
					{
					pushFollow(FOLLOW_order_by_elements_in_order_by_clause8414);
					order_by_elements();
					state._fsp--;

					}
					break;

				default :
					if ( cnt287 >= 1 ) break loop287;
					EarlyExitException eee = new EarlyExitException(287, input);
					throw eee;
				}
				cnt287++;
			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "order_by_clause"


	public static class order_by_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "order_by_elements"
	// PLSQLPrinter.g:1084:1: order_by_elements : ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? ) ;
	public final PLSQLPrinter.order_by_elements_return order_by_elements() throws RecognitionException {
		PLSQLPrinter.order_by_elements_return retval = new PLSQLPrinter.order_by_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1085:5: ( ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? ) )
			// PLSQLPrinter.g:1085:10: ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? )
			{
			match(input,ORDER_BY_ELEMENT,FOLLOW_ORDER_BY_ELEMENT_in_order_by_elements8438); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_order_by_elements8440);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1085:40: ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )?
			int alt288=2;
			int LA288_0 = input.LA(1);
			if ( (LA288_0==SQL92_RESERVED_ASC||LA288_0==SQL92_RESERVED_DESC) ) {
				alt288=1;
			}
			switch (alt288) {
				case 1 :
					// PLSQLPrinter.g:
					{
					if ( input.LA(1)==SQL92_RESERVED_ASC||input.LA(1)==SQL92_RESERVED_DESC ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// PLSQLPrinter.g:1085:82: ( NULLS_VK ( FIRST_VK | LAST_VK ) )?
			int alt289=2;
			int LA289_0 = input.LA(1);
			if ( (LA289_0==NULLS_VK) ) {
				alt289=1;
			}
			switch (alt289) {
				case 1 :
					// PLSQLPrinter.g:1085:83: NULLS_VK ( FIRST_VK | LAST_VK )
					{
					match(input,NULLS_VK,FOLLOW_NULLS_VK_in_order_by_elements8450); 
					if ( input.LA(1)==FIRST_VK||input.LA(1)==LAST_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "order_by_elements"


	public static class for_update_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_update_clause"
	// PLSQLPrinter.g:1088:1: for_update_clause : ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? ) ;
	public final PLSQLPrinter.for_update_clause_return for_update_clause() throws RecognitionException {
		PLSQLPrinter.for_update_clause_return retval = new PLSQLPrinter.for_update_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1089:5: ( ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? ) )
			// PLSQLPrinter.g:1089:10: ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? )
			{
			match(input,SQL92_RESERVED_FOR,FOLLOW_SQL92_RESERVED_FOR_in_for_update_clause8480); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1089:31: ( for_update_of_part )?
				int alt290=2;
				int LA290_0 = input.LA(1);
				if ( (LA290_0==SQL92_RESERVED_OF) ) {
					alt290=1;
				}
				switch (alt290) {
					case 1 :
						// PLSQLPrinter.g:1089:31: for_update_of_part
						{
						pushFollow(FOLLOW_for_update_of_part_in_for_update_clause8482);
						for_update_of_part();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1089:51: ( for_update_options )?
				int alt291=2;
				int LA291_0 = input.LA(1);
				if ( (LA291_0==PLSQL_RESERVED_NOWAIT||LA291_0==SKIP_VK||LA291_0==WAIT_VK) ) {
					alt291=1;
				}
				switch (alt291) {
					case 1 :
						// PLSQLPrinter.g:1089:51: for_update_options
						{
						pushFollow(FOLLOW_for_update_options_in_for_update_clause8485);
						for_update_options();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_update_clause"


	public static class for_update_of_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_update_of_part"
	// PLSQLPrinter.g:1092:1: for_update_of_part : ^( SQL92_RESERVED_OF ( column_name )+ ) ;
	public final PLSQLPrinter.for_update_of_part_return for_update_of_part() throws RecognitionException {
		PLSQLPrinter.for_update_of_part_return retval = new PLSQLPrinter.for_update_of_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1093:5: ( ^( SQL92_RESERVED_OF ( column_name )+ ) )
			// PLSQLPrinter.g:1093:10: ^( SQL92_RESERVED_OF ( column_name )+ )
			{
			match(input,SQL92_RESERVED_OF,FOLLOW_SQL92_RESERVED_OF_in_for_update_of_part8508); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1093:30: ( column_name )+
			int cnt292=0;
			loop292:
			while (true) {
				int alt292=2;
				int LA292_0 = input.LA(1);
				if ( (LA292_0==COLUMN_NAME) ) {
					alt292=1;
				}

				switch (alt292) {
				case 1 :
					// PLSQLPrinter.g:1093:30: column_name
					{
					pushFollow(FOLLOW_column_name_in_for_update_of_part8510);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt292 >= 1 ) break loop292;
					EarlyExitException eee = new EarlyExitException(292, input);
					throw eee;
				}
				cnt292++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_update_of_part"


	public static class for_update_options_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_update_options"
	// PLSQLPrinter.g:1096:1: for_update_options : ( SKIP_VK | PLSQL_RESERVED_NOWAIT | ^( WAIT_VK expression ) );
	public final PLSQLPrinter.for_update_options_return for_update_options() throws RecognitionException {
		PLSQLPrinter.for_update_options_return retval = new PLSQLPrinter.for_update_options_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1097:5: ( SKIP_VK | PLSQL_RESERVED_NOWAIT | ^( WAIT_VK expression ) )
			int alt293=3;
			switch ( input.LA(1) ) {
			case SKIP_VK:
				{
				alt293=1;
				}
				break;
			case PLSQL_RESERVED_NOWAIT:
				{
				alt293=2;
				}
				break;
			case WAIT_VK:
				{
				alt293=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 293, 0, input);
				throw nvae;
			}
			switch (alt293) {
				case 1 :
					// PLSQLPrinter.g:1097:10: SKIP_VK
					{
					match(input,SKIP_VK,FOLLOW_SKIP_VK_in_for_update_options8532); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1098:10: PLSQL_RESERVED_NOWAIT
					{
					match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_for_update_options8543); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:1099:10: ^( WAIT_VK expression )
					{
					match(input,WAIT_VK,FOLLOW_WAIT_VK_in_for_update_options8555); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_update_options8557);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_update_options"


	public static class update_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "update_statement"
	// PLSQLPrinter.g:1104:1: update_statement : ^( SQL92_RESERVED_UPDATE general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) ;
	public final PLSQLPrinter.update_statement_return update_statement() throws RecognitionException {
		PLSQLPrinter.update_statement_return retval = new PLSQLPrinter.update_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1105:5: ( ^( SQL92_RESERVED_UPDATE general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) )
			// PLSQLPrinter.g:1105:10: ^( SQL92_RESERVED_UPDATE general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
			{
			match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_update_statement8581); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_update_statement8583);
			general_table_ref();
			state._fsp--;

			pushFollow(FOLLOW_update_set_clause_in_update_statement8597);
			update_set_clause();
			state._fsp--;

			// PLSQLPrinter.g:1107:13: ( where_clause )?
			int alt294=2;
			int LA294_0 = input.LA(1);
			if ( (LA294_0==SQL92_RESERVED_WHERE) ) {
				alt294=1;
			}
			switch (alt294) {
				case 1 :
					// PLSQLPrinter.g:1107:13: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_update_statement8611);
					where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1107:27: ( static_returning_clause )?
			int alt295=2;
			int LA295_0 = input.LA(1);
			if ( (LA295_0==STATIC_RETURNING) ) {
				alt295=1;
			}
			switch (alt295) {
				case 1 :
					// PLSQLPrinter.g:1107:27: static_returning_clause
					{
					pushFollow(FOLLOW_static_returning_clause_in_update_statement8614);
					static_returning_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1107:52: ( error_logging_clause )?
			int alt296=2;
			int LA296_0 = input.LA(1);
			if ( (LA296_0==LOG_VK) ) {
				alt296=1;
			}
			switch (alt296) {
				case 1 :
					// PLSQLPrinter.g:1107:52: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_update_statement8617);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "update_statement"


	public static class update_set_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "update_set_clause"
	// PLSQLPrinter.g:1112:1: update_set_clause : ^( SET_VK ( update_set_elements )+ ) ;
	public final PLSQLPrinter.update_set_clause_return update_set_clause() throws RecognitionException {
		PLSQLPrinter.update_set_clause_return retval = new PLSQLPrinter.update_set_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1113:5: ( ^( SET_VK ( update_set_elements )+ ) )
			// PLSQLPrinter.g:1113:10: ^( SET_VK ( update_set_elements )+ )
			{
			match(input,SET_VK,FOLLOW_SET_VK_in_update_set_clause8650); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1113:19: ( update_set_elements )+
			int cnt297=0;
			loop297:
			while (true) {
				int alt297=2;
				int LA297_0 = input.LA(1);
				if ( (LA297_0==ASSIGN||LA297_0==VALUE_VK) ) {
					alt297=1;
				}

				switch (alt297) {
				case 1 :
					// PLSQLPrinter.g:1113:19: update_set_elements
					{
					pushFollow(FOLLOW_update_set_elements_in_update_set_clause8652);
					update_set_elements();
					state._fsp--;

					}
					break;

				default :
					if ( cnt297 >= 1 ) break loop297;
					EarlyExitException eee = new EarlyExitException(297, input);
					throw eee;
				}
				cnt297++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "update_set_clause"


	public static class update_set_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "update_set_elements"
	// PLSQLPrinter.g:1116:1: update_set_elements : ( ^( ASSIGN column_name expression ) | ^( ASSIGN ( column_name )+ subquery ) | ^( VALUE_VK ( char_set_name )? ID expression ) );
	public final PLSQLPrinter.update_set_elements_return update_set_elements() throws RecognitionException {
		PLSQLPrinter.update_set_elements_return retval = new PLSQLPrinter.update_set_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1117:5: ( ^( ASSIGN column_name expression ) | ^( ASSIGN ( column_name )+ subquery ) | ^( VALUE_VK ( char_set_name )? ID expression ) )
			int alt300=3;
			alt300 = dfa300.predict(input);
			switch (alt300) {
				case 1 :
					// PLSQLPrinter.g:1117:10: ^( ASSIGN column_name expression )
					{
					match(input,ASSIGN,FOLLOW_ASSIGN_in_update_set_elements8675); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_column_name_in_update_set_elements8677);
					column_name();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_update_set_elements8679);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1118:10: ^( ASSIGN ( column_name )+ subquery )
					{
					match(input,ASSIGN,FOLLOW_ASSIGN_in_update_set_elements8692); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1118:19: ( column_name )+
					int cnt298=0;
					loop298:
					while (true) {
						int alt298=2;
						int LA298_0 = input.LA(1);
						if ( (LA298_0==COLUMN_NAME) ) {
							alt298=1;
						}

						switch (alt298) {
						case 1 :
							// PLSQLPrinter.g:1118:19: column_name
							{
							pushFollow(FOLLOW_column_name_in_update_set_elements8694);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt298 >= 1 ) break loop298;
							EarlyExitException eee = new EarlyExitException(298, input);
							throw eee;
						}
						cnt298++;
					}

					pushFollow(FOLLOW_subquery_in_update_set_elements8697);
					subquery();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1119:10: ^( VALUE_VK ( char_set_name )? ID expression )
					{
					match(input,VALUE_VK,FOLLOW_VALUE_VK_in_update_set_elements8710); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1119:21: ( char_set_name )?
					int alt299=2;
					int LA299_0 = input.LA(1);
					if ( (LA299_0==CHAR_SET_NAME) ) {
						alt299=1;
					}
					switch (alt299) {
						case 1 :
							// PLSQLPrinter.g:1119:21: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_update_set_elements8712);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					match(input,ID,FOLLOW_ID_in_update_set_elements8715); 
					pushFollow(FOLLOW_expression_in_update_set_elements8717);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "update_set_elements"


	public static class delete_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "delete_statement"
	// PLSQLPrinter.g:1124:1: delete_statement : ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) ;
	public final PLSQLPrinter.delete_statement_return delete_statement() throws RecognitionException {
		PLSQLPrinter.delete_statement_return retval = new PLSQLPrinter.delete_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1125:5: ( ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) )
			// PLSQLPrinter.g:1125:10: ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
			{
			match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_delete_statement8741); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_delete_statement8743);
			general_table_ref();
			state._fsp--;

			// PLSQLPrinter.g:1126:13: ( where_clause )?
			int alt301=2;
			int LA301_0 = input.LA(1);
			if ( (LA301_0==SQL92_RESERVED_WHERE) ) {
				alt301=1;
			}
			switch (alt301) {
				case 1 :
					// PLSQLPrinter.g:1126:13: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_delete_statement8757);
					where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1126:27: ( static_returning_clause )?
			int alt302=2;
			int LA302_0 = input.LA(1);
			if ( (LA302_0==STATIC_RETURNING) ) {
				alt302=1;
			}
			switch (alt302) {
				case 1 :
					// PLSQLPrinter.g:1126:27: static_returning_clause
					{
					pushFollow(FOLLOW_static_returning_clause_in_delete_statement8760);
					static_returning_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1126:52: ( error_logging_clause )?
			int alt303=2;
			int LA303_0 = input.LA(1);
			if ( (LA303_0==LOG_VK) ) {
				alt303=1;
			}
			switch (alt303) {
				case 1 :
					// PLSQLPrinter.g:1126:52: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_delete_statement8763);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "delete_statement"


	public static class insert_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "insert_statement"
	// PLSQLPrinter.g:1129:1: insert_statement : ^( SQL92_RESERVED_INSERT ( single_table_insert | multi_table_insert ) ) ;
	public final PLSQLPrinter.insert_statement_return insert_statement() throws RecognitionException {
		PLSQLPrinter.insert_statement_return retval = new PLSQLPrinter.insert_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1130:5: ( ^( SQL92_RESERVED_INSERT ( single_table_insert | multi_table_insert ) ) )
			// PLSQLPrinter.g:1130:10: ^( SQL92_RESERVED_INSERT ( single_table_insert | multi_table_insert ) )
			{
			match(input,SQL92_RESERVED_INSERT,FOLLOW_SQL92_RESERVED_INSERT_in_insert_statement8786); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1131:9: ( single_table_insert | multi_table_insert )
			int alt304=2;
			int LA304_0 = input.LA(1);
			if ( (LA304_0==SINGLE_TABLE_MODE) ) {
				alt304=1;
			}
			else if ( (LA304_0==MULTI_TABLE_MODE) ) {
				alt304=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 304, 0, input);
				throw nvae;
			}

			switch (alt304) {
				case 1 :
					// PLSQLPrinter.g:1131:14: single_table_insert
					{
					pushFollow(FOLLOW_single_table_insert_in_insert_statement8801);
					single_table_insert();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1132:14: multi_table_insert
					{
					pushFollow(FOLLOW_multi_table_insert_in_insert_statement8816);
					multi_table_insert();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_statement"


	public static class single_table_insert_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "single_table_insert"
	// PLSQLPrinter.g:1139:1: single_table_insert : ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? ) ;
	public final PLSQLPrinter.single_table_insert_return single_table_insert() throws RecognitionException {
		PLSQLPrinter.single_table_insert_return retval = new PLSQLPrinter.single_table_insert_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1140:5: ( ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? ) )
			// PLSQLPrinter.g:1140:10: ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? )
			{
			match(input,SINGLE_TABLE_MODE,FOLLOW_SINGLE_TABLE_MODE_in_single_table_insert8859); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_insert_into_clause_in_single_table_insert8861);
			insert_into_clause();
			state._fsp--;

			// PLSQLPrinter.g:1140:49: ( values_clause ( static_returning_clause )? | select_statement )
			int alt306=2;
			int LA306_0 = input.LA(1);
			if ( (LA306_0==SQL92_RESERVED_VALUES) ) {
				alt306=1;
			}
			else if ( (LA306_0==SELECT_STATEMENT) ) {
				alt306=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 306, 0, input);
				throw nvae;
			}

			switch (alt306) {
				case 1 :
					// PLSQLPrinter.g:1140:50: values_clause ( static_returning_clause )?
					{
					pushFollow(FOLLOW_values_clause_in_single_table_insert8864);
					values_clause();
					state._fsp--;

					// PLSQLPrinter.g:1140:64: ( static_returning_clause )?
					int alt305=2;
					int LA305_0 = input.LA(1);
					if ( (LA305_0==STATIC_RETURNING) ) {
						alt305=1;
					}
					switch (alt305) {
						case 1 :
							// PLSQLPrinter.g:1140:64: static_returning_clause
							{
							pushFollow(FOLLOW_static_returning_clause_in_single_table_insert8866);
							static_returning_clause();
							state._fsp--;

							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1140:90: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_single_table_insert8870);
					select_statement();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1140:108: ( error_logging_clause )?
			int alt307=2;
			int LA307_0 = input.LA(1);
			if ( (LA307_0==LOG_VK) ) {
				alt307=1;
			}
			switch (alt307) {
				case 1 :
					// PLSQLPrinter.g:1140:108: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_single_table_insert8873);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "single_table_insert"


	public static class multi_table_insert_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "multi_table_insert"
	// PLSQLPrinter.g:1143:1: multi_table_insert : ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) ) ;
	public final PLSQLPrinter.multi_table_insert_return multi_table_insert() throws RecognitionException {
		PLSQLPrinter.multi_table_insert_return retval = new PLSQLPrinter.multi_table_insert_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1144:5: ( ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) ) )
			// PLSQLPrinter.g:1144:10: ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) )
			{
			match(input,MULTI_TABLE_MODE,FOLLOW_MULTI_TABLE_MODE_in_multi_table_insert8896); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_select_statement_in_multi_table_insert8898);
			select_statement();
			state._fsp--;

			// PLSQLPrinter.g:1144:46: ( conditional_insert_clause | ( multi_table_element )+ )
			int alt309=2;
			int LA309_0 = input.LA(1);
			if ( (LA309_0==CONDITIONAL_INSERT) ) {
				alt309=1;
			}
			else if ( (LA309_0==TABLE_ELEMENT) ) {
				alt309=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 309, 0, input);
				throw nvae;
			}

			switch (alt309) {
				case 1 :
					// PLSQLPrinter.g:1144:47: conditional_insert_clause
					{
					pushFollow(FOLLOW_conditional_insert_clause_in_multi_table_insert8901);
					conditional_insert_clause();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1144:73: ( multi_table_element )+
					{
					// PLSQLPrinter.g:1144:73: ( multi_table_element )+
					int cnt308=0;
					loop308:
					while (true) {
						int alt308=2;
						int LA308_0 = input.LA(1);
						if ( (LA308_0==TABLE_ELEMENT) ) {
							alt308=1;
						}

						switch (alt308) {
						case 1 :
							// PLSQLPrinter.g:1144:73: multi_table_element
							{
							pushFollow(FOLLOW_multi_table_element_in_multi_table_insert8903);
							multi_table_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt308 >= 1 ) break loop308;
							EarlyExitException eee = new EarlyExitException(308, input);
							throw eee;
						}
						cnt308++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "multi_table_insert"


	public static class multi_table_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "multi_table_element"
	// PLSQLPrinter.g:1147:1: multi_table_element : ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) ;
	public final PLSQLPrinter.multi_table_element_return multi_table_element() throws RecognitionException {
		PLSQLPrinter.multi_table_element_return retval = new PLSQLPrinter.multi_table_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1148:5: ( ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) )
			// PLSQLPrinter.g:1148:10: ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? )
			{
			match(input,TABLE_ELEMENT,FOLLOW_TABLE_ELEMENT_in_multi_table_element8927); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_insert_into_clause_in_multi_table_element8929);
			insert_into_clause();
			state._fsp--;

			// PLSQLPrinter.g:1148:45: ( values_clause )?
			int alt310=2;
			int LA310_0 = input.LA(1);
			if ( (LA310_0==SQL92_RESERVED_VALUES) ) {
				alt310=1;
			}
			switch (alt310) {
				case 1 :
					// PLSQLPrinter.g:1148:45: values_clause
					{
					pushFollow(FOLLOW_values_clause_in_multi_table_element8931);
					values_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1148:60: ( error_logging_clause )?
			int alt311=2;
			int LA311_0 = input.LA(1);
			if ( (LA311_0==LOG_VK) ) {
				alt311=1;
			}
			switch (alt311) {
				case 1 :
					// PLSQLPrinter.g:1148:60: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_multi_table_element8934);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "multi_table_element"


	public static class conditional_insert_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "conditional_insert_clause"
	// PLSQLPrinter.g:1151:1: conditional_insert_clause : ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) ;
	public final PLSQLPrinter.conditional_insert_clause_return conditional_insert_clause() throws RecognitionException {
		PLSQLPrinter.conditional_insert_clause_return retval = new PLSQLPrinter.conditional_insert_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1152:5: ( ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) )
			// PLSQLPrinter.g:1152:10: ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? )
			{
			match(input,CONDITIONAL_INSERT,FOLLOW_CONDITIONAL_INSERT_in_conditional_insert_clause8957); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1152:31: ( SQL92_RESERVED_ALL | FIRST_VK )?
			int alt312=2;
			int LA312_0 = input.LA(1);
			if ( (LA312_0==SQL92_RESERVED_ALL||LA312_0==FIRST_VK) ) {
				alt312=1;
			}
			switch (alt312) {
				case 1 :
					// PLSQLPrinter.g:
					{
					if ( input.LA(1)==SQL92_RESERVED_ALL||input.LA(1)==FIRST_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// PLSQLPrinter.g:1152:62: ( conditional_insert_when_part )+
			int cnt313=0;
			loop313:
			while (true) {
				int alt313=2;
				int LA313_0 = input.LA(1);
				if ( (LA313_0==SQL92_RESERVED_WHEN) ) {
					alt313=1;
				}

				switch (alt313) {
				case 1 :
					// PLSQLPrinter.g:1152:62: conditional_insert_when_part
					{
					pushFollow(FOLLOW_conditional_insert_when_part_in_conditional_insert_clause8966);
					conditional_insert_when_part();
					state._fsp--;

					}
					break;

				default :
					if ( cnt313 >= 1 ) break loop313;
					EarlyExitException eee = new EarlyExitException(313, input);
					throw eee;
				}
				cnt313++;
			}

			// PLSQLPrinter.g:1152:92: ( conditional_insert_else_part )?
			int alt314=2;
			int LA314_0 = input.LA(1);
			if ( (LA314_0==SQL92_RESERVED_ELSE) ) {
				alt314=1;
			}
			switch (alt314) {
				case 1 :
					// PLSQLPrinter.g:1152:92: conditional_insert_else_part
					{
					pushFollow(FOLLOW_conditional_insert_else_part_in_conditional_insert_clause8969);
					conditional_insert_else_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "conditional_insert_clause"


	public static class conditional_insert_when_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "conditional_insert_when_part"
	// PLSQLPrinter.g:1155:1: conditional_insert_when_part : ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ ) ;
	public final PLSQLPrinter.conditional_insert_when_part_return conditional_insert_when_part() throws RecognitionException {
		PLSQLPrinter.conditional_insert_when_part_return retval = new PLSQLPrinter.conditional_insert_when_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1156:5: ( ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ ) )
			// PLSQLPrinter.g:1156:10: ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_conditional_insert_when_part8993); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_conditional_insert_when_part8995);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1156:43: ( multi_table_element )+
			int cnt315=0;
			loop315:
			while (true) {
				int alt315=2;
				int LA315_0 = input.LA(1);
				if ( (LA315_0==TABLE_ELEMENT) ) {
					alt315=1;
				}

				switch (alt315) {
				case 1 :
					// PLSQLPrinter.g:1156:43: multi_table_element
					{
					pushFollow(FOLLOW_multi_table_element_in_conditional_insert_when_part8997);
					multi_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt315 >= 1 ) break loop315;
					EarlyExitException eee = new EarlyExitException(315, input);
					throw eee;
				}
				cnt315++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "conditional_insert_when_part"


	public static class conditional_insert_else_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "conditional_insert_else_part"
	// PLSQLPrinter.g:1159:1: conditional_insert_else_part : ^( SQL92_RESERVED_ELSE ( multi_table_element )+ ) ;
	public final PLSQLPrinter.conditional_insert_else_part_return conditional_insert_else_part() throws RecognitionException {
		PLSQLPrinter.conditional_insert_else_part_return retval = new PLSQLPrinter.conditional_insert_else_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1160:5: ( ^( SQL92_RESERVED_ELSE ( multi_table_element )+ ) )
			// PLSQLPrinter.g:1160:10: ^( SQL92_RESERVED_ELSE ( multi_table_element )+ )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_conditional_insert_else_part9020); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1160:32: ( multi_table_element )+
			int cnt316=0;
			loop316:
			while (true) {
				int alt316=2;
				int LA316_0 = input.LA(1);
				if ( (LA316_0==TABLE_ELEMENT) ) {
					alt316=1;
				}

				switch (alt316) {
				case 1 :
					// PLSQLPrinter.g:1160:32: multi_table_element
					{
					pushFollow(FOLLOW_multi_table_element_in_conditional_insert_else_part9022);
					multi_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt316 >= 1 ) break loop316;
					EarlyExitException eee = new EarlyExitException(316, input);
					throw eee;
				}
				cnt316++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "conditional_insert_else_part"


	public static class insert_into_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "insert_into_clause"
	// PLSQLPrinter.g:1163:1: insert_into_clause : ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS ( column_name )* ) ) ;
	public final PLSQLPrinter.insert_into_clause_return insert_into_clause() throws RecognitionException {
		PLSQLPrinter.insert_into_clause_return retval = new PLSQLPrinter.insert_into_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1164:5: ( ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS ( column_name )* ) ) )
			// PLSQLPrinter.g:1164:10: ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS ( column_name )* ) )
			{
			match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_insert_into_clause9045); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_insert_into_clause9047);
			general_table_ref();
			state._fsp--;

			match(input,COLUMNS,FOLLOW_COLUMNS_in_insert_into_clause9050); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1164:60: ( column_name )*
				loop317:
				while (true) {
					int alt317=2;
					int LA317_0 = input.LA(1);
					if ( (LA317_0==COLUMN_NAME) ) {
						alt317=1;
					}

					switch (alt317) {
					case 1 :
						// PLSQLPrinter.g:1164:60: column_name
						{
						pushFollow(FOLLOW_column_name_in_insert_into_clause9052);
						column_name();
						state._fsp--;

						}
						break;

					default :
						break loop317;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_into_clause"


	public static class values_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "values_clause"
	// PLSQLPrinter.g:1167:1: values_clause : ^( SQL92_RESERVED_VALUES ( expression_list | expression ) ) ;
	public final PLSQLPrinter.values_clause_return values_clause() throws RecognitionException {
		PLSQLPrinter.values_clause_return retval = new PLSQLPrinter.values_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1168:5: ( ^( SQL92_RESERVED_VALUES ( expression_list | expression ) ) )
			// PLSQLPrinter.g:1168:10: ^( SQL92_RESERVED_VALUES ( expression_list | expression ) )
			{
			match(input,SQL92_RESERVED_VALUES,FOLLOW_SQL92_RESERVED_VALUES_in_values_clause9076); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1168:34: ( expression_list | expression )
			int alt318=2;
			int LA318_0 = input.LA(1);
			if ( (LA318_0==EXPR_LIST) ) {
				alt318=1;
			}
			else if ( (LA318_0==EXPR||LA318_0==LOGIC_EXPR) ) {
				alt318=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 318, 0, input);
				throw nvae;
			}

			switch (alt318) {
				case 1 :
					// PLSQLPrinter.g:1168:35: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_values_clause9079);
					expression_list();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1168:51: expression
					{
					pushFollow(FOLLOW_expression_in_values_clause9081);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "values_clause"


	public static class merge_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_statement"
	// PLSQLPrinter.g:1172:1: merge_statement : ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) ;
	public final PLSQLPrinter.merge_statement_return merge_statement() throws RecognitionException {
		PLSQLPrinter.merge_statement_return retval = new PLSQLPrinter.merge_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1173:5: ( ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) )
			// PLSQLPrinter.g:1173:10: ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? )
			{
			match(input,MERGE_VK,FOLLOW_MERGE_VK_in_merge_statement9105); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1173:21: ( alias )?
			int alt319=2;
			int LA319_0 = input.LA(1);
			if ( (LA319_0==ALIAS) ) {
				alt319=1;
			}
			switch (alt319) {
				case 1 :
					// PLSQLPrinter.g:1173:21: alias
					{
					pushFollow(FOLLOW_alias_in_merge_statement9107);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_tableview_name_in_merge_statement9110);
			tableview_name();
			state._fsp--;

			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_merge_statement9126); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_selected_tableview_in_merge_statement9128);
			selected_tableview();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_merge_statement9130);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1175:14: ( merge_update_clause )?
			int alt320=2;
			int LA320_0 = input.LA(1);
			if ( (LA320_0==MERGE_UPDATE) ) {
				alt320=1;
			}
			switch (alt320) {
				case 1 :
					// PLSQLPrinter.g:1175:14: merge_update_clause
					{
					pushFollow(FOLLOW_merge_update_clause_in_merge_statement9146);
					merge_update_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1175:35: ( merge_insert_clause )?
			int alt321=2;
			int LA321_0 = input.LA(1);
			if ( (LA321_0==MERGE_INSERT) ) {
				alt321=1;
			}
			switch (alt321) {
				case 1 :
					// PLSQLPrinter.g:1175:35: merge_insert_clause
					{
					pushFollow(FOLLOW_merge_insert_clause_in_merge_statement9149);
					merge_insert_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1175:56: ( error_logging_clause )?
			int alt322=2;
			int LA322_0 = input.LA(1);
			if ( (LA322_0==LOG_VK) ) {
				alt322=1;
			}
			switch (alt322) {
				case 1 :
					// PLSQLPrinter.g:1175:56: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_merge_statement9152);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_statement"


	public static class merge_update_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_update_clause"
	// PLSQLPrinter.g:1180:1: merge_update_clause : ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) ;
	public final PLSQLPrinter.merge_update_clause_return merge_update_clause() throws RecognitionException {
		PLSQLPrinter.merge_update_clause_return retval = new PLSQLPrinter.merge_update_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1181:5: ( ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) )
			// PLSQLPrinter.g:1181:10: ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? )
			{
			match(input,MERGE_UPDATE,FOLLOW_MERGE_UPDATE_in_merge_update_clause9177); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1181:25: ( merge_element )+
			int cnt323=0;
			loop323:
			while (true) {
				int alt323=2;
				int LA323_0 = input.LA(1);
				if ( (LA323_0==ASSIGN) ) {
					alt323=1;
				}

				switch (alt323) {
				case 1 :
					// PLSQLPrinter.g:1181:25: merge_element
					{
					pushFollow(FOLLOW_merge_element_in_merge_update_clause9179);
					merge_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt323 >= 1 ) break loop323;
					EarlyExitException eee = new EarlyExitException(323, input);
					throw eee;
				}
				cnt323++;
			}

			// PLSQLPrinter.g:1181:40: ( where_clause )?
			int alt324=2;
			int LA324_0 = input.LA(1);
			if ( (LA324_0==SQL92_RESERVED_WHERE) ) {
				alt324=1;
			}
			switch (alt324) {
				case 1 :
					// PLSQLPrinter.g:1181:40: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_merge_update_clause9182);
					where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1181:54: ( merge_update_delete_part )?
			int alt325=2;
			int LA325_0 = input.LA(1);
			if ( (LA325_0==SQL92_RESERVED_DELETE) ) {
				alt325=1;
			}
			switch (alt325) {
				case 1 :
					// PLSQLPrinter.g:1181:54: merge_update_delete_part
					{
					pushFollow(FOLLOW_merge_update_delete_part_in_merge_update_clause9185);
					merge_update_delete_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_update_clause"


	public static class merge_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_element"
	// PLSQLPrinter.g:1184:1: merge_element : ^( ASSIGN column_name expression ) ;
	public final PLSQLPrinter.merge_element_return merge_element() throws RecognitionException {
		PLSQLPrinter.merge_element_return retval = new PLSQLPrinter.merge_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1185:5: ( ^( ASSIGN column_name expression ) )
			// PLSQLPrinter.g:1185:10: ^( ASSIGN column_name expression )
			{
			match(input,ASSIGN,FOLLOW_ASSIGN_in_merge_element9208); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_column_name_in_merge_element9210);
			column_name();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_merge_element9212);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_element"


	public static class merge_update_delete_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_update_delete_part"
	// PLSQLPrinter.g:1188:1: merge_update_delete_part : ^( SQL92_RESERVED_DELETE where_clause ) ;
	public final PLSQLPrinter.merge_update_delete_part_return merge_update_delete_part() throws RecognitionException {
		PLSQLPrinter.merge_update_delete_part_return retval = new PLSQLPrinter.merge_update_delete_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1189:5: ( ^( SQL92_RESERVED_DELETE where_clause ) )
			// PLSQLPrinter.g:1189:10: ^( SQL92_RESERVED_DELETE where_clause )
			{
			match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_merge_update_delete_part9234); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_where_clause_in_merge_update_delete_part9236);
			where_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_update_delete_part"


	public static class merge_insert_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_insert_clause"
	// PLSQLPrinter.g:1192:1: merge_insert_clause : ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? ) ;
	public final PLSQLPrinter.merge_insert_clause_return merge_insert_clause() throws RecognitionException {
		PLSQLPrinter.merge_insert_clause_return retval = new PLSQLPrinter.merge_insert_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1193:5: ( ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? ) )
			// PLSQLPrinter.g:1193:10: ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? )
			{
			match(input,MERGE_INSERT,FOLLOW_MERGE_INSERT_in_merge_insert_clause9258); 
			match(input, Token.DOWN, null); 
			match(input,COLUMNS,FOLLOW_COLUMNS_in_merge_insert_clause9261); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1193:35: ( column_name )*
				loop326:
				while (true) {
					int alt326=2;
					int LA326_0 = input.LA(1);
					if ( (LA326_0==COLUMN_NAME) ) {
						alt326=1;
					}

					switch (alt326) {
					case 1 :
						// PLSQLPrinter.g:1193:35: column_name
						{
						pushFollow(FOLLOW_column_name_in_merge_insert_clause9263);
						column_name();
						state._fsp--;

						}
						break;

					default :
						break loop326;
					}
				}

				match(input, Token.UP, null); 
			}

			pushFollow(FOLLOW_expression_list_in_merge_insert_clause9267);
			expression_list();
			state._fsp--;

			// PLSQLPrinter.g:1193:65: ( where_clause )?
			int alt327=2;
			int LA327_0 = input.LA(1);
			if ( (LA327_0==SQL92_RESERVED_WHERE) ) {
				alt327=1;
			}
			switch (alt327) {
				case 1 :
					// PLSQLPrinter.g:1193:65: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_merge_insert_clause9269);
					where_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_insert_clause"


	public static class selected_tableview_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "selected_tableview"
	// PLSQLPrinter.g:1196:1: selected_tableview : ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name | subquery ) ) ;
	public final PLSQLPrinter.selected_tableview_return selected_tableview() throws RecognitionException {
		PLSQLPrinter.selected_tableview_return retval = new PLSQLPrinter.selected_tableview_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1197:5: ( ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name | subquery ) ) )
			// PLSQLPrinter.g:1197:10: ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name | subquery ) )
			{
			match(input,SELECTED_TABLEVIEW,FOLLOW_SELECTED_TABLEVIEW_in_selected_tableview9293); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1197:31: ( alias )?
			int alt328=2;
			int LA328_0 = input.LA(1);
			if ( (LA328_0==ALIAS) ) {
				alt328=1;
			}
			switch (alt328) {
				case 1 :
					// PLSQLPrinter.g:1197:31: alias
					{
					pushFollow(FOLLOW_alias_in_selected_tableview9295);
					alias();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1197:38: ( tableview_name | subquery )
			int alt329=2;
			int LA329_0 = input.LA(1);
			if ( (LA329_0==TABLEVIEW_NAME) ) {
				alt329=1;
			}
			else if ( (LA329_0==SUBQUERY) ) {
				alt329=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 329, 0, input);
				throw nvae;
			}

			switch (alt329) {
				case 1 :
					// PLSQLPrinter.g:1197:39: tableview_name
					{
					pushFollow(FOLLOW_tableview_name_in_selected_tableview9299);
					tableview_name();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1197:54: subquery
					{
					pushFollow(FOLLOW_subquery_in_selected_tableview9301);
					subquery();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selected_tableview"


	public static class lock_table_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "lock_table_statement"
	// PLSQLPrinter.g:1202:1: lock_table_statement : ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) ;
	public final PLSQLPrinter.lock_table_statement_return lock_table_statement() throws RecognitionException {
		PLSQLPrinter.lock_table_statement_return retval = new PLSQLPrinter.lock_table_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1203:5: ( ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) )
			// PLSQLPrinter.g:1203:10: ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? )
			{
			match(input,PLSQL_RESERVED_LOCK,FOLLOW_PLSQL_RESERVED_LOCK_in_lock_table_statement9326); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1203:32: ( lock_table_element )+
			int cnt330=0;
			loop330:
			while (true) {
				int alt330=2;
				int LA330_0 = input.LA(1);
				if ( (LA330_0==LOCK_TABLE_ELEMENT) ) {
					alt330=1;
				}

				switch (alt330) {
				case 1 :
					// PLSQLPrinter.g:1203:32: lock_table_element
					{
					pushFollow(FOLLOW_lock_table_element_in_lock_table_statement9328);
					lock_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt330 >= 1 ) break loop330;
					EarlyExitException eee = new EarlyExitException(330, input);
					throw eee;
				}
				cnt330++;
			}

			pushFollow(FOLLOW_lock_mode_in_lock_table_statement9331);
			lock_mode();
			state._fsp--;

			// PLSQLPrinter.g:1203:62: ( wait_nowait_part )?
			int alt331=2;
			int LA331_0 = input.LA(1);
			if ( (LA331_0==PLSQL_RESERVED_NOWAIT||LA331_0==WAIT_VK) ) {
				alt331=1;
			}
			switch (alt331) {
				case 1 :
					// PLSQLPrinter.g:1203:62: wait_nowait_part
					{
					pushFollow(FOLLOW_wait_nowait_part_in_lock_table_statement9333);
					wait_nowait_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_table_statement"


	public static class wait_nowait_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "wait_nowait_part"
	// PLSQLPrinter.g:1206:1: wait_nowait_part : ( ^( WAIT_VK expression ) | PLSQL_RESERVED_NOWAIT );
	public final PLSQLPrinter.wait_nowait_part_return wait_nowait_part() throws RecognitionException {
		PLSQLPrinter.wait_nowait_part_return retval = new PLSQLPrinter.wait_nowait_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1207:5: ( ^( WAIT_VK expression ) | PLSQL_RESERVED_NOWAIT )
			int alt332=2;
			int LA332_0 = input.LA(1);
			if ( (LA332_0==WAIT_VK) ) {
				alt332=1;
			}
			else if ( (LA332_0==PLSQL_RESERVED_NOWAIT) ) {
				alt332=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 332, 0, input);
				throw nvae;
			}

			switch (alt332) {
				case 1 :
					// PLSQLPrinter.g:1207:10: ^( WAIT_VK expression )
					{
					match(input,WAIT_VK,FOLLOW_WAIT_VK_in_wait_nowait_part9356); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_wait_nowait_part9358);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1208:10: PLSQL_RESERVED_NOWAIT
					{
					match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_wait_nowait_part9370); 
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "wait_nowait_part"


	public static class lock_table_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "lock_table_element"
	// PLSQLPrinter.g:1213:1: lock_table_element : ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) ;
	public final PLSQLPrinter.lock_table_element_return lock_table_element() throws RecognitionException {
		PLSQLPrinter.lock_table_element_return retval = new PLSQLPrinter.lock_table_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1214:5: ( ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) )
			// PLSQLPrinter.g:1214:10: ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? )
			{
			match(input,LOCK_TABLE_ELEMENT,FOLLOW_LOCK_TABLE_ELEMENT_in_lock_table_element9393); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_lock_table_element9395);
			tableview_name();
			state._fsp--;

			// PLSQLPrinter.g:1214:46: ( partition_extension_clause )?
			int alt333=2;
			int LA333_0 = input.LA(1);
			if ( (LA333_0==PARTITION_VK||LA333_0==SUBPARTITION_VK) ) {
				alt333=1;
			}
			switch (alt333) {
				case 1 :
					// PLSQLPrinter.g:1214:46: partition_extension_clause
					{
					pushFollow(FOLLOW_partition_extension_clause_in_lock_table_element9397);
					partition_extension_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_table_element"


	public static class lock_mode_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "lock_mode"
	// PLSQLPrinter.g:1217:1: lock_mode : ( ROW_VK PLSQL_RESERVED_SHARE | ROW_VK PLSQL_RESERVED_EXCLUSIVE | PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )? | PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE | PLSQL_RESERVED_EXCLUSIVE );
	public final PLSQLPrinter.lock_mode_return lock_mode() throws RecognitionException {
		PLSQLPrinter.lock_mode_return retval = new PLSQLPrinter.lock_mode_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1218:5: ( ROW_VK PLSQL_RESERVED_SHARE | ROW_VK PLSQL_RESERVED_EXCLUSIVE | PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )? | PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE | PLSQL_RESERVED_EXCLUSIVE )
			int alt335=5;
			switch ( input.LA(1) ) {
			case ROW_VK:
				{
				int LA335_1 = input.LA(2);
				if ( (LA335_1==PLSQL_RESERVED_SHARE) ) {
					alt335=1;
				}
				else if ( (LA335_1==PLSQL_RESERVED_EXCLUSIVE) ) {
					alt335=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 335, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PLSQL_RESERVED_SHARE:
				{
				int LA335_2 = input.LA(2);
				if ( (LA335_2==ROW_VK) ) {
					alt335=4;
				}
				else if ( (LA335_2==UP||LA335_2==PLSQL_RESERVED_NOWAIT||LA335_2==SQL92_RESERVED_UPDATE||LA335_2==WAIT_VK) ) {
					alt335=3;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 335, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PLSQL_RESERVED_EXCLUSIVE:
				{
				alt335=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 335, 0, input);
				throw nvae;
			}
			switch (alt335) {
				case 1 :
					// PLSQLPrinter.g:1218:10: ROW_VK PLSQL_RESERVED_SHARE
					{
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode9419); 
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9421); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1219:10: ROW_VK PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode9432); 
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9434); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:1220:10: PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )?
					{
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9445); 
					// PLSQLPrinter.g:1220:31: ( SQL92_RESERVED_UPDATE )?
					int alt334=2;
					int LA334_0 = input.LA(1);
					if ( (LA334_0==SQL92_RESERVED_UPDATE) ) {
						alt334=1;
					}
					switch (alt334) {
						case 1 :
							// PLSQLPrinter.g:1220:31: SQL92_RESERVED_UPDATE
							{
							match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_lock_mode9447); 
							}
							break;

					}

					}
					break;
				case 4 :
					// PLSQLPrinter.g:1221:10: PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9459); 
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode9461); 
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9463); 
					}
					break;
				case 5 :
					// PLSQLPrinter.g:1222:10: PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9474); 
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_mode"


	public static class general_table_ref_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_table_ref"
	// PLSQLPrinter.g:1228:1: general_table_ref : ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? ) ;
	public final PLSQLPrinter.general_table_ref_return general_table_ref() throws RecognitionException {
		PLSQLPrinter.general_table_ref_return retval = new PLSQLPrinter.general_table_ref_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1229:5: ( ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? ) )
			// PLSQLPrinter.g:1229:10: ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? )
			{
			match(input,TABLE_REF,FOLLOW_TABLE_REF_in_general_table_ref9498); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1229:22: ( alias )?
			int alt336=2;
			int LA336_0 = input.LA(1);
			if ( (LA336_0==ALIAS) ) {
				alt336=1;
			}
			switch (alt336) {
				case 1 :
					// PLSQLPrinter.g:1229:22: alias
					{
					pushFollow(FOLLOW_alias_in_general_table_ref9500);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_table_expression_clause_in_general_table_ref9503);
			dml_table_expression_clause();
			state._fsp--;

			// PLSQLPrinter.g:1229:57: ( ONLY_VK )?
			int alt337=2;
			int LA337_0 = input.LA(1);
			if ( (LA337_0==ONLY_VK) ) {
				alt337=1;
			}
			switch (alt337) {
				case 1 :
					// PLSQLPrinter.g:1229:57: ONLY_VK
					{
					match(input,ONLY_VK,FOLLOW_ONLY_VK_in_general_table_ref9505); 
					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_table_ref"


	public static class static_returning_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "static_returning_clause"
	// PLSQLPrinter.g:1232:1: static_returning_clause : ^( STATIC_RETURNING ( expression )+ into_clause ) ;
	public final PLSQLPrinter.static_returning_clause_return static_returning_clause() throws RecognitionException {
		PLSQLPrinter.static_returning_clause_return retval = new PLSQLPrinter.static_returning_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1233:5: ( ^( STATIC_RETURNING ( expression )+ into_clause ) )
			// PLSQLPrinter.g:1233:10: ^( STATIC_RETURNING ( expression )+ into_clause )
			{
			match(input,STATIC_RETURNING,FOLLOW_STATIC_RETURNING_in_static_returning_clause9528); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1233:29: ( expression )+
			int cnt338=0;
			loop338:
			while (true) {
				int alt338=2;
				int LA338_0 = input.LA(1);
				if ( (LA338_0==EXPR||LA338_0==LOGIC_EXPR) ) {
					alt338=1;
				}

				switch (alt338) {
				case 1 :
					// PLSQLPrinter.g:1233:29: expression
					{
					pushFollow(FOLLOW_expression_in_static_returning_clause9530);
					expression();
					state._fsp--;

					}
					break;

				default :
					if ( cnt338 >= 1 ) break loop338;
					EarlyExitException eee = new EarlyExitException(338, input);
					throw eee;
				}
				cnt338++;
			}

			pushFollow(FOLLOW_into_clause_in_static_returning_clause9533);
			into_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "static_returning_clause"


	public static class error_logging_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "error_logging_clause"
	// PLSQLPrinter.g:1236:1: error_logging_clause : ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? ) ;
	public final PLSQLPrinter.error_logging_clause_return error_logging_clause() throws RecognitionException {
		PLSQLPrinter.error_logging_clause_return retval = new PLSQLPrinter.error_logging_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1237:5: ( ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? ) )
			// PLSQLPrinter.g:1237:10: ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? )
			{
			match(input,LOG_VK,FOLLOW_LOG_VK_in_error_logging_clause9555); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1237:19: ( error_logging_into_part )?
				int alt339=2;
				int LA339_0 = input.LA(1);
				if ( (LA339_0==SQL92_RESERVED_INTO) ) {
					alt339=1;
				}
				switch (alt339) {
					case 1 :
						// PLSQLPrinter.g:1237:19: error_logging_into_part
						{
						pushFollow(FOLLOW_error_logging_into_part_in_error_logging_clause9557);
						error_logging_into_part();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1237:44: ( expression )?
				int alt340=2;
				int LA340_0 = input.LA(1);
				if ( (LA340_0==EXPR||LA340_0==LOGIC_EXPR) ) {
					alt340=1;
				}
				switch (alt340) {
					case 1 :
						// PLSQLPrinter.g:1237:44: expression
						{
						pushFollow(FOLLOW_expression_in_error_logging_clause9560);
						expression();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1237:56: ( error_logging_reject_part )?
				int alt341=2;
				int LA341_0 = input.LA(1);
				if ( (LA341_0==REJECT_VK) ) {
					alt341=1;
				}
				switch (alt341) {
					case 1 :
						// PLSQLPrinter.g:1237:56: error_logging_reject_part
						{
						pushFollow(FOLLOW_error_logging_reject_part_in_error_logging_clause9563);
						error_logging_reject_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "error_logging_clause"


	public static class error_logging_into_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "error_logging_into_part"
	// PLSQLPrinter.g:1240:1: error_logging_into_part : ^( SQL92_RESERVED_INTO tableview_name ) ;
	public final PLSQLPrinter.error_logging_into_part_return error_logging_into_part() throws RecognitionException {
		PLSQLPrinter.error_logging_into_part_return retval = new PLSQLPrinter.error_logging_into_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1241:5: ( ^( SQL92_RESERVED_INTO tableview_name ) )
			// PLSQLPrinter.g:1241:10: ^( SQL92_RESERVED_INTO tableview_name )
			{
			match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_error_logging_into_part9586); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_error_logging_into_part9588);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "error_logging_into_part"


	public static class error_logging_reject_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "error_logging_reject_part"
	// PLSQLPrinter.g:1244:1: error_logging_reject_part : ^( REJECT_VK ( UNLIMITED_VK | expression ) ) ;
	public final PLSQLPrinter.error_logging_reject_part_return error_logging_reject_part() throws RecognitionException {
		PLSQLPrinter.error_logging_reject_part_return retval = new PLSQLPrinter.error_logging_reject_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1245:5: ( ^( REJECT_VK ( UNLIMITED_VK | expression ) ) )
			// PLSQLPrinter.g:1245:10: ^( REJECT_VK ( UNLIMITED_VK | expression ) )
			{
			match(input,REJECT_VK,FOLLOW_REJECT_VK_in_error_logging_reject_part9610); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1245:22: ( UNLIMITED_VK | expression )
			int alt342=2;
			int LA342_0 = input.LA(1);
			if ( (LA342_0==UNLIMITED_VK) ) {
				alt342=1;
			}
			else if ( (LA342_0==EXPR||LA342_0==LOGIC_EXPR) ) {
				alt342=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 342, 0, input);
				throw nvae;
			}

			switch (alt342) {
				case 1 :
					// PLSQLPrinter.g:1245:23: UNLIMITED_VK
					{
					match(input,UNLIMITED_VK,FOLLOW_UNLIMITED_VK_in_error_logging_reject_part9613); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1245:36: expression
					{
					pushFollow(FOLLOW_expression_in_error_logging_reject_part9615);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "error_logging_reject_part"


	public static class dml_table_expression_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_table_expression_clause"
	// PLSQLPrinter.g:1248:1: dml_table_expression_clause : ( ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) | ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) | ^( DIRECT_MODE tableview_name ( sample_clause )? ) | table_ref | general_element ) ) | table_ref );
	public final PLSQLPrinter.dml_table_expression_clause_return dml_table_expression_clause() throws RecognitionException {
		PLSQLPrinter.dml_table_expression_clause_return retval = new PLSQLPrinter.dml_table_expression_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1249:5: ( ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) | ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) | ^( DIRECT_MODE tableview_name ( sample_clause )? ) | table_ref | general_element ) ) | table_ref )
			int alt347=2;
			int LA347_0 = input.LA(1);
			if ( (LA347_0==TABLE_EXPRESSION) ) {
				alt347=1;
			}
			else if ( (LA347_0==TABLE_REF) ) {
				alt347=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 347, 0, input);
				throw nvae;
			}

			switch (alt347) {
				case 1 :
					// PLSQLPrinter.g:1249:10: ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) | ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) | ^( DIRECT_MODE tableview_name ( sample_clause )? ) | table_ref | general_element ) )
					{
					match(input,TABLE_EXPRESSION,FOLLOW_TABLE_EXPRESSION_in_dml_table_expression_clause9638); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1250:9: ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) | ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) | ^( DIRECT_MODE tableview_name ( sample_clause )? ) | table_ref | general_element )
					int alt346=5;
					switch ( input.LA(1) ) {
					case COLLECTION_MODE:
						{
						alt346=1;
						}
						break;
					case SELECT_MODE:
						{
						alt346=2;
						}
						break;
					case DIRECT_MODE:
						{
						alt346=3;
						}
						break;
					case TABLE_REF:
						{
						alt346=4;
						}
						break;
					case ANY_ELEMENT:
					case CASCATED_ELEMENT:
					case HOSTED_VARIABLE:
					case HOSTED_VARIABLE_ROUTINE_CALL:
					case ROUTINE_CALL:
						{
						alt346=5;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 346, 0, input);
						throw nvae;
					}
					switch (alt346) {
						case 1 :
							// PLSQLPrinter.g:1250:14: ^( COLLECTION_MODE expression ( PLUS_SIGN )? )
							{
							match(input,COLLECTION_MODE,FOLLOW_COLLECTION_MODE_in_dml_table_expression_clause9655); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_expression_in_dml_table_expression_clause9657);
							expression();
							state._fsp--;

							// PLSQLPrinter.g:1250:43: ( PLUS_SIGN )?
							int alt343=2;
							int LA343_0 = input.LA(1);
							if ( (LA343_0==PLUS_SIGN) ) {
								alt343=1;
							}
							switch (alt343) {
								case 1 :
									// PLSQLPrinter.g:1250:43: PLUS_SIGN
									{
									match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_dml_table_expression_clause9659); 
									}
									break;

							}

							match(input, Token.UP, null); 

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1251:14: ^( SELECT_MODE select_statement ( subquery_restriction_clause )? )
							{
							match(input,SELECT_MODE,FOLLOW_SELECT_MODE_in_dml_table_expression_clause9677); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_select_statement_in_dml_table_expression_clause9679);
							select_statement();
							state._fsp--;

							// PLSQLPrinter.g:1251:45: ( subquery_restriction_clause )?
							int alt344=2;
							int LA344_0 = input.LA(1);
							if ( (LA344_0==SQL92_RESERVED_WITH) ) {
								alt344=1;
							}
							switch (alt344) {
								case 1 :
									// PLSQLPrinter.g:1251:45: subquery_restriction_clause
									{
									pushFollow(FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause9681);
									subquery_restriction_clause();
									state._fsp--;

									}
									break;

							}

							match(input, Token.UP, null); 

							}
							break;
						case 3 :
							// PLSQLPrinter.g:1252:14: ^( DIRECT_MODE tableview_name ( sample_clause )? )
							{
							match(input,DIRECT_MODE,FOLLOW_DIRECT_MODE_in_dml_table_expression_clause9699); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_tableview_name_in_dml_table_expression_clause9701);
							tableview_name();
							state._fsp--;

							// PLSQLPrinter.g:1252:43: ( sample_clause )?
							int alt345=2;
							int LA345_0 = input.LA(1);
							if ( (LA345_0==SAMPLE_VK) ) {
								alt345=1;
							}
							switch (alt345) {
								case 1 :
									// PLSQLPrinter.g:1252:43: sample_clause
									{
									pushFollow(FOLLOW_sample_clause_in_dml_table_expression_clause9703);
									sample_clause();
									state._fsp--;

									}
									break;

							}

							match(input, Token.UP, null); 

							}
							break;
						case 4 :
							// PLSQLPrinter.g:1253:14: table_ref
							{
							pushFollow(FOLLOW_table_ref_in_dml_table_expression_clause9720);
							table_ref();
							state._fsp--;

							}
							break;
						case 5 :
							// PLSQLPrinter.g:1254:14: general_element
							{
							pushFollow(FOLLOW_general_element_in_dml_table_expression_clause9735);
							general_element();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1257:14: table_ref
					{
					pushFollow(FOLLOW_table_ref_in_dml_table_expression_clause9770);
					table_ref();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_table_expression_clause"


	public static class subquery_restriction_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_restriction_clause"
	// PLSQLPrinter.g:1260:1: subquery_restriction_clause : ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) ) ;
	public final PLSQLPrinter.subquery_restriction_clause_return subquery_restriction_clause() throws RecognitionException {
		PLSQLPrinter.subquery_restriction_clause_return retval = new PLSQLPrinter.subquery_restriction_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1261:5: ( ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) ) )
			// PLSQLPrinter.g:1261:10: ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) )
			{
			match(input,SQL92_RESERVED_WITH,FOLLOW_SQL92_RESERVED_WITH_in_subquery_restriction_clause9791); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1261:32: ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? )
			int alt349=2;
			int LA349_0 = input.LA(1);
			if ( (LA349_0==READ_VK) ) {
				alt349=1;
			}
			else if ( (LA349_0==SQL92_RESERVED_CHECK) ) {
				alt349=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 349, 0, input);
				throw nvae;
			}

			switch (alt349) {
				case 1 :
					// PLSQLPrinter.g:1261:33: READ_VK
					{
					match(input,READ_VK,FOLLOW_READ_VK_in_subquery_restriction_clause9794); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1261:41: SQL92_RESERVED_CHECK ( constraint_name )?
					{
					match(input,SQL92_RESERVED_CHECK,FOLLOW_SQL92_RESERVED_CHECK_in_subquery_restriction_clause9796); 
					// PLSQLPrinter.g:1261:62: ( constraint_name )?
					int alt348=2;
					int LA348_0 = input.LA(1);
					if ( (LA348_0==CONSTRAINT_NAME) ) {
						alt348=1;
					}
					switch (alt348) {
						case 1 :
							// PLSQLPrinter.g:1261:62: constraint_name
							{
							pushFollow(FOLLOW_constraint_name_in_subquery_restriction_clause9798);
							constraint_name();
							state._fsp--;

							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_restriction_clause"


	public static class sample_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sample_clause"
	// PLSQLPrinter.g:1264:1: sample_clause : ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? ) ;
	public final PLSQLPrinter.sample_clause_return sample_clause() throws RecognitionException {
		PLSQLPrinter.sample_clause_return retval = new PLSQLPrinter.sample_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1265:5: ( ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? ) )
			// PLSQLPrinter.g:1265:10: ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? )
			{
			match(input,SAMPLE_VK,FOLLOW_SAMPLE_VK_in_sample_clause9822); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1265:22: ( BLOCK_VK )?
			int alt350=2;
			int LA350_0 = input.LA(1);
			if ( (LA350_0==BLOCK_VK) ) {
				alt350=1;
			}
			switch (alt350) {
				case 1 :
					// PLSQLPrinter.g:1265:22: BLOCK_VK
					{
					match(input,BLOCK_VK,FOLLOW_BLOCK_VK_in_sample_clause9824); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_sample_clause9827);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1265:43: ( seed_part )?
			int alt351=2;
			int LA351_0 = input.LA(1);
			if ( (LA351_0==SEED_VK) ) {
				alt351=1;
			}
			switch (alt351) {
				case 1 :
					// PLSQLPrinter.g:1265:43: seed_part
					{
					pushFollow(FOLLOW_seed_part_in_sample_clause9829);
					seed_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sample_clause"


	public static class seed_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "seed_part"
	// PLSQLPrinter.g:1268:1: seed_part : ^( SEED_VK expression ) ;
	public final PLSQLPrinter.seed_part_return seed_part() throws RecognitionException {
		PLSQLPrinter.seed_part_return retval = new PLSQLPrinter.seed_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1269:5: ( ^( SEED_VK expression ) )
			// PLSQLPrinter.g:1269:10: ^( SEED_VK expression )
			{
			match(input,SEED_VK,FOLLOW_SEED_VK_in_seed_part9853); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_seed_part9855);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "seed_part"


	public static class cursor_manipulation_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_manipulation_statements"
	// PLSQLPrinter.g:1278:1: cursor_manipulation_statements : ( close_statement | open_statement | fetch_statement | open_for_statement );
	public final PLSQLPrinter.cursor_manipulation_statements_return cursor_manipulation_statements() throws RecognitionException {
		PLSQLPrinter.cursor_manipulation_statements_return retval = new PLSQLPrinter.cursor_manipulation_statements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1279:5: ( close_statement | open_statement | fetch_statement | open_for_statement )
			int alt352=4;
			switch ( input.LA(1) ) {
			case CLOSE_VK:
				{
				alt352=1;
				}
				break;
			case OPEN_VK:
				{
				int LA352_2 = input.LA(2);
				if ( (LA352_2==DOWN) ) {
					int LA352_4 = input.LA(3);
					if ( (LA352_4==CURSOR_NAME) ) {
						alt352=2;
					}
					else if ( (LA352_4==HOSTED_VARIABLE_NAME||LA352_4==VARIABLE_NAME) ) {
						alt352=4;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 352, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 352, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_FETCH:
				{
				alt352=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 352, 0, input);
				throw nvae;
			}
			switch (alt352) {
				case 1 :
					// PLSQLPrinter.g:1279:10: close_statement
					{
					pushFollow(FOLLOW_close_statement_in_cursor_manipulation_statements9882);
					close_statement();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1280:10: open_statement
					{
					pushFollow(FOLLOW_open_statement_in_cursor_manipulation_statements9893);
					open_statement();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1281:10: fetch_statement
					{
					pushFollow(FOLLOW_fetch_statement_in_cursor_manipulation_statements9904);
					fetch_statement();
					state._fsp--;

					}
					break;
				case 4 :
					// PLSQLPrinter.g:1282:10: open_for_statement
					{
					pushFollow(FOLLOW_open_for_statement_in_cursor_manipulation_statements9915);
					open_for_statement();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_manipulation_statements"


	public static class close_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "close_statement"
	// PLSQLPrinter.g:1285:1: close_statement : ^( CLOSE_VK variable_name ) ;
	public final PLSQLPrinter.close_statement_return close_statement() throws RecognitionException {
		PLSQLPrinter.close_statement_return retval = new PLSQLPrinter.close_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1286:5: ( ^( CLOSE_VK variable_name ) )
			// PLSQLPrinter.g:1286:11: ^( CLOSE_VK variable_name )
			{
			match(input,CLOSE_VK,FOLLOW_CLOSE_VK_in_close_statement9937); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_variable_name_in_close_statement9939);
			variable_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "close_statement"


	public static class open_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "open_statement"
	// PLSQLPrinter.g:1289:1: open_statement : ^( OPEN_VK cursor_name ( expression_list )? ) ;
	public final PLSQLPrinter.open_statement_return open_statement() throws RecognitionException {
		PLSQLPrinter.open_statement_return retval = new PLSQLPrinter.open_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1290:5: ( ^( OPEN_VK cursor_name ( expression_list )? ) )
			// PLSQLPrinter.g:1290:10: ^( OPEN_VK cursor_name ( expression_list )? )
			{
			match(input,OPEN_VK,FOLLOW_OPEN_VK_in_open_statement9962); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_open_statement9964);
			cursor_name();
			state._fsp--;

			// PLSQLPrinter.g:1290:32: ( expression_list )?
			int alt353=2;
			int LA353_0 = input.LA(1);
			if ( (LA353_0==EXPR_LIST) ) {
				alt353=1;
			}
			switch (alt353) {
				case 1 :
					// PLSQLPrinter.g:1290:32: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_open_statement9966);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "open_statement"


	public static class fetch_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "fetch_statement"
	// PLSQLPrinter.g:1293:1: fetch_statement : ^( SQL92_RESERVED_FETCH cursor_name ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) ) ) ;
	public final PLSQLPrinter.fetch_statement_return fetch_statement() throws RecognitionException {
		PLSQLPrinter.fetch_statement_return retval = new PLSQLPrinter.fetch_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1294:5: ( ^( SQL92_RESERVED_FETCH cursor_name ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) ) ) )
			// PLSQLPrinter.g:1294:10: ^( SQL92_RESERVED_FETCH cursor_name ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) ) )
			{
			match(input,SQL92_RESERVED_FETCH,FOLLOW_SQL92_RESERVED_FETCH_in_fetch_statement9989); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_fetch_statement9991);
			cursor_name();
			state._fsp--;

			// PLSQLPrinter.g:1295:13: ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) )
			int alt356=2;
			int LA356_0 = input.LA(1);
			if ( (LA356_0==SQL92_RESERVED_INTO) ) {
				alt356=1;
			}
			else if ( (LA356_0==BULK_VK) ) {
				alt356=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 356, 0, input);
				throw nvae;
			}

			switch (alt356) {
				case 1 :
					// PLSQLPrinter.g:1295:18: ^( SQL92_RESERVED_INTO ( variable_name )+ )
					{
					match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_fetch_statement10012); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1295:40: ( variable_name )+
					int cnt354=0;
					loop354:
					while (true) {
						int alt354=2;
						int LA354_0 = input.LA(1);
						if ( (LA354_0==HOSTED_VARIABLE_NAME||LA354_0==VARIABLE_NAME) ) {
							alt354=1;
						}

						switch (alt354) {
						case 1 :
							// PLSQLPrinter.g:1295:40: variable_name
							{
							pushFollow(FOLLOW_variable_name_in_fetch_statement10014);
							variable_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt354 >= 1 ) break loop354;
							EarlyExitException eee = new EarlyExitException(354, input);
							throw eee;
						}
						cnt354++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1296:18: ^( BULK_VK ( variable_name )+ )
					{
					match(input,BULK_VK,FOLLOW_BULK_VK_in_fetch_statement10036); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1296:28: ( variable_name )+
					int cnt355=0;
					loop355:
					while (true) {
						int alt355=2;
						int LA355_0 = input.LA(1);
						if ( (LA355_0==HOSTED_VARIABLE_NAME||LA355_0==VARIABLE_NAME) ) {
							alt355=1;
						}

						switch (alt355) {
						case 1 :
							// PLSQLPrinter.g:1296:28: variable_name
							{
							pushFollow(FOLLOW_variable_name_in_fetch_statement10038);
							variable_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt355 >= 1 ) break loop355;
							EarlyExitException eee = new EarlyExitException(355, input);
							throw eee;
						}
						cnt355++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fetch_statement"


	public static class open_for_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "open_for_statement"
	// PLSQLPrinter.g:1301:1: open_for_statement : ^( OPEN_VK variable_name ( expression | select_statement ) ( using_clause )? ) ;
	public final PLSQLPrinter.open_for_statement_return open_for_statement() throws RecognitionException {
		PLSQLPrinter.open_for_statement_return retval = new PLSQLPrinter.open_for_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1302:5: ( ^( OPEN_VK variable_name ( expression | select_statement ) ( using_clause )? ) )
			// PLSQLPrinter.g:1302:10: ^( OPEN_VK variable_name ( expression | select_statement ) ( using_clause )? )
			{
			match(input,OPEN_VK,FOLLOW_OPEN_VK_in_open_for_statement10085); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_variable_name_in_open_for_statement10087);
			variable_name();
			state._fsp--;

			// PLSQLPrinter.g:1302:34: ( expression | select_statement )
			int alt357=2;
			int LA357_0 = input.LA(1);
			if ( (LA357_0==EXPR||LA357_0==LOGIC_EXPR) ) {
				alt357=1;
			}
			else if ( (LA357_0==SELECT_STATEMENT) ) {
				alt357=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 357, 0, input);
				throw nvae;
			}

			switch (alt357) {
				case 1 :
					// PLSQLPrinter.g:1302:35: expression
					{
					pushFollow(FOLLOW_expression_in_open_for_statement10090);
					expression();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1302:46: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_open_for_statement10092);
					select_statement();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1302:64: ( using_clause )?
			int alt358=2;
			int LA358_0 = input.LA(1);
			if ( (LA358_0==PLSQL_NON_RESERVED_USING) ) {
				alt358=1;
			}
			switch (alt358) {
				case 1 :
					// PLSQLPrinter.g:1302:64: using_clause
					{
					pushFollow(FOLLOW_using_clause_in_open_for_statement10095);
					using_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "open_for_statement"


	public static class transaction_control_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "transaction_control_statements"
	// PLSQLPrinter.g:1309:1: transaction_control_statements : ( set_transaction_command | set_constraint_command | commit_statement | rollback_statement | savepoint_statement );
	public final PLSQLPrinter.transaction_control_statements_return transaction_control_statements() throws RecognitionException {
		PLSQLPrinter.transaction_control_statements_return retval = new PLSQLPrinter.transaction_control_statements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1310:5: ( set_transaction_command | set_constraint_command | commit_statement | rollback_statement | savepoint_statement )
			int alt359=5;
			switch ( input.LA(1) ) {
			case SET_TRANSACTION:
				{
				alt359=1;
				}
				break;
			case SET_CONSTRAINT:
				{
				alt359=2;
				}
				break;
			case COMMIT_VK:
				{
				alt359=3;
				}
				break;
			case ROLLBACK_VK:
				{
				alt359=4;
				}
				break;
			case SAVEPOINT_VK:
				{
				alt359=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 359, 0, input);
				throw nvae;
			}
			switch (alt359) {
				case 1 :
					// PLSQLPrinter.g:1310:10: set_transaction_command
					{
					pushFollow(FOLLOW_set_transaction_command_in_transaction_control_statements10121);
					set_transaction_command();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1311:10: set_constraint_command
					{
					pushFollow(FOLLOW_set_constraint_command_in_transaction_control_statements10132);
					set_constraint_command();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1312:10: commit_statement
					{
					pushFollow(FOLLOW_commit_statement_in_transaction_control_statements10143);
					commit_statement();
					state._fsp--;

					}
					break;
				case 4 :
					// PLSQLPrinter.g:1313:10: rollback_statement
					{
					pushFollow(FOLLOW_rollback_statement_in_transaction_control_statements10154);
					rollback_statement();
					state._fsp--;

					}
					break;
				case 5 :
					// PLSQLPrinter.g:1314:10: savepoint_statement
					{
					pushFollow(FOLLOW_savepoint_statement_in_transaction_control_statements10165);
					savepoint_statement();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "transaction_control_statements"


	public static class set_transaction_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "set_transaction_command"
	// PLSQLPrinter.g:1317:1: set_transaction_command : ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? ) ;
	public final PLSQLPrinter.set_transaction_command_return set_transaction_command() throws RecognitionException {
		PLSQLPrinter.set_transaction_command_return retval = new PLSQLPrinter.set_transaction_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1318:5: ( ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? ) )
			// PLSQLPrinter.g:1318:10: ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? )
			{
			match(input,SET_TRANSACTION,FOLLOW_SET_TRANSACTION_in_set_transaction_command10186); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1318:28: ( CHAR_STRING )?
				int alt360=2;
				int LA360_0 = input.LA(1);
				if ( (LA360_0==CHAR_STRING) ) {
					alt360=1;
				}
				switch (alt360) {
					case 1 :
						// PLSQLPrinter.g:1318:28: CHAR_STRING
						{
						match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_set_transaction_command10188); 
						}
						break;

				}

				// PLSQLPrinter.g:1319:13: ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )?
				int alt361=4;
				switch ( input.LA(1) ) {
					case READ_VK:
						{
						alt361=1;
						}
						break;
					case ISOLATION_VK:
						{
						alt361=2;
						}
						break;
					case ROLLBACK_VK:
						{
						alt361=3;
						}
						break;
				}
				switch (alt361) {
					case 1 :
						// PLSQLPrinter.g:1319:18: ^( READ_VK ( ONLY_VK | WRITE_VK ) )
						{
						match(input,READ_VK,FOLLOW_READ_VK_in_set_transaction_command10209); 
						match(input, Token.DOWN, null); 
						if ( input.LA(1)==ONLY_VK||input.LA(1)==WRITE_VK ) {
							input.consume();
							state.errorRecovery=false;
						}
						else {
							MismatchedSetException mse = new MismatchedSetException(null,input);
							throw mse;
						}
						match(input, Token.UP, null); 

						}
						break;
					case 2 :
						// PLSQLPrinter.g:1320:18: ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) )
						{
						match(input,ISOLATION_VK,FOLLOW_ISOLATION_VK_in_set_transaction_command10236); 
						match(input, Token.DOWN, null); 
						if ( input.LA(1)==COMMITTED_VK||input.LA(1)==SERIALIZABLE_VK ) {
							input.consume();
							state.errorRecovery=false;
						}
						else {
							MismatchedSetException mse = new MismatchedSetException(null,input);
							throw mse;
						}
						match(input, Token.UP, null); 

						}
						break;
					case 3 :
						// PLSQLPrinter.g:1321:18: ^( ROLLBACK_VK rollback_segment_name )
						{
						match(input,ROLLBACK_VK,FOLLOW_ROLLBACK_VK_in_set_transaction_command10263); 
						match(input, Token.DOWN, null); 
						pushFollow(FOLLOW_rollback_segment_name_in_set_transaction_command10265);
						rollback_segment_name();
						state._fsp--;

						match(input, Token.UP, null); 

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_transaction_command"


	public static class set_constraint_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "set_constraint_command"
	// PLSQLPrinter.g:1326:1: set_constraint_command : ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) ) ;
	public final PLSQLPrinter.set_constraint_command_return set_constraint_command() throws RecognitionException {
		PLSQLPrinter.set_constraint_command_return retval = new PLSQLPrinter.set_constraint_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1327:5: ( ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) ) )
			// PLSQLPrinter.g:1327:10: ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) )
			{
			match(input,SET_CONSTRAINT,FOLLOW_SET_CONSTRAINT_in_set_constraint_command10312); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1327:27: ( SQL92_RESERVED_ALL | ( constraint_name )+ )
			int alt363=2;
			int LA363_0 = input.LA(1);
			if ( (LA363_0==SQL92_RESERVED_ALL) ) {
				alt363=1;
			}
			else if ( (LA363_0==CONSTRAINT_NAME) ) {
				alt363=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 363, 0, input);
				throw nvae;
			}

			switch (alt363) {
				case 1 :
					// PLSQLPrinter.g:1327:28: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_set_constraint_command10315); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1327:47: ( constraint_name )+
					{
					// PLSQLPrinter.g:1327:47: ( constraint_name )+
					int cnt362=0;
					loop362:
					while (true) {
						int alt362=2;
						int LA362_0 = input.LA(1);
						if ( (LA362_0==CONSTRAINT_NAME) ) {
							alt362=1;
						}

						switch (alt362) {
						case 1 :
							// PLSQLPrinter.g:1327:47: constraint_name
							{
							pushFollow(FOLLOW_constraint_name_in_set_constraint_command10317);
							constraint_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt362 >= 1 ) break loop362;
							EarlyExitException eee = new EarlyExitException(362, input);
							throw eee;
						}
						cnt362++;
					}

					}
					break;

			}

			if ( input.LA(1)==DEFERRED_VK||input.LA(1)==IMMEDIATE_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_constraint_command"


	public static class commit_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "commit_statement"
	// PLSQLPrinter.g:1330:1: commit_statement : ^( COMMIT_VK ( WORK_VK )? ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )? ( write_clause )? ) ;
	public final PLSQLPrinter.commit_statement_return commit_statement() throws RecognitionException {
		PLSQLPrinter.commit_statement_return retval = new PLSQLPrinter.commit_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1331:5: ( ^( COMMIT_VK ( WORK_VK )? ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )? ( write_clause )? ) )
			// PLSQLPrinter.g:1331:11: ^( COMMIT_VK ( WORK_VK )? ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )? ( write_clause )? )
			{
			match(input,COMMIT_VK,FOLLOW_COMMIT_VK_in_commit_statement10348); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1331:23: ( WORK_VK )?
				int alt364=2;
				int LA364_0 = input.LA(1);
				if ( (LA364_0==WORK_VK) ) {
					alt364=1;
				}
				switch (alt364) {
					case 1 :
						// PLSQLPrinter.g:1331:23: WORK_VK
						{
						match(input,WORK_VK,FOLLOW_WORK_VK_in_commit_statement10350); 
						}
						break;

				}

				// PLSQLPrinter.g:1332:13: ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )?
				int alt367=3;
				int LA367_0 = input.LA(1);
				if ( (LA367_0==COMMENT_VK) ) {
					alt367=1;
				}
				else if ( (LA367_0==FORCE_VK) ) {
					alt367=2;
				}
				switch (alt367) {
					case 1 :
						// PLSQLPrinter.g:1332:18: ^( COMMENT_VK expression )
						{
						match(input,COMMENT_VK,FOLLOW_COMMENT_VK_in_commit_statement10372); 
						match(input, Token.DOWN, null); 
						pushFollow(FOLLOW_expression_in_commit_statement10374);
						expression();
						state._fsp--;

						match(input, Token.UP, null); 

						}
						break;
					case 2 :
						// PLSQLPrinter.g:1333:18: ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) )
						{
						match(input,FORCE_VK,FOLLOW_FORCE_VK_in_commit_statement10395); 
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:1333:29: ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? )
						int alt366=3;
						switch ( input.LA(1) ) {
						case CORRUPT_XID_VK:
							{
							alt366=1;
							}
							break;
						case CORRUPT_XID_ALL_VK:
							{
							alt366=2;
							}
							break;
						case EXPR:
						case LOGIC_EXPR:
							{
							alt366=3;
							}
							break;
						default:
							NoViableAltException nvae =
								new NoViableAltException("", 366, 0, input);
							throw nvae;
						}
						switch (alt366) {
							case 1 :
								// PLSQLPrinter.g:1333:30: CORRUPT_XID_VK expression
								{
								match(input,CORRUPT_XID_VK,FOLLOW_CORRUPT_XID_VK_in_commit_statement10398); 
								pushFollow(FOLLOW_expression_in_commit_statement10400);
								expression();
								state._fsp--;

								}
								break;
							case 2 :
								// PLSQLPrinter.g:1333:56: CORRUPT_XID_ALL_VK
								{
								match(input,CORRUPT_XID_ALL_VK,FOLLOW_CORRUPT_XID_ALL_VK_in_commit_statement10402); 
								}
								break;
							case 3 :
								// PLSQLPrinter.g:1333:75: expression ( expression )?
								{
								pushFollow(FOLLOW_expression_in_commit_statement10404);
								expression();
								state._fsp--;

								// PLSQLPrinter.g:1333:86: ( expression )?
								int alt365=2;
								int LA365_0 = input.LA(1);
								if ( (LA365_0==EXPR||LA365_0==LOGIC_EXPR) ) {
									alt365=1;
								}
								switch (alt365) {
									case 1 :
										// PLSQLPrinter.g:1333:86: expression
										{
										pushFollow(FOLLOW_expression_in_commit_statement10406);
										expression();
										state._fsp--;

										}
										break;

								}

								}
								break;

						}

						match(input, Token.UP, null); 

						}
						break;

				}

				// PLSQLPrinter.g:1335:13: ( write_clause )?
				int alt368=2;
				int LA368_0 = input.LA(1);
				if ( (LA368_0==WRITE_VK) ) {
					alt368=1;
				}
				switch (alt368) {
					case 1 :
						// PLSQLPrinter.g:1335:13: write_clause
						{
						pushFollow(FOLLOW_write_clause_in_commit_statement10438);
						write_clause();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commit_statement"


	public static class write_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "write_clause"
	// PLSQLPrinter.g:1339:1: write_clause : ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? ) ;
	public final PLSQLPrinter.write_clause_return write_clause() throws RecognitionException {
		PLSQLPrinter.write_clause_return retval = new PLSQLPrinter.write_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1340:5: ( ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? ) )
			// PLSQLPrinter.g:1340:10: ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? )
			{
			match(input,WRITE_VK,FOLLOW_WRITE_VK_in_write_clause10470); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1340:21: ( WAIT_VK | PLSQL_RESERVED_NOWAIT )?
				int alt369=2;
				int LA369_0 = input.LA(1);
				if ( (LA369_0==PLSQL_RESERVED_NOWAIT||LA369_0==WAIT_VK) ) {
					alt369=1;
				}
				switch (alt369) {
					case 1 :
						// PLSQLPrinter.g:
						{
						if ( input.LA(1)==PLSQL_RESERVED_NOWAIT||input.LA(1)==WAIT_VK ) {
							input.consume();
							state.errorRecovery=false;
						}
						else {
							MismatchedSetException mse = new MismatchedSetException(null,input);
							throw mse;
						}
						}
						break;

				}

				// PLSQLPrinter.g:1340:54: ( IMMEDIATE_VK | BATCH_VK )?
				int alt370=2;
				int LA370_0 = input.LA(1);
				if ( (LA370_0==BATCH_VK||LA370_0==IMMEDIATE_VK) ) {
					alt370=1;
				}
				switch (alt370) {
					case 1 :
						// PLSQLPrinter.g:
						{
						if ( input.LA(1)==BATCH_VK||input.LA(1)==IMMEDIATE_VK ) {
							input.consume();
							state.errorRecovery=false;
						}
						else {
							MismatchedSetException mse = new MismatchedSetException(null,input);
							throw mse;
						}
						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "write_clause"


	public static class rollback_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "rollback_statement"
	// PLSQLPrinter.g:1343:1: rollback_statement : ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? ) ;
	public final PLSQLPrinter.rollback_statement_return rollback_statement() throws RecognitionException {
		PLSQLPrinter.rollback_statement_return retval = new PLSQLPrinter.rollback_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1344:5: ( ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? ) )
			// PLSQLPrinter.g:1344:11: ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? )
			{
			match(input,ROLLBACK_VK,FOLLOW_ROLLBACK_VK_in_rollback_statement10507); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1344:25: ( WORK_VK )?
				int alt371=2;
				int LA371_0 = input.LA(1);
				if ( (LA371_0==WORK_VK) ) {
					alt371=1;
				}
				switch (alt371) {
					case 1 :
						// PLSQLPrinter.g:1344:25: WORK_VK
						{
						match(input,WORK_VK,FOLLOW_WORK_VK_in_rollback_statement10509); 
						}
						break;

				}

				// PLSQLPrinter.g:1345:13: ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )?
				int alt372=3;
				int LA372_0 = input.LA(1);
				if ( (LA372_0==SQL92_RESERVED_TO) ) {
					alt372=1;
				}
				else if ( (LA372_0==FORCE_VK) ) {
					alt372=2;
				}
				switch (alt372) {
					case 1 :
						// PLSQLPrinter.g:1345:18: ^( SQL92_RESERVED_TO savepoint_name )
						{
						match(input,SQL92_RESERVED_TO,FOLLOW_SQL92_RESERVED_TO_in_rollback_statement10531); 
						match(input, Token.DOWN, null); 
						pushFollow(FOLLOW_savepoint_name_in_rollback_statement10533);
						savepoint_name();
						state._fsp--;

						match(input, Token.UP, null); 

						}
						break;
					case 2 :
						// PLSQLPrinter.g:1346:18: ^( FORCE_VK CHAR_STRING )
						{
						match(input,FORCE_VK,FOLLOW_FORCE_VK_in_rollback_statement10554); 
						match(input, Token.DOWN, null); 
						match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_rollback_statement10556); 
						match(input, Token.UP, null); 

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rollback_statement"


	public static class savepoint_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "savepoint_statement"
	// PLSQLPrinter.g:1351:1: savepoint_statement : ^( SAVEPOINT_VK savepoint_name ) ;
	public final PLSQLPrinter.savepoint_statement_return savepoint_statement() throws RecognitionException {
		PLSQLPrinter.savepoint_statement_return retval = new PLSQLPrinter.savepoint_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1352:5: ( ^( SAVEPOINT_VK savepoint_name ) )
			// PLSQLPrinter.g:1352:10: ^( SAVEPOINT_VK savepoint_name )
			{
			match(input,SAVEPOINT_VK,FOLLOW_SAVEPOINT_VK_in_savepoint_statement10603); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_savepoint_name_in_savepoint_statement10605);
			savepoint_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "savepoint_statement"


	public static class pipe_row_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pipe_row_statement"
	// PLSQLPrinter.g:1355:1: pipe_row_statement : ^( PIPE_ROW expression ) ;
	public final PLSQLPrinter.pipe_row_statement_return pipe_row_statement() throws RecognitionException {
		PLSQLPrinter.pipe_row_statement_return retval = new PLSQLPrinter.pipe_row_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1356:5: ( ^( PIPE_ROW expression ) )
			// PLSQLPrinter.g:1356:10: ^( PIPE_ROW expression )
			{
			match(input,PIPE_ROW,FOLLOW_PIPE_ROW_in_pipe_row_statement10632); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_pipe_row_statement10634);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pipe_row_statement"


	public static class expression_list_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "expression_list"
	// PLSQLPrinter.g:1363:1: expression_list : ^( EXPR_LIST ( expression )* ) ;
	public final PLSQLPrinter.expression_list_return expression_list() throws RecognitionException {
		PLSQLPrinter.expression_list_return retval = new PLSQLPrinter.expression_list_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1364:5: ( ^( EXPR_LIST ( expression )* ) )
			// PLSQLPrinter.g:1364:10: ^( EXPR_LIST ( expression )* )
			{
			match(input,EXPR_LIST,FOLLOW_EXPR_LIST_in_expression_list10660); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1364:22: ( expression )*
				loop373:
				while (true) {
					int alt373=2;
					int LA373_0 = input.LA(1);
					if ( (LA373_0==EXPR||LA373_0==LOGIC_EXPR) ) {
						alt373=1;
					}

					switch (alt373) {
					case 1 :
						// PLSQLPrinter.g:1364:22: expression
						{
						pushFollow(FOLLOW_expression_in_expression_list10662);
						expression();
						state._fsp--;

						}
						break;

					default :
						break loop373;
					}
				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression_list"


	public static class expression_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "expression"
	// PLSQLPrinter.g:1367:1: expression : ( ^( LOGIC_EXPR expression_element ) | ^( EXPR expression_element ) );
	public final PLSQLPrinter.expression_return expression() throws RecognitionException {
		PLSQLPrinter.expression_return retval = new PLSQLPrinter.expression_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1368:5: ( ^( LOGIC_EXPR expression_element ) | ^( EXPR expression_element ) )
			int alt374=2;
			int LA374_0 = input.LA(1);
			if ( (LA374_0==LOGIC_EXPR) ) {
				alt374=1;
			}
			else if ( (LA374_0==EXPR) ) {
				alt374=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 374, 0, input);
				throw nvae;
			}

			switch (alt374) {
				case 1 :
					// PLSQLPrinter.g:1368:10: ^( LOGIC_EXPR expression_element )
					{
					match(input,LOGIC_EXPR,FOLLOW_LOGIC_EXPR_in_expression10685); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression10687);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1369:10: ^( EXPR expression_element )
					{
					match(input,EXPR,FOLLOW_EXPR_in_expression10700); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression10702);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression"


	public static class expression_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "expression_element"
	// PLSQLPrinter.g:1372:1: expression_element : ( ^( SQL92_RESERVED_OR expression_element expression_element ) | ^( SQL92_RESERVED_AND expression_element expression_element ) | ^( SQL92_RESERVED_NOT expression_element ) | ^( ( EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP ) expression_element expression_element ) | ^( IS_NOT_NULL expression_element ) | ^( IS_NULL expression_element ) | ^( IS_NOT_NAN expression_element ) | ^( IS_NAN expression_element ) | ^( IS_NOT_PRESENT expression_element ) | ^( IS_PRESENT expression_element ) | ^( IS_NOT_INFINITE expression_element ) | ^( IS_INFINITE expression_element ) | ^( IS_NOT_A_SET expression_element ) | ^( IS_A_SET expression_element ) | ^( IS_NOT_EMPTY expression_element ) | ^( IS_EMPTY expression_element ) | ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ ) | ^( IS_OF_TYPE expression_element ( type_spec )+ ) | ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element ) | ^( NOT_IN expression_element in_elements ) | ^( SQL92_RESERVED_IN expression_element in_elements ) | ^( NOT_BETWEEN expression_element expression_element expression_element ) | ^( SQL92_RESERVED_BETWEEN expression_element expression_element expression_element ) | ^( NOT_LIKE expression_element expression_element ( expression_element )? ) | ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK ) expression_element expression_element ( expression_element )? ) | ^( CONCATENATION_OP expression_element expression_element ) | ^( PLUS_SIGN expression_element expression_element ) | ^( MINUS_SIGN expression_element expression_element ) | ^( ASTERISK expression_element expression_element ) | ^( SOLIDUS expression_element expression_element ) | ^( MOD_VK expression_element expression_element ) | ^( DIV_VK expression_element expression_element ) | ^( PIPE_VK expression_element expression_element ) | ^( UNARY_OPERATOR expression_element ) | ^( SQL92_RESERVED_PRIOR expression_element ) | ^( NEW_VK expression ) | ^( SQL92_RESERVED_DISTINCT expression_element ) | ^( STANDARD_FUNCTION standard_function ) | ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) expression_element ) | ^( VECTOR_EXPR ( expression_element )+ ) | ^( DATETIME_OP expression_element datetime_element ) | model_expression | ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? ) | ^( DOT_ASTERISK tableview_name ) | ^( ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK ) cursor_name ) | ^( OUTER_JOIN_SIGN expression_element ) | case_statement | constant | general_element | subquery );
	public final PLSQLPrinter.expression_element_return expression_element() throws RecognitionException {
		PLSQLPrinter.expression_element_return retval = new PLSQLPrinter.expression_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1373:5: ( ^( SQL92_RESERVED_OR expression_element expression_element ) | ^( SQL92_RESERVED_AND expression_element expression_element ) | ^( SQL92_RESERVED_NOT expression_element ) | ^( ( EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP ) expression_element expression_element ) | ^( IS_NOT_NULL expression_element ) | ^( IS_NULL expression_element ) | ^( IS_NOT_NAN expression_element ) | ^( IS_NAN expression_element ) | ^( IS_NOT_PRESENT expression_element ) | ^( IS_PRESENT expression_element ) | ^( IS_NOT_INFINITE expression_element ) | ^( IS_INFINITE expression_element ) | ^( IS_NOT_A_SET expression_element ) | ^( IS_A_SET expression_element ) | ^( IS_NOT_EMPTY expression_element ) | ^( IS_EMPTY expression_element ) | ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ ) | ^( IS_OF_TYPE expression_element ( type_spec )+ ) | ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element ) | ^( NOT_IN expression_element in_elements ) | ^( SQL92_RESERVED_IN expression_element in_elements ) | ^( NOT_BETWEEN expression_element expression_element expression_element ) | ^( SQL92_RESERVED_BETWEEN expression_element expression_element expression_element ) | ^( NOT_LIKE expression_element expression_element ( expression_element )? ) | ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK ) expression_element expression_element ( expression_element )? ) | ^( CONCATENATION_OP expression_element expression_element ) | ^( PLUS_SIGN expression_element expression_element ) | ^( MINUS_SIGN expression_element expression_element ) | ^( ASTERISK expression_element expression_element ) | ^( SOLIDUS expression_element expression_element ) | ^( MOD_VK expression_element expression_element ) | ^( DIV_VK expression_element expression_element ) | ^( PIPE_VK expression_element expression_element ) | ^( UNARY_OPERATOR expression_element ) | ^( SQL92_RESERVED_PRIOR expression_element ) | ^( NEW_VK expression ) | ^( SQL92_RESERVED_DISTINCT expression_element ) | ^( STANDARD_FUNCTION standard_function ) | ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) expression_element ) | ^( VECTOR_EXPR ( expression_element )+ ) | ^( DATETIME_OP expression_element datetime_element ) | model_expression | ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? ) | ^( DOT_ASTERISK tableview_name ) | ^( ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK ) cursor_name ) | ^( OUTER_JOIN_SIGN expression_element ) | case_statement | constant | general_element | subquery )
			int alt381=50;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_OR:
				{
				alt381=1;
				}
				break;
			case SQL92_RESERVED_AND:
				{
				alt381=2;
				}
				break;
			case SQL92_RESERVED_NOT:
				{
				alt381=3;
				}
				break;
			case EQUALS_OP:
			case GREATER_THAN_OP:
			case GREATER_THAN_OR_EQUALS_OP:
			case LESS_THAN_OP:
			case LESS_THAN_OR_EQUALS_OP:
			case NOT_EQUAL_OP:
				{
				alt381=4;
				}
				break;
			case IS_NOT_NULL:
				{
				alt381=5;
				}
				break;
			case IS_NULL:
				{
				alt381=6;
				}
				break;
			case IS_NOT_NAN:
				{
				alt381=7;
				}
				break;
			case IS_NAN:
				{
				alt381=8;
				}
				break;
			case IS_NOT_PRESENT:
				{
				alt381=9;
				}
				break;
			case IS_PRESENT:
				{
				alt381=10;
				}
				break;
			case IS_NOT_INFINITE:
				{
				alt381=11;
				}
				break;
			case IS_INFINITE:
				{
				alt381=12;
				}
				break;
			case IS_NOT_A_SET:
				{
				alt381=13;
				}
				break;
			case IS_A_SET:
				{
				alt381=14;
				}
				break;
			case IS_NOT_EMPTY:
				{
				alt381=15;
				}
				break;
			case IS_EMPTY:
				{
				alt381=16;
				}
				break;
			case IS_NOT_OF_TYPE:
				{
				alt381=17;
				}
				break;
			case IS_OF_TYPE:
				{
				alt381=18;
				}
				break;
			case MEMBER_VK:
			case SUBMULTISET_VK:
				{
				alt381=19;
				}
				break;
			case NOT_IN:
				{
				alt381=20;
				}
				break;
			case SQL92_RESERVED_IN:
				{
				alt381=21;
				}
				break;
			case NOT_BETWEEN:
				{
				alt381=22;
				}
				break;
			case SQL92_RESERVED_BETWEEN:
				{
				alt381=23;
				}
				break;
			case NOT_LIKE:
				{
				alt381=24;
				}
				break;
			case SQL92_RESERVED_LIKE:
			case LIKE2_VK:
			case LIKE4_VK:
			case LIKEC_VK:
				{
				alt381=25;
				}
				break;
			case CONCATENATION_OP:
				{
				alt381=26;
				}
				break;
			case PLUS_SIGN:
				{
				alt381=27;
				}
				break;
			case MINUS_SIGN:
				{
				int LA381_28 = input.LA(2);
				if ( (LA381_28==DOWN) ) {
					int LA381_51 = input.LA(3);
					if ( (LA381_51==UNSIGNED_INTEGER) ) {
						int LA381_52 = input.LA(4);
						if ( (LA381_52==UP) ) {
							alt381=48;
						}
						else if ( (LA381_52==APPROXIMATE_NUM_LIT||LA381_52==ASTERISK||LA381_52==CHAR_STRING||LA381_52==CONCATENATION_OP||(LA381_52 >= EQUALS_OP && LA381_52 <= EXACT_NUM_LIT)||(LA381_52 >= GREATER_THAN_OP && LA381_52 <= GREATER_THAN_OR_EQUALS_OP)||(LA381_52 >= LESS_THAN_OP && LA381_52 <= LESS_THAN_OR_EQUALS_OP)||LA381_52==MINUS_SIGN||LA381_52==NOT_EQUAL_OP||LA381_52==PLUS_SIGN||LA381_52==SOLIDUS||LA381_52==SQL92_RESERVED_ALL||(LA381_52 >= SQL92_RESERVED_AND && LA381_52 <= SQL92_RESERVED_ANY)||LA381_52==SQL92_RESERVED_BETWEEN||LA381_52==SQL92_RESERVED_DEFAULT||LA381_52==SQL92_RESERVED_DISTINCT||(LA381_52 >= SQL92_RESERVED_EXISTS && LA381_52 <= SQL92_RESERVED_FALSE)||LA381_52==SQL92_RESERVED_IN||(LA381_52 >= SQL92_RESERVED_LIKE && LA381_52 <= SQL92_RESERVED_NULL)||LA381_52==SQL92_RESERVED_OR||LA381_52==SQL92_RESERVED_PRIOR||LA381_52==SQL92_RESERVED_TRUE||LA381_52==UNSIGNED_INTEGER||LA381_52==ANY_ELEMENT||LA381_52==CASCATED_ELEMENT||LA381_52==DATETIME_OP||LA381_52==DBTIMEZONE_VK||LA381_52==DIV_VK||LA381_52==DOT_ASTERISK||LA381_52==HOSTED_VARIABLE||LA381_52==HOSTED_VARIABLE_ROUTINE_CALL||(LA381_52 >= IS_A_SET && LA381_52 <= IS_PRESENT)||LA381_52==KEEP_VK||(LA381_52 >= LIKE2_VK && LA381_52 <= LIKEC_VK)||LA381_52==MAXVALUE_VK||LA381_52==MEMBER_VK||LA381_52==MINVALUE_VK||LA381_52==MODEL_EXPRESSION||LA381_52==MOD_VK||LA381_52==NEW_VK||LA381_52==NOT_BETWEEN||(LA381_52 >= NOT_IN && LA381_52 <= NOT_LIKE)||LA381_52==OUTER_JOIN_SIGN||(LA381_52 >= PERCENT_FOUND_VK && LA381_52 <= PERCENT_ROWCOUNT_VK)||LA381_52==PIPE_VK||LA381_52==ROUTINE_CALL||LA381_52==SEARCHED_CASE||LA381_52==SESSIONTIMEZONE_VK||LA381_52==SIMPLE_CASE||LA381_52==SOME_VK||LA381_52==STANDARD_FUNCTION||LA381_52==SUBMULTISET_VK||LA381_52==SUBQUERY||LA381_52==UNARY_OPERATOR||LA381_52==VECTOR_EXPR) ) {
							alt381=28;
						}

						else {
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 381, 52, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA381_51==APPROXIMATE_NUM_LIT||LA381_51==ASTERISK||LA381_51==CHAR_STRING||LA381_51==CONCATENATION_OP||(LA381_51 >= EQUALS_OP && LA381_51 <= EXACT_NUM_LIT)||(LA381_51 >= GREATER_THAN_OP && LA381_51 <= GREATER_THAN_OR_EQUALS_OP)||(LA381_51 >= LESS_THAN_OP && LA381_51 <= LESS_THAN_OR_EQUALS_OP)||LA381_51==MINUS_SIGN||LA381_51==NOT_EQUAL_OP||LA381_51==PLUS_SIGN||LA381_51==SOLIDUS||LA381_51==SQL92_RESERVED_ALL||(LA381_51 >= SQL92_RESERVED_AND && LA381_51 <= SQL92_RESERVED_ANY)||LA381_51==SQL92_RESERVED_BETWEEN||LA381_51==SQL92_RESERVED_DEFAULT||LA381_51==SQL92_RESERVED_DISTINCT||(LA381_51 >= SQL92_RESERVED_EXISTS && LA381_51 <= SQL92_RESERVED_FALSE)||LA381_51==SQL92_RESERVED_IN||(LA381_51 >= SQL92_RESERVED_LIKE && LA381_51 <= SQL92_RESERVED_NULL)||LA381_51==SQL92_RESERVED_OR||LA381_51==SQL92_RESERVED_PRIOR||LA381_51==SQL92_RESERVED_TRUE||LA381_51==ANY_ELEMENT||LA381_51==CASCATED_ELEMENT||LA381_51==DATETIME_OP||LA381_51==DBTIMEZONE_VK||LA381_51==DIV_VK||LA381_51==DOT_ASTERISK||LA381_51==HOSTED_VARIABLE||LA381_51==HOSTED_VARIABLE_ROUTINE_CALL||(LA381_51 >= IS_A_SET && LA381_51 <= IS_PRESENT)||LA381_51==KEEP_VK||(LA381_51 >= LIKE2_VK && LA381_51 <= LIKEC_VK)||LA381_51==MAXVALUE_VK||LA381_51==MEMBER_VK||LA381_51==MINVALUE_VK||LA381_51==MODEL_EXPRESSION||LA381_51==MOD_VK||LA381_51==NEW_VK||LA381_51==NOT_BETWEEN||(LA381_51 >= NOT_IN && LA381_51 <= NOT_LIKE)||LA381_51==OUTER_JOIN_SIGN||(LA381_51 >= PERCENT_FOUND_VK && LA381_51 <= PERCENT_ROWCOUNT_VK)||LA381_51==PIPE_VK||LA381_51==ROUTINE_CALL||LA381_51==SEARCHED_CASE||LA381_51==SESSIONTIMEZONE_VK||LA381_51==SIMPLE_CASE||LA381_51==SOME_VK||LA381_51==STANDARD_FUNCTION||LA381_51==SUBMULTISET_VK||LA381_51==SUBQUERY||LA381_51==UNARY_OPERATOR||LA381_51==VECTOR_EXPR) ) {
						alt381=28;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 381, 51, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 381, 28, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ASTERISK:
				{
				alt381=29;
				}
				break;
			case SOLIDUS:
				{
				alt381=30;
				}
				break;
			case MOD_VK:
				{
				alt381=31;
				}
				break;
			case DIV_VK:
				{
				alt381=32;
				}
				break;
			case PIPE_VK:
				{
				alt381=33;
				}
				break;
			case UNARY_OPERATOR:
				{
				alt381=34;
				}
				break;
			case SQL92_RESERVED_PRIOR:
				{
				alt381=35;
				}
				break;
			case NEW_VK:
				{
				alt381=36;
				}
				break;
			case SQL92_RESERVED_DISTINCT:
				{
				alt381=37;
				}
				break;
			case STANDARD_FUNCTION:
				{
				alt381=38;
				}
				break;
			case SQL92_RESERVED_ALL:
			case SQL92_RESERVED_ANY:
			case SQL92_RESERVED_EXISTS:
			case SOME_VK:
				{
				alt381=39;
				}
				break;
			case VECTOR_EXPR:
				{
				alt381=40;
				}
				break;
			case DATETIME_OP:
				{
				alt381=41;
				}
				break;
			case MODEL_EXPRESSION:
				{
				alt381=42;
				}
				break;
			case KEEP_VK:
				{
				alt381=43;
				}
				break;
			case DOT_ASTERISK:
				{
				alt381=44;
				}
				break;
			case PERCENT_FOUND_VK:
			case PERCENT_ISOPEN_VK:
			case PERCENT_NOTFOUND_VK:
			case PERCENT_ROWCOUNT_VK:
				{
				alt381=45;
				}
				break;
			case OUTER_JOIN_SIGN:
				{
				alt381=46;
				}
				break;
			case SEARCHED_CASE:
			case SIMPLE_CASE:
				{
				alt381=47;
				}
				break;
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case EXACT_NUM_LIT:
			case SQL92_RESERVED_DEFAULT:
			case SQL92_RESERVED_FALSE:
			case SQL92_RESERVED_NULL:
			case SQL92_RESERVED_TRUE:
			case UNSIGNED_INTEGER:
			case DBTIMEZONE_VK:
			case MAXVALUE_VK:
			case MINVALUE_VK:
			case SESSIONTIMEZONE_VK:
				{
				alt381=48;
				}
				break;
			case ANY_ELEMENT:
			case CASCATED_ELEMENT:
			case HOSTED_VARIABLE:
			case HOSTED_VARIABLE_ROUTINE_CALL:
			case ROUTINE_CALL:
				{
				alt381=49;
				}
				break;
			case SUBQUERY:
				{
				alt381=50;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 381, 0, input);
				throw nvae;
			}
			switch (alt381) {
				case 1 :
					// PLSQLPrinter.g:1373:10: ^( SQL92_RESERVED_OR expression_element expression_element )
					{
					match(input,SQL92_RESERVED_OR,FOLLOW_SQL92_RESERVED_OR_in_expression_element10724); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10726);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element10728);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1374:10: ^( SQL92_RESERVED_AND expression_element expression_element )
					{
					match(input,SQL92_RESERVED_AND,FOLLOW_SQL92_RESERVED_AND_in_expression_element10741); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10743);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element10745);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1375:10: ^( SQL92_RESERVED_NOT expression_element )
					{
					match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_expression_element10758); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10760);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// PLSQLPrinter.g:1376:10: ^( ( EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP ) expression_element expression_element )
					{
					if ( input.LA(1)==EQUALS_OP||(input.LA(1) >= GREATER_THAN_OP && input.LA(1) <= GREATER_THAN_OR_EQUALS_OP)||(input.LA(1) >= LESS_THAN_OP && input.LA(1) <= LESS_THAN_OR_EQUALS_OP)||input.LA(1)==NOT_EQUAL_OP ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10787);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element10789);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 5 :
					// PLSQLPrinter.g:1378:10: ^( IS_NOT_NULL expression_element )
					{
					match(input,IS_NOT_NULL,FOLLOW_IS_NOT_NULL_in_expression_element10803); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10805);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 6 :
					// PLSQLPrinter.g:1379:10: ^( IS_NULL expression_element )
					{
					match(input,IS_NULL,FOLLOW_IS_NULL_in_expression_element10818); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10820);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 7 :
					// PLSQLPrinter.g:1380:10: ^( IS_NOT_NAN expression_element )
					{
					match(input,IS_NOT_NAN,FOLLOW_IS_NOT_NAN_in_expression_element10833); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10835);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 8 :
					// PLSQLPrinter.g:1381:10: ^( IS_NAN expression_element )
					{
					match(input,IS_NAN,FOLLOW_IS_NAN_in_expression_element10848); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10850);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 9 :
					// PLSQLPrinter.g:1382:10: ^( IS_NOT_PRESENT expression_element )
					{
					match(input,IS_NOT_PRESENT,FOLLOW_IS_NOT_PRESENT_in_expression_element10863); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10865);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 10 :
					// PLSQLPrinter.g:1383:10: ^( IS_PRESENT expression_element )
					{
					match(input,IS_PRESENT,FOLLOW_IS_PRESENT_in_expression_element10878); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10880);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 11 :
					// PLSQLPrinter.g:1384:10: ^( IS_NOT_INFINITE expression_element )
					{
					match(input,IS_NOT_INFINITE,FOLLOW_IS_NOT_INFINITE_in_expression_element10893); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10895);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 12 :
					// PLSQLPrinter.g:1385:10: ^( IS_INFINITE expression_element )
					{
					match(input,IS_INFINITE,FOLLOW_IS_INFINITE_in_expression_element10908); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10910);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 13 :
					// PLSQLPrinter.g:1386:10: ^( IS_NOT_A_SET expression_element )
					{
					match(input,IS_NOT_A_SET,FOLLOW_IS_NOT_A_SET_in_expression_element10923); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10925);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 14 :
					// PLSQLPrinter.g:1387:10: ^( IS_A_SET expression_element )
					{
					match(input,IS_A_SET,FOLLOW_IS_A_SET_in_expression_element10938); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10940);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 15 :
					// PLSQLPrinter.g:1388:10: ^( IS_NOT_EMPTY expression_element )
					{
					match(input,IS_NOT_EMPTY,FOLLOW_IS_NOT_EMPTY_in_expression_element10953); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10955);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 16 :
					// PLSQLPrinter.g:1389:10: ^( IS_EMPTY expression_element )
					{
					match(input,IS_EMPTY,FOLLOW_IS_EMPTY_in_expression_element10968); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10970);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 17 :
					// PLSQLPrinter.g:1390:10: ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ )
					{
					match(input,IS_NOT_OF_TYPE,FOLLOW_IS_NOT_OF_TYPE_in_expression_element10983); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10985);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1390:46: ( type_spec )+
					int cnt375=0;
					loop375:
					while (true) {
						int alt375=2;
						int LA375_0 = input.LA(1);
						if ( (LA375_0==CUSTOM_TYPE||LA375_0==INTERVAL_DATATYPE||LA375_0==NATIVE_DATATYPE) ) {
							alt375=1;
						}

						switch (alt375) {
						case 1 :
							// PLSQLPrinter.g:1390:46: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_expression_element10987);
							type_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt375 >= 1 ) break loop375;
							EarlyExitException eee = new EarlyExitException(375, input);
							throw eee;
						}
						cnt375++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 18 :
					// PLSQLPrinter.g:1391:10: ^( IS_OF_TYPE expression_element ( type_spec )+ )
					{
					match(input,IS_OF_TYPE,FOLLOW_IS_OF_TYPE_in_expression_element11001); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11003);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1391:42: ( type_spec )+
					int cnt376=0;
					loop376:
					while (true) {
						int alt376=2;
						int LA376_0 = input.LA(1);
						if ( (LA376_0==CUSTOM_TYPE||LA376_0==INTERVAL_DATATYPE||LA376_0==NATIVE_DATATYPE) ) {
							alt376=1;
						}

						switch (alt376) {
						case 1 :
							// PLSQLPrinter.g:1391:42: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_expression_element11005);
							type_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt376 >= 1 ) break loop376;
							EarlyExitException eee = new EarlyExitException(376, input);
							throw eee;
						}
						cnt376++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 19 :
					// PLSQLPrinter.g:1393:10: ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element )
					{
					if ( input.LA(1)==MEMBER_VK||input.LA(1)==SUBMULTISET_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11026);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11028);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 20 :
					// PLSQLPrinter.g:1395:10: ^( NOT_IN expression_element in_elements )
					{
					match(input,NOT_IN,FOLLOW_NOT_IN_in_expression_element11042); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11044);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_in_elements_in_expression_element11046);
					in_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 21 :
					// PLSQLPrinter.g:1396:10: ^( SQL92_RESERVED_IN expression_element in_elements )
					{
					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_expression_element11059); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11061);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_in_elements_in_expression_element11063);
					in_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 22 :
					// PLSQLPrinter.g:1397:10: ^( NOT_BETWEEN expression_element expression_element expression_element )
					{
					match(input,NOT_BETWEEN,FOLLOW_NOT_BETWEEN_in_expression_element11076); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11078);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11080);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11082);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 23 :
					// PLSQLPrinter.g:1398:10: ^( SQL92_RESERVED_BETWEEN expression_element expression_element expression_element )
					{
					match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_expression_element11095); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11097);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11099);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11101);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 24 :
					// PLSQLPrinter.g:1399:10: ^( NOT_LIKE expression_element expression_element ( expression_element )? )
					{
					match(input,NOT_LIKE,FOLLOW_NOT_LIKE_in_expression_element11114); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11116);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11118);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1399:59: ( expression_element )?
					int alt377=2;
					int LA377_0 = input.LA(1);
					if ( (LA377_0==APPROXIMATE_NUM_LIT||LA377_0==ASTERISK||LA377_0==CHAR_STRING||LA377_0==CONCATENATION_OP||(LA377_0 >= EQUALS_OP && LA377_0 <= EXACT_NUM_LIT)||(LA377_0 >= GREATER_THAN_OP && LA377_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA377_0 >= LESS_THAN_OP && LA377_0 <= LESS_THAN_OR_EQUALS_OP)||LA377_0==MINUS_SIGN||LA377_0==NOT_EQUAL_OP||LA377_0==PLUS_SIGN||LA377_0==SOLIDUS||LA377_0==SQL92_RESERVED_ALL||(LA377_0 >= SQL92_RESERVED_AND && LA377_0 <= SQL92_RESERVED_ANY)||LA377_0==SQL92_RESERVED_BETWEEN||LA377_0==SQL92_RESERVED_DEFAULT||LA377_0==SQL92_RESERVED_DISTINCT||(LA377_0 >= SQL92_RESERVED_EXISTS && LA377_0 <= SQL92_RESERVED_FALSE)||LA377_0==SQL92_RESERVED_IN||(LA377_0 >= SQL92_RESERVED_LIKE && LA377_0 <= SQL92_RESERVED_NULL)||LA377_0==SQL92_RESERVED_OR||LA377_0==SQL92_RESERVED_PRIOR||LA377_0==SQL92_RESERVED_TRUE||LA377_0==UNSIGNED_INTEGER||LA377_0==ANY_ELEMENT||LA377_0==CASCATED_ELEMENT||LA377_0==DATETIME_OP||LA377_0==DBTIMEZONE_VK||LA377_0==DIV_VK||LA377_0==DOT_ASTERISK||LA377_0==HOSTED_VARIABLE||LA377_0==HOSTED_VARIABLE_ROUTINE_CALL||(LA377_0 >= IS_A_SET && LA377_0 <= IS_PRESENT)||LA377_0==KEEP_VK||(LA377_0 >= LIKE2_VK && LA377_0 <= LIKEC_VK)||LA377_0==MAXVALUE_VK||LA377_0==MEMBER_VK||LA377_0==MINVALUE_VK||LA377_0==MODEL_EXPRESSION||LA377_0==MOD_VK||LA377_0==NEW_VK||LA377_0==NOT_BETWEEN||(LA377_0 >= NOT_IN && LA377_0 <= NOT_LIKE)||LA377_0==OUTER_JOIN_SIGN||(LA377_0 >= PERCENT_FOUND_VK && LA377_0 <= PERCENT_ROWCOUNT_VK)||LA377_0==PIPE_VK||LA377_0==ROUTINE_CALL||LA377_0==SEARCHED_CASE||LA377_0==SESSIONTIMEZONE_VK||LA377_0==SIMPLE_CASE||LA377_0==SOME_VK||LA377_0==STANDARD_FUNCTION||LA377_0==SUBMULTISET_VK||LA377_0==SUBQUERY||LA377_0==UNARY_OPERATOR||LA377_0==VECTOR_EXPR) ) {
						alt377=1;
					}
					switch (alt377) {
						case 1 :
							// PLSQLPrinter.g:1399:59: expression_element
							{
							pushFollow(FOLLOW_expression_element_in_expression_element11120);
							expression_element();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 25 :
					// PLSQLPrinter.g:1400:10: ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK ) expression_element expression_element ( expression_element )? )
					{
					if ( input.LA(1)==SQL92_RESERVED_LIKE||(input.LA(1) >= LIKE2_VK && input.LA(1) <= LIKEC_VK) ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11144);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11146);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1400:99: ( expression_element )?
					int alt378=2;
					int LA378_0 = input.LA(1);
					if ( (LA378_0==APPROXIMATE_NUM_LIT||LA378_0==ASTERISK||LA378_0==CHAR_STRING||LA378_0==CONCATENATION_OP||(LA378_0 >= EQUALS_OP && LA378_0 <= EXACT_NUM_LIT)||(LA378_0 >= GREATER_THAN_OP && LA378_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA378_0 >= LESS_THAN_OP && LA378_0 <= LESS_THAN_OR_EQUALS_OP)||LA378_0==MINUS_SIGN||LA378_0==NOT_EQUAL_OP||LA378_0==PLUS_SIGN||LA378_0==SOLIDUS||LA378_0==SQL92_RESERVED_ALL||(LA378_0 >= SQL92_RESERVED_AND && LA378_0 <= SQL92_RESERVED_ANY)||LA378_0==SQL92_RESERVED_BETWEEN||LA378_0==SQL92_RESERVED_DEFAULT||LA378_0==SQL92_RESERVED_DISTINCT||(LA378_0 >= SQL92_RESERVED_EXISTS && LA378_0 <= SQL92_RESERVED_FALSE)||LA378_0==SQL92_RESERVED_IN||(LA378_0 >= SQL92_RESERVED_LIKE && LA378_0 <= SQL92_RESERVED_NULL)||LA378_0==SQL92_RESERVED_OR||LA378_0==SQL92_RESERVED_PRIOR||LA378_0==SQL92_RESERVED_TRUE||LA378_0==UNSIGNED_INTEGER||LA378_0==ANY_ELEMENT||LA378_0==CASCATED_ELEMENT||LA378_0==DATETIME_OP||LA378_0==DBTIMEZONE_VK||LA378_0==DIV_VK||LA378_0==DOT_ASTERISK||LA378_0==HOSTED_VARIABLE||LA378_0==HOSTED_VARIABLE_ROUTINE_CALL||(LA378_0 >= IS_A_SET && LA378_0 <= IS_PRESENT)||LA378_0==KEEP_VK||(LA378_0 >= LIKE2_VK && LA378_0 <= LIKEC_VK)||LA378_0==MAXVALUE_VK||LA378_0==MEMBER_VK||LA378_0==MINVALUE_VK||LA378_0==MODEL_EXPRESSION||LA378_0==MOD_VK||LA378_0==NEW_VK||LA378_0==NOT_BETWEEN||(LA378_0 >= NOT_IN && LA378_0 <= NOT_LIKE)||LA378_0==OUTER_JOIN_SIGN||(LA378_0 >= PERCENT_FOUND_VK && LA378_0 <= PERCENT_ROWCOUNT_VK)||LA378_0==PIPE_VK||LA378_0==ROUTINE_CALL||LA378_0==SEARCHED_CASE||LA378_0==SESSIONTIMEZONE_VK||LA378_0==SIMPLE_CASE||LA378_0==SOME_VK||LA378_0==STANDARD_FUNCTION||LA378_0==SUBMULTISET_VK||LA378_0==SUBQUERY||LA378_0==UNARY_OPERATOR||LA378_0==VECTOR_EXPR) ) {
						alt378=1;
					}
					switch (alt378) {
						case 1 :
							// PLSQLPrinter.g:1400:99: expression_element
							{
							pushFollow(FOLLOW_expression_element_in_expression_element11148);
							expression_element();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 26 :
					// PLSQLPrinter.g:1402:10: ^( CONCATENATION_OP expression_element expression_element )
					{
					match(input,CONCATENATION_OP,FOLLOW_CONCATENATION_OP_in_expression_element11163); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11165);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11167);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 27 :
					// PLSQLPrinter.g:1403:10: ^( PLUS_SIGN expression_element expression_element )
					{
					match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_expression_element11180); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11182);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11184);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 28 :
					// PLSQLPrinter.g:1404:10: ^( MINUS_SIGN expression_element expression_element )
					{
					match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_expression_element11197); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11199);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11201);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 29 :
					// PLSQLPrinter.g:1405:10: ^( ASTERISK expression_element expression_element )
					{
					match(input,ASTERISK,FOLLOW_ASTERISK_in_expression_element11214); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11216);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11218);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 30 :
					// PLSQLPrinter.g:1406:10: ^( SOLIDUS expression_element expression_element )
					{
					match(input,SOLIDUS,FOLLOW_SOLIDUS_in_expression_element11231); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11233);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11235);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 31 :
					// PLSQLPrinter.g:1407:10: ^( MOD_VK expression_element expression_element )
					{
					match(input,MOD_VK,FOLLOW_MOD_VK_in_expression_element11248); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11250);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11252);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 32 :
					// PLSQLPrinter.g:1408:10: ^( DIV_VK expression_element expression_element )
					{
					match(input,DIV_VK,FOLLOW_DIV_VK_in_expression_element11265); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11267);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11269);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 33 :
					// PLSQLPrinter.g:1409:10: ^( PIPE_VK expression_element expression_element )
					{
					match(input,PIPE_VK,FOLLOW_PIPE_VK_in_expression_element11282); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11284);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11286);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 34 :
					// PLSQLPrinter.g:1411:10: ^( UNARY_OPERATOR expression_element )
					{
					match(input,UNARY_OPERATOR,FOLLOW_UNARY_OPERATOR_in_expression_element11300); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11302);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 35 :
					// PLSQLPrinter.g:1412:10: ^( SQL92_RESERVED_PRIOR expression_element )
					{
					match(input,SQL92_RESERVED_PRIOR,FOLLOW_SQL92_RESERVED_PRIOR_in_expression_element11315); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11317);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 36 :
					// PLSQLPrinter.g:1413:10: ^( NEW_VK expression )
					{
					match(input,NEW_VK,FOLLOW_NEW_VK_in_expression_element11330); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_expression_element11332);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 37 :
					// PLSQLPrinter.g:1414:10: ^( SQL92_RESERVED_DISTINCT expression_element )
					{
					match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_expression_element11345); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11347);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 38 :
					// PLSQLPrinter.g:1415:10: ^( STANDARD_FUNCTION standard_function )
					{
					match(input,STANDARD_FUNCTION,FOLLOW_STANDARD_FUNCTION_in_expression_element11360); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_standard_function_in_expression_element11362);
					standard_function();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 39 :
					// PLSQLPrinter.g:1416:10: ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) expression_element )
					{
					if ( input.LA(1)==SQL92_RESERVED_ALL||input.LA(1)==SQL92_RESERVED_ANY||input.LA(1)==SQL92_RESERVED_EXISTS||input.LA(1)==SOME_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11385);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 40 :
					// PLSQLPrinter.g:1417:10: ^( VECTOR_EXPR ( expression_element )+ )
					{
					match(input,VECTOR_EXPR,FOLLOW_VECTOR_EXPR_in_expression_element11398); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1417:24: ( expression_element )+
					int cnt379=0;
					loop379:
					while (true) {
						int alt379=2;
						int LA379_0 = input.LA(1);
						if ( (LA379_0==APPROXIMATE_NUM_LIT||LA379_0==ASTERISK||LA379_0==CHAR_STRING||LA379_0==CONCATENATION_OP||(LA379_0 >= EQUALS_OP && LA379_0 <= EXACT_NUM_LIT)||(LA379_0 >= GREATER_THAN_OP && LA379_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA379_0 >= LESS_THAN_OP && LA379_0 <= LESS_THAN_OR_EQUALS_OP)||LA379_0==MINUS_SIGN||LA379_0==NOT_EQUAL_OP||LA379_0==PLUS_SIGN||LA379_0==SOLIDUS||LA379_0==SQL92_RESERVED_ALL||(LA379_0 >= SQL92_RESERVED_AND && LA379_0 <= SQL92_RESERVED_ANY)||LA379_0==SQL92_RESERVED_BETWEEN||LA379_0==SQL92_RESERVED_DEFAULT||LA379_0==SQL92_RESERVED_DISTINCT||(LA379_0 >= SQL92_RESERVED_EXISTS && LA379_0 <= SQL92_RESERVED_FALSE)||LA379_0==SQL92_RESERVED_IN||(LA379_0 >= SQL92_RESERVED_LIKE && LA379_0 <= SQL92_RESERVED_NULL)||LA379_0==SQL92_RESERVED_OR||LA379_0==SQL92_RESERVED_PRIOR||LA379_0==SQL92_RESERVED_TRUE||LA379_0==UNSIGNED_INTEGER||LA379_0==ANY_ELEMENT||LA379_0==CASCATED_ELEMENT||LA379_0==DATETIME_OP||LA379_0==DBTIMEZONE_VK||LA379_0==DIV_VK||LA379_0==DOT_ASTERISK||LA379_0==HOSTED_VARIABLE||LA379_0==HOSTED_VARIABLE_ROUTINE_CALL||(LA379_0 >= IS_A_SET && LA379_0 <= IS_PRESENT)||LA379_0==KEEP_VK||(LA379_0 >= LIKE2_VK && LA379_0 <= LIKEC_VK)||LA379_0==MAXVALUE_VK||LA379_0==MEMBER_VK||LA379_0==MINVALUE_VK||LA379_0==MODEL_EXPRESSION||LA379_0==MOD_VK||LA379_0==NEW_VK||LA379_0==NOT_BETWEEN||(LA379_0 >= NOT_IN && LA379_0 <= NOT_LIKE)||LA379_0==OUTER_JOIN_SIGN||(LA379_0 >= PERCENT_FOUND_VK && LA379_0 <= PERCENT_ROWCOUNT_VK)||LA379_0==PIPE_VK||LA379_0==ROUTINE_CALL||LA379_0==SEARCHED_CASE||LA379_0==SESSIONTIMEZONE_VK||LA379_0==SIMPLE_CASE||LA379_0==SOME_VK||LA379_0==STANDARD_FUNCTION||LA379_0==SUBMULTISET_VK||LA379_0==SUBQUERY||LA379_0==UNARY_OPERATOR||LA379_0==VECTOR_EXPR) ) {
							alt379=1;
						}

						switch (alt379) {
						case 1 :
							// PLSQLPrinter.g:1417:24: expression_element
							{
							pushFollow(FOLLOW_expression_element_in_expression_element11400);
							expression_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt379 >= 1 ) break loop379;
							EarlyExitException eee = new EarlyExitException(379, input);
							throw eee;
						}
						cnt379++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 41 :
					// PLSQLPrinter.g:1419:10: ^( DATETIME_OP expression_element datetime_element )
					{
					match(input,DATETIME_OP,FOLLOW_DATETIME_OP_in_expression_element11415); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11417);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_datetime_element_in_expression_element11419);
					datetime_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 42 :
					// PLSQLPrinter.g:1420:10: model_expression
					{
					pushFollow(FOLLOW_model_expression_in_expression_element11431);
					model_expression();
					state._fsp--;

					}
					break;
				case 43 :
					// PLSQLPrinter.g:1421:10: ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? )
					{
					match(input,KEEP_VK,FOLLOW_KEEP_VK_in_expression_element11443); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11445);
					expression_element();
					state._fsp--;

					match(input,DENSE_RANK_VK,FOLLOW_DENSE_RANK_VK_in_expression_element11447); 
					if ( input.LA(1)==FIRST_VK||input.LA(1)==LAST_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_order_by_clause_in_expression_element11455);
					order_by_clause();
					state._fsp--;

					// PLSQLPrinter.g:1421:88: ( over_clause )?
					int alt380=2;
					int LA380_0 = input.LA(1);
					if ( (LA380_0==OVER_VK) ) {
						alt380=1;
					}
					switch (alt380) {
						case 1 :
							// PLSQLPrinter.g:1421:88: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_expression_element11457);
							over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 44 :
					// PLSQLPrinter.g:1423:10: ^( DOT_ASTERISK tableview_name )
					{
					match(input,DOT_ASTERISK,FOLLOW_DOT_ASTERISK_in_expression_element11472); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_tableview_name_in_expression_element11474);
					tableview_name();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 45 :
					// PLSQLPrinter.g:1424:10: ^( ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK ) cursor_name )
					{
					if ( (input.LA(1) >= PERCENT_FOUND_VK && input.LA(1) <= PERCENT_ROWCOUNT_VK) ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_cursor_name_in_expression_element11497);
					cursor_name();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 46 :
					// PLSQLPrinter.g:1425:10: ^( OUTER_JOIN_SIGN expression_element )
					{
					match(input,OUTER_JOIN_SIGN,FOLLOW_OUTER_JOIN_SIGN_in_expression_element11510); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11512);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 47 :
					// PLSQLPrinter.g:1427:10: case_statement
					{
					pushFollow(FOLLOW_case_statement_in_expression_element11525);
					case_statement();
					state._fsp--;

					}
					break;
				case 48 :
					// PLSQLPrinter.g:1428:10: constant
					{
					pushFollow(FOLLOW_constant_in_expression_element11536);
					constant();
					state._fsp--;

					}
					break;
				case 49 :
					// PLSQLPrinter.g:1429:10: general_element
					{
					pushFollow(FOLLOW_general_element_in_expression_element11547);
					general_element();
					state._fsp--;

					}
					break;
				case 50 :
					// PLSQLPrinter.g:1430:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_expression_element11558);
					subquery();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression_element"


	public static class in_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "in_elements"
	// PLSQLPrinter.g:1433:1: in_elements : ( subquery | expression_list );
	public final PLSQLPrinter.in_elements_return in_elements() throws RecognitionException {
		PLSQLPrinter.in_elements_return retval = new PLSQLPrinter.in_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1434:5: ( subquery | expression_list )
			int alt382=2;
			int LA382_0 = input.LA(1);
			if ( (LA382_0==SUBQUERY) ) {
				alt382=1;
			}
			else if ( (LA382_0==EXPR_LIST) ) {
				alt382=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 382, 0, input);
				throw nvae;
			}

			switch (alt382) {
				case 1 :
					// PLSQLPrinter.g:1434:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_in_elements11578);
					subquery();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1435:10: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_in_elements11589);
					expression_list();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "in_elements"


	public static class datetime_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "datetime_element"
	// PLSQLPrinter.g:1438:1: datetime_element : ( ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) ) | ^( DAY_VK SECOND_VK ( expression )* ) | ^( YEAR_VK MONTH_VK expression ) );
	public final PLSQLPrinter.datetime_element_return datetime_element() throws RecognitionException {
		PLSQLPrinter.datetime_element_return retval = new PLSQLPrinter.datetime_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1439:5: ( ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) ) | ^( DAY_VK SECOND_VK ( expression )* ) | ^( YEAR_VK MONTH_VK expression ) )
			int alt385=3;
			switch ( input.LA(1) ) {
			case AT_VK:
				{
				alt385=1;
				}
				break;
			case DAY_VK:
				{
				alt385=2;
				}
				break;
			case YEAR_VK:
				{
				alt385=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 385, 0, input);
				throw nvae;
			}
			switch (alt385) {
				case 1 :
					// PLSQLPrinter.g:1439:10: ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) )
					{
					match(input,AT_VK,FOLLOW_AT_VK_in_datetime_element11610); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_datetime_element11612);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1439:37: ( LOCAL_VK | TIME_VK expression )
					int alt383=2;
					int LA383_0 = input.LA(1);
					if ( (LA383_0==LOCAL_VK) ) {
						alt383=1;
					}
					else if ( (LA383_0==TIME_VK) ) {
						alt383=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 383, 0, input);
						throw nvae;
					}

					switch (alt383) {
						case 1 :
							// PLSQLPrinter.g:1439:38: LOCAL_VK
							{
							match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_datetime_element11615); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1439:47: TIME_VK expression
							{
							match(input,TIME_VK,FOLLOW_TIME_VK_in_datetime_element11617); 
							pushFollow(FOLLOW_expression_in_datetime_element11619);
							expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1440:10: ^( DAY_VK SECOND_VK ( expression )* )
					{
					match(input,DAY_VK,FOLLOW_DAY_VK_in_datetime_element11633); 
					match(input, Token.DOWN, null); 
					match(input,SECOND_VK,FOLLOW_SECOND_VK_in_datetime_element11635); 
					// PLSQLPrinter.g:1440:29: ( expression )*
					loop384:
					while (true) {
						int alt384=2;
						int LA384_0 = input.LA(1);
						if ( (LA384_0==EXPR||LA384_0==LOGIC_EXPR) ) {
							alt384=1;
						}

						switch (alt384) {
						case 1 :
							// PLSQLPrinter.g:1440:29: expression
							{
							pushFollow(FOLLOW_expression_in_datetime_element11637);
							expression();
							state._fsp--;

							}
							break;

						default :
							break loop384;
						}
					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1441:10: ^( YEAR_VK MONTH_VK expression )
					{
					match(input,YEAR_VK,FOLLOW_YEAR_VK_in_datetime_element11651); 
					match(input, Token.DOWN, null); 
					match(input,MONTH_VK,FOLLOW_MONTH_VK_in_datetime_element11653); 
					pushFollow(FOLLOW_expression_in_datetime_element11655);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "datetime_element"


	public static class model_expression_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_expression"
	// PLSQLPrinter.g:1444:1: model_expression : ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ ) ;
	public final PLSQLPrinter.model_expression_return model_expression() throws RecognitionException {
		PLSQLPrinter.model_expression_return retval = new PLSQLPrinter.model_expression_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1445:5: ( ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ ) )
			// PLSQLPrinter.g:1445:10: ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ )
			{
			match(input,MODEL_EXPRESSION,FOLLOW_MODEL_EXPRESSION_in_model_expression11677); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_element_in_model_expression11679);
			expression_element();
			state._fsp--;

			// PLSQLPrinter.g:1445:48: ( model_expression_element )+
			int cnt386=0;
			loop386:
			while (true) {
				int alt386=2;
				int LA386_0 = input.LA(1);
				if ( (LA386_0==SQL92_RESERVED_ANY||LA386_0==EXPR||(LA386_0 >= FOR_MULTI_COLUMN && LA386_0 <= FOR_SINGLE_COLUMN)||LA386_0==LOGIC_EXPR) ) {
					alt386=1;
				}

				switch (alt386) {
				case 1 :
					// PLSQLPrinter.g:1445:48: model_expression_element
					{
					pushFollow(FOLLOW_model_expression_element_in_model_expression11681);
					model_expression_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt386 >= 1 ) break loop386;
					EarlyExitException eee = new EarlyExitException(386, input);
					throw eee;
				}
				cnt386++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_expression"


	public static class model_expression_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_expression_element"
	// PLSQLPrinter.g:1448:1: model_expression_element : ( SQL92_RESERVED_ANY | expression | ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? ) | ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) ) );
	public final PLSQLPrinter.model_expression_element_return model_expression_element() throws RecognitionException {
		PLSQLPrinter.model_expression_element_return retval = new PLSQLPrinter.model_expression_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1449:5: ( SQL92_RESERVED_ANY | expression | ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? ) | ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) ) )
			int alt391=4;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ANY:
				{
				alt391=1;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt391=2;
				}
				break;
			case FOR_SINGLE_COLUMN:
				{
				alt391=3;
				}
				break;
			case FOR_MULTI_COLUMN:
				{
				alt391=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 391, 0, input);
				throw nvae;
			}
			switch (alt391) {
				case 1 :
					// PLSQLPrinter.g:1449:10: SQL92_RESERVED_ANY
					{
					match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_model_expression_element11703); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1450:10: expression
					{
					pushFollow(FOLLOW_expression_in_model_expression_element11714);
					expression();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1451:10: ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? )
					{
					match(input,FOR_SINGLE_COLUMN,FOLLOW_FOR_SINGLE_COLUMN_in_model_expression_element11726); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_column_name_in_model_expression_element11728);
					column_name();
					state._fsp--;

					pushFollow(FOLLOW_for_single_column_element_in_model_expression_element11730);
					for_single_column_element();
					state._fsp--;

					// PLSQLPrinter.g:1451:68: ( for_like_part )?
					int alt387=2;
					int LA387_0 = input.LA(1);
					if ( (LA387_0==SQL92_RESERVED_LIKE) ) {
						alt387=1;
					}
					switch (alt387) {
						case 1 :
							// PLSQLPrinter.g:1451:68: for_like_part
							{
							pushFollow(FOLLOW_for_like_part_in_model_expression_element11732);
							for_like_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// PLSQLPrinter.g:1452:10: ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) )
					{
					match(input,FOR_MULTI_COLUMN,FOLLOW_FOR_MULTI_COLUMN_in_model_expression_element11746); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1452:29: ( column_name )+
					int cnt388=0;
					loop388:
					while (true) {
						int alt388=2;
						int LA388_0 = input.LA(1);
						if ( (LA388_0==COLUMN_NAME) ) {
							alt388=1;
						}

						switch (alt388) {
						case 1 :
							// PLSQLPrinter.g:1452:29: column_name
							{
							pushFollow(FOLLOW_column_name_in_model_expression_element11748);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt388 >= 1 ) break loop388;
							EarlyExitException eee = new EarlyExitException(388, input);
							throw eee;
						}
						cnt388++;
					}

					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_model_expression_element11752); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1452:62: ( subquery | ( expression_list )+ )
					int alt390=2;
					int LA390_0 = input.LA(1);
					if ( (LA390_0==SUBQUERY) ) {
						alt390=1;
					}
					else if ( (LA390_0==EXPR_LIST) ) {
						alt390=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 390, 0, input);
						throw nvae;
					}

					switch (alt390) {
						case 1 :
							// PLSQLPrinter.g:1452:63: subquery
							{
							pushFollow(FOLLOW_subquery_in_model_expression_element11755);
							subquery();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1452:72: ( expression_list )+
							{
							// PLSQLPrinter.g:1452:72: ( expression_list )+
							int cnt389=0;
							loop389:
							while (true) {
								int alt389=2;
								int LA389_0 = input.LA(1);
								if ( (LA389_0==EXPR_LIST) ) {
									alt389=1;
								}

								switch (alt389) {
								case 1 :
									// PLSQLPrinter.g:1452:72: expression_list
									{
									pushFollow(FOLLOW_expression_list_in_model_expression_element11757);
									expression_list();
									state._fsp--;

									}
									break;

								default :
									if ( cnt389 >= 1 ) break loop389;
									EarlyExitException eee = new EarlyExitException(389, input);
									throw eee;
								}
								cnt389++;
							}

							}
							break;

					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_expression_element"


	public static class for_single_column_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_single_column_element"
	// PLSQLPrinter.g:1455:1: for_single_column_element : ( ^( SQL92_RESERVED_IN expression_list ) | ^( SQL92_RESERVED_FROM expression ) | ^( SQL92_RESERVED_TO expression ) | ^( ( INCREMENT_VK | DECREMENT_VK ) expression ) );
	public final PLSQLPrinter.for_single_column_element_return for_single_column_element() throws RecognitionException {
		PLSQLPrinter.for_single_column_element_return retval = new PLSQLPrinter.for_single_column_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1456:5: ( ^( SQL92_RESERVED_IN expression_list ) | ^( SQL92_RESERVED_FROM expression ) | ^( SQL92_RESERVED_TO expression ) | ^( ( INCREMENT_VK | DECREMENT_VK ) expression ) )
			int alt392=4;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_IN:
				{
				alt392=1;
				}
				break;
			case SQL92_RESERVED_FROM:
				{
				alt392=2;
				}
				break;
			case SQL92_RESERVED_TO:
				{
				alt392=3;
				}
				break;
			case DECREMENT_VK:
			case INCREMENT_VK:
				{
				alt392=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 392, 0, input);
				throw nvae;
			}
			switch (alt392) {
				case 1 :
					// PLSQLPrinter.g:1456:10: ^( SQL92_RESERVED_IN expression_list )
					{
					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_for_single_column_element11782); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_list_in_for_single_column_element11784);
					expression_list();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1457:10: ^( SQL92_RESERVED_FROM expression )
					{
					match(input,SQL92_RESERVED_FROM,FOLLOW_SQL92_RESERVED_FROM_in_for_single_column_element11797); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element11799);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1458:10: ^( SQL92_RESERVED_TO expression )
					{
					match(input,SQL92_RESERVED_TO,FOLLOW_SQL92_RESERVED_TO_in_for_single_column_element11813); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element11815);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// PLSQLPrinter.g:1459:10: ^( ( INCREMENT_VK | DECREMENT_VK ) expression )
					{
					if ( input.LA(1)==DECREMENT_VK||input.LA(1)==INCREMENT_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element11835);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_single_column_element"


	public static class for_like_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_like_part"
	// PLSQLPrinter.g:1462:1: for_like_part : ^( SQL92_RESERVED_LIKE expression ) ;
	public final PLSQLPrinter.for_like_part_return for_like_part() throws RecognitionException {
		PLSQLPrinter.for_like_part_return retval = new PLSQLPrinter.for_like_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1463:5: ( ^( SQL92_RESERVED_LIKE expression ) )
			// PLSQLPrinter.g:1463:10: ^( SQL92_RESERVED_LIKE expression )
			{
			match(input,SQL92_RESERVED_LIKE,FOLLOW_SQL92_RESERVED_LIKE_in_for_like_part11858); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_for_like_part11860);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_like_part"


	public static class case_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "case_statement"
	// PLSQLPrinter.g:1466:1: case_statement : ( ^( SIMPLE_CASE ( label_name )* expression ( case_when_part )+ ( case_else_part )? ) | ^( SEARCHED_CASE ( label_name )* ( case_when_part )+ ( case_else_part )? ) );
	public final PLSQLPrinter.case_statement_return case_statement() throws RecognitionException {
		PLSQLPrinter.case_statement_return retval = new PLSQLPrinter.case_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1467:5: ( ^( SIMPLE_CASE ( label_name )* expression ( case_when_part )+ ( case_else_part )? ) | ^( SEARCHED_CASE ( label_name )* ( case_when_part )+ ( case_else_part )? ) )
			int alt399=2;
			int LA399_0 = input.LA(1);
			if ( (LA399_0==SIMPLE_CASE) ) {
				alt399=1;
			}
			else if ( (LA399_0==SEARCHED_CASE) ) {
				alt399=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 399, 0, input);
				throw nvae;
			}

			switch (alt399) {
				case 1 :
					// PLSQLPrinter.g:1467:10: ^( SIMPLE_CASE ( label_name )* expression ( case_when_part )+ ( case_else_part )? )
					{
					match(input,SIMPLE_CASE,FOLLOW_SIMPLE_CASE_in_case_statement11882); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1467:24: ( label_name )*
					loop393:
					while (true) {
						int alt393=2;
						int LA393_0 = input.LA(1);
						if ( (LA393_0==LABEL_NAME) ) {
							alt393=1;
						}

						switch (alt393) {
						case 1 :
							// PLSQLPrinter.g:1467:24: label_name
							{
							pushFollow(FOLLOW_label_name_in_case_statement11884);
							label_name();
							state._fsp--;

							}
							break;

						default :
							break loop393;
						}
					}

					pushFollow(FOLLOW_expression_in_case_statement11887);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1467:47: ( case_when_part )+
					int cnt394=0;
					loop394:
					while (true) {
						int alt394=2;
						int LA394_0 = input.LA(1);
						if ( (LA394_0==SQL92_RESERVED_WHEN) ) {
							alt394=1;
						}

						switch (alt394) {
						case 1 :
							// PLSQLPrinter.g:1467:47: case_when_part
							{
							pushFollow(FOLLOW_case_when_part_in_case_statement11889);
							case_when_part();
							state._fsp--;

							}
							break;

						default :
							if ( cnt394 >= 1 ) break loop394;
							EarlyExitException eee = new EarlyExitException(394, input);
							throw eee;
						}
						cnt394++;
					}

					// PLSQLPrinter.g:1467:63: ( case_else_part )?
					int alt395=2;
					int LA395_0 = input.LA(1);
					if ( (LA395_0==SQL92_RESERVED_ELSE) ) {
						alt395=1;
					}
					switch (alt395) {
						case 1 :
							// PLSQLPrinter.g:1467:63: case_else_part
							{
							pushFollow(FOLLOW_case_else_part_in_case_statement11892);
							case_else_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1468:10: ^( SEARCHED_CASE ( label_name )* ( case_when_part )+ ( case_else_part )? )
					{
					match(input,SEARCHED_CASE,FOLLOW_SEARCHED_CASE_in_case_statement11908); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1468:26: ( label_name )*
					loop396:
					while (true) {
						int alt396=2;
						int LA396_0 = input.LA(1);
						if ( (LA396_0==LABEL_NAME) ) {
							alt396=1;
						}

						switch (alt396) {
						case 1 :
							// PLSQLPrinter.g:1468:26: label_name
							{
							pushFollow(FOLLOW_label_name_in_case_statement11910);
							label_name();
							state._fsp--;

							}
							break;

						default :
							break loop396;
						}
					}

					// PLSQLPrinter.g:1468:38: ( case_when_part )+
					int cnt397=0;
					loop397:
					while (true) {
						int alt397=2;
						int LA397_0 = input.LA(1);
						if ( (LA397_0==SQL92_RESERVED_WHEN) ) {
							alt397=1;
						}

						switch (alt397) {
						case 1 :
							// PLSQLPrinter.g:1468:38: case_when_part
							{
							pushFollow(FOLLOW_case_when_part_in_case_statement11913);
							case_when_part();
							state._fsp--;

							}
							break;

						default :
							if ( cnt397 >= 1 ) break loop397;
							EarlyExitException eee = new EarlyExitException(397, input);
							throw eee;
						}
						cnt397++;
					}

					// PLSQLPrinter.g:1468:54: ( case_else_part )?
					int alt398=2;
					int LA398_0 = input.LA(1);
					if ( (LA398_0==SQL92_RESERVED_ELSE) ) {
						alt398=1;
					}
					switch (alt398) {
						case 1 :
							// PLSQLPrinter.g:1468:54: case_else_part
							{
							pushFollow(FOLLOW_case_else_part_in_case_statement11916);
							case_else_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_statement"


	public static class case_when_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "case_when_part"
	// PLSQLPrinter.g:1473:1: case_when_part : ^( SQL92_RESERVED_WHEN expression ( seq_of_statements | expression ) ) ;
	public final PLSQLPrinter.case_when_part_return case_when_part() throws RecognitionException {
		PLSQLPrinter.case_when_part_return retval = new PLSQLPrinter.case_when_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1474:5: ( ^( SQL92_RESERVED_WHEN expression ( seq_of_statements | expression ) ) )
			// PLSQLPrinter.g:1474:10: ^( SQL92_RESERVED_WHEN expression ( seq_of_statements | expression ) )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_case_when_part11942); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_case_when_part11944);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1474:43: ( seq_of_statements | expression )
			int alt400=2;
			int LA400_0 = input.LA(1);
			if ( (LA400_0==STATEMENTS) ) {
				alt400=1;
			}
			else if ( (LA400_0==EXPR||LA400_0==LOGIC_EXPR) ) {
				alt400=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 400, 0, input);
				throw nvae;
			}

			switch (alt400) {
				case 1 :
					// PLSQLPrinter.g:1474:44: seq_of_statements
					{
					pushFollow(FOLLOW_seq_of_statements_in_case_when_part11947);
					seq_of_statements();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1474:62: expression
					{
					pushFollow(FOLLOW_expression_in_case_when_part11949);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_when_part"


	public static class case_else_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "case_else_part"
	// PLSQLPrinter.g:1477:1: case_else_part : ^( SQL92_RESERVED_ELSE ( seq_of_statements | expression ) ) ;
	public final PLSQLPrinter.case_else_part_return case_else_part() throws RecognitionException {
		PLSQLPrinter.case_else_part_return retval = new PLSQLPrinter.case_else_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1478:5: ( ^( SQL92_RESERVED_ELSE ( seq_of_statements | expression ) ) )
			// PLSQLPrinter.g:1478:10: ^( SQL92_RESERVED_ELSE ( seq_of_statements | expression ) )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_case_else_part11972); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1478:32: ( seq_of_statements | expression )
			int alt401=2;
			int LA401_0 = input.LA(1);
			if ( (LA401_0==STATEMENTS) ) {
				alt401=1;
			}
			else if ( (LA401_0==EXPR||LA401_0==LOGIC_EXPR) ) {
				alt401=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 401, 0, input);
				throw nvae;
			}

			switch (alt401) {
				case 1 :
					// PLSQLPrinter.g:1478:33: seq_of_statements
					{
					pushFollow(FOLLOW_seq_of_statements_in_case_else_part11975);
					seq_of_statements();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1478:51: expression
					{
					pushFollow(FOLLOW_expression_in_case_else_part11977);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_else_part"


	public static class standard_function_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "standard_function"
	// PLSQLPrinter.g:1482:1: standard_function : ( ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? ) | ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? ) | ^( COUNT_VK ( ASTERISK | expression ) ( over_clause )? ) | ^( ( CAST_VK | XMLCAST_VK ) ( subquery | expression ) type_spec ) | ^( CHR_VK expression NCHAR_CS_VK ) | ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? ) | ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause | over_clause )+ ) | ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? ) | ^( EXTRACT_VK REGULAR_ID expression ) | ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause ) | ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? ) | ^( TRANSLATE_VK expression ( CHAR_CS_VK | NCHAR_CS_VK )? ( expression )* ) | ^( TREAT_VK expression ( REF_VK )? type_spec ) | ^( TRIM_VK ( LEADING_VK | TRAILING_VK | BOTH_VK )? expression ( expression )? ) | ^( XMLAGG_VK expression ( order_by_clause )? ) | ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ ) | ^( XMLEXISTS_VK expression ( xml_passing_clause )? ) | ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? ) | ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? ) | ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? ) | ^( XMLTABLE_VK ( xml_namespaces_clause )? expression ( xml_passing_clause )? ( xml_table_column )* ) | ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? ( expression ( alias )? )* ) | ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? ) | ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? ) );
	public final PLSQLPrinter.standard_function_return standard_function() throws RecognitionException {
		PLSQLPrinter.standard_function_return retval = new PLSQLPrinter.standard_function_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1483:5: ( ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? ) | ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? ) | ^( COUNT_VK ( ASTERISK | expression ) ( over_clause )? ) | ^( ( CAST_VK | XMLCAST_VK ) ( subquery | expression ) type_spec ) | ^( CHR_VK expression NCHAR_CS_VK ) | ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? ) | ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause | over_clause )+ ) | ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? ) | ^( EXTRACT_VK REGULAR_ID expression ) | ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause ) | ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? ) | ^( TRANSLATE_VK expression ( CHAR_CS_VK | NCHAR_CS_VK )? ( expression )* ) | ^( TREAT_VK expression ( REF_VK )? type_spec ) | ^( TRIM_VK ( LEADING_VK | TRAILING_VK | BOTH_VK )? expression ( expression )? ) | ^( XMLAGG_VK expression ( order_by_clause )? ) | ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ ) | ^( XMLEXISTS_VK expression ( xml_passing_clause )? ) | ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? ) | ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? ) | ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? ) | ^( XMLTABLE_VK ( xml_namespaces_clause )? expression ( xml_passing_clause )? ( xml_table_column )* ) | ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? ( expression ( alias )? )* ) | ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? ) | ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? ) )
			int alt443=24;
			switch ( input.LA(1) ) {
			case FUNCTION_ENABLING_OVER:
				{
				alt443=1;
				}
				break;
			case FUNCTION_ENABLING_USING:
				{
				alt443=2;
				}
				break;
			case COUNT_VK:
				{
				alt443=3;
				}
				break;
			case CAST_VK:
			case XMLCAST_VK:
				{
				alt443=4;
				}
				break;
			case CHR_VK:
				{
				alt443=5;
				}
				break;
			case COLLECT_VK:
				{
				alt443=6;
				}
				break;
			case FUNCTION_ENABLING_WITHIN_OR_OVER:
				{
				alt443=7;
				}
				break;
			case DECOMPOSE_VK:
				{
				alt443=8;
				}
				break;
			case EXTRACT_VK:
				{
				alt443=9;
				}
				break;
			case FIRST_VALUE_VK:
			case LAST_VALUE_VK:
				{
				alt443=10;
				}
				break;
			case PREDICTION_FUNCTION:
				{
				alt443=11;
				}
				break;
			case TRANSLATE_VK:
				{
				alt443=12;
				}
				break;
			case TREAT_VK:
				{
				alt443=13;
				}
				break;
			case TRIM_VK:
				{
				alt443=14;
				}
				break;
			case XMLAGG_VK:
				{
				alt443=15;
				}
				break;
			case XMLCOLATTVAL_VK:
			case XMLFOREST_VK:
				{
				alt443=16;
				}
				break;
			case XMLEXISTS_VK:
				{
				alt443=17;
				}
				break;
			case XMLPARSE_VK:
				{
				alt443=18;
				}
				break;
			case XMLQUERY_VK:
				{
				alt443=19;
				}
				break;
			case XMLROOT_VK:
				{
				alt443=20;
				}
				break;
			case XMLTABLE_VK:
				{
				alt443=21;
				}
				break;
			case XMLELEMENT_VK:
				{
				alt443=22;
				}
				break;
			case XMLPI_VK:
				{
				alt443=23;
				}
				break;
			case XMLSERIALIZE_VK:
				{
				alt443=24;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 443, 0, input);
				throw nvae;
			}
			switch (alt443) {
				case 1 :
					// PLSQLPrinter.g:1483:10: ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? )
					{
					match(input,FUNCTION_ENABLING_OVER,FOLLOW_FUNCTION_ENABLING_OVER_in_standard_function12001); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function12003);
					function_argument();
					state._fsp--;

					// PLSQLPrinter.g:1483:53: ( over_clause )?
					int alt402=2;
					int LA402_0 = input.LA(1);
					if ( (LA402_0==OVER_VK) ) {
						alt402=1;
					}
					switch (alt402) {
						case 1 :
							// PLSQLPrinter.g:1483:53: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function12005);
							over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1484:10: ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? )
					{
					match(input,FUNCTION_ENABLING_USING,FOLLOW_FUNCTION_ENABLING_USING_in_standard_function12019); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function12021);
					function_argument();
					state._fsp--;

					// PLSQLPrinter.g:1484:54: ( using_clause )?
					int alt403=2;
					int LA403_0 = input.LA(1);
					if ( (LA403_0==PLSQL_NON_RESERVED_USING) ) {
						alt403=1;
					}
					switch (alt403) {
						case 1 :
							// PLSQLPrinter.g:1484:54: using_clause
							{
							pushFollow(FOLLOW_using_clause_in_standard_function12023);
							using_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1485:10: ^( COUNT_VK ( ASTERISK | expression ) ( over_clause )? )
					{
					match(input,COUNT_VK,FOLLOW_COUNT_VK_in_standard_function12037); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1485:21: ( ASTERISK | expression )
					int alt404=2;
					int LA404_0 = input.LA(1);
					if ( (LA404_0==ASTERISK) ) {
						alt404=1;
					}
					else if ( (LA404_0==EXPR||LA404_0==LOGIC_EXPR) ) {
						alt404=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 404, 0, input);
						throw nvae;
					}

					switch (alt404) {
						case 1 :
							// PLSQLPrinter.g:1485:23: ASTERISK
							{
							match(input,ASTERISK,FOLLOW_ASTERISK_in_standard_function12041); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1485:34: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function12045);
							expression();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1485:47: ( over_clause )?
					int alt405=2;
					int LA405_0 = input.LA(1);
					if ( (LA405_0==OVER_VK) ) {
						alt405=1;
					}
					switch (alt405) {
						case 1 :
							// PLSQLPrinter.g:1485:47: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function12049);
							over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// PLSQLPrinter.g:1486:10: ^( ( CAST_VK | XMLCAST_VK ) ( subquery | expression ) type_spec )
					{
					if ( input.LA(1)==CAST_VK||input.LA(1)==XMLCAST_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1486:33: ( subquery | expression )
					int alt406=2;
					int LA406_0 = input.LA(1);
					if ( (LA406_0==SUBQUERY) ) {
						alt406=1;
					}
					else if ( (LA406_0==EXPR||LA406_0==LOGIC_EXPR) ) {
						alt406=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 406, 0, input);
						throw nvae;
					}

					switch (alt406) {
						case 1 :
							// PLSQLPrinter.g:1486:34: subquery
							{
							pushFollow(FOLLOW_subquery_in_standard_function12070);
							subquery();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1486:43: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function12072);
							expression();
							state._fsp--;

							}
							break;

					}

					pushFollow(FOLLOW_type_spec_in_standard_function12075);
					type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 5 :
					// PLSQLPrinter.g:1487:10: ^( CHR_VK expression NCHAR_CS_VK )
					{
					match(input,CHR_VK,FOLLOW_CHR_VK_in_standard_function12088); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function12090);
					expression();
					state._fsp--;

					match(input,NCHAR_CS_VK,FOLLOW_NCHAR_CS_VK_in_standard_function12092); 
					match(input, Token.UP, null); 

					}
					break;
				case 6 :
					// PLSQLPrinter.g:1488:10: ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? )
					{
					match(input,COLLECT_VK,FOLLOW_COLLECT_VK_in_standard_function12105); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1488:23: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )?
					int alt407=2;
					int LA407_0 = input.LA(1);
					if ( (LA407_0==SQL92_RESERVED_DISTINCT||LA407_0==SQL92_RESERVED_UNIQUE) ) {
						alt407=1;
					}
					switch (alt407) {
						case 1 :
							// PLSQLPrinter.g:
							{
							if ( input.LA(1)==SQL92_RESERVED_DISTINCT||input.LA(1)==SQL92_RESERVED_UNIQUE ) {
								input.consume();
								state.errorRecovery=false;
							}
							else {
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_standard_function12114);
					column_name();
					state._fsp--;

					// PLSQLPrinter.g:1488:84: ( collect_order_by_part )?
					int alt408=2;
					int LA408_0 = input.LA(1);
					if ( (LA408_0==SQL92_RESERVED_ORDER) ) {
						alt408=1;
					}
					switch (alt408) {
						case 1 :
							// PLSQLPrinter.g:1488:84: collect_order_by_part
							{
							pushFollow(FOLLOW_collect_order_by_part_in_standard_function12116);
							collect_order_by_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 7 :
					// PLSQLPrinter.g:1489:10: ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause | over_clause )+ )
					{
					match(input,FUNCTION_ENABLING_WITHIN_OR_OVER,FOLLOW_FUNCTION_ENABLING_WITHIN_OR_OVER_in_standard_function12130); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function12132);
					function_argument();
					state._fsp--;

					// PLSQLPrinter.g:1489:63: ( within_clause | over_clause )+
					int cnt409=0;
					loop409:
					while (true) {
						int alt409=3;
						int LA409_0 = input.LA(1);
						if ( (LA409_0==WITHIN_VK) ) {
							alt409=1;
						}
						else if ( (LA409_0==OVER_VK) ) {
							alt409=2;
						}

						switch (alt409) {
						case 1 :
							// PLSQLPrinter.g:1489:64: within_clause
							{
							pushFollow(FOLLOW_within_clause_in_standard_function12135);
							within_clause();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1489:78: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function12137);
							over_clause();
							state._fsp--;

							}
							break;

						default :
							if ( cnt409 >= 1 ) break loop409;
							EarlyExitException eee = new EarlyExitException(409, input);
							throw eee;
						}
						cnt409++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 8 :
					// PLSQLPrinter.g:1490:10: ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? )
					{
					match(input,DECOMPOSE_VK,FOLLOW_DECOMPOSE_VK_in_standard_function12153); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function12155);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1490:36: ( CANONICAL_VK | COMPATIBILITY_VK )?
					int alt410=2;
					int LA410_0 = input.LA(1);
					if ( (LA410_0==CANONICAL_VK||LA410_0==COMPATIBILITY_VK) ) {
						alt410=1;
					}
					switch (alt410) {
						case 1 :
							// PLSQLPrinter.g:
							{
							if ( input.LA(1)==CANONICAL_VK||input.LA(1)==COMPATIBILITY_VK ) {
								input.consume();
								state.errorRecovery=false;
							}
							else {
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 9 :
					// PLSQLPrinter.g:1491:10: ^( EXTRACT_VK REGULAR_ID expression )
					{
					match(input,EXTRACT_VK,FOLLOW_EXTRACT_VK_in_standard_function12176); 
					match(input, Token.DOWN, null); 
					match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_standard_function12178); 
					pushFollow(FOLLOW_expression_in_standard_function12180);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 10 :
					// PLSQLPrinter.g:1492:10: ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause )
					{
					if ( input.LA(1)==FIRST_VALUE_VK||input.LA(1)==LAST_VALUE_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function12199);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1492:54: ( NULLS_VK )?
					int alt411=2;
					int LA411_0 = input.LA(1);
					if ( (LA411_0==NULLS_VK) ) {
						alt411=1;
					}
					switch (alt411) {
						case 1 :
							// PLSQLPrinter.g:1492:54: NULLS_VK
							{
							match(input,NULLS_VK,FOLLOW_NULLS_VK_in_standard_function12201); 
							}
							break;

					}

					pushFollow(FOLLOW_over_clause_in_standard_function12204);
					over_clause();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 11 :
					// PLSQLPrinter.g:1493:10: ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? )
					{
					match(input,PREDICTION_FUNCTION,FOLLOW_PREDICTION_FUNCTION_in_standard_function12218); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1493:32: ( expression )+
					int cnt412=0;
					loop412:
					while (true) {
						int alt412=2;
						int LA412_0 = input.LA(1);
						if ( (LA412_0==EXPR||LA412_0==LOGIC_EXPR) ) {
							alt412=1;
						}

						switch (alt412) {
						case 1 :
							// PLSQLPrinter.g:1493:32: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function12220);
							expression();
							state._fsp--;

							}
							break;

						default :
							if ( cnt412 >= 1 ) break loop412;
							EarlyExitException eee = new EarlyExitException(412, input);
							throw eee;
						}
						cnt412++;
					}

					// PLSQLPrinter.g:1493:44: ( cost_matrix_clause )?
					int alt413=2;
					int LA413_0 = input.LA(1);
					if ( (LA413_0==COST_VK) ) {
						alt413=1;
					}
					switch (alt413) {
						case 1 :
							// PLSQLPrinter.g:1493:44: cost_matrix_clause
							{
							pushFollow(FOLLOW_cost_matrix_clause_in_standard_function12223);
							cost_matrix_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1493:64: ( using_clause )?
					int alt414=2;
					int LA414_0 = input.LA(1);
					if ( (LA414_0==PLSQL_NON_RESERVED_USING) ) {
						alt414=1;
					}
					switch (alt414) {
						case 1 :
							// PLSQLPrinter.g:1493:64: using_clause
							{
							pushFollow(FOLLOW_using_clause_in_standard_function12226);
							using_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 12 :
					// PLSQLPrinter.g:1494:10: ^( TRANSLATE_VK expression ( CHAR_CS_VK | NCHAR_CS_VK )? ( expression )* )
					{
					match(input,TRANSLATE_VK,FOLLOW_TRANSLATE_VK_in_standard_function12240); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function12242);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1494:36: ( CHAR_CS_VK | NCHAR_CS_VK )?
					int alt415=2;
					int LA415_0 = input.LA(1);
					if ( (LA415_0==CHAR_CS_VK||LA415_0==NCHAR_CS_VK) ) {
						alt415=1;
					}
					switch (alt415) {
						case 1 :
							// PLSQLPrinter.g:
							{
							if ( input.LA(1)==CHAR_CS_VK||input.LA(1)==NCHAR_CS_VK ) {
								input.consume();
								state.errorRecovery=false;
							}
							else {
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// PLSQLPrinter.g:1494:62: ( expression )*
					loop416:
					while (true) {
						int alt416=2;
						int LA416_0 = input.LA(1);
						if ( (LA416_0==EXPR||LA416_0==LOGIC_EXPR) ) {
							alt416=1;
						}

						switch (alt416) {
						case 1 :
							// PLSQLPrinter.g:1494:62: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function12251);
							expression();
							state._fsp--;

							}
							break;

						default :
							break loop416;
						}
					}

					match(input, Token.UP, null); 

					}
					break;
				case 13 :
					// PLSQLPrinter.g:1495:10: ^( TREAT_VK expression ( REF_VK )? type_spec )
					{
					match(input,TREAT_VK,FOLLOW_TREAT_VK_in_standard_function12265); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function12267);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1495:32: ( REF_VK )?
					int alt417=2;
					int LA417_0 = input.LA(1);
					if ( (LA417_0==REF_VK) ) {
						alt417=1;
					}
					switch (alt417) {
						case 1 :
							// PLSQLPrinter.g:1495:32: REF_VK
							{
							match(input,REF_VK,FOLLOW_REF_VK_in_standard_function12269); 
							}
							break;

					}

					pushFollow(FOLLOW_type_spec_in_standard_function12272);
					type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 14 :
					// PLSQLPrinter.g:1496:10: ^( TRIM_VK ( LEADING_VK | TRAILING_VK | BOTH_VK )? expression ( expression )? )
					{
					match(input,TRIM_VK,FOLLOW_TRIM_VK_in_standard_function12285); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1496:20: ( LEADING_VK | TRAILING_VK | BOTH_VK )?
					int alt418=2;
					int LA418_0 = input.LA(1);
					if ( (LA418_0==BOTH_VK||LA418_0==LEADING_VK||LA418_0==TRAILING_VK) ) {
						alt418=1;
					}
					switch (alt418) {
						case 1 :
							// PLSQLPrinter.g:
							{
							if ( input.LA(1)==BOTH_VK||input.LA(1)==LEADING_VK||input.LA(1)==TRAILING_VK ) {
								input.consume();
								state.errorRecovery=false;
							}
							else {
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function12296);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1496:65: ( expression )?
					int alt419=2;
					int LA419_0 = input.LA(1);
					if ( (LA419_0==EXPR||LA419_0==LOGIC_EXPR) ) {
						alt419=1;
					}
					switch (alt419) {
						case 1 :
							// PLSQLPrinter.g:1496:65: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function12298);
							expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 15 :
					// PLSQLPrinter.g:1498:10: ^( XMLAGG_VK expression ( order_by_clause )? )
					{
					match(input,XMLAGG_VK,FOLLOW_XMLAGG_VK_in_standard_function12314); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function12316);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1498:33: ( order_by_clause )?
					int alt420=2;
					int LA420_0 = input.LA(1);
					if ( (LA420_0==SQL92_RESERVED_ORDER) ) {
						alt420=1;
					}
					switch (alt420) {
						case 1 :
							// PLSQLPrinter.g:1498:33: order_by_clause
							{
							pushFollow(FOLLOW_order_by_clause_in_standard_function12318);
							order_by_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 16 :
					// PLSQLPrinter.g:1499:10: ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ )
					{
					if ( input.LA(1)==XMLCOLATTVAL_VK||input.LA(1)==XMLFOREST_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1499:43: ( xml_multiuse_expression_element )+
					int cnt421=0;
					loop421:
					while (true) {
						int alt421=2;
						int LA421_0 = input.LA(1);
						if ( (LA421_0==XML_ELEMENT) ) {
							alt421=1;
						}

						switch (alt421) {
						case 1 :
							// PLSQLPrinter.g:1499:43: xml_multiuse_expression_element
							{
							pushFollow(FOLLOW_xml_multiuse_expression_element_in_standard_function12338);
							xml_multiuse_expression_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt421 >= 1 ) break loop421;
							EarlyExitException eee = new EarlyExitException(421, input);
							throw eee;
						}
						cnt421++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 17 :
					// PLSQLPrinter.g:1500:10: ^( XMLEXISTS_VK expression ( xml_passing_clause )? )
					{
					match(input,XMLEXISTS_VK,FOLLOW_XMLEXISTS_VK_in_standard_function12352); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function12354);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1500:36: ( xml_passing_clause )?
					int alt422=2;
					int LA422_0 = input.LA(1);
					if ( (LA422_0==PASSING_VK) ) {
						alt422=1;
					}
					switch (alt422) {
						case 1 :
							// PLSQLPrinter.g:1500:36: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function12356);
							xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 18 :
					// PLSQLPrinter.g:1501:10: ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? )
					{
					match(input,XMLPARSE_VK,FOLLOW_XMLPARSE_VK_in_standard_function12370); 
					match(input, Token.DOWN, null); 
					if ( input.LA(1)==CONTENT_VK||input.LA(1)==DOCUMENT_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_expression_in_standard_function12378);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1501:60: ( WELLFORMED_VK )?
					int alt423=2;
					int LA423_0 = input.LA(1);
					if ( (LA423_0==WELLFORMED_VK) ) {
						alt423=1;
					}
					switch (alt423) {
						case 1 :
							// PLSQLPrinter.g:1501:60: WELLFORMED_VK
							{
							match(input,WELLFORMED_VK,FOLLOW_WELLFORMED_VK_in_standard_function12380); 
							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 19 :
					// PLSQLPrinter.g:1502:10: ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? )
					{
					match(input,XMLQUERY_VK,FOLLOW_XMLQUERY_VK_in_standard_function12394); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function12396);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1502:35: ( xml_passing_clause )?
					int alt424=2;
					int LA424_0 = input.LA(1);
					if ( (LA424_0==PASSING_VK) ) {
						alt424=1;
					}
					switch (alt424) {
						case 1 :
							// PLSQLPrinter.g:1502:35: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function12398);
							xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1502:55: ( SQL92_RESERVED_NULL )?
					int alt425=2;
					int LA425_0 = input.LA(1);
					if ( (LA425_0==SQL92_RESERVED_NULL) ) {
						alt425=1;
					}
					switch (alt425) {
						case 1 :
							// PLSQLPrinter.g:1502:55: SQL92_RESERVED_NULL
							{
							match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_standard_function12401); 
							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 20 :
					// PLSQLPrinter.g:1503:10: ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? )
					{
					match(input,XMLROOT_VK,FOLLOW_XMLROOT_VK_in_standard_function12415); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function12417);
					expression();
					state._fsp--;

					pushFollow(FOLLOW_xml_param_version_part_in_standard_function12419);
					xml_param_version_part();
					state._fsp--;

					// PLSQLPrinter.g:1503:57: ( xmlroot_param_standalone_part )?
					int alt426=2;
					int LA426_0 = input.LA(1);
					if ( (LA426_0==STANDALONE_VK) ) {
						alt426=1;
					}
					switch (alt426) {
						case 1 :
							// PLSQLPrinter.g:1503:57: xmlroot_param_standalone_part
							{
							pushFollow(FOLLOW_xmlroot_param_standalone_part_in_standard_function12421);
							xmlroot_param_standalone_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 21 :
					// PLSQLPrinter.g:1504:10: ^( XMLTABLE_VK ( xml_namespaces_clause )? expression ( xml_passing_clause )? ( xml_table_column )* )
					{
					match(input,XMLTABLE_VK,FOLLOW_XMLTABLE_VK_in_standard_function12435); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1504:24: ( xml_namespaces_clause )?
					int alt427=2;
					int LA427_0 = input.LA(1);
					if ( (LA427_0==XMLNAMESPACES_VK) ) {
						alt427=1;
					}
					switch (alt427) {
						case 1 :
							// PLSQLPrinter.g:1504:24: xml_namespaces_clause
							{
							pushFollow(FOLLOW_xml_namespaces_clause_in_standard_function12437);
							xml_namespaces_clause();
							state._fsp--;

							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function12440);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1504:58: ( xml_passing_clause )?
					int alt428=2;
					int LA428_0 = input.LA(1);
					if ( (LA428_0==PASSING_VK) ) {
						alt428=1;
					}
					switch (alt428) {
						case 1 :
							// PLSQLPrinter.g:1504:58: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function12442);
							xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1504:78: ( xml_table_column )*
					loop429:
					while (true) {
						int alt429=2;
						int LA429_0 = input.LA(1);
						if ( (LA429_0==XML_COLUMN) ) {
							alt429=1;
						}

						switch (alt429) {
						case 1 :
							// PLSQLPrinter.g:1504:78: xml_table_column
							{
							pushFollow(FOLLOW_xml_table_column_in_standard_function12445);
							xml_table_column();
							state._fsp--;

							}
							break;

						default :
							break loop429;
						}
					}

					match(input, Token.UP, null); 

					}
					break;
				case 22 :
					// PLSQLPrinter.g:1505:10: ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? ( expression ( alias )? )* )
					{
					match(input,XMLELEMENT_VK,FOLLOW_XMLELEMENT_VK_in_standard_function12459); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1506:13: ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )?
					int alt430=2;
					int LA430_0 = input.LA(1);
					if ( (LA430_0==ENTITYESCAPING_VK||LA430_0==NOENTITYESCAPING_VK) ) {
						alt430=1;
					}
					switch (alt430) {
						case 1 :
							// PLSQLPrinter.g:
							{
							if ( input.LA(1)==ENTITYESCAPING_VK||input.LA(1)==NOENTITYESCAPING_VK ) {
								input.consume();
								state.errorRecovery=false;
							}
							else {
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// PLSQLPrinter.g:1507:13: ( NAME_VK | EVALNAME_VK )?
					int alt431=2;
					int LA431_0 = input.LA(1);
					if ( (LA431_0==EVALNAME_VK||LA431_0==NAME_VK) ) {
						alt431=1;
					}
					switch (alt431) {
						case 1 :
							// PLSQLPrinter.g:
							{
							if ( input.LA(1)==EVALNAME_VK||input.LA(1)==NAME_VK ) {
								input.consume();
								state.errorRecovery=false;
							}
							else {
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function12499);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1508:13: ( xml_attributes_clause )?
					int alt432=2;
					int LA432_0 = input.LA(1);
					if ( (LA432_0==XMLATTRIBUTES_VK) ) {
						alt432=1;
					}
					switch (alt432) {
						case 1 :
							// PLSQLPrinter.g:1508:13: xml_attributes_clause
							{
							pushFollow(FOLLOW_xml_attributes_clause_in_standard_function12513);
							xml_attributes_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1508:36: ( expression ( alias )? )*
					loop434:
					while (true) {
						int alt434=2;
						int LA434_0 = input.LA(1);
						if ( (LA434_0==EXPR||LA434_0==LOGIC_EXPR) ) {
							alt434=1;
						}

						switch (alt434) {
						case 1 :
							// PLSQLPrinter.g:1508:37: expression ( alias )?
							{
							pushFollow(FOLLOW_expression_in_standard_function12517);
							expression();
							state._fsp--;

							// PLSQLPrinter.g:1508:48: ( alias )?
							int alt433=2;
							int LA433_0 = input.LA(1);
							if ( (LA433_0==ALIAS) ) {
								alt433=1;
							}
							switch (alt433) {
								case 1 :
									// PLSQLPrinter.g:1508:48: alias
									{
									pushFollow(FOLLOW_alias_in_standard_function12519);
									alias();
									state._fsp--;

									}
									break;

							}

							}
							break;

						default :
							break loop434;
						}
					}

					match(input, Token.UP, null); 

					}
					break;
				case 23 :
					// PLSQLPrinter.g:1510:10: ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? )
					{
					match(input,XMLPI_VK,FOLLOW_XMLPI_VK_in_standard_function12544); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1511:17: ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression )
					int alt436=2;
					int LA436_0 = input.LA(1);
					if ( (LA436_0==NAME_VK) ) {
						alt436=1;
					}
					else if ( (LA436_0==EVALNAME_VK) ) {
						alt436=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 436, 0, input);
						throw nvae;
					}

					switch (alt436) {
						case 1 :
							// PLSQLPrinter.g:1511:22: NAME_VK ( char_set_name )? ID
							{
							match(input,NAME_VK,FOLLOW_NAME_VK_in_standard_function12567); 
							// PLSQLPrinter.g:1511:30: ( char_set_name )?
							int alt435=2;
							int LA435_0 = input.LA(1);
							if ( (LA435_0==CHAR_SET_NAME) ) {
								alt435=1;
							}
							switch (alt435) {
								case 1 :
									// PLSQLPrinter.g:1511:30: char_set_name
									{
									pushFollow(FOLLOW_char_set_name_in_standard_function12569);
									char_set_name();
									state._fsp--;

									}
									break;

							}

							match(input,ID,FOLLOW_ID_in_standard_function12572); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1512:22: EVALNAME_VK expression
							{
							match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_standard_function12595); 
							pushFollow(FOLLOW_expression_in_standard_function12597);
							expression();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1514:17: ( expression )?
					int alt437=2;
					int LA437_0 = input.LA(1);
					if ( (LA437_0==EXPR||LA437_0==LOGIC_EXPR) ) {
						alt437=1;
					}
					switch (alt437) {
						case 1 :
							// PLSQLPrinter.g:1514:17: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function12633);
							expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 24 :
					// PLSQLPrinter.g:1516:10: ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? )
					{
					match(input,XMLSERIALIZE_VK,FOLLOW_XMLSERIALIZE_VK_in_standard_function12656); 
					match(input, Token.DOWN, null); 
					if ( input.LA(1)==CONTENT_VK||input.LA(1)==DOCUMENT_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_expression_in_standard_function12696);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1518:28: ( type_spec )?
					int alt438=2;
					int LA438_0 = input.LA(1);
					if ( (LA438_0==CUSTOM_TYPE||LA438_0==INTERVAL_DATATYPE||LA438_0==NATIVE_DATATYPE) ) {
						alt438=1;
					}
					switch (alt438) {
						case 1 :
							// PLSQLPrinter.g:1518:28: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_standard_function12698);
							type_spec();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1519:17: ( xmlserialize_param_enconding_part )?
					int alt439=2;
					int LA439_0 = input.LA(1);
					if ( (LA439_0==ENCODING_VK) ) {
						alt439=1;
					}
					switch (alt439) {
						case 1 :
							// PLSQLPrinter.g:1519:17: xmlserialize_param_enconding_part
							{
							pushFollow(FOLLOW_xmlserialize_param_enconding_part_in_standard_function12717);
							xmlserialize_param_enconding_part();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1520:17: ( xml_param_version_part )?
					int alt440=2;
					int LA440_0 = input.LA(1);
					if ( (LA440_0==VERSION_VK) ) {
						alt440=1;
					}
					switch (alt440) {
						case 1 :
							// PLSQLPrinter.g:1520:17: xml_param_version_part
							{
							pushFollow(FOLLOW_xml_param_version_part_in_standard_function12736);
							xml_param_version_part();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1521:17: ( xmlserialize_param_ident_part )?
					int alt441=2;
					int LA441_0 = input.LA(1);
					if ( (LA441_0==INDENT_VK||LA441_0==NO_VK) ) {
						alt441=1;
					}
					switch (alt441) {
						case 1 :
							// PLSQLPrinter.g:1521:17: xmlserialize_param_ident_part
							{
							pushFollow(FOLLOW_xmlserialize_param_ident_part_in_standard_function12755);
							xmlserialize_param_ident_part();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1522:17: ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )?
					int alt442=2;
					int LA442_0 = input.LA(1);
					if ( (LA442_0==HIDE_VK||LA442_0==SHOW_VK) ) {
						alt442=1;
					}
					switch (alt442) {
						case 1 :
							// PLSQLPrinter.g:1522:18: ( HIDE_VK | SHOW_VK ) DEFAULTS_VK
							{
							if ( input.LA(1)==HIDE_VK||input.LA(1)==SHOW_VK ) {
								input.consume();
								state.errorRecovery=false;
							}
							else {
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							match(input,DEFAULTS_VK,FOLLOW_DEFAULTS_VK_in_standard_function12781); 
							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "standard_function"


	public static class over_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "over_clause"
	// PLSQLPrinter.g:1526:1: over_clause : ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? ) ;
	public final PLSQLPrinter.over_clause_return over_clause() throws RecognitionException {
		PLSQLPrinter.over_clause_return retval = new PLSQLPrinter.over_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1527:5: ( ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? ) )
			// PLSQLPrinter.g:1527:10: ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? )
			{
			match(input,OVER_VK,FOLLOW_OVER_VK_in_over_clause12814); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1527:20: ( query_partition_clause )?
				int alt444=2;
				int LA444_0 = input.LA(1);
				if ( (LA444_0==PARTITION_VK) ) {
					alt444=1;
				}
				switch (alt444) {
					case 1 :
						// PLSQLPrinter.g:1527:20: query_partition_clause
						{
						pushFollow(FOLLOW_query_partition_clause_in_over_clause12816);
						query_partition_clause();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1527:44: ( order_by_clause ( windowing_clause )? )?
				int alt446=2;
				int LA446_0 = input.LA(1);
				if ( (LA446_0==SQL92_RESERVED_ORDER) ) {
					alt446=1;
				}
				switch (alt446) {
					case 1 :
						// PLSQLPrinter.g:1527:45: order_by_clause ( windowing_clause )?
						{
						pushFollow(FOLLOW_order_by_clause_in_over_clause12820);
						order_by_clause();
						state._fsp--;

						// PLSQLPrinter.g:1527:61: ( windowing_clause )?
						int alt445=2;
						int LA445_0 = input.LA(1);
						if ( (LA445_0==RANGE_VK||LA445_0==ROWS_VK) ) {
							alt445=1;
						}
						switch (alt445) {
							case 1 :
								// PLSQLPrinter.g:1527:61: windowing_clause
								{
								pushFollow(FOLLOW_windowing_clause_in_over_clause12822);
								windowing_clause();
								state._fsp--;

								}
								break;

						}

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "over_clause"


	public static class windowing_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "windowing_clause"
	// PLSQLPrinter.g:1530:1: windowing_clause : ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ ) ) ;
	public final PLSQLPrinter.windowing_clause_return windowing_clause() throws RecognitionException {
		PLSQLPrinter.windowing_clause_return retval = new PLSQLPrinter.windowing_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1531:5: ( ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ ) ) )
			// PLSQLPrinter.g:1531:10: ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ ) )
			{
			if ( input.LA(1)==RANGE_VK||input.LA(1)==ROWS_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1532:13: ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ )
			int alt448=2;
			int LA448_0 = input.LA(1);
			if ( (LA448_0==SQL92_RESERVED_BETWEEN) ) {
				alt448=1;
			}
			else if ( (LA448_0==CURRENT_VK||LA448_0==FOLLOWING_VK||LA448_0==PRECEDING_VK||LA448_0==UNBOUNDED_VK) ) {
				alt448=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 448, 0, input);
				throw nvae;
			}

			switch (alt448) {
				case 1 :
					// PLSQLPrinter.g:1532:18: ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements )
					{
					match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_windowing_clause12871); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_windowing_elements_in_windowing_clause12873);
					windowing_elements();
					state._fsp--;

					pushFollow(FOLLOW_windowing_elements_in_windowing_clause12875);
					windowing_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1533:18: ( windowing_elements )+
					{
					// PLSQLPrinter.g:1533:18: ( windowing_elements )+
					int cnt447=0;
					loop447:
					while (true) {
						int alt447=2;
						int LA447_0 = input.LA(1);
						if ( (LA447_0==CURRENT_VK||LA447_0==FOLLOWING_VK||LA447_0==PRECEDING_VK||LA447_0==UNBOUNDED_VK) ) {
							alt447=1;
						}

						switch (alt447) {
						case 1 :
							// PLSQLPrinter.g:1533:18: windowing_elements
							{
							pushFollow(FOLLOW_windowing_elements_in_windowing_clause12895);
							windowing_elements();
							state._fsp--;

							}
							break;

						default :
							if ( cnt447 >= 1 ) break loop447;
							EarlyExitException eee = new EarlyExitException(447, input);
							throw eee;
						}
						cnt447++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "windowing_clause"


	public static class windowing_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "windowing_elements"
	// PLSQLPrinter.g:1538:1: windowing_elements : ( ^( UNBOUNDED_VK PRECEDING_VK ) | ^( CURRENT_VK ROW_VK ) | ^( ( PRECEDING_VK | FOLLOWING_VK ) expression ) );
	public final PLSQLPrinter.windowing_elements_return windowing_elements() throws RecognitionException {
		PLSQLPrinter.windowing_elements_return retval = new PLSQLPrinter.windowing_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1539:5: ( ^( UNBOUNDED_VK PRECEDING_VK ) | ^( CURRENT_VK ROW_VK ) | ^( ( PRECEDING_VK | FOLLOWING_VK ) expression ) )
			int alt449=3;
			switch ( input.LA(1) ) {
			case UNBOUNDED_VK:
				{
				alt449=1;
				}
				break;
			case CURRENT_VK:
				{
				alt449=2;
				}
				break;
			case FOLLOWING_VK:
			case PRECEDING_VK:
				{
				alt449=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 449, 0, input);
				throw nvae;
			}
			switch (alt449) {
				case 1 :
					// PLSQLPrinter.g:1539:10: ^( UNBOUNDED_VK PRECEDING_VK )
					{
					match(input,UNBOUNDED_VK,FOLLOW_UNBOUNDED_VK_in_windowing_elements12941); 
					match(input, Token.DOWN, null); 
					match(input,PRECEDING_VK,FOLLOW_PRECEDING_VK_in_windowing_elements12943); 
					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1540:10: ^( CURRENT_VK ROW_VK )
					{
					match(input,CURRENT_VK,FOLLOW_CURRENT_VK_in_windowing_elements12956); 
					match(input, Token.DOWN, null); 
					match(input,ROW_VK,FOLLOW_ROW_VK_in_windowing_elements12958); 
					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1541:10: ^( ( PRECEDING_VK | FOLLOWING_VK ) expression )
					{
					if ( input.LA(1)==FOLLOWING_VK||input.LA(1)==PRECEDING_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_windowing_elements12977);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "windowing_elements"


	public static class using_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "using_clause"
	// PLSQLPrinter.g:1544:1: using_clause : ^( PLSQL_NON_RESERVED_USING ( using_element )+ ) ;
	public final PLSQLPrinter.using_clause_return using_clause() throws RecognitionException {
		PLSQLPrinter.using_clause_return retval = new PLSQLPrinter.using_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1545:5: ( ^( PLSQL_NON_RESERVED_USING ( using_element )+ ) )
			// PLSQLPrinter.g:1545:10: ^( PLSQL_NON_RESERVED_USING ( using_element )+ )
			{
			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_using_clause12999); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1545:37: ( using_element )+
			int cnt450=0;
			loop450:
			while (true) {
				int alt450=2;
				int LA450_0 = input.LA(1);
				if ( (LA450_0==ASTERISK||LA450_0==ELEMENT) ) {
					alt450=1;
				}

				switch (alt450) {
				case 1 :
					// PLSQLPrinter.g:1545:37: using_element
					{
					pushFollow(FOLLOW_using_element_in_using_clause13001);
					using_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt450 >= 1 ) break loop450;
					EarlyExitException eee = new EarlyExitException(450, input);
					throw eee;
				}
				cnt450++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "using_clause"


	public static class using_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "using_element"
	// PLSQLPrinter.g:1548:1: using_element : ( ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? ) | ASTERISK );
	public final PLSQLPrinter.using_element_return using_element() throws RecognitionException {
		PLSQLPrinter.using_element_return retval = new PLSQLPrinter.using_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1549:5: ( ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? ) | ASTERISK )
			int alt454=2;
			int LA454_0 = input.LA(1);
			if ( (LA454_0==ELEMENT) ) {
				alt454=1;
			}
			else if ( (LA454_0==ASTERISK) ) {
				alt454=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 454, 0, input);
				throw nvae;
			}

			switch (alt454) {
				case 1 :
					// PLSQLPrinter.g:1549:10: ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? )
					{
					match(input,ELEMENT,FOLLOW_ELEMENT_in_using_element13024); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1549:20: ( SQL92_RESERVED_IN )?
					int alt451=2;
					int LA451_0 = input.LA(1);
					if ( (LA451_0==SQL92_RESERVED_IN) ) {
						alt451=1;
					}
					switch (alt451) {
						case 1 :
							// PLSQLPrinter.g:1549:20: SQL92_RESERVED_IN
							{
							match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_using_element13026); 
							}
							break;

					}

					// PLSQLPrinter.g:1549:39: ( OUT_VK )?
					int alt452=2;
					int LA452_0 = input.LA(1);
					if ( (LA452_0==OUT_VK) ) {
						alt452=1;
					}
					switch (alt452) {
						case 1 :
							// PLSQLPrinter.g:1549:39: OUT_VK
							{
							match(input,OUT_VK,FOLLOW_OUT_VK_in_using_element13029); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_using_element13032);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1549:58: ( alias )?
					int alt453=2;
					int LA453_0 = input.LA(1);
					if ( (LA453_0==ALIAS) ) {
						alt453=1;
					}
					switch (alt453) {
						case 1 :
							// PLSQLPrinter.g:1549:58: alias
							{
							pushFollow(FOLLOW_alias_in_using_element13034);
							alias();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1550:10: ASTERISK
					{
					match(input,ASTERISK,FOLLOW_ASTERISK_in_using_element13047); 
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "using_element"


	public static class collect_order_by_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "collect_order_by_part"
	// PLSQLPrinter.g:1553:1: collect_order_by_part : ^( SQL92_RESERVED_ORDER expression ) ;
	public final PLSQLPrinter.collect_order_by_part_return collect_order_by_part() throws RecognitionException {
		PLSQLPrinter.collect_order_by_part_return retval = new PLSQLPrinter.collect_order_by_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1554:5: ( ^( SQL92_RESERVED_ORDER expression ) )
			// PLSQLPrinter.g:1554:10: ^( SQL92_RESERVED_ORDER expression )
			{
			match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_collect_order_by_part13068); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_collect_order_by_part13070);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "collect_order_by_part"


	public static class within_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "within_clause"
	// PLSQLPrinter.g:1557:1: within_clause : ^( WITHIN_VK order_by_clause ) ;
	public final PLSQLPrinter.within_clause_return within_clause() throws RecognitionException {
		PLSQLPrinter.within_clause_return retval = new PLSQLPrinter.within_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1558:5: ( ^( WITHIN_VK order_by_clause ) )
			// PLSQLPrinter.g:1558:10: ^( WITHIN_VK order_by_clause )
			{
			match(input,WITHIN_VK,FOLLOW_WITHIN_VK_in_within_clause13092); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_order_by_clause_in_within_clause13094);
			order_by_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "within_clause"


	public static class cost_matrix_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cost_matrix_clause"
	// PLSQLPrinter.g:1561:1: cost_matrix_clause : ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) ) ;
	public final PLSQLPrinter.cost_matrix_clause_return cost_matrix_clause() throws RecognitionException {
		PLSQLPrinter.cost_matrix_clause_return retval = new PLSQLPrinter.cost_matrix_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1562:5: ( ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) ) )
			// PLSQLPrinter.g:1562:10: ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) )
			{
			match(input,COST_VK,FOLLOW_COST_VK_in_cost_matrix_clause13116); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1563:13: ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list )
			int alt457=2;
			int LA457_0 = input.LA(1);
			if ( (LA457_0==PLSQL_NON_RESERVED_MODEL) ) {
				alt457=1;
			}
			else if ( (LA457_0==COST_CLASS_NAME) ) {
				alt457=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 457, 0, input);
				throw nvae;
			}

			switch (alt457) {
				case 1 :
					// PLSQLPrinter.g:1563:18: PLSQL_NON_RESERVED_MODEL ( AUTO_VK )?
					{
					match(input,PLSQL_NON_RESERVED_MODEL,FOLLOW_PLSQL_NON_RESERVED_MODEL_in_cost_matrix_clause13135); 
					// PLSQLPrinter.g:1563:43: ( AUTO_VK )?
					int alt455=2;
					int LA455_0 = input.LA(1);
					if ( (LA455_0==AUTO_VK) ) {
						alt455=1;
					}
					switch (alt455) {
						case 1 :
							// PLSQLPrinter.g:1563:43: AUTO_VK
							{
							match(input,AUTO_VK,FOLLOW_AUTO_VK_in_cost_matrix_clause13137); 
							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1564:18: ( cost_class_name )+ expression_list
					{
					// PLSQLPrinter.g:1564:18: ( cost_class_name )+
					int cnt456=0;
					loop456:
					while (true) {
						int alt456=2;
						int LA456_0 = input.LA(1);
						if ( (LA456_0==COST_CLASS_NAME) ) {
							alt456=1;
						}

						switch (alt456) {
						case 1 :
							// PLSQLPrinter.g:1564:18: cost_class_name
							{
							pushFollow(FOLLOW_cost_class_name_in_cost_matrix_clause13157);
							cost_class_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt456 >= 1 ) break loop456;
							EarlyExitException eee = new EarlyExitException(456, input);
							throw eee;
						}
						cnt456++;
					}

					pushFollow(FOLLOW_expression_list_in_cost_matrix_clause13160);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cost_matrix_clause"


	public static class xml_passing_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_passing_clause"
	// PLSQLPrinter.g:1569:1: xml_passing_clause : ^( PASSING_VK ( VALUE_VK )? expression ( alias )? ( expression ( alias )? )? ) ;
	public final PLSQLPrinter.xml_passing_clause_return xml_passing_clause() throws RecognitionException {
		PLSQLPrinter.xml_passing_clause_return retval = new PLSQLPrinter.xml_passing_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1570:5: ( ^( PASSING_VK ( VALUE_VK )? expression ( alias )? ( expression ( alias )? )? ) )
			// PLSQLPrinter.g:1570:10: ^( PASSING_VK ( VALUE_VK )? expression ( alias )? ( expression ( alias )? )? )
			{
			match(input,PASSING_VK,FOLLOW_PASSING_VK_in_xml_passing_clause13205); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1570:23: ( VALUE_VK )?
			int alt458=2;
			int LA458_0 = input.LA(1);
			if ( (LA458_0==VALUE_VK) ) {
				alt458=1;
			}
			switch (alt458) {
				case 1 :
					// PLSQLPrinter.g:1570:23: VALUE_VK
					{
					match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xml_passing_clause13207); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_xml_passing_clause13210);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1570:44: ( alias )?
			int alt459=2;
			int LA459_0 = input.LA(1);
			if ( (LA459_0==ALIAS) ) {
				alt459=1;
			}
			switch (alt459) {
				case 1 :
					// PLSQLPrinter.g:1570:44: alias
					{
					pushFollow(FOLLOW_alias_in_xml_passing_clause13212);
					alias();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1570:51: ( expression ( alias )? )?
			int alt461=2;
			int LA461_0 = input.LA(1);
			if ( (LA461_0==EXPR||LA461_0==LOGIC_EXPR) ) {
				alt461=1;
			}
			switch (alt461) {
				case 1 :
					// PLSQLPrinter.g:1570:52: expression ( alias )?
					{
					pushFollow(FOLLOW_expression_in_xml_passing_clause13216);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1570:63: ( alias )?
					int alt460=2;
					int LA460_0 = input.LA(1);
					if ( (LA460_0==ALIAS) ) {
						alt460=1;
					}
					switch (alt460) {
						case 1 :
							// PLSQLPrinter.g:1570:63: alias
							{
							pushFollow(FOLLOW_alias_in_xml_passing_clause13218);
							alias();
							state._fsp--;

							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_passing_clause"


	public static class xml_attributes_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_attributes_clause"
	// PLSQLPrinter.g:1573:1: xml_attributes_clause : ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? ( xml_multiuse_expression_element )+ ) ;
	public final PLSQLPrinter.xml_attributes_clause_return xml_attributes_clause() throws RecognitionException {
		PLSQLPrinter.xml_attributes_clause_return retval = new PLSQLPrinter.xml_attributes_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1574:5: ( ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? ( xml_multiuse_expression_element )+ ) )
			// PLSQLPrinter.g:1574:10: ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? ( xml_multiuse_expression_element )+ )
			{
			match(input,XMLATTRIBUTES_VK,FOLLOW_XMLATTRIBUTES_VK_in_xml_attributes_clause13243); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1575:13: ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )?
			int alt462=2;
			int LA462_0 = input.LA(1);
			if ( (LA462_0==ENTITYESCAPING_VK||LA462_0==NOENTITYESCAPING_VK) ) {
				alt462=1;
			}
			switch (alt462) {
				case 1 :
					// PLSQLPrinter.g:
					{
					if ( input.LA(1)==ENTITYESCAPING_VK||input.LA(1)==NOENTITYESCAPING_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// PLSQLPrinter.g:1576:13: ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )?
			int alt463=2;
			int LA463_0 = input.LA(1);
			if ( (LA463_0==NOSCHEMACHECK_VK||LA463_0==SCHEMACHECK_VK) ) {
				alt463=1;
			}
			switch (alt463) {
				case 1 :
					// PLSQLPrinter.g:
					{
					if ( input.LA(1)==NOSCHEMACHECK_VK||input.LA(1)==SCHEMACHECK_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// PLSQLPrinter.g:1577:13: ( xml_multiuse_expression_element )+
			int cnt464=0;
			loop464:
			while (true) {
				int alt464=2;
				int LA464_0 = input.LA(1);
				if ( (LA464_0==XML_ELEMENT) ) {
					alt464=1;
				}

				switch (alt464) {
				case 1 :
					// PLSQLPrinter.g:1577:13: xml_multiuse_expression_element
					{
					pushFollow(FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause13295);
					xml_multiuse_expression_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt464 >= 1 ) break loop464;
					EarlyExitException eee = new EarlyExitException(464, input);
					throw eee;
				}
				cnt464++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_attributes_clause"


	public static class xml_namespaces_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_namespaces_clause"
	// PLSQLPrinter.g:1581:1: xml_namespaces_clause : ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? ) ;
	public final PLSQLPrinter.xml_namespaces_clause_return xml_namespaces_clause() throws RecognitionException {
		PLSQLPrinter.xml_namespaces_clause_return retval = new PLSQLPrinter.xml_namespaces_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1582:5: ( ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? ) )
			// PLSQLPrinter.g:1582:10: ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? )
			{
			match(input,XMLNAMESPACES_VK,FOLLOW_XMLNAMESPACES_VK_in_xml_namespaces_clause13327); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1583:13: ( expression ( alias )? )*
				loop466:
				while (true) {
					int alt466=2;
					int LA466_0 = input.LA(1);
					if ( (LA466_0==EXPR||LA466_0==LOGIC_EXPR) ) {
						alt466=1;
					}

					switch (alt466) {
					case 1 :
						// PLSQLPrinter.g:1583:14: expression ( alias )?
						{
						pushFollow(FOLLOW_expression_in_xml_namespaces_clause13342);
						expression();
						state._fsp--;

						// PLSQLPrinter.g:1583:25: ( alias )?
						int alt465=2;
						int LA465_0 = input.LA(1);
						if ( (LA465_0==ALIAS) ) {
							alt465=1;
						}
						switch (alt465) {
							case 1 :
								// PLSQLPrinter.g:1583:25: alias
								{
								pushFollow(FOLLOW_alias_in_xml_namespaces_clause13344);
								alias();
								state._fsp--;

								}
								break;

						}

						}
						break;

					default :
						break loop466;
					}
				}

				// PLSQLPrinter.g:1583:34: ( xml_general_default_part )?
				int alt467=2;
				int LA467_0 = input.LA(1);
				if ( (LA467_0==SQL92_RESERVED_DEFAULT) ) {
					alt467=1;
				}
				switch (alt467) {
					case 1 :
						// PLSQLPrinter.g:1583:34: xml_general_default_part
						{
						pushFollow(FOLLOW_xml_general_default_part_in_xml_namespaces_clause13349);
						xml_general_default_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_namespaces_clause"


	public static class xml_table_column_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_table_column"
	// PLSQLPrinter.g:1587:1: xml_table_column : ^( XML_COLUMN xml_column_name ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? ) ) ;
	public final PLSQLPrinter.xml_table_column_return xml_table_column() throws RecognitionException {
		PLSQLPrinter.xml_table_column_return retval = new PLSQLPrinter.xml_table_column_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1588:5: ( ^( XML_COLUMN xml_column_name ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? ) ) )
			// PLSQLPrinter.g:1588:10: ^( XML_COLUMN xml_column_name ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? ) )
			{
			match(input,XML_COLUMN,FOLLOW_XML_COLUMN_in_xml_table_column13381); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_xml_column_name_in_xml_table_column13383);
			xml_column_name();
			state._fsp--;

			// PLSQLPrinter.g:1588:39: ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? )
			int alt470=2;
			int LA470_0 = input.LA(1);
			if ( (LA470_0==ORDINALITY_VK) ) {
				alt470=1;
			}
			else if ( (LA470_0==CUSTOM_TYPE||LA470_0==INTERVAL_DATATYPE||LA470_0==NATIVE_DATATYPE) ) {
				alt470=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 470, 0, input);
				throw nvae;
			}

			switch (alt470) {
				case 1 :
					// PLSQLPrinter.g:1588:40: ORDINALITY_VK
					{
					match(input,ORDINALITY_VK,FOLLOW_ORDINALITY_VK_in_xml_table_column13386); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1588:54: type_spec ( expression )? ( xml_general_default_part )?
					{
					pushFollow(FOLLOW_type_spec_in_xml_table_column13388);
					type_spec();
					state._fsp--;

					// PLSQLPrinter.g:1588:64: ( expression )?
					int alt468=2;
					int LA468_0 = input.LA(1);
					if ( (LA468_0==EXPR||LA468_0==LOGIC_EXPR) ) {
						alt468=1;
					}
					switch (alt468) {
						case 1 :
							// PLSQLPrinter.g:1588:64: expression
							{
							pushFollow(FOLLOW_expression_in_xml_table_column13390);
							expression();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1588:76: ( xml_general_default_part )?
					int alt469=2;
					int LA469_0 = input.LA(1);
					if ( (LA469_0==SQL92_RESERVED_DEFAULT) ) {
						alt469=1;
					}
					switch (alt469) {
						case 1 :
							// PLSQLPrinter.g:1588:76: xml_general_default_part
							{
							pushFollow(FOLLOW_xml_general_default_part_in_xml_table_column13393);
							xml_general_default_part();
							state._fsp--;

							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_table_column"


	public static class xml_general_default_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_general_default_part"
	// PLSQLPrinter.g:1591:1: xml_general_default_part : ^( SQL92_RESERVED_DEFAULT expression ) ;
	public final PLSQLPrinter.xml_general_default_part_return xml_general_default_part() throws RecognitionException {
		PLSQLPrinter.xml_general_default_part_return retval = new PLSQLPrinter.xml_general_default_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1592:5: ( ^( SQL92_RESERVED_DEFAULT expression ) )
			// PLSQLPrinter.g:1592:10: ^( SQL92_RESERVED_DEFAULT expression )
			{
			match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_xml_general_default_part13418); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xml_general_default_part13420);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_general_default_part"


	public static class xml_multiuse_expression_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_multiuse_expression_element"
	// PLSQLPrinter.g:1595:1: xml_multiuse_expression_element : ^( XML_ELEMENT expression ( xml_alias )? ) ;
	public final PLSQLPrinter.xml_multiuse_expression_element_return xml_multiuse_expression_element() throws RecognitionException {
		PLSQLPrinter.xml_multiuse_expression_element_return retval = new PLSQLPrinter.xml_multiuse_expression_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1596:5: ( ^( XML_ELEMENT expression ( xml_alias )? ) )
			// PLSQLPrinter.g:1596:10: ^( XML_ELEMENT expression ( xml_alias )? )
			{
			match(input,XML_ELEMENT,FOLLOW_XML_ELEMENT_in_xml_multiuse_expression_element13442); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xml_multiuse_expression_element13444);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1596:35: ( xml_alias )?
			int alt471=2;
			int LA471_0 = input.LA(1);
			if ( (LA471_0==XML_ALIAS) ) {
				alt471=1;
			}
			switch (alt471) {
				case 1 :
					// PLSQLPrinter.g:1596:35: xml_alias
					{
					pushFollow(FOLLOW_xml_alias_in_xml_multiuse_expression_element13446);
					xml_alias();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_multiuse_expression_element"


	public static class xml_alias_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_alias"
	// PLSQLPrinter.g:1599:1: xml_alias : ( ^( XML_ALIAS ID ) | ^( XML_ALIAS ^( EVALNAME_VK expression ) ) );
	public final PLSQLPrinter.xml_alias_return xml_alias() throws RecognitionException {
		PLSQLPrinter.xml_alias_return retval = new PLSQLPrinter.xml_alias_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1600:5: ( ^( XML_ALIAS ID ) | ^( XML_ALIAS ^( EVALNAME_VK expression ) ) )
			int alt472=2;
			int LA472_0 = input.LA(1);
			if ( (LA472_0==XML_ALIAS) ) {
				int LA472_1 = input.LA(2);
				if ( (LA472_1==DOWN) ) {
					int LA472_2 = input.LA(3);
					if ( (LA472_2==ID) ) {
						alt472=1;
					}
					else if ( (LA472_2==EVALNAME_VK) ) {
						alt472=2;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 472, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 472, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 472, 0, input);
				throw nvae;
			}

			switch (alt472) {
				case 1 :
					// PLSQLPrinter.g:1600:10: ^( XML_ALIAS ID )
					{
					match(input,XML_ALIAS,FOLLOW_XML_ALIAS_in_xml_alias13469); 
					match(input, Token.DOWN, null); 
					match(input,ID,FOLLOW_ID_in_xml_alias13471); 
					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1601:10: ^( XML_ALIAS ^( EVALNAME_VK expression ) )
					{
					match(input,XML_ALIAS,FOLLOW_XML_ALIAS_in_xml_alias13484); 
					match(input, Token.DOWN, null); 
					match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_xml_alias13487); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_xml_alias13489);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_alias"


	public static class xml_param_version_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_param_version_part"
	// PLSQLPrinter.g:1604:1: xml_param_version_part : ^( VERSION_VK ( NO_VK VALUE_VK | expression ) ) ;
	public final PLSQLPrinter.xml_param_version_part_return xml_param_version_part() throws RecognitionException {
		PLSQLPrinter.xml_param_version_part_return retval = new PLSQLPrinter.xml_param_version_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1605:5: ( ^( VERSION_VK ( NO_VK VALUE_VK | expression ) ) )
			// PLSQLPrinter.g:1605:10: ^( VERSION_VK ( NO_VK VALUE_VK | expression ) )
			{
			match(input,VERSION_VK,FOLLOW_VERSION_VK_in_xml_param_version_part13512); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1605:23: ( NO_VK VALUE_VK | expression )
			int alt473=2;
			int LA473_0 = input.LA(1);
			if ( (LA473_0==NO_VK) ) {
				alt473=1;
			}
			else if ( (LA473_0==EXPR||LA473_0==LOGIC_EXPR) ) {
				alt473=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 473, 0, input);
				throw nvae;
			}

			switch (alt473) {
				case 1 :
					// PLSQLPrinter.g:1605:24: NO_VK VALUE_VK
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xml_param_version_part13515); 
					match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xml_param_version_part13517); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1605:39: expression
					{
					pushFollow(FOLLOW_expression_in_xml_param_version_part13519);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_param_version_part"


	public static class xmlroot_param_standalone_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlroot_param_standalone_part"
	// PLSQLPrinter.g:1608:1: xmlroot_param_standalone_part : ^( STANDALONE_VK ( YES_VK | NO_VK ( VALUE_VK )? ) ) ;
	public final PLSQLPrinter.xmlroot_param_standalone_part_return xmlroot_param_standalone_part() throws RecognitionException {
		PLSQLPrinter.xmlroot_param_standalone_part_return retval = new PLSQLPrinter.xmlroot_param_standalone_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1609:5: ( ^( STANDALONE_VK ( YES_VK | NO_VK ( VALUE_VK )? ) ) )
			// PLSQLPrinter.g:1609:10: ^( STANDALONE_VK ( YES_VK | NO_VK ( VALUE_VK )? ) )
			{
			match(input,STANDALONE_VK,FOLLOW_STANDALONE_VK_in_xmlroot_param_standalone_part13542); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1609:26: ( YES_VK | NO_VK ( VALUE_VK )? )
			int alt475=2;
			int LA475_0 = input.LA(1);
			if ( (LA475_0==YES_VK) ) {
				alt475=1;
			}
			else if ( (LA475_0==NO_VK) ) {
				alt475=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 475, 0, input);
				throw nvae;
			}

			switch (alt475) {
				case 1 :
					// PLSQLPrinter.g:1609:27: YES_VK
					{
					match(input,YES_VK,FOLLOW_YES_VK_in_xmlroot_param_standalone_part13545); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1609:34: NO_VK ( VALUE_VK )?
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xmlroot_param_standalone_part13547); 
					// PLSQLPrinter.g:1609:40: ( VALUE_VK )?
					int alt474=2;
					int LA474_0 = input.LA(1);
					if ( (LA474_0==VALUE_VK) ) {
						alt474=1;
					}
					switch (alt474) {
						case 1 :
							// PLSQLPrinter.g:1609:40: VALUE_VK
							{
							match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xmlroot_param_standalone_part13549); 
							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlroot_param_standalone_part"


	public static class xmlserialize_param_enconding_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlserialize_param_enconding_part"
	// PLSQLPrinter.g:1612:1: xmlserialize_param_enconding_part : ^( ENCODING_VK expression ) ;
	public final PLSQLPrinter.xmlserialize_param_enconding_part_return xmlserialize_param_enconding_part() throws RecognitionException {
		PLSQLPrinter.xmlserialize_param_enconding_part_return retval = new PLSQLPrinter.xmlserialize_param_enconding_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1613:5: ( ^( ENCODING_VK expression ) )
			// PLSQLPrinter.g:1613:10: ^( ENCODING_VK expression )
			{
			match(input,ENCODING_VK,FOLLOW_ENCODING_VK_in_xmlserialize_param_enconding_part13573); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xmlserialize_param_enconding_part13575);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlserialize_param_enconding_part"


	public static class xmlserialize_param_ident_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlserialize_param_ident_part"
	// PLSQLPrinter.g:1616:1: xmlserialize_param_ident_part : ( NO_VK INDENT_VK | ^( INDENT_VK ( expression )? ) );
	public final PLSQLPrinter.xmlserialize_param_ident_part_return xmlserialize_param_ident_part() throws RecognitionException {
		PLSQLPrinter.xmlserialize_param_ident_part_return retval = new PLSQLPrinter.xmlserialize_param_ident_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1617:5: ( NO_VK INDENT_VK | ^( INDENT_VK ( expression )? ) )
			int alt477=2;
			int LA477_0 = input.LA(1);
			if ( (LA477_0==NO_VK) ) {
				alt477=1;
			}
			else if ( (LA477_0==INDENT_VK) ) {
				alt477=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 477, 0, input);
				throw nvae;
			}

			switch (alt477) {
				case 1 :
					// PLSQLPrinter.g:1617:10: NO_VK INDENT_VK
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xmlserialize_param_ident_part13596); 
					match(input,INDENT_VK,FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part13598); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1618:10: ^( INDENT_VK ( expression )? )
					{
					match(input,INDENT_VK,FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part13610); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:1618:22: ( expression )?
						int alt476=2;
						int LA476_0 = input.LA(1);
						if ( (LA476_0==EXPR||LA476_0==LOGIC_EXPR) ) {
							alt476=1;
						}
						switch (alt476) {
							case 1 :
								// PLSQLPrinter.g:1618:22: expression
								{
								pushFollow(FOLLOW_expression_in_xmlserialize_param_ident_part13612);
								expression();
								state._fsp--;

								}
								break;

						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlserialize_param_ident_part"


	public static class partition_extension_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "partition_extension_clause"
	// PLSQLPrinter.g:1625:1: partition_extension_clause : ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list ) ;
	public final PLSQLPrinter.partition_extension_clause_return partition_extension_clause() throws RecognitionException {
		PLSQLPrinter.partition_extension_clause_return retval = new PLSQLPrinter.partition_extension_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1626:5: ( ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list ) )
			// PLSQLPrinter.g:1626:10: ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list )
			{
			if ( input.LA(1)==PARTITION_VK||input.LA(1)==SUBPARTITION_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_list_in_partition_extension_clause13645);
			expression_list();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_extension_clause"


	public static class alias_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alias"
	// PLSQLPrinter.g:1629:1: alias : ^( ALIAS ( char_set_name )? ID ) ;
	public final PLSQLPrinter.alias_return alias() throws RecognitionException {
		PLSQLPrinter.alias_return retval = new PLSQLPrinter.alias_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1630:5: ( ^( ALIAS ( char_set_name )? ID ) )
			// PLSQLPrinter.g:1630:10: ^( ALIAS ( char_set_name )? ID )
			{
			match(input,ALIAS,FOLLOW_ALIAS_in_alias13667); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1630:18: ( char_set_name )?
			int alt478=2;
			int LA478_0 = input.LA(1);
			if ( (LA478_0==CHAR_SET_NAME) ) {
				alt478=1;
			}
			switch (alt478) {
				case 1 :
					// PLSQLPrinter.g:1630:18: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_alias13669);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_alias13672); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alias"


	public static class where_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "where_clause"
	// PLSQLPrinter.g:1633:1: where_clause : ^( SQL92_RESERVED_WHERE expression ) ;
	public final PLSQLPrinter.where_clause_return where_clause() throws RecognitionException {
		PLSQLPrinter.where_clause_return retval = new PLSQLPrinter.where_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1634:5: ( ^( SQL92_RESERVED_WHERE expression ) )
			// PLSQLPrinter.g:1634:10: ^( SQL92_RESERVED_WHERE expression )
			{
			match(input,SQL92_RESERVED_WHERE,FOLLOW_SQL92_RESERVED_WHERE_in_where_clause13694); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_where_clause13696);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "where_clause"


	public static class into_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "into_clause"
	// PLSQLPrinter.g:1637:1: into_clause : ( ^( SQL92_RESERVED_INTO ( general_element )+ ) | ^( BULK_VK ( general_element )+ ) );
	public final PLSQLPrinter.into_clause_return into_clause() throws RecognitionException {
		PLSQLPrinter.into_clause_return retval = new PLSQLPrinter.into_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1638:5: ( ^( SQL92_RESERVED_INTO ( general_element )+ ) | ^( BULK_VK ( general_element )+ ) )
			int alt481=2;
			int LA481_0 = input.LA(1);
			if ( (LA481_0==SQL92_RESERVED_INTO) ) {
				alt481=1;
			}
			else if ( (LA481_0==BULK_VK) ) {
				alt481=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 481, 0, input);
				throw nvae;
			}

			switch (alt481) {
				case 1 :
					// PLSQLPrinter.g:1638:10: ^( SQL92_RESERVED_INTO ( general_element )+ )
					{
					match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_into_clause13718); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1638:32: ( general_element )+
					int cnt479=0;
					loop479:
					while (true) {
						int alt479=2;
						int LA479_0 = input.LA(1);
						if ( (LA479_0==ANY_ELEMENT||LA479_0==CASCATED_ELEMENT||LA479_0==HOSTED_VARIABLE||LA479_0==HOSTED_VARIABLE_ROUTINE_CALL||LA479_0==ROUTINE_CALL) ) {
							alt479=1;
						}

						switch (alt479) {
						case 1 :
							// PLSQLPrinter.g:1638:32: general_element
							{
							pushFollow(FOLLOW_general_element_in_into_clause13720);
							general_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt479 >= 1 ) break loop479;
							EarlyExitException eee = new EarlyExitException(479, input);
							throw eee;
						}
						cnt479++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1639:10: ^( BULK_VK ( general_element )+ )
					{
					match(input,BULK_VK,FOLLOW_BULK_VK_in_into_clause13735); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1639:20: ( general_element )+
					int cnt480=0;
					loop480:
					while (true) {
						int alt480=2;
						int LA480_0 = input.LA(1);
						if ( (LA480_0==ANY_ELEMENT||LA480_0==CASCATED_ELEMENT||LA480_0==HOSTED_VARIABLE||LA480_0==HOSTED_VARIABLE_ROUTINE_CALL||LA480_0==ROUTINE_CALL) ) {
							alt480=1;
						}

						switch (alt480) {
						case 1 :
							// PLSQLPrinter.g:1639:20: general_element
							{
							pushFollow(FOLLOW_general_element_in_into_clause13737);
							general_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt480 >= 1 ) break loop480;
							EarlyExitException eee = new EarlyExitException(480, input);
							throw eee;
						}
						cnt480++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "into_clause"


	public static class xml_column_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_column_name"
	// PLSQLPrinter.g:1646:1: xml_column_name : ^( XML_COLUMN_NAME ( char_set_name )? ID ) ;
	public final PLSQLPrinter.xml_column_name_return xml_column_name() throws RecognitionException {
		PLSQLPrinter.xml_column_name_return retval = new PLSQLPrinter.xml_column_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1647:5: ( ^( XML_COLUMN_NAME ( char_set_name )? ID ) )
			// PLSQLPrinter.g:1647:10: ^( XML_COLUMN_NAME ( char_set_name )? ID )
			{
			match(input,XML_COLUMN_NAME,FOLLOW_XML_COLUMN_NAME_in_xml_column_name13765); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1647:28: ( char_set_name )?
			int alt482=2;
			int LA482_0 = input.LA(1);
			if ( (LA482_0==CHAR_SET_NAME) ) {
				alt482=1;
			}
			switch (alt482) {
				case 1 :
					// PLSQLPrinter.g:1647:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_xml_column_name13767);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_xml_column_name13770); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_column_name"


	public static class cost_class_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cost_class_name"
	// PLSQLPrinter.g:1650:1: cost_class_name : ^( COST_CLASS_NAME ( char_set_name )? ID ) ;
	public final PLSQLPrinter.cost_class_name_return cost_class_name() throws RecognitionException {
		PLSQLPrinter.cost_class_name_return retval = new PLSQLPrinter.cost_class_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1651:5: ( ^( COST_CLASS_NAME ( char_set_name )? ID ) )
			// PLSQLPrinter.g:1651:10: ^( COST_CLASS_NAME ( char_set_name )? ID )
			{
			match(input,COST_CLASS_NAME,FOLLOW_COST_CLASS_NAME_in_cost_class_name13792); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1651:28: ( char_set_name )?
			int alt483=2;
			int LA483_0 = input.LA(1);
			if ( (LA483_0==CHAR_SET_NAME) ) {
				alt483=1;
			}
			switch (alt483) {
				case 1 :
					// PLSQLPrinter.g:1651:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_cost_class_name13794);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_cost_class_name13797); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cost_class_name"


	public static class attribute_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "attribute_name"
	// PLSQLPrinter.g:1654:1: attribute_name : ^( ATTRIBUTE_NAME ( char_set_name )? ID ) ;
	public final PLSQLPrinter.attribute_name_return attribute_name() throws RecognitionException {
		PLSQLPrinter.attribute_name_return retval = new PLSQLPrinter.attribute_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1655:5: ( ^( ATTRIBUTE_NAME ( char_set_name )? ID ) )
			// PLSQLPrinter.g:1655:10: ^( ATTRIBUTE_NAME ( char_set_name )? ID )
			{
			match(input,ATTRIBUTE_NAME,FOLLOW_ATTRIBUTE_NAME_in_attribute_name13819); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1655:27: ( char_set_name )?
			int alt484=2;
			int LA484_0 = input.LA(1);
			if ( (LA484_0==CHAR_SET_NAME) ) {
				alt484=1;
			}
			switch (alt484) {
				case 1 :
					// PLSQLPrinter.g:1655:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_attribute_name13821);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_attribute_name13824); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "attribute_name"


	public static class savepoint_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "savepoint_name"
	// PLSQLPrinter.g:1658:1: savepoint_name : ^( SAVEPOINT_NAME ( char_set_name )? ID ) ;
	public final PLSQLPrinter.savepoint_name_return savepoint_name() throws RecognitionException {
		PLSQLPrinter.savepoint_name_return retval = new PLSQLPrinter.savepoint_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1659:5: ( ^( SAVEPOINT_NAME ( char_set_name )? ID ) )
			// PLSQLPrinter.g:1659:10: ^( SAVEPOINT_NAME ( char_set_name )? ID )
			{
			match(input,SAVEPOINT_NAME,FOLLOW_SAVEPOINT_NAME_in_savepoint_name13846); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1659:27: ( char_set_name )?
			int alt485=2;
			int LA485_0 = input.LA(1);
			if ( (LA485_0==CHAR_SET_NAME) ) {
				alt485=1;
			}
			switch (alt485) {
				case 1 :
					// PLSQLPrinter.g:1659:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_savepoint_name13848);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_savepoint_name13851); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "savepoint_name"


	public static class rollback_segment_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "rollback_segment_name"
	// PLSQLPrinter.g:1662:1: rollback_segment_name : ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID ) ;
	public final PLSQLPrinter.rollback_segment_name_return rollback_segment_name() throws RecognitionException {
		PLSQLPrinter.rollback_segment_name_return retval = new PLSQLPrinter.rollback_segment_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1663:5: ( ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID ) )
			// PLSQLPrinter.g:1663:10: ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID )
			{
			match(input,ROLLBACK_SEGMENT_NAME,FOLLOW_ROLLBACK_SEGMENT_NAME_in_rollback_segment_name13873); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1663:34: ( char_set_name )?
			int alt486=2;
			int LA486_0 = input.LA(1);
			if ( (LA486_0==CHAR_SET_NAME) ) {
				alt486=1;
			}
			switch (alt486) {
				case 1 :
					// PLSQLPrinter.g:1663:34: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_rollback_segment_name13875);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_rollback_segment_name13878); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rollback_segment_name"


	public static class table_var_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_var_name"
	// PLSQLPrinter.g:1667:1: table_var_name : ^( TABLE_VAR_NAME ( char_set_name )? ID ) ;
	public final PLSQLPrinter.table_var_name_return table_var_name() throws RecognitionException {
		PLSQLPrinter.table_var_name_return retval = new PLSQLPrinter.table_var_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1668:5: ( ^( TABLE_VAR_NAME ( char_set_name )? ID ) )
			// PLSQLPrinter.g:1668:10: ^( TABLE_VAR_NAME ( char_set_name )? ID )
			{
			match(input,TABLE_VAR_NAME,FOLLOW_TABLE_VAR_NAME_in_table_var_name13901); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1668:27: ( char_set_name )?
			int alt487=2;
			int LA487_0 = input.LA(1);
			if ( (LA487_0==CHAR_SET_NAME) ) {
				alt487=1;
			}
			switch (alt487) {
				case 1 :
					// PLSQLPrinter.g:1668:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_table_var_name13903);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_table_var_name13906); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_var_name"


	public static class schema_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "schema_name"
	// PLSQLPrinter.g:1671:1: schema_name : ^( SCHEMA_NAME ( char_set_name )? ID ) ;
	public final PLSQLPrinter.schema_name_return schema_name() throws RecognitionException {
		PLSQLPrinter.schema_name_return retval = new PLSQLPrinter.schema_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1672:5: ( ^( SCHEMA_NAME ( char_set_name )? ID ) )
			// PLSQLPrinter.g:1672:10: ^( SCHEMA_NAME ( char_set_name )? ID )
			{
			match(input,SCHEMA_NAME,FOLLOW_SCHEMA_NAME_in_schema_name13928); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1672:24: ( char_set_name )?
			int alt488=2;
			int LA488_0 = input.LA(1);
			if ( (LA488_0==CHAR_SET_NAME) ) {
				alt488=1;
			}
			switch (alt488) {
				case 1 :
					// PLSQLPrinter.g:1672:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_schema_name13930);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_schema_name13933); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "schema_name"


	public static class routine_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "routine_name"
	// PLSQLPrinter.g:1675:1: routine_name : ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? ) ;
	public final PLSQLPrinter.routine_name_return routine_name() throws RecognitionException {
		PLSQLPrinter.routine_name_return retval = new PLSQLPrinter.routine_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1676:5: ( ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? ) )
			// PLSQLPrinter.g:1676:10: ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? )
			{
			match(input,ROUTINE_NAME,FOLLOW_ROUTINE_NAME_in_routine_name13955); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1676:25: ( char_set_name )?
			int alt489=2;
			int LA489_0 = input.LA(1);
			if ( (LA489_0==CHAR_SET_NAME) ) {
				alt489=1;
			}
			switch (alt489) {
				case 1 :
					// PLSQLPrinter.g:1676:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_routine_name13957);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1676:40: ( ID )+
			int cnt490=0;
			loop490:
			while (true) {
				int alt490=2;
				int LA490_0 = input.LA(1);
				if ( (LA490_0==ID) ) {
					alt490=1;
				}

				switch (alt490) {
				case 1 :
					// PLSQLPrinter.g:1676:40: ID
					{
					match(input,ID,FOLLOW_ID_in_routine_name13960); 
					}
					break;

				default :
					if ( cnt490 >= 1 ) break loop490;
					EarlyExitException eee = new EarlyExitException(490, input);
					throw eee;
				}
				cnt490++;
			}

			// PLSQLPrinter.g:1676:44: ( link_name )?
			int alt491=2;
			int LA491_0 = input.LA(1);
			if ( (LA491_0==LINK_NAME) ) {
				alt491=1;
			}
			switch (alt491) {
				case 1 :
					// PLSQLPrinter.g:1676:44: link_name
					{
					pushFollow(FOLLOW_link_name_in_routine_name13963);
					link_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "routine_name"


	public static class package_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "package_name"
	// PLSQLPrinter.g:1679:1: package_name : ^( PACKAGE_NAME ( char_set_name )? ( ID )+ ) ;
	public final PLSQLPrinter.package_name_return package_name() throws RecognitionException {
		PLSQLPrinter.package_name_return retval = new PLSQLPrinter.package_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1680:5: ( ^( PACKAGE_NAME ( char_set_name )? ( ID )+ ) )
			// PLSQLPrinter.g:1680:10: ^( PACKAGE_NAME ( char_set_name )? ( ID )+ )
			{
			match(input,PACKAGE_NAME,FOLLOW_PACKAGE_NAME_in_package_name13986); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1680:25: ( char_set_name )?
			int alt492=2;
			int LA492_0 = input.LA(1);
			if ( (LA492_0==CHAR_SET_NAME) ) {
				alt492=1;
			}
			switch (alt492) {
				case 1 :
					// PLSQLPrinter.g:1680:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_package_name13988);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1680:40: ( ID )+
			int cnt493=0;
			loop493:
			while (true) {
				int alt493=2;
				int LA493_0 = input.LA(1);
				if ( (LA493_0==ID) ) {
					alt493=1;
				}

				switch (alt493) {
				case 1 :
					// PLSQLPrinter.g:1680:40: ID
					{
					match(input,ID,FOLLOW_ID_in_package_name13991); 
					}
					break;

				default :
					if ( cnt493 >= 1 ) break loop493;
					EarlyExitException eee = new EarlyExitException(493, input);
					throw eee;
				}
				cnt493++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_name"


	public static class implementation_type_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "implementation_type_name"
	// PLSQLPrinter.g:1683:1: implementation_type_name : ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? ( ID )+ ) ;
	public final PLSQLPrinter.implementation_type_name_return implementation_type_name() throws RecognitionException {
		PLSQLPrinter.implementation_type_name_return retval = new PLSQLPrinter.implementation_type_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1684:5: ( ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? ( ID )+ ) )
			// PLSQLPrinter.g:1684:10: ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? ( ID )+ )
			{
			match(input,IMPLEMENTATION_TYPE_NAME,FOLLOW_IMPLEMENTATION_TYPE_NAME_in_implementation_type_name14014); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1684:37: ( char_set_name )?
			int alt494=2;
			int LA494_0 = input.LA(1);
			if ( (LA494_0==CHAR_SET_NAME) ) {
				alt494=1;
			}
			switch (alt494) {
				case 1 :
					// PLSQLPrinter.g:1684:37: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_implementation_type_name14016);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1684:52: ( ID )+
			int cnt495=0;
			loop495:
			while (true) {
				int alt495=2;
				int LA495_0 = input.LA(1);
				if ( (LA495_0==ID) ) {
					alt495=1;
				}

				switch (alt495) {
				case 1 :
					// PLSQLPrinter.g:1684:52: ID
					{
					match(input,ID,FOLLOW_ID_in_implementation_type_name14019); 
					}
					break;

				default :
					if ( cnt495 >= 1 ) break loop495;
					EarlyExitException eee = new EarlyExitException(495, input);
					throw eee;
				}
				cnt495++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "implementation_type_name"


	public static class parameter_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parameter_name"
	// PLSQLPrinter.g:1687:1: parameter_name : ^( PARAMETER_NAME ( char_set_name )? ID ) ;
	public final PLSQLPrinter.parameter_name_return parameter_name() throws RecognitionException {
		PLSQLPrinter.parameter_name_return retval = new PLSQLPrinter.parameter_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1688:5: ( ^( PARAMETER_NAME ( char_set_name )? ID ) )
			// PLSQLPrinter.g:1688:10: ^( PARAMETER_NAME ( char_set_name )? ID )
			{
			match(input,PARAMETER_NAME,FOLLOW_PARAMETER_NAME_in_parameter_name14042); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1688:27: ( char_set_name )?
			int alt496=2;
			int LA496_0 = input.LA(1);
			if ( (LA496_0==CHAR_SET_NAME) ) {
				alt496=1;
			}
			switch (alt496) {
				case 1 :
					// PLSQLPrinter.g:1688:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_parameter_name14044);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_parameter_name14047); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter_name"


	public static class reference_model_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "reference_model_name"
	// PLSQLPrinter.g:1691:1: reference_model_name : ^( REFERENCE_MODEL_NAME ( char_set_name )? ID ) ;
	public final PLSQLPrinter.reference_model_name_return reference_model_name() throws RecognitionException {
		PLSQLPrinter.reference_model_name_return retval = new PLSQLPrinter.reference_model_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1692:5: ( ^( REFERENCE_MODEL_NAME ( char_set_name )? ID ) )
			// PLSQLPrinter.g:1692:10: ^( REFERENCE_MODEL_NAME ( char_set_name )? ID )
			{
			match(input,REFERENCE_MODEL_NAME,FOLLOW_REFERENCE_MODEL_NAME_in_reference_model_name14069); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1692:33: ( char_set_name )?
			int alt497=2;
			int LA497_0 = input.LA(1);
			if ( (LA497_0==CHAR_SET_NAME) ) {
				alt497=1;
			}
			switch (alt497) {
				case 1 :
					// PLSQLPrinter.g:1692:33: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_reference_model_name14071);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_reference_model_name14074); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reference_model_name"


	public static class main_model_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "main_model_name"
	// PLSQLPrinter.g:1695:1: main_model_name : ^( MAIN_MODEL_NAME ( char_set_name )? ID ) ;
	public final PLSQLPrinter.main_model_name_return main_model_name() throws RecognitionException {
		PLSQLPrinter.main_model_name_return retval = new PLSQLPrinter.main_model_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1696:5: ( ^( MAIN_MODEL_NAME ( char_set_name )? ID ) )
			// PLSQLPrinter.g:1696:10: ^( MAIN_MODEL_NAME ( char_set_name )? ID )
			{
			match(input,MAIN_MODEL_NAME,FOLLOW_MAIN_MODEL_NAME_in_main_model_name14096); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1696:28: ( char_set_name )?
			int alt498=2;
			int LA498_0 = input.LA(1);
			if ( (LA498_0==CHAR_SET_NAME) ) {
				alt498=1;
			}
			switch (alt498) {
				case 1 :
					// PLSQLPrinter.g:1696:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_main_model_name14098);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_main_model_name14101); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "main_model_name"


	public static class query_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_name"
	// PLSQLPrinter.g:1699:1: query_name : ^( QUERY_NAME ( char_set_name )? ID ) ;
	public final PLSQLPrinter.query_name_return query_name() throws RecognitionException {
		PLSQLPrinter.query_name_return retval = new PLSQLPrinter.query_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1700:5: ( ^( QUERY_NAME ( char_set_name )? ID ) )
			// PLSQLPrinter.g:1700:10: ^( QUERY_NAME ( char_set_name )? ID )
			{
			match(input,QUERY_NAME,FOLLOW_QUERY_NAME_in_query_name14123); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1700:23: ( char_set_name )?
			int alt499=2;
			int LA499_0 = input.LA(1);
			if ( (LA499_0==CHAR_SET_NAME) ) {
				alt499=1;
			}
			switch (alt499) {
				case 1 :
					// PLSQLPrinter.g:1700:23: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_query_name14125);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_query_name14128); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_name"


	public static class constraint_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constraint_name"
	// PLSQLPrinter.g:1703:1: constraint_name : ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? ) ;
	public final PLSQLPrinter.constraint_name_return constraint_name() throws RecognitionException {
		PLSQLPrinter.constraint_name_return retval = new PLSQLPrinter.constraint_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1704:5: ( ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? ) )
			// PLSQLPrinter.g:1704:10: ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? )
			{
			match(input,CONSTRAINT_NAME,FOLLOW_CONSTRAINT_NAME_in_constraint_name14150); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1704:28: ( char_set_name )?
			int alt500=2;
			int LA500_0 = input.LA(1);
			if ( (LA500_0==CHAR_SET_NAME) ) {
				alt500=1;
			}
			switch (alt500) {
				case 1 :
					// PLSQLPrinter.g:1704:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_constraint_name14152);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1704:43: ( ID )+
			int cnt501=0;
			loop501:
			while (true) {
				int alt501=2;
				int LA501_0 = input.LA(1);
				if ( (LA501_0==ID) ) {
					alt501=1;
				}

				switch (alt501) {
				case 1 :
					// PLSQLPrinter.g:1704:43: ID
					{
					match(input,ID,FOLLOW_ID_in_constraint_name14155); 
					}
					break;

				default :
					if ( cnt501 >= 1 ) break loop501;
					EarlyExitException eee = new EarlyExitException(501, input);
					throw eee;
				}
				cnt501++;
			}

			// PLSQLPrinter.g:1704:47: ( link_name )?
			int alt502=2;
			int LA502_0 = input.LA(1);
			if ( (LA502_0==LINK_NAME) ) {
				alt502=1;
			}
			switch (alt502) {
				case 1 :
					// PLSQLPrinter.g:1704:47: link_name
					{
					pushFollow(FOLLOW_link_name_in_constraint_name14158);
					link_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constraint_name"


	public static class label_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "label_name"
	// PLSQLPrinter.g:1707:1: label_name : ^( LABEL_NAME ID ) ;
	public final PLSQLPrinter.label_name_return label_name() throws RecognitionException {
		PLSQLPrinter.label_name_return retval = new PLSQLPrinter.label_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1708:5: ( ^( LABEL_NAME ID ) )
			// PLSQLPrinter.g:1708:10: ^( LABEL_NAME ID )
			{
			match(input,LABEL_NAME,FOLLOW_LABEL_NAME_in_label_name14181); 
			match(input, Token.DOWN, null); 
			match(input,ID,FOLLOW_ID_in_label_name14183); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "label_name"


	public static class type_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_name"
	// PLSQLPrinter.g:1711:1: type_name : ^( TYPE_NAME ( ID )+ ) ;
	public final PLSQLPrinter.type_name_return type_name() throws RecognitionException {
		PLSQLPrinter.type_name_return retval = new PLSQLPrinter.type_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1712:5: ( ^( TYPE_NAME ( ID )+ ) )
			// PLSQLPrinter.g:1712:10: ^( TYPE_NAME ( ID )+ )
			{
			match(input,TYPE_NAME,FOLLOW_TYPE_NAME_in_type_name14205); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1712:22: ( ID )+
			int cnt503=0;
			loop503:
			while (true) {
				int alt503=2;
				int LA503_0 = input.LA(1);
				if ( (LA503_0==ID) ) {
					alt503=1;
				}

				switch (alt503) {
				case 1 :
					// PLSQLPrinter.g:1712:22: ID
					{
					match(input,ID,FOLLOW_ID_in_type_name14207); 
					}
					break;

				default :
					if ( cnt503 >= 1 ) break loop503;
					EarlyExitException eee = new EarlyExitException(503, input);
					throw eee;
				}
				cnt503++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_name"


	public static class sequence_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sequence_name"
	// PLSQLPrinter.g:1715:1: sequence_name : ^( SEQUENCE_NAME ( ID )+ ) ;
	public final PLSQLPrinter.sequence_name_return sequence_name() throws RecognitionException {
		PLSQLPrinter.sequence_name_return retval = new PLSQLPrinter.sequence_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1716:5: ( ^( SEQUENCE_NAME ( ID )+ ) )
			// PLSQLPrinter.g:1716:10: ^( SEQUENCE_NAME ( ID )+ )
			{
			match(input,SEQUENCE_NAME,FOLLOW_SEQUENCE_NAME_in_sequence_name14230); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1716:26: ( ID )+
			int cnt504=0;
			loop504:
			while (true) {
				int alt504=2;
				int LA504_0 = input.LA(1);
				if ( (LA504_0==ID) ) {
					alt504=1;
				}

				switch (alt504) {
				case 1 :
					// PLSQLPrinter.g:1716:26: ID
					{
					match(input,ID,FOLLOW_ID_in_sequence_name14232); 
					}
					break;

				default :
					if ( cnt504 >= 1 ) break loop504;
					EarlyExitException eee = new EarlyExitException(504, input);
					throw eee;
				}
				cnt504++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sequence_name"


	public static class exception_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_name"
	// PLSQLPrinter.g:1719:1: exception_name : ^( EXCEPTION_NAME ( char_set_name )? ( ID )+ ) ;
	public final PLSQLPrinter.exception_name_return exception_name() throws RecognitionException {
		PLSQLPrinter.exception_name_return retval = new PLSQLPrinter.exception_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1720:5: ( ^( EXCEPTION_NAME ( char_set_name )? ( ID )+ ) )
			// PLSQLPrinter.g:1720:10: ^( EXCEPTION_NAME ( char_set_name )? ( ID )+ )
			{
			match(input,EXCEPTION_NAME,FOLLOW_EXCEPTION_NAME_in_exception_name14255); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1720:27: ( char_set_name )?
			int alt505=2;
			int LA505_0 = input.LA(1);
			if ( (LA505_0==CHAR_SET_NAME) ) {
				alt505=1;
			}
			switch (alt505) {
				case 1 :
					// PLSQLPrinter.g:1720:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_exception_name14257);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1720:42: ( ID )+
			int cnt506=0;
			loop506:
			while (true) {
				int alt506=2;
				int LA506_0 = input.LA(1);
				if ( (LA506_0==ID) ) {
					alt506=1;
				}

				switch (alt506) {
				case 1 :
					// PLSQLPrinter.g:1720:42: ID
					{
					match(input,ID,FOLLOW_ID_in_exception_name14260); 
					}
					break;

				default :
					if ( cnt506 >= 1 ) break loop506;
					EarlyExitException eee = new EarlyExitException(506, input);
					throw eee;
				}
				cnt506++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_name"


	public static class function_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "function_name"
	// PLSQLPrinter.g:1723:1: function_name : ^( FUNCTION_NAME ( char_set_name )? ( ID )+ ) ;
	public final PLSQLPrinter.function_name_return function_name() throws RecognitionException {
		PLSQLPrinter.function_name_return retval = new PLSQLPrinter.function_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1724:5: ( ^( FUNCTION_NAME ( char_set_name )? ( ID )+ ) )
			// PLSQLPrinter.g:1724:10: ^( FUNCTION_NAME ( char_set_name )? ( ID )+ )
			{
			match(input,FUNCTION_NAME,FOLLOW_FUNCTION_NAME_in_function_name14283); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1724:26: ( char_set_name )?
			int alt507=2;
			int LA507_0 = input.LA(1);
			if ( (LA507_0==CHAR_SET_NAME) ) {
				alt507=1;
			}
			switch (alt507) {
				case 1 :
					// PLSQLPrinter.g:1724:26: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_function_name14285);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1724:41: ( ID )+
			int cnt508=0;
			loop508:
			while (true) {
				int alt508=2;
				int LA508_0 = input.LA(1);
				if ( (LA508_0==ID) ) {
					alt508=1;
				}

				switch (alt508) {
				case 1 :
					// PLSQLPrinter.g:1724:41: ID
					{
					match(input,ID,FOLLOW_ID_in_function_name14288); 
					}
					break;

				default :
					if ( cnt508 >= 1 ) break loop508;
					EarlyExitException eee = new EarlyExitException(508, input);
					throw eee;
				}
				cnt508++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_name"


	public static class procedure_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "procedure_name"
	// PLSQLPrinter.g:1727:1: procedure_name : ^( PROCEDURE_NAME ( char_set_name )? ( ID )+ ) ;
	public final PLSQLPrinter.procedure_name_return procedure_name() throws RecognitionException {
		PLSQLPrinter.procedure_name_return retval = new PLSQLPrinter.procedure_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1728:5: ( ^( PROCEDURE_NAME ( char_set_name )? ( ID )+ ) )
			// PLSQLPrinter.g:1728:10: ^( PROCEDURE_NAME ( char_set_name )? ( ID )+ )
			{
			match(input,PROCEDURE_NAME,FOLLOW_PROCEDURE_NAME_in_procedure_name14311); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1728:27: ( char_set_name )?
			int alt509=2;
			int LA509_0 = input.LA(1);
			if ( (LA509_0==CHAR_SET_NAME) ) {
				alt509=1;
			}
			switch (alt509) {
				case 1 :
					// PLSQLPrinter.g:1728:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_procedure_name14313);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1728:42: ( ID )+
			int cnt510=0;
			loop510:
			while (true) {
				int alt510=2;
				int LA510_0 = input.LA(1);
				if ( (LA510_0==ID) ) {
					alt510=1;
				}

				switch (alt510) {
				case 1 :
					// PLSQLPrinter.g:1728:42: ID
					{
					match(input,ID,FOLLOW_ID_in_procedure_name14316); 
					}
					break;

				default :
					if ( cnt510 >= 1 ) break loop510;
					EarlyExitException eee = new EarlyExitException(510, input);
					throw eee;
				}
				cnt510++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "procedure_name"


	public static class trigger_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_name"
	// PLSQLPrinter.g:1731:1: trigger_name : ^( TRIGGER_NAME ( char_set_name )? ( ID )+ ) ;
	public final PLSQLPrinter.trigger_name_return trigger_name() throws RecognitionException {
		PLSQLPrinter.trigger_name_return retval = new PLSQLPrinter.trigger_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1732:5: ( ^( TRIGGER_NAME ( char_set_name )? ( ID )+ ) )
			// PLSQLPrinter.g:1732:10: ^( TRIGGER_NAME ( char_set_name )? ( ID )+ )
			{
			match(input,TRIGGER_NAME,FOLLOW_TRIGGER_NAME_in_trigger_name14339); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1732:25: ( char_set_name )?
			int alt511=2;
			int LA511_0 = input.LA(1);
			if ( (LA511_0==CHAR_SET_NAME) ) {
				alt511=1;
			}
			switch (alt511) {
				case 1 :
					// PLSQLPrinter.g:1732:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_trigger_name14341);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1732:40: ( ID )+
			int cnt512=0;
			loop512:
			while (true) {
				int alt512=2;
				int LA512_0 = input.LA(1);
				if ( (LA512_0==ID) ) {
					alt512=1;
				}

				switch (alt512) {
				case 1 :
					// PLSQLPrinter.g:1732:40: ID
					{
					match(input,ID,FOLLOW_ID_in_trigger_name14344); 
					}
					break;

				default :
					if ( cnt512 >= 1 ) break loop512;
					EarlyExitException eee = new EarlyExitException(512, input);
					throw eee;
				}
				cnt512++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_name"


	public static class variable_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "variable_name"
	// PLSQLPrinter.g:1735:1: variable_name : ( ^( HOSTED_VARIABLE_NAME ( char_set_name )? ( ID )+ ) | ^( VARIABLE_NAME ( char_set_name )? ( ID )+ ) );
	public final PLSQLPrinter.variable_name_return variable_name() throws RecognitionException {
		PLSQLPrinter.variable_name_return retval = new PLSQLPrinter.variable_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1736:5: ( ^( HOSTED_VARIABLE_NAME ( char_set_name )? ( ID )+ ) | ^( VARIABLE_NAME ( char_set_name )? ( ID )+ ) )
			int alt517=2;
			int LA517_0 = input.LA(1);
			if ( (LA517_0==HOSTED_VARIABLE_NAME) ) {
				alt517=1;
			}
			else if ( (LA517_0==VARIABLE_NAME) ) {
				alt517=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 517, 0, input);
				throw nvae;
			}

			switch (alt517) {
				case 1 :
					// PLSQLPrinter.g:1736:10: ^( HOSTED_VARIABLE_NAME ( char_set_name )? ( ID )+ )
					{
					match(input,HOSTED_VARIABLE_NAME,FOLLOW_HOSTED_VARIABLE_NAME_in_variable_name14367); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1736:33: ( char_set_name )?
					int alt513=2;
					int LA513_0 = input.LA(1);
					if ( (LA513_0==CHAR_SET_NAME) ) {
						alt513=1;
					}
					switch (alt513) {
						case 1 :
							// PLSQLPrinter.g:1736:33: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_variable_name14369);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1736:48: ( ID )+
					int cnt514=0;
					loop514:
					while (true) {
						int alt514=2;
						int LA514_0 = input.LA(1);
						if ( (LA514_0==ID) ) {
							alt514=1;
						}

						switch (alt514) {
						case 1 :
							// PLSQLPrinter.g:1736:48: ID
							{
							match(input,ID,FOLLOW_ID_in_variable_name14372); 
							}
							break;

						default :
							if ( cnt514 >= 1 ) break loop514;
							EarlyExitException eee = new EarlyExitException(514, input);
							throw eee;
						}
						cnt514++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1737:10: ^( VARIABLE_NAME ( char_set_name )? ( ID )+ )
					{
					match(input,VARIABLE_NAME,FOLLOW_VARIABLE_NAME_in_variable_name14386); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1737:26: ( char_set_name )?
					int alt515=2;
					int LA515_0 = input.LA(1);
					if ( (LA515_0==CHAR_SET_NAME) ) {
						alt515=1;
					}
					switch (alt515) {
						case 1 :
							// PLSQLPrinter.g:1737:26: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_variable_name14388);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1737:41: ( ID )+
					int cnt516=0;
					loop516:
					while (true) {
						int alt516=2;
						int LA516_0 = input.LA(1);
						if ( (LA516_0==ID) ) {
							alt516=1;
						}

						switch (alt516) {
						case 1 :
							// PLSQLPrinter.g:1737:41: ID
							{
							match(input,ID,FOLLOW_ID_in_variable_name14391); 
							}
							break;

						default :
							if ( cnt516 >= 1 ) break loop516;
							EarlyExitException eee = new EarlyExitException(516, input);
							throw eee;
						}
						cnt516++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "variable_name"


	public static class index_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "index_name"
	// PLSQLPrinter.g:1740:1: index_name : ^( INDEX_NAME ( char_set_name )? ID ) ;
	public final PLSQLPrinter.index_name_return index_name() throws RecognitionException {
		PLSQLPrinter.index_name_return retval = new PLSQLPrinter.index_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1741:5: ( ^( INDEX_NAME ( char_set_name )? ID ) )
			// PLSQLPrinter.g:1741:10: ^( INDEX_NAME ( char_set_name )? ID )
			{
			match(input,INDEX_NAME,FOLLOW_INDEX_NAME_in_index_name14414); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1741:23: ( char_set_name )?
			int alt518=2;
			int LA518_0 = input.LA(1);
			if ( (LA518_0==CHAR_SET_NAME) ) {
				alt518=1;
			}
			switch (alt518) {
				case 1 :
					// PLSQLPrinter.g:1741:23: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_index_name14416);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_index_name14419); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_name"


	public static class cursor_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_name"
	// PLSQLPrinter.g:1744:1: cursor_name : ^( CURSOR_NAME ( char_set_name )? ID ) ;
	public final PLSQLPrinter.cursor_name_return cursor_name() throws RecognitionException {
		PLSQLPrinter.cursor_name_return retval = new PLSQLPrinter.cursor_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1745:5: ( ^( CURSOR_NAME ( char_set_name )? ID ) )
			// PLSQLPrinter.g:1745:10: ^( CURSOR_NAME ( char_set_name )? ID )
			{
			match(input,CURSOR_NAME,FOLLOW_CURSOR_NAME_in_cursor_name14441); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1745:24: ( char_set_name )?
			int alt519=2;
			int LA519_0 = input.LA(1);
			if ( (LA519_0==CHAR_SET_NAME) ) {
				alt519=1;
			}
			switch (alt519) {
				case 1 :
					// PLSQLPrinter.g:1745:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_cursor_name14443);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_cursor_name14446); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_name"


	public static class record_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_name"
	// PLSQLPrinter.g:1748:1: record_name : ^( RECORD_NAME ( char_set_name )? ID ) ;
	public final PLSQLPrinter.record_name_return record_name() throws RecognitionException {
		PLSQLPrinter.record_name_return retval = new PLSQLPrinter.record_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1749:5: ( ^( RECORD_NAME ( char_set_name )? ID ) )
			// PLSQLPrinter.g:1749:10: ^( RECORD_NAME ( char_set_name )? ID )
			{
			match(input,RECORD_NAME,FOLLOW_RECORD_NAME_in_record_name14468); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1749:24: ( char_set_name )?
			int alt520=2;
			int LA520_0 = input.LA(1);
			if ( (LA520_0==CHAR_SET_NAME) ) {
				alt520=1;
			}
			switch (alt520) {
				case 1 :
					// PLSQLPrinter.g:1749:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_record_name14470);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_record_name14473); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_name"


	public static class collection_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "collection_name"
	// PLSQLPrinter.g:1752:1: collection_name : ^( COLLECTION_NAME ( char_set_name )? ( ID )+ ) ;
	public final PLSQLPrinter.collection_name_return collection_name() throws RecognitionException {
		PLSQLPrinter.collection_name_return retval = new PLSQLPrinter.collection_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1753:5: ( ^( COLLECTION_NAME ( char_set_name )? ( ID )+ ) )
			// PLSQLPrinter.g:1753:10: ^( COLLECTION_NAME ( char_set_name )? ( ID )+ )
			{
			match(input,COLLECTION_NAME,FOLLOW_COLLECTION_NAME_in_collection_name14495); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1753:28: ( char_set_name )?
			int alt521=2;
			int LA521_0 = input.LA(1);
			if ( (LA521_0==CHAR_SET_NAME) ) {
				alt521=1;
			}
			switch (alt521) {
				case 1 :
					// PLSQLPrinter.g:1753:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_collection_name14497);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1753:43: ( ID )+
			int cnt522=0;
			loop522:
			while (true) {
				int alt522=2;
				int LA522_0 = input.LA(1);
				if ( (LA522_0==ID) ) {
					alt522=1;
				}

				switch (alt522) {
				case 1 :
					// PLSQLPrinter.g:1753:43: ID
					{
					match(input,ID,FOLLOW_ID_in_collection_name14500); 
					}
					break;

				default :
					if ( cnt522 >= 1 ) break loop522;
					EarlyExitException eee = new EarlyExitException(522, input);
					throw eee;
				}
				cnt522++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "collection_name"


	public static class link_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "link_name"
	// PLSQLPrinter.g:1756:1: link_name : ^( LINK_NAME ( char_set_name )? ID ) ;
	public final PLSQLPrinter.link_name_return link_name() throws RecognitionException {
		PLSQLPrinter.link_name_return retval = new PLSQLPrinter.link_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1757:5: ( ^( LINK_NAME ( char_set_name )? ID ) )
			// PLSQLPrinter.g:1757:10: ^( LINK_NAME ( char_set_name )? ID )
			{
			match(input,LINK_NAME,FOLLOW_LINK_NAME_in_link_name14523); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1757:22: ( char_set_name )?
			int alt523=2;
			int LA523_0 = input.LA(1);
			if ( (LA523_0==CHAR_SET_NAME) ) {
				alt523=1;
			}
			switch (alt523) {
				case 1 :
					// PLSQLPrinter.g:1757:22: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_link_name14525);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_link_name14528); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "link_name"


	public static class column_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "column_name"
	// PLSQLPrinter.g:1760:1: column_name : ^( COLUMN_NAME ( char_set_name )? ( ID )+ ) ;
	public final PLSQLPrinter.column_name_return column_name() throws RecognitionException {
		PLSQLPrinter.column_name_return retval = new PLSQLPrinter.column_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1761:5: ( ^( COLUMN_NAME ( char_set_name )? ( ID )+ ) )
			// PLSQLPrinter.g:1761:10: ^( COLUMN_NAME ( char_set_name )? ( ID )+ )
			{
			match(input,COLUMN_NAME,FOLLOW_COLUMN_NAME_in_column_name14550); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1761:24: ( char_set_name )?
			int alt524=2;
			int LA524_0 = input.LA(1);
			if ( (LA524_0==CHAR_SET_NAME) ) {
				alt524=1;
			}
			switch (alt524) {
				case 1 :
					// PLSQLPrinter.g:1761:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_column_name14552);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1761:39: ( ID )+
			int cnt525=0;
			loop525:
			while (true) {
				int alt525=2;
				int LA525_0 = input.LA(1);
				if ( (LA525_0==ID) ) {
					alt525=1;
				}

				switch (alt525) {
				case 1 :
					// PLSQLPrinter.g:1761:39: ID
					{
					match(input,ID,FOLLOW_ID_in_column_name14555); 
					}
					break;

				default :
					if ( cnt525 >= 1 ) break loop525;
					EarlyExitException eee = new EarlyExitException(525, input);
					throw eee;
				}
				cnt525++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_name"


	public static class tableview_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "tableview_name"
	// PLSQLPrinter.g:1764:1: tableview_name : ^( TABLEVIEW_NAME ( char_set_name )? ( ID )+ ( link_name )? ( partition_extension_clause )? ) ;
	public final PLSQLPrinter.tableview_name_return tableview_name() throws RecognitionException {
		PLSQLPrinter.tableview_name_return retval = new PLSQLPrinter.tableview_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1765:5: ( ^( TABLEVIEW_NAME ( char_set_name )? ( ID )+ ( link_name )? ( partition_extension_clause )? ) )
			// PLSQLPrinter.g:1765:10: ^( TABLEVIEW_NAME ( char_set_name )? ( ID )+ ( link_name )? ( partition_extension_clause )? )
			{
			match(input,TABLEVIEW_NAME,FOLLOW_TABLEVIEW_NAME_in_tableview_name14578); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1765:27: ( char_set_name )?
			int alt526=2;
			int LA526_0 = input.LA(1);
			if ( (LA526_0==CHAR_SET_NAME) ) {
				alt526=1;
			}
			switch (alt526) {
				case 1 :
					// PLSQLPrinter.g:1765:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_tableview_name14580);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1765:42: ( ID )+
			int cnt527=0;
			loop527:
			while (true) {
				int alt527=2;
				int LA527_0 = input.LA(1);
				if ( (LA527_0==ID) ) {
					alt527=1;
				}

				switch (alt527) {
				case 1 :
					// PLSQLPrinter.g:1765:42: ID
					{
					match(input,ID,FOLLOW_ID_in_tableview_name14583); 
					}
					break;

				default :
					if ( cnt527 >= 1 ) break loop527;
					EarlyExitException eee = new EarlyExitException(527, input);
					throw eee;
				}
				cnt527++;
			}

			// PLSQLPrinter.g:1765:46: ( link_name )?
			int alt528=2;
			int LA528_0 = input.LA(1);
			if ( (LA528_0==LINK_NAME) ) {
				alt528=1;
			}
			switch (alt528) {
				case 1 :
					// PLSQLPrinter.g:1765:46: link_name
					{
					pushFollow(FOLLOW_link_name_in_tableview_name14586);
					link_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1765:57: ( partition_extension_clause )?
			int alt529=2;
			int LA529_0 = input.LA(1);
			if ( (LA529_0==PARTITION_VK||LA529_0==SUBPARTITION_VK) ) {
				alt529=1;
			}
			switch (alt529) {
				case 1 :
					// PLSQLPrinter.g:1765:57: partition_extension_clause
					{
					pushFollow(FOLLOW_partition_extension_clause_in_tableview_name14589);
					partition_extension_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableview_name"


	public static class char_set_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "char_set_name"
	// PLSQLPrinter.g:1768:1: char_set_name : ^( CHAR_SET_NAME ( ID )+ ) ;
	public final PLSQLPrinter.char_set_name_return char_set_name() throws RecognitionException {
		PLSQLPrinter.char_set_name_return retval = new PLSQLPrinter.char_set_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1769:5: ( ^( CHAR_SET_NAME ( ID )+ ) )
			// PLSQLPrinter.g:1769:10: ^( CHAR_SET_NAME ( ID )+ )
			{
			match(input,CHAR_SET_NAME,FOLLOW_CHAR_SET_NAME_in_char_set_name14612); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1769:26: ( ID )+
			int cnt530=0;
			loop530:
			while (true) {
				int alt530=2;
				int LA530_0 = input.LA(1);
				if ( (LA530_0==ID) ) {
					alt530=1;
				}

				switch (alt530) {
				case 1 :
					// PLSQLPrinter.g:1769:26: ID
					{
					match(input,ID,FOLLOW_ID_in_char_set_name14614); 
					}
					break;

				default :
					if ( cnt530 >= 1 ) break loop530;
					EarlyExitException eee = new EarlyExitException(530, input);
					throw eee;
				}
				cnt530++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "char_set_name"


	public static class function_argument_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "function_argument"
	// PLSQLPrinter.g:1776:1: function_argument : ^( ARGUMENTS ( argument )* ) ;
	public final PLSQLPrinter.function_argument_return function_argument() throws RecognitionException {
		PLSQLPrinter.function_argument_return retval = new PLSQLPrinter.function_argument_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1777:5: ( ^( ARGUMENTS ( argument )* ) )
			// PLSQLPrinter.g:1777:10: ^( ARGUMENTS ( argument )* )
			{
			match(input,ARGUMENTS,FOLLOW_ARGUMENTS_in_function_argument14641); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1777:22: ( argument )*
				loop531:
				while (true) {
					int alt531=2;
					int LA531_0 = input.LA(1);
					if ( (LA531_0==ARGUMENT) ) {
						alt531=1;
					}

					switch (alt531) {
					case 1 :
						// PLSQLPrinter.g:1777:22: argument
						{
						pushFollow(FOLLOW_argument_in_function_argument14643);
						argument();
						state._fsp--;

						}
						break;

					default :
						break loop531;
					}
				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_argument"


	public static class argument_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "argument"
	// PLSQLPrinter.g:1780:1: argument : ^( ARGUMENT expression ( parameter_name )? ) ;
	public final PLSQLPrinter.argument_return argument() throws RecognitionException {
		PLSQLPrinter.argument_return retval = new PLSQLPrinter.argument_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1781:5: ( ^( ARGUMENT expression ( parameter_name )? ) )
			// PLSQLPrinter.g:1781:10: ^( ARGUMENT expression ( parameter_name )? )
			{
			match(input,ARGUMENT,FOLLOW_ARGUMENT_in_argument14666); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_argument14668);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1781:32: ( parameter_name )?
			int alt532=2;
			int LA532_0 = input.LA(1);
			if ( (LA532_0==PARAMETER_NAME) ) {
				alt532=1;
			}
			switch (alt532) {
				case 1 :
					// PLSQLPrinter.g:1781:32: parameter_name
					{
					pushFollow(FOLLOW_parameter_name_in_argument14670);
					parameter_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "argument"


	public static class type_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_spec"
	// PLSQLPrinter.g:1784:1: type_spec : ( ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? ) | ^( NATIVE_DATATYPE native_datatype_element ( type_precision )? ( TIME_VK ( LOCAL_VK )? )? ) | ^( INTERVAL_DATATYPE ( YEAR_VK | DAY_VK ) ( MONTH_VK | SECOND_VK ) ( expression )* ) );
	public final PLSQLPrinter.type_spec_return type_spec() throws RecognitionException {
		PLSQLPrinter.type_spec_return retval = new PLSQLPrinter.type_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1785:5: ( ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? ) | ^( NATIVE_DATATYPE native_datatype_element ( type_precision )? ( TIME_VK ( LOCAL_VK )? )? ) | ^( INTERVAL_DATATYPE ( YEAR_VK | DAY_VK ) ( MONTH_VK | SECOND_VK ) ( expression )* ) )
			int alt539=3;
			switch ( input.LA(1) ) {
			case CUSTOM_TYPE:
				{
				alt539=1;
				}
				break;
			case NATIVE_DATATYPE:
				{
				alt539=2;
				}
				break;
			case INTERVAL_DATATYPE:
				{
				alt539=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 539, 0, input);
				throw nvae;
			}
			switch (alt539) {
				case 1 :
					// PLSQLPrinter.g:1785:11: ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? )
					{
					match(input,CUSTOM_TYPE,FOLLOW_CUSTOM_TYPE_in_type_spec14694); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_type_name_in_type_spec14696);
					type_name();
					state._fsp--;

					// PLSQLPrinter.g:1785:35: ( REF_VK )?
					int alt533=2;
					int LA533_0 = input.LA(1);
					if ( (LA533_0==REF_VK) ) {
						alt533=1;
					}
					switch (alt533) {
						case 1 :
							// PLSQLPrinter.g:1785:35: REF_VK
							{
							match(input,REF_VK,FOLLOW_REF_VK_in_type_spec14698); 
							}
							break;

					}

					// PLSQLPrinter.g:1785:43: ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )?
					int alt534=2;
					int LA534_0 = input.LA(1);
					if ( ((LA534_0 >= PERCENT_ROWTYPE_VK && LA534_0 <= PERCENT_TYPE_VK)) ) {
						alt534=1;
					}
					switch (alt534) {
						case 1 :
							// PLSQLPrinter.g:
							{
							if ( (input.LA(1) >= PERCENT_ROWTYPE_VK && input.LA(1) <= PERCENT_TYPE_VK) ) {
								input.consume();
								state.errorRecovery=false;
							}
							else {
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1786:10: ^( NATIVE_DATATYPE native_datatype_element ( type_precision )? ( TIME_VK ( LOCAL_VK )? )? )
					{
					match(input,NATIVE_DATATYPE,FOLLOW_NATIVE_DATATYPE_in_type_spec14719); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_native_datatype_element_in_type_spec14721);
					native_datatype_element();
					state._fsp--;

					// PLSQLPrinter.g:1786:52: ( type_precision )?
					int alt535=2;
					int LA535_0 = input.LA(1);
					if ( (LA535_0==PRECISION) ) {
						alt535=1;
					}
					switch (alt535) {
						case 1 :
							// PLSQLPrinter.g:1786:52: type_precision
							{
							pushFollow(FOLLOW_type_precision_in_type_spec14723);
							type_precision();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1786:68: ( TIME_VK ( LOCAL_VK )? )?
					int alt537=2;
					int LA537_0 = input.LA(1);
					if ( (LA537_0==TIME_VK) ) {
						alt537=1;
					}
					switch (alt537) {
						case 1 :
							// PLSQLPrinter.g:1786:69: TIME_VK ( LOCAL_VK )?
							{
							match(input,TIME_VK,FOLLOW_TIME_VK_in_type_spec14727); 
							// PLSQLPrinter.g:1786:77: ( LOCAL_VK )?
							int alt536=2;
							int LA536_0 = input.LA(1);
							if ( (LA536_0==LOCAL_VK) ) {
								alt536=1;
							}
							switch (alt536) {
								case 1 :
									// PLSQLPrinter.g:1786:77: LOCAL_VK
									{
									match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_type_spec14729); 
									}
									break;

							}

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1787:10: ^( INTERVAL_DATATYPE ( YEAR_VK | DAY_VK ) ( MONTH_VK | SECOND_VK ) ( expression )* )
					{
					match(input,INTERVAL_DATATYPE,FOLLOW_INTERVAL_DATATYPE_in_type_spec14745); 
					match(input, Token.DOWN, null); 
					if ( input.LA(1)==DAY_VK||input.LA(1)==YEAR_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					if ( input.LA(1)==MONTH_VK||input.LA(1)==SECOND_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// PLSQLPrinter.g:1787:68: ( expression )*
					loop538:
					while (true) {
						int alt538=2;
						int LA538_0 = input.LA(1);
						if ( (LA538_0==EXPR||LA538_0==LOGIC_EXPR) ) {
							alt538=1;
						}

						switch (alt538) {
						case 1 :
							// PLSQLPrinter.g:1787:68: expression
							{
							pushFollow(FOLLOW_expression_in_type_spec14759);
							expression();
							state._fsp--;

							}
							break;

						default :
							break loop538;
						}
					}

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_spec"


	public static class type_precision_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_precision"
	// PLSQLPrinter.g:1790:1: type_precision : ^( PRECISION constant ( constant )? ( CHAR_VK | BYTE_VK )? ( TIME_VK ( LOCAL_VK )? )? ) ;
	public final PLSQLPrinter.type_precision_return type_precision() throws RecognitionException {
		PLSQLPrinter.type_precision_return retval = new PLSQLPrinter.type_precision_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1791:5: ( ^( PRECISION constant ( constant )? ( CHAR_VK | BYTE_VK )? ( TIME_VK ( LOCAL_VK )? )? ) )
			// PLSQLPrinter.g:1791:10: ^( PRECISION constant ( constant )? ( CHAR_VK | BYTE_VK )? ( TIME_VK ( LOCAL_VK )? )? )
			{
			match(input,PRECISION,FOLLOW_PRECISION_in_type_precision14782); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_constant_in_type_precision14784);
			constant();
			state._fsp--;

			// PLSQLPrinter.g:1791:31: ( constant )?
			int alt540=2;
			int LA540_0 = input.LA(1);
			if ( (LA540_0==APPROXIMATE_NUM_LIT||LA540_0==CHAR_STRING||LA540_0==EXACT_NUM_LIT||LA540_0==MINUS_SIGN||LA540_0==SQL92_RESERVED_DEFAULT||LA540_0==SQL92_RESERVED_FALSE||LA540_0==SQL92_RESERVED_NULL||LA540_0==SQL92_RESERVED_TRUE||LA540_0==UNSIGNED_INTEGER||LA540_0==DBTIMEZONE_VK||LA540_0==MAXVALUE_VK||LA540_0==MINVALUE_VK||LA540_0==SESSIONTIMEZONE_VK) ) {
				alt540=1;
			}
			switch (alt540) {
				case 1 :
					// PLSQLPrinter.g:1791:31: constant
					{
					pushFollow(FOLLOW_constant_in_type_precision14786);
					constant();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1791:41: ( CHAR_VK | BYTE_VK )?
			int alt541=2;
			int LA541_0 = input.LA(1);
			if ( (LA541_0==BYTE_VK||LA541_0==CHAR_VK) ) {
				alt541=1;
			}
			switch (alt541) {
				case 1 :
					// PLSQLPrinter.g:
					{
					if ( input.LA(1)==BYTE_VK||input.LA(1)==CHAR_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// PLSQLPrinter.g:1791:60: ( TIME_VK ( LOCAL_VK )? )?
			int alt543=2;
			int LA543_0 = input.LA(1);
			if ( (LA543_0==TIME_VK) ) {
				alt543=1;
			}
			switch (alt543) {
				case 1 :
					// PLSQLPrinter.g:1791:61: TIME_VK ( LOCAL_VK )?
					{
					match(input,TIME_VK,FOLLOW_TIME_VK_in_type_precision14797); 
					// PLSQLPrinter.g:1791:69: ( LOCAL_VK )?
					int alt542=2;
					int LA542_0 = input.LA(1);
					if ( (LA542_0==LOCAL_VK) ) {
						alt542=1;
					}
					switch (alt542) {
						case 1 :
							// PLSQLPrinter.g:1791:69: LOCAL_VK
							{
							match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_type_precision14799); 
							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_precision"


	public static class native_datatype_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "native_datatype_element"
	// PLSQLPrinter.g:1794:1: native_datatype_element : ( BINARY_INTEGER_VK | PLS_INTEGER_VK | NATURAL_VK | BINARY_FLOAT_VK | BINARY_DOUBLE_VK | NATURALN_VK | POSITIVE_VK | POSITIVEN_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | NVARCHAR2_VK | DEC_VK | INTEGER_VK | INT_VK | NUMERIC_VK | SMALLINT_VK | NUMBER_VK | DECIMAL_VK | DOUBLE_VK ( PRECISION_VK )? | FLOAT_VK | REAL_VK | NCHAR_VK | LONG_VK ( RAW_VK )? | CHAR_VK | CHARACTER_VK | VARCHAR2_VK | VARCHAR_VK | STRING_VK | RAW_VK | BOOLEAN_VK | DATE_VK | ROWID_VK | UROWID_VK | YEAR_VK | MONTH_VK | DAY_VK | HOUR_VK | MINUTE_VK | SECOND_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | TIMEZONE_ABBR_VK | TIMESTAMP_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | YMINTERVAL_UNCONSTRAINED_VK | DSINTERVAL_UNCONSTRAINED_VK | BFILE_VK | BLOB_VK | CLOB_VK | NCLOB_VK | MLSLABEL_VK );
	public final PLSQLPrinter.native_datatype_element_return native_datatype_element() throws RecognitionException {
		PLSQLPrinter.native_datatype_element_return retval = new PLSQLPrinter.native_datatype_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1795:5: ( BINARY_INTEGER_VK | PLS_INTEGER_VK | NATURAL_VK | BINARY_FLOAT_VK | BINARY_DOUBLE_VK | NATURALN_VK | POSITIVE_VK | POSITIVEN_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | NVARCHAR2_VK | DEC_VK | INTEGER_VK | INT_VK | NUMERIC_VK | SMALLINT_VK | NUMBER_VK | DECIMAL_VK | DOUBLE_VK ( PRECISION_VK )? | FLOAT_VK | REAL_VK | NCHAR_VK | LONG_VK ( RAW_VK )? | CHAR_VK | CHARACTER_VK | VARCHAR2_VK | VARCHAR_VK | STRING_VK | RAW_VK | BOOLEAN_VK | DATE_VK | ROWID_VK | UROWID_VK | YEAR_VK | MONTH_VK | DAY_VK | HOUR_VK | MINUTE_VK | SECOND_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | TIMEZONE_ABBR_VK | TIMESTAMP_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | YMINTERVAL_UNCONSTRAINED_VK | DSINTERVAL_UNCONSTRAINED_VK | BFILE_VK | BLOB_VK | CLOB_VK | NCLOB_VK | MLSLABEL_VK )
			int alt546=54;
			switch ( input.LA(1) ) {
			case BINARY_INTEGER_VK:
				{
				alt546=1;
				}
				break;
			case PLS_INTEGER_VK:
				{
				alt546=2;
				}
				break;
			case NATURAL_VK:
				{
				alt546=3;
				}
				break;
			case BINARY_FLOAT_VK:
				{
				alt546=4;
				}
				break;
			case BINARY_DOUBLE_VK:
				{
				alt546=5;
				}
				break;
			case NATURALN_VK:
				{
				alt546=6;
				}
				break;
			case POSITIVE_VK:
				{
				alt546=7;
				}
				break;
			case POSITIVEN_VK:
				{
				alt546=8;
				}
				break;
			case SIGNTYPE_VK:
				{
				alt546=9;
				}
				break;
			case SIMPLE_INTEGER_VK:
				{
				alt546=10;
				}
				break;
			case NVARCHAR2_VK:
				{
				alt546=11;
				}
				break;
			case DEC_VK:
				{
				alt546=12;
				}
				break;
			case INTEGER_VK:
				{
				alt546=13;
				}
				break;
			case INT_VK:
				{
				alt546=14;
				}
				break;
			case NUMERIC_VK:
				{
				alt546=15;
				}
				break;
			case SMALLINT_VK:
				{
				alt546=16;
				}
				break;
			case NUMBER_VK:
				{
				alt546=17;
				}
				break;
			case DECIMAL_VK:
				{
				alt546=18;
				}
				break;
			case DOUBLE_VK:
				{
				alt546=19;
				}
				break;
			case FLOAT_VK:
				{
				alt546=20;
				}
				break;
			case REAL_VK:
				{
				alt546=21;
				}
				break;
			case NCHAR_VK:
				{
				alt546=22;
				}
				break;
			case LONG_VK:
				{
				alt546=23;
				}
				break;
			case CHAR_VK:
				{
				alt546=24;
				}
				break;
			case CHARACTER_VK:
				{
				alt546=25;
				}
				break;
			case VARCHAR2_VK:
				{
				alt546=26;
				}
				break;
			case VARCHAR_VK:
				{
				alt546=27;
				}
				break;
			case STRING_VK:
				{
				alt546=28;
				}
				break;
			case RAW_VK:
				{
				alt546=29;
				}
				break;
			case BOOLEAN_VK:
				{
				alt546=30;
				}
				break;
			case DATE_VK:
				{
				alt546=31;
				}
				break;
			case ROWID_VK:
				{
				alt546=32;
				}
				break;
			case UROWID_VK:
				{
				alt546=33;
				}
				break;
			case YEAR_VK:
				{
				alt546=34;
				}
				break;
			case MONTH_VK:
				{
				alt546=35;
				}
				break;
			case DAY_VK:
				{
				alt546=36;
				}
				break;
			case HOUR_VK:
				{
				alt546=37;
				}
				break;
			case MINUTE_VK:
				{
				alt546=38;
				}
				break;
			case SECOND_VK:
				{
				alt546=39;
				}
				break;
			case TIMEZONE_HOUR_VK:
				{
				alt546=40;
				}
				break;
			case TIMEZONE_MINUTE_VK:
				{
				alt546=41;
				}
				break;
			case TIMEZONE_REGION_VK:
				{
				alt546=42;
				}
				break;
			case TIMEZONE_ABBR_VK:
				{
				alt546=43;
				}
				break;
			case TIMESTAMP_VK:
				{
				alt546=44;
				}
				break;
			case TIMESTAMP_UNCONSTRAINED_VK:
				{
				alt546=45;
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED_VK:
				{
				alt546=46;
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED_VK:
				{
				alt546=47;
				}
				break;
			case YMINTERVAL_UNCONSTRAINED_VK:
				{
				alt546=48;
				}
				break;
			case DSINTERVAL_UNCONSTRAINED_VK:
				{
				alt546=49;
				}
				break;
			case BFILE_VK:
				{
				alt546=50;
				}
				break;
			case BLOB_VK:
				{
				alt546=51;
				}
				break;
			case CLOB_VK:
				{
				alt546=52;
				}
				break;
			case NCLOB_VK:
				{
				alt546=53;
				}
				break;
			case MLSLABEL_VK:
				{
				alt546=54;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 546, 0, input);
				throw nvae;
			}
			switch (alt546) {
				case 1 :
					// PLSQLPrinter.g:1795:10: BINARY_INTEGER_VK
					{
					match(input,BINARY_INTEGER_VK,FOLLOW_BINARY_INTEGER_VK_in_native_datatype_element14823); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1796:10: PLS_INTEGER_VK
					{
					match(input,PLS_INTEGER_VK,FOLLOW_PLS_INTEGER_VK_in_native_datatype_element14834); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:1797:10: NATURAL_VK
					{
					match(input,NATURAL_VK,FOLLOW_NATURAL_VK_in_native_datatype_element14845); 
					}
					break;
				case 4 :
					// PLSQLPrinter.g:1798:10: BINARY_FLOAT_VK
					{
					match(input,BINARY_FLOAT_VK,FOLLOW_BINARY_FLOAT_VK_in_native_datatype_element14856); 
					}
					break;
				case 5 :
					// PLSQLPrinter.g:1799:10: BINARY_DOUBLE_VK
					{
					match(input,BINARY_DOUBLE_VK,FOLLOW_BINARY_DOUBLE_VK_in_native_datatype_element14867); 
					}
					break;
				case 6 :
					// PLSQLPrinter.g:1800:10: NATURALN_VK
					{
					match(input,NATURALN_VK,FOLLOW_NATURALN_VK_in_native_datatype_element14878); 
					}
					break;
				case 7 :
					// PLSQLPrinter.g:1801:10: POSITIVE_VK
					{
					match(input,POSITIVE_VK,FOLLOW_POSITIVE_VK_in_native_datatype_element14889); 
					}
					break;
				case 8 :
					// PLSQLPrinter.g:1802:10: POSITIVEN_VK
					{
					match(input,POSITIVEN_VK,FOLLOW_POSITIVEN_VK_in_native_datatype_element14900); 
					}
					break;
				case 9 :
					// PLSQLPrinter.g:1803:10: SIGNTYPE_VK
					{
					match(input,SIGNTYPE_VK,FOLLOW_SIGNTYPE_VK_in_native_datatype_element14911); 
					}
					break;
				case 10 :
					// PLSQLPrinter.g:1804:10: SIMPLE_INTEGER_VK
					{
					match(input,SIMPLE_INTEGER_VK,FOLLOW_SIMPLE_INTEGER_VK_in_native_datatype_element14922); 
					}
					break;
				case 11 :
					// PLSQLPrinter.g:1805:10: NVARCHAR2_VK
					{
					match(input,NVARCHAR2_VK,FOLLOW_NVARCHAR2_VK_in_native_datatype_element14933); 
					}
					break;
				case 12 :
					// PLSQLPrinter.g:1806:10: DEC_VK
					{
					match(input,DEC_VK,FOLLOW_DEC_VK_in_native_datatype_element14944); 
					}
					break;
				case 13 :
					// PLSQLPrinter.g:1807:10: INTEGER_VK
					{
					match(input,INTEGER_VK,FOLLOW_INTEGER_VK_in_native_datatype_element14955); 
					}
					break;
				case 14 :
					// PLSQLPrinter.g:1808:10: INT_VK
					{
					match(input,INT_VK,FOLLOW_INT_VK_in_native_datatype_element14966); 
					}
					break;
				case 15 :
					// PLSQLPrinter.g:1809:10: NUMERIC_VK
					{
					match(input,NUMERIC_VK,FOLLOW_NUMERIC_VK_in_native_datatype_element14977); 
					}
					break;
				case 16 :
					// PLSQLPrinter.g:1810:10: SMALLINT_VK
					{
					match(input,SMALLINT_VK,FOLLOW_SMALLINT_VK_in_native_datatype_element14988); 
					}
					break;
				case 17 :
					// PLSQLPrinter.g:1811:10: NUMBER_VK
					{
					match(input,NUMBER_VK,FOLLOW_NUMBER_VK_in_native_datatype_element14999); 
					}
					break;
				case 18 :
					// PLSQLPrinter.g:1812:10: DECIMAL_VK
					{
					match(input,DECIMAL_VK,FOLLOW_DECIMAL_VK_in_native_datatype_element15010); 
					}
					break;
				case 19 :
					// PLSQLPrinter.g:1813:10: DOUBLE_VK ( PRECISION_VK )?
					{
					match(input,DOUBLE_VK,FOLLOW_DOUBLE_VK_in_native_datatype_element15022); 
					// PLSQLPrinter.g:1813:20: ( PRECISION_VK )?
					int alt544=2;
					int LA544_0 = input.LA(1);
					if ( (LA544_0==PRECISION_VK) ) {
						alt544=1;
					}
					switch (alt544) {
						case 1 :
							// PLSQLPrinter.g:1813:20: PRECISION_VK
							{
							match(input,PRECISION_VK,FOLLOW_PRECISION_VK_in_native_datatype_element15024); 
							}
							break;

					}

					}
					break;
				case 20 :
					// PLSQLPrinter.g:1814:10: FLOAT_VK
					{
					match(input,FLOAT_VK,FOLLOW_FLOAT_VK_in_native_datatype_element15036); 
					}
					break;
				case 21 :
					// PLSQLPrinter.g:1815:10: REAL_VK
					{
					match(input,REAL_VK,FOLLOW_REAL_VK_in_native_datatype_element15047); 
					}
					break;
				case 22 :
					// PLSQLPrinter.g:1816:10: NCHAR_VK
					{
					match(input,NCHAR_VK,FOLLOW_NCHAR_VK_in_native_datatype_element15058); 
					}
					break;
				case 23 :
					// PLSQLPrinter.g:1817:10: LONG_VK ( RAW_VK )?
					{
					match(input,LONG_VK,FOLLOW_LONG_VK_in_native_datatype_element15069); 
					// PLSQLPrinter.g:1817:18: ( RAW_VK )?
					int alt545=2;
					int LA545_0 = input.LA(1);
					if ( (LA545_0==RAW_VK) ) {
						alt545=1;
					}
					switch (alt545) {
						case 1 :
							// PLSQLPrinter.g:1817:18: RAW_VK
							{
							match(input,RAW_VK,FOLLOW_RAW_VK_in_native_datatype_element15071); 
							}
							break;

					}

					}
					break;
				case 24 :
					// PLSQLPrinter.g:1818:10: CHAR_VK
					{
					match(input,CHAR_VK,FOLLOW_CHAR_VK_in_native_datatype_element15083); 
					}
					break;
				case 25 :
					// PLSQLPrinter.g:1819:10: CHARACTER_VK
					{
					match(input,CHARACTER_VK,FOLLOW_CHARACTER_VK_in_native_datatype_element15096); 
					}
					break;
				case 26 :
					// PLSQLPrinter.g:1820:10: VARCHAR2_VK
					{
					match(input,VARCHAR2_VK,FOLLOW_VARCHAR2_VK_in_native_datatype_element15108); 
					}
					break;
				case 27 :
					// PLSQLPrinter.g:1821:10: VARCHAR_VK
					{
					match(input,VARCHAR_VK,FOLLOW_VARCHAR_VK_in_native_datatype_element15119); 
					}
					break;
				case 28 :
					// PLSQLPrinter.g:1822:10: STRING_VK
					{
					match(input,STRING_VK,FOLLOW_STRING_VK_in_native_datatype_element15130); 
					}
					break;
				case 29 :
					// PLSQLPrinter.g:1823:10: RAW_VK
					{
					match(input,RAW_VK,FOLLOW_RAW_VK_in_native_datatype_element15141); 
					}
					break;
				case 30 :
					// PLSQLPrinter.g:1824:10: BOOLEAN_VK
					{
					match(input,BOOLEAN_VK,FOLLOW_BOOLEAN_VK_in_native_datatype_element15152); 
					}
					break;
				case 31 :
					// PLSQLPrinter.g:1825:10: DATE_VK
					{
					match(input,DATE_VK,FOLLOW_DATE_VK_in_native_datatype_element15163); 
					}
					break;
				case 32 :
					// PLSQLPrinter.g:1826:10: ROWID_VK
					{
					match(input,ROWID_VK,FOLLOW_ROWID_VK_in_native_datatype_element15174); 
					}
					break;
				case 33 :
					// PLSQLPrinter.g:1827:10: UROWID_VK
					{
					match(input,UROWID_VK,FOLLOW_UROWID_VK_in_native_datatype_element15185); 
					}
					break;
				case 34 :
					// PLSQLPrinter.g:1828:10: YEAR_VK
					{
					match(input,YEAR_VK,FOLLOW_YEAR_VK_in_native_datatype_element15196); 
					}
					break;
				case 35 :
					// PLSQLPrinter.g:1829:10: MONTH_VK
					{
					match(input,MONTH_VK,FOLLOW_MONTH_VK_in_native_datatype_element15207); 
					}
					break;
				case 36 :
					// PLSQLPrinter.g:1830:10: DAY_VK
					{
					match(input,DAY_VK,FOLLOW_DAY_VK_in_native_datatype_element15218); 
					}
					break;
				case 37 :
					// PLSQLPrinter.g:1831:10: HOUR_VK
					{
					match(input,HOUR_VK,FOLLOW_HOUR_VK_in_native_datatype_element15229); 
					}
					break;
				case 38 :
					// PLSQLPrinter.g:1832:10: MINUTE_VK
					{
					match(input,MINUTE_VK,FOLLOW_MINUTE_VK_in_native_datatype_element15240); 
					}
					break;
				case 39 :
					// PLSQLPrinter.g:1833:10: SECOND_VK
					{
					match(input,SECOND_VK,FOLLOW_SECOND_VK_in_native_datatype_element15251); 
					}
					break;
				case 40 :
					// PLSQLPrinter.g:1834:10: TIMEZONE_HOUR_VK
					{
					match(input,TIMEZONE_HOUR_VK,FOLLOW_TIMEZONE_HOUR_VK_in_native_datatype_element15262); 
					}
					break;
				case 41 :
					// PLSQLPrinter.g:1835:10: TIMEZONE_MINUTE_VK
					{
					match(input,TIMEZONE_MINUTE_VK,FOLLOW_TIMEZONE_MINUTE_VK_in_native_datatype_element15273); 
					}
					break;
				case 42 :
					// PLSQLPrinter.g:1836:10: TIMEZONE_REGION_VK
					{
					match(input,TIMEZONE_REGION_VK,FOLLOW_TIMEZONE_REGION_VK_in_native_datatype_element15284); 
					}
					break;
				case 43 :
					// PLSQLPrinter.g:1837:10: TIMEZONE_ABBR_VK
					{
					match(input,TIMEZONE_ABBR_VK,FOLLOW_TIMEZONE_ABBR_VK_in_native_datatype_element15295); 
					}
					break;
				case 44 :
					// PLSQLPrinter.g:1838:10: TIMESTAMP_VK
					{
					match(input,TIMESTAMP_VK,FOLLOW_TIMESTAMP_VK_in_native_datatype_element15306); 
					}
					break;
				case 45 :
					// PLSQLPrinter.g:1839:10: TIMESTAMP_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_UNCONSTRAINED_VK_in_native_datatype_element15317); 
					}
					break;
				case 46 :
					// PLSQLPrinter.g:1840:10: TIMESTAMP_TZ_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_TZ_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_TZ_UNCONSTRAINED_VK_in_native_datatype_element15328); 
					}
					break;
				case 47 :
					// PLSQLPrinter.g:1841:10: TIMESTAMP_LTZ_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_LTZ_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_LTZ_UNCONSTRAINED_VK_in_native_datatype_element15339); 
					}
					break;
				case 48 :
					// PLSQLPrinter.g:1842:10: YMINTERVAL_UNCONSTRAINED_VK
					{
					match(input,YMINTERVAL_UNCONSTRAINED_VK,FOLLOW_YMINTERVAL_UNCONSTRAINED_VK_in_native_datatype_element15350); 
					}
					break;
				case 49 :
					// PLSQLPrinter.g:1843:10: DSINTERVAL_UNCONSTRAINED_VK
					{
					match(input,DSINTERVAL_UNCONSTRAINED_VK,FOLLOW_DSINTERVAL_UNCONSTRAINED_VK_in_native_datatype_element15361); 
					}
					break;
				case 50 :
					// PLSQLPrinter.g:1844:10: BFILE_VK
					{
					match(input,BFILE_VK,FOLLOW_BFILE_VK_in_native_datatype_element15372); 
					}
					break;
				case 51 :
					// PLSQLPrinter.g:1845:10: BLOB_VK
					{
					match(input,BLOB_VK,FOLLOW_BLOB_VK_in_native_datatype_element15383); 
					}
					break;
				case 52 :
					// PLSQLPrinter.g:1846:10: CLOB_VK
					{
					match(input,CLOB_VK,FOLLOW_CLOB_VK_in_native_datatype_element15394); 
					}
					break;
				case 53 :
					// PLSQLPrinter.g:1847:10: NCLOB_VK
					{
					match(input,NCLOB_VK,FOLLOW_NCLOB_VK_in_native_datatype_element15405); 
					}
					break;
				case 54 :
					// PLSQLPrinter.g:1848:10: MLSLABEL_VK
					{
					match(input,MLSLABEL_VK,FOLLOW_MLSLABEL_VK_in_native_datatype_element15416); 
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "native_datatype_element"


	public static class general_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_element"
	// PLSQLPrinter.g:1851:1: general_element : ( ^( CASCATED_ELEMENT ( general_element )+ ) | ^( HOSTED_VARIABLE_ROUTINE_CALL routine_name function_argument ) | ^( HOSTED_VARIABLE ( char_set_name )? ( ID )+ ) | ^( ROUTINE_CALL routine_name function_argument ) | ^( ANY_ELEMENT ( char_set_name )? ( ID )+ ) );
	public final PLSQLPrinter.general_element_return general_element() throws RecognitionException {
		PLSQLPrinter.general_element_return retval = new PLSQLPrinter.general_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1852:5: ( ^( CASCATED_ELEMENT ( general_element )+ ) | ^( HOSTED_VARIABLE_ROUTINE_CALL routine_name function_argument ) | ^( HOSTED_VARIABLE ( char_set_name )? ( ID )+ ) | ^( ROUTINE_CALL routine_name function_argument ) | ^( ANY_ELEMENT ( char_set_name )? ( ID )+ ) )
			int alt552=5;
			switch ( input.LA(1) ) {
			case CASCATED_ELEMENT:
				{
				alt552=1;
				}
				break;
			case HOSTED_VARIABLE_ROUTINE_CALL:
				{
				alt552=2;
				}
				break;
			case HOSTED_VARIABLE:
				{
				alt552=3;
				}
				break;
			case ROUTINE_CALL:
				{
				alt552=4;
				}
				break;
			case ANY_ELEMENT:
				{
				alt552=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 552, 0, input);
				throw nvae;
			}
			switch (alt552) {
				case 1 :
					// PLSQLPrinter.g:1852:10: ^( CASCATED_ELEMENT ( general_element )+ )
					{
					match(input,CASCATED_ELEMENT,FOLLOW_CASCATED_ELEMENT_in_general_element15437); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1852:29: ( general_element )+
					int cnt547=0;
					loop547:
					while (true) {
						int alt547=2;
						int LA547_0 = input.LA(1);
						if ( (LA547_0==ANY_ELEMENT||LA547_0==CASCATED_ELEMENT||LA547_0==HOSTED_VARIABLE||LA547_0==HOSTED_VARIABLE_ROUTINE_CALL||LA547_0==ROUTINE_CALL) ) {
							alt547=1;
						}

						switch (alt547) {
						case 1 :
							// PLSQLPrinter.g:1852:29: general_element
							{
							pushFollow(FOLLOW_general_element_in_general_element15439);
							general_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt547 >= 1 ) break loop547;
							EarlyExitException eee = new EarlyExitException(547, input);
							throw eee;
						}
						cnt547++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1853:10: ^( HOSTED_VARIABLE_ROUTINE_CALL routine_name function_argument )
					{
					match(input,HOSTED_VARIABLE_ROUTINE_CALL,FOLLOW_HOSTED_VARIABLE_ROUTINE_CALL_in_general_element15453); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_routine_name_in_general_element15455);
					routine_name();
					state._fsp--;

					pushFollow(FOLLOW_function_argument_in_general_element15457);
					function_argument();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1854:10: ^( HOSTED_VARIABLE ( char_set_name )? ( ID )+ )
					{
					match(input,HOSTED_VARIABLE,FOLLOW_HOSTED_VARIABLE_in_general_element15470); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1854:28: ( char_set_name )?
					int alt548=2;
					int LA548_0 = input.LA(1);
					if ( (LA548_0==CHAR_SET_NAME) ) {
						alt548=1;
					}
					switch (alt548) {
						case 1 :
							// PLSQLPrinter.g:1854:28: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_general_element15472);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1854:43: ( ID )+
					int cnt549=0;
					loop549:
					while (true) {
						int alt549=2;
						int LA549_0 = input.LA(1);
						if ( (LA549_0==ID) ) {
							alt549=1;
						}

						switch (alt549) {
						case 1 :
							// PLSQLPrinter.g:1854:43: ID
							{
							match(input,ID,FOLLOW_ID_in_general_element15475); 
							}
							break;

						default :
							if ( cnt549 >= 1 ) break loop549;
							EarlyExitException eee = new EarlyExitException(549, input);
							throw eee;
						}
						cnt549++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// PLSQLPrinter.g:1855:10: ^( ROUTINE_CALL routine_name function_argument )
					{
					match(input,ROUTINE_CALL,FOLLOW_ROUTINE_CALL_in_general_element15489); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_routine_name_in_general_element15491);
					routine_name();
					state._fsp--;

					pushFollow(FOLLOW_function_argument_in_general_element15493);
					function_argument();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 5 :
					// PLSQLPrinter.g:1856:10: ^( ANY_ELEMENT ( char_set_name )? ( ID )+ )
					{
					match(input,ANY_ELEMENT,FOLLOW_ANY_ELEMENT_in_general_element15506); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1856:24: ( char_set_name )?
					int alt550=2;
					int LA550_0 = input.LA(1);
					if ( (LA550_0==CHAR_SET_NAME) ) {
						alt550=1;
					}
					switch (alt550) {
						case 1 :
							// PLSQLPrinter.g:1856:24: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_general_element15508);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1856:39: ( ID )+
					int cnt551=0;
					loop551:
					while (true) {
						int alt551=2;
						int LA551_0 = input.LA(1);
						if ( (LA551_0==ID) ) {
							alt551=1;
						}

						switch (alt551) {
						case 1 :
							// PLSQLPrinter.g:1856:39: ID
							{
							match(input,ID,FOLLOW_ID_in_general_element15511); 
							}
							break;

						default :
							if ( cnt551 >= 1 ) break loop551;
							EarlyExitException eee = new EarlyExitException(551, input);
							throw eee;
						}
						cnt551++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_element"


	public static class constant_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constant"
	// PLSQLPrinter.g:1863:1: constant : ( UNSIGNED_INTEGER | ^( MINUS_SIGN UNSIGNED_INTEGER ) | EXACT_NUM_LIT | APPROXIMATE_NUM_LIT | CHAR_STRING | SQL92_RESERVED_NULL | SQL92_RESERVED_TRUE | SQL92_RESERVED_FALSE | DBTIMEZONE_VK | SESSIONTIMEZONE_VK | MINVALUE_VK | MAXVALUE_VK | SQL92_RESERVED_DEFAULT );
	public final PLSQLPrinter.constant_return constant() throws RecognitionException {
		PLSQLPrinter.constant_return retval = new PLSQLPrinter.constant_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1864:5: ( UNSIGNED_INTEGER | ^( MINUS_SIGN UNSIGNED_INTEGER ) | EXACT_NUM_LIT | APPROXIMATE_NUM_LIT | CHAR_STRING | SQL92_RESERVED_NULL | SQL92_RESERVED_TRUE | SQL92_RESERVED_FALSE | DBTIMEZONE_VK | SESSIONTIMEZONE_VK | MINVALUE_VK | MAXVALUE_VK | SQL92_RESERVED_DEFAULT )
			int alt553=13;
			switch ( input.LA(1) ) {
			case UNSIGNED_INTEGER:
				{
				alt553=1;
				}
				break;
			case MINUS_SIGN:
				{
				alt553=2;
				}
				break;
			case EXACT_NUM_LIT:
				{
				alt553=3;
				}
				break;
			case APPROXIMATE_NUM_LIT:
				{
				alt553=4;
				}
				break;
			case CHAR_STRING:
				{
				alt553=5;
				}
				break;
			case SQL92_RESERVED_NULL:
				{
				alt553=6;
				}
				break;
			case SQL92_RESERVED_TRUE:
				{
				alt553=7;
				}
				break;
			case SQL92_RESERVED_FALSE:
				{
				alt553=8;
				}
				break;
			case DBTIMEZONE_VK:
				{
				alt553=9;
				}
				break;
			case SESSIONTIMEZONE_VK:
				{
				alt553=10;
				}
				break;
			case MINVALUE_VK:
				{
				alt553=11;
				}
				break;
			case MAXVALUE_VK:
				{
				alt553=12;
				}
				break;
			case SQL92_RESERVED_DEFAULT:
				{
				alt553=13;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 553, 0, input);
				throw nvae;
			}
			switch (alt553) {
				case 1 :
					// PLSQLPrinter.g:1864:10: UNSIGNED_INTEGER
					{
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_constant15537); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1865:10: ^( MINUS_SIGN UNSIGNED_INTEGER )
					{
					match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_constant15549); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_constant15551); 
					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1866:10: EXACT_NUM_LIT
					{
					match(input,EXACT_NUM_LIT,FOLLOW_EXACT_NUM_LIT_in_constant15563); 
					}
					break;
				case 4 :
					// PLSQLPrinter.g:1867:10: APPROXIMATE_NUM_LIT
					{
					match(input,APPROXIMATE_NUM_LIT,FOLLOW_APPROXIMATE_NUM_LIT_in_constant15574); 
					}
					break;
				case 5 :
					// PLSQLPrinter.g:1868:10: CHAR_STRING
					{
					match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_constant15585); 
					}
					break;
				case 6 :
					// PLSQLPrinter.g:1869:10: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_constant15596); 
					}
					break;
				case 7 :
					// PLSQLPrinter.g:1870:10: SQL92_RESERVED_TRUE
					{
					match(input,SQL92_RESERVED_TRUE,FOLLOW_SQL92_RESERVED_TRUE_in_constant15607); 
					}
					break;
				case 8 :
					// PLSQLPrinter.g:1871:10: SQL92_RESERVED_FALSE
					{
					match(input,SQL92_RESERVED_FALSE,FOLLOW_SQL92_RESERVED_FALSE_in_constant15618); 
					}
					break;
				case 9 :
					// PLSQLPrinter.g:1872:10: DBTIMEZONE_VK
					{
					match(input,DBTIMEZONE_VK,FOLLOW_DBTIMEZONE_VK_in_constant15629); 
					}
					break;
				case 10 :
					// PLSQLPrinter.g:1873:10: SESSIONTIMEZONE_VK
					{
					match(input,SESSIONTIMEZONE_VK,FOLLOW_SESSIONTIMEZONE_VK_in_constant15641); 
					}
					break;
				case 11 :
					// PLSQLPrinter.g:1874:10: MINVALUE_VK
					{
					match(input,MINVALUE_VK,FOLLOW_MINVALUE_VK_in_constant15652); 
					}
					break;
				case 12 :
					// PLSQLPrinter.g:1875:10: MAXVALUE_VK
					{
					match(input,MAXVALUE_VK,FOLLOW_MAXVALUE_VK_in_constant15663); 
					}
					break;
				case 13 :
					// PLSQLPrinter.g:1876:10: SQL92_RESERVED_DEFAULT
					{
					match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_constant15674); 
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constant"


	public static class id_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "id"
	// PLSQLPrinter.g:1881:1: id : ( char_set_name )? ID ;
	public final PLSQLPrinter.id_return id() throws RecognitionException {
		PLSQLPrinter.id_return retval = new PLSQLPrinter.id_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1882:5: ( ( char_set_name )? ID )
			// PLSQLPrinter.g:1882:10: ( char_set_name )? ID
			{
			// PLSQLPrinter.g:1882:10: ( char_set_name )?
			int alt554=2;
			int LA554_0 = input.LA(1);
			if ( (LA554_0==CHAR_SET_NAME) ) {
				alt554=1;
			}
			switch (alt554) {
				case 1 :
					// PLSQLPrinter.g:1882:10: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_id15696);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_id15699); 
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "id"

	// Delegated rules


	protected DFA300 dfa300 = new DFA300(this);
	static final String DFA300_eotS =
		"\16\uffff";
	static final String DFA300_eofS =
		"\16\uffff";
	static final String DFA300_minS =
		"\1\u00ca\1\2\1\uffff\1\u0103\1\2\1\u00f6\1\2\1\3\1\u018e\1\u0103\1\3\2"+
		"\uffff\1\u018e";
	static final String DFA300_maxS =
		"\1\u0314\1\2\1\uffff\1\u0103\1\2\1\u018e\1\2\2\u018e\1\u02e8\1\u018e\2"+
		"\uffff\1\u018e";
	static final String DFA300_acceptS =
		"\2\uffff\1\3\10\uffff\1\1\1\2\1\uffff";
	static final String DFA300_specialS =
		"\16\uffff}>";
	static final String[] DFA300_transitionS = {
			"\1\1\u0249\uffff\1\2",
			"\1\3",
			"",
			"\1\4",
			"\1\5",
			"\1\6\u0097\uffff\1\7",
			"\1\10",
			"\1\11\u018a\uffff\1\7",
			"\1\12",
			"\1\14\144\uffff\1\13\141\uffff\1\13\u011d\uffff\1\14",
			"\1\15\u018a\uffff\1\12",
			"",
			"",
			"\1\7"
	};

	static final short[] DFA300_eot = DFA.unpackEncodedString(DFA300_eotS);
	static final short[] DFA300_eof = DFA.unpackEncodedString(DFA300_eofS);
	static final char[] DFA300_min = DFA.unpackEncodedStringToUnsignedChars(DFA300_minS);
	static final char[] DFA300_max = DFA.unpackEncodedStringToUnsignedChars(DFA300_maxS);
	static final short[] DFA300_accept = DFA.unpackEncodedString(DFA300_acceptS);
	static final short[] DFA300_special = DFA.unpackEncodedString(DFA300_specialS);
	static final short[][] DFA300_transition;

	static {
		int numStates = DFA300_transitionS.length;
		DFA300_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA300_transition[i] = DFA.unpackEncodedString(DFA300_transitionS[i]);
		}
	}

	protected class DFA300 extends DFA {

		public DFA300(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 300;
			this.eot = DFA300_eot;
			this.eof = DFA300_eof;
			this.min = DFA300_min;
			this.max = DFA300_max;
			this.accept = DFA300_accept;
			this.special = DFA300_special;
			this.transition = DFA300_transition;
		}
		@Override
		public String getDescription() {
			return "1116:1: update_set_elements : ( ^( ASSIGN column_name expression ) | ^( ASSIGN ( column_name )+ subquery ) | ^( VALUE_VK ( char_set_name )? ID expression ) );";
		}
	}

	public static final BitSet FOLLOW_COMPILATION_UNIT_in_compilation_unit69 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unit_statement_in_compilation_unit73 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x9000000000000000L,0x000000000000000FL,0x0000001FE0000000L,0x00000000000FC000L});
	public static final BitSet FOLLOW_SQL_SCRIPT_in_sql_script112 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unit_statement_in_sql_script116 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x9000000000000000L,0x000000000000000FL,0x0000001FE0000000L,0x00000000000FC000L});
	public static final BitSet FOLLOW_SET_SERVEROUTPUT_in_serveroutput_declaration155 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_serveroutput_declaration157 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_alter_function_in_unit_statement182 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_package_in_unit_statement193 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_procedure_in_unit_statement204 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_sequence_in_unit_statement215 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_trigger_in_unit_statement226 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_type_in_unit_statement237 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_unit_statement248 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_unit_statement261 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_package_in_unit_statement272 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_sequence_in_unit_statement283 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_trigger_in_unit_statement294 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_unit_statement305 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_function_in_unit_statement316 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_package_in_unit_statement327 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_procedure_in_unit_statement338 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_sequence_in_unit_statement349 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_trigger_in_unit_statement360 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_type_in_unit_statement371 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_FUNCTION_in_drop_function396 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_name_in_drop_function398 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_FUNCTION_in_alter_function420 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_name_in_alter_function422 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_function424 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_function427 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_function430 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_FUNCTION_in_create_function_body453 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_function_body455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_FUNCTION_NAME_in_create_function_body459 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_create_function_body464 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_type_spec_in_create_function_body469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_create_function_body472 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_create_function_body474 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_function_body490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000202000080000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_parallel_enable_clause_in_create_function_body493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000202000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_result_cache_clause_in_create_function_body496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000202000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_DETERMINISTIC_VK_in_create_function_body499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000202000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_USING_MODE_in_create_function_body520 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PIPELINED_VK_in_create_function_body522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_AGGREGATE_VK_in_create_function_body525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_implementation_type_name_in_create_function_body528 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CALL_MODE_in_create_function_body549 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PIPELINED_VK_in_create_function_body551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_call_spec_in_create_function_body554 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_create_function_body575 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PIPELINED_VK_in_create_function_body577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000040120000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060002L,0x0000000000000000L,0x0003020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_declare_spec_in_create_function_body580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000040120000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060002L,0x0000000000000000L,0x0003020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_body_in_create_function_body583 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARALLEL_ENABLE_VK_in_parallel_enable_clause655 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_partition_by_clause_in_parallel_enable_clause657 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARTITION_VK_in_partition_by_clause680 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_partition_by_clause682 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_partition_by_clause702 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_HASH_VK_in_partition_by_clause722 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_partition_by_clause725 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_partition_by_clause727 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_RANGE_VK_in_partition_by_clause750 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_partition_by_clause753 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_partition_by_clause755 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_streaming_clause_in_partition_by_clause787 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RESULT_CACHE_VK_in_result_cache_clause819 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_relies_on_part_in_result_cache_clause821 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RELIES_ON_VK_in_relies_on_part844 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_relies_on_part846 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_STREAMING_CLAUSE_in_streaming_clause869 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_streaming_clause871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_streaming_clause877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_streaming_clause880 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_streaming_clause882 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_PACKAGE_in_drop_package911 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_package_name_in_drop_package913 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_BODY_VK_in_drop_package915 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_PACKAGE_in_alter_package938 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_package_name_in_alter_package940 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0040000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000100000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_package942 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000100000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_package945 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_package974 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_PACKAGE_SPEC_in_create_package997 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_package999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_package_name_in_create_package1002 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000040000000000L,0x0000000100000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000060102L,0x0000000000000000L,0x0003020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_package1004 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000100000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000060102L,0x0000000000000000L,0x0003020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_package_obj_spec_in_create_package1007 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000100000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000060102L,0x0000000000000000L,0x0003020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_CREATE_PACKAGE_BODY_in_create_package1022 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_package1024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_package_name_in_create_package1027 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041920000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L,0x0000000000000000L,0x0003020100000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_package_obj_body_in_create_package1029 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041920000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L,0x0000000000000000L,0x0003020100000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_seq_of_statements_in_create_package1032 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_variable_declaration_in_package_obj_spec1056 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_package_obj_spec1068 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_package_obj_spec1080 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_package_obj_spec1092 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_package_obj_spec1104 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_package_obj_spec1116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedure_spec_in_package_obj_spec1128 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_spec_in_package_obj_spec1140 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pragma_declaration_in_package_obj_spec1152 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_SPEC_in_procedure_spec1174 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_name_in_procedure_spec1176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_procedure_spec1179 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_procedure_spec1181 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_CALL_MODE_in_procedure_spec1199 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_procedure_spec1201 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_SPEC_in_function_spec1232 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_name_in_function_spec1234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_type_spec_in_function_spec1237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_SELF_VK_in_function_spec1239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_function_spec1243 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_function_spec1245 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_function_spec1261 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000200000080000L,0x0000000000000000L,0x0000080000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_parallel_enable_clause_in_function_spec1264 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000080000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_result_cache_clause_in_function_spec1267 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000080000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_DETERMINISTIC_VK_in_function_spec1270 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000080000000008L});
	public static final BitSet FOLLOW_CALL_MODE_in_function_spec1291 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_function_spec1293 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXTERNAL_VK_in_function_spec1314 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_function_spec1316 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_variable_declaration_in_package_obj_body1363 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_package_obj_body1376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_package_obj_body1389 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_package_obj_body1402 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_package_obj_body1415 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_package_obj_body1427 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_package_obj_body1439 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_package_obj_body1451 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_package_obj_body1463 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_PROCEDURE_in_drop_procedure1490 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_name_in_drop_procedure1492 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_PROCEDURE_in_alter_procedure1514 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_name_in_alter_procedure1516 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_procedure1518 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_procedure1521 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_procedure1524 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_PROCEDURE_in_create_procedure_body1547 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_procedure_body1549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_procedure_name_in_create_procedure_body1552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_create_procedure_body1555 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_create_procedure_body1557 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_procedure_body1561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000202000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_EXTERNAL_VK_in_create_procedure_body1581 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CALL_MODE_in_create_procedure_body1601 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_create_procedure_body1603 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_create_procedure_body1624 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_declare_spec_in_create_procedure_body1626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000040120000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060002L,0x0000000000000000L,0x0003020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_body_in_create_procedure_body1629 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_TRIGGER_in_drop_trigger1679 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_drop_trigger1681 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_TRIGGER_in_alter_trigger1703 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_alter_trigger1705 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000400L,0x0000000002000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000104000000L});
	public static final BitSet FOLLOW_set_in_alter_trigger1725 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RENAME_VK_in_alter_trigger1749 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_alter_trigger1751 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_trigger1771 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_trigger1774 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_trigger1777 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_TRIGGER_in_create_trigger1823 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_trigger1825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_trigger_name_in_create_trigger1828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000402000000000L,0x0000000000003000L,0x0020000002000040L,0x0000000000000000L,0x0400000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_simple_dml_trigger_in_create_trigger1844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000402000000000L,0x0000000000003000L,0x0020000002000040L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_compound_dml_trigger_in_create_trigger1847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000402000000000L,0x0000000000002000L,0x0020000002000040L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_non_dml_trigger_in_create_trigger1850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000402000000000L,0x0000000000002000L,0x0020000002000040L});
	public static final BitSet FOLLOW_trigger_follows_clause_in_create_trigger1865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000402000000000L,0x0000000000002000L,0x0000000002000040L});
	public static final BitSet FOLLOW_trigger_when_clause_in_create_trigger1875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000402000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_trigger_body_in_create_trigger1878 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOLLOWS_VK_in_trigger_follows_clause1900 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_trigger_follows_clause1902 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_trigger_when_clause1925 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_trigger_when_clause1927 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_DML_in_simple_dml_trigger1950 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_simple_dml_trigger1952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_FOR_EACH_ROW_in_simple_dml_trigger1960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_referencing_clause_in_simple_dml_trigger1963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_dml_event_clause_in_simple_dml_trigger1966 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPOUND_DML_in_compound_dml_trigger1988 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_referencing_clause_in_compound_dml_trigger1990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_dml_event_clause_in_compound_dml_trigger1993 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NON_DML_in_non_dml_trigger2015 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_non_dml_trigger2017 = new BitSet(new long[]{0x0000000000000000L,0x0201002000000000L,0x0000000000800008L,0x0000000000040810L,0x0031000000000020L,0x0020000000000080L,0x0000000000000000L,0x0008000000001800L,0x0000000000000000L,0x0008000004000000L,0x0000000000002040L,0x0000040080000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_non_dml_event_in_non_dml_trigger2023 = new BitSet(new long[]{0x0000000000000000L,0x0201002000000000L,0x0000000000800008L,0x0000000000040810L,0x0031000000000020L,0x0020000000000080L,0x0000000000000000L,0x0008000000001800L,0x0000000000000000L,0x000C000004000000L,0x0000000000002040L,0x0000040080000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_DATABASE_VK_in_non_dml_trigger2027 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_schema_name_in_non_dml_trigger2029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_SCHEMA_VK_in_non_dml_trigger2032 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPOUND_VK_in_trigger_body2055 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_trigger_body2057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0030000000000000L,0x0000000003000000L,0x0000040120000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060002L,0x0000000000000000L,0x0003020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_declare_spec_in_trigger_body2059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0030000000000000L,0x0000000003000000L,0x0000040120000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060002L,0x0000000000000000L,0x0003020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_timing_point_section_in_trigger_body2062 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0030000000000000L,0x0000000003000000L});
	public static final BitSet FOLLOW_CALL_VK_in_trigger_body2076 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_routine_name_in_trigger_body2078 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_function_argument_in_trigger_body2080 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_trigger_body2095 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_trigger_body2097 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BEFORE_STATEMENT_in_timing_point_section2119 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section2121 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BEFORE_EACH_ROW_in_timing_point_section2134 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section2136 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AFTER_STATEMENT_in_timing_point_section2149 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section2151 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AFTER_EACH_ROW_in_timing_point_section2164 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section2166 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALTER_in_non_dml_event2187 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANALYZE_VK_in_non_dml_event2198 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASSOCIATE_VK_in_non_dml_event2209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_STATISTICS_VK_in_non_dml_event2211 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUDIT_VK_in_non_dml_event2222 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMENT_VK_in_non_dml_event2233 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_non_dml_event2244 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DISASSOCIATE_VK_in_non_dml_event2255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_STATISTICS_VK_in_non_dml_event2257 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DROP_in_non_dml_event2268 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GRANT_in_non_dml_event2279 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOAUDIT_VK_in_non_dml_event2290 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RENAME_VK_in_non_dml_event2301 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_REVOKE_in_non_dml_event2312 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUNCATE_VK_in_non_dml_event2323 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DDL_VK_in_non_dml_event2334 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STARTUP_VK_in_non_dml_event2345 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SHUTDOWN_VK_in_non_dml_event2356 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DB_ROLE_CHANGE_VK_in_non_dml_event2367 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOGON_VK_in_non_dml_event2378 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOGOFF_VK_in_non_dml_event2389 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SERVERERROR_VK_in_non_dml_event2400 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SUSPEND_VK_in_non_dml_event2411 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATABASE_VK_in_non_dml_event2422 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SCHEMA_VK_in_non_dml_event2433 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOLLOWS_VK_in_non_dml_event2444 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DML_EVENT_in_dml_event_clause2465 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_dml_event_element_in_dml_event_clause2467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_dml_event_clause2471 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_event_clause2473 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_dml_event_nested_clause_in_dml_event_clause2475 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DML_EVENT_ELEMENT_in_dml_event_element2501 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_dml_event_element2503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_dml_event_element2512 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_dml_event_element2514 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_NESTED_VK_in_dml_event_nested_clause2538 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_event_nested_clause2540 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCING_VK_in_referencing_clause2562 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_referencing_element_in_referencing_clause2564 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000020000800L});
	public static final BitSet FOLLOW_set_in_referencing_element2587 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_referencing_element2595 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_TYPE_in_drop_type2622 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_drop_type2624 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_BODY_VK_in_drop_type2626 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_FORCE_VK_in_drop_type2629 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_VALIDATE_VK_in_drop_type2632 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_TYPE_in_alter_type2655 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_alter_type2657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2C00000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_REPLACE_VK_in_alter_type2678 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_OBJECT_MEMBERS_in_alter_type2681 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_element_spec_in_alter_type2683 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_alter_type2687 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_ATTRIBUTE_in_alter_type2709 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_alter_type2711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ATTRIBUTES_in_alter_type2720 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_attribute_definition_in_alter_type2722 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_ALTER_METHOD_in_alter_type2745 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alter_method_element_in_alter_type2747 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_alter_collection_clauses_in_alter_type2768 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_modifier_clause_in_alter_type2787 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_COMPILE_VK_in_alter_type2807 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_type2816 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_type2819 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_type2822 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_dependent_handling_clause_in_alter_type2853 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_METHOD_ELEMENT_in_alter_method_element2887 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_alter_method_element2889 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_map_order_function_spec_in_alter_method_element2895 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_subprogram_spec_in_alter_method_element2898 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ATTRIBUTE_in_attribute_definition2921 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_attribute_name_in_attribute_definition2923 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_attribute_definition2925 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_COLLECTION_in_alter_collection_clauses2948 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_TYPE_VK_in_alter_collection_clauses2969 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_alter_collection_clauses2971 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LIMIT_VK_in_alter_collection_clauses2992 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_alter_collection_clauses2994 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEPENDENT_HANDLING_in_dependent_handling_clause3041 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_INVALIDATE_VK_in_dependent_handling_clause3061 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CASCADE_VK_in_dependent_handling_clause3081 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CONVERT_VK_in_dependent_handling_clause3109 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_dependent_handling_clause3136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_INCLUDING_VK_in_dependent_handling_clause3139 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXCEPTIONS_VK_in_dependent_exceptions_part3225 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_FORCE_VK_in_dependent_exceptions_part3227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_tableview_name_in_dependent_exceptions_part3230 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CREATE_TYPE_BODY_in_create_type3254 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_type3256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_type_name_in_create_type3259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_TYPE_BODY_ELEMENTS_in_create_type3262 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_body_elements_in_create_type3264 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_CREATE_TYPE_SPEC_in_create_type3279 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_type3281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_type_name_in_create_type3284 = new BitSet(new long[]{0x0000000000008008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_CHAR_STRING_in_create_type3286 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_object_type_def_in_create_type3289 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OBJECT_TYPE_DEF_in_object_type_def3312 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_object_as_part_in_object_type_def3315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_object_under_part_in_object_type_def3317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_object_type_def3320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_sqlj_object_type_in_object_type_def3336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_modifier_clause_in_object_type_def3339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_OBJECT_MEMBERS_in_object_type_def3343 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_element_spec_in_object_type_def3345 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_OBJECT_AS_in_object_as_part3371 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_OBJECT_VK_in_object_as_part3374 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_varray_type_def_in_object_as_part3376 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_nested_table_type_def_in_object_as_part3378 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNDER_VK_in_object_under_part3401 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_object_under_part3403 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NESTED_TABLE_TYPE_DEF_in_nested_table_type_def3425 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_nested_table_type_def3427 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_nested_table_type_def3429 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_table_indexed_by_part_in_nested_table_type_def3432 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_JAVA_VK_in_sqlj_object_type3455 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_sqlj_object_type3457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_set_in_sqlj_object_type3459 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_map_order_func_declaration_in_type_body_elements3486 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subprog_decl_in_type_in_type_body_elements3497 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_map_order_func_declaration3518 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_create_function_body_in_map_order_func_declaration3524 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_subprog_decl_in_type3546 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_create_procedure_body_in_subprog_decl_in_type3569 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_create_function_body_in_subprog_decl_in_type3588 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_constructor_declaration_in_subprog_decl_in_type3607 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRUCTOR_VK_in_constructor_declaration3652 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_constructor_declaration3654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_FINAL_VK_in_constructor_declaration3656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_INSTANTIABLE_VK_in_constructor_declaration3659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_constructor_declaration3663 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_elements_parameter_in_constructor_declaration3665 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_CALL_MODE_in_constructor_declaration3688 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_constructor_declaration3690 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_constructor_declaration3711 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_declare_spec_in_constructor_declaration3713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000040120000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060002L,0x0000000000000000L,0x0003020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_body_in_constructor_declaration3716 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODIFIER_in_modifier_clause3766 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_modifier_clause3768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_set_in_modifier_clause3771 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXTERNAL_VK_in_sqlj_object_type_attr3799 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_sqlj_object_type_attr3801 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ELEMENT_SPEC_in_element_spec3823 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_element_spec_options_in_element_spec3825 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000040000L,0x0000800000000000L,0x0000000000000000L,0x0000000400240000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_modifier_clause_in_element_spec3828 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_pragma_clause_in_element_spec3831 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_subprogram_spec_in_element_spec_options3853 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constructor_spec_in_element_spec_options3864 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_map_order_function_spec_in_element_spec_options3875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FIELD_SPEC_in_element_spec_options3887 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_element_spec_options3889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_element_spec_options3891 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_sqlj_object_type_attr_in_element_spec_options3893 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_subprogram_spec3916 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_spec_in_subprogram_spec3939 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_function_spec_in_subprogram_spec3958 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRUCTOR_SPEC_in_constructor_spec4003 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_constructor_spec4005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_FINAL_VK_in_constructor_spec4007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_INSTANTIABLE_VK_in_constructor_spec4010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_constructor_spec4014 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_elements_parameter_in_constructor_spec4016 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_constructor_call_mode_in_constructor_spec4020 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CALL_MODE_in_constructor_call_mode4043 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_constructor_call_mode4045 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_map_order_function_spec4067 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_spec_in_map_order_function_spec4073 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRAGMA_VK_in_pragma_clause4095 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pragma_elements_in_pragma_clause4097 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_id_in_pragma_elements4119 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_elements4130 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PARAMETER_in_type_elements_parameter4151 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_type_elements_parameter4153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_type_elements_parameter4155 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_SEQUENCE_in_drop_sequence4182 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_sequence_name_in_drop_sequence4184 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_SEQUENCE_in_alter_sequence4206 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_sequence_name_in_alter_sequence4208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000100000L,0x0B50000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800000000000000L});
	public static final BitSet FOLLOW_sequence_spec_in_alter_sequence4210 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000100000L,0x0B50000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800000000000000L});
	public static final BitSet FOLLOW_CREATE_SEQUENCE_in_create_sequence4233 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_sequence_name_in_create_sequence4235 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000100000L,0x0B50000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800000000000000L});
	public static final BitSet FOLLOW_sequence_spec_in_create_sequence4237 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000100000L,0x0B50000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800000000000000L});
	public static final BitSet FOLLOW_START_VK_in_sequence_spec4262 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4264 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INCREMENT_VK_in_sequence_spec4277 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4279 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MAXVALUE_VK_in_sequence_spec4292 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4294 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MINVALUE_VK_in_sequence_spec4307 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4309 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CACHE_VK_in_sequence_spec4322 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4324 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOMAXVALUE_VK_in_sequence_spec4336 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOMINVALUE_VK_in_sequence_spec4347 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CYCLE_VK_in_sequence_spec4358 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOCYCLE_VK_in_sequence_spec4369 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOCACHE_VK_in_sequence_spec4380 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ORDER_VK_in_sequence_spec4391 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOORDER_VK_in_sequence_spec4402 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTHID_VK_in_invoker_rights_clause4429 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_invoker_rights_clause4431 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPILER_PARAMETER_in_compiler_parameters_clause4457 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASSIGN_in_compiler_parameters_clause4460 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_compiler_parameters_clause4462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_compiler_parameters_clause4464 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LANGUAGE_VK_in_call_spec4487 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_java_spec_in_call_spec4491 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_c_spec_in_call_spec4495 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_JAVA_VK_in_java_spec4521 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_java_spec4523 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_C_VK_in_c_spec4545 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_c_spec4547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_CONTEXT_VK_in_c_spec4550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_LIBRARY_VK_in_c_spec4554 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_c_spec4556 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_c_agent_in_clause_in_c_spec4559 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_c_parameters_clause_in_c_spec4562 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AGENT_VK_in_c_agent_in_clause4585 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_c_agent_in_clause4587 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_PARAMETERS_VK_in_c_parameters_clause4610 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_THREE_DOTS_in_c_parameters_clause4613 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_c_parameters_clause4615 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_PARAMETER_in_parameter4641 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_parameter4643 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000110000000L,0x0000020000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_type_spec_in_parameter4654 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_parameter4657 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEFAULT_VALUE_in_default_value_part4680 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_default_value_part4682 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_variable_declaration_in_declare_spec4709 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_declare_spec4721 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_declare_spec4733 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_declare_spec4745 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pragma_declaration_in_declare_spec4757 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_declare_spec4769 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_declare_spec4781 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_declare_spec4793 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_declare_spec4805 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIABLE_DECLARE_in_variable_declaration4827 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_variable_declaration4829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_variable_declaration4831 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x1000000000010000L});
	public static final BitSet FOLLOW_CONSTANT_VK_in_variable_declaration4833 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_variable_declaration4836 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_variable_declaration4839 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBTYPE_DECLARE_in_subtype_declaration4868 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_subtype_declaration4870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_subtype_declaration4872 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_subtype_declaration4874 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_subtype_range_in_subtype_declaration4877 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RANGE_VK_in_subtype_range4902 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_subtype_range4904 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CURSOR_DECLARE_in_cursor_declaration4928 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_cursor_declaration4930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L,0x0000000004000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_type_spec_in_cursor_declaration4932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_select_statement_in_cursor_declaration4935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_cursor_declaration4939 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_spec_in_cursor_declaration4941 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_PARAMETER_in_parameter_spec4966 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_parameter_spec4968 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_parameter_spec4970 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_parameter_spec4973 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXCEPTION_DECLARE_in_exception_declaration4997 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_exception_declaration4999 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRAGMA_DECLARE_in_pragma_declaration5034 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SERIALLY_REUSABLE_VK_in_pragma_declaration5054 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AUTONOMOUS_TRANSACTION_VK_in_pragma_declaration5074 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXCEPTION_INIT_VK_in_pragma_declaration5094 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_pragma_declaration5096 = new BitSet(new long[]{0x0000200008008040L,0x4020000000000000L,0x0000080040002000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_constant_in_pragma_declaration5098 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INLINE_VK_in_pragma_declaration5119 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_pragma_declaration5121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_pragma_declaration5123 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RESTRICT_REFERENCES_VK_in_pragma_declaration5144 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_declaration5146 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_id_in_pragma_declaration5149 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_record_type_dec_in_record_declaration5195 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_var_dec_in_record_declaration5206 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_TYPE_DECLARE_in_record_type_dec5230 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_record_type_dec5232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000400000000000L,0x0000000100000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_REF_VK_in_record_type_dec5234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000400000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_record_type_dec5237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_FIELDS_in_record_type_dec5241 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_field_spec_in_record_type_dec5243 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_FIELD_SPEC_in_field_spec5267 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_field_spec5269 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_field_spec5271 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_field_spec5274 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_field_spec5277 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RECORD_VAR_DECLARE_in_record_var_dec5300 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_record_var_dec5302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_type_name_in_record_var_dec5304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000006000000000L});
	public static final BitSet FOLLOW_set_in_record_var_dec5306 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_type_dec_in_table_declaration5333 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_var_dec_in_table_declaration5344 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_TYPE_DECLARE_in_table_type_dec5365 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_table_type_dec5367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_varray_type_def_in_table_type_dec5387 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_table_type_dec5406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TABLE_in_table_type_dec5410 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_table_type_dec5412 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_table_indexed_by_part_in_table_type_dec5414 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDEXED_BY_in_table_indexed_by_part5461 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_table_indexed_by_part5463 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_varray_type_def5484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_VARR_ARRAY_DEF_in_varray_type_def5488 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_varray_type_def5490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_varray_type_def5492 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_VAR_DECLARE_in_table_var_dec5514 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_var_name_in_table_var_dec5516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_table_var_dec5518 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STATEMENTS_in_seq_of_statements5545 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_statement_in_seq_of_statements5547 = new BitSet(new long[]{0x0000000000000008L,0x8040000000000024L,0x0000000200002084L,0x1000001400000400L,0x0000000000400080L,0x0240006000000000L,0x0080000000000000L,0x0000000001008000L,0x0000020000002000L,0x4021014080000800L,0x0000000000020500L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_label_declaration_in_statement5569 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_assignment_statement_in_statement5580 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_continue_statement_in_statement5591 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exit_statement_in_statement5602 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_goto_statement_in_statement5613 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_if_statement_in_statement5624 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_loop_statement_in_statement5635 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_forall_statement_in_statement5646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_null_statement_in_statement5657 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_raise_statement_in_statement5668 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_return_statement_in_statement5679 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pipe_row_statement_in_statement5690 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_statement_in_statement5701 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sql_statement_in_statement5712 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_call_in_statement5723 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_body_in_statement5734 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_statement5745 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LABEL_DECLARE_in_label_declaration5766 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_label_declaration5768 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_assignment_statement5791 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_assignment_statement5793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_assignment_statement5795 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONTINUE_VK_in_continue_statement5817 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_continue_statement5819 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_general_when_in_continue_statement5822 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_general_when5845 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_general_when5847 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXIT_VK_in_exit_statement5869 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_exit_statement5871 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_general_when_in_exit_statement5874 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GOTO_in_goto_statement5897 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_goto_statement5899 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_IF_in_if_statement5921 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_if_statement5923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_if_statement5925 = new BitSet(new long[]{0x0080000000000008L,0x0400000000000000L});
	public static final BitSet FOLLOW_elsif_part_in_if_statement5927 = new BitSet(new long[]{0x0080000000000008L,0x0400000000000000L});
	public static final BitSet FOLLOW_else_part_in_if_statement5930 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_part5953 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_elsif_part5955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_elsif_part5957 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_else_part5979 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_else_part5981 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WHILE_LOOP_in_loop_statement6003 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_loop_statement6005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0100000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_loop_statement6008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement6010 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOR_LOOP_in_loop_statement6023 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_loop_statement6025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0100000000800000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_cursor_loop_param_in_loop_statement6028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement6030 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LOOP_VK_in_loop_statement6043 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_loop_statement6045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement6048 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDEXED_FOR_in_cursor_loop_param6072 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_cursor_loop_param6074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_REVERSE_VK_in_cursor_loop_param6076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_SIMPLE_BOUND_in_cursor_loop_param6080 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_cursor_loop_param6082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_cursor_loop_param6084 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_BASED_FOR_in_cursor_loop_param6098 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_cursor_loop_param6100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_cursor_name_in_cursor_loop_param6102 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_expression_list_in_cursor_loop_param6104 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_BASED_FOR_in_cursor_loop_param6118 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_cursor_loop_param6120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_select_statement_in_cursor_loop_param6122 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FORALL_VK_in_forall_statement6146 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_forall_statement6148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_bounds_clause_in_forall_statement6150 = new BitSet(new long[]{0x0000000000000000L,0x8040000000000020L,0x0000000200000080L,0x1000000000000000L,0x0000000000000080L,0x0000002000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000002000L,0x4001004000000000L,0x0000000000000500L});
	public static final BitSet FOLLOW_sql_statement_in_forall_statement6152 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_EXCEPTIONS_VK_in_forall_statement6154 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_BOUND_in_bounds_clause6177 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_bounds_clause6179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_bounds_clause6181 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDICES_BOUND_in_bounds_clause6194 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_collection_name_in_bounds_clause6196 = new BitSet(new long[]{0x0000000000000008L,0x0000080000000000L});
	public static final BitSet FOLLOW_between_bound_in_bounds_clause6198 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VALUES_BOUND_in_bounds_clause6212 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_bounds_clause6214 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_between_bound6237 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_between_bound6239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_between_bound6241 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_null_statement6262 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RAISE_VK_in_raise_statement6283 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_raise_statement6285 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RETURN_VK_in_return_statement6308 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_return_statement6310 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROUTINE_CALL_in_function_call6333 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_function_call6335 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_in_body6357 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_body6359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_body6362 = new BitSet(new long[]{0x0000000000000008L,0x1000000000000000L});
	public static final BitSet FOLLOW_exception_clause_in_body6364 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_clause6390 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_handler_in_exception_clause6392 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_exception_handler6415 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_exception_handler6417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_exception_handler6420 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BLOCK_in_block6444 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_declare_spec_in_block6446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000040120000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060002L,0x0000000000000000L,0x0003020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_body_in_block6449 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_execute_immediate_in_sql_statement6474 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_data_manipulation_language_statements_in_sql_statement6485 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_manipulation_statements_in_sql_statement6496 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_transaction_control_statements_in_sql_statement6507 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXECUTE_VK_in_execute_immediate6528 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_execute_immediate6530 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000000200L,0x0000040000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_into_clause_in_execute_immediate6533 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_using_clause_in_execute_immediate6535 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_dynamic_returning_clause_in_execute_immediate6537 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DYNAMIC_RETURN_in_dynamic_returning_clause6563 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_into_clause_in_dynamic_returning_clause6565 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_merge_statement_in_data_manipulation_language_statements6590 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lock_table_statement_in_data_manipulation_language_statements6601 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_select_statement_in_data_manipulation_language_statements6612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_update_statement_in_data_manipulation_language_statements6624 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delete_statement_in_data_manipulation_language_statements6636 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statement_in_data_manipulation_language_statements6647 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SELECT_STATEMENT_in_select_statement6668 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_factoring_clause_in_select_statement6670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_subquery_in_select_statement6673 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040001L});
	public static final BitSet FOLLOW_for_update_clause_in_select_statement6675 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040001L});
	public static final BitSet FOLLOW_order_by_clause_in_select_statement6678 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WITH_in_subquery_factoring_clause6704 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_factoring_element_in_subquery_factoring_clause6706 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_FACTORING_in_factoring_element6729 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_name_in_factoring_element6731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_subquery_in_factoring_element6733 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBQUERY_in_subquery6755 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_basic_elements_in_subquery6757 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000040L,0x0000000080000100L});
	public static final BitSet FOLLOW_subquery_operation_part_in_subquery6759 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000040L,0x0000000080000100L});
	public static final BitSet FOLLOW_set_in_subquery_operation_part6782 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_subquery_operation_part6790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_subquery_basic_elements_in_subquery_operation_part6793 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_query_block_in_subquery_basic_elements6814 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_subquery_basic_elements6825 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_SELECT_in_query_block6846 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_from_clause_in_query_block6861 = new BitSet(new long[]{0x0000000000000100L,0x0100001000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_query_block6883 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_ASTERISK_in_query_block6904 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000002000000230L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_SELECT_LIST_in_query_block6924 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_selected_element_in_query_block6926 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_into_clause_in_query_block6956 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000002000000030L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_where_clause_in_query_block6959 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000000000000030L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_hierarchical_query_clause_in_query_block6962 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000000000000030L});
	public static final BitSet FOLLOW_group_by_clause_in_query_block6978 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_having_clause_in_query_block6981 = new BitSet(new long[]{0x0100000000000008L});
	public static final BitSet FOLLOW_model_clause_in_query_block6984 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_ITEM_in_selected_element7016 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_selected_element7018 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_alias_in_selected_element7020 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FROM_in_from_clause7043 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_ref_in_from_clause7045 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_TABLE_REF_in_table_ref7068 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_ref_aux_in_table_ref7070 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_join_clause_in_table_ref7072 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_TABLE_REF_ELEMENT_in_table_ref_aux7095 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_table_ref_aux7097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
	public static final BitSet FOLLOW_dml_table_expression_clause_in_table_ref_aux7100 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000800L});
	public static final BitSet FOLLOW_ONLY_VK_in_table_ref_aux7102 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000800L});
	public static final BitSet FOLLOW_pivot_clause_in_table_ref_aux7105 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000800L});
	public static final BitSet FOLLOW_unpivot_clause_in_table_ref_aux7108 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_flashback_query_clause_in_table_ref_aux7111 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_JOIN_DEF_in_join_clause7134 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_ref_aux_in_join_clause7154 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_query_partition_clause_in_join_clause7156 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_join_on_part_in_join_clause7160 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_join_using_part_in_join_clause7162 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_join_on_part7187 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_join_on_part7189 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_join_using_part7212 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_join_using_part7214 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_PARTITION_VK_in_query_partition_clause7237 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_query_partition_clause7240 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_query_partition_clause7242 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_query_partition_clause7244 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_set_in_flashback_query_clause7268 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_flashback_query_clause7281 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIVOT_VK_in_pivot_clause7304 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_XML_VK_in_pivot_clause7306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_pivot_element_in_pivot_clause7309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_pivot_for_clause_in_pivot_clause7312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_pivot_in_clause_in_pivot_clause7314 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIVOT_ELEMENT_in_pivot_element7336 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_pivot_element7338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_pivot_element7341 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FOR_in_pivot_for_clause7363 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_pivot_for_clause7365 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_pivot_in_clause7388 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_pivot_in_clause7404 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ANY_MODE_in_pivot_in_clause7420 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_pivot_in_clause7422 = new BitSet(new long[]{0x0000000000000008L,0x0000008000000000L});
	public static final BitSet FOLLOW_ELEMENTS_MODE_in_pivot_in_clause7440 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pivot_in_clause_element_in_pivot_in_clause7442 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_PIVOT_IN_ELEMENT_in_pivot_in_clause_element7485 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_pivot_in_clause_element7487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_pivot_in_clause_element7491 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_pivot_in_clause_element7493 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNPIVOT_VK_in_unpivot_clause7516 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_unpivot_clause7519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_NULLS_VK_in_unpivot_clause7525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_column_name_in_unpivot_clause7530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_pivot_for_clause_in_unpivot_clause7533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_unpivot_in_clause_in_unpivot_clause7535 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_unpivot_in_clause7557 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unpivot_in_element_in_unpivot_in_clause7559 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_UNPIVOT_IN_ELEMENT_in_unpivot_in_element7582 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_unpivot_in_element7584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_PIVOT_ALIAS_in_unpivot_in_element7588 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_unpivot_in_element7591 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_unpivot_in_element7593 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_HIERARCHICAL_in_hierarchical_query_clause7617 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_start_part_in_hierarchical_query_clause7619 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CONNECT_in_hierarchical_query_clause7623 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NOCYCLE_VK_in_hierarchical_query_clause7625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_hierarchical_query_clause7628 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_START_in_start_part7651 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_start_part7653 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GROUP_in_group_by_clause7675 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_group_by_element_in_group_by_clause7677 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_GROUP_BY_ELEMENT_in_group_by_element7700 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_group_by_elements_in_group_by_element7702 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_GROUPING_VK_in_group_by_elements7724 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_groupin_set_in_group_by_elements7726 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_grouping_element_in_group_by_elements7739 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GROUPIN_SET_in_groupin_set7761 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_grouping_element_in_groupin_set7763 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_grouping_element7785 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_grouping_element_in_grouping_element7791 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_expression_list_in_grouping_element7804 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_grouping_element7815 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_HAVING_in_having_clause7837 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_having_clause7839 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_clause7861 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_main_model_in_model_clause7863 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000080100000L});
	public static final BitSet FOLLOW_cell_reference_options_in_model_clause7865 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000080100000L});
	public static final BitSet FOLLOW_return_rows_clause_in_model_clause7868 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_reference_model_in_model_clause7871 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_set_in_cell_reference_options7894 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NAV_VK_in_cell_reference_options7900 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_cell_reference_options7913 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_cell_reference_options7915 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RETURN_VK_in_return_rows_clause7941 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_return_rows_clause7943 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCE_VK_in_reference_model7969 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_reference_model_name_in_reference_model7971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_subquery_in_reference_model7973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_model_column_clauses_in_reference_model7975 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L});
	public static final BitSet FOLLOW_cell_reference_options_in_reference_model7977 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L});
	public static final BitSet FOLLOW_MAIN_MODEL_in_main_model8000 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_main_model_name_in_main_model8002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_model_column_clauses_in_main_model8005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_model_rules_clause_in_main_model8007 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L});
	public static final BitSet FOLLOW_cell_reference_options_in_main_model8009 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L});
	public static final BitSet FOLLOW_MODEL_COLUMN_in_model_column_clauses8032 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DIMENSION_VK_in_model_column_clauses8035 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_clauses8037 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MEASURES_VK_in_model_column_clauses8041 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_clauses8043 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_model_column_partition_part_in_model_column_clauses8046 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARTITION_VK_in_model_column_partition_part8069 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_partition_part8071 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_COLUMNS_in_model_column_list8093 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_in_model_column_list8095 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_MODEL_COLUMN_in_model_column8118 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_model_column8120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_model_column8123 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_RULES_in_model_rules_clause8146 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_rules_element_in_model_rules_clause8148 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_model_rules_part_in_model_rules_clause8151 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RULES_VK_in_model_rules_part8174 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_part8190 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_UPSERT_VK_in_model_rules_part8192 = new BitSet(new long[]{0x0000000000000008L,0x0000001000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_model_rules_part8194 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_model_iterate_clause_in_model_rules_part8232 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_RULE_in_model_rules_element8264 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASSIGN_in_model_rules_element8280 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_expression_in_model_rules_element8282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_model_rules_element8284 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_element8301 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_UPSERT_VK_in_model_rules_element8303 = new BitSet(new long[]{0x0000000000000008L,0x0000001000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_model_rules_element8305 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_model_rules_element8323 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ITERATE_VK_in_model_iterate_clause8355 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_model_iterate_clause8357 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_until_part_in_model_iterate_clause8359 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNTIL_VK_in_until_part8382 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_until_part8384 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_order_by_clause8406 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SIBLINGS_VK_in_order_by_clause8408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ORDER_BY_ELEMENTS_in_order_by_clause8412 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_order_by_elements_in_order_by_clause8414 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_ORDER_BY_ELEMENT_in_order_by_elements8438 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_order_by_elements8440 = new BitSet(new long[]{0x0000000000000008L,0x0080020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_NULLS_VK_in_order_by_elements8450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_set_in_order_by_elements8452 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FOR_in_for_update_clause8480 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_for_update_of_part_in_for_update_clause8482 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_for_update_options_in_for_update_clause8485 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_OF_in_for_update_of_part8508 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_for_update_of_part8510 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SKIP_VK_in_for_update_options8532 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_for_update_options8543 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WAIT_VK_in_for_update_options8555 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_update_options8557 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_update_statement8581 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_update_statement8583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_update_set_clause_in_update_statement8597 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_where_clause_in_update_statement8611 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_static_returning_clause_in_update_statement8614 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_update_statement8617 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SET_VK_in_update_set_clause8650 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_update_set_elements_in_update_set_clause8652 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ASSIGN_in_update_set_elements8675 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_update_set_elements8677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_update_set_elements8679 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_update_set_elements8692 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_update_set_elements8694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_subquery_in_update_set_elements8697 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VALUE_VK_in_update_set_elements8710 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_update_set_elements8712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_update_set_elements8715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_update_set_elements8717 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_delete_statement8741 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_delete_statement8743 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_where_clause_in_delete_statement8757 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_static_returning_clause_in_delete_statement8760 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_delete_statement8763 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INSERT_in_insert_statement8786 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_single_table_insert_in_insert_statement8801 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_multi_table_insert_in_insert_statement8816 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SINGLE_TABLE_MODE_in_single_table_insert8859 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_insert_into_clause_in_single_table_insert8861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_values_clause_in_single_table_insert8864 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_static_returning_clause_in_single_table_insert8866 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_select_statement_in_single_table_insert8870 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_single_table_insert8873 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MULTI_TABLE_MODE_in_multi_table_insert8896 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_select_statement_in_multi_table_insert8898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_conditional_insert_clause_in_multi_table_insert8901 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_multi_table_element_in_multi_table_insert8903 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_TABLE_ELEMENT_in_multi_table_element8927 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_insert_into_clause_in_multi_table_element8929 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_values_clause_in_multi_table_element8931 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_multi_table_element8934 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONDITIONAL_INSERT_in_conditional_insert_clause8957 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_conditional_insert_when_part_in_conditional_insert_clause8966 = new BitSet(new long[]{0x0000000000000008L,0x0400000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_conditional_insert_else_part_in_conditional_insert_clause8969 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_conditional_insert_when_part8993 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_conditional_insert_when_part8995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_when_part8997 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_conditional_insert_else_part9020 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_else_part9022 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_insert_into_clause9045 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_insert_into_clause9047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_insert_into_clause9050 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_insert_into_clause9052 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_VALUES_in_values_clause9076 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_values_clause9079 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_values_clause9081 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_VK_in_merge_statement9105 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_merge_statement9107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_tableview_name_in_merge_statement9110 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_merge_statement9126 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_selected_tableview_in_merge_statement9128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_merge_statement9130 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_merge_update_clause_in_merge_statement9146 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000402000L});
	public static final BitSet FOLLOW_merge_insert_clause_in_merge_statement9149 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_merge_statement9152 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_UPDATE_in_merge_update_clause9177 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_merge_element_in_merge_update_clause9179 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000002000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_where_clause_in_merge_update_clause9182 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L});
	public static final BitSet FOLLOW_merge_update_delete_part_in_merge_update_clause9185 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_merge_element9208 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_merge_element9210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_merge_element9212 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_merge_update_delete_part9234 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_where_clause_in_merge_update_delete_part9236 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_INSERT_in_merge_insert_clause9258 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_merge_insert_clause9261 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_merge_insert_clause9263 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_merge_insert_clause9267 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_where_clause_in_merge_insert_clause9269 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECTED_TABLEVIEW_in_selected_tableview9293 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_selected_tableview9295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000090000000000L});
	public static final BitSet FOLLOW_tableview_name_in_selected_tableview9299 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_subquery_in_selected_tableview9301 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_LOCK_in_lock_table_statement9326 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_lock_table_element_in_lock_table_statement9328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000801L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_lock_mode_in_lock_table_statement9331 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_wait_nowait_part_in_lock_table_statement9333 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WAIT_VK_in_wait_nowait_part9356 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_wait_nowait_part9358 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_wait_nowait_part9370 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCK_TABLE_ELEMENT_in_lock_table_element9393 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_lock_table_element9395 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_partition_extension_clause_in_lock_table_element9397 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode9419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9421 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode9432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9434 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9445 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_lock_mode9447 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode9461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9463 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9474 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_REF_in_general_table_ref9498 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_general_table_ref9500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
	public static final BitSet FOLLOW_dml_table_expression_clause_in_general_table_ref9503 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_ONLY_VK_in_general_table_ref9505 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STATIC_RETURNING_in_static_returning_clause9528 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_static_returning_clause9530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000040000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_into_clause_in_static_returning_clause9533 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LOG_VK_in_error_logging_clause9555 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_error_logging_into_part_in_error_logging_clause9557 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_expression_in_error_logging_clause9560 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_error_logging_reject_part_in_error_logging_clause9563 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_error_logging_into_part9586 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_error_logging_into_part9588 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REJECT_VK_in_error_logging_reject_part9610 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNLIMITED_VK_in_error_logging_reject_part9613 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_error_logging_reject_part9615 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_EXPRESSION_in_dml_table_expression_clause9638 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLLECTION_MODE_in_dml_table_expression_clause9655 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_dml_table_expression_clause9657 = new BitSet(new long[]{0x0000000000000008L,0x0000000000008000L});
	public static final BitSet FOLLOW_PLUS_SIGN_in_dml_table_expression_clause9659 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_MODE_in_dml_table_expression_clause9677 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_select_statement_in_dml_table_expression_clause9679 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause9681 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DIRECT_MODE_in_dml_table_expression_clause9699 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_table_expression_clause9701 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_sample_clause_in_dml_table_expression_clause9703 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_ref_in_dml_table_expression_clause9720 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_general_element_in_dml_table_expression_clause9735 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_ref_in_dml_table_expression_clause9770 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WITH_in_subquery_restriction_clause9791 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_READ_VK_in_subquery_restriction_clause9794 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CHECK_in_subquery_restriction_clause9796 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_constraint_name_in_subquery_restriction_clause9798 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAMPLE_VK_in_sample_clause9822 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BLOCK_VK_in_sample_clause9824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_sample_clause9827 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_seed_part_in_sample_clause9829 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SEED_VK_in_seed_part9853 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_seed_part9855 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_close_statement_in_cursor_manipulation_statements9882 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_open_statement_in_cursor_manipulation_statements9893 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fetch_statement_in_cursor_manipulation_statements9904 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_open_for_statement_in_cursor_manipulation_statements9915 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLOSE_VK_in_close_statement9937 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_close_statement9939 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OPEN_VK_in_open_statement9962 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_open_statement9964 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_expression_list_in_open_statement9966 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FETCH_in_fetch_statement9989 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_fetch_statement9991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000040000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_fetch_statement10012 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_fetch_statement10014 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_BULK_VK_in_fetch_statement10036 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_fetch_statement10038 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_OPEN_VK_in_open_for_statement10085 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_open_for_statement10087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_expression_in_open_for_statement10090 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_select_statement_in_open_for_statement10092 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_open_for_statement10095 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_transaction_command_in_transaction_control_statements10121 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_constraint_command_in_transaction_control_statements10132 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_commit_statement_in_transaction_control_statements10143 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rollback_statement_in_transaction_control_statements10154 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_savepoint_statement_in_transaction_control_statements10165 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_TRANSACTION_in_set_transaction_command10186 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_set_transaction_command10188 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004000L});
	public static final BitSet FOLLOW_READ_VK_in_set_transaction_command10209 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_set_transaction_command10211 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ISOLATION_VK_in_set_transaction_command10236 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_set_transaction_command10238 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_VK_in_set_transaction_command10263 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_rollback_segment_name_in_set_transaction_command10265 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SET_CONSTRAINT_in_set_constraint_command10312 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_set_constraint_command10315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_constraint_name_in_set_constraint_command10317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000020000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_set_in_set_constraint_command10321 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMMIT_VK_in_commit_statement10348 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WORK_VK_in_commit_statement10350 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L,0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_COMMENT_VK_in_commit_statement10372 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_commit_statement10374 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FORCE_VK_in_commit_statement10395 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CORRUPT_XID_VK_in_commit_statement10398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_commit_statement10400 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CORRUPT_XID_ALL_VK_in_commit_statement10402 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_commit_statement10404 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_commit_statement10406 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_write_clause_in_commit_statement10438 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WRITE_VK_in_write_clause10470 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ROLLBACK_VK_in_rollback_statement10507 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WORK_VK_in_rollback_statement10509 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TO_in_rollback_statement10531 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_savepoint_name_in_rollback_statement10533 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FORCE_VK_in_rollback_statement10554 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_rollback_statement10556 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAVEPOINT_VK_in_savepoint_statement10603 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_savepoint_name_in_savepoint_statement10605 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIPE_ROW_in_pipe_row_statement10632 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_pipe_row_statement10634 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXPR_LIST_in_expression_list10660 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_expression_list10662 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_LOGIC_EXPR_in_expression10685 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression10687 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXPR_in_expression10700 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression10702 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_OR_in_expression_element10724 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10726 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10728 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_AND_in_expression_element10741 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10743 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10745 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_expression_element10758 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10760 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_expression_element10773 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10787 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10789 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_NULL_in_expression_element10803 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10805 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NULL_in_expression_element10818 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10820 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_NAN_in_expression_element10833 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10835 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NAN_in_expression_element10848 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10850 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_PRESENT_in_expression_element10863 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10865 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_PRESENT_in_expression_element10878 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10880 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_INFINITE_in_expression_element10893 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10895 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_INFINITE_in_expression_element10908 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10910 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_A_SET_in_expression_element10923 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10925 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_A_SET_in_expression_element10938 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10940 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_EMPTY_in_expression_element10953 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10955 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_EMPTY_in_expression_element10968 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10970 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_OF_TYPE_in_expression_element10983 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_expression_element10987 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_IS_OF_TYPE_in_expression_element11001 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_expression_element11005 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_set_in_expression_element11020 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11026 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11028 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOT_IN_in_expression_element11042 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_in_elements_in_expression_element11046 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_expression_element11059 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_in_elements_in_expression_element11063 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOT_BETWEEN_in_expression_element11076 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11078 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11080 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11082 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_expression_element11095 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11097 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11099 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11101 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOT_LIKE_in_expression_element11114 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11116 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11118 = new BitSet(new long[]{0x00022C018C108148L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11120 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_expression_element11134 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11144 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11146 = new BitSet(new long[]{0x00022C018C108148L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11148 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONCATENATION_OP_in_expression_element11163 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11165 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11167 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLUS_SIGN_in_expression_element11180 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11182 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11184 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MINUS_SIGN_in_expression_element11197 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11199 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11201 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASTERISK_in_expression_element11214 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11216 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11218 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SOLIDUS_in_expression_element11231 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11233 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11235 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MOD_VK_in_expression_element11248 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11250 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11252 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DIV_VK_in_expression_element11265 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11267 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11269 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIPE_VK_in_expression_element11282 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11284 = new BitSet(new long[]{0x00022C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11286 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNARY_OPERATOR_in_expression_element11300 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11302 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_PRIOR_in_expression_element11315 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11317 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NEW_VK_in_expression_element11330 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_expression_element11332 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_expression_element11345 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11347 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STANDARD_FUNCTION_in_expression_element11360 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_standard_function_in_expression_element11362 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_expression_element11375 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11385 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VECTOR_EXPR_in_expression_element11398 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11400 = new BitSet(new long[]{0x00022C018C108148L,0x612008D400008000L,0x0000080040123840L,0x0004000000000020L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000001400L,0xA004001088280038L,0x0000041E00040001L,0x0020010000000000L,0x0000000002020080L,0x0000014040000000L,0x0000000004000040L});
	public static final BitSet FOLLOW_DATETIME_OP_in_expression_element11415 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_datetime_element_in_expression_element11419 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_model_expression_in_expression_element11431 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KEEP_VK_in_expression_element11443 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_DENSE_RANK_VK_in_expression_element11447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_set_in_expression_element11449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_expression_element11455 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_over_clause_in_expression_element11457 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DOT_ASTERISK_in_expression_element11472 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_expression_element11474 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_expression_element11487 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_expression_element11497 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OUTER_JOIN_SIGN_in_expression_element11510 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11512 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_case_statement_in_expression_element11525 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constant_in_expression_element11536 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_general_element_in_expression_element11547 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_expression_element11558 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_in_elements11578 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_in_elements11589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_VK_in_datetime_element11610 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_datetime_element11612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_LOCAL_VK_in_datetime_element11615 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TIME_VK_in_datetime_element11617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_datetime_element11619 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DAY_VK_in_datetime_element11633 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SECOND_VK_in_datetime_element11635 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_datetime_element11637 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_YEAR_VK_in_datetime_element11651 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_MONTH_VK_in_datetime_element11653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_datetime_element11655 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_EXPRESSION_in_model_expression11677 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_model_expression11679 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0C00010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_model_expression_element_in_model_expression11681 = new BitSet(new long[]{0x0000000000000008L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0C00010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_model_expression_element11703 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_model_expression_element11714 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_SINGLE_COLUMN_in_model_expression_element11726 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_model_expression_element11728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000042L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_for_single_column_element_in_model_expression_element11730 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_for_like_part_in_model_expression_element11732 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOR_MULTI_COLUMN_in_model_expression_element11746 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_model_expression_element11748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_model_expression_element11752 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_model_expression_element11755 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_model_expression_element11757 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_for_single_column_element11782 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_for_single_column_element11784 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FROM_in_for_single_column_element11797 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element11799 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TO_in_for_single_column_element11813 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element11815 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_for_single_column_element11829 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element11835 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_LIKE_in_for_like_part11858 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_like_part11860 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_CASE_in_case_statement11882 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_case_statement11884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0100000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_case_statement11887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_case_when_part_in_case_statement11889 = new BitSet(new long[]{0x0000000000000008L,0x0400000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_case_else_part_in_case_statement11892 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SEARCHED_CASE_in_case_statement11908 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_case_statement11910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_case_when_part_in_case_statement11913 = new BitSet(new long[]{0x0000000000000008L,0x0400000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_case_else_part_in_case_statement11916 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_case_when_part11942 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_case_when_part11944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_case_when_part11947 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_case_when_part11949 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_case_else_part11972 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_case_else_part11975 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_case_else_part11977 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_OVER_in_standard_function12001 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function12003 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function12005 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_USING_in_standard_function12019 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function12021 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_standard_function12023 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COUNT_VK_in_standard_function12037 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASTERISK_in_standard_function12041 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_expression_in_standard_function12045 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function12049 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_standard_function12063 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_standard_function12070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_expression_in_standard_function12072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function12075 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CHR_VK_in_standard_function12088 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_NCHAR_CS_VK_in_standard_function12092 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLLECT_VK_in_standard_function12105 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_standard_function12114 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_collect_order_by_part_in_standard_function12116 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_WITHIN_OR_OVER_in_standard_function12130 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function12132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_within_clause_in_standard_function12135 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function12137 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_DECOMPOSE_VK_in_standard_function12153 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12155 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_EXTRACT_VK_in_standard_function12176 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REGULAR_ID_in_standard_function12178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function12180 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_standard_function12193 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200004L});
	public static final BitSet FOLLOW_NULLS_VK_in_standard_function12201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function12204 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PREDICTION_FUNCTION_in_standard_function12218 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12220 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_cost_matrix_clause_in_standard_function12223 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_standard_function12226 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TRANSLATE_VK_in_standard_function12240 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12242 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000200000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function12251 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_TREAT_VK_in_standard_function12265 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_REF_VK_in_standard_function12269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function12272 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TRIM_VK_in_standard_function12285 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12296 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function12298 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLAGG_VK_in_standard_function12314 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12316 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_standard_function12318 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_standard_function12332 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_multiuse_expression_element_in_standard_function12338 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_XMLEXISTS_VK_in_standard_function12352 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12354 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function12356 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLPARSE_VK_in_standard_function12370 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_standard_function12372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function12378 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_WELLFORMED_VK_in_standard_function12380 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLQUERY_VK_in_standard_function12394 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12396 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function12398 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_standard_function12401 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLROOT_VK_in_standard_function12415 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_xml_param_version_part_in_standard_function12419 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_xmlroot_param_standalone_part_in_standard_function12421 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLTABLE_VK_in_standard_function12435 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_namespaces_clause_in_standard_function12437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function12440 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function12442 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_xml_table_column_in_standard_function12445 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_XMLELEMENT_VK_in_standard_function12459 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12499 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_xml_attributes_clause_in_standard_function12513 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function12517 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_alias_in_standard_function12519 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_XMLPI_VK_in_standard_function12544 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NAME_VK_in_standard_function12567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_char_set_name_in_standard_function12569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_standard_function12572 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_standard_function12595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function12597 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function12633 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLSERIALIZE_VK_in_standard_function12656 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_standard_function12674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function12696 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000004000000L,0x0000000100200100L,0x0000020000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function12698 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000200100L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_xmlserialize_param_enconding_part_in_standard_function12717 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200100L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_xml_param_version_part_in_standard_function12736 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200100L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_xmlserialize_param_ident_part_in_standard_function12755 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_set_in_standard_function12775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_DEFAULTS_VK_in_standard_function12781 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OVER_VK_in_over_clause12814 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_partition_clause_in_over_clause12816 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_over_clause12820 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000001000L});
	public static final BitSet FOLLOW_windowing_clause_in_over_clause12822 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_windowing_clause12847 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_windowing_clause12871 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause12873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause12875 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause12895 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_UNBOUNDED_VK_in_windowing_elements12941 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PRECEDING_VK_in_windowing_elements12943 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURRENT_VK_in_windowing_elements12956 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ROW_VK_in_windowing_elements12958 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_windowing_elements12971 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_windowing_elements12977 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_using_clause12999 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_using_element_in_using_clause13001 = new BitSet(new long[]{0x0000000000000108L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_ELEMENT_in_using_element13024 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_using_element13026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000080000L});
	public static final BitSet FOLLOW_OUT_VK_in_using_element13029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_using_element13032 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_alias_in_using_element13034 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASTERISK_in_using_element13047 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_collect_order_by_part13068 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_collect_order_by_part13070 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WITHIN_VK_in_within_clause13092 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_order_by_clause_in_within_clause13094 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COST_VK_in_cost_matrix_clause13116 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_MODEL_in_cost_matrix_clause13135 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_AUTO_VK_in_cost_matrix_clause13137 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_cost_class_name_in_cost_matrix_clause13157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_expression_list_in_cost_matrix_clause13160 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PASSING_VK_in_xml_passing_clause13205 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_VALUE_VK_in_xml_passing_clause13207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_xml_passing_clause13210 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_alias_in_xml_passing_clause13212 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_xml_passing_clause13216 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_alias_in_xml_passing_clause13218 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLATTRIBUTES_VK_in_xml_attributes_clause13243 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause13295 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_XMLNAMESPACES_VK_in_xml_namespaces_clause13327 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_namespaces_clause13342 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_alias_in_xml_namespaces_clause13344 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_xml_general_default_part_in_xml_namespaces_clause13349 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_COLUMN_in_xml_table_column13381 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_column_name_in_xml_table_column13383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ORDINALITY_VK_in_xml_table_column13386 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_type_spec_in_xml_table_column13388 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_xml_table_column13390 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L});
	public static final BitSet FOLLOW_xml_general_default_part_in_xml_table_column13393 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_xml_general_default_part13418 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_general_default_part13420 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ELEMENT_in_xml_multiuse_expression_element13442 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_multiuse_expression_element13444 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_xml_alias_in_xml_multiuse_expression_element13446 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ALIAS_in_xml_alias13469 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_xml_alias13471 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ALIAS_in_xml_alias13484 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_xml_alias13487 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_alias13489 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VERSION_VK_in_xml_param_version_part13512 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NO_VK_in_xml_param_version_part13515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_VALUE_VK_in_xml_param_version_part13517 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_xml_param_version_part13519 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STANDALONE_VK_in_xmlroot_param_standalone_part13542 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_YES_VK_in_xmlroot_param_standalone_part13545 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NO_VK_in_xmlroot_param_standalone_part13547 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_VALUE_VK_in_xmlroot_param_standalone_part13549 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ENCODING_VK_in_xmlserialize_param_enconding_part13573 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xmlserialize_param_enconding_part13575 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NO_VK_in_xmlserialize_param_ident_part13596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part13598 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part13610 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xmlserialize_param_ident_part13612 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_partition_extension_clause13639 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_partition_extension_clause13645 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALIAS_in_alias13667 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_alias13669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_alias13672 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHERE_in_where_clause13694 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_where_clause13696 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_into_clause13718 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_into_clause13720 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0004000000000020L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_BULK_VK_in_into_clause13735 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_into_clause13737 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0004000000000020L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_XML_COLUMN_NAME_in_xml_column_name13765 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_xml_column_name13767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_xml_column_name13770 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COST_CLASS_NAME_in_cost_class_name13792 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_cost_class_name13794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_cost_class_name13797 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ATTRIBUTE_NAME_in_attribute_name13819 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_attribute_name13821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_attribute_name13824 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAVEPOINT_NAME_in_savepoint_name13846 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_savepoint_name13848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_savepoint_name13851 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_SEGMENT_NAME_in_rollback_segment_name13873 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_rollback_segment_name13875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_rollback_segment_name13878 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_VAR_NAME_in_table_var_name13901 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_table_var_name13903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_table_var_name13906 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SCHEMA_NAME_in_schema_name13928 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_schema_name13930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_schema_name13933 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROUTINE_NAME_in_routine_name13955 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_routine_name13957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_routine_name13960 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000080L});
	public static final BitSet FOLLOW_link_name_in_routine_name13963 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PACKAGE_NAME_in_package_name13986 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_package_name13988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_package_name13991 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_IMPLEMENTATION_TYPE_NAME_in_implementation_type_name14014 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_implementation_type_name14016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_implementation_type_name14019 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_PARAMETER_NAME_in_parameter_name14042 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_parameter_name14044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_parameter_name14047 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCE_MODEL_NAME_in_reference_model_name14069 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_reference_model_name14071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_reference_model_name14074 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MAIN_MODEL_NAME_in_main_model_name14096 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_main_model_name14098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_main_model_name14101 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_QUERY_NAME_in_query_name14123 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_query_name14125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_query_name14128 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRAINT_NAME_in_constraint_name14150 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_constraint_name14152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_constraint_name14155 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000080L});
	public static final BitSet FOLLOW_link_name_in_constraint_name14158 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LABEL_NAME_in_label_name14181 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_label_name14183 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TYPE_NAME_in_type_name14205 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_type_name14207 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SEQUENCE_NAME_in_sequence_name14230 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_sequence_name14232 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_EXCEPTION_NAME_in_exception_name14255 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_exception_name14257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_exception_name14260 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_FUNCTION_NAME_in_function_name14283 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_function_name14285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_function_name14288 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_PROCEDURE_NAME_in_procedure_name14311 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_procedure_name14313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_procedure_name14316 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_TRIGGER_NAME_in_trigger_name14339 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_trigger_name14341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_trigger_name14344 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_HOSTED_VARIABLE_NAME_in_variable_name14367 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_variable_name14369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_variable_name14372 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_VARIABLE_NAME_in_variable_name14386 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_variable_name14388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_variable_name14391 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_INDEX_NAME_in_index_name14414 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_index_name14416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_index_name14419 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_NAME_in_cursor_name14441 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_cursor_name14443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_cursor_name14446 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RECORD_NAME_in_record_name14468 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_record_name14470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_record_name14473 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLLECTION_NAME_in_collection_name14495 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_collection_name14497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_collection_name14500 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LINK_NAME_in_link_name14523 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_link_name14525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_link_name14528 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLUMN_NAME_in_column_name14550 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_column_name14552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_column_name14555 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_TABLEVIEW_NAME_in_tableview_name14578 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_tableview_name14580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_tableview_name14583 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000080L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_link_name_in_tableview_name14586 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_partition_extension_clause_in_tableview_name14589 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CHAR_SET_NAME_in_char_set_name14612 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_char_set_name14614 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ARGUMENTS_in_function_argument14641 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_argument_in_function_argument14643 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ARGUMENT_in_argument14666 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_argument14668 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_parameter_name_in_argument14670 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CUSTOM_TYPE_in_type_spec14694 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_type_spec14696 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000006000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_REF_VK_in_type_spec14698 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000006000000000L});
	public static final BitSet FOLLOW_NATIVE_DATATYPE_in_type_spec14719 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_native_datatype_element_in_type_spec14721 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_type_precision_in_type_spec14723 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_TIME_VK_in_type_spec14727 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LOCAL_VK_in_type_spec14729 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INTERVAL_DATATYPE_in_type_spec14745 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_type_spec14747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_set_in_type_spec14753 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_type_spec14759 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_PRECISION_in_type_precision14782 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_constant_in_type_precision14784 = new BitSet(new long[]{0x0000200008008048L,0x4020000000000000L,0x0000080040002000L,0x0200080000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x1000000000000000L});
	public static final BitSet FOLLOW_constant_in_type_precision14786 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0200080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_TIME_VK_in_type_precision14797 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LOCAL_VK_in_type_precision14799 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BINARY_INTEGER_VK_in_native_datatype_element14823 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLS_INTEGER_VK_in_native_datatype_element14834 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NATURAL_VK_in_native_datatype_element14845 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BINARY_FLOAT_VK_in_native_datatype_element14856 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BINARY_DOUBLE_VK_in_native_datatype_element14867 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NATURALN_VK_in_native_datatype_element14878 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POSITIVE_VK_in_native_datatype_element14889 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POSITIVEN_VK_in_native_datatype_element14900 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SIGNTYPE_VK_in_native_datatype_element14911 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SIMPLE_INTEGER_VK_in_native_datatype_element14922 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NVARCHAR2_VK_in_native_datatype_element14933 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEC_VK_in_native_datatype_element14944 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_VK_in_native_datatype_element14955 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INT_VK_in_native_datatype_element14966 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NUMERIC_VK_in_native_datatype_element14977 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SMALLINT_VK_in_native_datatype_element14988 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NUMBER_VK_in_native_datatype_element14999 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECIMAL_VK_in_native_datatype_element15010 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOUBLE_VK_in_native_datatype_element15022 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_PRECISION_VK_in_native_datatype_element15024 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FLOAT_VK_in_native_datatype_element15036 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REAL_VK_in_native_datatype_element15047 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NCHAR_VK_in_native_datatype_element15058 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LONG_VK_in_native_datatype_element15069 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_RAW_VK_in_native_datatype_element15071 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHAR_VK_in_native_datatype_element15083 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHARACTER_VK_in_native_datatype_element15096 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARCHAR2_VK_in_native_datatype_element15108 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARCHAR_VK_in_native_datatype_element15119 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_VK_in_native_datatype_element15130 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RAW_VK_in_native_datatype_element15141 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BOOLEAN_VK_in_native_datatype_element15152 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATE_VK_in_native_datatype_element15163 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ROWID_VK_in_native_datatype_element15174 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UROWID_VK_in_native_datatype_element15185 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_YEAR_VK_in_native_datatype_element15196 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MONTH_VK_in_native_datatype_element15207 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DAY_VK_in_native_datatype_element15218 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HOUR_VK_in_native_datatype_element15229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUTE_VK_in_native_datatype_element15240 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SECOND_VK_in_native_datatype_element15251 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_HOUR_VK_in_native_datatype_element15262 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_MINUTE_VK_in_native_datatype_element15273 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_REGION_VK_in_native_datatype_element15284 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_ABBR_VK_in_native_datatype_element15295 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMESTAMP_VK_in_native_datatype_element15306 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMESTAMP_UNCONSTRAINED_VK_in_native_datatype_element15317 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMESTAMP_TZ_UNCONSTRAINED_VK_in_native_datatype_element15328 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMESTAMP_LTZ_UNCONSTRAINED_VK_in_native_datatype_element15339 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_YMINTERVAL_UNCONSTRAINED_VK_in_native_datatype_element15350 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DSINTERVAL_UNCONSTRAINED_VK_in_native_datatype_element15361 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BFILE_VK_in_native_datatype_element15372 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLOB_VK_in_native_datatype_element15383 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLOB_VK_in_native_datatype_element15394 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NCLOB_VK_in_native_datatype_element15405 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MLSLABEL_VK_in_native_datatype_element15416 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASCATED_ELEMENT_in_general_element15437 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_general_element15439 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0004000000000020L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_HOSTED_VARIABLE_ROUTINE_CALL_in_general_element15453 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_routine_name_in_general_element15455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_function_argument_in_general_element15457 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_HOSTED_VARIABLE_in_general_element15470 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_general_element15472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_general_element15475 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ROUTINE_CALL_in_general_element15489 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_routine_name_in_general_element15491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_function_argument_in_general_element15493 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ANY_ELEMENT_in_general_element15506 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_general_element15508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_general_element15511 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_constant15537 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUS_SIGN_in_constant15549 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_constant15551 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXACT_NUM_LIT_in_constant15563 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_APPROXIMATE_NUM_LIT_in_constant15574 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHAR_STRING_in_constant15585 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_constant15596 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TRUE_in_constant15607 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FALSE_in_constant15618 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DBTIMEZONE_VK_in_constant15629 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SESSIONTIMEZONE_VK_in_constant15641 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINVALUE_VK_in_constant15652 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MAXVALUE_VK_in_constant15663 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_constant15674 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_char_set_name_in_id15696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_id15699 = new BitSet(new long[]{0x0000000000000002L});
}
