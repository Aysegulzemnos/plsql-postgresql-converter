// $ANTLR 3.5.2 PLSQLPrinter.g 2014-09-11 15:04:27

/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2014 Bars Group
 */
package parser;


import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.stringtemplate.*;
import org.antlr.stringtemplate.language.*;
import java.util.HashMap;
/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2014 Bars Group
 */
@SuppressWarnings("all")
public class PLSQLPrinter extends TreeParser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "AMPERSAND", "APPROXIMATE_NUM_LIT", 
		"ASSIGN_OP", "ASTERISK", "AT_SIGN", "B", "BINDVAR", "BIT_STRING_LIT", 
		"C", "CARRET_OPERATOR_PART", "CHAR_STRING", "CHAR_STRING_PERL", "COLON", 
		"COMMA", "COMMENT", "CONCATENATION_OP", "D", "DELIMITED_ID", "DOUBLE_ASTERISK", 
		"DOUBLE_PERIOD", "E", "EQUALS_OP", "EXACT_NUM_LIT", "EXCLAMATION_OPERATOR_PART", 
		"F", "G", "GREATER_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "H", "HEX_STRING_LIT", 
		"I", "INTRODUCER", "J", "K", "L", "LEFT_BRACKET", "LEFT_PAREN", "LESS_THAN_OP", 
		"LESS_THAN_OR_EQUALS_OP", "M", "MINUS_SIGN", "N", "NATIONAL_CHAR_STRING_LIT", 
		"NEWLINE", "NOT_EQUAL_OP", "O", "P", "PERCENT", "PERIOD", "PLSQL_NON_RESERVED_CONNECT_BY_ROOT", 
		"PLSQL_NON_RESERVED_ELSIF", "PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_PIVOT", 
		"PLSQL_NON_RESERVED_UNPIVOT", "PLSQL_NON_RESERVED_USING", "PLSQL_RESERVED_CLUSTERS", 
		"PLSQL_RESERVED_COLAUTH", "PLSQL_RESERVED_COMPRESS", "PLSQL_RESERVED_CRASH", 
		"PLSQL_RESERVED_EXCLUSIVE", "PLSQL_RESERVED_IDENTIFIED", "PLSQL_RESERVED_IF", 
		"PLSQL_RESERVED_INDEX", "PLSQL_RESERVED_INDEXES", "PLSQL_RESERVED_LOCK", 
		"PLSQL_RESERVED_MINUS", "PLSQL_RESERVED_MODE", "PLSQL_RESERVED_NOCOMPRESS", 
		"PLSQL_RESERVED_NOWAIT", "PLSQL_RESERVED_RESOURCE", "PLSQL_RESERVED_SHARE", 
		"PLSQL_RESERVED_START", "PLSQL_RESERVED_TABAUTH", "PLSQL_RESERVED_VIEWS", 
		"PLUS_SIGN", "PROMPT", "Q", "QS_ANGLE", "QS_BRACE", "QS_BRACK", "QS_OTHER", 
		"QS_OTHER_CH", "QS_PAREN", "QUESTION_MARK", "QUOTE", "R", "REGULAR_ID", 
		"RIGHT_BRACKET", "RIGHT_PAREN", "S", "SEMICOLON", "SEPARATOR", "SIMPLE_LETTER", 
		"SOLIDUS", "SPACE", "SQL92_RESERVED_ALL", "SQL92_RESERVED_ALTER", "SQL92_RESERVED_AND", 
		"SQL92_RESERVED_ANY", "SQL92_RESERVED_AS", "SQL92_RESERVED_ASC", "SQL92_RESERVED_BEGIN", 
		"SQL92_RESERVED_BETWEEN", "SQL92_RESERVED_BY", "SQL92_RESERVED_CASE", 
		"SQL92_RESERVED_CHECK", "SQL92_RESERVED_CONNECT", "SQL92_RESERVED_CREATE", 
		"SQL92_RESERVED_CURRENT", "SQL92_RESERVED_CURSOR", "SQL92_RESERVED_DATE", 
		"SQL92_RESERVED_DECLARE", "SQL92_RESERVED_DEFAULT", "SQL92_RESERVED_DELETE", 
		"SQL92_RESERVED_DESC", "SQL92_RESERVED_DISTINCT", "SQL92_RESERVED_DROP", 
		"SQL92_RESERVED_ELSE", "SQL92_RESERVED_END", "SQL92_RESERVED_EXCEPTION", 
		"SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE", "SQL92_RESERVED_FETCH", 
		"SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", "SQL92_RESERVED_GOTO", "SQL92_RESERVED_GRANT", 
		"SQL92_RESERVED_GROUP", "SQL92_RESERVED_HAVING", "SQL92_RESERVED_IN", 
		"SQL92_RESERVED_INSERT", "SQL92_RESERVED_INTERSECT", "SQL92_RESERVED_INTO", 
		"SQL92_RESERVED_IS", "SQL92_RESERVED_LIKE", "SQL92_RESERVED_NOT", "SQL92_RESERVED_NULL", 
		"SQL92_RESERVED_OF", "SQL92_RESERVED_ON", "SQL92_RESERVED_OPTION", "SQL92_RESERVED_OR", 
		"SQL92_RESERVED_ORDER", "SQL92_RESERVED_OVERLAPS", "SQL92_RESERVED_PRIOR", 
		"SQL92_RESERVED_PROCEDURE", "SQL92_RESERVED_PUBLIC", "SQL92_RESERVED_REVOKE", 
		"SQL92_RESERVED_SELECT", "SQL92_RESERVED_SIZE", "SQL92_RESERVED_TABLE", 
		"SQL92_RESERVED_THE", "SQL92_RESERVED_THEN", "SQL92_RESERVED_TO", "SQL92_RESERVED_TRUE", 
		"SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", "SQL92_RESERVED_UPDATE", 
		"SQL92_RESERVED_VALUES", "SQL92_RESERVED_VIEW", "SQL92_RESERVED_WHEN", 
		"SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH", "T", "TILDE_OPERATOR_PART", 
		"U", "UNDERSCORE", "UNSIGNED_INTEGER", "V", "VERTICAL_BAR", "W", "X", 
		"Y", "Z", "ZV", "ADD_VK", "AFTER_EACH_ROW", "AFTER_STATEMENT", "AFTER_VK", 
		"AGENT_VK", "AGGREGATE_VK", "ALTER_ATTRIBUTE", "ALTER_COLLECTION", "ALTER_FUNCTION", 
		"ALTER_METHOD", "ALTER_METHOD_ELEMENT", "ALTER_PACKAGE", "ALTER_PROCEDURE", 
		"ALTER_SEQUENCE", "ALTER_TRIGGER", "ALTER_TYPE", "ANALYZE_VK", "ANY_ELEMENT", 
		"ANY_MODE", "ARGUMENT", "ARGUMENTS", "ASSIGN", "ASSOCIATE_VK", "ATTRIBUTE", 
		"ATTRIBUTES", "ATTRIBUTE_NAME", "AT_VK", "AUDIT_VK", "AUTHID_VK", "AUTOMATIC_VK", 
		"AUTONOMOUS_TRANSACTION_VK", "AUTO_VK", "BATCH_VK", "BEFORE_EACH_ROW", 
		"BEFORE_STATEMENT", "BEFORE_VK", "BFILE_VK", "BINARY_DOUBLE_VK", "BINARY_FLOAT_VK", 
		"BINARY_INTEGER_VK", "BIT_VK", "BLOB_VK", "BLOCK", "BLOCK_VK", "BODY", 
		"BODY_MODE", "BODY_VK", "BOOLEAN_VK", "BOTH_VK", "BREADTH_VK", "BULK_VK", 
		"BYTE_VK", "CACHE_VK", "CALL_MODE", "CALL_VK", "CANONICAL_VK", "CASCADE_VK", 
		"CASCATED_ELEMENT", "CAST_VK", "CHARACTER_VK", "CHAR_CS_VK", "CHAR_SET_NAME", 
		"CHAR_VK", "CHR_VK", "CLOB_VK", "CLOSE_VK", "CLUSTER_VK", "COLLECTION_MODE", 
		"COLLECTION_NAME", "COLLECT_VK", "COLUMNS", "COLUMN_ALIAS", "COLUMN_NAME", 
		"COMMENT_VK", "COMMITTED_VK", "COMMIT_VK", "COMPATIBILITY_VK", "COMPILATION_UNIT", 
		"COMPILER_PARAMETER", "COMPILE_VK", "COMPOUND_DML", "COMPOUND_VK", "CONDITIONAL_INSERT", 
		"CONSTANT_VK", "CONSTRAINT_NAME", "CONSTRUCTOR_SPEC", "CONSTRUCTOR_VK", 
		"CONTENT_VK", "CONTEXT_VK", "CONTINUE_VK", "CONVERT_VK", "CORRUPT_XID_ALL_VK", 
		"CORRUPT_XID_VK", "COST_CLASS_NAME", "COST_VK", "COUNT_VK", "CREATE_FUNCTION", 
		"CREATE_PACKAGE_BODY", "CREATE_PACKAGE_SPEC", "CREATE_PROCEDURE", "CREATE_SEQUENCE", 
		"CREATE_TRIGGER", "CREATE_TYPE_BODY", "CREATE_TYPE_SPEC", "CROSS_VK", 
		"CUBE_VK", "CURRENT_USER_VK", "CURRENT_VK", "CURSOR_BASED_FOR", "CURSOR_DECLARE", 
		"CURSOR_NAME", "CUSTOMDATUM_VK", "CUSTOM_TYPE", "CYCLE_VK", "C_VK", "DATABASE_VK", 
		"DATETIME_OP", "DAY_VK", "DBTIMEZONE_VK", "DB_ROLE_CHANGE_VK", "DDL_VK", 
		"DEBUG_VK", "DECIMAL_VK", "DECOMPOSE_VK", "DECREMENT_VK", "DEC_VK", "DEFAULTS_VK", 
		"DEFAULT_VALUE", "DEFERRED_VK", "DEFINER_VK", "DENSE_RANK_VK", "DEPENDENT_HANDLING", 
		"DEPTH_VK", "DETERMINISTIC_VK", "DIMENSION_VK", "DIRECT_MODE", "DISABLE_VK", 
		"DISASSOCIATE_VK", "DIV_VK", "DML_EVENT", "DML_EVENT_ELEMENT", "DOCUMENT_VK", 
		"DOT_ASTERISK", "DOUBLE_VK", "DROP_FUNCTION", "DROP_PACKAGE", "DROP_PROCEDURE", 
		"DROP_SEQUENCE", "DROP_TRIGGER", "DROP_TYPE", "DSINTERVAL_UNCONSTRAINED_VK", 
		"DYNAMIC_RETURN", "ELEMENT", "ELEMENTS_MODE", "ELEMENT_SPEC", "ENABLE_VK", 
		"ENCODING_VK", "ENTITYESCAPING_VK", "EVALNAME_VK", "EXCEPTIONS_VK", "EXCEPTION_DECLARE", 
		"EXCEPTION_INIT_VK", "EXCEPTION_NAME", "EXCLUDE_VK", "EXECUTE_VK", "EXIT_VK", 
		"EXPLAIN_STATEMENT", "EXPR", "EXPR_LIST", "EXTERNAL_MODE", "EXTERNAL_VK", 
		"EXTRACT_VK", "FACTORING", "FIELDS", "FIELD_SPEC", "FINAL_VK", "FIRST_VALUE_VK", 
		"FIRST_VK", "FLOAT_VK", "FOLLOWING_VK", "FOLLOWS_VK", "FORALL_VK", "FORCE_VK", 
		"FOR_EACH_ROW", "FOR_LOOP", "FOR_MULTI_COLUMN", "FOR_SINGLE_COLUMN", "FULL_VK", 
		"FUNCTION_ENABLING_OVER", "FUNCTION_ENABLING_USING", "FUNCTION_ENABLING_WITHIN_OR_OVER", 
		"FUNCTION_NAME", "FUNCTION_SPEC", "GROUPING_VK", "GROUPIN_SET", "GROUP_BY_ELEMENT", 
		"HASH_VK", "HIDE_VK", "HIERARCHICAL", "HOSTED_VARIABLE", "HOSTED_VARIABLE_NAME", 
		"HOSTED_VARIABLE_ROUTINE_CALL", "HOUR_VK", "ID", "IGNORE_VK", "IMMEDIATE_VK", 
		"IMPLEMENTATION_TYPE_NAME", "INCLUDE_VK", "INCLUDING_VK", "INCREMENT_VK", 
		"INDENT_VK", "INDEXED_BY", "INDEXED_FOR", "INDEX_NAME", "INDICES_BOUND", 
		"INLINE_VK", "INNER_VK", "INOUT_VK", "INSTANTIABLE_VK", "INSTEAD_VK", 
		"INTEGER_VK", "INTERVAL_DATATYPE", "INT_VK", "INVALIDATE_VK", "ISOLATION_VK", 
		"IS_A_SET", "IS_EMPTY", "IS_INFINITE", "IS_NAN", "IS_NOT_A_SET", "IS_NOT_EMPTY", 
		"IS_NOT_INFINITE", "IS_NOT_NAN", "IS_NOT_NULL", "IS_NOT_OF_TYPE", "IS_NOT_PRESENT", 
		"IS_NULL", "IS_OF_TYPE", "IS_PRESENT", "ITERATE_VK", "JAVA_VK", "JOIN_DEF", 
		"KEEP_VK", "LABEL_DECLARE", "LABEL_NAME", "LANGUAGE_VK", "LAST_VALUE_VK", 
		"LAST_VK", "LEADING_VK", "LEFT_VK", "LIBRARY_VK", "LIKE2_VK", "LIKE4_VK", 
		"LIKEC_VK", "LIMIT_VK", "LINK_NAME", "LOCAL_VK", "LOCK_TABLE_ELEMENT", 
		"LOGIC_EXPR", "LOGOFF_VK", "LOGON_VK", "LOG_VK", "LONG_VK", "LOOP_VK", 
		"MAIN_MODEL", "MAIN_MODEL_NAME", "MAP_VK", "MAXVALUE_VK", "MEASURES_VK", 
		"MEMBER_VK", "MERGE_INSERT", "MERGE_UPDATE", "MERGE_VK", "MINUTE_VK", 
		"MINVALUE_VK", "MLSLABEL_VK", "MODEL_COLUMN", "MODEL_COLUMNS", "MODEL_EXPRESSION", 
		"MODEL_RULE", "MODEL_RULES", "MODIFIER", "MODIFY_VK", "MOD_VK", "MONTH_VK", 
		"MULTI_TABLE_MODE", "NAME_VK", "NATIVE_DATATYPE", "NATURALN_VK", "NATURAL_VK", 
		"NAV_VK", "NCHAR_CS_VK", "NCHAR_VK", "NCLOB_VK", "NESTED_TABLE_TYPE_DEF", 
		"NESTED_VK", "NEW_VK", "NOAUDIT_VK", "NOCACHE_VK", "NOCOPY_VK", "NOCYCLE_VK", 
		"NOENTITYESCAPING_VK", "NOMAXVALUE_VK", "NOMINVALUE_VK", "NON_DML", "NOORDER_VK", 
		"NOSCHEMACHECK_VK", "NOT_BETWEEN", "NOT_IN", "NOT_LIKE", "NO_VK", "NULLS_VK", 
		"NUMBER_VK", "NUMERIC_VK", "NVARCHAR2_VK", "OBJECT_AS", "OBJECT_MEMBERS", 
		"OBJECT_TYPE_DEF", "OBJECT_VK", "OFF_VK", "OLD_VK", "ONLY_VK", "OPEN_VK", 
		"ORADATA_VK", "ORDER_BY_ELEMENT", "ORDER_BY_ELEMENTS", "ORDINALITY_VK", 
		"OUTER_JOIN_SIGN", "OUT_VK", "OVERRIDING_VK", "OVER_VK", "PACKAGE_NAME", 
		"PACKAGE_VK", "PARALLEL_ENABLE_VK", "PARAMETER", "PARAMETERS", "PARAMETERS_VK", 
		"PARAMETER_NAME", "PARENT_VK", "PARTITION_VK", "PASSING_VK", "PERCENT_FOUND_VK", 
		"PERCENT_ISOPEN_VK", "PERCENT_NOTFOUND_VK", "PERCENT_ROWCOUNT_VK", "PERCENT_ROWTYPE_VK", 
		"PERCENT_TYPE_VK", "PIPELINED_VK", "PIPE_ROW", "PIPE_VK", "PIVOT_ALIAS", 
		"PIVOT_ELEMENT", "PIVOT_IN_ELEMENT", "PIVOT_VK", "PLS_INTEGER_VK", "POSITIVEN_VK", 
		"POSITIVE_VK", "PRAGMA_DECLARE", "PRAGMA_VK", "PRECEDING_VK", "PRECISION", 
		"PRECISION_VK", "PREDICTION_FUNCTION", "PROCEDURE_NAME", "PROCEDURE_SPEC", 
		"QUERY_NAME", "RAISE_VK", "RANGE_VK", "RAW_VK", "READ_VK", "REAL_VK", 
		"RECORD_NAME", "RECORD_TYPE_DECLARE", "RECORD_VAR_DECLARE", "RECURSIVE_VK", 
		"REFERENCE_MODEL_NAME", "REFERENCE_VK", "REFERENCING_VK", "REF_VK", "REJECT_VK", 
		"RELIES_ON_VK", "RENAME_VK", "REPLACE_VK", "RESPECT_VK", "RESTRICT_REFERENCES_VK", 
		"RESULT_CACHE_VK", "RETURN_VK", "REUSE_VK", "REVERSE_VK", "RIGHT_VK", 
		"ROLLBACK_SEGMENT_NAME", "ROLLBACK_VK", "ROLLUP_VK", "ROUTINE_CALL", "ROUTINE_NAME", 
		"ROWID_VK", "ROWS_VK", "ROW_VK", "RULES_VK", "SAMPLE_VK", "SAVEPOINT_NAME", 
		"SAVEPOINT_VK", "SCHEMACHECK_VK", "SCHEMA_NAME", "SCHEMA_VK", "SCN_VK", 
		"SEARCHED_CASE", "SEARCH_VK", "SECOND_VK", "SEED_VK", "SELECTED_TABLEVIEW", 
		"SELECT_BASED_FOR", "SELECT_ITEM", "SELECT_LIST", "SELECT_MODE", "SELECT_STATEMENT", 
		"SELF_VK", "SEQUENCE_NAME", "SEQUENCE_VK", "SEQUENTIAL_VK", "SERIALIZABLE_VK", 
		"SERIALLY_REUSABLE_VK", "SERVERERROR_VK", "SESSIONTIMEZONE_VK", "SET_CONSTRAINT", 
		"SET_SERVEROUTPUT", "SET_TRANSACTION", "SET_VK", "SHOW_VK", "SHUTDOWN_VK", 
		"SIBLINGS_VK", "SIGNTYPE_VK", "SIMPLE_BOUND", "SIMPLE_CASE", "SIMPLE_DML", 
		"SIMPLE_INTEGER_VK", "SINGLE_TABLE_MODE", "SINGLE_VK", "SKIP_VK", "SMALLINT_VK", 
		"SOME_VK", "SPECIFICATION_VK", "SQLDATA_VK", "SQL_SCRIPT", "STANDALONE_VK", 
		"STANDARD_FUNCTION", "STARTUP_VK", "STATEMENTS", "STATIC_RETURNING", "STATIC_VK", 
		"STATISTICS_VK", "STREAMING_CLAUSE", "STRING_VK", "SUBMULTISET_VK", "SUBPARTITION_VK", 
		"SUBQUERY", "SUBTYPE_DECLARE", "SUSPEND_VK", "TABLEVIEW_NAME", "TABLE_ALIAS", 
		"TABLE_ELEMENT", "TABLE_EXPRESSION", "TABLE_REF", "TABLE_REF_ELEMENT", 
		"TABLE_TYPE_DECLARE", "TABLE_VAR_DECLARE", "TABLE_VAR_NAME", "THREE_DOTS", 
		"TIMESTAMP_LTZ_UNCONSTRAINED_VK", "TIMESTAMP_TZ_UNCONSTRAINED_VK", "TIMESTAMP_UNCONSTRAINED_VK", 
		"TIMESTAMP_VK", "TIMEZONE_ABBR_VK", "TIMEZONE_HOUR_VK", "TIMEZONE_MINUTE_VK", 
		"TIMEZONE_REGION_VK", "TIME_VK", "TRAILING_VK", "TRANSLATE_VK", "TREAT_VK", 
		"TRIGGER_NAME", "TRIM_VK", "TRUNCATE_VK", "TYPE_BODY_ELEMENTS", "TYPE_NAME", 
		"TYPE_VK", "UNARY_OPERATOR", "UNBOUNDED_VK", "UNDER_VK", "UNLIMITED_VK", 
		"UNPIVOT_IN_ELEMENT", "UNPIVOT_VK", "UNTIL_VK", "UPDATED_VK", "UPSERT_VK", 
		"UROWID_VK", "USING_MODE", "VALIDATE_VK", "VALUES_BOUND", "VALUE_VK", 
		"VARCHAR2_VK", "VARCHAR_VK", "VARIABLE_DECLARE", "VARIABLE_NAME", "VARR_ARRAY_DEF", 
		"VECTOR_EXPR", "VERSIONS_VK", "VERSION_VK", "WAIT_VK", "WELLFORMED_VK", 
		"WHILE_LOOP", "WITHIN_VK", "WORK_VK", "WRITE_VK", "XMLAGG_VK", "XMLATTRIBUTES_VK", 
		"XMLCAST_VK", "XMLCOLATTVAL_VK", "XMLELEMENT_VK", "XMLEXISTS_VK", "XMLFOREST_VK", 
		"XMLNAMESPACES_VK", "XMLPARSE_VK", "XMLPI_VK", "XMLQUERY_VK", "XMLROOT_VK", 
		"XMLSERIALIZE_VK", "XMLTABLE_VK", "XML_ALIAS", "XML_COLUMN", "XML_COLUMN_NAME", 
		"XML_ELEMENT", "XML_VK", "YEAR_VK", "YES_VK", "YMINTERVAL_UNCONSTRAINED_VK", 
		"DATE_VK", "ORDER_VK", "START_VK"
	};
	public static final int EOF=-1;
	public static final int A=4;
	public static final int AMPERSAND=5;
	public static final int APPROXIMATE_NUM_LIT=6;
	public static final int ASSIGN_OP=7;
	public static final int ASTERISK=8;
	public static final int AT_SIGN=9;
	public static final int B=10;
	public static final int BINDVAR=11;
	public static final int BIT_STRING_LIT=12;
	public static final int C=13;
	public static final int CARRET_OPERATOR_PART=14;
	public static final int CHAR_STRING=15;
	public static final int CHAR_STRING_PERL=16;
	public static final int COLON=17;
	public static final int COMMA=18;
	public static final int COMMENT=19;
	public static final int CONCATENATION_OP=20;
	public static final int D=21;
	public static final int DELIMITED_ID=22;
	public static final int DOUBLE_ASTERISK=23;
	public static final int DOUBLE_PERIOD=24;
	public static final int E=25;
	public static final int EQUALS_OP=26;
	public static final int EXACT_NUM_LIT=27;
	public static final int EXCLAMATION_OPERATOR_PART=28;
	public static final int F=29;
	public static final int G=30;
	public static final int GREATER_THAN_OP=31;
	public static final int GREATER_THAN_OR_EQUALS_OP=32;
	public static final int H=33;
	public static final int HEX_STRING_LIT=34;
	public static final int I=35;
	public static final int INTRODUCER=36;
	public static final int J=37;
	public static final int K=38;
	public static final int L=39;
	public static final int LEFT_BRACKET=40;
	public static final int LEFT_PAREN=41;
	public static final int LESS_THAN_OP=42;
	public static final int LESS_THAN_OR_EQUALS_OP=43;
	public static final int M=44;
	public static final int MINUS_SIGN=45;
	public static final int N=46;
	public static final int NATIONAL_CHAR_STRING_LIT=47;
	public static final int NEWLINE=48;
	public static final int NOT_EQUAL_OP=49;
	public static final int O=50;
	public static final int P=51;
	public static final int PERCENT=52;
	public static final int PERIOD=53;
	public static final int PLSQL_NON_RESERVED_CONNECT_BY_ROOT=54;
	public static final int PLSQL_NON_RESERVED_ELSIF=55;
	public static final int PLSQL_NON_RESERVED_MODEL=56;
	public static final int PLSQL_NON_RESERVED_PIVOT=57;
	public static final int PLSQL_NON_RESERVED_UNPIVOT=58;
	public static final int PLSQL_NON_RESERVED_USING=59;
	public static final int PLSQL_RESERVED_CLUSTERS=60;
	public static final int PLSQL_RESERVED_COLAUTH=61;
	public static final int PLSQL_RESERVED_COMPRESS=62;
	public static final int PLSQL_RESERVED_CRASH=63;
	public static final int PLSQL_RESERVED_EXCLUSIVE=64;
	public static final int PLSQL_RESERVED_IDENTIFIED=65;
	public static final int PLSQL_RESERVED_IF=66;
	public static final int PLSQL_RESERVED_INDEX=67;
	public static final int PLSQL_RESERVED_INDEXES=68;
	public static final int PLSQL_RESERVED_LOCK=69;
	public static final int PLSQL_RESERVED_MINUS=70;
	public static final int PLSQL_RESERVED_MODE=71;
	public static final int PLSQL_RESERVED_NOCOMPRESS=72;
	public static final int PLSQL_RESERVED_NOWAIT=73;
	public static final int PLSQL_RESERVED_RESOURCE=74;
	public static final int PLSQL_RESERVED_SHARE=75;
	public static final int PLSQL_RESERVED_START=76;
	public static final int PLSQL_RESERVED_TABAUTH=77;
	public static final int PLSQL_RESERVED_VIEWS=78;
	public static final int PLUS_SIGN=79;
	public static final int PROMPT=80;
	public static final int Q=81;
	public static final int QS_ANGLE=82;
	public static final int QS_BRACE=83;
	public static final int QS_BRACK=84;
	public static final int QS_OTHER=85;
	public static final int QS_OTHER_CH=86;
	public static final int QS_PAREN=87;
	public static final int QUESTION_MARK=88;
	public static final int QUOTE=89;
	public static final int R=90;
	public static final int REGULAR_ID=91;
	public static final int RIGHT_BRACKET=92;
	public static final int RIGHT_PAREN=93;
	public static final int S=94;
	public static final int SEMICOLON=95;
	public static final int SEPARATOR=96;
	public static final int SIMPLE_LETTER=97;
	public static final int SOLIDUS=98;
	public static final int SPACE=99;
	public static final int SQL92_RESERVED_ALL=100;
	public static final int SQL92_RESERVED_ALTER=101;
	public static final int SQL92_RESERVED_AND=102;
	public static final int SQL92_RESERVED_ANY=103;
	public static final int SQL92_RESERVED_AS=104;
	public static final int SQL92_RESERVED_ASC=105;
	public static final int SQL92_RESERVED_BEGIN=106;
	public static final int SQL92_RESERVED_BETWEEN=107;
	public static final int SQL92_RESERVED_BY=108;
	public static final int SQL92_RESERVED_CASE=109;
	public static final int SQL92_RESERVED_CHECK=110;
	public static final int SQL92_RESERVED_CONNECT=111;
	public static final int SQL92_RESERVED_CREATE=112;
	public static final int SQL92_RESERVED_CURRENT=113;
	public static final int SQL92_RESERVED_CURSOR=114;
	public static final int SQL92_RESERVED_DATE=115;
	public static final int SQL92_RESERVED_DECLARE=116;
	public static final int SQL92_RESERVED_DEFAULT=117;
	public static final int SQL92_RESERVED_DELETE=118;
	public static final int SQL92_RESERVED_DESC=119;
	public static final int SQL92_RESERVED_DISTINCT=120;
	public static final int SQL92_RESERVED_DROP=121;
	public static final int SQL92_RESERVED_ELSE=122;
	public static final int SQL92_RESERVED_END=123;
	public static final int SQL92_RESERVED_EXCEPTION=124;
	public static final int SQL92_RESERVED_EXISTS=125;
	public static final int SQL92_RESERVED_FALSE=126;
	public static final int SQL92_RESERVED_FETCH=127;
	public static final int SQL92_RESERVED_FOR=128;
	public static final int SQL92_RESERVED_FROM=129;
	public static final int SQL92_RESERVED_GOTO=130;
	public static final int SQL92_RESERVED_GRANT=131;
	public static final int SQL92_RESERVED_GROUP=132;
	public static final int SQL92_RESERVED_HAVING=133;
	public static final int SQL92_RESERVED_IN=134;
	public static final int SQL92_RESERVED_INSERT=135;
	public static final int SQL92_RESERVED_INTERSECT=136;
	public static final int SQL92_RESERVED_INTO=137;
	public static final int SQL92_RESERVED_IS=138;
	public static final int SQL92_RESERVED_LIKE=139;
	public static final int SQL92_RESERVED_NOT=140;
	public static final int SQL92_RESERVED_NULL=141;
	public static final int SQL92_RESERVED_OF=142;
	public static final int SQL92_RESERVED_ON=143;
	public static final int SQL92_RESERVED_OPTION=144;
	public static final int SQL92_RESERVED_OR=145;
	public static final int SQL92_RESERVED_ORDER=146;
	public static final int SQL92_RESERVED_OVERLAPS=147;
	public static final int SQL92_RESERVED_PRIOR=148;
	public static final int SQL92_RESERVED_PROCEDURE=149;
	public static final int SQL92_RESERVED_PUBLIC=150;
	public static final int SQL92_RESERVED_REVOKE=151;
	public static final int SQL92_RESERVED_SELECT=152;
	public static final int SQL92_RESERVED_SIZE=153;
	public static final int SQL92_RESERVED_TABLE=154;
	public static final int SQL92_RESERVED_THE=155;
	public static final int SQL92_RESERVED_THEN=156;
	public static final int SQL92_RESERVED_TO=157;
	public static final int SQL92_RESERVED_TRUE=158;
	public static final int SQL92_RESERVED_UNION=159;
	public static final int SQL92_RESERVED_UNIQUE=160;
	public static final int SQL92_RESERVED_UPDATE=161;
	public static final int SQL92_RESERVED_VALUES=162;
	public static final int SQL92_RESERVED_VIEW=163;
	public static final int SQL92_RESERVED_WHEN=164;
	public static final int SQL92_RESERVED_WHERE=165;
	public static final int SQL92_RESERVED_WITH=166;
	public static final int T=167;
	public static final int TILDE_OPERATOR_PART=168;
	public static final int U=169;
	public static final int UNDERSCORE=170;
	public static final int UNSIGNED_INTEGER=171;
	public static final int V=172;
	public static final int VERTICAL_BAR=173;
	public static final int W=174;
	public static final int X=175;
	public static final int Y=176;
	public static final int Z=177;
	public static final int ZV=178;
	public static final int ADD_VK=179;
	public static final int AFTER_EACH_ROW=180;
	public static final int AFTER_STATEMENT=181;
	public static final int AFTER_VK=182;
	public static final int AGENT_VK=183;
	public static final int AGGREGATE_VK=184;
	public static final int ALTER_ATTRIBUTE=185;
	public static final int ALTER_COLLECTION=186;
	public static final int ALTER_FUNCTION=187;
	public static final int ALTER_METHOD=188;
	public static final int ALTER_METHOD_ELEMENT=189;
	public static final int ALTER_PACKAGE=190;
	public static final int ALTER_PROCEDURE=191;
	public static final int ALTER_SEQUENCE=192;
	public static final int ALTER_TRIGGER=193;
	public static final int ALTER_TYPE=194;
	public static final int ANALYZE_VK=195;
	public static final int ANY_ELEMENT=196;
	public static final int ANY_MODE=197;
	public static final int ARGUMENT=199;
	public static final int ARGUMENTS=200;
	public static final int ASSIGN=201;
	public static final int ASSOCIATE_VK=202;
	public static final int ATTRIBUTE=204;
	public static final int ATTRIBUTES=205;
	public static final int ATTRIBUTE_NAME=206;
	public static final int AT_VK=208;
	public static final int AUDIT_VK=209;
	public static final int AUTHID_VK=210;
	public static final int AUTOMATIC_VK=211;
	public static final int AUTONOMOUS_TRANSACTION_VK=212;
	public static final int AUTO_VK=213;
	public static final int BATCH_VK=214;
	public static final int BEFORE_EACH_ROW=215;
	public static final int BEFORE_STATEMENT=216;
	public static final int BEFORE_VK=217;
	public static final int BFILE_VK=218;
	public static final int BINARY_DOUBLE_VK=219;
	public static final int BINARY_FLOAT_VK=220;
	public static final int BINARY_INTEGER_VK=221;
	public static final int BIT_VK=223;
	public static final int BLOB_VK=224;
	public static final int BLOCK=225;
	public static final int BLOCK_VK=226;
	public static final int BODY=227;
	public static final int BODY_MODE=228;
	public static final int BODY_VK=229;
	public static final int BOOLEAN_VK=230;
	public static final int BOTH_VK=231;
	public static final int BREADTH_VK=232;
	public static final int BULK_VK=233;
	public static final int BYTE_VK=234;
	public static final int CACHE_VK=235;
	public static final int CALL_MODE=236;
	public static final int CALL_VK=237;
	public static final int CANONICAL_VK=238;
	public static final int CASCADE_VK=240;
	public static final int CASCATED_ELEMENT=241;
	public static final int CAST_VK=242;
	public static final int CHARACTER_VK=243;
	public static final int CHAR_CS_VK=244;
	public static final int CHAR_SET_NAME=245;
	public static final int CHAR_VK=248;
	public static final int CHR_VK=249;
	public static final int CLOB_VK=250;
	public static final int CLOSE_VK=251;
	public static final int CLUSTER_VK=252;
	public static final int COLLECTION_MODE=253;
	public static final int COLLECTION_NAME=254;
	public static final int COLLECT_VK=255;
	public static final int COLUMNS=257;
	public static final int COLUMN_ALIAS=258;
	public static final int COLUMN_NAME=259;
	public static final int COMMENT_VK=261;
	public static final int COMMITTED_VK=262;
	public static final int COMMIT_VK=263;
	public static final int COMPATIBILITY_VK=264;
	public static final int COMPILATION_UNIT=265;
	public static final int COMPILER_PARAMETER=266;
	public static final int COMPILE_VK=267;
	public static final int COMPOUND_DML=268;
	public static final int COMPOUND_VK=269;
	public static final int CONDITIONAL_INSERT=271;
	public static final int CONSTANT_VK=272;
	public static final int CONSTRAINT_NAME=273;
	public static final int CONSTRUCTOR_SPEC=274;
	public static final int CONSTRUCTOR_VK=275;
	public static final int CONTENT_VK=276;
	public static final int CONTEXT_VK=277;
	public static final int CONTINUE_VK=278;
	public static final int CONVERT_VK=279;
	public static final int CORRUPT_XID_ALL_VK=280;
	public static final int CORRUPT_XID_VK=281;
	public static final int COST_CLASS_NAME=282;
	public static final int COST_VK=283;
	public static final int COUNT_VK=284;
	public static final int CREATE_FUNCTION=285;
	public static final int CREATE_PACKAGE_BODY=286;
	public static final int CREATE_PACKAGE_SPEC=287;
	public static final int CREATE_PROCEDURE=288;
	public static final int CREATE_SEQUENCE=289;
	public static final int CREATE_TRIGGER=290;
	public static final int CREATE_TYPE_BODY=291;
	public static final int CREATE_TYPE_SPEC=292;
	public static final int CROSS_VK=293;
	public static final int CUBE_VK=294;
	public static final int CURRENT_USER_VK=295;
	public static final int CURRENT_VK=296;
	public static final int CURSOR_BASED_FOR=297;
	public static final int CURSOR_DECLARE=298;
	public static final int CURSOR_NAME=299;
	public static final int CUSTOMDATUM_VK=300;
	public static final int CUSTOM_TYPE=301;
	public static final int CYCLE_VK=302;
	public static final int C_VK=303;
	public static final int DATABASE_VK=304;
	public static final int DATETIME_OP=305;
	public static final int DAY_VK=306;
	public static final int DBTIMEZONE_VK=307;
	public static final int DB_ROLE_CHANGE_VK=308;
	public static final int DDL_VK=309;
	public static final int DEBUG_VK=310;
	public static final int DECIMAL_VK=311;
	public static final int DECOMPOSE_VK=312;
	public static final int DECREMENT_VK=313;
	public static final int DEC_VK=314;
	public static final int DEFAULTS_VK=315;
	public static final int DEFAULT_VALUE=316;
	public static final int DEFERRED_VK=317;
	public static final int DEFINER_VK=318;
	public static final int DENSE_RANK_VK=320;
	public static final int DEPENDENT_HANDLING=321;
	public static final int DEPTH_VK=322;
	public static final int DETERMINISTIC_VK=323;
	public static final int DIMENSION_VK=324;
	public static final int DIRECT_MODE=325;
	public static final int DISABLE_VK=326;
	public static final int DISASSOCIATE_VK=327;
	public static final int DIV_VK=328;
	public static final int DML_EVENT=329;
	public static final int DML_EVENT_ELEMENT=330;
	public static final int DOCUMENT_VK=331;
	public static final int DOT_ASTERISK=332;
	public static final int DOUBLE_VK=333;
	public static final int DROP_FUNCTION=334;
	public static final int DROP_PACKAGE=335;
	public static final int DROP_PROCEDURE=336;
	public static final int DROP_SEQUENCE=337;
	public static final int DROP_TRIGGER=338;
	public static final int DROP_TYPE=339;
	public static final int DSINTERVAL_UNCONSTRAINED_VK=340;
	public static final int DYNAMIC_RETURN=341;
	public static final int ELEMENT=342;
	public static final int ELEMENTS_MODE=343;
	public static final int ELEMENT_SPEC=344;
	public static final int ENABLE_VK=345;
	public static final int ENCODING_VK=346;
	public static final int ENTITYESCAPING_VK=347;
	public static final int EVALNAME_VK=349;
	public static final int EXCEPTIONS_VK=351;
	public static final int EXCEPTION_DECLARE=352;
	public static final int EXCEPTION_INIT_VK=353;
	public static final int EXCEPTION_NAME=354;
	public static final int EXCLUDE_VK=356;
	public static final int EXECUTE_VK=357;
	public static final int EXIT_VK=358;
	public static final int EXPLAIN_STATEMENT=359;
	public static final int EXPR=360;
	public static final int EXPR_LIST=361;
	public static final int EXTERNAL_MODE=362;
	public static final int EXTERNAL_VK=363;
	public static final int EXTRACT_VK=364;
	public static final int FACTORING=365;
	public static final int FIELDS=366;
	public static final int FIELD_SPEC=367;
	public static final int FINAL_VK=368;
	public static final int FIRST_VALUE_VK=369;
	public static final int FIRST_VK=370;
	public static final int FLOAT_VK=371;
	public static final int FOLLOWING_VK=372;
	public static final int FOLLOWS_VK=373;
	public static final int FORALL_VK=374;
	public static final int FORCE_VK=375;
	public static final int FOR_EACH_ROW=376;
	public static final int FOR_LOOP=377;
	public static final int FOR_MULTI_COLUMN=378;
	public static final int FOR_SINGLE_COLUMN=379;
	public static final int FULL_VK=380;
	public static final int FUNCTION_ENABLING_OVER=381;
	public static final int FUNCTION_ENABLING_USING=382;
	public static final int FUNCTION_ENABLING_WITHIN_OR_OVER=383;
	public static final int FUNCTION_NAME=384;
	public static final int FUNCTION_SPEC=385;
	public static final int GROUPING_VK=388;
	public static final int GROUPIN_SET=389;
	public static final int GROUP_BY_ELEMENT=390;
	public static final int HASH_VK=391;
	public static final int HIDE_VK=392;
	public static final int HIERARCHICAL=393;
	public static final int HOSTED_VARIABLE=394;
	public static final int HOSTED_VARIABLE_NAME=395;
	public static final int HOSTED_VARIABLE_ROUTINE_CALL=396;
	public static final int HOUR_VK=397;
	public static final int ID=398;
	public static final int IGNORE_VK=399;
	public static final int IMMEDIATE_VK=400;
	public static final int IMPLEMENTATION_TYPE_NAME=401;
	public static final int INCLUDE_VK=402;
	public static final int INCLUDING_VK=403;
	public static final int INCREMENT_VK=404;
	public static final int INDENT_VK=405;
	public static final int INDEXED_BY=406;
	public static final int INDEXED_FOR=407;
	public static final int INDEX_NAME=408;
	public static final int INDICES_BOUND=409;
	public static final int INLINE_VK=410;
	public static final int INNER_VK=411;
	public static final int INOUT_VK=412;
	public static final int INSTANTIABLE_VK=413;
	public static final int INSTEAD_VK=414;
	public static final int INTEGER_VK=415;
	public static final int INTERVAL_DATATYPE=416;
	public static final int INT_VK=418;
	public static final int INVALIDATE_VK=419;
	public static final int ISOLATION_VK=420;
	public static final int IS_A_SET=421;
	public static final int IS_EMPTY=422;
	public static final int IS_INFINITE=423;
	public static final int IS_NAN=424;
	public static final int IS_NOT_A_SET=425;
	public static final int IS_NOT_EMPTY=426;
	public static final int IS_NOT_INFINITE=427;
	public static final int IS_NOT_NAN=428;
	public static final int IS_NOT_NULL=429;
	public static final int IS_NOT_OF_TYPE=430;
	public static final int IS_NOT_PRESENT=431;
	public static final int IS_NULL=432;
	public static final int IS_OF_TYPE=433;
	public static final int IS_PRESENT=434;
	public static final int ITERATE_VK=435;
	public static final int JAVA_VK=436;
	public static final int JOIN_DEF=437;
	public static final int KEEP_VK=438;
	public static final int LABEL_DECLARE=439;
	public static final int LABEL_NAME=440;
	public static final int LANGUAGE_VK=441;
	public static final int LAST_VALUE_VK=442;
	public static final int LAST_VK=443;
	public static final int LEADING_VK=444;
	public static final int LEFT_VK=447;
	public static final int LIBRARY_VK=450;
	public static final int LIKE2_VK=451;
	public static final int LIKE4_VK=452;
	public static final int LIKEC_VK=453;
	public static final int LIMIT_VK=454;
	public static final int LINK_NAME=455;
	public static final int LOCAL_VK=456;
	public static final int LOCK_TABLE_ELEMENT=457;
	public static final int LOGIC_EXPR=458;
	public static final int LOGOFF_VK=459;
	public static final int LOGON_VK=460;
	public static final int LOG_VK=461;
	public static final int LONG_VK=462;
	public static final int LOOP_VK=463;
	public static final int MAIN_MODEL=464;
	public static final int MAIN_MODEL_NAME=465;
	public static final int MAP_VK=466;
	public static final int MAXVALUE_VK=467;
	public static final int MEASURES_VK=468;
	public static final int MEMBER_VK=469;
	public static final int MERGE_INSERT=470;
	public static final int MERGE_UPDATE=471;
	public static final int MERGE_VK=472;
	public static final int MINUTE_VK=474;
	public static final int MINVALUE_VK=475;
	public static final int MLSLABEL_VK=476;
	public static final int MODEL_COLUMN=477;
	public static final int MODEL_COLUMNS=478;
	public static final int MODEL_EXPRESSION=479;
	public static final int MODEL_RULE=480;
	public static final int MODEL_RULES=481;
	public static final int MODIFIER=482;
	public static final int MODIFY_VK=483;
	public static final int MOD_VK=484;
	public static final int MONTH_VK=485;
	public static final int MULTI_TABLE_MODE=486;
	public static final int NAME_VK=487;
	public static final int NATIVE_DATATYPE=489;
	public static final int NATURALN_VK=490;
	public static final int NATURAL_VK=491;
	public static final int NAV_VK=492;
	public static final int NCHAR_CS_VK=493;
	public static final int NCHAR_VK=494;
	public static final int NCLOB_VK=495;
	public static final int NESTED_TABLE_TYPE_DEF=496;
	public static final int NESTED_VK=497;
	public static final int NEW_VK=498;
	public static final int NOAUDIT_VK=499;
	public static final int NOCACHE_VK=500;
	public static final int NOCOPY_VK=501;
	public static final int NOCYCLE_VK=502;
	public static final int NOENTITYESCAPING_VK=503;
	public static final int NOMAXVALUE_VK=504;
	public static final int NOMINVALUE_VK=505;
	public static final int NON_DML=506;
	public static final int NOORDER_VK=507;
	public static final int NOSCHEMACHECK_VK=508;
	public static final int NOT_BETWEEN=509;
	public static final int NOT_IN=511;
	public static final int NOT_LIKE=512;
	public static final int NO_VK=513;
	public static final int NULLS_VK=514;
	public static final int NUMBER_VK=515;
	public static final int NUMERIC_VK=516;
	public static final int NVARCHAR2_VK=517;
	public static final int OBJECT_AS=518;
	public static final int OBJECT_MEMBERS=519;
	public static final int OBJECT_TYPE_DEF=520;
	public static final int OBJECT_VK=521;
	public static final int OFF_VK=522;
	public static final int OLD_VK=523;
	public static final int ONLY_VK=524;
	public static final int OPEN_VK=525;
	public static final int ORADATA_VK=526;
	public static final int ORDER_BY_ELEMENT=527;
	public static final int ORDER_BY_ELEMENTS=528;
	public static final int ORDINALITY_VK=529;
	public static final int OUTER_JOIN_SIGN=530;
	public static final int OUT_VK=531;
	public static final int OVERRIDING_VK=532;
	public static final int OVER_VK=533;
	public static final int PACKAGE_NAME=534;
	public static final int PACKAGE_VK=535;
	public static final int PARALLEL_ENABLE_VK=536;
	public static final int PARAMETER=537;
	public static final int PARAMETERS=538;
	public static final int PARAMETERS_VK=539;
	public static final int PARAMETER_NAME=540;
	public static final int PARENT_VK=541;
	public static final int PARTITION_VK=542;
	public static final int PASSING_VK=543;
	public static final int PERCENT_FOUND_VK=545;
	public static final int PERCENT_ISOPEN_VK=546;
	public static final int PERCENT_NOTFOUND_VK=547;
	public static final int PERCENT_ROWCOUNT_VK=548;
	public static final int PERCENT_ROWTYPE_VK=549;
	public static final int PERCENT_TYPE_VK=550;
	public static final int PIPELINED_VK=552;
	public static final int PIPE_ROW=553;
	public static final int PIPE_VK=554;
	public static final int PIVOT_ALIAS=555;
	public static final int PIVOT_ELEMENT=556;
	public static final int PIVOT_IN_ELEMENT=557;
	public static final int PIVOT_VK=558;
	public static final int PLS_INTEGER_VK=573;
	public static final int POSITIVEN_VK=575;
	public static final int POSITIVE_VK=576;
	public static final int PRAGMA_DECLARE=577;
	public static final int PRAGMA_VK=578;
	public static final int PRECEDING_VK=579;
	public static final int PRECISION=580;
	public static final int PRECISION_VK=581;
	public static final int PREDICTION_FUNCTION=582;
	public static final int PROCEDURE_NAME=583;
	public static final int PROCEDURE_SPEC=584;
	public static final int QUERY_NAME=586;
	public static final int RAISE_VK=587;
	public static final int RANGE_VK=588;
	public static final int RAW_VK=589;
	public static final int READ_VK=590;
	public static final int REAL_VK=591;
	public static final int RECORD_NAME=592;
	public static final int RECORD_TYPE_DECLARE=593;
	public static final int RECORD_VAR_DECLARE=594;
	public static final int RECURSIVE_VK=595;
	public static final int REFERENCE_MODEL_NAME=596;
	public static final int REFERENCE_VK=597;
	public static final int REFERENCING_VK=598;
	public static final int REF_VK=599;
	public static final int REJECT_VK=601;
	public static final int RELIES_ON_VK=602;
	public static final int RENAME_VK=603;
	public static final int REPLACE_VK=604;
	public static final int RESPECT_VK=605;
	public static final int RESTRICT_REFERENCES_VK=606;
	public static final int RESULT_CACHE_VK=607;
	public static final int RETURN_VK=608;
	public static final int REUSE_VK=609;
	public static final int REVERSE_VK=610;
	public static final int RIGHT_VK=613;
	public static final int ROLLBACK_SEGMENT_NAME=614;
	public static final int ROLLBACK_VK=615;
	public static final int ROLLUP_VK=616;
	public static final int ROUTINE_CALL=617;
	public static final int ROUTINE_NAME=618;
	public static final int ROWID_VK=619;
	public static final int ROWS_VK=620;
	public static final int ROW_VK=621;
	public static final int RULES_VK=622;
	public static final int SAMPLE_VK=623;
	public static final int SAVEPOINT_NAME=624;
	public static final int SAVEPOINT_VK=625;
	public static final int SCHEMACHECK_VK=626;
	public static final int SCHEMA_NAME=627;
	public static final int SCHEMA_VK=628;
	public static final int SCN_VK=629;
	public static final int SEARCHED_CASE=630;
	public static final int SEARCH_VK=631;
	public static final int SECOND_VK=632;
	public static final int SEED_VK=633;
	public static final int SELECTED_TABLEVIEW=634;
	public static final int SELECT_BASED_FOR=635;
	public static final int SELECT_ITEM=636;
	public static final int SELECT_LIST=637;
	public static final int SELECT_MODE=638;
	public static final int SELECT_STATEMENT=639;
	public static final int SELF_VK=640;
	public static final int SEQUENCE_NAME=642;
	public static final int SEQUENCE_VK=643;
	public static final int SEQUENTIAL_VK=644;
	public static final int SERIALIZABLE_VK=645;
	public static final int SERIALLY_REUSABLE_VK=646;
	public static final int SERVERERROR_VK=647;
	public static final int SESSIONTIMEZONE_VK=648;
	public static final int SET_CONSTRAINT=649;
	public static final int SET_SERVEROUTPUT=650;
	public static final int SET_TRANSACTION=651;
	public static final int SET_VK=652;
	public static final int SHOW_VK=653;
	public static final int SHUTDOWN_VK=654;
	public static final int SIBLINGS_VK=655;
	public static final int SIGNTYPE_VK=656;
	public static final int SIMPLE_BOUND=657;
	public static final int SIMPLE_CASE=658;
	public static final int SIMPLE_DML=659;
	public static final int SIMPLE_INTEGER_VK=660;
	public static final int SINGLE_TABLE_MODE=661;
	public static final int SINGLE_VK=662;
	public static final int SKIP_VK=663;
	public static final int SMALLINT_VK=664;
	public static final int SOME_VK=666;
	public static final int SPECIFICATION_VK=667;
	public static final int SQLDATA_VK=732;
	public static final int SQL_SCRIPT=733;
	public static final int STANDALONE_VK=734;
	public static final int STANDARD_FUNCTION=735;
	public static final int STARTUP_VK=736;
	public static final int STATEMENTS=737;
	public static final int STATIC_RETURNING=738;
	public static final int STATIC_VK=739;
	public static final int STATISTICS_VK=740;
	public static final int STREAMING_CLAUSE=741;
	public static final int STRING_VK=742;
	public static final int SUBMULTISET_VK=743;
	public static final int SUBPARTITION_VK=744;
	public static final int SUBQUERY=745;
	public static final int SUBTYPE_DECLARE=746;
	public static final int SUSPEND_VK=747;
	public static final int TABLEVIEW_NAME=748;
	public static final int TABLE_ALIAS=749;
	public static final int TABLE_ELEMENT=750;
	public static final int TABLE_EXPRESSION=751;
	public static final int TABLE_REF=752;
	public static final int TABLE_REF_ELEMENT=753;
	public static final int TABLE_TYPE_DECLARE=754;
	public static final int TABLE_VAR_DECLARE=755;
	public static final int TABLE_VAR_NAME=756;
	public static final int THREE_DOTS=757;
	public static final int TIMESTAMP_LTZ_UNCONSTRAINED_VK=758;
	public static final int TIMESTAMP_TZ_UNCONSTRAINED_VK=759;
	public static final int TIMESTAMP_UNCONSTRAINED_VK=760;
	public static final int TIMESTAMP_VK=761;
	public static final int TIMEZONE_ABBR_VK=762;
	public static final int TIMEZONE_HOUR_VK=763;
	public static final int TIMEZONE_MINUTE_VK=764;
	public static final int TIMEZONE_REGION_VK=765;
	public static final int TIME_VK=766;
	public static final int TRAILING_VK=767;
	public static final int TRANSLATE_VK=768;
	public static final int TREAT_VK=769;
	public static final int TRIGGER_NAME=770;
	public static final int TRIM_VK=771;
	public static final int TRUNCATE_VK=772;
	public static final int TYPE_BODY_ELEMENTS=773;
	public static final int TYPE_NAME=774;
	public static final int TYPE_VK=775;
	public static final int UNARY_OPERATOR=776;
	public static final int UNBOUNDED_VK=777;
	public static final int UNDER_VK=778;
	public static final int UNLIMITED_VK=779;
	public static final int UNPIVOT_IN_ELEMENT=780;
	public static final int UNPIVOT_VK=781;
	public static final int UNTIL_VK=783;
	public static final int UPDATED_VK=784;
	public static final int UPSERT_VK=785;
	public static final int UROWID_VK=786;
	public static final int USING_MODE=787;
	public static final int VALIDATE_VK=788;
	public static final int VALUES_BOUND=789;
	public static final int VALUE_VK=790;
	public static final int VARCHAR2_VK=791;
	public static final int VARCHAR_VK=792;
	public static final int VARIABLE_DECLARE=793;
	public static final int VARIABLE_NAME=794;
	public static final int VARR_ARRAY_DEF=795;
	public static final int VECTOR_EXPR=796;
	public static final int VERSIONS_VK=797;
	public static final int VERSION_VK=798;
	public static final int WAIT_VK=800;
	public static final int WELLFORMED_VK=801;
	public static final int WHILE_LOOP=802;
	public static final int WITHIN_VK=803;
	public static final int WORK_VK=804;
	public static final int WRITE_VK=805;
	public static final int XMLAGG_VK=806;
	public static final int XMLATTRIBUTES_VK=807;
	public static final int XMLCAST_VK=808;
	public static final int XMLCOLATTVAL_VK=809;
	public static final int XMLELEMENT_VK=810;
	public static final int XMLEXISTS_VK=811;
	public static final int XMLFOREST_VK=812;
	public static final int XMLNAMESPACES_VK=813;
	public static final int XMLPARSE_VK=814;
	public static final int XMLPI_VK=815;
	public static final int XMLQUERY_VK=816;
	public static final int XMLROOT_VK=817;
	public static final int XMLSERIALIZE_VK=818;
	public static final int XMLTABLE_VK=819;
	public static final int XML_ALIAS=820;
	public static final int XML_COLUMN=821;
	public static final int XML_COLUMN_NAME=822;
	public static final int XML_ELEMENT=823;
	public static final int XML_VK=824;
	public static final int YEAR_VK=825;
	public static final int YES_VK=826;
	public static final int YMINTERVAL_UNCONSTRAINED_VK=827;
	public static final int DATE_VK=828;
	public static final int ORDER_VK=829;
	public static final int START_VK=830;

	// delegates
	public TreeParser[] getDelegates() {
		return new TreeParser[] {};
	}

	// delegators


	public PLSQLPrinter(TreeNodeStream input) {
		this(input, new RecognizerSharedState());
	}
	public PLSQLPrinter(TreeNodeStream input, RecognizerSharedState state) {
		super(input, state);
	}

	protected StringTemplateGroup templateLib =
	  new StringTemplateGroup("PLSQLPrinterTemplates", AngleBracketTemplateLexer.class);

	public void setTemplateLib(StringTemplateGroup templateLib) {
	  this.templateLib = templateLib;
	}
	public StringTemplateGroup getTemplateLib() {
	  return templateLib;
	}
	/** allows convenient multi-value initialization:
	 *  "new STAttrMap().put(...).put(...)"
	 */
	@SuppressWarnings("serial")
	public static class STAttrMap extends HashMap<String, Object> {
		public STAttrMap put(String attrName, Object value) {
			super.put(attrName, value);
			return this;
		}
	}
	@Override public String[] getTokenNames() { return PLSQLPrinter.tokenNames; }
	@Override public String getGrammarFileName() { return "PLSQLPrinter.g"; }



	  static String[] correctTokenNames = getCorrectTokenNames();

	  static String[] getCorrectTokenNames() {
	    // This is workaround for bug in antlr3 (at least in 3.5.2)
	    java.lang.reflect.Field[] fields = PLSQLPrinter.class.getDeclaredFields();
	    java.util.Map<Integer, String> tokenNamesMap = new java.util.HashMap<Integer, String>();
	    int maxTokenValue = 0;
	    for (java.lang.reflect.Field field: fields) {
	      int mod = field.getModifiers();
	      if (java.lang.reflect.Modifier.isStatic(mod) && java.lang.reflect.Modifier.isFinal(mod) && field.getType() == int.class) {
	        String name = field.getName();
	        int value;
	        try {
	          value = field.getInt(null);
	        } catch (Exception e) {
	          throw new RuntimeException(e);
	        }
	        tokenNamesMap.put(value, name);
	        maxTokenValue = Math.max(maxTokenValue, value);
	      }
	    }
	    String[] result = new String[maxTokenValue + 1];
	    for (int i = 0; i < maxTokenValue; ++i) {
	      if (tokenNamesMap.containsKey(i)) {
	        result[i] = tokenNamesMap.get(i);
	      } else {
	        result[i] = "<none>";
	      }
	    }
	    return result;
	  }
	  
	  
	  public void reportError(RecognitionException e) {
	    // if we've already reported an error and have not matched a token
	    // yet successfully, don't report any errors.
	    if ( state.errorRecovery ) {
	      //System.err.print("[SPURIOUS] ");
	      return;
	    }
	    state.syntaxErrors++; // don't count spurious
	    state.errorRecovery = true;

	    displayRecognitionError(correctTokenNames, e);
	  }



	public static class compilation_unit_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "compilation_unit"
	// PLSQLPrinter.g:74:1: compilation_unit : ^( COMPILATION_UNIT (u+= unit_statement )* ) -> template(statements=$u) <<\n<statements:{v|<v>}; separator=\"\\n\\n\">\n>>;
	public final PLSQLPrinter.compilation_unit_return compilation_unit() throws RecognitionException {
		PLSQLPrinter.compilation_unit_return retval = new PLSQLPrinter.compilation_unit_return();
		retval.start = input.LT(1);

		List<Object> list_u=null;
		RuleReturnScope u = null;
		try {
			// PLSQLPrinter.g:75:5: ( ^( COMPILATION_UNIT (u+= unit_statement )* ) -> template(statements=$u) <<\n<statements:{v|<v>}; separator=\"\\n\\n\">\n>>)
			// PLSQLPrinter.g:75:10: ^( COMPILATION_UNIT (u+= unit_statement )* )
			{
			match(input,COMPILATION_UNIT,FOLLOW_COMPILATION_UNIT_in_compilation_unit69); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:75:30: (u+= unit_statement )*
				loop1:
				while (true) {
					int alt1=2;
					int LA1_0 = input.LA(1);
					if ( (LA1_0==ALTER_FUNCTION||(LA1_0 >= ALTER_PACKAGE && LA1_0 <= ALTER_TYPE)||(LA1_0 >= CREATE_FUNCTION && LA1_0 <= CREATE_TYPE_SPEC)||(LA1_0 >= DROP_FUNCTION && LA1_0 <= DROP_TYPE)) ) {
						alt1=1;
					}

					switch (alt1) {
					case 1 :
						// PLSQLPrinter.g:75:30: u+= unit_statement
						{
						pushFollow(FOLLOW_unit_statement_in_compilation_unit73);
						u=unit_statement();
						state._fsp--;

						if (list_u==null) list_u=new ArrayList<Object>();
						list_u.add(u.getTemplate());
						}
						break;

					default :
						break loop1;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 76:5: -> template(statements=$u) <<\n<statements:{v|<v>}; separator=\"\\n\\n\">\n>>
			{
				retval.st = new StringTemplate(templateLib, "\n<statements:{v|<v>}; separator=\"\\n\\n\">\n",new STAttrMap().put("statements", list_u));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compilation_unit"


	public static class sql_script_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sql_script"
	// PLSQLPrinter.g:82:1: sql_script : ^( SQL_SCRIPT (u+= unit_statement )* ) -> template(statements=$u) <<\n<statements; separator=\"\\n\\n\">\n>>;
	public final PLSQLPrinter.sql_script_return sql_script() throws RecognitionException {
		PLSQLPrinter.sql_script_return retval = new PLSQLPrinter.sql_script_return();
		retval.start = input.LT(1);

		List<Object> list_u=null;
		RuleReturnScope u = null;
		try {
			// PLSQLPrinter.g:83:5: ( ^( SQL_SCRIPT (u+= unit_statement )* ) -> template(statements=$u) <<\n<statements; separator=\"\\n\\n\">\n>>)
			// PLSQLPrinter.g:83:10: ^( SQL_SCRIPT (u+= unit_statement )* )
			{
			match(input,SQL_SCRIPT,FOLLOW_SQL_SCRIPT_in_sql_script112); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:83:24: (u+= unit_statement )*
				loop2:
				while (true) {
					int alt2=2;
					int LA2_0 = input.LA(1);
					if ( (LA2_0==ALTER_FUNCTION||(LA2_0 >= ALTER_PACKAGE && LA2_0 <= ALTER_TYPE)||(LA2_0 >= CREATE_FUNCTION && LA2_0 <= CREATE_TYPE_SPEC)||(LA2_0 >= DROP_FUNCTION && LA2_0 <= DROP_TYPE)) ) {
						alt2=1;
					}

					switch (alt2) {
					case 1 :
						// PLSQLPrinter.g:83:24: u+= unit_statement
						{
						pushFollow(FOLLOW_unit_statement_in_sql_script116);
						u=unit_statement();
						state._fsp--;

						if (list_u==null) list_u=new ArrayList<Object>();
						list_u.add(u.getTemplate());
						}
						break;

					default :
						break loop2;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 84:5: -> template(statements=$u) <<\n<statements; separator=\"\\n\\n\">\n>>
			{
				retval.st = new StringTemplate(templateLib, "\n<statements; separator=\"\\n\\n\">\n",new STAttrMap().put("statements", list_u));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sql_script"


	public static class serveroutput_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "serveroutput_declaration"
	// PLSQLPrinter.g:90:1: serveroutput_declaration : ^( SET_SERVEROUTPUT ( SQL92_RESERVED_ON | OFF_VK ) ) -> template( \"not implemented: serveroutput_declaration\";
	public final PLSQLPrinter.serveroutput_declaration_return serveroutput_declaration() throws RecognitionException {
		PLSQLPrinter.serveroutput_declaration_return retval = new PLSQLPrinter.serveroutput_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:91:5: ( ^( SET_SERVEROUTPUT ( SQL92_RESERVED_ON | OFF_VK ) ) -> template( \"not implemented: serveroutput_declaration\")
			// PLSQLPrinter.g:91:10: ^( SET_SERVEROUTPUT ( SQL92_RESERVED_ON | OFF_VK ) )
			{
			match(input,SET_SERVEROUTPUT,FOLLOW_SET_SERVEROUTPUT_in_serveroutput_declaration155); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:91:29: ( SQL92_RESERVED_ON | OFF_VK )
			int alt3=2;
			int LA3_0 = input.LA(1);
			if ( (LA3_0==SQL92_RESERVED_ON) ) {
				alt3=1;
			}
			else if ( (LA3_0==OFF_VK) ) {
				alt3=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 3, 0, input);
				throw nvae;
			}

			switch (alt3) {
				case 1 :
					// PLSQLPrinter.g:91:30: SQL92_RESERVED_ON
					{
					match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_serveroutput_declaration158); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:91:48: OFF_VK
					{
					match(input,OFF_VK,FOLLOW_OFF_VK_in_serveroutput_declaration160); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 92:5: -> template( \"not implemented: serveroutput_declaration\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: serveroutput_declaration");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "serveroutput_declaration"


	public static class unit_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unit_statement"
	// PLSQLPrinter.g:95:1: unit_statement : ( alter_function -> { $alter_function.st }| alter_package -> { $alter_package.st}| alter_procedure -> { $alter_procedure.st}| alter_sequence -> { $alter_sequence.st}| alter_trigger -> { $alter_trigger.st}| alter_type -> { $alter_type.st}| create_function_body -> { $create_function_body.st; }| create_procedure_body -> { $create_procedure_body.st}| create_package -> { $create_package.st}| create_sequence -> { $create_sequence.st}| create_trigger -> { $create_trigger.st}| create_type -> { $create_type.st}| drop_function -> { $drop_function.st}| drop_package -> { $drop_package.st}| drop_procedure -> { $drop_procedure.st}| drop_sequence -> { $drop_sequence.st}| drop_trigger -> { $drop_trigger.st}| drop_type -> { $drop_type.st});
	public final PLSQLPrinter.unit_statement_return unit_statement() throws RecognitionException {
		PLSQLPrinter.unit_statement_return retval = new PLSQLPrinter.unit_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope alter_function1 =null;
		TreeRuleReturnScope alter_package2 =null;
		TreeRuleReturnScope alter_procedure3 =null;
		TreeRuleReturnScope alter_sequence4 =null;
		TreeRuleReturnScope alter_trigger5 =null;
		TreeRuleReturnScope alter_type6 =null;
		TreeRuleReturnScope create_function_body7 =null;
		TreeRuleReturnScope create_procedure_body8 =null;
		TreeRuleReturnScope create_package9 =null;
		TreeRuleReturnScope create_sequence10 =null;
		TreeRuleReturnScope create_trigger11 =null;
		TreeRuleReturnScope create_type12 =null;
		TreeRuleReturnScope drop_function13 =null;
		TreeRuleReturnScope drop_package14 =null;
		TreeRuleReturnScope drop_procedure15 =null;
		TreeRuleReturnScope drop_sequence16 =null;
		TreeRuleReturnScope drop_trigger17 =null;
		TreeRuleReturnScope drop_type18 =null;

		try {
			// PLSQLPrinter.g:96:5: ( alter_function -> { $alter_function.st }| alter_package -> { $alter_package.st}| alter_procedure -> { $alter_procedure.st}| alter_sequence -> { $alter_sequence.st}| alter_trigger -> { $alter_trigger.st}| alter_type -> { $alter_type.st}| create_function_body -> { $create_function_body.st; }| create_procedure_body -> { $create_procedure_body.st}| create_package -> { $create_package.st}| create_sequence -> { $create_sequence.st}| create_trigger -> { $create_trigger.st}| create_type -> { $create_type.st}| drop_function -> { $drop_function.st}| drop_package -> { $drop_package.st}| drop_procedure -> { $drop_procedure.st}| drop_sequence -> { $drop_sequence.st}| drop_trigger -> { $drop_trigger.st}| drop_type -> { $drop_type.st})
			int alt4=18;
			switch ( input.LA(1) ) {
			case ALTER_FUNCTION:
				{
				alt4=1;
				}
				break;
			case ALTER_PACKAGE:
				{
				alt4=2;
				}
				break;
			case ALTER_PROCEDURE:
				{
				alt4=3;
				}
				break;
			case ALTER_SEQUENCE:
				{
				alt4=4;
				}
				break;
			case ALTER_TRIGGER:
				{
				alt4=5;
				}
				break;
			case ALTER_TYPE:
				{
				alt4=6;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt4=7;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt4=8;
				}
				break;
			case CREATE_PACKAGE_BODY:
			case CREATE_PACKAGE_SPEC:
				{
				alt4=9;
				}
				break;
			case CREATE_SEQUENCE:
				{
				alt4=10;
				}
				break;
			case CREATE_TRIGGER:
				{
				alt4=11;
				}
				break;
			case CREATE_TYPE_BODY:
			case CREATE_TYPE_SPEC:
				{
				alt4=12;
				}
				break;
			case DROP_FUNCTION:
				{
				alt4=13;
				}
				break;
			case DROP_PACKAGE:
				{
				alt4=14;
				}
				break;
			case DROP_PROCEDURE:
				{
				alt4=15;
				}
				break;
			case DROP_SEQUENCE:
				{
				alt4=16;
				}
				break;
			case DROP_TRIGGER:
				{
				alt4=17;
				}
				break;
			case DROP_TYPE:
				{
				alt4=18;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 4, 0, input);
				throw nvae;
			}
			switch (alt4) {
				case 1 :
					// PLSQLPrinter.g:96:10: alter_function
					{
					pushFollow(FOLLOW_alter_function_in_unit_statement196);
					alter_function1=alter_function();
					state._fsp--;

					// TEMPLATE REWRITE
					// 96:25: -> { $alter_function.st }
					{
						retval.st =  (alter_function1!=null?((StringTemplate)alter_function1.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:97:10: alter_package
					{
					pushFollow(FOLLOW_alter_package_in_unit_statement211);
					alter_package2=alter_package();
					state._fsp--;

					// TEMPLATE REWRITE
					// 97:24: -> { $alter_package.st}
					{
						retval.st =  (alter_package2!=null?((StringTemplate)alter_package2.getTemplate()):null);
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:98:10: alter_procedure
					{
					pushFollow(FOLLOW_alter_procedure_in_unit_statement226);
					alter_procedure3=alter_procedure();
					state._fsp--;

					// TEMPLATE REWRITE
					// 98:26: -> { $alter_procedure.st}
					{
						retval.st =  (alter_procedure3!=null?((StringTemplate)alter_procedure3.getTemplate()):null);
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:99:10: alter_sequence
					{
					pushFollow(FOLLOW_alter_sequence_in_unit_statement241);
					alter_sequence4=alter_sequence();
					state._fsp--;

					// TEMPLATE REWRITE
					// 99:25: -> { $alter_sequence.st}
					{
						retval.st =  (alter_sequence4!=null?((StringTemplate)alter_sequence4.getTemplate()):null);
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:100:10: alter_trigger
					{
					pushFollow(FOLLOW_alter_trigger_in_unit_statement256);
					alter_trigger5=alter_trigger();
					state._fsp--;

					// TEMPLATE REWRITE
					// 100:24: -> { $alter_trigger.st}
					{
						retval.st =  (alter_trigger5!=null?((StringTemplate)alter_trigger5.getTemplate()):null);
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:101:10: alter_type
					{
					pushFollow(FOLLOW_alter_type_in_unit_statement271);
					alter_type6=alter_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 101:21: -> { $alter_type.st}
					{
						retval.st =  (alter_type6!=null?((StringTemplate)alter_type6.getTemplate()):null);
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:102:10: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_unit_statement286);
					create_function_body7=create_function_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 102:31: -> { $create_function_body.st; }
					{
						retval.st =  (create_function_body7!=null?((StringTemplate)create_function_body7.getTemplate()):null); ;
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:103:10: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_unit_statement301);
					create_procedure_body8=create_procedure_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 103:32: -> { $create_procedure_body.st}
					{
						retval.st =  (create_procedure_body8!=null?((StringTemplate)create_procedure_body8.getTemplate()):null);
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:104:10: create_package
					{
					pushFollow(FOLLOW_create_package_in_unit_statement316);
					create_package9=create_package();
					state._fsp--;

					// TEMPLATE REWRITE
					// 104:25: -> { $create_package.st}
					{
						retval.st =  (create_package9!=null?((StringTemplate)create_package9.getTemplate()):null);
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:105:10: create_sequence
					{
					pushFollow(FOLLOW_create_sequence_in_unit_statement331);
					create_sequence10=create_sequence();
					state._fsp--;

					// TEMPLATE REWRITE
					// 105:26: -> { $create_sequence.st}
					{
						retval.st =  (create_sequence10!=null?((StringTemplate)create_sequence10.getTemplate()):null);
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:106:10: create_trigger
					{
					pushFollow(FOLLOW_create_trigger_in_unit_statement346);
					create_trigger11=create_trigger();
					state._fsp--;

					// TEMPLATE REWRITE
					// 106:25: -> { $create_trigger.st}
					{
						retval.st =  (create_trigger11!=null?((StringTemplate)create_trigger11.getTemplate()):null);
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:107:10: create_type
					{
					pushFollow(FOLLOW_create_type_in_unit_statement361);
					create_type12=create_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 107:22: -> { $create_type.st}
					{
						retval.st =  (create_type12!=null?((StringTemplate)create_type12.getTemplate()):null);
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:108:10: drop_function
					{
					pushFollow(FOLLOW_drop_function_in_unit_statement376);
					drop_function13=drop_function();
					state._fsp--;

					// TEMPLATE REWRITE
					// 108:24: -> { $drop_function.st}
					{
						retval.st =  (drop_function13!=null?((StringTemplate)drop_function13.getTemplate()):null);
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:109:10: drop_package
					{
					pushFollow(FOLLOW_drop_package_in_unit_statement391);
					drop_package14=drop_package();
					state._fsp--;

					// TEMPLATE REWRITE
					// 109:23: -> { $drop_package.st}
					{
						retval.st =  (drop_package14!=null?((StringTemplate)drop_package14.getTemplate()):null);
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:110:10: drop_procedure
					{
					pushFollow(FOLLOW_drop_procedure_in_unit_statement406);
					drop_procedure15=drop_procedure();
					state._fsp--;

					// TEMPLATE REWRITE
					// 110:25: -> { $drop_procedure.st}
					{
						retval.st =  (drop_procedure15!=null?((StringTemplate)drop_procedure15.getTemplate()):null);
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:111:10: drop_sequence
					{
					pushFollow(FOLLOW_drop_sequence_in_unit_statement421);
					drop_sequence16=drop_sequence();
					state._fsp--;

					// TEMPLATE REWRITE
					// 111:24: -> { $drop_sequence.st}
					{
						retval.st =  (drop_sequence16!=null?((StringTemplate)drop_sequence16.getTemplate()):null);
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:112:10: drop_trigger
					{
					pushFollow(FOLLOW_drop_trigger_in_unit_statement436);
					drop_trigger17=drop_trigger();
					state._fsp--;

					// TEMPLATE REWRITE
					// 112:23: -> { $drop_trigger.st}
					{
						retval.st =  (drop_trigger17!=null?((StringTemplate)drop_trigger17.getTemplate()):null);
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:113:10: drop_type
					{
					pushFollow(FOLLOW_drop_type_in_unit_statement451);
					drop_type18=drop_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 113:20: -> { $drop_type.st}
					{
						retval.st =  (drop_type18!=null?((StringTemplate)drop_type18.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unit_statement"


	public static class drop_function_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_function"
	// PLSQLPrinter.g:120:1: drop_function : ^( DROP_FUNCTION function_name ) -> template( \"not implemented: drop_function\";
	public final PLSQLPrinter.drop_function_return drop_function() throws RecognitionException {
		PLSQLPrinter.drop_function_return retval = new PLSQLPrinter.drop_function_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:121:5: ( ^( DROP_FUNCTION function_name ) -> template( \"not implemented: drop_function\")
			// PLSQLPrinter.g:121:10: ^( DROP_FUNCTION function_name )
			{
			match(input,DROP_FUNCTION,FOLLOW_DROP_FUNCTION_in_drop_function480); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_name_in_drop_function482);
			function_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 122:5: -> template( \"not implemented: drop_function\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_function");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_function"


	public static class alter_function_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_function"
	// PLSQLPrinter.g:125:1: alter_function : ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_function\";
	public final PLSQLPrinter.alter_function_return alter_function() throws RecognitionException {
		PLSQLPrinter.alter_function_return retval = new PLSQLPrinter.alter_function_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:126:5: ( ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_function\")
			// PLSQLPrinter.g:126:10: ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
			{
			match(input,ALTER_FUNCTION,FOLLOW_ALTER_FUNCTION_in_alter_function518); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_name_in_alter_function520);
			function_name();
			state._fsp--;

			// PLSQLPrinter.g:126:41: ( DEBUG_VK )?
			int alt5=2;
			int LA5_0 = input.LA(1);
			if ( (LA5_0==DEBUG_VK) ) {
				alt5=1;
			}
			switch (alt5) {
				case 1 :
					// PLSQLPrinter.g:126:41: DEBUG_VK
					{
					match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_function522); 
					}
					break;

			}

			// PLSQLPrinter.g:126:51: ( REUSE_VK )?
			int alt6=2;
			int LA6_0 = input.LA(1);
			if ( (LA6_0==REUSE_VK) ) {
				alt6=1;
			}
			switch (alt6) {
				case 1 :
					// PLSQLPrinter.g:126:51: REUSE_VK
					{
					match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_function525); 
					}
					break;

			}

			// PLSQLPrinter.g:126:61: ( compiler_parameters_clause )*
			loop7:
			while (true) {
				int alt7=2;
				int LA7_0 = input.LA(1);
				if ( (LA7_0==COMPILER_PARAMETER) ) {
					alt7=1;
				}

				switch (alt7) {
				case 1 :
					// PLSQLPrinter.g:126:61: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_function528);
					compiler_parameters_clause();
					state._fsp--;

					}
					break;

				default :
					break loop7;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 127:5: -> template( \"not implemented: alter_function\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_function");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_function"


	public static class create_function_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_function_body"
	// PLSQLPrinter.g:130:1: create_function_body : ^( CREATE_FUNCTION ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? ^( FUNCTION_NAME (name+= ID )+ ) ret= type_spec ^( PARAMETERS (args+= parameter )* ) (ac+= invoker_rights_clause )* (ac+= parallel_enable_clause )* (ac+= result_cache_clause )* ( DETERMINISTIC_VK )* ( PIPELINED_VK )? ( ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name ) -> template( \"not implemented: create_function_body\"| ^( CALL_MODE call_spec ) -> template( \"not implemented: create_function_body\"| ^( BODY_MODE block ) -> create_function_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st)) ) ;
	public final PLSQLPrinter.create_function_body_return create_function_body() throws RecognitionException {
		PLSQLPrinter.create_function_body_return retval = new PLSQLPrinter.create_function_body_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_CREATE19=null;
		CommonTree REPLACE_VK20=null;
		CommonTree PIPELINED_VK21=null;
		CommonTree name=null;
		List<Object> list_name=null;
		List<Object> list_args=null;
		List<Object> list_ac=null;
		TreeRuleReturnScope ret =null;
		TreeRuleReturnScope block22 =null;
		RuleReturnScope args = null;
		RuleReturnScope ac = null;
		try {
			// PLSQLPrinter.g:131:5: ( ^( CREATE_FUNCTION ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? ^( FUNCTION_NAME (name+= ID )+ ) ret= type_spec ^( PARAMETERS (args+= parameter )* ) (ac+= invoker_rights_clause )* (ac+= parallel_enable_clause )* (ac+= result_cache_clause )* ( DETERMINISTIC_VK )* ( PIPELINED_VK )? ( ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name ) -> template( \"not implemented: create_function_body\"| ^( CALL_MODE call_spec ) -> template( \"not implemented: create_function_body\"| ^( BODY_MODE block ) -> create_function_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st)) ) )
			// PLSQLPrinter.g:131:10: ^( CREATE_FUNCTION ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? ^( FUNCTION_NAME (name+= ID )+ ) ret= type_spec ^( PARAMETERS (args+= parameter )* ) (ac+= invoker_rights_clause )* (ac+= parallel_enable_clause )* (ac+= result_cache_clause )* ( DETERMINISTIC_VK )* ( PIPELINED_VK )? ( ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name ) -> template( \"not implemented: create_function_body\"| ^( CALL_MODE call_spec ) -> template( \"not implemented: create_function_body\"| ^( BODY_MODE block ) -> create_function_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st)) )
			{
			match(input,CREATE_FUNCTION,FOLLOW_CREATE_FUNCTION_in_create_function_body565); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:131:28: ( SQL92_RESERVED_CREATE )?
			int alt8=2;
			int LA8_0 = input.LA(1);
			if ( (LA8_0==SQL92_RESERVED_CREATE) ) {
				alt8=1;
			}
			switch (alt8) {
				case 1 :
					// PLSQLPrinter.g:131:28: SQL92_RESERVED_CREATE
					{
					SQL92_RESERVED_CREATE19=(CommonTree)match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_create_function_body567); 
					}
					break;

			}

			// PLSQLPrinter.g:131:51: ( REPLACE_VK )?
			int alt9=2;
			int LA9_0 = input.LA(1);
			if ( (LA9_0==REPLACE_VK) ) {
				alt9=1;
			}
			switch (alt9) {
				case 1 :
					// PLSQLPrinter.g:131:51: REPLACE_VK
					{
					REPLACE_VK20=(CommonTree)match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_function_body570); 
					}
					break;

			}

			match(input,FUNCTION_NAME,FOLLOW_FUNCTION_NAME_in_create_function_body574); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:131:83: (name+= ID )+
			int cnt10=0;
			loop10:
			while (true) {
				int alt10=2;
				int LA10_0 = input.LA(1);
				if ( (LA10_0==ID) ) {
					alt10=1;
				}

				switch (alt10) {
				case 1 :
					// PLSQLPrinter.g:131:83: name+= ID
					{
					name=(CommonTree)match(input,ID,FOLLOW_ID_in_create_function_body578); 
					if (list_name==null) list_name=new ArrayList<Object>();
					list_name.add(name);
					}
					break;

				default :
					if ( cnt10 >= 1 ) break loop10;
					EarlyExitException eee = new EarlyExitException(10, input);
					throw eee;
				}
				cnt10++;
			}

			match(input, Token.UP, null); 

			pushFollow(FOLLOW_type_spec_in_create_function_body584);
			ret=type_spec();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_create_function_body587); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:131:121: (args+= parameter )*
				loop11:
				while (true) {
					int alt11=2;
					int LA11_0 = input.LA(1);
					if ( (LA11_0==PARAMETER) ) {
						alt11=1;
					}

					switch (alt11) {
					case 1 :
						// PLSQLPrinter.g:131:121: args+= parameter
						{
						pushFollow(FOLLOW_parameter_in_create_function_body591);
						args=parameter();
						state._fsp--;

						if (list_args==null) list_args=new ArrayList<Object>();
						list_args.add(args.getTemplate());
						}
						break;

					default :
						break loop11;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:132:15: (ac+= invoker_rights_clause )*
			loop12:
			while (true) {
				int alt12=2;
				int LA12_0 = input.LA(1);
				if ( (LA12_0==AUTHID_VK) ) {
					alt12=1;
				}

				switch (alt12) {
				case 1 :
					// PLSQLPrinter.g:132:15: ac+= invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_create_function_body609);
					ac=invoker_rights_clause();
					state._fsp--;

					if (list_ac==null) list_ac=new ArrayList<Object>();
					list_ac.add(ac.getTemplate());
					}
					break;

				default :
					break loop12;
				}
			}

			// PLSQLPrinter.g:132:42: (ac+= parallel_enable_clause )*
			loop13:
			while (true) {
				int alt13=2;
				int LA13_0 = input.LA(1);
				if ( (LA13_0==PARALLEL_ENABLE_VK) ) {
					alt13=1;
				}

				switch (alt13) {
				case 1 :
					// PLSQLPrinter.g:132:42: ac+= parallel_enable_clause
					{
					pushFollow(FOLLOW_parallel_enable_clause_in_create_function_body614);
					ac=parallel_enable_clause();
					state._fsp--;

					if (list_ac==null) list_ac=new ArrayList<Object>();
					list_ac.add(ac.getTemplate());
					}
					break;

				default :
					break loop13;
				}
			}

			// PLSQLPrinter.g:132:70: (ac+= result_cache_clause )*
			loop14:
			while (true) {
				int alt14=2;
				int LA14_0 = input.LA(1);
				if ( (LA14_0==RESULT_CACHE_VK) ) {
					alt14=1;
				}

				switch (alt14) {
				case 1 :
					// PLSQLPrinter.g:132:70: ac+= result_cache_clause
					{
					pushFollow(FOLLOW_result_cache_clause_in_create_function_body619);
					ac=result_cache_clause();
					state._fsp--;

					if (list_ac==null) list_ac=new ArrayList<Object>();
					list_ac.add(ac.getTemplate());
					}
					break;

				default :
					break loop14;
				}
			}

			// PLSQLPrinter.g:132:93: ( DETERMINISTIC_VK )*
			loop15:
			while (true) {
				int alt15=2;
				int LA15_0 = input.LA(1);
				if ( (LA15_0==DETERMINISTIC_VK) ) {
					alt15=1;
				}

				switch (alt15) {
				case 1 :
					// PLSQLPrinter.g:132:93: DETERMINISTIC_VK
					{
					match(input,DETERMINISTIC_VK,FOLLOW_DETERMINISTIC_VK_in_create_function_body622); 
					}
					break;

				default :
					break loop15;
				}
			}

			// PLSQLPrinter.g:132:111: ( PIPELINED_VK )?
			int alt16=2;
			int LA16_0 = input.LA(1);
			if ( (LA16_0==PIPELINED_VK) ) {
				alt16=1;
			}
			switch (alt16) {
				case 1 :
					// PLSQLPrinter.g:132:111: PIPELINED_VK
					{
					PIPELINED_VK21=(CommonTree)match(input,PIPELINED_VK,FOLLOW_PIPELINED_VK_in_create_function_body625); 
					}
					break;

			}

			// PLSQLPrinter.g:133:13: ( ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name ) -> template( \"not implemented: create_function_body\"| ^( CALL_MODE call_spec ) -> template( \"not implemented: create_function_body\"| ^( BODY_MODE block ) -> create_function_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st))
			int alt18=3;
			switch ( input.LA(1) ) {
			case USING_MODE:
				{
				alt18=1;
				}
				break;
			case CALL_MODE:
				{
				alt18=2;
				}
				break;
			case BODY_MODE:
				{
				alt18=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 18, 0, input);
				throw nvae;
			}
			switch (alt18) {
				case 1 :
					// PLSQLPrinter.g:133:18: ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name )
					{
					match(input,USING_MODE,FOLLOW_USING_MODE_in_create_function_body646); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:133:31: ( AGGREGATE_VK )?
					int alt17=2;
					int LA17_0 = input.LA(1);
					if ( (LA17_0==AGGREGATE_VK) ) {
						alt17=1;
					}
					switch (alt17) {
						case 1 :
							// PLSQLPrinter.g:133:31: AGGREGATE_VK
							{
							match(input,AGGREGATE_VK,FOLLOW_AGGREGATE_VK_in_create_function_body648); 
							}
							break;

					}

					pushFollow(FOLLOW_implementation_type_name_in_create_function_body651);
					implementation_type_name();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 134:5: -> template( \"not implemented: create_function_body\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: create_function_body");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:135:18: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_create_function_body686); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_create_function_body688);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 136:5: -> template( \"not implemented: create_function_body\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: create_function_body");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:137:18: ^( BODY_MODE block )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_create_function_body723); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_create_function_body725);
					block22=block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 138:18: -> create_function_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st)
					{
						retval.st = templateLib.getInstanceOf("create_function_body",new STAttrMap().put("is_create", SQL92_RESERVED_CREATE19 != null).put("is_replace", REPLACE_VK20 != null).put("name_parts", list_name).put("arguments", list_args).put("return_type", (ret!=null?((StringTemplate)ret.getTemplate()):null)).put("add_clauses", list_ac).put("is_pipelined", PIPELINED_VK21 != null).put("block", (block22!=null?((StringTemplate)block22.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_function_body"


	public static class parallel_enable_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parallel_enable_clause"
	// PLSQLPrinter.g:147:1: parallel_enable_clause : ^( PARALLEL_ENABLE_VK ( partition_by_clause )? ) -> template( \"not implemented: parallel_enable_clause\";
	public final PLSQLPrinter.parallel_enable_clause_return parallel_enable_clause() throws RecognitionException {
		PLSQLPrinter.parallel_enable_clause_return retval = new PLSQLPrinter.parallel_enable_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:148:5: ( ^( PARALLEL_ENABLE_VK ( partition_by_clause )? ) -> template( \"not implemented: parallel_enable_clause\")
			// PLSQLPrinter.g:148:10: ^( PARALLEL_ENABLE_VK ( partition_by_clause )? )
			{
			match(input,PARALLEL_ENABLE_VK,FOLLOW_PARALLEL_ENABLE_VK_in_parallel_enable_clause896); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:148:31: ( partition_by_clause )?
				int alt19=2;
				int LA19_0 = input.LA(1);
				if ( (LA19_0==PARTITION_VK) ) {
					alt19=1;
				}
				switch (alt19) {
					case 1 :
						// PLSQLPrinter.g:148:31: partition_by_clause
						{
						pushFollow(FOLLOW_partition_by_clause_in_parallel_enable_clause898);
						partition_by_clause();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 149:5: -> template( \"not implemented: parallel_enable_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: parallel_enable_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parallel_enable_clause"


	public static class partition_by_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "partition_by_clause"
	// PLSQLPrinter.g:152:1: partition_by_clause : ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? ) -> template( \"not implemented: partition_by_clause\";
	public final PLSQLPrinter.partition_by_clause_return partition_by_clause() throws RecognitionException {
		PLSQLPrinter.partition_by_clause_return retval = new PLSQLPrinter.partition_by_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:153:5: ( ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? ) -> template( \"not implemented: partition_by_clause\")
			// PLSQLPrinter.g:153:10: ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_partition_by_clause935); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_partition_by_clause937);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:154:13: ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) )
			int alt22=3;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ANY:
				{
				alt22=1;
				}
				break;
			case HASH_VK:
				{
				alt22=2;
				}
				break;
			case RANGE_VK:
				{
				alt22=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 22, 0, input);
				throw nvae;
			}
			switch (alt22) {
				case 1 :
					// PLSQLPrinter.g:154:18: SQL92_RESERVED_ANY
					{
					match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_partition_by_clause957); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:155:18: ^( HASH_VK ^( COLUMNS ( column_name )+ ) )
					{
					match(input,HASH_VK,FOLLOW_HASH_VK_in_partition_by_clause977); 
					match(input, Token.DOWN, null); 
					match(input,COLUMNS,FOLLOW_COLUMNS_in_partition_by_clause980); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:155:38: ( column_name )+
					int cnt20=0;
					loop20:
					while (true) {
						int alt20=2;
						int LA20_0 = input.LA(1);
						if ( (LA20_0==COLUMN_NAME) ) {
							alt20=1;
						}

						switch (alt20) {
						case 1 :
							// PLSQLPrinter.g:155:38: column_name
							{
							pushFollow(FOLLOW_column_name_in_partition_by_clause982);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt20 >= 1 ) break loop20;
							EarlyExitException eee = new EarlyExitException(20, input);
							throw eee;
						}
						cnt20++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:156:18: ^( RANGE_VK ^( COLUMNS ( column_name )+ ) )
					{
					match(input,RANGE_VK,FOLLOW_RANGE_VK_in_partition_by_clause1005); 
					match(input, Token.DOWN, null); 
					match(input,COLUMNS,FOLLOW_COLUMNS_in_partition_by_clause1008); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:156:39: ( column_name )+
					int cnt21=0;
					loop21:
					while (true) {
						int alt21=2;
						int LA21_0 = input.LA(1);
						if ( (LA21_0==COLUMN_NAME) ) {
							alt21=1;
						}

						switch (alt21) {
						case 1 :
							// PLSQLPrinter.g:156:39: column_name
							{
							pushFollow(FOLLOW_column_name_in_partition_by_clause1010);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt21 >= 1 ) break loop21;
							EarlyExitException eee = new EarlyExitException(21, input);
							throw eee;
						}
						cnt21++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;

			}

			// PLSQLPrinter.g:158:13: ( streaming_clause )?
			int alt23=2;
			int LA23_0 = input.LA(1);
			if ( (LA23_0==STREAMING_CLAUSE) ) {
				alt23=1;
			}
			switch (alt23) {
				case 1 :
					// PLSQLPrinter.g:158:13: streaming_clause
					{
					pushFollow(FOLLOW_streaming_clause_in_partition_by_clause1042);
					streaming_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 160:5: -> template( \"not implemented: partition_by_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: partition_by_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_by_clause"


	public static class result_cache_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "result_cache_clause"
	// PLSQLPrinter.g:163:1: result_cache_clause : ^( RESULT_CACHE_VK ( relies_on_part )? ) -> template( \"not implemented: result_cache_clause\";
	public final PLSQLPrinter.result_cache_clause_return result_cache_clause() throws RecognitionException {
		PLSQLPrinter.result_cache_clause_return retval = new PLSQLPrinter.result_cache_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:164:5: ( ^( RESULT_CACHE_VK ( relies_on_part )? ) -> template( \"not implemented: result_cache_clause\")
			// PLSQLPrinter.g:164:10: ^( RESULT_CACHE_VK ( relies_on_part )? )
			{
			match(input,RESULT_CACHE_VK,FOLLOW_RESULT_CACHE_VK_in_result_cache_clause1088); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:164:28: ( relies_on_part )?
				int alt24=2;
				int LA24_0 = input.LA(1);
				if ( (LA24_0==RELIES_ON_VK) ) {
					alt24=1;
				}
				switch (alt24) {
					case 1 :
						// PLSQLPrinter.g:164:28: relies_on_part
						{
						pushFollow(FOLLOW_relies_on_part_in_result_cache_clause1090);
						relies_on_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 165:5: -> template( \"not implemented: result_cache_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: result_cache_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "result_cache_clause"


	public static class relies_on_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "relies_on_part"
	// PLSQLPrinter.g:168:1: relies_on_part : ^( RELIES_ON_VK ( tableview_name )+ ) -> template( \"not implemented: relies_on_part\";
	public final PLSQLPrinter.relies_on_part_return relies_on_part() throws RecognitionException {
		PLSQLPrinter.relies_on_part_return retval = new PLSQLPrinter.relies_on_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:169:5: ( ^( RELIES_ON_VK ( tableview_name )+ ) -> template( \"not implemented: relies_on_part\")
			// PLSQLPrinter.g:169:10: ^( RELIES_ON_VK ( tableview_name )+ )
			{
			match(input,RELIES_ON_VK,FOLLOW_RELIES_ON_VK_in_relies_on_part1127); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:169:25: ( tableview_name )+
			int cnt25=0;
			loop25:
			while (true) {
				int alt25=2;
				int LA25_0 = input.LA(1);
				if ( (LA25_0==TABLEVIEW_NAME) ) {
					alt25=1;
				}

				switch (alt25) {
				case 1 :
					// PLSQLPrinter.g:169:25: tableview_name
					{
					pushFollow(FOLLOW_tableview_name_in_relies_on_part1129);
					tableview_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt25 >= 1 ) break loop25;
					EarlyExitException eee = new EarlyExitException(25, input);
					throw eee;
				}
				cnt25++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 170:5: -> template( \"not implemented: relies_on_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: relies_on_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "relies_on_part"


	public static class streaming_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "streaming_clause"
	// PLSQLPrinter.g:173:1: streaming_clause : ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) ) -> template( \"not implemented: streaming_clause\";
	public final PLSQLPrinter.streaming_clause_return streaming_clause() throws RecognitionException {
		PLSQLPrinter.streaming_clause_return retval = new PLSQLPrinter.streaming_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:174:5: ( ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) ) -> template( \"not implemented: streaming_clause\")
			// PLSQLPrinter.g:174:10: ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) )
			{
			match(input,STREAMING_CLAUSE,FOLLOW_STREAMING_CLAUSE_in_streaming_clause1166); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:174:29: ( SQL92_RESERVED_ORDER | CLUSTER_VK )
			int alt26=2;
			int LA26_0 = input.LA(1);
			if ( (LA26_0==SQL92_RESERVED_ORDER) ) {
				alt26=1;
			}
			else if ( (LA26_0==CLUSTER_VK) ) {
				alt26=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 26, 0, input);
				throw nvae;
			}

			switch (alt26) {
				case 1 :
					// PLSQLPrinter.g:174:30: SQL92_RESERVED_ORDER
					{
					match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_streaming_clause1169); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:174:51: CLUSTER_VK
					{
					match(input,CLUSTER_VK,FOLLOW_CLUSTER_VK_in_streaming_clause1171); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_streaming_clause1174);
			expression();
			state._fsp--;

			match(input,COLUMNS,FOLLOW_COLUMNS_in_streaming_clause1177); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:174:84: ( column_name )+
			int cnt27=0;
			loop27:
			while (true) {
				int alt27=2;
				int LA27_0 = input.LA(1);
				if ( (LA27_0==COLUMN_NAME) ) {
					alt27=1;
				}

				switch (alt27) {
				case 1 :
					// PLSQLPrinter.g:174:84: column_name
					{
					pushFollow(FOLLOW_column_name_in_streaming_clause1179);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt27 >= 1 ) break loop27;
					EarlyExitException eee = new EarlyExitException(27, input);
					throw eee;
				}
				cnt27++;
			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 175:5: -> template( \"not implemented: streaming_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: streaming_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "streaming_clause"


	public static class drop_package_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_package"
	// PLSQLPrinter.g:182:1: drop_package : ^( DROP_PACKAGE package_name ( BODY_VK )? ) -> template( \"not implemented: drop_package\";
	public final PLSQLPrinter.drop_package_return drop_package() throws RecognitionException {
		PLSQLPrinter.drop_package_return retval = new PLSQLPrinter.drop_package_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:183:5: ( ^( DROP_PACKAGE package_name ( BODY_VK )? ) -> template( \"not implemented: drop_package\")
			// PLSQLPrinter.g:183:10: ^( DROP_PACKAGE package_name ( BODY_VK )? )
			{
			match(input,DROP_PACKAGE,FOLLOW_DROP_PACKAGE_in_drop_package1222); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_package_name_in_drop_package1224);
			package_name();
			state._fsp--;

			// PLSQLPrinter.g:183:38: ( BODY_VK )?
			int alt28=2;
			int LA28_0 = input.LA(1);
			if ( (LA28_0==BODY_VK) ) {
				alt28=1;
			}
			switch (alt28) {
				case 1 :
					// PLSQLPrinter.g:183:38: BODY_VK
					{
					match(input,BODY_VK,FOLLOW_BODY_VK_in_drop_package1226); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 184:5: -> template( \"not implemented: drop_package\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_package");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_package"


	public static class alter_package_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_package"
	// PLSQLPrinter.g:187:1: alter_package : ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_package\";
	public final PLSQLPrinter.alter_package_return alter_package() throws RecognitionException {
		PLSQLPrinter.alter_package_return retval = new PLSQLPrinter.alter_package_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:188:5: ( ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_package\")
			// PLSQLPrinter.g:188:10: ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* )
			{
			match(input,ALTER_PACKAGE,FOLLOW_ALTER_PACKAGE_in_alter_package1263); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_package_name_in_alter_package1265);
			package_name();
			state._fsp--;

			// PLSQLPrinter.g:188:39: ( DEBUG_VK )?
			int alt29=2;
			int LA29_0 = input.LA(1);
			if ( (LA29_0==DEBUG_VK) ) {
				alt29=1;
			}
			switch (alt29) {
				case 1 :
					// PLSQLPrinter.g:188:39: DEBUG_VK
					{
					match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_package1267); 
					}
					break;

			}

			// PLSQLPrinter.g:188:49: ( REUSE_VK )?
			int alt30=2;
			int LA30_0 = input.LA(1);
			if ( (LA30_0==REUSE_VK) ) {
				alt30=1;
			}
			switch (alt30) {
				case 1 :
					// PLSQLPrinter.g:188:49: REUSE_VK
					{
					match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_package1270); 
					}
					break;

			}

			// PLSQLPrinter.g:189:17: ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )?
			int alt31=4;
			switch ( input.LA(1) ) {
				case PACKAGE_VK:
					{
					alt31=1;
					}
					break;
				case BODY_VK:
					{
					alt31=2;
					}
					break;
				case SPECIFICATION_VK:
					{
					alt31=3;
					}
					break;
			}
			switch (alt31) {
				case 1 :
					// PLSQLPrinter.g:189:18: PACKAGE_VK
					{
					match(input,PACKAGE_VK,FOLLOW_PACKAGE_VK_in_alter_package1291); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:189:29: BODY_VK
					{
					match(input,BODY_VK,FOLLOW_BODY_VK_in_alter_package1293); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:189:37: SPECIFICATION_VK
					{
					match(input,SPECIFICATION_VK,FOLLOW_SPECIFICATION_VK_in_alter_package1295); 
					}
					break;

			}

			// PLSQLPrinter.g:189:56: ( compiler_parameters_clause )*
			loop32:
			while (true) {
				int alt32=2;
				int LA32_0 = input.LA(1);
				if ( (LA32_0==COMPILER_PARAMETER) ) {
					alt32=1;
				}

				switch (alt32) {
				case 1 :
					// PLSQLPrinter.g:189:56: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_package1299);
					compiler_parameters_clause();
					state._fsp--;

					}
					break;

				default :
					break loop32;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 190:5: -> template( \"not implemented: alter_package\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_package");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_package"


	public static class create_package_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_package"
	// PLSQLPrinter.g:193:1: create_package : ( ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? package_name ( invoker_rights_clause )? (items+= package_obj_spec )* ) -> create_package_spec(is_replace=$REPLACE_VK != nullname=$package_name.stinvoker_rights_clause=$invoker_rights_clause.stitems=$items)| ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? package_name (items+= package_obj_body )* ( seq_of_statements )? ( exception_clause )? ) -> create_package_body(is_replace=$REPLACE_VK != nullname=$package_name.stitems=$itemsinit_section_seq_of_statements=$seq_of_statements.stinit_section_exception_clause=$exception_clause.st));
	public final PLSQLPrinter.create_package_return create_package() throws RecognitionException {
		PLSQLPrinter.create_package_return retval = new PLSQLPrinter.create_package_return();
		retval.start = input.LT(1);

		CommonTree REPLACE_VK23=null;
		CommonTree REPLACE_VK26=null;
		List<Object> list_items=null;
		TreeRuleReturnScope package_name24 =null;
		TreeRuleReturnScope invoker_rights_clause25 =null;
		TreeRuleReturnScope package_name27 =null;
		TreeRuleReturnScope seq_of_statements28 =null;
		TreeRuleReturnScope exception_clause29 =null;
		RuleReturnScope items = null;
		try {
			// PLSQLPrinter.g:194:5: ( ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? package_name ( invoker_rights_clause )? (items+= package_obj_spec )* ) -> create_package_spec(is_replace=$REPLACE_VK != nullname=$package_name.stinvoker_rights_clause=$invoker_rights_clause.stitems=$items)| ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? package_name (items+= package_obj_body )* ( seq_of_statements )? ( exception_clause )? ) -> create_package_body(is_replace=$REPLACE_VK != nullname=$package_name.stitems=$itemsinit_section_seq_of_statements=$seq_of_statements.stinit_section_exception_clause=$exception_clause.st))
			int alt40=2;
			int LA40_0 = input.LA(1);
			if ( (LA40_0==CREATE_PACKAGE_SPEC) ) {
				alt40=1;
			}
			else if ( (LA40_0==CREATE_PACKAGE_BODY) ) {
				alt40=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 40, 0, input);
				throw nvae;
			}

			switch (alt40) {
				case 1 :
					// PLSQLPrinter.g:194:10: ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? package_name ( invoker_rights_clause )? (items+= package_obj_spec )* )
					{
					match(input,CREATE_PACKAGE_SPEC,FOLLOW_CREATE_PACKAGE_SPEC_in_create_package1336); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:194:32: ( REPLACE_VK )?
					int alt33=2;
					int LA33_0 = input.LA(1);
					if ( (LA33_0==REPLACE_VK) ) {
						alt33=1;
					}
					switch (alt33) {
						case 1 :
							// PLSQLPrinter.g:194:32: REPLACE_VK
							{
							REPLACE_VK23=(CommonTree)match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_package1338); 
							}
							break;

					}

					pushFollow(FOLLOW_package_name_in_create_package1341);
					package_name24=package_name();
					state._fsp--;

					// PLSQLPrinter.g:194:57: ( invoker_rights_clause )?
					int alt34=2;
					int LA34_0 = input.LA(1);
					if ( (LA34_0==AUTHID_VK) ) {
						alt34=1;
					}
					switch (alt34) {
						case 1 :
							// PLSQLPrinter.g:194:57: invoker_rights_clause
							{
							pushFollow(FOLLOW_invoker_rights_clause_in_create_package1343);
							invoker_rights_clause25=invoker_rights_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:194:85: (items+= package_obj_spec )*
					loop35:
					while (true) {
						int alt35=2;
						int LA35_0 = input.LA(1);
						if ( (LA35_0==CURSOR_DECLARE||LA35_0==EXCEPTION_DECLARE||LA35_0==FUNCTION_SPEC||LA35_0==PRAGMA_DECLARE||LA35_0==PROCEDURE_SPEC||(LA35_0 >= RECORD_TYPE_DECLARE && LA35_0 <= RECORD_VAR_DECLARE)||LA35_0==SUBTYPE_DECLARE||(LA35_0 >= TABLE_TYPE_DECLARE && LA35_0 <= TABLE_VAR_DECLARE)||LA35_0==VARIABLE_DECLARE) ) {
							alt35=1;
						}

						switch (alt35) {
						case 1 :
							// PLSQLPrinter.g:194:85: items+= package_obj_spec
							{
							pushFollow(FOLLOW_package_obj_spec_in_create_package1348);
							items=package_obj_spec();
							state._fsp--;

							if (list_items==null) list_items=new ArrayList<Object>();
							list_items.add(items.getTemplate());
							}
							break;

						default :
							break loop35;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 195:5: -> create_package_spec(is_replace=$REPLACE_VK != nullname=$package_name.stinvoker_rights_clause=$invoker_rights_clause.stitems=$items)
					{
						retval.st = templateLib.getInstanceOf("create_package_spec",new STAttrMap().put("is_replace", REPLACE_VK23 != null).put("name", (package_name24!=null?((StringTemplate)package_name24.getTemplate()):null)).put("invoker_rights_clause", (invoker_rights_clause25!=null?((StringTemplate)invoker_rights_clause25.getTemplate()):null)).put("items", list_items));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:198:10: ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? package_name (items+= package_obj_body )* ( seq_of_statements )? ( exception_clause )? )
					{
					match(input,CREATE_PACKAGE_BODY,FOLLOW_CREATE_PACKAGE_BODY_in_create_package1416); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:198:32: ( REPLACE_VK )?
					int alt36=2;
					int LA36_0 = input.LA(1);
					if ( (LA36_0==REPLACE_VK) ) {
						alt36=1;
					}
					switch (alt36) {
						case 1 :
							// PLSQLPrinter.g:198:32: REPLACE_VK
							{
							REPLACE_VK26=(CommonTree)match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_package1418); 
							}
							break;

					}

					pushFollow(FOLLOW_package_name_in_create_package1421);
					package_name27=package_name();
					state._fsp--;

					// PLSQLPrinter.g:198:62: (items+= package_obj_body )*
					loop37:
					while (true) {
						int alt37=2;
						int LA37_0 = input.LA(1);
						if ( (LA37_0==CREATE_FUNCTION||LA37_0==CREATE_PROCEDURE||(LA37_0 >= CREATE_TYPE_BODY && LA37_0 <= CREATE_TYPE_SPEC)||LA37_0==CURSOR_DECLARE||LA37_0==EXCEPTION_DECLARE||LA37_0==FUNCTION_SPEC||LA37_0==PROCEDURE_SPEC||(LA37_0 >= RECORD_TYPE_DECLARE && LA37_0 <= RECORD_VAR_DECLARE)||LA37_0==SUBTYPE_DECLARE||(LA37_0 >= TABLE_TYPE_DECLARE && LA37_0 <= TABLE_VAR_DECLARE)||LA37_0==VARIABLE_DECLARE) ) {
							alt37=1;
						}

						switch (alt37) {
						case 1 :
							// PLSQLPrinter.g:198:62: items+= package_obj_body
							{
							pushFollow(FOLLOW_package_obj_body_in_create_package1425);
							items=package_obj_body();
							state._fsp--;

							if (list_items==null) list_items=new ArrayList<Object>();
							list_items.add(items.getTemplate());
							}
							break;

						default :
							break loop37;
						}
					}

					// PLSQLPrinter.g:198:82: ( seq_of_statements )?
					int alt38=2;
					int LA38_0 = input.LA(1);
					if ( (LA38_0==STATEMENTS) ) {
						alt38=1;
					}
					switch (alt38) {
						case 1 :
							// PLSQLPrinter.g:198:82: seq_of_statements
							{
							pushFollow(FOLLOW_seq_of_statements_in_create_package1428);
							seq_of_statements28=seq_of_statements();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:198:101: ( exception_clause )?
					int alt39=2;
					int LA39_0 = input.LA(1);
					if ( (LA39_0==SQL92_RESERVED_EXCEPTION) ) {
						alt39=1;
					}
					switch (alt39) {
						case 1 :
							// PLSQLPrinter.g:198:101: exception_clause
							{
							pushFollow(FOLLOW_exception_clause_in_create_package1431);
							exception_clause29=exception_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 199:5: -> create_package_body(is_replace=$REPLACE_VK != nullname=$package_name.stitems=$itemsinit_section_seq_of_statements=$seq_of_statements.stinit_section_exception_clause=$exception_clause.st)
					{
						retval.st = templateLib.getInstanceOf("create_package_body",new STAttrMap().put("is_replace", REPLACE_VK26 != null).put("name", (package_name27!=null?((StringTemplate)package_name27.getTemplate()):null)).put("items", list_items).put("init_section_seq_of_statements", (seq_of_statements28!=null?((StringTemplate)seq_of_statements28.getTemplate()):null)).put("init_section_exception_clause", (exception_clause29!=null?((StringTemplate)exception_clause29.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_package"


	public static class package_obj_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "package_obj_spec"
	// PLSQLPrinter.g:207:1: package_obj_spec : ( variable_declaration -> { $variable_declaration.st}| subtype_declaration -> { $subtype_declaration.st}| cursor_declaration -> { $cursor_declaration.st}| exception_declaration -> { $exception_declaration.st}| record_declaration -> { $record_declaration.st}| table_declaration -> { $table_declaration.st}| procedure_spec -> { $procedure_spec.st}| function_spec -> { $function_spec.st}| pragma_declaration -> { $pragma_declaration.st});
	public final PLSQLPrinter.package_obj_spec_return package_obj_spec() throws RecognitionException {
		PLSQLPrinter.package_obj_spec_return retval = new PLSQLPrinter.package_obj_spec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope variable_declaration30 =null;
		TreeRuleReturnScope subtype_declaration31 =null;
		TreeRuleReturnScope cursor_declaration32 =null;
		TreeRuleReturnScope exception_declaration33 =null;
		TreeRuleReturnScope record_declaration34 =null;
		TreeRuleReturnScope table_declaration35 =null;
		TreeRuleReturnScope procedure_spec36 =null;
		TreeRuleReturnScope function_spec37 =null;
		TreeRuleReturnScope pragma_declaration38 =null;

		try {
			// PLSQLPrinter.g:208:5: ( variable_declaration -> { $variable_declaration.st}| subtype_declaration -> { $subtype_declaration.st}| cursor_declaration -> { $cursor_declaration.st}| exception_declaration -> { $exception_declaration.st}| record_declaration -> { $record_declaration.st}| table_declaration -> { $table_declaration.st}| procedure_spec -> { $procedure_spec.st}| function_spec -> { $function_spec.st}| pragma_declaration -> { $pragma_declaration.st})
			int alt41=9;
			switch ( input.LA(1) ) {
			case VARIABLE_DECLARE:
				{
				alt41=1;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt41=2;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt41=3;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt41=4;
				}
				break;
			case RECORD_TYPE_DECLARE:
			case RECORD_VAR_DECLARE:
				{
				alt41=5;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt41=6;
				}
				break;
			case PROCEDURE_SPEC:
				{
				alt41=7;
				}
				break;
			case FUNCTION_SPEC:
				{
				alt41=8;
				}
				break;
			case PRAGMA_DECLARE:
				{
				alt41=9;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 41, 0, input);
				throw nvae;
			}
			switch (alt41) {
				case 1 :
					// PLSQLPrinter.g:208:10: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_package_obj_spec1524);
					variable_declaration30=variable_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 208:31: -> { $variable_declaration.st}
					{
						retval.st =  (variable_declaration30!=null?((StringTemplate)variable_declaration30.getTemplate()):null);
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:209:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_package_obj_spec1540);
					subtype_declaration31=subtype_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 209:31: -> { $subtype_declaration.st}
					{
						retval.st =  (subtype_declaration31!=null?((StringTemplate)subtype_declaration31.getTemplate()):null);
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:210:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_package_obj_spec1556);
					cursor_declaration32=cursor_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 210:30: -> { $cursor_declaration.st}
					{
						retval.st =  (cursor_declaration32!=null?((StringTemplate)cursor_declaration32.getTemplate()):null);
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:211:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_package_obj_spec1572);
					exception_declaration33=exception_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 211:33: -> { $exception_declaration.st}
					{
						retval.st =  (exception_declaration33!=null?((StringTemplate)exception_declaration33.getTemplate()):null);
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:212:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_package_obj_spec1588);
					record_declaration34=record_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 212:30: -> { $record_declaration.st}
					{
						retval.st =  (record_declaration34!=null?((StringTemplate)record_declaration34.getTemplate()):null);
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:213:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_package_obj_spec1604);
					table_declaration35=table_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 213:29: -> { $table_declaration.st}
					{
						retval.st =  (table_declaration35!=null?((StringTemplate)table_declaration35.getTemplate()):null);
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:214:11: procedure_spec
					{
					pushFollow(FOLLOW_procedure_spec_in_package_obj_spec1620);
					procedure_spec36=procedure_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 214:26: -> { $procedure_spec.st}
					{
						retval.st =  (procedure_spec36!=null?((StringTemplate)procedure_spec36.getTemplate()):null);
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:215:11: function_spec
					{
					pushFollow(FOLLOW_function_spec_in_package_obj_spec1636);
					function_spec37=function_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 215:25: -> { $function_spec.st}
					{
						retval.st =  (function_spec37!=null?((StringTemplate)function_spec37.getTemplate()):null);
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:216:11: pragma_declaration
					{
					pushFollow(FOLLOW_pragma_declaration_in_package_obj_spec1652);
					pragma_declaration38=pragma_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 216:30: -> { $pragma_declaration.st}
					{
						retval.st =  (pragma_declaration38!=null?((StringTemplate)pragma_declaration38.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_obj_spec"


	public static class procedure_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "procedure_spec"
	// PLSQLPrinter.g:219:1: procedure_spec : ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( ^( CALL_MODE call_spec ) )? ) -> procedure_spec(name=$procedure_name.starguments=$arguments);
	public final PLSQLPrinter.procedure_spec_return procedure_spec() throws RecognitionException {
		PLSQLPrinter.procedure_spec_return retval = new PLSQLPrinter.procedure_spec_return();
		retval.start = input.LT(1);

		List<Object> list_arguments=null;
		TreeRuleReturnScope procedure_name39 =null;
		RuleReturnScope arguments = null;
		try {
			// PLSQLPrinter.g:220:5: ( ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( ^( CALL_MODE call_spec ) )? ) -> procedure_spec(name=$procedure_name.starguments=$arguments))
			// PLSQLPrinter.g:220:11: ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( ^( CALL_MODE call_spec ) )? )
			{
			match(input,PROCEDURE_SPEC,FOLLOW_PROCEDURE_SPEC_in_procedure_spec1678); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_procedure_name_in_procedure_spec1680);
			procedure_name39=procedure_name();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_procedure_spec1683); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:220:65: (arguments+= parameter )*
				loop42:
				while (true) {
					int alt42=2;
					int LA42_0 = input.LA(1);
					if ( (LA42_0==PARAMETER) ) {
						alt42=1;
					}

					switch (alt42) {
					case 1 :
						// PLSQLPrinter.g:220:65: arguments+= parameter
						{
						pushFollow(FOLLOW_parameter_in_procedure_spec1687);
						arguments=parameter();
						state._fsp--;

						if (list_arguments==null) list_arguments=new ArrayList<Object>();
						list_arguments.add(arguments.getTemplate());
						}
						break;

					default :
						break loop42;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:221:13: ( ^( CALL_MODE call_spec ) )?
			int alt43=2;
			int LA43_0 = input.LA(1);
			if ( (LA43_0==CALL_MODE) ) {
				alt43=1;
			}
			switch (alt43) {
				case 1 :
					// PLSQLPrinter.g:221:14: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_procedure_spec1705); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_procedure_spec1707);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 223:5: -> procedure_spec(name=$procedure_name.starguments=$arguments)
			{
				retval.st = templateLib.getInstanceOf("procedure_spec",new STAttrMap().put("name", (procedure_name39!=null?((StringTemplate)procedure_name39.getTemplate()):null)).put("arguments", list_arguments));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "procedure_spec"


	public static class function_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "function_spec"
	// PLSQLPrinter.g:226:1: function_spec : ^( FUNCTION_SPEC function_name type_spec ^( PARAMETERS (arguments+= parameter )* ) ( PIPELINED_VK )? ( RESULT_CACHE_VK )? ( DETERMINISTIC_VK )? ) -> function_spec(name=$function_name.starguments=$argumentsreturn_type=$type_spec.stis_pipelined=$PIPELINED_VK != nullis_result_cache=$RESULT_CACHE_VK != nullis_deterministic=$DETERMINISTIC_VK != null);
	public final PLSQLPrinter.function_spec_return function_spec() throws RecognitionException {
		PLSQLPrinter.function_spec_return retval = new PLSQLPrinter.function_spec_return();
		retval.start = input.LT(1);

		CommonTree PIPELINED_VK42=null;
		CommonTree RESULT_CACHE_VK43=null;
		CommonTree DETERMINISTIC_VK44=null;
		List<Object> list_arguments=null;
		TreeRuleReturnScope function_name40 =null;
		TreeRuleReturnScope type_spec41 =null;
		RuleReturnScope arguments = null;
		try {
			// PLSQLPrinter.g:227:5: ( ^( FUNCTION_SPEC function_name type_spec ^( PARAMETERS (arguments+= parameter )* ) ( PIPELINED_VK )? ( RESULT_CACHE_VK )? ( DETERMINISTIC_VK )? ) -> function_spec(name=$function_name.starguments=$argumentsreturn_type=$type_spec.stis_pipelined=$PIPELINED_VK != nullis_result_cache=$RESULT_CACHE_VK != nullis_deterministic=$DETERMINISTIC_VK != null))
			// PLSQLPrinter.g:227:10: ^( FUNCTION_SPEC function_name type_spec ^( PARAMETERS (arguments+= parameter )* ) ( PIPELINED_VK )? ( RESULT_CACHE_VK )? ( DETERMINISTIC_VK )? )
			{
			match(input,FUNCTION_SPEC,FOLLOW_FUNCTION_SPEC_in_function_spec1757); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_name_in_function_spec1759);
			function_name40=function_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_function_spec1761);
			type_spec41=type_spec();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_function_spec1764); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:227:72: (arguments+= parameter )*
				loop44:
				while (true) {
					int alt44=2;
					int LA44_0 = input.LA(1);
					if ( (LA44_0==PARAMETER) ) {
						alt44=1;
					}

					switch (alt44) {
					case 1 :
						// PLSQLPrinter.g:227:72: arguments+= parameter
						{
						pushFollow(FOLLOW_parameter_in_function_spec1768);
						arguments=parameter();
						state._fsp--;

						if (list_arguments==null) list_arguments=new ArrayList<Object>();
						list_arguments.add(arguments.getTemplate());
						}
						break;

					default :
						break loop44;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:228:13: ( PIPELINED_VK )?
			int alt45=2;
			int LA45_0 = input.LA(1);
			if ( (LA45_0==PIPELINED_VK) ) {
				alt45=1;
			}
			switch (alt45) {
				case 1 :
					// PLSQLPrinter.g:228:13: PIPELINED_VK
					{
					PIPELINED_VK42=(CommonTree)match(input,PIPELINED_VK,FOLLOW_PIPELINED_VK_in_function_spec1784); 
					}
					break;

			}

			// PLSQLPrinter.g:228:27: ( RESULT_CACHE_VK )?
			int alt46=2;
			int LA46_0 = input.LA(1);
			if ( (LA46_0==RESULT_CACHE_VK) ) {
				alt46=1;
			}
			switch (alt46) {
				case 1 :
					// PLSQLPrinter.g:228:27: RESULT_CACHE_VK
					{
					RESULT_CACHE_VK43=(CommonTree)match(input,RESULT_CACHE_VK,FOLLOW_RESULT_CACHE_VK_in_function_spec1787); 
					}
					break;

			}

			// PLSQLPrinter.g:228:44: ( DETERMINISTIC_VK )?
			int alt47=2;
			int LA47_0 = input.LA(1);
			if ( (LA47_0==DETERMINISTIC_VK) ) {
				alt47=1;
			}
			switch (alt47) {
				case 1 :
					// PLSQLPrinter.g:228:44: DETERMINISTIC_VK
					{
					DETERMINISTIC_VK44=(CommonTree)match(input,DETERMINISTIC_VK,FOLLOW_DETERMINISTIC_VK_in_function_spec1790); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 230:5: -> function_spec(name=$function_name.starguments=$argumentsreturn_type=$type_spec.stis_pipelined=$PIPELINED_VK != nullis_result_cache=$RESULT_CACHE_VK != nullis_deterministic=$DETERMINISTIC_VK != null)
			{
				retval.st = templateLib.getInstanceOf("function_spec",new STAttrMap().put("name", (function_name40!=null?((StringTemplate)function_name40.getTemplate()):null)).put("arguments", list_arguments).put("return_type", (type_spec41!=null?((StringTemplate)type_spec41.getTemplate()):null)).put("is_pipelined", PIPELINED_VK42 != null).put("is_result_cache", RESULT_CACHE_VK43 != null).put("is_deterministic", DETERMINISTIC_VK44 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_spec"


	public static class package_obj_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "package_obj_body"
	// PLSQLPrinter.g:235:1: package_obj_body : ( procedure_spec -> { $procedure_spec.st}| function_spec -> { $function_spec.st}| variable_declaration -> {$variable_declaration.st}| subtype_declaration -> {$subtype_declaration.st}| cursor_declaration -> {$cursor_declaration.st}| exception_declaration -> {$exception_declaration.st}| record_declaration -> {$record_declaration.st}| table_declaration -> {$table_declaration.st}| create_procedure_body -> {$create_procedure_body.st}| create_function_body -> {$create_function_body.st}| create_type -> {$create_type.st});
	public final PLSQLPrinter.package_obj_body_return package_obj_body() throws RecognitionException {
		PLSQLPrinter.package_obj_body_return retval = new PLSQLPrinter.package_obj_body_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope procedure_spec45 =null;
		TreeRuleReturnScope function_spec46 =null;
		TreeRuleReturnScope variable_declaration47 =null;
		TreeRuleReturnScope subtype_declaration48 =null;
		TreeRuleReturnScope cursor_declaration49 =null;
		TreeRuleReturnScope exception_declaration50 =null;
		TreeRuleReturnScope record_declaration51 =null;
		TreeRuleReturnScope table_declaration52 =null;
		TreeRuleReturnScope create_procedure_body53 =null;
		TreeRuleReturnScope create_function_body54 =null;
		TreeRuleReturnScope create_type55 =null;

		try {
			// PLSQLPrinter.g:236:5: ( procedure_spec -> { $procedure_spec.st}| function_spec -> { $function_spec.st}| variable_declaration -> {$variable_declaration.st}| subtype_declaration -> {$subtype_declaration.st}| cursor_declaration -> {$cursor_declaration.st}| exception_declaration -> {$exception_declaration.st}| record_declaration -> {$record_declaration.st}| table_declaration -> {$table_declaration.st}| create_procedure_body -> {$create_procedure_body.st}| create_function_body -> {$create_function_body.st}| create_type -> {$create_type.st})
			int alt48=11;
			switch ( input.LA(1) ) {
			case PROCEDURE_SPEC:
				{
				alt48=1;
				}
				break;
			case FUNCTION_SPEC:
				{
				alt48=2;
				}
				break;
			case VARIABLE_DECLARE:
				{
				alt48=3;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt48=4;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt48=5;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt48=6;
				}
				break;
			case RECORD_TYPE_DECLARE:
			case RECORD_VAR_DECLARE:
				{
				alt48=7;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt48=8;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt48=9;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt48=10;
				}
				break;
			case CREATE_TYPE_BODY:
			case CREATE_TYPE_SPEC:
				{
				alt48=11;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 48, 0, input);
				throw nvae;
			}
			switch (alt48) {
				case 1 :
					// PLSQLPrinter.g:236:11: procedure_spec
					{
					pushFollow(FOLLOW_procedure_spec_in_package_obj_body1885);
					procedure_spec45=procedure_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 236:26: -> { $procedure_spec.st}
					{
						retval.st =  (procedure_spec45!=null?((StringTemplate)procedure_spec45.getTemplate()):null);
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:237:11: function_spec
					{
					pushFollow(FOLLOW_function_spec_in_package_obj_body1901);
					function_spec46=function_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 237:25: -> { $function_spec.st}
					{
						retval.st =  (function_spec46!=null?((StringTemplate)function_spec46.getTemplate()):null);
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:238:11: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_package_obj_body1917);
					variable_declaration47=variable_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 238:32: -> {$variable_declaration.st}
					{
						retval.st = (variable_declaration47!=null?((StringTemplate)variable_declaration47.getTemplate()):null);
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:239:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_package_obj_body1933);
					subtype_declaration48=subtype_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 239:31: -> {$subtype_declaration.st}
					{
						retval.st = (subtype_declaration48!=null?((StringTemplate)subtype_declaration48.getTemplate()):null);
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:240:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_package_obj_body1949);
					cursor_declaration49=cursor_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 240:30: -> {$cursor_declaration.st}
					{
						retval.st = (cursor_declaration49!=null?((StringTemplate)cursor_declaration49.getTemplate()):null);
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:241:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_package_obj_body1965);
					exception_declaration50=exception_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 241:33: -> {$exception_declaration.st}
					{
						retval.st = (exception_declaration50!=null?((StringTemplate)exception_declaration50.getTemplate()):null);
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:242:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_package_obj_body1981);
					record_declaration51=record_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 242:30: -> {$record_declaration.st}
					{
						retval.st = (record_declaration51!=null?((StringTemplate)record_declaration51.getTemplate()):null);
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:243:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_package_obj_body1997);
					table_declaration52=table_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 243:29: -> {$table_declaration.st}
					{
						retval.st = (table_declaration52!=null?((StringTemplate)table_declaration52.getTemplate()):null);
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:244:11: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_package_obj_body2013);
					create_procedure_body53=create_procedure_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 244:33: -> {$create_procedure_body.st}
					{
						retval.st = (create_procedure_body53!=null?((StringTemplate)create_procedure_body53.getTemplate()):null);
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:245:11: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_package_obj_body2029);
					create_function_body54=create_function_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 245:32: -> {$create_function_body.st}
					{
						retval.st = (create_function_body54!=null?((StringTemplate)create_function_body54.getTemplate()):null);
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:246:11: create_type
					{
					pushFollow(FOLLOW_create_type_in_package_obj_body2045);
					create_type55=create_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 246:23: -> {$create_type.st}
					{
						retval.st = (create_type55!=null?((StringTemplate)create_type55.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_obj_body"


	public static class drop_procedure_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_procedure"
	// PLSQLPrinter.g:255:1: drop_procedure : ^( DROP_PROCEDURE procedure_name ) -> template( \"not implemented: drop_procedure\";
	public final PLSQLPrinter.drop_procedure_return drop_procedure() throws RecognitionException {
		PLSQLPrinter.drop_procedure_return retval = new PLSQLPrinter.drop_procedure_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:256:5: ( ^( DROP_PROCEDURE procedure_name ) -> template( \"not implemented: drop_procedure\")
			// PLSQLPrinter.g:256:10: ^( DROP_PROCEDURE procedure_name )
			{
			match(input,DROP_PROCEDURE,FOLLOW_DROP_PROCEDURE_in_drop_procedure2076); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_procedure_name_in_drop_procedure2078);
			procedure_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 257:5: -> template( \"not implemented: drop_procedure\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_procedure");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_procedure"


	public static class alter_procedure_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_procedure"
	// PLSQLPrinter.g:260:1: alter_procedure : ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_procedure\";
	public final PLSQLPrinter.alter_procedure_return alter_procedure() throws RecognitionException {
		PLSQLPrinter.alter_procedure_return retval = new PLSQLPrinter.alter_procedure_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:261:5: ( ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_procedure\")
			// PLSQLPrinter.g:261:10: ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
			{
			match(input,ALTER_PROCEDURE,FOLLOW_ALTER_PROCEDURE_in_alter_procedure2114); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_procedure_name_in_alter_procedure2116);
			procedure_name();
			state._fsp--;

			// PLSQLPrinter.g:261:43: ( DEBUG_VK )?
			int alt49=2;
			int LA49_0 = input.LA(1);
			if ( (LA49_0==DEBUG_VK) ) {
				alt49=1;
			}
			switch (alt49) {
				case 1 :
					// PLSQLPrinter.g:261:43: DEBUG_VK
					{
					match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_procedure2118); 
					}
					break;

			}

			// PLSQLPrinter.g:261:53: ( REUSE_VK )?
			int alt50=2;
			int LA50_0 = input.LA(1);
			if ( (LA50_0==REUSE_VK) ) {
				alt50=1;
			}
			switch (alt50) {
				case 1 :
					// PLSQLPrinter.g:261:53: REUSE_VK
					{
					match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_procedure2121); 
					}
					break;

			}

			// PLSQLPrinter.g:261:63: ( compiler_parameters_clause )*
			loop51:
			while (true) {
				int alt51=2;
				int LA51_0 = input.LA(1);
				if ( (LA51_0==COMPILER_PARAMETER) ) {
					alt51=1;
				}

				switch (alt51) {
				case 1 :
					// PLSQLPrinter.g:261:63: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_procedure2124);
					compiler_parameters_clause();
					state._fsp--;

					}
					break;

				default :
					break loop51;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 262:5: -> template( \"not implemented: alter_procedure\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_procedure");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_procedure"


	public static class create_procedure_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_procedure_body"
	// PLSQLPrinter.g:265:1: create_procedure_body : ^( CREATE_PROCEDURE ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( invoker_rights_clause )? create_procedure_body_impl ) -> create_procedure_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname=$procedure_name.starguments=$argumentsinvoker_rights_clause=$invoker_rights_clause.stimpl=$create_procedure_body_impl.st);
	public final PLSQLPrinter.create_procedure_body_return create_procedure_body() throws RecognitionException {
		PLSQLPrinter.create_procedure_body_return retval = new PLSQLPrinter.create_procedure_body_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_CREATE56=null;
		CommonTree REPLACE_VK57=null;
		List<Object> list_arguments=null;
		TreeRuleReturnScope procedure_name58 =null;
		TreeRuleReturnScope invoker_rights_clause59 =null;
		TreeRuleReturnScope create_procedure_body_impl60 =null;
		RuleReturnScope arguments = null;
		try {
			// PLSQLPrinter.g:266:5: ( ^( CREATE_PROCEDURE ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( invoker_rights_clause )? create_procedure_body_impl ) -> create_procedure_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname=$procedure_name.starguments=$argumentsinvoker_rights_clause=$invoker_rights_clause.stimpl=$create_procedure_body_impl.st))
			// PLSQLPrinter.g:266:10: ^( CREATE_PROCEDURE ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( invoker_rights_clause )? create_procedure_body_impl )
			{
			match(input,CREATE_PROCEDURE,FOLLOW_CREATE_PROCEDURE_in_create_procedure_body2161); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:266:29: ( SQL92_RESERVED_CREATE )?
			int alt52=2;
			int LA52_0 = input.LA(1);
			if ( (LA52_0==SQL92_RESERVED_CREATE) ) {
				alt52=1;
			}
			switch (alt52) {
				case 1 :
					// PLSQLPrinter.g:266:29: SQL92_RESERVED_CREATE
					{
					SQL92_RESERVED_CREATE56=(CommonTree)match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_create_procedure_body2163); 
					}
					break;

			}

			// PLSQLPrinter.g:266:52: ( REPLACE_VK )?
			int alt53=2;
			int LA53_0 = input.LA(1);
			if ( (LA53_0==REPLACE_VK) ) {
				alt53=1;
			}
			switch (alt53) {
				case 1 :
					// PLSQLPrinter.g:266:52: REPLACE_VK
					{
					REPLACE_VK57=(CommonTree)match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_procedure_body2166); 
					}
					break;

			}

			pushFollow(FOLLOW_procedure_name_in_create_procedure_body2169);
			procedure_name58=procedure_name();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_create_procedure_body2172); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:266:101: (arguments+= parameter )*
				loop54:
				while (true) {
					int alt54=2;
					int LA54_0 = input.LA(1);
					if ( (LA54_0==PARAMETER) ) {
						alt54=1;
					}

					switch (alt54) {
					case 1 :
						// PLSQLPrinter.g:266:101: arguments+= parameter
						{
						pushFollow(FOLLOW_parameter_in_create_procedure_body2176);
						arguments=parameter();
						state._fsp--;

						if (list_arguments==null) list_arguments=new ArrayList<Object>();
						list_arguments.add(arguments.getTemplate());
						}
						break;

					default :
						break loop54;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:266:115: ( invoker_rights_clause )?
			int alt55=2;
			int LA55_0 = input.LA(1);
			if ( (LA55_0==AUTHID_VK) ) {
				alt55=1;
			}
			switch (alt55) {
				case 1 :
					// PLSQLPrinter.g:266:115: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_create_procedure_body2180);
					invoker_rights_clause59=invoker_rights_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_create_procedure_body_impl_in_create_procedure_body2194);
			create_procedure_body_impl60=create_procedure_body_impl();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 269:5: -> create_procedure_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname=$procedure_name.starguments=$argumentsinvoker_rights_clause=$invoker_rights_clause.stimpl=$create_procedure_body_impl.st)
			{
				retval.st = templateLib.getInstanceOf("create_procedure_body",new STAttrMap().put("is_create", SQL92_RESERVED_CREATE56 != null).put("is_replace", REPLACE_VK57 != null).put("name", (procedure_name58!=null?((StringTemplate)procedure_name58.getTemplate()):null)).put("arguments", list_arguments).put("invoker_rights_clause", (invoker_rights_clause59!=null?((StringTemplate)invoker_rights_clause59.getTemplate()):null)).put("impl", (create_procedure_body_impl60!=null?((StringTemplate)create_procedure_body_impl60.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_procedure_body"


	public static class create_procedure_body_impl_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_procedure_body_impl"
	// PLSQLPrinter.g:274:1: create_procedure_body_impl : ( EXTERNAL_VK -> create_procedure_body_impl_external(| ^( CALL_MODE call_spec ) -> { $call_spec.st }| ^( BODY_MODE block ) -> { $block.st });
	public final PLSQLPrinter.create_procedure_body_impl_return create_procedure_body_impl() throws RecognitionException {
		PLSQLPrinter.create_procedure_body_impl_return retval = new PLSQLPrinter.create_procedure_body_impl_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope call_spec61 =null;
		TreeRuleReturnScope block62 =null;

		try {
			// PLSQLPrinter.g:275:5: ( EXTERNAL_VK -> create_procedure_body_impl_external(| ^( CALL_MODE call_spec ) -> { $call_spec.st }| ^( BODY_MODE block ) -> { $block.st })
			int alt56=3;
			switch ( input.LA(1) ) {
			case EXTERNAL_VK:
				{
				alt56=1;
				}
				break;
			case CALL_MODE:
				{
				alt56=2;
				}
				break;
			case BODY_MODE:
				{
				alt56=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 56, 0, input);
				throw nvae;
			}
			switch (alt56) {
				case 1 :
					// PLSQLPrinter.g:275:9: EXTERNAL_VK
					{
					match(input,EXTERNAL_VK,FOLLOW_EXTERNAL_VK_in_create_procedure_body_impl2288); 
					// TEMPLATE REWRITE
					// 275:21: -> create_procedure_body_impl_external(
					{
						retval.st = templateLib.getInstanceOf("create_procedure_body_impl_external");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:276:14: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_create_procedure_body_impl2310); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_create_procedure_body_impl2312);
					call_spec61=call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 276:37: -> { $call_spec.st }
					{
						retval.st =  (call_spec61!=null?((StringTemplate)call_spec61.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:277:14: ^( BODY_MODE block )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_create_procedure_body_impl2333); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_create_procedure_body_impl2335);
					block62=block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 277:33: -> { $block.st }
					{
						retval.st =  (block62!=null?((StringTemplate)block62.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_procedure_body_impl"


	public static class drop_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_trigger"
	// PLSQLPrinter.g:284:1: drop_trigger : ^( DROP_TRIGGER trigger_name ) -> template( \"not implemented: drop_trigger\";
	public final PLSQLPrinter.drop_trigger_return drop_trigger() throws RecognitionException {
		PLSQLPrinter.drop_trigger_return retval = new PLSQLPrinter.drop_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:285:5: ( ^( DROP_TRIGGER trigger_name ) -> template( \"not implemented: drop_trigger\")
			// PLSQLPrinter.g:285:10: ^( DROP_TRIGGER trigger_name )
			{
			match(input,DROP_TRIGGER,FOLLOW_DROP_TRIGGER_in_drop_trigger2365); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_trigger_name_in_drop_trigger2367);
			trigger_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 286:5: -> template( \"not implemented: drop_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_trigger"


	public static class alter_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_trigger"
	// PLSQLPrinter.g:289:1: alter_trigger : ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) -> template( \"not implemented: alter_trigger\";
	public final PLSQLPrinter.alter_trigger_return alter_trigger() throws RecognitionException {
		PLSQLPrinter.alter_trigger_return retval = new PLSQLPrinter.alter_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:290:5: ( ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) -> template( \"not implemented: alter_trigger\")
			// PLSQLPrinter.g:290:10: ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
			{
			match(input,ALTER_TRIGGER,FOLLOW_ALTER_TRIGGER_in_alter_trigger2403); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_trigger_name_in_alter_trigger2405);
			trigger_name();
			state._fsp--;

			// PLSQLPrinter.g:291:13: ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
			int alt61=3;
			switch ( input.LA(1) ) {
			case DISABLE_VK:
			case ENABLE_VK:
				{
				alt61=1;
				}
				break;
			case RENAME_VK:
				{
				alt61=2;
				}
				break;
			case UP:
			case COMPILER_PARAMETER:
			case DEBUG_VK:
			case REUSE_VK:
				{
				alt61=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 61, 0, input);
				throw nvae;
			}
			switch (alt61) {
				case 1 :
					// PLSQLPrinter.g:291:18: ( ENABLE_VK | DISABLE_VK )
					{
					// PLSQLPrinter.g:291:18: ( ENABLE_VK | DISABLE_VK )
					int alt57=2;
					int LA57_0 = input.LA(1);
					if ( (LA57_0==ENABLE_VK) ) {
						alt57=1;
					}
					else if ( (LA57_0==DISABLE_VK) ) {
						alt57=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 57, 0, input);
						throw nvae;
					}

					switch (alt57) {
						case 1 :
							// PLSQLPrinter.g:291:19: ENABLE_VK
							{
							match(input,ENABLE_VK,FOLLOW_ENABLE_VK_in_alter_trigger2426); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:291:29: DISABLE_VK
							{
							match(input,DISABLE_VK,FOLLOW_DISABLE_VK_in_alter_trigger2428); 
							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:292:18: ^( RENAME_VK trigger_name )
					{
					match(input,RENAME_VK,FOLLOW_RENAME_VK_in_alter_trigger2449); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_trigger_name_in_alter_trigger2451);
					trigger_name();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:293:18: ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )*
					{
					// PLSQLPrinter.g:293:18: ( DEBUG_VK )?
					int alt58=2;
					int LA58_0 = input.LA(1);
					if ( (LA58_0==DEBUG_VK) ) {
						alt58=1;
					}
					switch (alt58) {
						case 1 :
							// PLSQLPrinter.g:293:18: DEBUG_VK
							{
							match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_trigger2471); 
							}
							break;

					}

					// PLSQLPrinter.g:293:28: ( REUSE_VK )?
					int alt59=2;
					int LA59_0 = input.LA(1);
					if ( (LA59_0==REUSE_VK) ) {
						alt59=1;
					}
					switch (alt59) {
						case 1 :
							// PLSQLPrinter.g:293:28: REUSE_VK
							{
							match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_trigger2474); 
							}
							break;

					}

					// PLSQLPrinter.g:293:38: ( compiler_parameters_clause )*
					loop60:
					while (true) {
						int alt60=2;
						int LA60_0 = input.LA(1);
						if ( (LA60_0==COMPILER_PARAMETER) ) {
							alt60=1;
						}

						switch (alt60) {
						case 1 :
							// PLSQLPrinter.g:293:38: compiler_parameters_clause
							{
							pushFollow(FOLLOW_compiler_parameters_clause_in_alter_trigger2477);
							compiler_parameters_clause();
							state._fsp--;

							}
							break;

						default :
							break loop60;
						}
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 296:5: -> template( \"not implemented: alter_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_trigger"


	public static class create_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_trigger"
	// PLSQLPrinter.g:299:1: create_trigger : ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body ) -> template( \"not implemented: create_trigger\";
	public final PLSQLPrinter.create_trigger_return create_trigger() throws RecognitionException {
		PLSQLPrinter.create_trigger_return retval = new PLSQLPrinter.create_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:300:5: ( ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body ) -> template( \"not implemented: create_trigger\")
			// PLSQLPrinter.g:300:10: ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body )
			{
			match(input,CREATE_TRIGGER,FOLLOW_CREATE_TRIGGER_in_create_trigger2537); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:300:27: ( REPLACE_VK )?
			int alt62=2;
			int LA62_0 = input.LA(1);
			if ( (LA62_0==REPLACE_VK) ) {
				alt62=1;
			}
			switch (alt62) {
				case 1 :
					// PLSQLPrinter.g:300:27: REPLACE_VK
					{
					match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_trigger2539); 
					}
					break;

			}

			pushFollow(FOLLOW_trigger_name_in_create_trigger2542);
			trigger_name();
			state._fsp--;

			// PLSQLPrinter.g:301:13: ( simple_dml_trigger )?
			int alt63=2;
			int LA63_0 = input.LA(1);
			if ( (LA63_0==SIMPLE_DML) ) {
				alt63=1;
			}
			switch (alt63) {
				case 1 :
					// PLSQLPrinter.g:301:13: simple_dml_trigger
					{
					pushFollow(FOLLOW_simple_dml_trigger_in_create_trigger2558);
					simple_dml_trigger();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:301:33: ( compound_dml_trigger )?
			int alt64=2;
			int LA64_0 = input.LA(1);
			if ( (LA64_0==COMPOUND_DML) ) {
				alt64=1;
			}
			switch (alt64) {
				case 1 :
					// PLSQLPrinter.g:301:33: compound_dml_trigger
					{
					pushFollow(FOLLOW_compound_dml_trigger_in_create_trigger2561);
					compound_dml_trigger();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:301:55: ( non_dml_trigger )?
			int alt65=2;
			int LA65_0 = input.LA(1);
			if ( (LA65_0==NON_DML) ) {
				alt65=1;
			}
			switch (alt65) {
				case 1 :
					// PLSQLPrinter.g:301:55: non_dml_trigger
					{
					pushFollow(FOLLOW_non_dml_trigger_in_create_trigger2564);
					non_dml_trigger();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:302:13: ( trigger_follows_clause )?
			int alt66=2;
			int LA66_0 = input.LA(1);
			if ( (LA66_0==FOLLOWS_VK) ) {
				alt66=1;
			}
			switch (alt66) {
				case 1 :
					// PLSQLPrinter.g:302:13: trigger_follows_clause
					{
					pushFollow(FOLLOW_trigger_follows_clause_in_create_trigger2579);
					trigger_follows_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:302:37: ( ENABLE_VK | DISABLE_VK )?
			int alt67=3;
			int LA67_0 = input.LA(1);
			if ( (LA67_0==ENABLE_VK) ) {
				alt67=1;
			}
			else if ( (LA67_0==DISABLE_VK) ) {
				alt67=2;
			}
			switch (alt67) {
				case 1 :
					// PLSQLPrinter.g:302:38: ENABLE_VK
					{
					match(input,ENABLE_VK,FOLLOW_ENABLE_VK_in_create_trigger2583); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:302:48: DISABLE_VK
					{
					match(input,DISABLE_VK,FOLLOW_DISABLE_VK_in_create_trigger2585); 
					}
					break;

			}

			// PLSQLPrinter.g:302:61: ( trigger_when_clause )?
			int alt68=2;
			int LA68_0 = input.LA(1);
			if ( (LA68_0==SQL92_RESERVED_WHEN) ) {
				alt68=1;
			}
			switch (alt68) {
				case 1 :
					// PLSQLPrinter.g:302:61: trigger_when_clause
					{
					pushFollow(FOLLOW_trigger_when_clause_in_create_trigger2589);
					trigger_when_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_trigger_body_in_create_trigger2592);
			trigger_body();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 303:5: -> template( \"not implemented: create_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: create_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_trigger"


	public static class trigger_follows_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_follows_clause"
	// PLSQLPrinter.g:306:1: trigger_follows_clause : ^( FOLLOWS_VK ( trigger_name )+ ) -> template( \"not implemented: trigger_follows_clause\";
	public final PLSQLPrinter.trigger_follows_clause_return trigger_follows_clause() throws RecognitionException {
		PLSQLPrinter.trigger_follows_clause_return retval = new PLSQLPrinter.trigger_follows_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:307:5: ( ^( FOLLOWS_VK ( trigger_name )+ ) -> template( \"not implemented: trigger_follows_clause\")
			// PLSQLPrinter.g:307:10: ^( FOLLOWS_VK ( trigger_name )+ )
			{
			match(input,FOLLOWS_VK,FOLLOW_FOLLOWS_VK_in_trigger_follows_clause2628); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:307:23: ( trigger_name )+
			int cnt69=0;
			loop69:
			while (true) {
				int alt69=2;
				int LA69_0 = input.LA(1);
				if ( (LA69_0==TRIGGER_NAME) ) {
					alt69=1;
				}

				switch (alt69) {
				case 1 :
					// PLSQLPrinter.g:307:23: trigger_name
					{
					pushFollow(FOLLOW_trigger_name_in_trigger_follows_clause2630);
					trigger_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt69 >= 1 ) break loop69;
					EarlyExitException eee = new EarlyExitException(69, input);
					throw eee;
				}
				cnt69++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 308:5: -> template( \"not implemented: trigger_follows_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: trigger_follows_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_follows_clause"


	public static class trigger_when_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_when_clause"
	// PLSQLPrinter.g:311:1: trigger_when_clause : ^( SQL92_RESERVED_WHEN expression ) -> template( \"not implemented: trigger_when_clause\";
	public final PLSQLPrinter.trigger_when_clause_return trigger_when_clause() throws RecognitionException {
		PLSQLPrinter.trigger_when_clause_return retval = new PLSQLPrinter.trigger_when_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:312:5: ( ^( SQL92_RESERVED_WHEN expression ) -> template( \"not implemented: trigger_when_clause\")
			// PLSQLPrinter.g:312:10: ^( SQL92_RESERVED_WHEN expression )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_trigger_when_clause2667); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_trigger_when_clause2669);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 313:5: -> template( \"not implemented: trigger_when_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: trigger_when_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_when_clause"


	public static class simple_dml_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "simple_dml_trigger"
	// PLSQLPrinter.g:317:1: simple_dml_trigger : ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause ) -> template( \"not implemented: simple_dml_trigger\";
	public final PLSQLPrinter.simple_dml_trigger_return simple_dml_trigger() throws RecognitionException {
		PLSQLPrinter.simple_dml_trigger_return retval = new PLSQLPrinter.simple_dml_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:318:5: ( ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause ) -> template( \"not implemented: simple_dml_trigger\")
			// PLSQLPrinter.g:318:10: ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause )
			{
			match(input,SIMPLE_DML,FOLLOW_SIMPLE_DML_in_simple_dml_trigger2706); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:318:23: ( BEFORE_VK | AFTER_VK | INSTEAD_VK )
			int alt70=3;
			switch ( input.LA(1) ) {
			case BEFORE_VK:
				{
				alt70=1;
				}
				break;
			case AFTER_VK:
				{
				alt70=2;
				}
				break;
			case INSTEAD_VK:
				{
				alt70=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 70, 0, input);
				throw nvae;
			}
			switch (alt70) {
				case 1 :
					// PLSQLPrinter.g:318:24: BEFORE_VK
					{
					match(input,BEFORE_VK,FOLLOW_BEFORE_VK_in_simple_dml_trigger2709); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:318:34: AFTER_VK
					{
					match(input,AFTER_VK,FOLLOW_AFTER_VK_in_simple_dml_trigger2711); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:318:43: INSTEAD_VK
					{
					match(input,INSTEAD_VK,FOLLOW_INSTEAD_VK_in_simple_dml_trigger2713); 
					}
					break;

			}

			// PLSQLPrinter.g:318:55: ( FOR_EACH_ROW )?
			int alt71=2;
			int LA71_0 = input.LA(1);
			if ( (LA71_0==FOR_EACH_ROW) ) {
				alt71=1;
			}
			switch (alt71) {
				case 1 :
					// PLSQLPrinter.g:318:55: FOR_EACH_ROW
					{
					match(input,FOR_EACH_ROW,FOLLOW_FOR_EACH_ROW_in_simple_dml_trigger2716); 
					}
					break;

			}

			// PLSQLPrinter.g:318:69: ( referencing_clause )?
			int alt72=2;
			int LA72_0 = input.LA(1);
			if ( (LA72_0==REFERENCING_VK) ) {
				alt72=1;
			}
			switch (alt72) {
				case 1 :
					// PLSQLPrinter.g:318:69: referencing_clause
					{
					pushFollow(FOLLOW_referencing_clause_in_simple_dml_trigger2719);
					referencing_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_event_clause_in_simple_dml_trigger2722);
			dml_event_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 319:5: -> template( \"not implemented: simple_dml_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: simple_dml_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "simple_dml_trigger"


	public static class compound_dml_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "compound_dml_trigger"
	// PLSQLPrinter.g:322:1: compound_dml_trigger : ^( COMPOUND_DML ( referencing_clause )? dml_event_clause ) -> template( \"not implemented: compound_dml_trigger\";
	public final PLSQLPrinter.compound_dml_trigger_return compound_dml_trigger() throws RecognitionException {
		PLSQLPrinter.compound_dml_trigger_return retval = new PLSQLPrinter.compound_dml_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:323:5: ( ^( COMPOUND_DML ( referencing_clause )? dml_event_clause ) -> template( \"not implemented: compound_dml_trigger\")
			// PLSQLPrinter.g:323:10: ^( COMPOUND_DML ( referencing_clause )? dml_event_clause )
			{
			match(input,COMPOUND_DML,FOLLOW_COMPOUND_DML_in_compound_dml_trigger2758); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:323:25: ( referencing_clause )?
			int alt73=2;
			int LA73_0 = input.LA(1);
			if ( (LA73_0==REFERENCING_VK) ) {
				alt73=1;
			}
			switch (alt73) {
				case 1 :
					// PLSQLPrinter.g:323:25: referencing_clause
					{
					pushFollow(FOLLOW_referencing_clause_in_compound_dml_trigger2760);
					referencing_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_event_clause_in_compound_dml_trigger2763);
			dml_event_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 324:5: -> template( \"not implemented: compound_dml_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: compound_dml_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compound_dml_trigger"


	public static class non_dml_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "non_dml_trigger"
	// PLSQLPrinter.g:327:1: non_dml_trigger : ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) ) -> template( \"not implemented: non_dml_trigger\";
	public final PLSQLPrinter.non_dml_trigger_return non_dml_trigger() throws RecognitionException {
		PLSQLPrinter.non_dml_trigger_return retval = new PLSQLPrinter.non_dml_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:328:5: ( ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) ) -> template( \"not implemented: non_dml_trigger\")
			// PLSQLPrinter.g:328:10: ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) )
			{
			match(input,NON_DML,FOLLOW_NON_DML_in_non_dml_trigger2799); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:328:20: ( BEFORE_VK | AFTER_VK )
			int alt74=2;
			int LA74_0 = input.LA(1);
			if ( (LA74_0==BEFORE_VK) ) {
				alt74=1;
			}
			else if ( (LA74_0==AFTER_VK) ) {
				alt74=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 74, 0, input);
				throw nvae;
			}

			switch (alt74) {
				case 1 :
					// PLSQLPrinter.g:328:21: BEFORE_VK
					{
					match(input,BEFORE_VK,FOLLOW_BEFORE_VK_in_non_dml_trigger2802); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:328:31: AFTER_VK
					{
					match(input,AFTER_VK,FOLLOW_AFTER_VK_in_non_dml_trigger2804); 
					}
					break;

			}

			// PLSQLPrinter.g:328:41: ( non_dml_event )+
			int cnt75=0;
			loop75:
			while (true) {
				int alt75=2;
				switch ( input.LA(1) ) {
				case DATABASE_VK:
					{
					int LA75_1 = input.LA(2);
					if ( (LA75_1==SQL92_RESERVED_ALTER||LA75_1==SQL92_RESERVED_CREATE||LA75_1==SQL92_RESERVED_DROP||LA75_1==SQL92_RESERVED_GRANT||LA75_1==SQL92_RESERVED_REVOKE||LA75_1==ANALYZE_VK||LA75_1==ASSOCIATE_VK||LA75_1==AUDIT_VK||LA75_1==COMMENT_VK||LA75_1==DATABASE_VK||(LA75_1 >= DB_ROLE_CHANGE_VK && LA75_1 <= DDL_VK)||LA75_1==DISASSOCIATE_VK||LA75_1==FOLLOWS_VK||(LA75_1 >= LOGOFF_VK && LA75_1 <= LOGON_VK)||LA75_1==NOAUDIT_VK||LA75_1==RENAME_VK||(LA75_1 >= SCHEMA_NAME && LA75_1 <= SCHEMA_VK)||LA75_1==SERVERERROR_VK||LA75_1==SHUTDOWN_VK||LA75_1==STARTUP_VK||LA75_1==SUSPEND_VK||LA75_1==TRUNCATE_VK) ) {
						alt75=1;
					}

					}
					break;
				case SCHEMA_VK:
					{
					int LA75_3 = input.LA(2);
					if ( (LA75_3==SQL92_RESERVED_ALTER||LA75_3==SQL92_RESERVED_CREATE||LA75_3==SQL92_RESERVED_DROP||LA75_3==SQL92_RESERVED_GRANT||LA75_3==SQL92_RESERVED_REVOKE||LA75_3==ANALYZE_VK||LA75_3==ASSOCIATE_VK||LA75_3==AUDIT_VK||LA75_3==COMMENT_VK||LA75_3==DATABASE_VK||(LA75_3 >= DB_ROLE_CHANGE_VK && LA75_3 <= DDL_VK)||LA75_3==DISASSOCIATE_VK||LA75_3==FOLLOWS_VK||(LA75_3 >= LOGOFF_VK && LA75_3 <= LOGON_VK)||LA75_3==NOAUDIT_VK||LA75_3==RENAME_VK||(LA75_3 >= SCHEMA_NAME && LA75_3 <= SCHEMA_VK)||LA75_3==SERVERERROR_VK||LA75_3==SHUTDOWN_VK||LA75_3==STARTUP_VK||LA75_3==SUSPEND_VK||LA75_3==TRUNCATE_VK) ) {
						alt75=1;
					}

					}
					break;
				case SQL92_RESERVED_ALTER:
				case SQL92_RESERVED_CREATE:
				case SQL92_RESERVED_DROP:
				case SQL92_RESERVED_GRANT:
				case SQL92_RESERVED_REVOKE:
				case ANALYZE_VK:
				case ASSOCIATE_VK:
				case AUDIT_VK:
				case COMMENT_VK:
				case DB_ROLE_CHANGE_VK:
				case DDL_VK:
				case DISASSOCIATE_VK:
				case FOLLOWS_VK:
				case LOGOFF_VK:
				case LOGON_VK:
				case NOAUDIT_VK:
				case RENAME_VK:
				case SERVERERROR_VK:
				case SHUTDOWN_VK:
				case STARTUP_VK:
				case SUSPEND_VK:
				case TRUNCATE_VK:
					{
					alt75=1;
					}
					break;
				}
				switch (alt75) {
				case 1 :
					// PLSQLPrinter.g:328:41: non_dml_event
					{
					pushFollow(FOLLOW_non_dml_event_in_non_dml_trigger2807);
					non_dml_event();
					state._fsp--;

					}
					break;

				default :
					if ( cnt75 >= 1 ) break loop75;
					EarlyExitException eee = new EarlyExitException(75, input);
					throw eee;
				}
				cnt75++;
			}

			// PLSQLPrinter.g:328:56: ( DATABASE_VK | ( schema_name )? SCHEMA_VK )
			int alt77=2;
			int LA77_0 = input.LA(1);
			if ( (LA77_0==DATABASE_VK) ) {
				alt77=1;
			}
			else if ( ((LA77_0 >= SCHEMA_NAME && LA77_0 <= SCHEMA_VK)) ) {
				alt77=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 77, 0, input);
				throw nvae;
			}

			switch (alt77) {
				case 1 :
					// PLSQLPrinter.g:328:57: DATABASE_VK
					{
					match(input,DATABASE_VK,FOLLOW_DATABASE_VK_in_non_dml_trigger2811); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:328:69: ( schema_name )? SCHEMA_VK
					{
					// PLSQLPrinter.g:328:69: ( schema_name )?
					int alt76=2;
					int LA76_0 = input.LA(1);
					if ( (LA76_0==SCHEMA_NAME) ) {
						alt76=1;
					}
					switch (alt76) {
						case 1 :
							// PLSQLPrinter.g:328:69: schema_name
							{
							pushFollow(FOLLOW_schema_name_in_non_dml_trigger2813);
							schema_name();
							state._fsp--;

							}
							break;

					}

					match(input,SCHEMA_VK,FOLLOW_SCHEMA_VK_in_non_dml_trigger2816); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 329:5: -> template( \"not implemented: non_dml_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: non_dml_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "non_dml_trigger"


	public static class trigger_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_body"
	// PLSQLPrinter.g:332:1: trigger_body : ( ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ ) -> template( \"not implemented: trigger_body\"| ^( CALL_VK routine_name ( function_argument )? ) -> template( \"not implemented: trigger_body\"| ^( BODY_MODE block ) -> template( \"not implemented: trigger_body\");
	public final PLSQLPrinter.trigger_body_return trigger_body() throws RecognitionException {
		PLSQLPrinter.trigger_body_return retval = new PLSQLPrinter.trigger_body_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:333:5: ( ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ ) -> template( \"not implemented: trigger_body\"| ^( CALL_VK routine_name ( function_argument )? ) -> template( \"not implemented: trigger_body\"| ^( BODY_MODE block ) -> template( \"not implemented: trigger_body\")
			int alt81=3;
			switch ( input.LA(1) ) {
			case COMPOUND_VK:
				{
				alt81=1;
				}
				break;
			case CALL_VK:
				{
				alt81=2;
				}
				break;
			case BODY_MODE:
				{
				alt81=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 81, 0, input);
				throw nvae;
			}
			switch (alt81) {
				case 1 :
					// PLSQLPrinter.g:333:10: ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ )
					{
					match(input,COMPOUND_VK,FOLLOW_COMPOUND_VK_in_trigger_body2853); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_trigger_name_in_trigger_body2855);
					trigger_name();
					state._fsp--;

					// PLSQLPrinter.g:333:37: ( declare_spec )*
					loop78:
					while (true) {
						int alt78=2;
						int LA78_0 = input.LA(1);
						if ( (LA78_0==CREATE_FUNCTION||LA78_0==CREATE_PROCEDURE||(LA78_0 >= CREATE_TYPE_BODY && LA78_0 <= CREATE_TYPE_SPEC)||LA78_0==CURSOR_DECLARE||LA78_0==EXCEPTION_DECLARE||LA78_0==PRAGMA_DECLARE||(LA78_0 >= RECORD_TYPE_DECLARE && LA78_0 <= RECORD_VAR_DECLARE)||LA78_0==SUBTYPE_DECLARE||(LA78_0 >= TABLE_TYPE_DECLARE && LA78_0 <= TABLE_VAR_DECLARE)||LA78_0==VARIABLE_DECLARE) ) {
							alt78=1;
						}

						switch (alt78) {
						case 1 :
							// PLSQLPrinter.g:333:37: declare_spec
							{
							pushFollow(FOLLOW_declare_spec_in_trigger_body2857);
							declare_spec();
							state._fsp--;

							}
							break;

						default :
							break loop78;
						}
					}

					// PLSQLPrinter.g:333:51: ( timing_point_section )+
					int cnt79=0;
					loop79:
					while (true) {
						int alt79=2;
						int LA79_0 = input.LA(1);
						if ( ((LA79_0 >= AFTER_EACH_ROW && LA79_0 <= AFTER_STATEMENT)||(LA79_0 >= BEFORE_EACH_ROW && LA79_0 <= BEFORE_STATEMENT)) ) {
							alt79=1;
						}

						switch (alt79) {
						case 1 :
							// PLSQLPrinter.g:333:51: timing_point_section
							{
							pushFollow(FOLLOW_timing_point_section_in_trigger_body2860);
							timing_point_section();
							state._fsp--;

							}
							break;

						default :
							if ( cnt79 >= 1 ) break loop79;
							EarlyExitException eee = new EarlyExitException(79, input);
							throw eee;
						}
						cnt79++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 334:5: -> template( \"not implemented: trigger_body\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: trigger_body");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:335:10: ^( CALL_VK routine_name ( function_argument )? )
					{
					match(input,CALL_VK,FOLLOW_CALL_VK_in_trigger_body2888); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_routine_name_in_trigger_body2890);
					routine_name();
					state._fsp--;

					// PLSQLPrinter.g:335:33: ( function_argument )?
					int alt80=2;
					int LA80_0 = input.LA(1);
					if ( (LA80_0==ARGUMENTS) ) {
						alt80=1;
					}
					switch (alt80) {
						case 1 :
							// PLSQLPrinter.g:335:33: function_argument
							{
							pushFollow(FOLLOW_function_argument_in_trigger_body2892);
							function_argument();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 336:5: -> template( \"not implemented: trigger_body\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: trigger_body");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:337:10: ^( BODY_MODE block )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_trigger_body2921); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_trigger_body2923);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 338:5: -> template( \"not implemented: trigger_body\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: trigger_body");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_body"


	public static class timing_point_section_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "timing_point_section"
	// PLSQLPrinter.g:341:1: timing_point_section : ( ^( BEFORE_STATEMENT block ) -> template( \"not implemented: timing_point_section\"| ^( BEFORE_EACH_ROW block ) -> template( \"not implemented: timing_point_section\"| ^( AFTER_STATEMENT block ) -> template( \"not implemented: timing_point_section\"| ^( AFTER_EACH_ROW block ) -> template( \"not implemented: timing_point_section\");
	public final PLSQLPrinter.timing_point_section_return timing_point_section() throws RecognitionException {
		PLSQLPrinter.timing_point_section_return retval = new PLSQLPrinter.timing_point_section_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:342:5: ( ^( BEFORE_STATEMENT block ) -> template( \"not implemented: timing_point_section\"| ^( BEFORE_EACH_ROW block ) -> template( \"not implemented: timing_point_section\"| ^( AFTER_STATEMENT block ) -> template( \"not implemented: timing_point_section\"| ^( AFTER_EACH_ROW block ) -> template( \"not implemented: timing_point_section\")
			int alt82=4;
			switch ( input.LA(1) ) {
			case BEFORE_STATEMENT:
				{
				alt82=1;
				}
				break;
			case BEFORE_EACH_ROW:
				{
				alt82=2;
				}
				break;
			case AFTER_STATEMENT:
				{
				alt82=3;
				}
				break;
			case AFTER_EACH_ROW:
				{
				alt82=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 82, 0, input);
				throw nvae;
			}
			switch (alt82) {
				case 1 :
					// PLSQLPrinter.g:342:10: ^( BEFORE_STATEMENT block )
					{
					match(input,BEFORE_STATEMENT,FOLLOW_BEFORE_STATEMENT_in_timing_point_section2959); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section2961);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 343:5: -> template( \"not implemented: timing_point_section\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: timing_point_section");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:344:10: ^( BEFORE_EACH_ROW block )
					{
					match(input,BEFORE_EACH_ROW,FOLLOW_BEFORE_EACH_ROW_in_timing_point_section2988); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section2990);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 345:5: -> template( \"not implemented: timing_point_section\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: timing_point_section");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:346:10: ^( AFTER_STATEMENT block )
					{
					match(input,AFTER_STATEMENT,FOLLOW_AFTER_STATEMENT_in_timing_point_section3017); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section3019);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 347:5: -> template( \"not implemented: timing_point_section\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: timing_point_section");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:348:10: ^( AFTER_EACH_ROW block )
					{
					match(input,AFTER_EACH_ROW,FOLLOW_AFTER_EACH_ROW_in_timing_point_section3046); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section3048);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 349:5: -> template( \"not implemented: timing_point_section\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: timing_point_section");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "timing_point_section"


	public static class non_dml_event_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "non_dml_event"
	// PLSQLPrinter.g:352:1: non_dml_event : ( SQL92_RESERVED_ALTER -> template( \"not implemented: non_dml_event\"| ANALYZE_VK -> template( \"not implemented: non_dml_event\"| ASSOCIATE_VK STATISTICS_VK -> template( \"not implemented: non_dml_event\"| AUDIT_VK -> template( \"not implemented: non_dml_event\"| COMMENT_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_CREATE -> template( \"not implemented: non_dml_event\"| DISASSOCIATE_VK STATISTICS_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_DROP -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_GRANT -> template( \"not implemented: non_dml_event\"| NOAUDIT_VK -> template( \"not implemented: non_dml_event\"| RENAME_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_REVOKE -> template( \"not implemented: non_dml_event\"| TRUNCATE_VK -> template( \"not implemented: non_dml_event\"| DDL_VK -> template( \"not implemented: non_dml_event\"| STARTUP_VK -> template( \"not implemented: non_dml_event\"| SHUTDOWN_VK -> template( \"not implemented: non_dml_event\"| DB_ROLE_CHANGE_VK -> template( \"not implemented: non_dml_event\"| LOGON_VK -> template( \"not implemented: non_dml_event\"| LOGOFF_VK -> template( \"not implemented: non_dml_event\"| SERVERERROR_VK -> template( \"not implemented: non_dml_event\"| SUSPEND_VK -> template( \"not implemented: non_dml_event\"| DATABASE_VK -> template( \"not implemented: non_dml_event\"| SCHEMA_VK -> template( \"not implemented: non_dml_event\"| FOLLOWS_VK -> template( \"not implemented: non_dml_event\");
	public final PLSQLPrinter.non_dml_event_return non_dml_event() throws RecognitionException {
		PLSQLPrinter.non_dml_event_return retval = new PLSQLPrinter.non_dml_event_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:353:5: ( SQL92_RESERVED_ALTER -> template( \"not implemented: non_dml_event\"| ANALYZE_VK -> template( \"not implemented: non_dml_event\"| ASSOCIATE_VK STATISTICS_VK -> template( \"not implemented: non_dml_event\"| AUDIT_VK -> template( \"not implemented: non_dml_event\"| COMMENT_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_CREATE -> template( \"not implemented: non_dml_event\"| DISASSOCIATE_VK STATISTICS_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_DROP -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_GRANT -> template( \"not implemented: non_dml_event\"| NOAUDIT_VK -> template( \"not implemented: non_dml_event\"| RENAME_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_REVOKE -> template( \"not implemented: non_dml_event\"| TRUNCATE_VK -> template( \"not implemented: non_dml_event\"| DDL_VK -> template( \"not implemented: non_dml_event\"| STARTUP_VK -> template( \"not implemented: non_dml_event\"| SHUTDOWN_VK -> template( \"not implemented: non_dml_event\"| DB_ROLE_CHANGE_VK -> template( \"not implemented: non_dml_event\"| LOGON_VK -> template( \"not implemented: non_dml_event\"| LOGOFF_VK -> template( \"not implemented: non_dml_event\"| SERVERERROR_VK -> template( \"not implemented: non_dml_event\"| SUSPEND_VK -> template( \"not implemented: non_dml_event\"| DATABASE_VK -> template( \"not implemented: non_dml_event\"| SCHEMA_VK -> template( \"not implemented: non_dml_event\"| FOLLOWS_VK -> template( \"not implemented: non_dml_event\")
			int alt83=24;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ALTER:
				{
				alt83=1;
				}
				break;
			case ANALYZE_VK:
				{
				alt83=2;
				}
				break;
			case ASSOCIATE_VK:
				{
				alt83=3;
				}
				break;
			case AUDIT_VK:
				{
				alt83=4;
				}
				break;
			case COMMENT_VK:
				{
				alt83=5;
				}
				break;
			case SQL92_RESERVED_CREATE:
				{
				alt83=6;
				}
				break;
			case DISASSOCIATE_VK:
				{
				alt83=7;
				}
				break;
			case SQL92_RESERVED_DROP:
				{
				alt83=8;
				}
				break;
			case SQL92_RESERVED_GRANT:
				{
				alt83=9;
				}
				break;
			case NOAUDIT_VK:
				{
				alt83=10;
				}
				break;
			case RENAME_VK:
				{
				alt83=11;
				}
				break;
			case SQL92_RESERVED_REVOKE:
				{
				alt83=12;
				}
				break;
			case TRUNCATE_VK:
				{
				alt83=13;
				}
				break;
			case DDL_VK:
				{
				alt83=14;
				}
				break;
			case STARTUP_VK:
				{
				alt83=15;
				}
				break;
			case SHUTDOWN_VK:
				{
				alt83=16;
				}
				break;
			case DB_ROLE_CHANGE_VK:
				{
				alt83=17;
				}
				break;
			case LOGON_VK:
				{
				alt83=18;
				}
				break;
			case LOGOFF_VK:
				{
				alt83=19;
				}
				break;
			case SERVERERROR_VK:
				{
				alt83=20;
				}
				break;
			case SUSPEND_VK:
				{
				alt83=21;
				}
				break;
			case DATABASE_VK:
				{
				alt83=22;
				}
				break;
			case SCHEMA_VK:
				{
				alt83=23;
				}
				break;
			case FOLLOWS_VK:
				{
				alt83=24;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 83, 0, input);
				throw nvae;
			}
			switch (alt83) {
				case 1 :
					// PLSQLPrinter.g:353:10: SQL92_RESERVED_ALTER
					{
					match(input,SQL92_RESERVED_ALTER,FOLLOW_SQL92_RESERVED_ALTER_in_non_dml_event3083); 
					// TEMPLATE REWRITE
					// 354:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:355:10: ANALYZE_VK
					{
					match(input,ANALYZE_VK,FOLLOW_ANALYZE_VK_in_non_dml_event3108); 
					// TEMPLATE REWRITE
					// 356:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:357:10: ASSOCIATE_VK STATISTICS_VK
					{
					match(input,ASSOCIATE_VK,FOLLOW_ASSOCIATE_VK_in_non_dml_event3133); 
					match(input,STATISTICS_VK,FOLLOW_STATISTICS_VK_in_non_dml_event3135); 
					// TEMPLATE REWRITE
					// 358:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:359:10: AUDIT_VK
					{
					match(input,AUDIT_VK,FOLLOW_AUDIT_VK_in_non_dml_event3160); 
					// TEMPLATE REWRITE
					// 360:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:361:10: COMMENT_VK
					{
					match(input,COMMENT_VK,FOLLOW_COMMENT_VK_in_non_dml_event3185); 
					// TEMPLATE REWRITE
					// 362:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:363:10: SQL92_RESERVED_CREATE
					{
					match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_non_dml_event3210); 
					// TEMPLATE REWRITE
					// 364:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:365:10: DISASSOCIATE_VK STATISTICS_VK
					{
					match(input,DISASSOCIATE_VK,FOLLOW_DISASSOCIATE_VK_in_non_dml_event3235); 
					match(input,STATISTICS_VK,FOLLOW_STATISTICS_VK_in_non_dml_event3237); 
					// TEMPLATE REWRITE
					// 366:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:367:10: SQL92_RESERVED_DROP
					{
					match(input,SQL92_RESERVED_DROP,FOLLOW_SQL92_RESERVED_DROP_in_non_dml_event3262); 
					// TEMPLATE REWRITE
					// 368:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:369:10: SQL92_RESERVED_GRANT
					{
					match(input,SQL92_RESERVED_GRANT,FOLLOW_SQL92_RESERVED_GRANT_in_non_dml_event3287); 
					// TEMPLATE REWRITE
					// 370:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:371:10: NOAUDIT_VK
					{
					match(input,NOAUDIT_VK,FOLLOW_NOAUDIT_VK_in_non_dml_event3312); 
					// TEMPLATE REWRITE
					// 372:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:373:10: RENAME_VK
					{
					match(input,RENAME_VK,FOLLOW_RENAME_VK_in_non_dml_event3337); 
					// TEMPLATE REWRITE
					// 374:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:375:10: SQL92_RESERVED_REVOKE
					{
					match(input,SQL92_RESERVED_REVOKE,FOLLOW_SQL92_RESERVED_REVOKE_in_non_dml_event3362); 
					// TEMPLATE REWRITE
					// 376:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:377:10: TRUNCATE_VK
					{
					match(input,TRUNCATE_VK,FOLLOW_TRUNCATE_VK_in_non_dml_event3387); 
					// TEMPLATE REWRITE
					// 378:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:379:10: DDL_VK
					{
					match(input,DDL_VK,FOLLOW_DDL_VK_in_non_dml_event3412); 
					// TEMPLATE REWRITE
					// 380:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:381:10: STARTUP_VK
					{
					match(input,STARTUP_VK,FOLLOW_STARTUP_VK_in_non_dml_event3437); 
					// TEMPLATE REWRITE
					// 382:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:383:10: SHUTDOWN_VK
					{
					match(input,SHUTDOWN_VK,FOLLOW_SHUTDOWN_VK_in_non_dml_event3462); 
					// TEMPLATE REWRITE
					// 384:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:385:10: DB_ROLE_CHANGE_VK
					{
					match(input,DB_ROLE_CHANGE_VK,FOLLOW_DB_ROLE_CHANGE_VK_in_non_dml_event3487); 
					// TEMPLATE REWRITE
					// 386:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:387:10: LOGON_VK
					{
					match(input,LOGON_VK,FOLLOW_LOGON_VK_in_non_dml_event3512); 
					// TEMPLATE REWRITE
					// 388:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 19 :
					// PLSQLPrinter.g:389:10: LOGOFF_VK
					{
					match(input,LOGOFF_VK,FOLLOW_LOGOFF_VK_in_non_dml_event3537); 
					// TEMPLATE REWRITE
					// 390:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 20 :
					// PLSQLPrinter.g:391:10: SERVERERROR_VK
					{
					match(input,SERVERERROR_VK,FOLLOW_SERVERERROR_VK_in_non_dml_event3562); 
					// TEMPLATE REWRITE
					// 392:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 21 :
					// PLSQLPrinter.g:393:10: SUSPEND_VK
					{
					match(input,SUSPEND_VK,FOLLOW_SUSPEND_VK_in_non_dml_event3587); 
					// TEMPLATE REWRITE
					// 394:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 22 :
					// PLSQLPrinter.g:395:10: DATABASE_VK
					{
					match(input,DATABASE_VK,FOLLOW_DATABASE_VK_in_non_dml_event3612); 
					// TEMPLATE REWRITE
					// 396:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 23 :
					// PLSQLPrinter.g:397:10: SCHEMA_VK
					{
					match(input,SCHEMA_VK,FOLLOW_SCHEMA_VK_in_non_dml_event3637); 
					// TEMPLATE REWRITE
					// 398:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 24 :
					// PLSQLPrinter.g:399:10: FOLLOWS_VK
					{
					match(input,FOLLOWS_VK,FOLLOW_FOLLOWS_VK_in_non_dml_event3662); 
					// TEMPLATE REWRITE
					// 400:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "non_dml_event"


	public static class dml_event_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_event_clause"
	// PLSQLPrinter.g:403:1: dml_event_clause : ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) ) -> template( \"not implemented: dml_event_clause\";
	public final PLSQLPrinter.dml_event_clause_return dml_event_clause() throws RecognitionException {
		PLSQLPrinter.dml_event_clause_return retval = new PLSQLPrinter.dml_event_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:404:5: ( ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) ) -> template( \"not implemented: dml_event_clause\")
			// PLSQLPrinter.g:404:10: ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) )
			{
			match(input,DML_EVENT,FOLLOW_DML_EVENT_in_dml_event_clause3697); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:404:22: ( dml_event_element )+
			int cnt84=0;
			loop84:
			while (true) {
				int alt84=2;
				int LA84_0 = input.LA(1);
				if ( (LA84_0==DML_EVENT_ELEMENT) ) {
					alt84=1;
				}

				switch (alt84) {
				case 1 :
					// PLSQLPrinter.g:404:22: dml_event_element
					{
					pushFollow(FOLLOW_dml_event_element_in_dml_event_clause3699);
					dml_event_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt84 >= 1 ) break loop84;
					EarlyExitException eee = new EarlyExitException(84, input);
					throw eee;
				}
				cnt84++;
			}

			match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_dml_event_clause3703); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_dml_event_clause3705);
			tableview_name();
			state._fsp--;

			// PLSQLPrinter.g:404:76: ( dml_event_nested_clause )?
			int alt85=2;
			int LA85_0 = input.LA(1);
			if ( (LA85_0==NESTED_VK) ) {
				alt85=1;
			}
			switch (alt85) {
				case 1 :
					// PLSQLPrinter.g:404:76: dml_event_nested_clause
					{
					pushFollow(FOLLOW_dml_event_nested_clause_in_dml_event_clause3707);
					dml_event_nested_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 405:5: -> template( \"not implemented: dml_event_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dml_event_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_event_clause"


	public static class dml_event_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_event_element"
	// PLSQLPrinter.g:408:1: dml_event_element : ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) ) -> template( \"not implemented: dml_event_element\";
	public final PLSQLPrinter.dml_event_element_return dml_event_element() throws RecognitionException {
		PLSQLPrinter.dml_event_element_return retval = new PLSQLPrinter.dml_event_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:409:5: ( ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) ) -> template( \"not implemented: dml_event_element\")
			// PLSQLPrinter.g:409:10: ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) )
			{
			match(input,DML_EVENT_ELEMENT,FOLLOW_DML_EVENT_ELEMENT_in_dml_event_element3747); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:409:30: ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE )
			int alt86=3;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_DELETE:
				{
				alt86=1;
				}
				break;
			case SQL92_RESERVED_INSERT:
				{
				alt86=2;
				}
				break;
			case SQL92_RESERVED_UPDATE:
				{
				alt86=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 86, 0, input);
				throw nvae;
			}
			switch (alt86) {
				case 1 :
					// PLSQLPrinter.g:409:31: SQL92_RESERVED_DELETE
					{
					match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_dml_event_element3750); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:409:53: SQL92_RESERVED_INSERT
					{
					match(input,SQL92_RESERVED_INSERT,FOLLOW_SQL92_RESERVED_INSERT_in_dml_event_element3752); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:409:75: SQL92_RESERVED_UPDATE
					{
					match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_dml_event_element3754); 
					}
					break;

			}

			match(input,COLUMNS,FOLLOW_COLUMNS_in_dml_event_element3758); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:409:108: ( column_name )*
				loop87:
				while (true) {
					int alt87=2;
					int LA87_0 = input.LA(1);
					if ( (LA87_0==COLUMN_NAME) ) {
						alt87=1;
					}

					switch (alt87) {
					case 1 :
						// PLSQLPrinter.g:409:108: column_name
						{
						pushFollow(FOLLOW_column_name_in_dml_event_element3760);
						column_name();
						state._fsp--;

						}
						break;

					default :
						break loop87;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 410:5: -> template( \"not implemented: dml_event_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dml_event_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_event_element"


	public static class dml_event_nested_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_event_nested_clause"
	// PLSQLPrinter.g:413:1: dml_event_nested_clause : ^( NESTED_VK tableview_name ) -> template( \"not implemented: dml_event_nested_clause\";
	public final PLSQLPrinter.dml_event_nested_clause_return dml_event_nested_clause() throws RecognitionException {
		PLSQLPrinter.dml_event_nested_clause_return retval = new PLSQLPrinter.dml_event_nested_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:414:5: ( ^( NESTED_VK tableview_name ) -> template( \"not implemented: dml_event_nested_clause\")
			// PLSQLPrinter.g:414:10: ^( NESTED_VK tableview_name )
			{
			match(input,NESTED_VK,FOLLOW_NESTED_VK_in_dml_event_nested_clause3798); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_dml_event_nested_clause3800);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 415:5: -> template( \"not implemented: dml_event_nested_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dml_event_nested_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_event_nested_clause"


	public static class referencing_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "referencing_clause"
	// PLSQLPrinter.g:418:1: referencing_clause : ^( REFERENCING_VK ( referencing_element )+ ) -> template( \"not implemented: referencing_clause\";
	public final PLSQLPrinter.referencing_clause_return referencing_clause() throws RecognitionException {
		PLSQLPrinter.referencing_clause_return retval = new PLSQLPrinter.referencing_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:419:5: ( ^( REFERENCING_VK ( referencing_element )+ ) -> template( \"not implemented: referencing_clause\")
			// PLSQLPrinter.g:419:10: ^( REFERENCING_VK ( referencing_element )+ )
			{
			match(input,REFERENCING_VK,FOLLOW_REFERENCING_VK_in_referencing_clause3836); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:419:27: ( referencing_element )+
			int cnt88=0;
			loop88:
			while (true) {
				int alt88=2;
				int LA88_0 = input.LA(1);
				if ( (LA88_0==NEW_VK||LA88_0==OLD_VK||LA88_0==PARENT_VK) ) {
					alt88=1;
				}

				switch (alt88) {
				case 1 :
					// PLSQLPrinter.g:419:27: referencing_element
					{
					pushFollow(FOLLOW_referencing_element_in_referencing_clause3838);
					referencing_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt88 >= 1 ) break loop88;
					EarlyExitException eee = new EarlyExitException(88, input);
					throw eee;
				}
				cnt88++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 420:5: -> template( \"not implemented: referencing_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: referencing_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "referencing_clause"


	public static class referencing_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "referencing_element"
	// PLSQLPrinter.g:423:1: referencing_element : ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias ) -> template( \"not implemented: referencing_element\";
	public final PLSQLPrinter.referencing_element_return referencing_element() throws RecognitionException {
		PLSQLPrinter.referencing_element_return retval = new PLSQLPrinter.referencing_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:424:5: ( ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias ) -> template( \"not implemented: referencing_element\")
			// PLSQLPrinter.g:424:10: ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias )
			{
			// PLSQLPrinter.g:424:12: ( NEW_VK | OLD_VK | PARENT_VK )
			int alt89=3;
			switch ( input.LA(1) ) {
			case NEW_VK:
				{
				alt89=1;
				}
				break;
			case OLD_VK:
				{
				alt89=2;
				}
				break;
			case PARENT_VK:
				{
				alt89=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 89, 0, input);
				throw nvae;
			}
			switch (alt89) {
				case 1 :
					// PLSQLPrinter.g:424:13: NEW_VK
					{
					match(input,NEW_VK,FOLLOW_NEW_VK_in_referencing_element3876); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:424:20: OLD_VK
					{
					match(input,OLD_VK,FOLLOW_OLD_VK_in_referencing_element3878); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:424:27: PARENT_VK
					{
					match(input,PARENT_VK,FOLLOW_PARENT_VK_in_referencing_element3880); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_alias_in_referencing_element3883);
			alias();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 425:5: -> template( \"not implemented: referencing_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: referencing_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "referencing_element"


	public static class drop_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_type"
	// PLSQLPrinter.g:433:1: drop_type : ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? ) -> template( \"not implemented: drop_type\";
	public final PLSQLPrinter.drop_type_return drop_type() throws RecognitionException {
		PLSQLPrinter.drop_type_return retval = new PLSQLPrinter.drop_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:434:5: ( ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? ) -> template( \"not implemented: drop_type\")
			// PLSQLPrinter.g:434:10: ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? )
			{
			match(input,DROP_TYPE,FOLLOW_DROP_TYPE_in_drop_type3924); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_drop_type3926);
			type_name();
			state._fsp--;

			// PLSQLPrinter.g:434:32: ( BODY_VK )?
			int alt90=2;
			int LA90_0 = input.LA(1);
			if ( (LA90_0==BODY_VK) ) {
				alt90=1;
			}
			switch (alt90) {
				case 1 :
					// PLSQLPrinter.g:434:32: BODY_VK
					{
					match(input,BODY_VK,FOLLOW_BODY_VK_in_drop_type3928); 
					}
					break;

			}

			// PLSQLPrinter.g:434:41: ( FORCE_VK )?
			int alt91=2;
			int LA91_0 = input.LA(1);
			if ( (LA91_0==FORCE_VK) ) {
				alt91=1;
			}
			switch (alt91) {
				case 1 :
					// PLSQLPrinter.g:434:41: FORCE_VK
					{
					match(input,FORCE_VK,FOLLOW_FORCE_VK_in_drop_type3931); 
					}
					break;

			}

			// PLSQLPrinter.g:434:51: ( VALIDATE_VK )?
			int alt92=2;
			int LA92_0 = input.LA(1);
			if ( (LA92_0==VALIDATE_VK) ) {
				alt92=1;
			}
			switch (alt92) {
				case 1 :
					// PLSQLPrinter.g:434:51: VALIDATE_VK
					{
					match(input,VALIDATE_VK,FOLLOW_VALIDATE_VK_in_drop_type3934); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 435:5: -> template( \"not implemented: drop_type\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_type");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_type"


	public static class alter_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_type"
	// PLSQLPrinter.g:438:1: alter_type : ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? ) -> template( \"not implemented: alter_type\";
	public final PLSQLPrinter.alter_type_return alter_type() throws RecognitionException {
		PLSQLPrinter.alter_type_return retval = new PLSQLPrinter.alter_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:439:5: ( ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? ) -> template( \"not implemented: alter_type\")
			// PLSQLPrinter.g:439:10: ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? )
			{
			match(input,ALTER_TYPE,FOLLOW_ALTER_TYPE_in_alter_type3971); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_alter_type3973);
			type_name();
			state._fsp--;

			// PLSQLPrinter.g:440:13: ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
			int alt102=6;
			switch ( input.LA(1) ) {
			case REPLACE_VK:
				{
				alt102=1;
				}
				break;
			case ALTER_ATTRIBUTE:
				{
				alt102=2;
				}
				break;
			case ALTER_METHOD:
				{
				alt102=3;
				}
				break;
			case ALTER_COLLECTION:
				{
				alt102=4;
				}
				break;
			case MODIFIER:
				{
				alt102=5;
				}
				break;
			case COMPILE_VK:
				{
				alt102=6;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 102, 0, input);
				throw nvae;
			}
			switch (alt102) {
				case 1 :
					// PLSQLPrinter.g:440:18: ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? )
					{
					match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_alter_type3994); 
					match(input, Token.DOWN, null); 
					match(input,OBJECT_MEMBERS,FOLLOW_OBJECT_MEMBERS_in_alter_type3997); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:440:48: ( element_spec )+
					int cnt93=0;
					loop93:
					while (true) {
						int alt93=2;
						int LA93_0 = input.LA(1);
						if ( (LA93_0==ELEMENT_SPEC) ) {
							alt93=1;
						}

						switch (alt93) {
						case 1 :
							// PLSQLPrinter.g:440:48: element_spec
							{
							pushFollow(FOLLOW_element_spec_in_alter_type3999);
							element_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt93 >= 1 ) break loop93;
							EarlyExitException eee = new EarlyExitException(93, input);
							throw eee;
						}
						cnt93++;
					}

					match(input, Token.UP, null); 

					// PLSQLPrinter.g:440:63: ( invoker_rights_clause )?
					int alt94=2;
					int LA94_0 = input.LA(1);
					if ( (LA94_0==AUTHID_VK) ) {
						alt94=1;
					}
					switch (alt94) {
						case 1 :
							// PLSQLPrinter.g:440:63: invoker_rights_clause
							{
							pushFollow(FOLLOW_invoker_rights_clause_in_alter_type4003);
							invoker_rights_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:441:18: ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) )
					{
					match(input,ALTER_ATTRIBUTE,FOLLOW_ALTER_ATTRIBUTE_in_alter_type4025); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:441:36: ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP )
					int alt95=3;
					switch ( input.LA(1) ) {
					case ADD_VK:
						{
						alt95=1;
						}
						break;
					case MODIFY_VK:
						{
						alt95=2;
						}
						break;
					case SQL92_RESERVED_DROP:
						{
						alt95=3;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 95, 0, input);
						throw nvae;
					}
					switch (alt95) {
						case 1 :
							// PLSQLPrinter.g:441:37: ADD_VK
							{
							match(input,ADD_VK,FOLLOW_ADD_VK_in_alter_type4028); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:441:44: MODIFY_VK
							{
							match(input,MODIFY_VK,FOLLOW_MODIFY_VK_in_alter_type4030); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:441:54: SQL92_RESERVED_DROP
							{
							match(input,SQL92_RESERVED_DROP,FOLLOW_SQL92_RESERVED_DROP_in_alter_type4032); 
							}
							break;

					}

					match(input,ATTRIBUTES,FOLLOW_ATTRIBUTES_in_alter_type4036); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:441:88: ( attribute_definition )+
					int cnt96=0;
					loop96:
					while (true) {
						int alt96=2;
						int LA96_0 = input.LA(1);
						if ( (LA96_0==ATTRIBUTE) ) {
							alt96=1;
						}

						switch (alt96) {
						case 1 :
							// PLSQLPrinter.g:441:88: attribute_definition
							{
							pushFollow(FOLLOW_attribute_definition_in_alter_type4038);
							attribute_definition();
							state._fsp--;

							}
							break;

						default :
							if ( cnt96 >= 1 ) break loop96;
							EarlyExitException eee = new EarlyExitException(96, input);
							throw eee;
						}
						cnt96++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:442:18: ^( ALTER_METHOD ( alter_method_element )+ )
					{
					match(input,ALTER_METHOD,FOLLOW_ALTER_METHOD_in_alter_type4061); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:442:33: ( alter_method_element )+
					int cnt97=0;
					loop97:
					while (true) {
						int alt97=2;
						int LA97_0 = input.LA(1);
						if ( (LA97_0==ALTER_METHOD_ELEMENT) ) {
							alt97=1;
						}

						switch (alt97) {
						case 1 :
							// PLSQLPrinter.g:442:33: alter_method_element
							{
							pushFollow(FOLLOW_alter_method_element_in_alter_type4063);
							alter_method_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt97 >= 1 ) break loop97;
							EarlyExitException eee = new EarlyExitException(97, input);
							throw eee;
						}
						cnt97++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// PLSQLPrinter.g:443:18: alter_collection_clauses
					{
					pushFollow(FOLLOW_alter_collection_clauses_in_alter_type4084);
					alter_collection_clauses();
					state._fsp--;

					}
					break;
				case 5 :
					// PLSQLPrinter.g:444:18: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_alter_type4103);
					modifier_clause();
					state._fsp--;

					}
					break;
				case 6 :
					// PLSQLPrinter.g:445:18: ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
					{
					match(input,COMPILE_VK,FOLLOW_COMPILE_VK_in_alter_type4123); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:445:31: ( SPECIFICATION_VK | BODY_VK )?
						int alt98=3;
						int LA98_0 = input.LA(1);
						if ( (LA98_0==SPECIFICATION_VK) ) {
							alt98=1;
						}
						else if ( (LA98_0==BODY_VK) ) {
							alt98=2;
						}
						switch (alt98) {
							case 1 :
								// PLSQLPrinter.g:445:32: SPECIFICATION_VK
								{
								match(input,SPECIFICATION_VK,FOLLOW_SPECIFICATION_VK_in_alter_type4126); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:445:49: BODY_VK
								{
								match(input,BODY_VK,FOLLOW_BODY_VK_in_alter_type4128); 
								}
								break;

						}

						// PLSQLPrinter.g:445:59: ( DEBUG_VK )?
						int alt99=2;
						int LA99_0 = input.LA(1);
						if ( (LA99_0==DEBUG_VK) ) {
							alt99=1;
						}
						switch (alt99) {
							case 1 :
								// PLSQLPrinter.g:445:59: DEBUG_VK
								{
								match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_type4132); 
								}
								break;

						}

						// PLSQLPrinter.g:445:69: ( REUSE_VK )?
						int alt100=2;
						int LA100_0 = input.LA(1);
						if ( (LA100_0==REUSE_VK) ) {
							alt100=1;
						}
						switch (alt100) {
							case 1 :
								// PLSQLPrinter.g:445:69: REUSE_VK
								{
								match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_type4135); 
								}
								break;

						}

						// PLSQLPrinter.g:445:79: ( compiler_parameters_clause )*
						loop101:
						while (true) {
							int alt101=2;
							int LA101_0 = input.LA(1);
							if ( (LA101_0==COMPILER_PARAMETER) ) {
								alt101=1;
							}

							switch (alt101) {
							case 1 :
								// PLSQLPrinter.g:445:79: compiler_parameters_clause
								{
								pushFollow(FOLLOW_compiler_parameters_clause_in_alter_type4138);
								compiler_parameters_clause();
								state._fsp--;

								}
								break;

							default :
								break loop101;
							}
						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}

			// PLSQLPrinter.g:447:13: ( dependent_handling_clause )?
			int alt103=2;
			int LA103_0 = input.LA(1);
			if ( (LA103_0==DEPENDENT_HANDLING) ) {
				alt103=1;
			}
			switch (alt103) {
				case 1 :
					// PLSQLPrinter.g:447:13: dependent_handling_clause
					{
					pushFollow(FOLLOW_dependent_handling_clause_in_alter_type4169);
					dependent_handling_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 449:5: -> template( \"not implemented: alter_type\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_type");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_type"


	public static class alter_method_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_method_element"
	// PLSQLPrinter.g:454:1: alter_method_element : ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? ) -> template( \"not implemented: alter_method_element\";
	public final PLSQLPrinter.alter_method_element_return alter_method_element() throws RecognitionException {
		PLSQLPrinter.alter_method_element_return retval = new PLSQLPrinter.alter_method_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:455:5: ( ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? ) -> template( \"not implemented: alter_method_element\")
			// PLSQLPrinter.g:455:10: ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? )
			{
			match(input,ALTER_METHOD_ELEMENT,FOLLOW_ALTER_METHOD_ELEMENT_in_alter_method_element4217); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:455:33: ( ADD_VK | SQL92_RESERVED_DROP )
			int alt104=2;
			int LA104_0 = input.LA(1);
			if ( (LA104_0==ADD_VK) ) {
				alt104=1;
			}
			else if ( (LA104_0==SQL92_RESERVED_DROP) ) {
				alt104=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 104, 0, input);
				throw nvae;
			}

			switch (alt104) {
				case 1 :
					// PLSQLPrinter.g:455:34: ADD_VK
					{
					match(input,ADD_VK,FOLLOW_ADD_VK_in_alter_method_element4220); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:455:41: SQL92_RESERVED_DROP
					{
					match(input,SQL92_RESERVED_DROP,FOLLOW_SQL92_RESERVED_DROP_in_alter_method_element4222); 
					}
					break;

			}

			// PLSQLPrinter.g:455:62: ( map_order_function_spec )?
			int alt105=2;
			int LA105_0 = input.LA(1);
			if ( (LA105_0==SQL92_RESERVED_ORDER||LA105_0==MAP_VK) ) {
				alt105=1;
			}
			switch (alt105) {
				case 1 :
					// PLSQLPrinter.g:455:62: map_order_function_spec
					{
					pushFollow(FOLLOW_map_order_function_spec_in_alter_method_element4225);
					map_order_function_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:455:87: ( subprogram_spec )?
			int alt106=2;
			int LA106_0 = input.LA(1);
			if ( (LA106_0==MEMBER_VK||LA106_0==STATIC_VK) ) {
				alt106=1;
			}
			switch (alt106) {
				case 1 :
					// PLSQLPrinter.g:455:87: subprogram_spec
					{
					pushFollow(FOLLOW_subprogram_spec_in_alter_method_element4228);
					subprogram_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 456:5: -> template( \"not implemented: alter_method_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_method_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_method_element"


	public static class attribute_definition_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "attribute_definition"
	// PLSQLPrinter.g:459:1: attribute_definition : ^( ATTRIBUTE attribute_name ( type_spec )? ) -> template( \"not implemented: attribute_definition\";
	public final PLSQLPrinter.attribute_definition_return attribute_definition() throws RecognitionException {
		PLSQLPrinter.attribute_definition_return retval = new PLSQLPrinter.attribute_definition_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:460:5: ( ^( ATTRIBUTE attribute_name ( type_spec )? ) -> template( \"not implemented: attribute_definition\")
			// PLSQLPrinter.g:460:10: ^( ATTRIBUTE attribute_name ( type_spec )? )
			{
			match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_attribute_definition4265); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_attribute_name_in_attribute_definition4267);
			attribute_name();
			state._fsp--;

			// PLSQLPrinter.g:460:37: ( type_spec )?
			int alt107=2;
			int LA107_0 = input.LA(1);
			if ( (LA107_0==CUSTOM_TYPE||LA107_0==INTERVAL_DATATYPE||LA107_0==NATIVE_DATATYPE) ) {
				alt107=1;
			}
			switch (alt107) {
				case 1 :
					// PLSQLPrinter.g:460:37: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_attribute_definition4269);
					type_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 461:5: -> template( \"not implemented: attribute_definition\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: attribute_definition");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "attribute_definition"


	public static class alter_collection_clauses_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_collection_clauses"
	// PLSQLPrinter.g:464:1: alter_collection_clauses : ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) ) -> template( \"not implemented: alter_collection_clauses\";
	public final PLSQLPrinter.alter_collection_clauses_return alter_collection_clauses() throws RecognitionException {
		PLSQLPrinter.alter_collection_clauses_return retval = new PLSQLPrinter.alter_collection_clauses_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:465:5: ( ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) ) -> template( \"not implemented: alter_collection_clauses\")
			// PLSQLPrinter.g:465:10: ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) )
			{
			match(input,ALTER_COLLECTION,FOLLOW_ALTER_COLLECTION_in_alter_collection_clauses4306); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:466:13: ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) )
			int alt108=2;
			int LA108_0 = input.LA(1);
			if ( (LA108_0==TYPE_VK) ) {
				alt108=1;
			}
			else if ( (LA108_0==LIMIT_VK) ) {
				alt108=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 108, 0, input);
				throw nvae;
			}

			switch (alt108) {
				case 1 :
					// PLSQLPrinter.g:466:18: ^( TYPE_VK type_spec )
					{
					match(input,TYPE_VK,FOLLOW_TYPE_VK_in_alter_collection_clauses4327); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_type_spec_in_alter_collection_clauses4329);
					type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:467:18: ^( LIMIT_VK expression )
					{
					match(input,LIMIT_VK,FOLLOW_LIMIT_VK_in_alter_collection_clauses4350); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_alter_collection_clauses4352);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 470:5: -> template( \"not implemented: alter_collection_clauses\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_collection_clauses");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_collection_clauses"


	public static class dependent_handling_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dependent_handling_clause"
	// PLSQLPrinter.g:473:1: dependent_handling_clause : ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) ) -> template( \"not implemented: dependent_handling_clause\";
	public final PLSQLPrinter.dependent_handling_clause_return dependent_handling_clause() throws RecognitionException {
		PLSQLPrinter.dependent_handling_clause_return retval = new PLSQLPrinter.dependent_handling_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:474:5: ( ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) ) -> template( \"not implemented: dependent_handling_clause\")
			// PLSQLPrinter.g:474:10: ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) )
			{
			match(input,DEPENDENT_HANDLING,FOLLOW_DEPENDENT_HANDLING_in_dependent_handling_clause4413); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:475:13: ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) )
			int alt111=2;
			int LA111_0 = input.LA(1);
			if ( (LA111_0==INVALIDATE_VK) ) {
				alt111=1;
			}
			else if ( (LA111_0==CASCADE_VK) ) {
				alt111=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 111, 0, input);
				throw nvae;
			}

			switch (alt111) {
				case 1 :
					// PLSQLPrinter.g:475:18: INVALIDATE_VK
					{
					match(input,INVALIDATE_VK,FOLLOW_INVALIDATE_VK_in_dependent_handling_clause4433); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:476:18: ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? )
					{
					match(input,CASCADE_VK,FOLLOW_CASCADE_VK_in_dependent_handling_clause4453); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:477:21: ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )?
						int alt110=3;
						int LA110_0 = input.LA(1);
						if ( (LA110_0==CONVERT_VK) ) {
							alt110=1;
						}
						else if ( (LA110_0==SQL92_RESERVED_NOT||LA110_0==INCLUDING_VK) ) {
							alt110=2;
						}
						switch (alt110) {
							case 1 :
								// PLSQLPrinter.g:477:26: CONVERT_VK
								{
								match(input,CONVERT_VK,FOLLOW_CONVERT_VK_in_dependent_handling_clause4481); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:478:26: ( SQL92_RESERVED_NOT )? INCLUDING_VK
								{
								// PLSQLPrinter.g:478:26: ( SQL92_RESERVED_NOT )?
								int alt109=2;
								int LA109_0 = input.LA(1);
								if ( (LA109_0==SQL92_RESERVED_NOT) ) {
									alt109=1;
								}
								switch (alt109) {
									case 1 :
										// PLSQLPrinter.g:478:26: SQL92_RESERVED_NOT
										{
										match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_dependent_handling_clause4508); 
										}
										break;

								}

								match(input,INCLUDING_VK,FOLLOW_INCLUDING_VK_in_dependent_handling_clause4511); 
								}
								break;

						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 483:5: -> template( \"not implemented: dependent_handling_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dependent_handling_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dependent_handling_clause"


	public static class dependent_exceptions_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dependent_exceptions_part"
	// PLSQLPrinter.g:486:1: dependent_exceptions_part : ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name ) -> template( \"not implemented: dependent_exceptions_part\";
	public final PLSQLPrinter.dependent_exceptions_part_return dependent_exceptions_part() throws RecognitionException {
		PLSQLPrinter.dependent_exceptions_part_return retval = new PLSQLPrinter.dependent_exceptions_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:487:5: ( ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name ) -> template( \"not implemented: dependent_exceptions_part\")
			// PLSQLPrinter.g:487:10: ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name )
			{
			match(input,EXCEPTIONS_VK,FOLLOW_EXCEPTIONS_VK_in_dependent_exceptions_part4611); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:487:26: ( FORCE_VK )?
			int alt112=2;
			int LA112_0 = input.LA(1);
			if ( (LA112_0==FORCE_VK) ) {
				alt112=1;
			}
			switch (alt112) {
				case 1 :
					// PLSQLPrinter.g:487:26: FORCE_VK
					{
					match(input,FORCE_VK,FOLLOW_FORCE_VK_in_dependent_exceptions_part4613); 
					}
					break;

			}

			pushFollow(FOLLOW_tableview_name_in_dependent_exceptions_part4616);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 488:5: -> template( \"not implemented: dependent_exceptions_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dependent_exceptions_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dependent_exceptions_part"


	public static class create_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_type"
	// PLSQLPrinter.g:493:1: create_type : ( ^( CREATE_TYPE_BODY ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) ) -> template( \"not implemented: create_type[CREATE_TYPE_BODY]\"| ^( CREATE_TYPE_SPEC ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? ) -> template( \"not implemented: create_type[CREATE_TYPE_SPEC]\");
	public final PLSQLPrinter.create_type_return create_type() throws RecognitionException {
		PLSQLPrinter.create_type_return retval = new PLSQLPrinter.create_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:494:5: ( ^( CREATE_TYPE_BODY ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) ) -> template( \"not implemented: create_type[CREATE_TYPE_BODY]\"| ^( CREATE_TYPE_SPEC ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? ) -> template( \"not implemented: create_type[CREATE_TYPE_SPEC]\")
			int alt120=2;
			int LA120_0 = input.LA(1);
			if ( (LA120_0==CREATE_TYPE_BODY) ) {
				alt120=1;
			}
			else if ( (LA120_0==CREATE_TYPE_SPEC) ) {
				alt120=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 120, 0, input);
				throw nvae;
			}

			switch (alt120) {
				case 1 :
					// PLSQLPrinter.g:494:10: ^( CREATE_TYPE_BODY ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) )
					{
					match(input,CREATE_TYPE_BODY,FOLLOW_CREATE_TYPE_BODY_in_create_type4654); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:494:29: ( SQL92_RESERVED_CREATE )?
					int alt113=2;
					int LA113_0 = input.LA(1);
					if ( (LA113_0==SQL92_RESERVED_CREATE) ) {
						alt113=1;
					}
					switch (alt113) {
						case 1 :
							// PLSQLPrinter.g:494:29: SQL92_RESERVED_CREATE
							{
							match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_create_type4656); 
							}
							break;

					}

					// PLSQLPrinter.g:494:52: ( REPLACE_VK )?
					int alt114=2;
					int LA114_0 = input.LA(1);
					if ( (LA114_0==REPLACE_VK) ) {
						alt114=1;
					}
					switch (alt114) {
						case 1 :
							// PLSQLPrinter.g:494:52: REPLACE_VK
							{
							match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_type4659); 
							}
							break;

					}

					pushFollow(FOLLOW_type_name_in_create_type4662);
					type_name();
					state._fsp--;

					match(input,TYPE_BODY_ELEMENTS,FOLLOW_TYPE_BODY_ELEMENTS_in_create_type4665); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:494:95: ( type_body_elements )+
					int cnt115=0;
					loop115:
					while (true) {
						int alt115=2;
						int LA115_0 = input.LA(1);
						if ( (LA115_0==SQL92_RESERVED_ORDER||LA115_0==MAP_VK||LA115_0==MEMBER_VK||LA115_0==STATIC_VK) ) {
							alt115=1;
						}

						switch (alt115) {
						case 1 :
							// PLSQLPrinter.g:494:95: type_body_elements
							{
							pushFollow(FOLLOW_type_body_elements_in_create_type4667);
							type_body_elements();
							state._fsp--;

							}
							break;

						default :
							if ( cnt115 >= 1 ) break loop115;
							EarlyExitException eee = new EarlyExitException(115, input);
							throw eee;
						}
						cnt115++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 495:5: -> template( \"not implemented: create_type[CREATE_TYPE_BODY]\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: create_type[CREATE_TYPE_BODY]");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:496:10: ^( CREATE_TYPE_SPEC ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? )
					{
					match(input,CREATE_TYPE_SPEC,FOLLOW_CREATE_TYPE_SPEC_in_create_type4696); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:496:29: ( SQL92_RESERVED_CREATE )?
					int alt116=2;
					int LA116_0 = input.LA(1);
					if ( (LA116_0==SQL92_RESERVED_CREATE) ) {
						alt116=1;
					}
					switch (alt116) {
						case 1 :
							// PLSQLPrinter.g:496:29: SQL92_RESERVED_CREATE
							{
							match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_create_type4698); 
							}
							break;

					}

					// PLSQLPrinter.g:496:52: ( REPLACE_VK )?
					int alt117=2;
					int LA117_0 = input.LA(1);
					if ( (LA117_0==REPLACE_VK) ) {
						alt117=1;
					}
					switch (alt117) {
						case 1 :
							// PLSQLPrinter.g:496:52: REPLACE_VK
							{
							match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_type4701); 
							}
							break;

					}

					pushFollow(FOLLOW_type_name_in_create_type4704);
					type_name();
					state._fsp--;

					// PLSQLPrinter.g:496:74: ( CHAR_STRING )?
					int alt118=2;
					int LA118_0 = input.LA(1);
					if ( (LA118_0==CHAR_STRING) ) {
						alt118=1;
					}
					switch (alt118) {
						case 1 :
							// PLSQLPrinter.g:496:74: CHAR_STRING
							{
							match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_create_type4706); 
							}
							break;

					}

					// PLSQLPrinter.g:496:87: ( object_type_def )?
					int alt119=2;
					int LA119_0 = input.LA(1);
					if ( (LA119_0==OBJECT_TYPE_DEF) ) {
						alt119=1;
					}
					switch (alt119) {
						case 1 :
							// PLSQLPrinter.g:496:87: object_type_def
							{
							pushFollow(FOLLOW_object_type_def_in_create_type4709);
							object_type_def();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 497:5: -> template( \"not implemented: create_type[CREATE_TYPE_SPEC]\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: create_type[CREATE_TYPE_SPEC]");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_type"


	public static class object_type_def_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "object_type_def"
	// PLSQLPrinter.g:500:1: object_type_def : ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) ) -> template( \"not implemented: object_type_def\";
	public final PLSQLPrinter.object_type_def_return object_type_def() throws RecognitionException {
		PLSQLPrinter.object_type_def_return retval = new PLSQLPrinter.object_type_def_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:501:5: ( ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) ) -> template( \"not implemented: object_type_def\")
			// PLSQLPrinter.g:501:10: ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) )
			{
			match(input,OBJECT_TYPE_DEF,FOLLOW_OBJECT_TYPE_DEF_in_object_type_def4746); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:501:28: ( object_as_part | object_under_part )
			int alt121=2;
			int LA121_0 = input.LA(1);
			if ( (LA121_0==OBJECT_AS) ) {
				alt121=1;
			}
			else if ( (LA121_0==UNDER_VK) ) {
				alt121=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 121, 0, input);
				throw nvae;
			}

			switch (alt121) {
				case 1 :
					// PLSQLPrinter.g:501:29: object_as_part
					{
					pushFollow(FOLLOW_object_as_part_in_object_type_def4749);
					object_as_part();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:501:44: object_under_part
					{
					pushFollow(FOLLOW_object_under_part_in_object_type_def4751);
					object_under_part();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:501:63: ( invoker_rights_clause )?
			int alt122=2;
			int LA122_0 = input.LA(1);
			if ( (LA122_0==AUTHID_VK) ) {
				alt122=1;
			}
			switch (alt122) {
				case 1 :
					// PLSQLPrinter.g:501:63: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_object_type_def4754);
					invoker_rights_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:502:14: ( sqlj_object_type )?
			int alt123=2;
			int LA123_0 = input.LA(1);
			if ( (LA123_0==JAVA_VK) ) {
				alt123=1;
			}
			switch (alt123) {
				case 1 :
					// PLSQLPrinter.g:502:14: sqlj_object_type
					{
					pushFollow(FOLLOW_sqlj_object_type_in_object_type_def4770);
					sqlj_object_type();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:502:32: ( modifier_clause )*
			loop124:
			while (true) {
				int alt124=2;
				int LA124_0 = input.LA(1);
				if ( (LA124_0==MODIFIER) ) {
					alt124=1;
				}

				switch (alt124) {
				case 1 :
					// PLSQLPrinter.g:502:32: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_object_type_def4773);
					modifier_clause();
					state._fsp--;

					}
					break;

				default :
					break loop124;
				}
			}

			match(input,OBJECT_MEMBERS,FOLLOW_OBJECT_MEMBERS_in_object_type_def4777); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:502:66: ( element_spec )*
				loop125:
				while (true) {
					int alt125=2;
					int LA125_0 = input.LA(1);
					if ( (LA125_0==ELEMENT_SPEC) ) {
						alt125=1;
					}

					switch (alt125) {
					case 1 :
						// PLSQLPrinter.g:502:66: element_spec
						{
						pushFollow(FOLLOW_element_spec_in_object_type_def4779);
						element_spec();
						state._fsp--;

						}
						break;

					default :
						break loop125;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 503:5: -> template( \"not implemented: object_type_def\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: object_type_def");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_type_def"


	public static class object_as_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "object_as_part"
	// PLSQLPrinter.g:506:1: object_as_part : ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) ) -> template( \"not implemented: object_as_part\";
	public final PLSQLPrinter.object_as_part_return object_as_part() throws RecognitionException {
		PLSQLPrinter.object_as_part_return retval = new PLSQLPrinter.object_as_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:507:5: ( ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) ) -> template( \"not implemented: object_as_part\")
			// PLSQLPrinter.g:507:10: ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) )
			{
			match(input,OBJECT_AS,FOLLOW_OBJECT_AS_in_object_as_part4819); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:507:22: ( OBJECT_VK | varray_type_def | nested_table_type_def )
			int alt126=3;
			switch ( input.LA(1) ) {
			case OBJECT_VK:
				{
				alt126=1;
				}
				break;
			case SQL92_RESERVED_NULL:
			case VARR_ARRAY_DEF:
				{
				alt126=2;
				}
				break;
			case NESTED_TABLE_TYPE_DEF:
				{
				alt126=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 126, 0, input);
				throw nvae;
			}
			switch (alt126) {
				case 1 :
					// PLSQLPrinter.g:507:23: OBJECT_VK
					{
					match(input,OBJECT_VK,FOLLOW_OBJECT_VK_in_object_as_part4822); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:507:33: varray_type_def
					{
					pushFollow(FOLLOW_varray_type_def_in_object_as_part4824);
					varray_type_def();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:507:49: nested_table_type_def
					{
					pushFollow(FOLLOW_nested_table_type_def_in_object_as_part4826);
					nested_table_type_def();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 508:5: -> template( \"not implemented: object_as_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: object_as_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_as_part"


	public static class object_under_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "object_under_part"
	// PLSQLPrinter.g:511:1: object_under_part : ^( UNDER_VK type_spec ) -> template( \"not implemented: object_under_part\";
	public final PLSQLPrinter.object_under_part_return object_under_part() throws RecognitionException {
		PLSQLPrinter.object_under_part_return retval = new PLSQLPrinter.object_under_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:512:5: ( ^( UNDER_VK type_spec ) -> template( \"not implemented: object_under_part\")
			// PLSQLPrinter.g:512:10: ^( UNDER_VK type_spec )
			{
			match(input,UNDER_VK,FOLLOW_UNDER_VK_in_object_under_part4863); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_object_under_part4865);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 513:5: -> template( \"not implemented: object_under_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: object_under_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_under_part"


	public static class nested_table_type_def_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "nested_table_type_def"
	// PLSQLPrinter.g:516:1: nested_table_type_def : ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ( table_indexed_by_part )? ) -> template( \"not implemented: nested_table_type_def\";
	public final PLSQLPrinter.nested_table_type_def_return nested_table_type_def() throws RecognitionException {
		PLSQLPrinter.nested_table_type_def_return retval = new PLSQLPrinter.nested_table_type_def_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:517:5: ( ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ( table_indexed_by_part )? ) -> template( \"not implemented: nested_table_type_def\")
			// PLSQLPrinter.g:517:10: ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ( table_indexed_by_part )? )
			{
			match(input,NESTED_TABLE_TYPE_DEF,FOLLOW_NESTED_TABLE_TYPE_DEF_in_nested_table_type_def4901); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_nested_table_type_def4903);
			type_spec();
			state._fsp--;

			// PLSQLPrinter.g:517:44: ( SQL92_RESERVED_NULL )?
			int alt127=2;
			int LA127_0 = input.LA(1);
			if ( (LA127_0==SQL92_RESERVED_NULL) ) {
				alt127=1;
			}
			switch (alt127) {
				case 1 :
					// PLSQLPrinter.g:517:44: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_nested_table_type_def4905); 
					}
					break;

			}

			// PLSQLPrinter.g:517:65: ( table_indexed_by_part )?
			int alt128=2;
			int LA128_0 = input.LA(1);
			if ( (LA128_0==INDEXED_BY) ) {
				alt128=1;
			}
			switch (alt128) {
				case 1 :
					// PLSQLPrinter.g:517:65: table_indexed_by_part
					{
					pushFollow(FOLLOW_table_indexed_by_part_in_nested_table_type_def4908);
					table_indexed_by_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 518:5: -> template( \"not implemented: nested_table_type_def\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: nested_table_type_def");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "nested_table_type_def"


	public static class sqlj_object_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sqlj_object_type"
	// PLSQLPrinter.g:521:1: sqlj_object_type : ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) ) -> template( \"not implemented: sqlj_object_type\";
	public final PLSQLPrinter.sqlj_object_type_return sqlj_object_type() throws RecognitionException {
		PLSQLPrinter.sqlj_object_type_return retval = new PLSQLPrinter.sqlj_object_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:522:5: ( ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) ) -> template( \"not implemented: sqlj_object_type\")
			// PLSQLPrinter.g:522:10: ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) )
			{
			match(input,JAVA_VK,FOLLOW_JAVA_VK_in_sqlj_object_type4945); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_sqlj_object_type4947);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:522:31: ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK )
			int alt129=3;
			switch ( input.LA(1) ) {
			case SQLDATA_VK:
				{
				alt129=1;
				}
				break;
			case CUSTOMDATUM_VK:
				{
				alt129=2;
				}
				break;
			case ORADATA_VK:
				{
				alt129=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 129, 0, input);
				throw nvae;
			}
			switch (alt129) {
				case 1 :
					// PLSQLPrinter.g:522:32: SQLDATA_VK
					{
					match(input,SQLDATA_VK,FOLLOW_SQLDATA_VK_in_sqlj_object_type4950); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:522:43: CUSTOMDATUM_VK
					{
					match(input,CUSTOMDATUM_VK,FOLLOW_CUSTOMDATUM_VK_in_sqlj_object_type4952); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:522:58: ORADATA_VK
					{
					match(input,ORADATA_VK,FOLLOW_ORADATA_VK_in_sqlj_object_type4954); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 523:5: -> template( \"not implemented: sqlj_object_type\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: sqlj_object_type");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sqlj_object_type"


	public static class type_body_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_body_elements"
	// PLSQLPrinter.g:526:1: type_body_elements : ( map_order_func_declaration -> template( \"not implemented: type_body_elements\"| subprog_decl_in_type -> template( \"not implemented: type_body_elements\");
	public final PLSQLPrinter.type_body_elements_return type_body_elements() throws RecognitionException {
		PLSQLPrinter.type_body_elements_return retval = new PLSQLPrinter.type_body_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:527:5: ( map_order_func_declaration -> template( \"not implemented: type_body_elements\"| subprog_decl_in_type -> template( \"not implemented: type_body_elements\")
			int alt130=2;
			int LA130_0 = input.LA(1);
			if ( (LA130_0==SQL92_RESERVED_ORDER||LA130_0==MAP_VK) ) {
				alt130=1;
			}
			else if ( (LA130_0==MEMBER_VK||LA130_0==STATIC_VK) ) {
				alt130=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 130, 0, input);
				throw nvae;
			}

			switch (alt130) {
				case 1 :
					// PLSQLPrinter.g:527:10: map_order_func_declaration
					{
					pushFollow(FOLLOW_map_order_func_declaration_in_type_body_elements4990);
					map_order_func_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 528:5: -> template( \"not implemented: type_body_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: type_body_elements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:529:10: subprog_decl_in_type
					{
					pushFollow(FOLLOW_subprog_decl_in_type_in_type_body_elements5015);
					subprog_decl_in_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 530:5: -> template( \"not implemented: type_body_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: type_body_elements");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_body_elements"


	public static class map_order_func_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "map_order_func_declaration"
	// PLSQLPrinter.g:533:1: map_order_func_declaration : ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body ) -> template( \"not implemented: map_order_func_declaration\";
	public final PLSQLPrinter.map_order_func_declaration_return map_order_func_declaration() throws RecognitionException {
		PLSQLPrinter.map_order_func_declaration_return retval = new PLSQLPrinter.map_order_func_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:534:5: ( ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body ) -> template( \"not implemented: map_order_func_declaration\")
			// PLSQLPrinter.g:534:10: ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body )
			{
			// PLSQLPrinter.g:534:12: ( MAP_VK | SQL92_RESERVED_ORDER )
			int alt131=2;
			int LA131_0 = input.LA(1);
			if ( (LA131_0==MAP_VK) ) {
				alt131=1;
			}
			else if ( (LA131_0==SQL92_RESERVED_ORDER) ) {
				alt131=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 131, 0, input);
				throw nvae;
			}

			switch (alt131) {
				case 1 :
					// PLSQLPrinter.g:534:13: MAP_VK
					{
					match(input,MAP_VK,FOLLOW_MAP_VK_in_map_order_func_declaration5051); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:534:20: SQL92_RESERVED_ORDER
					{
					match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_map_order_func_declaration5053); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_create_function_body_in_map_order_func_declaration5056);
			create_function_body();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 535:5: -> template( \"not implemented: map_order_func_declaration\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: map_order_func_declaration");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "map_order_func_declaration"


	public static class subprog_decl_in_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subprog_decl_in_type"
	// PLSQLPrinter.g:538:1: subprog_decl_in_type : ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) ) -> template( \"not implemented: subprog_decl_in_type\";
	public final PLSQLPrinter.subprog_decl_in_type_return subprog_decl_in_type() throws RecognitionException {
		PLSQLPrinter.subprog_decl_in_type_return retval = new PLSQLPrinter.subprog_decl_in_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:539:5: ( ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) ) -> template( \"not implemented: subprog_decl_in_type\")
			// PLSQLPrinter.g:539:10: ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) )
			{
			// PLSQLPrinter.g:539:12: ( MEMBER_VK | STATIC_VK )
			int alt132=2;
			int LA132_0 = input.LA(1);
			if ( (LA132_0==MEMBER_VK) ) {
				alt132=1;
			}
			else if ( (LA132_0==STATIC_VK) ) {
				alt132=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 132, 0, input);
				throw nvae;
			}

			switch (alt132) {
				case 1 :
					// PLSQLPrinter.g:539:13: MEMBER_VK
					{
					match(input,MEMBER_VK,FOLLOW_MEMBER_VK_in_subprog_decl_in_type5093); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:539:23: STATIC_VK
					{
					match(input,STATIC_VK,FOLLOW_STATIC_VK_in_subprog_decl_in_type5095); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:540:13: ( create_procedure_body | create_function_body | constructor_declaration )
			int alt133=3;
			switch ( input.LA(1) ) {
			case CREATE_PROCEDURE:
				{
				alt133=1;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt133=2;
				}
				break;
			case CONSTRUCTOR_VK:
				{
				alt133=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 133, 0, input);
				throw nvae;
			}
			switch (alt133) {
				case 1 :
					// PLSQLPrinter.g:540:18: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_subprog_decl_in_type5115);
					create_procedure_body();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:541:18: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_subprog_decl_in_type5134);
					create_function_body();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:542:18: constructor_declaration
					{
					pushFollow(FOLLOW_constructor_declaration_in_subprog_decl_in_type5153);
					constructor_declaration();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 545:5: -> template( \"not implemented: subprog_decl_in_type\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: subprog_decl_in_type");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subprog_decl_in_type"


	public static class constructor_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constructor_declaration"
	// PLSQLPrinter.g:548:1: constructor_declaration : ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE block ) ) ) -> template( \"not implemented: constructor_declaration\";
	public final PLSQLPrinter.constructor_declaration_return constructor_declaration() throws RecognitionException {
		PLSQLPrinter.constructor_declaration_return retval = new PLSQLPrinter.constructor_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:549:5: ( ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE block ) ) ) -> template( \"not implemented: constructor_declaration\")
			// PLSQLPrinter.g:549:10: ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE block ) ) )
			{
			match(input,CONSTRUCTOR_VK,FOLLOW_CONSTRUCTOR_VK_in_constructor_declaration5212); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_constructor_declaration5214);
			type_spec();
			state._fsp--;

			// PLSQLPrinter.g:549:37: ( FINAL_VK )?
			int alt134=2;
			int LA134_0 = input.LA(1);
			if ( (LA134_0==FINAL_VK) ) {
				alt134=1;
			}
			switch (alt134) {
				case 1 :
					// PLSQLPrinter.g:549:37: FINAL_VK
					{
					match(input,FINAL_VK,FOLLOW_FINAL_VK_in_constructor_declaration5216); 
					}
					break;

			}

			// PLSQLPrinter.g:549:47: ( INSTANTIABLE_VK )?
			int alt135=2;
			int LA135_0 = input.LA(1);
			if ( (LA135_0==INSTANTIABLE_VK) ) {
				alt135=1;
			}
			switch (alt135) {
				case 1 :
					// PLSQLPrinter.g:549:47: INSTANTIABLE_VK
					{
					match(input,INSTANTIABLE_VK,FOLLOW_INSTANTIABLE_VK_in_constructor_declaration5219); 
					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_constructor_declaration5223); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:549:77: ( type_elements_parameter )*
				loop136:
				while (true) {
					int alt136=2;
					int LA136_0 = input.LA(1);
					if ( (LA136_0==PARAMETER) ) {
						alt136=1;
					}

					switch (alt136) {
					case 1 :
						// PLSQLPrinter.g:549:77: type_elements_parameter
						{
						pushFollow(FOLLOW_type_elements_parameter_in_constructor_declaration5225);
						type_elements_parameter();
						state._fsp--;

						}
						break;

					default :
						break loop136;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:550:13: ( ^( CALL_MODE call_spec ) | ^( BODY_MODE block ) )
			int alt137=2;
			int LA137_0 = input.LA(1);
			if ( (LA137_0==CALL_MODE) ) {
				alt137=1;
			}
			else if ( (LA137_0==BODY_MODE) ) {
				alt137=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 137, 0, input);
				throw nvae;
			}

			switch (alt137) {
				case 1 :
					// PLSQLPrinter.g:550:18: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_constructor_declaration5248); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_constructor_declaration5250);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:551:18: ^( BODY_MODE block )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_constructor_declaration5271); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_constructor_declaration5273);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 554:5: -> template( \"not implemented: constructor_declaration\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: constructor_declaration");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constructor_declaration"


	public static class modifier_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "modifier_clause"
	// PLSQLPrinter.g:561:1: modifier_clause : ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) ) -> template( \"not implemented: modifier_clause\";
	public final PLSQLPrinter.modifier_clause_return modifier_clause() throws RecognitionException {
		PLSQLPrinter.modifier_clause_return retval = new PLSQLPrinter.modifier_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:562:5: ( ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) ) -> template( \"not implemented: modifier_clause\")
			// PLSQLPrinter.g:562:10: ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) )
			{
			match(input,MODIFIER,FOLLOW_MODIFIER_in_modifier_clause5337); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:562:21: ( SQL92_RESERVED_NOT )?
			int alt138=2;
			int LA138_0 = input.LA(1);
			if ( (LA138_0==SQL92_RESERVED_NOT) ) {
				alt138=1;
			}
			switch (alt138) {
				case 1 :
					// PLSQLPrinter.g:562:21: SQL92_RESERVED_NOT
					{
					match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_modifier_clause5339); 
					}
					break;

			}

			// PLSQLPrinter.g:562:41: ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK )
			int alt139=3;
			switch ( input.LA(1) ) {
			case INSTANTIABLE_VK:
				{
				alt139=1;
				}
				break;
			case FINAL_VK:
				{
				alt139=2;
				}
				break;
			case OVERRIDING_VK:
				{
				alt139=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 139, 0, input);
				throw nvae;
			}
			switch (alt139) {
				case 1 :
					// PLSQLPrinter.g:562:42: INSTANTIABLE_VK
					{
					match(input,INSTANTIABLE_VK,FOLLOW_INSTANTIABLE_VK_in_modifier_clause5343); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:562:58: FINAL_VK
					{
					match(input,FINAL_VK,FOLLOW_FINAL_VK_in_modifier_clause5345); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:562:67: OVERRIDING_VK
					{
					match(input,OVERRIDING_VK,FOLLOW_OVERRIDING_VK_in_modifier_clause5347); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 563:5: -> template( \"not implemented: modifier_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: modifier_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "modifier_clause"


	public static class sqlj_object_type_attr_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sqlj_object_type_attr"
	// PLSQLPrinter.g:566:1: sqlj_object_type_attr : ^( EXTERNAL_VK expression ) -> template( \"not implemented: sqlj_object_type_attr\";
	public final PLSQLPrinter.sqlj_object_type_attr_return sqlj_object_type_attr() throws RecognitionException {
		PLSQLPrinter.sqlj_object_type_attr_return retval = new PLSQLPrinter.sqlj_object_type_attr_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:567:5: ( ^( EXTERNAL_VK expression ) -> template( \"not implemented: sqlj_object_type_attr\")
			// PLSQLPrinter.g:567:10: ^( EXTERNAL_VK expression )
			{
			match(input,EXTERNAL_VK,FOLLOW_EXTERNAL_VK_in_sqlj_object_type_attr5384); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_sqlj_object_type_attr5386);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 568:5: -> template( \"not implemented: sqlj_object_type_attr\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: sqlj_object_type_attr");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sqlj_object_type_attr"


	public static class element_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "element_spec"
	// PLSQLPrinter.g:571:1: element_spec : ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? ) -> template( \"not implemented: element_spec\";
	public final PLSQLPrinter.element_spec_return element_spec() throws RecognitionException {
		PLSQLPrinter.element_spec_return retval = new PLSQLPrinter.element_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:572:5: ( ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? ) -> template( \"not implemented: element_spec\")
			// PLSQLPrinter.g:572:10: ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? )
			{
			match(input,ELEMENT_SPEC,FOLLOW_ELEMENT_SPEC_in_element_spec5422); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:572:25: ( element_spec_options )+
			int cnt140=0;
			loop140:
			while (true) {
				int alt140=2;
				int LA140_0 = input.LA(1);
				if ( (LA140_0==SQL92_RESERVED_ORDER||LA140_0==CONSTRUCTOR_SPEC||LA140_0==FIELD_SPEC||LA140_0==MAP_VK||LA140_0==MEMBER_VK||LA140_0==STATIC_VK) ) {
					alt140=1;
				}

				switch (alt140) {
				case 1 :
					// PLSQLPrinter.g:572:25: element_spec_options
					{
					pushFollow(FOLLOW_element_spec_options_in_element_spec5424);
					element_spec_options();
					state._fsp--;

					}
					break;

				default :
					if ( cnt140 >= 1 ) break loop140;
					EarlyExitException eee = new EarlyExitException(140, input);
					throw eee;
				}
				cnt140++;
			}

			// PLSQLPrinter.g:572:47: ( modifier_clause )?
			int alt141=2;
			int LA141_0 = input.LA(1);
			if ( (LA141_0==MODIFIER) ) {
				alt141=1;
			}
			switch (alt141) {
				case 1 :
					// PLSQLPrinter.g:572:47: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_element_spec5427);
					modifier_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:572:64: ( pragma_clause )?
			int alt142=2;
			int LA142_0 = input.LA(1);
			if ( (LA142_0==PRAGMA_VK) ) {
				alt142=1;
			}
			switch (alt142) {
				case 1 :
					// PLSQLPrinter.g:572:64: pragma_clause
					{
					pushFollow(FOLLOW_pragma_clause_in_element_spec5430);
					pragma_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 573:5: -> template( \"not implemented: element_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: element_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "element_spec"


	public static class element_spec_options_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "element_spec_options"
	// PLSQLPrinter.g:576:1: element_spec_options : ( subprogram_spec -> template( \"not implemented: element_spec_options\"| constructor_spec -> template( \"not implemented: element_spec_options\"| map_order_function_spec -> template( \"not implemented: element_spec_options\"| ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) -> template( \"not implemented: element_spec_options\");
	public final PLSQLPrinter.element_spec_options_return element_spec_options() throws RecognitionException {
		PLSQLPrinter.element_spec_options_return retval = new PLSQLPrinter.element_spec_options_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:577:5: ( subprogram_spec -> template( \"not implemented: element_spec_options\"| constructor_spec -> template( \"not implemented: element_spec_options\"| map_order_function_spec -> template( \"not implemented: element_spec_options\"| ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) -> template( \"not implemented: element_spec_options\")
			int alt144=4;
			switch ( input.LA(1) ) {
			case MEMBER_VK:
			case STATIC_VK:
				{
				alt144=1;
				}
				break;
			case CONSTRUCTOR_SPEC:
				{
				alt144=2;
				}
				break;
			case SQL92_RESERVED_ORDER:
			case MAP_VK:
				{
				alt144=3;
				}
				break;
			case FIELD_SPEC:
				{
				alt144=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 144, 0, input);
				throw nvae;
			}
			switch (alt144) {
				case 1 :
					// PLSQLPrinter.g:577:10: subprogram_spec
					{
					pushFollow(FOLLOW_subprogram_spec_in_element_spec_options5466);
					subprogram_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 578:5: -> template( \"not implemented: element_spec_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: element_spec_options");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:579:10: constructor_spec
					{
					pushFollow(FOLLOW_constructor_spec_in_element_spec_options5491);
					constructor_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 580:5: -> template( \"not implemented: element_spec_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: element_spec_options");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:581:10: map_order_function_spec
					{
					pushFollow(FOLLOW_map_order_function_spec_in_element_spec_options5516);
					map_order_function_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 582:5: -> template( \"not implemented: element_spec_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: element_spec_options");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:583:10: ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? )
					{
					match(input,FIELD_SPEC,FOLLOW_FIELD_SPEC_in_element_spec_options5542); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_id_in_element_spec_options5544);
					id();
					state._fsp--;

					pushFollow(FOLLOW_type_spec_in_element_spec_options5546);
					type_spec();
					state._fsp--;

					// PLSQLPrinter.g:583:36: ( sqlj_object_type_attr )?
					int alt143=2;
					int LA143_0 = input.LA(1);
					if ( (LA143_0==EXTERNAL_VK) ) {
						alt143=1;
					}
					switch (alt143) {
						case 1 :
							// PLSQLPrinter.g:583:36: sqlj_object_type_attr
							{
							pushFollow(FOLLOW_sqlj_object_type_attr_in_element_spec_options5548);
							sqlj_object_type_attr();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 584:5: -> template( \"not implemented: element_spec_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: element_spec_options");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "element_spec_options"


	public static class subprogram_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subprogram_spec"
	// PLSQLPrinter.g:587:1: subprogram_spec : ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) ) -> template( \"not implemented: subprogram_spec\";
	public final PLSQLPrinter.subprogram_spec_return subprogram_spec() throws RecognitionException {
		PLSQLPrinter.subprogram_spec_return retval = new PLSQLPrinter.subprogram_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:588:5: ( ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) ) -> template( \"not implemented: subprogram_spec\")
			// PLSQLPrinter.g:588:10: ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) )
			{
			// PLSQLPrinter.g:588:12: ( MEMBER_VK | STATIC_VK )
			int alt145=2;
			int LA145_0 = input.LA(1);
			if ( (LA145_0==MEMBER_VK) ) {
				alt145=1;
			}
			else if ( (LA145_0==STATIC_VK) ) {
				alt145=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 145, 0, input);
				throw nvae;
			}

			switch (alt145) {
				case 1 :
					// PLSQLPrinter.g:588:13: MEMBER_VK
					{
					match(input,MEMBER_VK,FOLLOW_MEMBER_VK_in_subprogram_spec5586); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:588:23: STATIC_VK
					{
					match(input,STATIC_VK,FOLLOW_STATIC_VK_in_subprogram_spec5588); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:589:13: ( procedure_spec | function_spec )
			int alt146=2;
			int LA146_0 = input.LA(1);
			if ( (LA146_0==PROCEDURE_SPEC) ) {
				alt146=1;
			}
			else if ( (LA146_0==FUNCTION_SPEC) ) {
				alt146=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 146, 0, input);
				throw nvae;
			}

			switch (alt146) {
				case 1 :
					// PLSQLPrinter.g:589:18: procedure_spec
					{
					pushFollow(FOLLOW_procedure_spec_in_subprogram_spec5608);
					procedure_spec();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:590:18: function_spec
					{
					pushFollow(FOLLOW_function_spec_in_subprogram_spec5627);
					function_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 593:5: -> template( \"not implemented: subprogram_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: subprogram_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subprogram_spec"


	public static class constructor_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constructor_spec"
	// PLSQLPrinter.g:596:1: constructor_spec : ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? ) -> template( \"not implemented: constructor_spec\";
	public final PLSQLPrinter.constructor_spec_return constructor_spec() throws RecognitionException {
		PLSQLPrinter.constructor_spec_return retval = new PLSQLPrinter.constructor_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:597:5: ( ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? ) -> template( \"not implemented: constructor_spec\")
			// PLSQLPrinter.g:597:10: ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? )
			{
			match(input,CONSTRUCTOR_SPEC,FOLLOW_CONSTRUCTOR_SPEC_in_constructor_spec5686); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_constructor_spec5688);
			type_spec();
			state._fsp--;

			// PLSQLPrinter.g:597:39: ( FINAL_VK )?
			int alt147=2;
			int LA147_0 = input.LA(1);
			if ( (LA147_0==FINAL_VK) ) {
				alt147=1;
			}
			switch (alt147) {
				case 1 :
					// PLSQLPrinter.g:597:39: FINAL_VK
					{
					match(input,FINAL_VK,FOLLOW_FINAL_VK_in_constructor_spec5690); 
					}
					break;

			}

			// PLSQLPrinter.g:597:49: ( INSTANTIABLE_VK )?
			int alt148=2;
			int LA148_0 = input.LA(1);
			if ( (LA148_0==INSTANTIABLE_VK) ) {
				alt148=1;
			}
			switch (alt148) {
				case 1 :
					// PLSQLPrinter.g:597:49: INSTANTIABLE_VK
					{
					match(input,INSTANTIABLE_VK,FOLLOW_INSTANTIABLE_VK_in_constructor_spec5693); 
					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_constructor_spec5697); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:597:79: ( type_elements_parameter )*
				loop149:
				while (true) {
					int alt149=2;
					int LA149_0 = input.LA(1);
					if ( (LA149_0==PARAMETER) ) {
						alt149=1;
					}

					switch (alt149) {
					case 1 :
						// PLSQLPrinter.g:597:79: type_elements_parameter
						{
						pushFollow(FOLLOW_type_elements_parameter_in_constructor_spec5699);
						type_elements_parameter();
						state._fsp--;

						}
						break;

					default :
						break loop149;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:597:105: ( constructor_call_mode )?
			int alt150=2;
			int LA150_0 = input.LA(1);
			if ( (LA150_0==CALL_MODE) ) {
				alt150=1;
			}
			switch (alt150) {
				case 1 :
					// PLSQLPrinter.g:597:105: constructor_call_mode
					{
					pushFollow(FOLLOW_constructor_call_mode_in_constructor_spec5703);
					constructor_call_mode();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 598:5: -> template( \"not implemented: constructor_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: constructor_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constructor_spec"


	public static class constructor_call_mode_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constructor_call_mode"
	// PLSQLPrinter.g:601:1: constructor_call_mode : ^( CALL_MODE call_spec ) -> template( \"not implemented: constructor_call_mode\";
	public final PLSQLPrinter.constructor_call_mode_return constructor_call_mode() throws RecognitionException {
		PLSQLPrinter.constructor_call_mode_return retval = new PLSQLPrinter.constructor_call_mode_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:602:5: ( ^( CALL_MODE call_spec ) -> template( \"not implemented: constructor_call_mode\")
			// PLSQLPrinter.g:602:10: ^( CALL_MODE call_spec )
			{
			match(input,CALL_MODE,FOLLOW_CALL_MODE_in_constructor_call_mode5740); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_call_spec_in_constructor_call_mode5742);
			call_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 603:5: -> template( \"not implemented: constructor_call_mode\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: constructor_call_mode");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constructor_call_mode"


	public static class map_order_function_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "map_order_function_spec"
	// PLSQLPrinter.g:606:1: map_order_function_spec : ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec ) -> template( \"not implemented: map_order_function_spec\";
	public final PLSQLPrinter.map_order_function_spec_return map_order_function_spec() throws RecognitionException {
		PLSQLPrinter.map_order_function_spec_return retval = new PLSQLPrinter.map_order_function_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:607:5: ( ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec ) -> template( \"not implemented: map_order_function_spec\")
			// PLSQLPrinter.g:607:10: ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec )
			{
			// PLSQLPrinter.g:607:12: ( MAP_VK | SQL92_RESERVED_ORDER )
			int alt151=2;
			int LA151_0 = input.LA(1);
			if ( (LA151_0==MAP_VK) ) {
				alt151=1;
			}
			else if ( (LA151_0==SQL92_RESERVED_ORDER) ) {
				alt151=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 151, 0, input);
				throw nvae;
			}

			switch (alt151) {
				case 1 :
					// PLSQLPrinter.g:607:13: MAP_VK
					{
					match(input,MAP_VK,FOLLOW_MAP_VK_in_map_order_function_spec5779); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:607:20: SQL92_RESERVED_ORDER
					{
					match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_map_order_function_spec5781); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_spec_in_map_order_function_spec5784);
			function_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 608:5: -> template( \"not implemented: map_order_function_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: map_order_function_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "map_order_function_spec"


	public static class pragma_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_clause"
	// PLSQLPrinter.g:611:1: pragma_clause : ^( PRAGMA_VK ( pragma_elements )+ ) -> template( \"not implemented: pragma_clause\";
	public final PLSQLPrinter.pragma_clause_return pragma_clause() throws RecognitionException {
		PLSQLPrinter.pragma_clause_return retval = new PLSQLPrinter.pragma_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:612:5: ( ^( PRAGMA_VK ( pragma_elements )+ ) -> template( \"not implemented: pragma_clause\")
			// PLSQLPrinter.g:612:10: ^( PRAGMA_VK ( pragma_elements )+ )
			{
			match(input,PRAGMA_VK,FOLLOW_PRAGMA_VK_in_pragma_clause5820); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:612:22: ( pragma_elements )+
			int cnt152=0;
			loop152:
			while (true) {
				int alt152=2;
				int LA152_0 = input.LA(1);
				if ( (LA152_0==SQL92_RESERVED_DEFAULT||LA152_0==CHAR_SET_NAME||LA152_0==ID) ) {
					alt152=1;
				}

				switch (alt152) {
				case 1 :
					// PLSQLPrinter.g:612:22: pragma_elements
					{
					pushFollow(FOLLOW_pragma_elements_in_pragma_clause5822);
					pragma_elements();
					state._fsp--;

					}
					break;

				default :
					if ( cnt152 >= 1 ) break loop152;
					EarlyExitException eee = new EarlyExitException(152, input);
					throw eee;
				}
				cnt152++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 613:5: -> template( \"not implemented: pragma_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pragma_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_clause"


	public static class pragma_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_elements"
	// PLSQLPrinter.g:616:1: pragma_elements : ( id -> template( \"not implemented: pragma_elements\"| SQL92_RESERVED_DEFAULT -> template( \"not implemented: pragma_elements\");
	public final PLSQLPrinter.pragma_elements_return pragma_elements() throws RecognitionException {
		PLSQLPrinter.pragma_elements_return retval = new PLSQLPrinter.pragma_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:617:5: ( id -> template( \"not implemented: pragma_elements\"| SQL92_RESERVED_DEFAULT -> template( \"not implemented: pragma_elements\")
			int alt153=2;
			int LA153_0 = input.LA(1);
			if ( (LA153_0==CHAR_SET_NAME||LA153_0==ID) ) {
				alt153=1;
			}
			else if ( (LA153_0==SQL92_RESERVED_DEFAULT) ) {
				alt153=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 153, 0, input);
				throw nvae;
			}

			switch (alt153) {
				case 1 :
					// PLSQLPrinter.g:617:10: id
					{
					pushFollow(FOLLOW_id_in_pragma_elements5858);
					id();
					state._fsp--;

					// TEMPLATE REWRITE
					// 618:5: -> template( \"not implemented: pragma_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: pragma_elements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:619:10: SQL92_RESERVED_DEFAULT
					{
					match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_elements5883); 
					// TEMPLATE REWRITE
					// 620:5: -> template( \"not implemented: pragma_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: pragma_elements");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_elements"


	public static class type_elements_parameter_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_elements_parameter"
	// PLSQLPrinter.g:623:1: type_elements_parameter : ^( PARAMETER parameter_name type_spec ) -> template( \"not implemented: type_elements_parameter\";
	public final PLSQLPrinter.type_elements_parameter_return type_elements_parameter() throws RecognitionException {
		PLSQLPrinter.type_elements_parameter_return retval = new PLSQLPrinter.type_elements_parameter_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:624:5: ( ^( PARAMETER parameter_name type_spec ) -> template( \"not implemented: type_elements_parameter\")
			// PLSQLPrinter.g:624:10: ^( PARAMETER parameter_name type_spec )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_type_elements_parameter5918); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_type_elements_parameter5920);
			parameter_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_type_elements_parameter5922);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 625:5: -> template( \"not implemented: type_elements_parameter\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: type_elements_parameter");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_elements_parameter"


	public static class drop_sequence_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_sequence"
	// PLSQLPrinter.g:634:1: drop_sequence : ^( DROP_SEQUENCE sequence_name ) -> template( \"not implemented: drop_sequence\";
	public final PLSQLPrinter.drop_sequence_return drop_sequence() throws RecognitionException {
		PLSQLPrinter.drop_sequence_return retval = new PLSQLPrinter.drop_sequence_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:635:5: ( ^( DROP_SEQUENCE sequence_name ) -> template( \"not implemented: drop_sequence\")
			// PLSQLPrinter.g:635:9: ^( DROP_SEQUENCE sequence_name )
			{
			match(input,DROP_SEQUENCE,FOLLOW_DROP_SEQUENCE_in_drop_sequence5963); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_sequence_name_in_drop_sequence5965);
			sequence_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 636:5: -> template( \"not implemented: drop_sequence\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_sequence");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_sequence"


	public static class alter_sequence_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_sequence"
	// PLSQLPrinter.g:639:1: alter_sequence : ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ ) -> template( \"not implemented: alter_sequence\";
	public final PLSQLPrinter.alter_sequence_return alter_sequence() throws RecognitionException {
		PLSQLPrinter.alter_sequence_return retval = new PLSQLPrinter.alter_sequence_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:640:5: ( ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ ) -> template( \"not implemented: alter_sequence\")
			// PLSQLPrinter.g:640:10: ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ )
			{
			match(input,ALTER_SEQUENCE,FOLLOW_ALTER_SEQUENCE_in_alter_sequence6001); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_sequence_name_in_alter_sequence6003);
			sequence_name();
			state._fsp--;

			// PLSQLPrinter.g:640:41: ( sequence_spec )+
			int cnt154=0;
			loop154:
			while (true) {
				int alt154=2;
				int LA154_0 = input.LA(1);
				if ( (LA154_0==CACHE_VK||LA154_0==CYCLE_VK||LA154_0==INCREMENT_VK||LA154_0==MAXVALUE_VK||LA154_0==MINVALUE_VK||LA154_0==NOCACHE_VK||LA154_0==NOCYCLE_VK||(LA154_0 >= NOMAXVALUE_VK && LA154_0 <= NOMINVALUE_VK)||LA154_0==NOORDER_VK||(LA154_0 >= ORDER_VK && LA154_0 <= START_VK)) ) {
					alt154=1;
				}

				switch (alt154) {
				case 1 :
					// PLSQLPrinter.g:640:41: sequence_spec
					{
					pushFollow(FOLLOW_sequence_spec_in_alter_sequence6005);
					sequence_spec();
					state._fsp--;

					}
					break;

				default :
					if ( cnt154 >= 1 ) break loop154;
					EarlyExitException eee = new EarlyExitException(154, input);
					throw eee;
				}
				cnt154++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 641:5: -> template( \"not implemented: alter_sequence\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_sequence");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_sequence"


	public static class create_sequence_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_sequence"
	// PLSQLPrinter.g:644:1: create_sequence : ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* ) -> template( \"not implemented: create_sequence\";
	public final PLSQLPrinter.create_sequence_return create_sequence() throws RecognitionException {
		PLSQLPrinter.create_sequence_return retval = new PLSQLPrinter.create_sequence_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:645:5: ( ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* ) -> template( \"not implemented: create_sequence\")
			// PLSQLPrinter.g:645:10: ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* )
			{
			match(input,CREATE_SEQUENCE,FOLLOW_CREATE_SEQUENCE_in_create_sequence6042); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_sequence_name_in_create_sequence6044);
			sequence_name();
			state._fsp--;

			// PLSQLPrinter.g:645:42: ( sequence_spec )*
			loop155:
			while (true) {
				int alt155=2;
				int LA155_0 = input.LA(1);
				if ( (LA155_0==CACHE_VK||LA155_0==CYCLE_VK||LA155_0==INCREMENT_VK||LA155_0==MAXVALUE_VK||LA155_0==MINVALUE_VK||LA155_0==NOCACHE_VK||LA155_0==NOCYCLE_VK||(LA155_0 >= NOMAXVALUE_VK && LA155_0 <= NOMINVALUE_VK)||LA155_0==NOORDER_VK||(LA155_0 >= ORDER_VK && LA155_0 <= START_VK)) ) {
					alt155=1;
				}

				switch (alt155) {
				case 1 :
					// PLSQLPrinter.g:645:42: sequence_spec
					{
					pushFollow(FOLLOW_sequence_spec_in_create_sequence6046);
					sequence_spec();
					state._fsp--;

					}
					break;

				default :
					break loop155;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 646:5: -> template( \"not implemented: create_sequence\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: create_sequence");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_sequence"


	public static class sequence_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sequence_spec"
	// PLSQLPrinter.g:651:1: sequence_spec : ( ^( START_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( INCREMENT_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( MAXVALUE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( MINVALUE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( CACHE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| NOMAXVALUE_VK -> template( \"not implemented: sequence_spec\"| NOMINVALUE_VK -> template( \"not implemented: sequence_spec\"| CYCLE_VK -> template( \"not implemented: sequence_spec\"| NOCYCLE_VK -> template( \"not implemented: sequence_spec\"| NOCACHE_VK -> template( \"not implemented: sequence_spec\"| ORDER_VK -> template( \"not implemented: sequence_spec\"| NOORDER_VK -> template( \"not implemented: sequence_spec\");
	public final PLSQLPrinter.sequence_spec_return sequence_spec() throws RecognitionException {
		PLSQLPrinter.sequence_spec_return retval = new PLSQLPrinter.sequence_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:652:5: ( ^( START_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( INCREMENT_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( MAXVALUE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( MINVALUE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( CACHE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| NOMAXVALUE_VK -> template( \"not implemented: sequence_spec\"| NOMINVALUE_VK -> template( \"not implemented: sequence_spec\"| CYCLE_VK -> template( \"not implemented: sequence_spec\"| NOCYCLE_VK -> template( \"not implemented: sequence_spec\"| NOCACHE_VK -> template( \"not implemented: sequence_spec\"| ORDER_VK -> template( \"not implemented: sequence_spec\"| NOORDER_VK -> template( \"not implemented: sequence_spec\")
			int alt156=12;
			switch ( input.LA(1) ) {
			case START_VK:
				{
				alt156=1;
				}
				break;
			case INCREMENT_VK:
				{
				alt156=2;
				}
				break;
			case MAXVALUE_VK:
				{
				alt156=3;
				}
				break;
			case MINVALUE_VK:
				{
				alt156=4;
				}
				break;
			case CACHE_VK:
				{
				alt156=5;
				}
				break;
			case NOMAXVALUE_VK:
				{
				alt156=6;
				}
				break;
			case NOMINVALUE_VK:
				{
				alt156=7;
				}
				break;
			case CYCLE_VK:
				{
				alt156=8;
				}
				break;
			case NOCYCLE_VK:
				{
				alt156=9;
				}
				break;
			case NOCACHE_VK:
				{
				alt156=10;
				}
				break;
			case ORDER_VK:
				{
				alt156=11;
				}
				break;
			case NOORDER_VK:
				{
				alt156=12;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 156, 0, input);
				throw nvae;
			}
			switch (alt156) {
				case 1 :
					// PLSQLPrinter.g:652:10: ^( START_VK UNSIGNED_INTEGER )
					{
					match(input,START_VK,FOLLOW_START_VK_in_sequence_spec6085); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6087); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 653:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:654:10: ^( INCREMENT_VK UNSIGNED_INTEGER )
					{
					match(input,INCREMENT_VK,FOLLOW_INCREMENT_VK_in_sequence_spec6114); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6116); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 655:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:656:10: ^( MAXVALUE_VK UNSIGNED_INTEGER )
					{
					match(input,MAXVALUE_VK,FOLLOW_MAXVALUE_VK_in_sequence_spec6143); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6145); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 657:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:658:10: ^( MINVALUE_VK UNSIGNED_INTEGER )
					{
					match(input,MINVALUE_VK,FOLLOW_MINVALUE_VK_in_sequence_spec6172); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6174); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 659:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:660:10: ^( CACHE_VK UNSIGNED_INTEGER )
					{
					match(input,CACHE_VK,FOLLOW_CACHE_VK_in_sequence_spec6201); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6203); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 661:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:662:10: NOMAXVALUE_VK
					{
					match(input,NOMAXVALUE_VK,FOLLOW_NOMAXVALUE_VK_in_sequence_spec6229); 
					// TEMPLATE REWRITE
					// 663:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:664:10: NOMINVALUE_VK
					{
					match(input,NOMINVALUE_VK,FOLLOW_NOMINVALUE_VK_in_sequence_spec6254); 
					// TEMPLATE REWRITE
					// 665:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:666:10: CYCLE_VK
					{
					match(input,CYCLE_VK,FOLLOW_CYCLE_VK_in_sequence_spec6279); 
					// TEMPLATE REWRITE
					// 667:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:668:10: NOCYCLE_VK
					{
					match(input,NOCYCLE_VK,FOLLOW_NOCYCLE_VK_in_sequence_spec6304); 
					// TEMPLATE REWRITE
					// 669:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:670:10: NOCACHE_VK
					{
					match(input,NOCACHE_VK,FOLLOW_NOCACHE_VK_in_sequence_spec6329); 
					// TEMPLATE REWRITE
					// 671:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:672:10: ORDER_VK
					{
					match(input,ORDER_VK,FOLLOW_ORDER_VK_in_sequence_spec6354); 
					// TEMPLATE REWRITE
					// 673:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:674:10: NOORDER_VK
					{
					match(input,NOORDER_VK,FOLLOW_NOORDER_VK_in_sequence_spec6379); 
					// TEMPLATE REWRITE
					// 675:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sequence_spec"


	public static class invoker_rights_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "invoker_rights_clause"
	// PLSQLPrinter.g:684:1: invoker_rights_clause : ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) ) -> template( \"not implemented: invoker_rights_clause\";
	public final PLSQLPrinter.invoker_rights_clause_return invoker_rights_clause() throws RecognitionException {
		PLSQLPrinter.invoker_rights_clause_return retval = new PLSQLPrinter.invoker_rights_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:685:5: ( ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) ) -> template( \"not implemented: invoker_rights_clause\")
			// PLSQLPrinter.g:685:10: ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) )
			{
			match(input,AUTHID_VK,FOLLOW_AUTHID_VK_in_invoker_rights_clause6420); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:685:22: ( CURRENT_USER_VK | DEFINER_VK )
			int alt157=2;
			int LA157_0 = input.LA(1);
			if ( (LA157_0==CURRENT_USER_VK) ) {
				alt157=1;
			}
			else if ( (LA157_0==DEFINER_VK) ) {
				alt157=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 157, 0, input);
				throw nvae;
			}

			switch (alt157) {
				case 1 :
					// PLSQLPrinter.g:685:23: CURRENT_USER_VK
					{
					match(input,CURRENT_USER_VK,FOLLOW_CURRENT_USER_VK_in_invoker_rights_clause6423); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:685:39: DEFINER_VK
					{
					match(input,DEFINER_VK,FOLLOW_DEFINER_VK_in_invoker_rights_clause6425); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 686:5: -> template( \"not implemented: invoker_rights_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: invoker_rights_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "invoker_rights_clause"


	public static class compiler_parameters_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "compiler_parameters_clause"
	// PLSQLPrinter.g:689:1: compiler_parameters_clause : ^( COMPILER_PARAMETER ^( ASSIGN id expression ) ) -> template( \"not implemented: compiler_parameters_clause\";
	public final PLSQLPrinter.compiler_parameters_clause_return compiler_parameters_clause() throws RecognitionException {
		PLSQLPrinter.compiler_parameters_clause_return retval = new PLSQLPrinter.compiler_parameters_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:690:5: ( ^( COMPILER_PARAMETER ^( ASSIGN id expression ) ) -> template( \"not implemented: compiler_parameters_clause\")
			// PLSQLPrinter.g:690:10: ^( COMPILER_PARAMETER ^( ASSIGN id expression ) )
			{
			match(input,COMPILER_PARAMETER,FOLLOW_COMPILER_PARAMETER_in_compiler_parameters_clause6462); 
			match(input, Token.DOWN, null); 
			match(input,ASSIGN,FOLLOW_ASSIGN_in_compiler_parameters_clause6465); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_id_in_compiler_parameters_clause6467);
			id();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_compiler_parameters_clause6469);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 691:5: -> template( \"not implemented: compiler_parameters_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: compiler_parameters_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compiler_parameters_clause"


	public static class call_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "call_spec"
	// PLSQLPrinter.g:694:1: call_spec : ^( LANGUAGE_VK (declaration= java_spec |declaration= c_spec ) ) -> call_spec(declaration=$declaration.st);
	public final PLSQLPrinter.call_spec_return call_spec() throws RecognitionException {
		PLSQLPrinter.call_spec_return retval = new PLSQLPrinter.call_spec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope declaration =null;

		try {
			// PLSQLPrinter.g:695:5: ( ^( LANGUAGE_VK (declaration= java_spec |declaration= c_spec ) ) -> call_spec(declaration=$declaration.st))
			// PLSQLPrinter.g:695:10: ^( LANGUAGE_VK (declaration= java_spec |declaration= c_spec ) )
			{
			match(input,LANGUAGE_VK,FOLLOW_LANGUAGE_VK_in_call_spec6506); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:695:24: (declaration= java_spec |declaration= c_spec )
			int alt158=2;
			int LA158_0 = input.LA(1);
			if ( (LA158_0==JAVA_VK) ) {
				alt158=1;
			}
			else if ( (LA158_0==C_VK) ) {
				alt158=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 158, 0, input);
				throw nvae;
			}

			switch (alt158) {
				case 1 :
					// PLSQLPrinter.g:695:26: declaration= java_spec
					{
					pushFollow(FOLLOW_java_spec_in_call_spec6512);
					declaration=java_spec();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:695:50: declaration= c_spec
					{
					pushFollow(FOLLOW_c_spec_in_call_spec6518);
					declaration=c_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 696:5: -> call_spec(declaration=$declaration.st)
			{
				retval.st = templateLib.getInstanceOf("call_spec",new STAttrMap().put("declaration", (declaration!=null?((StringTemplate)declaration.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "call_spec"


	public static class java_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "java_spec"
	// PLSQLPrinter.g:701:1: java_spec : ^( JAVA_VK CHAR_STRING ) -> call_spec_java(name=$CHAR_STRING.text);
	public final PLSQLPrinter.java_spec_return java_spec() throws RecognitionException {
		PLSQLPrinter.java_spec_return retval = new PLSQLPrinter.java_spec_return();
		retval.start = input.LT(1);

		CommonTree CHAR_STRING63=null;

		try {
			// PLSQLPrinter.g:702:5: ( ^( JAVA_VK CHAR_STRING ) -> call_spec_java(name=$CHAR_STRING.text))
			// PLSQLPrinter.g:702:10: ^( JAVA_VK CHAR_STRING )
			{
			match(input,JAVA_VK,FOLLOW_JAVA_VK_in_java_spec6559); 
			match(input, Token.DOWN, null); 
			CHAR_STRING63=(CommonTree)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_java_spec6561); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 703:5: -> call_spec_java(name=$CHAR_STRING.text)
			{
				retval.st = templateLib.getInstanceOf("call_spec_java",new STAttrMap().put("name", (CHAR_STRING63!=null?CHAR_STRING63.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "java_spec"


	public static class c_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "c_spec"
	// PLSQLPrinter.g:706:1: c_spec : ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? ) -> template( \"not implemented: c_spec\";
	public final PLSQLPrinter.c_spec_return c_spec() throws RecognitionException {
		PLSQLPrinter.c_spec_return retval = new PLSQLPrinter.c_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:707:5: ( ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? ) -> template( \"not implemented: c_spec\")
			// PLSQLPrinter.g:707:10: ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? )
			{
			match(input,C_VK,FOLLOW_C_VK_in_c_spec6598); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:707:17: ( CHAR_STRING )?
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==CHAR_STRING) ) {
				alt159=1;
			}
			switch (alt159) {
				case 1 :
					// PLSQLPrinter.g:707:17: CHAR_STRING
					{
					match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_c_spec6600); 
					}
					break;

			}

			// PLSQLPrinter.g:707:30: ( CONTEXT_VK )?
			int alt160=2;
			int LA160_0 = input.LA(1);
			if ( (LA160_0==CONTEXT_VK) ) {
				alt160=1;
			}
			switch (alt160) {
				case 1 :
					// PLSQLPrinter.g:707:30: CONTEXT_VK
					{
					match(input,CONTEXT_VK,FOLLOW_CONTEXT_VK_in_c_spec6603); 
					}
					break;

			}

			match(input,LIBRARY_VK,FOLLOW_LIBRARY_VK_in_c_spec6607); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_id_in_c_spec6609);
			id();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:707:59: ( c_agent_in_clause )?
			int alt161=2;
			int LA161_0 = input.LA(1);
			if ( (LA161_0==AGENT_VK) ) {
				alt161=1;
			}
			switch (alt161) {
				case 1 :
					// PLSQLPrinter.g:707:59: c_agent_in_clause
					{
					pushFollow(FOLLOW_c_agent_in_clause_in_c_spec6612);
					c_agent_in_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:707:78: ( c_parameters_clause )?
			int alt162=2;
			int LA162_0 = input.LA(1);
			if ( (LA162_0==PARAMETERS_VK) ) {
				alt162=1;
			}
			switch (alt162) {
				case 1 :
					// PLSQLPrinter.g:707:78: c_parameters_clause
					{
					pushFollow(FOLLOW_c_parameters_clause_in_c_spec6615);
					c_parameters_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 708:5: -> template( \"not implemented: c_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: c_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "c_spec"


	public static class c_agent_in_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "c_agent_in_clause"
	// PLSQLPrinter.g:711:1: c_agent_in_clause : ^( AGENT_VK ( expression )+ ) -> template( \"not implemented: c_agent_in_clause\";
	public final PLSQLPrinter.c_agent_in_clause_return c_agent_in_clause() throws RecognitionException {
		PLSQLPrinter.c_agent_in_clause_return retval = new PLSQLPrinter.c_agent_in_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:712:5: ( ^( AGENT_VK ( expression )+ ) -> template( \"not implemented: c_agent_in_clause\")
			// PLSQLPrinter.g:712:10: ^( AGENT_VK ( expression )+ )
			{
			match(input,AGENT_VK,FOLLOW_AGENT_VK_in_c_agent_in_clause6652); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:712:21: ( expression )+
			int cnt163=0;
			loop163:
			while (true) {
				int alt163=2;
				int LA163_0 = input.LA(1);
				if ( (LA163_0==EXPR||LA163_0==LOGIC_EXPR) ) {
					alt163=1;
				}

				switch (alt163) {
				case 1 :
					// PLSQLPrinter.g:712:21: expression
					{
					pushFollow(FOLLOW_expression_in_c_agent_in_clause6654);
					expression();
					state._fsp--;

					}
					break;

				default :
					if ( cnt163 >= 1 ) break loop163;
					EarlyExitException eee = new EarlyExitException(163, input);
					throw eee;
				}
				cnt163++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 713:5: -> template( \"not implemented: c_agent_in_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: c_agent_in_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "c_agent_in_clause"


	public static class c_parameters_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "c_parameters_clause"
	// PLSQLPrinter.g:716:1: c_parameters_clause : ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) ) -> template( \"not implemented: c_parameters_clause\";
	public final PLSQLPrinter.c_parameters_clause_return c_parameters_clause() throws RecognitionException {
		PLSQLPrinter.c_parameters_clause_return retval = new PLSQLPrinter.c_parameters_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:717:5: ( ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) ) -> template( \"not implemented: c_parameters_clause\")
			// PLSQLPrinter.g:717:10: ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) )
			{
			match(input,PARAMETERS_VK,FOLLOW_PARAMETERS_VK_in_c_parameters_clause6691); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:717:26: ( THREE_DOTS | ( expression )+ )
			int alt165=2;
			int LA165_0 = input.LA(1);
			if ( (LA165_0==THREE_DOTS) ) {
				alt165=1;
			}
			else if ( (LA165_0==EXPR||LA165_0==LOGIC_EXPR) ) {
				alt165=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 165, 0, input);
				throw nvae;
			}

			switch (alt165) {
				case 1 :
					// PLSQLPrinter.g:717:27: THREE_DOTS
					{
					match(input,THREE_DOTS,FOLLOW_THREE_DOTS_in_c_parameters_clause6694); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:717:38: ( expression )+
					{
					// PLSQLPrinter.g:717:38: ( expression )+
					int cnt164=0;
					loop164:
					while (true) {
						int alt164=2;
						int LA164_0 = input.LA(1);
						if ( (LA164_0==EXPR||LA164_0==LOGIC_EXPR) ) {
							alt164=1;
						}

						switch (alt164) {
						case 1 :
							// PLSQLPrinter.g:717:38: expression
							{
							pushFollow(FOLLOW_expression_in_c_parameters_clause6696);
							expression();
							state._fsp--;

							}
							break;

						default :
							if ( cnt164 >= 1 ) break loop164;
							EarlyExitException eee = new EarlyExitException(164, input);
							throw eee;
						}
						cnt164++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 718:5: -> template( \"not implemented: c_parameters_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: c_parameters_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "c_parameters_clause"


	public static class parameter_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parameter"
	// PLSQLPrinter.g:723:1: parameter : ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? ) -> parameter(name=$parameter_name.stis_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullis_inout=$INOUT_VK != nullis_nocopy=falsetype=$type_spec.stdefault_value_part=$default_value_part.st);
	public final PLSQLPrinter.parameter_return parameter() throws RecognitionException {
		PLSQLPrinter.parameter_return retval = new PLSQLPrinter.parameter_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_IN65=null;
		CommonTree OUT_VK66=null;
		CommonTree INOUT_VK67=null;
		TreeRuleReturnScope parameter_name64 =null;
		TreeRuleReturnScope type_spec68 =null;
		TreeRuleReturnScope default_value_part69 =null;

		try {
			// PLSQLPrinter.g:724:5: ( ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? ) -> parameter(name=$parameter_name.stis_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullis_inout=$INOUT_VK != nullis_nocopy=falsetype=$type_spec.stdefault_value_part=$default_value_part.st))
			// PLSQLPrinter.g:724:10: ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_parameter6736); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_parameter6738);
			parameter_name64=parameter_name();
			state._fsp--;

			// PLSQLPrinter.g:724:37: ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )*
			loop166:
			while (true) {
				int alt166=4;
				switch ( input.LA(1) ) {
				case SQL92_RESERVED_IN:
					{
					alt166=1;
					}
					break;
				case OUT_VK:
					{
					alt166=2;
					}
					break;
				case INOUT_VK:
					{
					alt166=3;
					}
					break;
				}
				switch (alt166) {
				case 1 :
					// PLSQLPrinter.g:724:38: SQL92_RESERVED_IN
					{
					SQL92_RESERVED_IN65=(CommonTree)match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_parameter6741); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:724:56: OUT_VK
					{
					OUT_VK66=(CommonTree)match(input,OUT_VK,FOLLOW_OUT_VK_in_parameter6743); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:724:63: INOUT_VK
					{
					INOUT_VK67=(CommonTree)match(input,INOUT_VK,FOLLOW_INOUT_VK_in_parameter6745); 
					}
					break;

				default :
					break loop166;
				}
			}

			// PLSQLPrinter.g:724:74: ( type_spec )?
			int alt167=2;
			int LA167_0 = input.LA(1);
			if ( (LA167_0==CUSTOM_TYPE||LA167_0==INTERVAL_DATATYPE||LA167_0==NATIVE_DATATYPE) ) {
				alt167=1;
			}
			switch (alt167) {
				case 1 :
					// PLSQLPrinter.g:724:74: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_parameter6749);
					type_spec68=type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:724:85: ( default_value_part )?
			int alt168=2;
			int LA168_0 = input.LA(1);
			if ( (LA168_0==DEFAULT_VALUE) ) {
				alt168=1;
			}
			switch (alt168) {
				case 1 :
					// PLSQLPrinter.g:724:85: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_parameter6752);
					default_value_part69=default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 725:5: -> parameter(name=$parameter_name.stis_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullis_inout=$INOUT_VK != nullis_nocopy=falsetype=$type_spec.stdefault_value_part=$default_value_part.st)
			{
				retval.st = templateLib.getInstanceOf("parameter",new STAttrMap().put("name", (parameter_name64!=null?((StringTemplate)parameter_name64.getTemplate()):null)).put("is_in", SQL92_RESERVED_IN65 != null).put("is_out", OUT_VK66 != null).put("is_inout", INOUT_VK67 != null).put("is_nocopy", false).put("type", (type_spec68!=null?((StringTemplate)type_spec68.getTemplate()):null)).put("default_value_part", (default_value_part69!=null?((StringTemplate)default_value_part69.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter"


	public static class default_value_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "default_value_part"
	// PLSQLPrinter.g:730:1: default_value_part : ^( DEFAULT_VALUE expression ) -> default_value_part(expression=$expression.st);
	public final PLSQLPrinter.default_value_part_return default_value_part() throws RecognitionException {
		PLSQLPrinter.default_value_part_return retval = new PLSQLPrinter.default_value_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression70 =null;

		try {
			// PLSQLPrinter.g:731:5: ( ^( DEFAULT_VALUE expression ) -> default_value_part(expression=$expression.st))
			// PLSQLPrinter.g:731:10: ^( DEFAULT_VALUE expression )
			{
			match(input,DEFAULT_VALUE,FOLLOW_DEFAULT_VALUE_in_default_value_part6842); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_default_value_part6844);
			expression70=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 732:5: -> default_value_part(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("default_value_part",new STAttrMap().put("expression", (expression70!=null?((StringTemplate)expression70.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "default_value_part"


	public static class declare_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "declare_spec"
	// PLSQLPrinter.g:741:1: declare_spec : ( variable_declaration -> { $variable_declaration.st }| subtype_declaration -> { $subtype_declaration.st }| cursor_declaration -> { $cursor_declaration.st }| exception_declaration -> { $exception_declaration.st }| pragma_declaration -> { $pragma_declaration.st }| record_declaration -> { $record_declaration.st }| table_declaration -> { $table_declaration.st }| create_procedure_body -> { $create_procedure_body.st }| create_function_body -> { $create_function_body.st }| create_type -> { $create_type.st });
	public final PLSQLPrinter.declare_spec_return declare_spec() throws RecognitionException {
		PLSQLPrinter.declare_spec_return retval = new PLSQLPrinter.declare_spec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope variable_declaration71 =null;
		TreeRuleReturnScope subtype_declaration72 =null;
		TreeRuleReturnScope cursor_declaration73 =null;
		TreeRuleReturnScope exception_declaration74 =null;
		TreeRuleReturnScope pragma_declaration75 =null;
		TreeRuleReturnScope record_declaration76 =null;
		TreeRuleReturnScope table_declaration77 =null;
		TreeRuleReturnScope create_procedure_body78 =null;
		TreeRuleReturnScope create_function_body79 =null;
		TreeRuleReturnScope create_type80 =null;

		try {
			// PLSQLPrinter.g:742:5: ( variable_declaration -> { $variable_declaration.st }| subtype_declaration -> { $subtype_declaration.st }| cursor_declaration -> { $cursor_declaration.st }| exception_declaration -> { $exception_declaration.st }| pragma_declaration -> { $pragma_declaration.st }| record_declaration -> { $record_declaration.st }| table_declaration -> { $table_declaration.st }| create_procedure_body -> { $create_procedure_body.st }| create_function_body -> { $create_function_body.st }| create_type -> { $create_type.st })
			int alt169=10;
			switch ( input.LA(1) ) {
			case VARIABLE_DECLARE:
				{
				alt169=1;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt169=2;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt169=3;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt169=4;
				}
				break;
			case PRAGMA_DECLARE:
				{
				alt169=5;
				}
				break;
			case RECORD_TYPE_DECLARE:
			case RECORD_VAR_DECLARE:
				{
				alt169=6;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt169=7;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt169=8;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt169=9;
				}
				break;
			case CREATE_TYPE_BODY:
			case CREATE_TYPE_SPEC:
				{
				alt169=10;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 169, 0, input);
				throw nvae;
			}
			switch (alt169) {
				case 1 :
					// PLSQLPrinter.g:742:10: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_declare_spec6886);
					variable_declaration71=variable_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 742:31: -> { $variable_declaration.st }
					{
						retval.st =  (variable_declaration71!=null?((StringTemplate)variable_declaration71.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:743:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_declare_spec6902);
					subtype_declaration72=subtype_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 743:31: -> { $subtype_declaration.st }
					{
						retval.st =  (subtype_declaration72!=null?((StringTemplate)subtype_declaration72.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:744:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_declare_spec6918);
					cursor_declaration73=cursor_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 744:30: -> { $cursor_declaration.st }
					{
						retval.st =  (cursor_declaration73!=null?((StringTemplate)cursor_declaration73.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:745:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_declare_spec6934);
					exception_declaration74=exception_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 745:33: -> { $exception_declaration.st }
					{
						retval.st =  (exception_declaration74!=null?((StringTemplate)exception_declaration74.getTemplate()):null) ;
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:746:11: pragma_declaration
					{
					pushFollow(FOLLOW_pragma_declaration_in_declare_spec6950);
					pragma_declaration75=pragma_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 746:30: -> { $pragma_declaration.st }
					{
						retval.st =  (pragma_declaration75!=null?((StringTemplate)pragma_declaration75.getTemplate()):null) ;
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:747:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_declare_spec6966);
					record_declaration76=record_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 747:30: -> { $record_declaration.st }
					{
						retval.st =  (record_declaration76!=null?((StringTemplate)record_declaration76.getTemplate()):null) ;
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:748:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_declare_spec6982);
					table_declaration77=table_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 748:29: -> { $table_declaration.st }
					{
						retval.st =  (table_declaration77!=null?((StringTemplate)table_declaration77.getTemplate()):null) ;
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:749:11: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_declare_spec6998);
					create_procedure_body78=create_procedure_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 749:33: -> { $create_procedure_body.st }
					{
						retval.st =  (create_procedure_body78!=null?((StringTemplate)create_procedure_body78.getTemplate()):null) ;
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:750:11: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_declare_spec7014);
					create_function_body79=create_function_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 750:32: -> { $create_function_body.st }
					{
						retval.st =  (create_function_body79!=null?((StringTemplate)create_function_body79.getTemplate()):null) ;
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:751:11: create_type
					{
					pushFollow(FOLLOW_create_type_in_declare_spec7030);
					create_type80=create_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 751:23: -> { $create_type.st }
					{
						retval.st =  (create_type80!=null?((StringTemplate)create_type80.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "declare_spec"


	public static class variable_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "variable_declaration"
	// PLSQLPrinter.g:755:1: variable_declaration : ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> variable_declaration(name=$variable_name.sttype=$type_spec.stis_constant=$CONSTANT_VK != nullis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st);
	public final PLSQLPrinter.variable_declaration_return variable_declaration() throws RecognitionException {
		PLSQLPrinter.variable_declaration_return retval = new PLSQLPrinter.variable_declaration_return();
		retval.start = input.LT(1);

		CommonTree CONSTANT_VK83=null;
		CommonTree SQL92_RESERVED_NULL84=null;
		TreeRuleReturnScope variable_name81 =null;
		TreeRuleReturnScope type_spec82 =null;
		TreeRuleReturnScope default_value_part85 =null;

		try {
			// PLSQLPrinter.g:756:5: ( ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> variable_declaration(name=$variable_name.sttype=$type_spec.stis_constant=$CONSTANT_VK != nullis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st))
			// PLSQLPrinter.g:756:10: ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? )
			{
			match(input,VARIABLE_DECLARE,FOLLOW_VARIABLE_DECLARE_in_variable_declaration7056); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_variable_name_in_variable_declaration7058);
			variable_name81=variable_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_variable_declaration7060);
			type_spec82=type_spec();
			state._fsp--;

			// PLSQLPrinter.g:756:53: ( CONSTANT_VK )?
			int alt170=2;
			int LA170_0 = input.LA(1);
			if ( (LA170_0==CONSTANT_VK) ) {
				alt170=1;
			}
			switch (alt170) {
				case 1 :
					// PLSQLPrinter.g:756:53: CONSTANT_VK
					{
					CONSTANT_VK83=(CommonTree)match(input,CONSTANT_VK,FOLLOW_CONSTANT_VK_in_variable_declaration7062); 
					}
					break;

			}

			// PLSQLPrinter.g:756:66: ( SQL92_RESERVED_NULL )?
			int alt171=2;
			int LA171_0 = input.LA(1);
			if ( (LA171_0==SQL92_RESERVED_NULL) ) {
				alt171=1;
			}
			switch (alt171) {
				case 1 :
					// PLSQLPrinter.g:756:66: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL84=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_variable_declaration7065); 
					}
					break;

			}

			// PLSQLPrinter.g:756:87: ( default_value_part )?
			int alt172=2;
			int LA172_0 = input.LA(1);
			if ( (LA172_0==DEFAULT_VALUE) ) {
				alt172=1;
			}
			switch (alt172) {
				case 1 :
					// PLSQLPrinter.g:756:87: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_variable_declaration7068);
					default_value_part85=default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 757:5: -> variable_declaration(name=$variable_name.sttype=$type_spec.stis_constant=$CONSTANT_VK != nullis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st)
			{
				retval.st = templateLib.getInstanceOf("variable_declaration",new STAttrMap().put("name", (variable_name81!=null?((StringTemplate)variable_name81.getTemplate()):null)).put("type", (type_spec82!=null?((StringTemplate)type_spec82.getTemplate()):null)).put("is_constant", CONSTANT_VK83 != null).put("is_not_null", SQL92_RESERVED_NULL84 != null).put("default_value_part", (default_value_part85!=null?((StringTemplate)default_value_part85.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "variable_declaration"


	public static class subtype_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subtype_declaration"
	// PLSQLPrinter.g:762:1: subtype_declaration : ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? ) -> subtype_declaration(name=$type_name.sttype_spec=$type_spec.strange=$subtype_range.stis_not_null=$SQL92_RESERVED_NULL != null);
	public final PLSQLPrinter.subtype_declaration_return subtype_declaration() throws RecognitionException {
		PLSQLPrinter.subtype_declaration_return retval = new PLSQLPrinter.subtype_declaration_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL89=null;
		TreeRuleReturnScope type_name86 =null;
		TreeRuleReturnScope type_spec87 =null;
		TreeRuleReturnScope subtype_range88 =null;

		try {
			// PLSQLPrinter.g:763:5: ( ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? ) -> subtype_declaration(name=$type_name.sttype_spec=$type_spec.strange=$subtype_range.stis_not_null=$SQL92_RESERVED_NULL != null))
			// PLSQLPrinter.g:763:10: ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? )
			{
			match(input,SUBTYPE_DECLARE,FOLLOW_SUBTYPE_DECLARE_in_subtype_declaration7153); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_subtype_declaration7155);
			type_name86=type_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_subtype_declaration7157);
			type_spec87=type_spec();
			state._fsp--;

			// PLSQLPrinter.g:763:48: ( SQL92_RESERVED_NULL )?
			int alt173=2;
			int LA173_0 = input.LA(1);
			if ( (LA173_0==SQL92_RESERVED_NULL) ) {
				alt173=1;
			}
			switch (alt173) {
				case 1 :
					// PLSQLPrinter.g:763:48: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL89=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_subtype_declaration7159); 
					}
					break;

			}

			// PLSQLPrinter.g:763:69: ( subtype_range )?
			int alt174=2;
			int LA174_0 = input.LA(1);
			if ( (LA174_0==RANGE_VK) ) {
				alt174=1;
			}
			switch (alt174) {
				case 1 :
					// PLSQLPrinter.g:763:69: subtype_range
					{
					pushFollow(FOLLOW_subtype_range_in_subtype_declaration7162);
					subtype_range88=subtype_range();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 764:5: -> subtype_declaration(name=$type_name.sttype_spec=$type_spec.strange=$subtype_range.stis_not_null=$SQL92_RESERVED_NULL != null)
			{
				retval.st = templateLib.getInstanceOf("subtype_declaration",new STAttrMap().put("name", (type_name86!=null?((StringTemplate)type_name86.getTemplate()):null)).put("type_spec", (type_spec87!=null?((StringTemplate)type_spec87.getTemplate()):null)).put("range", (subtype_range88!=null?((StringTemplate)subtype_range88.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL89 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subtype_declaration"


	public static class subtype_range_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subtype_range"
	// PLSQLPrinter.g:769:1: subtype_range : ^( RANGE_VK e1= expression e2= expression ) -> subtype_range(low_bound=$e1.sthigh_bound=$e2.st);
	public final PLSQLPrinter.subtype_range_return subtype_range() throws RecognitionException {
		PLSQLPrinter.subtype_range_return retval = new PLSQLPrinter.subtype_range_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope e1 =null;
		TreeRuleReturnScope e2 =null;

		try {
			// PLSQLPrinter.g:770:5: ( ^( RANGE_VK e1= expression e2= expression ) -> subtype_range(low_bound=$e1.sthigh_bound=$e2.st))
			// PLSQLPrinter.g:770:10: ^( RANGE_VK e1= expression e2= expression )
			{
			match(input,RANGE_VK,FOLLOW_RANGE_VK_in_subtype_range7240); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_subtype_range7244);
			e1=expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_subtype_range7248);
			e2=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 771:5: -> subtype_range(low_bound=$e1.sthigh_bound=$e2.st)
			{
				retval.st = templateLib.getInstanceOf("subtype_range",new STAttrMap().put("low_bound", (e1!=null?((StringTemplate)e1.getTemplate()):null)).put("high_bound", (e2!=null?((StringTemplate)e2.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subtype_range"


	public static class cursor_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_declaration"
	// PLSQLPrinter.g:775:1: cursor_declaration : ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS (parameters+= parameter_spec )* ) ) -> cursor_declaration(cursor_name=$cursor_name.stparameters=$parameterstype_spec=$type_spec.stselect_statement=$select_statement.st);
	public final PLSQLPrinter.cursor_declaration_return cursor_declaration() throws RecognitionException {
		PLSQLPrinter.cursor_declaration_return retval = new PLSQLPrinter.cursor_declaration_return();
		retval.start = input.LT(1);

		List<Object> list_parameters=null;
		TreeRuleReturnScope cursor_name90 =null;
		TreeRuleReturnScope type_spec91 =null;
		TreeRuleReturnScope select_statement92 =null;
		RuleReturnScope parameters = null;
		try {
			// PLSQLPrinter.g:776:5: ( ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS (parameters+= parameter_spec )* ) ) -> cursor_declaration(cursor_name=$cursor_name.stparameters=$parameterstype_spec=$type_spec.stselect_statement=$select_statement.st))
			// PLSQLPrinter.g:776:10: ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS (parameters+= parameter_spec )* ) )
			{
			match(input,CURSOR_DECLARE,FOLLOW_CURSOR_DECLARE_in_cursor_declaration7291); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_cursor_declaration7293);
			cursor_name90=cursor_name();
			state._fsp--;

			// PLSQLPrinter.g:776:39: ( type_spec )?
			int alt175=2;
			int LA175_0 = input.LA(1);
			if ( (LA175_0==CUSTOM_TYPE||LA175_0==INTERVAL_DATATYPE||LA175_0==NATIVE_DATATYPE) ) {
				alt175=1;
			}
			switch (alt175) {
				case 1 :
					// PLSQLPrinter.g:776:39: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_cursor_declaration7295);
					type_spec91=type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:776:50: ( select_statement )?
			int alt176=2;
			int LA176_0 = input.LA(1);
			if ( (LA176_0==SELECT_STATEMENT) ) {
				alt176=1;
			}
			switch (alt176) {
				case 1 :
					// PLSQLPrinter.g:776:50: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_cursor_declaration7298);
					select_statement92=select_statement();
					state._fsp--;

					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_cursor_declaration7302); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:776:91: (parameters+= parameter_spec )*
				loop177:
				while (true) {
					int alt177=2;
					int LA177_0 = input.LA(1);
					if ( (LA177_0==PARAMETER) ) {
						alt177=1;
					}

					switch (alt177) {
					case 1 :
						// PLSQLPrinter.g:776:91: parameters+= parameter_spec
						{
						pushFollow(FOLLOW_parameter_spec_in_cursor_declaration7306);
						parameters=parameter_spec();
						state._fsp--;

						if (list_parameters==null) list_parameters=new ArrayList<Object>();
						list_parameters.add(parameters.getTemplate());
						}
						break;

					default :
						break loop177;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 777:5: -> cursor_declaration(cursor_name=$cursor_name.stparameters=$parameterstype_spec=$type_spec.stselect_statement=$select_statement.st)
			{
				retval.st = templateLib.getInstanceOf("cursor_declaration",new STAttrMap().put("cursor_name", (cursor_name90!=null?((StringTemplate)cursor_name90.getTemplate()):null)).put("parameters", list_parameters).put("type_spec", (type_spec91!=null?((StringTemplate)type_spec91.getTemplate()):null)).put("select_statement", (select_statement92!=null?((StringTemplate)select_statement92.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_declaration"


	public static class parameter_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parameter_spec"
	// PLSQLPrinter.g:782:1: parameter_spec : ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) -> parameter_spec(parameter_name=$parameter_name.sttype_spec=$type_spec.stdefault_value_part=$default_value_part.st);
	public final PLSQLPrinter.parameter_spec_return parameter_spec() throws RecognitionException {
		PLSQLPrinter.parameter_spec_return retval = new PLSQLPrinter.parameter_spec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope parameter_name93 =null;
		TreeRuleReturnScope type_spec94 =null;
		TreeRuleReturnScope default_value_part95 =null;

		try {
			// PLSQLPrinter.g:783:5: ( ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) -> parameter_spec(parameter_name=$parameter_name.sttype_spec=$type_spec.stdefault_value_part=$default_value_part.st))
			// PLSQLPrinter.g:783:10: ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_parameter_spec7382); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_parameter_spec7384);
			parameter_name93=parameter_name();
			state._fsp--;

			// PLSQLPrinter.g:783:37: ( type_spec )?
			int alt178=2;
			int LA178_0 = input.LA(1);
			if ( (LA178_0==CUSTOM_TYPE||LA178_0==INTERVAL_DATATYPE||LA178_0==NATIVE_DATATYPE) ) {
				alt178=1;
			}
			switch (alt178) {
				case 1 :
					// PLSQLPrinter.g:783:37: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_parameter_spec7386);
					type_spec94=type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:783:48: ( default_value_part )?
			int alt179=2;
			int LA179_0 = input.LA(1);
			if ( (LA179_0==DEFAULT_VALUE) ) {
				alt179=1;
			}
			switch (alt179) {
				case 1 :
					// PLSQLPrinter.g:783:48: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_parameter_spec7389);
					default_value_part95=default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 784:5: -> parameter_spec(parameter_name=$parameter_name.sttype_spec=$type_spec.stdefault_value_part=$default_value_part.st)
			{
				retval.st = templateLib.getInstanceOf("parameter_spec",new STAttrMap().put("parameter_name", (parameter_name93!=null?((StringTemplate)parameter_name93.getTemplate()):null)).put("type_spec", (type_spec94!=null?((StringTemplate)type_spec94.getTemplate()):null)).put("default_value_part", (default_value_part95!=null?((StringTemplate)default_value_part95.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter_spec"


	public static class exception_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_declaration"
	// PLSQLPrinter.g:789:1: exception_declaration : ^( EXCEPTION_DECLARE exception_name ) -> exception_declaration(name=$exception_name.st);
	public final PLSQLPrinter.exception_declaration_return exception_declaration() throws RecognitionException {
		PLSQLPrinter.exception_declaration_return retval = new PLSQLPrinter.exception_declaration_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope exception_name96 =null;

		try {
			// PLSQLPrinter.g:790:5: ( ^( EXCEPTION_DECLARE exception_name ) -> exception_declaration(name=$exception_name.st))
			// PLSQLPrinter.g:790:10: ^( EXCEPTION_DECLARE exception_name )
			{
			match(input,EXCEPTION_DECLARE,FOLLOW_EXCEPTION_DECLARE_in_exception_declaration7459); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_exception_name_in_exception_declaration7461);
			exception_name96=exception_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 791:5: -> exception_declaration(name=$exception_name.st)
			{
				retval.st = templateLib.getInstanceOf("exception_declaration",new STAttrMap().put("name", (exception_name96!=null?((StringTemplate)exception_name96.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_declaration"


	public static class pragma_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_declaration"
	// PLSQLPrinter.g:794:1: pragma_declaration : ^( PRAGMA_DECLARE pragma_declaration_impl ) -> pragma_declaration(impl=$pragma_declaration_impl.st);
	public final PLSQLPrinter.pragma_declaration_return pragma_declaration() throws RecognitionException {
		PLSQLPrinter.pragma_declaration_return retval = new PLSQLPrinter.pragma_declaration_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope pragma_declaration_impl97 =null;

		try {
			// PLSQLPrinter.g:795:5: ( ^( PRAGMA_DECLARE pragma_declaration_impl ) -> pragma_declaration(impl=$pragma_declaration_impl.st))
			// PLSQLPrinter.g:795:10: ^( PRAGMA_DECLARE pragma_declaration_impl )
			{
			match(input,PRAGMA_DECLARE,FOLLOW_PRAGMA_DECLARE_in_pragma_declaration7511); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_pragma_declaration_impl_in_pragma_declaration7513);
			pragma_declaration_impl97=pragma_declaration_impl();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 796:5: -> pragma_declaration(impl=$pragma_declaration_impl.st)
			{
				retval.st = templateLib.getInstanceOf("pragma_declaration",new STAttrMap().put("impl", (pragma_declaration_impl97!=null?((StringTemplate)pragma_declaration_impl97.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_declaration"


	public static class pragma_declaration_impl_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_declaration_impl"
	// PLSQLPrinter.g:799:1: pragma_declaration_impl : ( SERIALLY_REUSABLE_VK -> pragma_declaration_impl_serially_reusable(| AUTONOMOUS_TRANSACTION_VK -> pragma_declaration_impl_serially_autonomous_transaction(| ^( EXCEPTION_INIT_VK exception_name constant ) -> pragma_declaration_impl_serially_exception_init(name=$exception_name.stnumeric=$constant.st)| ^( INLINE_VK id expression ) -> pragma_declaration_impl_serially_inline(id=$id.stexpression=$expression.st)| ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT |firstId= id ) (rest+= id )+ ) -> pragma_declaration_impl_serially_restrict_references(arg1=firstStrestArgs=$rest));
	public final PLSQLPrinter.pragma_declaration_impl_return pragma_declaration_impl() throws RecognitionException {
		PLSQLPrinter.pragma_declaration_impl_return retval = new PLSQLPrinter.pragma_declaration_impl_return();
		retval.start = input.LT(1);

		List<Object> list_rest=null;
		TreeRuleReturnScope firstId =null;
		TreeRuleReturnScope exception_name98 =null;
		TreeRuleReturnScope constant99 =null;
		TreeRuleReturnScope id100 =null;
		TreeRuleReturnScope expression101 =null;
		RuleReturnScope rest = null;
		 StringTemplate firstSt = null; 
		try {
			// PLSQLPrinter.g:801:5: ( SERIALLY_REUSABLE_VK -> pragma_declaration_impl_serially_reusable(| AUTONOMOUS_TRANSACTION_VK -> pragma_declaration_impl_serially_autonomous_transaction(| ^( EXCEPTION_INIT_VK exception_name constant ) -> pragma_declaration_impl_serially_exception_init(name=$exception_name.stnumeric=$constant.st)| ^( INLINE_VK id expression ) -> pragma_declaration_impl_serially_inline(id=$id.stexpression=$expression.st)| ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT |firstId= id ) (rest+= id )+ ) -> pragma_declaration_impl_serially_restrict_references(arg1=firstStrestArgs=$rest))
			int alt182=5;
			switch ( input.LA(1) ) {
			case SERIALLY_REUSABLE_VK:
				{
				alt182=1;
				}
				break;
			case AUTONOMOUS_TRANSACTION_VK:
				{
				alt182=2;
				}
				break;
			case EXCEPTION_INIT_VK:
				{
				alt182=3;
				}
				break;
			case INLINE_VK:
				{
				alt182=4;
				}
				break;
			case RESTRICT_REFERENCES_VK:
				{
				alt182=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 182, 0, input);
				throw nvae;
			}
			switch (alt182) {
				case 1 :
					// PLSQLPrinter.g:801:10: SERIALLY_REUSABLE_VK
					{
					match(input,SERIALLY_REUSABLE_VK,FOLLOW_SERIALLY_REUSABLE_VK_in_pragma_declaration_impl7558); 
					// TEMPLATE REWRITE
					// 801:31: -> pragma_declaration_impl_serially_reusable(
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_reusable");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:802:16: AUTONOMOUS_TRANSACTION_VK
					{
					match(input,AUTONOMOUS_TRANSACTION_VK,FOLLOW_AUTONOMOUS_TRANSACTION_VK_in_pragma_declaration_impl7581); 
					// TEMPLATE REWRITE
					// 802:42: -> pragma_declaration_impl_serially_autonomous_transaction(
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_autonomous_transaction");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:803:15: ^( EXCEPTION_INIT_VK exception_name constant )
					{
					match(input,EXCEPTION_INIT_VK,FOLLOW_EXCEPTION_INIT_VK_in_pragma_declaration_impl7604); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_exception_name_in_pragma_declaration_impl7606);
					exception_name98=exception_name();
					state._fsp--;

					pushFollow(FOLLOW_constant_in_pragma_declaration_impl7608);
					constant99=constant();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 804:10: -> pragma_declaration_impl_serially_exception_init(name=$exception_name.stnumeric=$constant.st)
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_exception_init",new STAttrMap().put("name", (exception_name98!=null?((StringTemplate)exception_name98.getTemplate()):null)).put("numeric", (constant99!=null?((StringTemplate)constant99.getTemplate()):null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:805:15: ^( INLINE_VK id expression )
					{
					match(input,INLINE_VK,FOLLOW_INLINE_VK_in_pragma_declaration_impl7651); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_id_in_pragma_declaration_impl7653);
					id100=id();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_pragma_declaration_impl7655);
					expression101=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 806:10: -> pragma_declaration_impl_serially_inline(id=$id.stexpression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_inline",new STAttrMap().put("id", (id100!=null?((StringTemplate)id100.getTemplate()):null)).put("expression", (expression101!=null?((StringTemplate)expression101.getTemplate()):null)));
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:807:15: ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT |firstId= id ) (rest+= id )+ )
					{
					match(input,RESTRICT_REFERENCES_VK,FOLLOW_RESTRICT_REFERENCES_VK_in_pragma_declaration_impl7698); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:808:17: ( SQL92_RESERVED_DEFAULT |firstId= id )
					int alt180=2;
					int LA180_0 = input.LA(1);
					if ( (LA180_0==SQL92_RESERVED_DEFAULT) ) {
						alt180=1;
					}
					else if ( (LA180_0==CHAR_SET_NAME||LA180_0==ID) ) {
						alt180=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 180, 0, input);
						throw nvae;
					}

					switch (alt180) {
						case 1 :
							// PLSQLPrinter.g:809:19: SQL92_RESERVED_DEFAULT
							{
							match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_declaration_impl7736); 
							 firstSt = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "default")); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:810:21: firstId= id
							{
							pushFollow(FOLLOW_id_in_pragma_declaration_impl7762);
							firstId=id();
							state._fsp--;

							 firstSt = (firstId!=null?((StringTemplate)firstId.getTemplate()):null); 
							}
							break;

					}

					// PLSQLPrinter.g:812:21: (rest+= id )+
					int cnt181=0;
					loop181:
					while (true) {
						int alt181=2;
						int LA181_0 = input.LA(1);
						if ( (LA181_0==CHAR_SET_NAME||LA181_0==ID) ) {
							alt181=1;
						}

						switch (alt181) {
						case 1 :
							// PLSQLPrinter.g:812:21: rest+= id
							{
							pushFollow(FOLLOW_id_in_pragma_declaration_impl7802);
							rest=id();
							state._fsp--;

							if (list_rest==null) list_rest=new ArrayList<Object>();
							list_rest.add(rest.getTemplate());
							}
							break;

						default :
							if ( cnt181 >= 1 ) break loop181;
							EarlyExitException eee = new EarlyExitException(181, input);
							throw eee;
						}
						cnt181++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 814:10: -> pragma_declaration_impl_serially_restrict_references(arg1=firstStrestArgs=$rest)
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_restrict_references",new STAttrMap().put("arg1", firstSt).put("restArgs", list_rest));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_declaration_impl"


	public static class record_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_declaration"
	// PLSQLPrinter.g:818:1: record_declaration : ( record_type_dec -> { $record_type_dec.st }| record_var_dec -> { $record_var_dec.st });
	public final PLSQLPrinter.record_declaration_return record_declaration() throws RecognitionException {
		PLSQLPrinter.record_declaration_return retval = new PLSQLPrinter.record_declaration_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope record_type_dec102 =null;
		TreeRuleReturnScope record_var_dec103 =null;

		try {
			// PLSQLPrinter.g:819:5: ( record_type_dec -> { $record_type_dec.st }| record_var_dec -> { $record_var_dec.st })
			int alt183=2;
			int LA183_0 = input.LA(1);
			if ( (LA183_0==RECORD_TYPE_DECLARE) ) {
				alt183=1;
			}
			else if ( (LA183_0==RECORD_VAR_DECLARE) ) {
				alt183=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 183, 0, input);
				throw nvae;
			}

			switch (alt183) {
				case 1 :
					// PLSQLPrinter.g:819:10: record_type_dec
					{
					pushFollow(FOLLOW_record_type_dec_in_record_declaration7868);
					record_type_dec102=record_type_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 819:26: -> { $record_type_dec.st }
					{
						retval.st =  (record_type_dec102!=null?((StringTemplate)record_type_dec102.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:820:10: record_var_dec
					{
					pushFollow(FOLLOW_record_var_dec_in_record_declaration7883);
					record_var_dec103=record_var_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 820:25: -> { $record_var_dec.st }
					{
						retval.st =  (record_var_dec103!=null?((StringTemplate)record_var_dec103.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_declaration"


	public static class record_type_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_type_dec"
	// PLSQLPrinter.g:826:1: record_type_dec : ( record_type_dec_record -> { $record_type_dec_record.st }| record_type_dec_refcursor -> { $record_type_dec_refcursor.st });
	public final PLSQLPrinter.record_type_dec_return record_type_dec() throws RecognitionException {
		PLSQLPrinter.record_type_dec_return retval = new PLSQLPrinter.record_type_dec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope record_type_dec_record104 =null;
		TreeRuleReturnScope record_type_dec_refcursor105 =null;

		try {
			// PLSQLPrinter.g:827:5: ( record_type_dec_record -> { $record_type_dec_record.st }| record_type_dec_refcursor -> { $record_type_dec_refcursor.st })
			int alt184=2;
			alt184 = dfa184.predict(input);
			switch (alt184) {
				case 1 :
					// PLSQLPrinter.g:827:10: record_type_dec_record
					{
					pushFollow(FOLLOW_record_type_dec_record_in_record_type_dec7910);
					record_type_dec_record104=record_type_dec_record();
					state._fsp--;

					// TEMPLATE REWRITE
					// 827:33: -> { $record_type_dec_record.st }
					{
						retval.st =  (record_type_dec_record104!=null?((StringTemplate)record_type_dec_record104.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:828:10: record_type_dec_refcursor
					{
					pushFollow(FOLLOW_record_type_dec_refcursor_in_record_type_dec7925);
					record_type_dec_refcursor105=record_type_dec_refcursor();
					state._fsp--;

					// TEMPLATE REWRITE
					// 828:36: -> { $record_type_dec_refcursor.st }
					{
						retval.st =  (record_type_dec_refcursor105!=null?((StringTemplate)record_type_dec_refcursor105.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_type_dec"


	public static class record_type_dec_record_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_type_dec_record"
	// PLSQLPrinter.g:831:1: record_type_dec_record : ^( RECORD_TYPE_DECLARE type_name ( ^( FIELDS (fields+= field_spec )* ) )? ) -> record_type_dec_record(name=$type_name.stfield_specs=$fields);
	public final PLSQLPrinter.record_type_dec_record_return record_type_dec_record() throws RecognitionException {
		PLSQLPrinter.record_type_dec_record_return retval = new PLSQLPrinter.record_type_dec_record_return();
		retval.start = input.LT(1);

		List<Object> list_fields=null;
		TreeRuleReturnScope type_name106 =null;
		RuleReturnScope fields = null;
		try {
			// PLSQLPrinter.g:832:5: ( ^( RECORD_TYPE_DECLARE type_name ( ^( FIELDS (fields+= field_spec )* ) )? ) -> record_type_dec_record(name=$type_name.stfield_specs=$fields))
			// PLSQLPrinter.g:832:10: ^( RECORD_TYPE_DECLARE type_name ( ^( FIELDS (fields+= field_spec )* ) )? )
			{
			match(input,RECORD_TYPE_DECLARE,FOLLOW_RECORD_TYPE_DECLARE_in_record_type_dec_record7954); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_record_type_dec_record7956);
			type_name106=type_name();
			state._fsp--;

			// PLSQLPrinter.g:832:42: ( ^( FIELDS (fields+= field_spec )* ) )?
			int alt186=2;
			int LA186_0 = input.LA(1);
			if ( (LA186_0==FIELDS) ) {
				alt186=1;
			}
			switch (alt186) {
				case 1 :
					// PLSQLPrinter.g:832:43: ^( FIELDS (fields+= field_spec )* )
					{
					match(input,FIELDS,FOLLOW_FIELDS_in_record_type_dec_record7960); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:832:58: (fields+= field_spec )*
						loop185:
						while (true) {
							int alt185=2;
							int LA185_0 = input.LA(1);
							if ( (LA185_0==FIELD_SPEC) ) {
								alt185=1;
							}

							switch (alt185) {
							case 1 :
								// PLSQLPrinter.g:832:58: fields+= field_spec
								{
								pushFollow(FOLLOW_field_spec_in_record_type_dec_record7964);
								fields=field_spec();
								state._fsp--;

								if (list_fields==null) list_fields=new ArrayList<Object>();
								list_fields.add(fields.getTemplate());
								}
								break;

							default :
								break loop185;
							}
						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 833:5: -> record_type_dec_record(name=$type_name.stfield_specs=$fields)
			{
				retval.st = templateLib.getInstanceOf("record_type_dec_record",new STAttrMap().put("name", (type_name106!=null?((StringTemplate)type_name106.getTemplate()):null)).put("field_specs", list_fields));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_type_dec_record"


	public static class record_type_dec_refcursor_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_type_dec_refcursor"
	// PLSQLPrinter.g:836:1: record_type_dec_refcursor : ^( RECORD_TYPE_DECLARE type_name REF_VK ( type_spec )? ) -> record_type_dec_refcursor(name=$type_name.sttype_spec=$type_spec.st);
	public final PLSQLPrinter.record_type_dec_refcursor_return record_type_dec_refcursor() throws RecognitionException {
		PLSQLPrinter.record_type_dec_refcursor_return retval = new PLSQLPrinter.record_type_dec_refcursor_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope type_name107 =null;
		TreeRuleReturnScope type_spec108 =null;

		try {
			// PLSQLPrinter.g:837:5: ( ^( RECORD_TYPE_DECLARE type_name REF_VK ( type_spec )? ) -> record_type_dec_refcursor(name=$type_name.sttype_spec=$type_spec.st))
			// PLSQLPrinter.g:837:10: ^( RECORD_TYPE_DECLARE type_name REF_VK ( type_spec )? )
			{
			match(input,RECORD_TYPE_DECLARE,FOLLOW_RECORD_TYPE_DECLARE_in_record_type_dec_refcursor8014); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_record_type_dec_refcursor8016);
			type_name107=type_name();
			state._fsp--;

			match(input,REF_VK,FOLLOW_REF_VK_in_record_type_dec_refcursor8018); 
			// PLSQLPrinter.g:837:49: ( type_spec )?
			int alt187=2;
			int LA187_0 = input.LA(1);
			if ( (LA187_0==CUSTOM_TYPE||LA187_0==INTERVAL_DATATYPE||LA187_0==NATIVE_DATATYPE) ) {
				alt187=1;
			}
			switch (alt187) {
				case 1 :
					// PLSQLPrinter.g:837:49: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_record_type_dec_refcursor8020);
					type_spec108=type_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 838:5: -> record_type_dec_refcursor(name=$type_name.sttype_spec=$type_spec.st)
			{
				retval.st = templateLib.getInstanceOf("record_type_dec_refcursor",new STAttrMap().put("name", (type_name107!=null?((StringTemplate)type_name107.getTemplate()):null)).put("type_spec", (type_spec108!=null?((StringTemplate)type_spec108.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_type_dec_refcursor"


	public static class field_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "field_spec"
	// PLSQLPrinter.g:841:1: field_spec : ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> field_spec(name=$column_name.sttype_spec=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st);
	public final PLSQLPrinter.field_spec_return field_spec() throws RecognitionException {
		PLSQLPrinter.field_spec_return retval = new PLSQLPrinter.field_spec_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL111=null;
		TreeRuleReturnScope column_name109 =null;
		TreeRuleReturnScope type_spec110 =null;
		TreeRuleReturnScope default_value_part112 =null;

		try {
			// PLSQLPrinter.g:842:5: ( ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> field_spec(name=$column_name.sttype_spec=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st))
			// PLSQLPrinter.g:842:10: ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? )
			{
			match(input,FIELD_SPEC,FOLLOW_FIELD_SPEC_in_field_spec8063); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_column_name_in_field_spec8065);
			column_name109=column_name();
			state._fsp--;

			// PLSQLPrinter.g:842:35: ( type_spec )?
			int alt188=2;
			int LA188_0 = input.LA(1);
			if ( (LA188_0==CUSTOM_TYPE||LA188_0==INTERVAL_DATATYPE||LA188_0==NATIVE_DATATYPE) ) {
				alt188=1;
			}
			switch (alt188) {
				case 1 :
					// PLSQLPrinter.g:842:35: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_field_spec8067);
					type_spec110=type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:842:46: ( SQL92_RESERVED_NULL )?
			int alt189=2;
			int LA189_0 = input.LA(1);
			if ( (LA189_0==SQL92_RESERVED_NULL) ) {
				alt189=1;
			}
			switch (alt189) {
				case 1 :
					// PLSQLPrinter.g:842:46: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL111=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_field_spec8070); 
					}
					break;

			}

			// PLSQLPrinter.g:842:67: ( default_value_part )?
			int alt190=2;
			int LA190_0 = input.LA(1);
			if ( (LA190_0==DEFAULT_VALUE) ) {
				alt190=1;
			}
			switch (alt190) {
				case 1 :
					// PLSQLPrinter.g:842:67: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_field_spec8073);
					default_value_part112=default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 843:5: -> field_spec(name=$column_name.sttype_spec=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st)
			{
				retval.st = templateLib.getInstanceOf("field_spec",new STAttrMap().put("name", (column_name109!=null?((StringTemplate)column_name109.getTemplate()):null)).put("type_spec", (type_spec110!=null?((StringTemplate)type_spec110.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL111 != null).put("default_value_part", (default_value_part112!=null?((StringTemplate)default_value_part112.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "field_spec"


	public static class record_var_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_var_dec"
	// PLSQLPrinter.g:848:1: record_var_dec : ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) ) -> template( \"not implemented: record_var_dec\";
	public final PLSQLPrinter.record_var_dec_return record_var_dec() throws RecognitionException {
		PLSQLPrinter.record_var_dec_return retval = new PLSQLPrinter.record_var_dec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:849:5: ( ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) ) -> template( \"not implemented: record_var_dec\")
			// PLSQLPrinter.g:849:10: ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) )
			{
			match(input,RECORD_VAR_DECLARE,FOLLOW_RECORD_VAR_DECLARE_in_record_var_dec8146); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_record_name_in_record_var_dec8148);
			record_name();
			state._fsp--;

			pushFollow(FOLLOW_type_name_in_record_var_dec8150);
			type_name();
			state._fsp--;

			// PLSQLPrinter.g:849:53: ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )
			int alt191=2;
			int LA191_0 = input.LA(1);
			if ( (LA191_0==PERCENT_ROWTYPE_VK) ) {
				alt191=1;
			}
			else if ( (LA191_0==PERCENT_TYPE_VK) ) {
				alt191=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 191, 0, input);
				throw nvae;
			}

			switch (alt191) {
				case 1 :
					// PLSQLPrinter.g:849:54: PERCENT_ROWTYPE_VK
					{
					match(input,PERCENT_ROWTYPE_VK,FOLLOW_PERCENT_ROWTYPE_VK_in_record_var_dec8153); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:849:73: PERCENT_TYPE_VK
					{
					match(input,PERCENT_TYPE_VK,FOLLOW_PERCENT_TYPE_VK_in_record_var_dec8155); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 850:5: -> template( \"not implemented: record_var_dec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: record_var_dec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_var_dec"


	public static class table_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_declaration"
	// PLSQLPrinter.g:855:1: table_declaration : ( table_type_dec -> { $table_type_dec.st }| table_var_dec -> { $table_var_dec.st });
	public final PLSQLPrinter.table_declaration_return table_declaration() throws RecognitionException {
		PLSQLPrinter.table_declaration_return retval = new PLSQLPrinter.table_declaration_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope table_type_dec113 =null;
		TreeRuleReturnScope table_var_dec114 =null;

		try {
			// PLSQLPrinter.g:856:5: ( table_type_dec -> { $table_type_dec.st }| table_var_dec -> { $table_var_dec.st })
			int alt192=2;
			int LA192_0 = input.LA(1);
			if ( (LA192_0==TABLE_TYPE_DECLARE) ) {
				alt192=1;
			}
			else if ( (LA192_0==TABLE_VAR_DECLARE) ) {
				alt192=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 192, 0, input);
				throw nvae;
			}

			switch (alt192) {
				case 1 :
					// PLSQLPrinter.g:856:10: table_type_dec
					{
					pushFollow(FOLLOW_table_type_dec_in_table_declaration8193);
					table_type_dec113=table_type_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 856:25: -> { $table_type_dec.st }
					{
						retval.st =  (table_type_dec113!=null?((StringTemplate)table_type_dec113.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:857:10: table_var_dec
					{
					pushFollow(FOLLOW_table_var_dec_in_table_declaration8208);
					table_var_dec114=table_var_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 857:24: -> { $table_var_dec.st }
					{
						retval.st =  (table_var_dec114!=null?((StringTemplate)table_var_dec114.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_declaration"


	public static class table_type_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_type_dec"
	// PLSQLPrinter.g:860:1: table_type_dec : ^( TABLE_TYPE_DECLARE type_name table_type_dec_impl ) -> table_type_dec(name=$type_name.stimpl=$table_type_dec_impl.st);
	public final PLSQLPrinter.table_type_dec_return table_type_dec() throws RecognitionException {
		PLSQLPrinter.table_type_dec_return retval = new PLSQLPrinter.table_type_dec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope type_name115 =null;
		TreeRuleReturnScope table_type_dec_impl116 =null;

		try {
			// PLSQLPrinter.g:861:5: ( ^( TABLE_TYPE_DECLARE type_name table_type_dec_impl ) -> table_type_dec(name=$type_name.stimpl=$table_type_dec_impl.st))
			// PLSQLPrinter.g:861:10: ^( TABLE_TYPE_DECLARE type_name table_type_dec_impl )
			{
			match(input,TABLE_TYPE_DECLARE,FOLLOW_TABLE_TYPE_DECLARE_in_table_type_dec8233); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_table_type_dec8235);
			type_name115=type_name();
			state._fsp--;

			pushFollow(FOLLOW_table_type_dec_impl_in_table_type_dec8237);
			table_type_dec_impl116=table_type_dec_impl();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 862:5: -> table_type_dec(name=$type_name.stimpl=$table_type_dec_impl.st)
			{
				retval.st = templateLib.getInstanceOf("table_type_dec",new STAttrMap().put("name", (type_name115!=null?((StringTemplate)type_name115.getTemplate()):null)).put("impl", (table_type_dec_impl116!=null?((StringTemplate)table_type_dec_impl116.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_type_dec"


	public static class table_type_dec_impl_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_type_dec_impl"
	// PLSQLPrinter.g:865:1: table_type_dec_impl : ( table_type_dec_table_of -> { $table_type_dec_table_of.st }| varray_type_def -> { $varray_type_def.st });
	public final PLSQLPrinter.table_type_dec_impl_return table_type_dec_impl() throws RecognitionException {
		PLSQLPrinter.table_type_dec_impl_return retval = new PLSQLPrinter.table_type_dec_impl_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope table_type_dec_table_of117 =null;
		TreeRuleReturnScope varray_type_def118 =null;

		try {
			// PLSQLPrinter.g:866:5: ( table_type_dec_table_of -> { $table_type_dec_table_of.st }| varray_type_def -> { $varray_type_def.st })
			int alt193=2;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_NULL:
				{
				int LA193_1 = input.LA(2);
				if ( (LA193_1==SQL92_RESERVED_TABLE) ) {
					alt193=1;
				}
				else if ( (LA193_1==VARR_ARRAY_DEF) ) {
					alt193=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 193, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_TABLE:
				{
				alt193=1;
				}
				break;
			case VARR_ARRAY_DEF:
				{
				alt193=2;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 193, 0, input);
				throw nvae;
			}
			switch (alt193) {
				case 1 :
					// PLSQLPrinter.g:866:11: table_type_dec_table_of
					{
					pushFollow(FOLLOW_table_type_dec_table_of_in_table_type_dec_impl8283);
					table_type_dec_table_of117=table_type_dec_table_of();
					state._fsp--;

					// TEMPLATE REWRITE
					// 866:35: -> { $table_type_dec_table_of.st }
					{
						retval.st =  (table_type_dec_table_of117!=null?((StringTemplate)table_type_dec_table_of117.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:867:11: varray_type_def
					{
					pushFollow(FOLLOW_varray_type_def_in_table_type_dec_impl8299);
					varray_type_def118=varray_type_def();
					state._fsp--;

					// TEMPLATE REWRITE
					// 867:27: -> { $varray_type_def.st }
					{
						retval.st =  (varray_type_def118!=null?((StringTemplate)varray_type_def118.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_type_dec_impl"


	public static class table_type_dec_table_of_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_type_dec_table_of"
	// PLSQLPrinter.g:870:1: table_type_dec_table_of : ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) -> table_type_dec_table_of(type_spec=$type_spec.sttable_indexed_by_part=$table_indexed_by_part.stis_not_null=$SQL92_RESERVED_NULL != null);
	public final PLSQLPrinter.table_type_dec_table_of_return table_type_dec_table_of() throws RecognitionException {
		PLSQLPrinter.table_type_dec_table_of_return retval = new PLSQLPrinter.table_type_dec_table_of_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL121=null;
		TreeRuleReturnScope type_spec119 =null;
		TreeRuleReturnScope table_indexed_by_part120 =null;

		try {
			// PLSQLPrinter.g:871:5: ( ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) -> table_type_dec_table_of(type_spec=$type_spec.sttable_indexed_by_part=$table_indexed_by_part.stis_not_null=$SQL92_RESERVED_NULL != null))
			// PLSQLPrinter.g:871:10: ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? )
			{
			// PLSQLPrinter.g:871:10: ( SQL92_RESERVED_NULL )?
			int alt194=2;
			int LA194_0 = input.LA(1);
			if ( (LA194_0==SQL92_RESERVED_NULL) ) {
				alt194=1;
			}
			switch (alt194) {
				case 1 :
					// PLSQLPrinter.g:871:10: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL121=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_table_type_dec_table_of8327); 
					}
					break;

			}

			match(input,SQL92_RESERVED_TABLE,FOLLOW_SQL92_RESERVED_TABLE_in_table_type_dec_table_of8331); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_table_type_dec_table_of8333);
			type_spec119=type_spec();
			state._fsp--;

			// PLSQLPrinter.g:871:64: ( table_indexed_by_part )?
			int alt195=2;
			int LA195_0 = input.LA(1);
			if ( (LA195_0==INDEXED_BY) ) {
				alt195=1;
			}
			switch (alt195) {
				case 1 :
					// PLSQLPrinter.g:871:64: table_indexed_by_part
					{
					pushFollow(FOLLOW_table_indexed_by_part_in_table_type_dec_table_of8335);
					table_indexed_by_part120=table_indexed_by_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 872:5: -> table_type_dec_table_of(type_spec=$type_spec.sttable_indexed_by_part=$table_indexed_by_part.stis_not_null=$SQL92_RESERVED_NULL != null)
			{
				retval.st = templateLib.getInstanceOf("table_type_dec_table_of",new STAttrMap().put("type_spec", (type_spec119!=null?((StringTemplate)type_spec119.getTemplate()):null)).put("table_indexed_by_part", (table_indexed_by_part120!=null?((StringTemplate)table_indexed_by_part120.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL121 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_type_dec_table_of"


	public static class table_indexed_by_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_indexed_by_part"
	// PLSQLPrinter.g:876:1: table_indexed_by_part : ^( INDEXED_BY type_spec ) -> table_indexed_by_part(type_spec=$type_spec.st);
	public final PLSQLPrinter.table_indexed_by_part_return table_indexed_by_part() throws RecognitionException {
		PLSQLPrinter.table_indexed_by_part_return retval = new PLSQLPrinter.table_indexed_by_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope type_spec122 =null;

		try {
			// PLSQLPrinter.g:877:5: ( ^( INDEXED_BY type_spec ) -> table_indexed_by_part(type_spec=$type_spec.st))
			// PLSQLPrinter.g:877:10: ^( INDEXED_BY type_spec )
			{
			match(input,INDEXED_BY,FOLLOW_INDEXED_BY_in_table_indexed_by_part8396); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_table_indexed_by_part8398);
			type_spec122=type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 878:5: -> table_indexed_by_part(type_spec=$type_spec.st)
			{
				retval.st = templateLib.getInstanceOf("table_indexed_by_part",new STAttrMap().put("type_spec", (type_spec122!=null?((StringTemplate)type_spec122.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_indexed_by_part"


	public static class varray_type_def_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "varray_type_def"
	// PLSQLPrinter.g:881:1: varray_type_def : ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec ) -> varray_type_def(limit_expression=$expression.stelement_type=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != null);
	public final PLSQLPrinter.varray_type_def_return varray_type_def() throws RecognitionException {
		PLSQLPrinter.varray_type_def_return retval = new PLSQLPrinter.varray_type_def_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL125=null;
		TreeRuleReturnScope expression123 =null;
		TreeRuleReturnScope type_spec124 =null;

		try {
			// PLSQLPrinter.g:882:5: ( ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec ) -> varray_type_def(limit_expression=$expression.stelement_type=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != null))
			// PLSQLPrinter.g:882:10: ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec )
			{
			// PLSQLPrinter.g:882:10: ( SQL92_RESERVED_NULL )?
			int alt196=2;
			int LA196_0 = input.LA(1);
			if ( (LA196_0==SQL92_RESERVED_NULL) ) {
				alt196=1;
			}
			switch (alt196) {
				case 1 :
					// PLSQLPrinter.g:882:10: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL125=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_varray_type_def8434); 
					}
					break;

			}

			match(input,VARR_ARRAY_DEF,FOLLOW_VARR_ARRAY_DEF_in_varray_type_def8438); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_varray_type_def8440);
			expression123=expression();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_varray_type_def8442);
			type_spec124=type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 883:5: -> varray_type_def(limit_expression=$expression.stelement_type=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != null)
			{
				retval.st = templateLib.getInstanceOf("varray_type_def",new STAttrMap().put("limit_expression", (expression123!=null?((StringTemplate)expression123.getTemplate()):null)).put("element_type", (type_spec124!=null?((StringTemplate)type_spec124.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL125 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "varray_type_def"


	public static class table_var_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_var_dec"
	// PLSQLPrinter.g:886:1: table_var_dec : ^( TABLE_VAR_DECLARE table_var_name type_spec ) -> template( \"not implemented: table_var_dec\";
	public final PLSQLPrinter.table_var_dec_return table_var_dec() throws RecognitionException {
		PLSQLPrinter.table_var_dec_return retval = new PLSQLPrinter.table_var_dec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:887:5: ( ^( TABLE_VAR_DECLARE table_var_name type_spec ) -> template( \"not implemented: table_var_dec\")
			// PLSQLPrinter.g:887:10: ^( TABLE_VAR_DECLARE table_var_name type_spec )
			{
			match(input,TABLE_VAR_DECLARE,FOLLOW_TABLE_VAR_DECLARE_in_table_var_dec8489); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_table_var_name_in_table_var_dec8491);
			table_var_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_table_var_dec8493);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 888:5: -> template( \"not implemented: table_var_dec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: table_var_dec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_var_dec"


	public static class seq_of_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "seq_of_statements"
	// PLSQLPrinter.g:895:1: seq_of_statements : ^( STATEMENTS (statements+= statement |statements+= labeled_statement )+ ) -> seq_of_statements(statements=$statements);
	public final PLSQLPrinter.seq_of_statements_return seq_of_statements() throws RecognitionException {
		PLSQLPrinter.seq_of_statements_return retval = new PLSQLPrinter.seq_of_statements_return();
		retval.start = input.LT(1);

		List<Object> list_statements=null;
		RuleReturnScope statements = null;
		try {
			// PLSQLPrinter.g:896:5: ( ^( STATEMENTS (statements+= statement |statements+= labeled_statement )+ ) -> seq_of_statements(statements=$statements))
			// PLSQLPrinter.g:896:11: ^( STATEMENTS (statements+= statement |statements+= labeled_statement )+ )
			{
			match(input,STATEMENTS,FOLLOW_STATEMENTS_in_seq_of_statements8534); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:896:24: (statements+= statement |statements+= labeled_statement )+
			int cnt197=0;
			loop197:
			while (true) {
				int alt197=3;
				int LA197_0 = input.LA(1);
				if ( (LA197_0==PLSQL_RESERVED_IF||LA197_0==PLSQL_RESERVED_LOCK||LA197_0==SQL92_RESERVED_DELETE||LA197_0==SQL92_RESERVED_FETCH||LA197_0==SQL92_RESERVED_GOTO||LA197_0==SQL92_RESERVED_INSERT||LA197_0==SQL92_RESERVED_NULL||LA197_0==SQL92_RESERVED_UPDATE||LA197_0==ASSIGN||LA197_0==BLOCK||LA197_0==BODY||LA197_0==CASCATED_ELEMENT||LA197_0==CLOSE_VK||LA197_0==COMMIT_VK||LA197_0==CONTINUE_VK||(LA197_0 >= EXECUTE_VK && LA197_0 <= EXIT_VK)||LA197_0==FORALL_VK||LA197_0==FOR_LOOP||LA197_0==LOOP_VK||LA197_0==MERGE_VK||LA197_0==OPEN_VK||LA197_0==PIPE_ROW||LA197_0==RAISE_VK||LA197_0==RETURN_VK||LA197_0==ROLLBACK_VK||LA197_0==SAVEPOINT_VK||LA197_0==SEARCHED_CASE||LA197_0==SELECT_STATEMENT||LA197_0==SET_CONSTRAINT||LA197_0==SET_TRANSACTION||LA197_0==SIMPLE_CASE||LA197_0==WHILE_LOOP) ) {
					alt197=1;
				}
				else if ( (LA197_0==LABEL_DECLARE) ) {
					alt197=2;
				}

				switch (alt197) {
				case 1 :
					// PLSQLPrinter.g:896:25: statements+= statement
					{
					pushFollow(FOLLOW_statement_in_seq_of_statements8539);
					statements=statement();
					state._fsp--;

					if (list_statements==null) list_statements=new ArrayList<Object>();
					list_statements.add(statements.getTemplate());
					}
					break;
				case 2 :
					// PLSQLPrinter.g:896:47: statements+= labeled_statement
					{
					pushFollow(FOLLOW_labeled_statement_in_seq_of_statements8543);
					statements=labeled_statement();
					state._fsp--;

					if (list_statements==null) list_statements=new ArrayList<Object>();
					list_statements.add(statements.getTemplate());
					}
					break;

				default :
					if ( cnt197 >= 1 ) break loop197;
					EarlyExitException eee = new EarlyExitException(197, input);
					throw eee;
				}
				cnt197++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 897:5: -> seq_of_statements(statements=$statements)
			{
				retval.st = templateLib.getInstanceOf("seq_of_statements",new STAttrMap().put("statements", list_statements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "seq_of_statements"


	public static class labeled_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "labeled_statement"
	// PLSQLPrinter.g:900:1: labeled_statement : ^( LABEL_DECLARE label_name statement ) -> labeled_statement(name=$label_name.ststatement=$statement.st);
	public final PLSQLPrinter.labeled_statement_return labeled_statement() throws RecognitionException {
		PLSQLPrinter.labeled_statement_return retval = new PLSQLPrinter.labeled_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name126 =null;
		TreeRuleReturnScope statement127 =null;

		try {
			// PLSQLPrinter.g:901:5: ( ^( LABEL_DECLARE label_name statement ) -> labeled_statement(name=$label_name.ststatement=$statement.st))
			// PLSQLPrinter.g:901:10: ^( LABEL_DECLARE label_name statement )
			{
			match(input,LABEL_DECLARE,FOLLOW_LABEL_DECLARE_in_labeled_statement8584); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_label_name_in_labeled_statement8586);
			label_name126=label_name();
			state._fsp--;

			pushFollow(FOLLOW_statement_in_labeled_statement8588);
			statement127=statement();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 901:48: -> labeled_statement(name=$label_name.ststatement=$statement.st)
			{
				retval.st = templateLib.getInstanceOf("labeled_statement",new STAttrMap().put("name", (label_name126!=null?((StringTemplate)label_name126.getTemplate()):null)).put("statement", (statement127!=null?((StringTemplate)statement127.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "labeled_statement"


	public static class statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "statement"
	// PLSQLPrinter.g:904:1: statement : ( assignment_statement -> { $assignment_statement.st }| continue_statement -> { $continue_statement.st }| exit_statement -> { $exit_statement.st }| goto_statement -> { $goto_statement.st }| if_statement -> { $if_statement.st }| loop_statement -> { $loop_statement.st }| forall_statement -> { $forall_statement.st }| null_statement -> { $null_statement.st }| raise_statement -> { $raise_statement.st }| return_statement -> { $return_statement.st }| pipe_row_statement -> { $pipe_row_statement.st }| case_statement -> { $case_statement.st }| sql_statement -> { $sql_statement.st }| general_element -> { $general_element.st }| body -> { $body.st }| block -> { $block.st });
	public final PLSQLPrinter.statement_return statement() throws RecognitionException {
		PLSQLPrinter.statement_return retval = new PLSQLPrinter.statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope assignment_statement128 =null;
		TreeRuleReturnScope continue_statement129 =null;
		TreeRuleReturnScope exit_statement130 =null;
		TreeRuleReturnScope goto_statement131 =null;
		TreeRuleReturnScope if_statement132 =null;
		TreeRuleReturnScope loop_statement133 =null;
		TreeRuleReturnScope forall_statement134 =null;
		TreeRuleReturnScope null_statement135 =null;
		TreeRuleReturnScope raise_statement136 =null;
		TreeRuleReturnScope return_statement137 =null;
		TreeRuleReturnScope pipe_row_statement138 =null;
		TreeRuleReturnScope case_statement139 =null;
		TreeRuleReturnScope sql_statement140 =null;
		TreeRuleReturnScope general_element141 =null;
		TreeRuleReturnScope body142 =null;
		TreeRuleReturnScope block143 =null;

		try {
			// PLSQLPrinter.g:905:5: ( assignment_statement -> { $assignment_statement.st }| continue_statement -> { $continue_statement.st }| exit_statement -> { $exit_statement.st }| goto_statement -> { $goto_statement.st }| if_statement -> { $if_statement.st }| loop_statement -> { $loop_statement.st }| forall_statement -> { $forall_statement.st }| null_statement -> { $null_statement.st }| raise_statement -> { $raise_statement.st }| return_statement -> { $return_statement.st }| pipe_row_statement -> { $pipe_row_statement.st }| case_statement -> { $case_statement.st }| sql_statement -> { $sql_statement.st }| general_element -> { $general_element.st }| body -> { $body.st }| block -> { $block.st })
			int alt198=16;
			switch ( input.LA(1) ) {
			case ASSIGN:
				{
				alt198=1;
				}
				break;
			case CONTINUE_VK:
				{
				alt198=2;
				}
				break;
			case EXIT_VK:
				{
				alt198=3;
				}
				break;
			case SQL92_RESERVED_GOTO:
				{
				alt198=4;
				}
				break;
			case PLSQL_RESERVED_IF:
				{
				alt198=5;
				}
				break;
			case FOR_LOOP:
			case LOOP_VK:
			case WHILE_LOOP:
				{
				alt198=6;
				}
				break;
			case FORALL_VK:
				{
				alt198=7;
				}
				break;
			case SQL92_RESERVED_NULL:
				{
				alt198=8;
				}
				break;
			case RAISE_VK:
				{
				alt198=9;
				}
				break;
			case RETURN_VK:
				{
				alt198=10;
				}
				break;
			case PIPE_ROW:
				{
				alt198=11;
				}
				break;
			case SEARCHED_CASE:
			case SIMPLE_CASE:
				{
				alt198=12;
				}
				break;
			case PLSQL_RESERVED_LOCK:
			case SQL92_RESERVED_DELETE:
			case SQL92_RESERVED_FETCH:
			case SQL92_RESERVED_INSERT:
			case SQL92_RESERVED_UPDATE:
			case CLOSE_VK:
			case COMMIT_VK:
			case EXECUTE_VK:
			case MERGE_VK:
			case OPEN_VK:
			case ROLLBACK_VK:
			case SAVEPOINT_VK:
			case SELECT_STATEMENT:
			case SET_CONSTRAINT:
			case SET_TRANSACTION:
				{
				alt198=13;
				}
				break;
			case CASCATED_ELEMENT:
				{
				alt198=14;
				}
				break;
			case BODY:
				{
				alt198=15;
				}
				break;
			case BLOCK:
				{
				alt198=16;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 198, 0, input);
				throw nvae;
			}
			switch (alt198) {
				case 1 :
					// PLSQLPrinter.g:905:10: assignment_statement
					{
					pushFollow(FOLLOW_assignment_statement_in_statement8623);
					assignment_statement128=assignment_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 905:31: -> { $assignment_statement.st }
					{
						retval.st =  (assignment_statement128!=null?((StringTemplate)assignment_statement128.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:906:10: continue_statement
					{
					pushFollow(FOLLOW_continue_statement_in_statement8638);
					continue_statement129=continue_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 906:29: -> { $continue_statement.st }
					{
						retval.st =  (continue_statement129!=null?((StringTemplate)continue_statement129.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:907:10: exit_statement
					{
					pushFollow(FOLLOW_exit_statement_in_statement8653);
					exit_statement130=exit_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 907:25: -> { $exit_statement.st }
					{
						retval.st =  (exit_statement130!=null?((StringTemplate)exit_statement130.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:908:10: goto_statement
					{
					pushFollow(FOLLOW_goto_statement_in_statement8668);
					goto_statement131=goto_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 908:25: -> { $goto_statement.st }
					{
						retval.st =  (goto_statement131!=null?((StringTemplate)goto_statement131.getTemplate()):null) ;
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:909:10: if_statement
					{
					pushFollow(FOLLOW_if_statement_in_statement8683);
					if_statement132=if_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 909:23: -> { $if_statement.st }
					{
						retval.st =  (if_statement132!=null?((StringTemplate)if_statement132.getTemplate()):null) ;
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:910:10: loop_statement
					{
					pushFollow(FOLLOW_loop_statement_in_statement8698);
					loop_statement133=loop_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 910:25: -> { $loop_statement.st }
					{
						retval.st =  (loop_statement133!=null?((StringTemplate)loop_statement133.getTemplate()):null) ;
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:911:10: forall_statement
					{
					pushFollow(FOLLOW_forall_statement_in_statement8713);
					forall_statement134=forall_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 911:27: -> { $forall_statement.st }
					{
						retval.st =  (forall_statement134!=null?((StringTemplate)forall_statement134.getTemplate()):null) ;
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:912:10: null_statement
					{
					pushFollow(FOLLOW_null_statement_in_statement8728);
					null_statement135=null_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 912:25: -> { $null_statement.st }
					{
						retval.st =  (null_statement135!=null?((StringTemplate)null_statement135.getTemplate()):null) ;
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:913:10: raise_statement
					{
					pushFollow(FOLLOW_raise_statement_in_statement8743);
					raise_statement136=raise_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 913:26: -> { $raise_statement.st }
					{
						retval.st =  (raise_statement136!=null?((StringTemplate)raise_statement136.getTemplate()):null) ;
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:914:10: return_statement
					{
					pushFollow(FOLLOW_return_statement_in_statement8758);
					return_statement137=return_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 914:27: -> { $return_statement.st }
					{
						retval.st =  (return_statement137!=null?((StringTemplate)return_statement137.getTemplate()):null) ;
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:915:10: pipe_row_statement
					{
					pushFollow(FOLLOW_pipe_row_statement_in_statement8773);
					pipe_row_statement138=pipe_row_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 915:29: -> { $pipe_row_statement.st }
					{
						retval.st =  (pipe_row_statement138!=null?((StringTemplate)pipe_row_statement138.getTemplate()):null) ;
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:916:10: case_statement
					{
					pushFollow(FOLLOW_case_statement_in_statement8788);
					case_statement139=case_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 916:25: -> { $case_statement.st }
					{
						retval.st =  (case_statement139!=null?((StringTemplate)case_statement139.getTemplate()):null) ;
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:917:10: sql_statement
					{
					pushFollow(FOLLOW_sql_statement_in_statement8803);
					sql_statement140=sql_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 917:24: -> { $sql_statement.st }
					{
						retval.st =  (sql_statement140!=null?((StringTemplate)sql_statement140.getTemplate()):null) ;
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:918:10: general_element
					{
					pushFollow(FOLLOW_general_element_in_statement8818);
					general_element141=general_element();
					state._fsp--;

					// TEMPLATE REWRITE
					// 918:26: -> { $general_element.st }
					{
						retval.st =  (general_element141!=null?((StringTemplate)general_element141.getTemplate()):null) ;
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:919:10: body
					{
					pushFollow(FOLLOW_body_in_statement8833);
					body142=body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 919:15: -> { $body.st }
					{
						retval.st =  (body142!=null?((StringTemplate)body142.getTemplate()):null) ;
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:920:10: block
					{
					pushFollow(FOLLOW_block_in_statement8848);
					block143=block();
					state._fsp--;

					// TEMPLATE REWRITE
					// 920:16: -> { $block.st }
					{
						retval.st =  (block143!=null?((StringTemplate)block143.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class assignment_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "assignment_statement"
	// PLSQLPrinter.g:923:1: assignment_statement : ^( ASSIGN (dst= general_element |dst= hosted_variable_name ) expression ) -> assignment_statement(dst=$dst.stexpression=$expression.st);
	public final PLSQLPrinter.assignment_statement_return assignment_statement() throws RecognitionException {
		PLSQLPrinter.assignment_statement_return retval = new PLSQLPrinter.assignment_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope dst =null;
		TreeRuleReturnScope expression144 =null;

		try {
			// PLSQLPrinter.g:924:5: ( ^( ASSIGN (dst= general_element |dst= hosted_variable_name ) expression ) -> assignment_statement(dst=$dst.stexpression=$expression.st))
			// PLSQLPrinter.g:924:11: ^( ASSIGN (dst= general_element |dst= hosted_variable_name ) expression )
			{
			match(input,ASSIGN,FOLLOW_ASSIGN_in_assignment_statement8874); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:924:20: (dst= general_element |dst= hosted_variable_name )
			int alt199=2;
			int LA199_0 = input.LA(1);
			if ( (LA199_0==CASCATED_ELEMENT) ) {
				alt199=1;
			}
			else if ( (LA199_0==HOSTED_VARIABLE_NAME) ) {
				alt199=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 199, 0, input);
				throw nvae;
			}

			switch (alt199) {
				case 1 :
					// PLSQLPrinter.g:924:21: dst= general_element
					{
					pushFollow(FOLLOW_general_element_in_assignment_statement8879);
					dst=general_element();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:924:41: dst= hosted_variable_name
					{
					pushFollow(FOLLOW_hosted_variable_name_in_assignment_statement8883);
					dst=hosted_variable_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_expression_in_assignment_statement8886);
			expression144=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 925:5: -> assignment_statement(dst=$dst.stexpression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("assignment_statement",new STAttrMap().put("dst", (dst!=null?((StringTemplate)dst.getTemplate()):null)).put("expression", (expression144!=null?((StringTemplate)expression144.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "assignment_statement"


	public static class continue_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "continue_statement"
	// PLSQLPrinter.g:928:1: continue_statement : ^( CONTINUE_VK ( label_name )? ( general_when )? ) -> continue_statement(label_name=$label_name.stcondition=$general_when.st);
	public final PLSQLPrinter.continue_statement_return continue_statement() throws RecognitionException {
		PLSQLPrinter.continue_statement_return retval = new PLSQLPrinter.continue_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name145 =null;
		TreeRuleReturnScope general_when146 =null;

		try {
			// PLSQLPrinter.g:929:5: ( ^( CONTINUE_VK ( label_name )? ( general_when )? ) -> continue_statement(label_name=$label_name.stcondition=$general_when.st))
			// PLSQLPrinter.g:929:10: ^( CONTINUE_VK ( label_name )? ( general_when )? )
			{
			match(input,CONTINUE_VK,FOLLOW_CONTINUE_VK_in_continue_statement8928); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:929:24: ( label_name )?
				int alt200=2;
				int LA200_0 = input.LA(1);
				if ( (LA200_0==LABEL_NAME) ) {
					alt200=1;
				}
				switch (alt200) {
					case 1 :
						// PLSQLPrinter.g:929:24: label_name
						{
						pushFollow(FOLLOW_label_name_in_continue_statement8930);
						label_name145=label_name();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:929:36: ( general_when )?
				int alt201=2;
				int LA201_0 = input.LA(1);
				if ( (LA201_0==SQL92_RESERVED_WHEN) ) {
					alt201=1;
				}
				switch (alt201) {
					case 1 :
						// PLSQLPrinter.g:929:36: general_when
						{
						pushFollow(FOLLOW_general_when_in_continue_statement8933);
						general_when146=general_when();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 930:5: -> continue_statement(label_name=$label_name.stcondition=$general_when.st)
			{
				retval.st = templateLib.getInstanceOf("continue_statement",new STAttrMap().put("label_name", (label_name145!=null?((StringTemplate)label_name145.getTemplate()):null)).put("condition", (general_when146!=null?((StringTemplate)general_when146.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "continue_statement"


	public static class general_when_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_when"
	// PLSQLPrinter.g:933:1: general_when : ^( SQL92_RESERVED_WHEN expression ) -> general_when(expression=$expression.st);
	public final PLSQLPrinter.general_when_return general_when() throws RecognitionException {
		PLSQLPrinter.general_when_return retval = new PLSQLPrinter.general_when_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression147 =null;

		try {
			// PLSQLPrinter.g:934:5: ( ^( SQL92_RESERVED_WHEN expression ) -> general_when(expression=$expression.st))
			// PLSQLPrinter.g:934:10: ^( SQL92_RESERVED_WHEN expression )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_general_when8976); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_general_when8978);
			expression147=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 935:5: -> general_when(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("general_when",new STAttrMap().put("expression", (expression147!=null?((StringTemplate)expression147.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_when"


	public static class exit_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exit_statement"
	// PLSQLPrinter.g:938:1: exit_statement : ^( EXIT_VK ( label_name )? ( general_when )? ) -> exit_statement(label_name=$label_name.stcondition=$general_when.st);
	public final PLSQLPrinter.exit_statement_return exit_statement() throws RecognitionException {
		PLSQLPrinter.exit_statement_return retval = new PLSQLPrinter.exit_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name148 =null;
		TreeRuleReturnScope general_when149 =null;

		try {
			// PLSQLPrinter.g:939:5: ( ^( EXIT_VK ( label_name )? ( general_when )? ) -> exit_statement(label_name=$label_name.stcondition=$general_when.st))
			// PLSQLPrinter.g:939:10: ^( EXIT_VK ( label_name )? ( general_when )? )
			{
			match(input,EXIT_VK,FOLLOW_EXIT_VK_in_exit_statement9015); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:939:20: ( label_name )?
				int alt202=2;
				int LA202_0 = input.LA(1);
				if ( (LA202_0==LABEL_NAME) ) {
					alt202=1;
				}
				switch (alt202) {
					case 1 :
						// PLSQLPrinter.g:939:20: label_name
						{
						pushFollow(FOLLOW_label_name_in_exit_statement9017);
						label_name148=label_name();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:939:32: ( general_when )?
				int alt203=2;
				int LA203_0 = input.LA(1);
				if ( (LA203_0==SQL92_RESERVED_WHEN) ) {
					alt203=1;
				}
				switch (alt203) {
					case 1 :
						// PLSQLPrinter.g:939:32: general_when
						{
						pushFollow(FOLLOW_general_when_in_exit_statement9020);
						general_when149=general_when();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 940:5: -> exit_statement(label_name=$label_name.stcondition=$general_when.st)
			{
				retval.st = templateLib.getInstanceOf("exit_statement",new STAttrMap().put("label_name", (label_name148!=null?((StringTemplate)label_name148.getTemplate()):null)).put("condition", (general_when149!=null?((StringTemplate)general_when149.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exit_statement"


	public static class goto_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "goto_statement"
	// PLSQLPrinter.g:943:1: goto_statement : ^( SQL92_RESERVED_GOTO label_name ) -> goto_statement(label_name=$label_name.st);
	public final PLSQLPrinter.goto_statement_return goto_statement() throws RecognitionException {
		PLSQLPrinter.goto_statement_return retval = new PLSQLPrinter.goto_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name150 =null;

		try {
			// PLSQLPrinter.g:944:5: ( ^( SQL92_RESERVED_GOTO label_name ) -> goto_statement(label_name=$label_name.st))
			// PLSQLPrinter.g:944:10: ^( SQL92_RESERVED_GOTO label_name )
			{
			match(input,SQL92_RESERVED_GOTO,FOLLOW_SQL92_RESERVED_GOTO_in_goto_statement9063); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_label_name_in_goto_statement9065);
			label_name150=label_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 945:5: -> goto_statement(label_name=$label_name.st)
			{
				retval.st = templateLib.getInstanceOf("goto_statement",new STAttrMap().put("label_name", (label_name150!=null?((StringTemplate)label_name150.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "goto_statement"


	public static class if_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "if_statement"
	// PLSQLPrinter.g:948:1: if_statement : ^( PLSQL_RESERVED_IF expression seq_of_statements (elsif_parts+= elsif_part )* ( else_part )? ) -> if_statement(condition=$expression.stthen_seq_of_statements=$seq_of_statements.stelsif_parts=$elsif_partselse_part=$else_part.st);
	public final PLSQLPrinter.if_statement_return if_statement() throws RecognitionException {
		PLSQLPrinter.if_statement_return retval = new PLSQLPrinter.if_statement_return();
		retval.start = input.LT(1);

		List<Object> list_elsif_parts=null;
		TreeRuleReturnScope expression151 =null;
		TreeRuleReturnScope seq_of_statements152 =null;
		TreeRuleReturnScope else_part153 =null;
		RuleReturnScope elsif_parts = null;
		try {
			// PLSQLPrinter.g:949:5: ( ^( PLSQL_RESERVED_IF expression seq_of_statements (elsif_parts+= elsif_part )* ( else_part )? ) -> if_statement(condition=$expression.stthen_seq_of_statements=$seq_of_statements.stelsif_parts=$elsif_partselse_part=$else_part.st))
			// PLSQLPrinter.g:949:10: ^( PLSQL_RESERVED_IF expression seq_of_statements (elsif_parts+= elsif_part )* ( else_part )? )
			{
			match(input,PLSQL_RESERVED_IF,FOLLOW_PLSQL_RESERVED_IF_in_if_statement9102); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_if_statement9104);
			expression151=expression();
			state._fsp--;

			pushFollow(FOLLOW_seq_of_statements_in_if_statement9106);
			seq_of_statements152=seq_of_statements();
			state._fsp--;

			// PLSQLPrinter.g:949:70: (elsif_parts+= elsif_part )*
			loop204:
			while (true) {
				int alt204=2;
				int LA204_0 = input.LA(1);
				if ( (LA204_0==PLSQL_NON_RESERVED_ELSIF) ) {
					alt204=1;
				}

				switch (alt204) {
				case 1 :
					// PLSQLPrinter.g:949:70: elsif_parts+= elsif_part
					{
					pushFollow(FOLLOW_elsif_part_in_if_statement9110);
					elsif_parts=elsif_part();
					state._fsp--;

					if (list_elsif_parts==null) list_elsif_parts=new ArrayList<Object>();
					list_elsif_parts.add(elsif_parts.getTemplate());
					}
					break;

				default :
					break loop204;
				}
			}

			// PLSQLPrinter.g:949:84: ( else_part )?
			int alt205=2;
			int LA205_0 = input.LA(1);
			if ( (LA205_0==SQL92_RESERVED_ELSE) ) {
				alt205=1;
			}
			switch (alt205) {
				case 1 :
					// PLSQLPrinter.g:949:84: else_part
					{
					pushFollow(FOLLOW_else_part_in_if_statement9113);
					else_part153=else_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 950:5: -> if_statement(condition=$expression.stthen_seq_of_statements=$seq_of_statements.stelsif_parts=$elsif_partselse_part=$else_part.st)
			{
				retval.st = templateLib.getInstanceOf("if_statement",new STAttrMap().put("condition", (expression151!=null?((StringTemplate)expression151.getTemplate()):null)).put("then_seq_of_statements", (seq_of_statements152!=null?((StringTemplate)seq_of_statements152.getTemplate()):null)).put("elsif_parts", list_elsif_parts).put("else_part", (else_part153!=null?((StringTemplate)else_part153.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "if_statement"


	public static class elsif_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "elsif_part"
	// PLSQLPrinter.g:955:1: elsif_part : ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements ) -> elsif_part(condition=$expression.stseq_of_statements=$seq_of_statements.st);
	public final PLSQLPrinter.elsif_part_return elsif_part() throws RecognitionException {
		PLSQLPrinter.elsif_part_return retval = new PLSQLPrinter.elsif_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression154 =null;
		TreeRuleReturnScope seq_of_statements155 =null;

		try {
			// PLSQLPrinter.g:956:5: ( ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements ) -> elsif_part(condition=$expression.stseq_of_statements=$seq_of_statements.st))
			// PLSQLPrinter.g:956:10: ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements )
			{
			match(input,PLSQL_NON_RESERVED_ELSIF,FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_part9187); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_elsif_part9189);
			expression154=expression();
			state._fsp--;

			pushFollow(FOLLOW_seq_of_statements_in_elsif_part9191);
			seq_of_statements155=seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 957:5: -> elsif_part(condition=$expression.stseq_of_statements=$seq_of_statements.st)
			{
				retval.st = templateLib.getInstanceOf("elsif_part",new STAttrMap().put("condition", (expression154!=null?((StringTemplate)expression154.getTemplate()):null)).put("seq_of_statements", (seq_of_statements155!=null?((StringTemplate)seq_of_statements155.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "elsif_part"


	public static class else_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "else_part"
	// PLSQLPrinter.g:960:1: else_part : ^( SQL92_RESERVED_ELSE seq_of_statements ) -> else_part(seq_of_statements=$seq_of_statements.st);
	public final PLSQLPrinter.else_part_return else_part() throws RecognitionException {
		PLSQLPrinter.else_part_return retval = new PLSQLPrinter.else_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope seq_of_statements156 =null;

		try {
			// PLSQLPrinter.g:961:5: ( ^( SQL92_RESERVED_ELSE seq_of_statements ) -> else_part(seq_of_statements=$seq_of_statements.st))
			// PLSQLPrinter.g:961:10: ^( SQL92_RESERVED_ELSE seq_of_statements )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_else_part9233); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_seq_of_statements_in_else_part9235);
			seq_of_statements156=seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 962:5: -> else_part(seq_of_statements=$seq_of_statements.st)
			{
				retval.st = templateLib.getInstanceOf("else_part",new STAttrMap().put("seq_of_statements", (seq_of_statements156!=null?((StringTemplate)seq_of_statements156.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "else_part"


	public static class loop_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "loop_statement"
	// PLSQLPrinter.g:965:1: loop_statement : ( ^( WHILE_LOOP expression seq_of_statements ) -> while_loop(condition=$expression.stseq_of_statements=$seq_of_statements.st)| ^( FOR_LOOP cursor_loop_param seq_of_statements ) -> for_loop(loopDefinition=$cursor_loop_param.ststatements=$seq_of_statements.st)| ^( LOOP_VK seq_of_statements ) -> loop(seq_of_statements=$seq_of_statements.st));
	public final PLSQLPrinter.loop_statement_return loop_statement() throws RecognitionException {
		PLSQLPrinter.loop_statement_return retval = new PLSQLPrinter.loop_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression157 =null;
		TreeRuleReturnScope seq_of_statements158 =null;
		TreeRuleReturnScope cursor_loop_param159 =null;
		TreeRuleReturnScope seq_of_statements160 =null;
		TreeRuleReturnScope seq_of_statements161 =null;

		try {
			// PLSQLPrinter.g:966:5: ( ^( WHILE_LOOP expression seq_of_statements ) -> while_loop(condition=$expression.stseq_of_statements=$seq_of_statements.st)| ^( FOR_LOOP cursor_loop_param seq_of_statements ) -> for_loop(loopDefinition=$cursor_loop_param.ststatements=$seq_of_statements.st)| ^( LOOP_VK seq_of_statements ) -> loop(seq_of_statements=$seq_of_statements.st))
			int alt206=3;
			switch ( input.LA(1) ) {
			case WHILE_LOOP:
				{
				alt206=1;
				}
				break;
			case FOR_LOOP:
				{
				alt206=2;
				}
				break;
			case LOOP_VK:
				{
				alt206=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 206, 0, input);
				throw nvae;
			}
			switch (alt206) {
				case 1 :
					// PLSQLPrinter.g:966:10: ^( WHILE_LOOP expression seq_of_statements )
					{
					match(input,WHILE_LOOP,FOLLOW_WHILE_LOOP_in_loop_statement9272); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_loop_statement9274);
					expression157=expression();
					state._fsp--;

					pushFollow(FOLLOW_seq_of_statements_in_loop_statement9276);
					seq_of_statements158=seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 967:5: -> while_loop(condition=$expression.stseq_of_statements=$seq_of_statements.st)
					{
						retval.st = templateLib.getInstanceOf("while_loop",new STAttrMap().put("condition", (expression157!=null?((StringTemplate)expression157.getTemplate()):null)).put("seq_of_statements", (seq_of_statements158!=null?((StringTemplate)seq_of_statements158.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:968:10: ^( FOR_LOOP cursor_loop_param seq_of_statements )
					{
					match(input,FOR_LOOP,FOLLOW_FOR_LOOP_in_loop_statement9309); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_cursor_loop_param_in_loop_statement9311);
					cursor_loop_param159=cursor_loop_param();
					state._fsp--;

					pushFollow(FOLLOW_seq_of_statements_in_loop_statement9313);
					seq_of_statements160=seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 969:5: -> for_loop(loopDefinition=$cursor_loop_param.ststatements=$seq_of_statements.st)
					{
						retval.st = templateLib.getInstanceOf("for_loop",new STAttrMap().put("loopDefinition", (cursor_loop_param159!=null?((StringTemplate)cursor_loop_param159.getTemplate()):null)).put("statements", (seq_of_statements160!=null?((StringTemplate)seq_of_statements160.getTemplate()):null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:970:10: ^( LOOP_VK seq_of_statements )
					{
					match(input,LOOP_VK,FOLLOW_LOOP_VK_in_loop_statement9346); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_seq_of_statements_in_loop_statement9348);
					seq_of_statements161=seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 971:5: -> loop(seq_of_statements=$seq_of_statements.st)
					{
						retval.st = templateLib.getInstanceOf("loop",new STAttrMap().put("seq_of_statements", (seq_of_statements161!=null?((StringTemplate)seq_of_statements161.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "loop_statement"


	public static class cursor_loop_param_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_loop_param"
	// PLSQLPrinter.g:976:1: cursor_loop_param : ( ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND b1= expression b2= expression ) ) -> loopDefinition_bounds(indexVar=$index_name.stisReverse=$REVERSE_VK != nulllowerBound=$b1.stupperBound=$b2.st)| ^( CURSOR_BASED_FOR record_name general_element ) -> loopDefinition_cursor(indexVar=$record_name.stcursor=$general_element.st)| ^( SELECT_BASED_FOR record_name select_statement ) -> loopDefinition_select(indexVar=$record_name.stselect_statement=$select_statement.st));
	public final PLSQLPrinter.cursor_loop_param_return cursor_loop_param() throws RecognitionException {
		PLSQLPrinter.cursor_loop_param_return retval = new PLSQLPrinter.cursor_loop_param_return();
		retval.start = input.LT(1);

		CommonTree REVERSE_VK163=null;
		TreeRuleReturnScope b1 =null;
		TreeRuleReturnScope b2 =null;
		TreeRuleReturnScope index_name162 =null;
		TreeRuleReturnScope record_name164 =null;
		TreeRuleReturnScope general_element165 =null;
		TreeRuleReturnScope record_name166 =null;
		TreeRuleReturnScope select_statement167 =null;

		try {
			// PLSQLPrinter.g:977:5: ( ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND b1= expression b2= expression ) ) -> loopDefinition_bounds(indexVar=$index_name.stisReverse=$REVERSE_VK != nulllowerBound=$b1.stupperBound=$b2.st)| ^( CURSOR_BASED_FOR record_name general_element ) -> loopDefinition_cursor(indexVar=$record_name.stcursor=$general_element.st)| ^( SELECT_BASED_FOR record_name select_statement ) -> loopDefinition_select(indexVar=$record_name.stselect_statement=$select_statement.st))
			int alt208=3;
			switch ( input.LA(1) ) {
			case INDEXED_FOR:
				{
				alt208=1;
				}
				break;
			case CURSOR_BASED_FOR:
				{
				alt208=2;
				}
				break;
			case SELECT_BASED_FOR:
				{
				alt208=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 208, 0, input);
				throw nvae;
			}
			switch (alt208) {
				case 1 :
					// PLSQLPrinter.g:977:10: ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND b1= expression b2= expression ) )
					{
					match(input,INDEXED_FOR,FOLLOW_INDEXED_FOR_in_cursor_loop_param9387); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_index_name_in_cursor_loop_param9389);
					index_name162=index_name();
					state._fsp--;

					// PLSQLPrinter.g:977:35: ( REVERSE_VK )?
					int alt207=2;
					int LA207_0 = input.LA(1);
					if ( (LA207_0==REVERSE_VK) ) {
						alt207=1;
					}
					switch (alt207) {
						case 1 :
							// PLSQLPrinter.g:977:35: REVERSE_VK
							{
							REVERSE_VK163=(CommonTree)match(input,REVERSE_VK,FOLLOW_REVERSE_VK_in_cursor_loop_param9391); 
							}
							break;

					}

					match(input,SIMPLE_BOUND,FOLLOW_SIMPLE_BOUND_in_cursor_loop_param9395); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_cursor_loop_param9399);
					b1=expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_cursor_loop_param9403);
					b2=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 978:5: -> loopDefinition_bounds(indexVar=$index_name.stisReverse=$REVERSE_VK != nulllowerBound=$b1.stupperBound=$b2.st)
					{
						retval.st = templateLib.getInstanceOf("loopDefinition_bounds",new STAttrMap().put("indexVar", (index_name162!=null?((StringTemplate)index_name162.getTemplate()):null)).put("isReverse", REVERSE_VK163 != null).put("lowerBound", (b1!=null?((StringTemplate)b1.getTemplate()):null)).put("upperBound", (b2!=null?((StringTemplate)b2.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:979:10: ^( CURSOR_BASED_FOR record_name general_element )
					{
					match(input,CURSOR_BASED_FOR,FOLLOW_CURSOR_BASED_FOR_in_cursor_loop_param9447); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_record_name_in_cursor_loop_param9449);
					record_name164=record_name();
					state._fsp--;

					pushFollow(FOLLOW_general_element_in_cursor_loop_param9451);
					general_element165=general_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 980:5: -> loopDefinition_cursor(indexVar=$record_name.stcursor=$general_element.st)
					{
						retval.st = templateLib.getInstanceOf("loopDefinition_cursor",new STAttrMap().put("indexVar", (record_name164!=null?((StringTemplate)record_name164.getTemplate()):null)).put("cursor", (general_element165!=null?((StringTemplate)general_element165.getTemplate()):null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:981:10: ^( SELECT_BASED_FOR record_name select_statement )
					{
					match(input,SELECT_BASED_FOR,FOLLOW_SELECT_BASED_FOR_in_cursor_loop_param9484); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_record_name_in_cursor_loop_param9486);
					record_name166=record_name();
					state._fsp--;

					pushFollow(FOLLOW_select_statement_in_cursor_loop_param9488);
					select_statement167=select_statement();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 982:5: -> loopDefinition_select(indexVar=$record_name.stselect_statement=$select_statement.st)
					{
						retval.st = templateLib.getInstanceOf("loopDefinition_select",new STAttrMap().put("indexVar", (record_name166!=null?((StringTemplate)record_name166.getTemplate()):null)).put("select_statement", (select_statement167!=null?((StringTemplate)select_statement167.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_loop_param"


	public static class forall_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "forall_statement"
	// PLSQLPrinter.g:987:1: forall_statement : ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? ) -> template( \"not implemented: forall_statement\";
	public final PLSQLPrinter.forall_statement_return forall_statement() throws RecognitionException {
		PLSQLPrinter.forall_statement_return retval = new PLSQLPrinter.forall_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:988:5: ( ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? ) -> template( \"not implemented: forall_statement\")
			// PLSQLPrinter.g:988:10: ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? )
			{
			match(input,FORALL_VK,FOLLOW_FORALL_VK_in_forall_statement9532); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_index_name_in_forall_statement9534);
			index_name();
			state._fsp--;

			pushFollow(FOLLOW_bounds_clause_in_forall_statement9536);
			bounds_clause();
			state._fsp--;

			pushFollow(FOLLOW_sql_statement_in_forall_statement9538);
			sql_statement();
			state._fsp--;

			// PLSQLPrinter.g:988:61: ( EXCEPTIONS_VK )?
			int alt209=2;
			int LA209_0 = input.LA(1);
			if ( (LA209_0==EXCEPTIONS_VK) ) {
				alt209=1;
			}
			switch (alt209) {
				case 1 :
					// PLSQLPrinter.g:988:61: EXCEPTIONS_VK
					{
					match(input,EXCEPTIONS_VK,FOLLOW_EXCEPTIONS_VK_in_forall_statement9540); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 989:5: -> template( \"not implemented: forall_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: forall_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "forall_statement"


	public static class bounds_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "bounds_clause"
	// PLSQLPrinter.g:992:1: bounds_clause : ( ^( SIMPLE_BOUND expression expression ) -> template( \"not implemented: bounds_clause\"| ^( INDICES_BOUND collection_name ( between_bound )? ) -> template( \"not implemented: bounds_clause\"| ^( VALUES_BOUND index_name ) -> template( \"not implemented: bounds_clause\");
	public final PLSQLPrinter.bounds_clause_return bounds_clause() throws RecognitionException {
		PLSQLPrinter.bounds_clause_return retval = new PLSQLPrinter.bounds_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:993:5: ( ^( SIMPLE_BOUND expression expression ) -> template( \"not implemented: bounds_clause\"| ^( INDICES_BOUND collection_name ( between_bound )? ) -> template( \"not implemented: bounds_clause\"| ^( VALUES_BOUND index_name ) -> template( \"not implemented: bounds_clause\")
			int alt211=3;
			switch ( input.LA(1) ) {
			case SIMPLE_BOUND:
				{
				alt211=1;
				}
				break;
			case INDICES_BOUND:
				{
				alt211=2;
				}
				break;
			case VALUES_BOUND:
				{
				alt211=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 211, 0, input);
				throw nvae;
			}
			switch (alt211) {
				case 1 :
					// PLSQLPrinter.g:993:10: ^( SIMPLE_BOUND expression expression )
					{
					match(input,SIMPLE_BOUND,FOLLOW_SIMPLE_BOUND_in_bounds_clause9577); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_bounds_clause9579);
					expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_bounds_clause9581);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 994:5: -> template( \"not implemented: bounds_clause\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: bounds_clause");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:995:10: ^( INDICES_BOUND collection_name ( between_bound )? )
					{
					match(input,INDICES_BOUND,FOLLOW_INDICES_BOUND_in_bounds_clause9608); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_collection_name_in_bounds_clause9610);
					collection_name();
					state._fsp--;

					// PLSQLPrinter.g:995:42: ( between_bound )?
					int alt210=2;
					int LA210_0 = input.LA(1);
					if ( (LA210_0==SQL92_RESERVED_BETWEEN) ) {
						alt210=1;
					}
					switch (alt210) {
						case 1 :
							// PLSQLPrinter.g:995:42: between_bound
							{
							pushFollow(FOLLOW_between_bound_in_bounds_clause9612);
							between_bound();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 996:5: -> template( \"not implemented: bounds_clause\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: bounds_clause");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:997:10: ^( VALUES_BOUND index_name )
					{
					match(input,VALUES_BOUND,FOLLOW_VALUES_BOUND_in_bounds_clause9640); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_index_name_in_bounds_clause9642);
					index_name();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 998:5: -> template( \"not implemented: bounds_clause\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: bounds_clause");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bounds_clause"


	public static class between_bound_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "between_bound"
	// PLSQLPrinter.g:1001:1: between_bound : ^( SQL92_RESERVED_BETWEEN expression expression ) -> template( \"not implemented: between_bound\";
	public final PLSQLPrinter.between_bound_return between_bound() throws RecognitionException {
		PLSQLPrinter.between_bound_return retval = new PLSQLPrinter.between_bound_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1002:5: ( ^( SQL92_RESERVED_BETWEEN expression expression ) -> template( \"not implemented: between_bound\")
			// PLSQLPrinter.g:1002:10: ^( SQL92_RESERVED_BETWEEN expression expression )
			{
			match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_between_bound9679); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_between_bound9681);
			expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_between_bound9683);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1003:5: -> template( \"not implemented: between_bound\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: between_bound");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "between_bound"


	public static class null_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "null_statement"
	// PLSQLPrinter.g:1006:1: null_statement : SQL92_RESERVED_NULL -> null_statement(;
	public final PLSQLPrinter.null_statement_return null_statement() throws RecognitionException {
		PLSQLPrinter.null_statement_return retval = new PLSQLPrinter.null_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1007:5: ( SQL92_RESERVED_NULL -> null_statement()
			// PLSQLPrinter.g:1007:10: SQL92_RESERVED_NULL
			{
			match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_null_statement9718); 
			// TEMPLATE REWRITE
			// 1008:5: -> null_statement(
			{
				retval.st = templateLib.getInstanceOf("null_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "null_statement"


	public static class raise_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "raise_statement"
	// PLSQLPrinter.g:1011:1: raise_statement : ^( RAISE_VK ( exception_name )? ) -> raise_statement(name=$exception_name.st);
	public final PLSQLPrinter.raise_statement_return raise_statement() throws RecognitionException {
		PLSQLPrinter.raise_statement_return retval = new PLSQLPrinter.raise_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope exception_name168 =null;

		try {
			// PLSQLPrinter.g:1012:5: ( ^( RAISE_VK ( exception_name )? ) -> raise_statement(name=$exception_name.st))
			// PLSQLPrinter.g:1012:10: ^( RAISE_VK ( exception_name )? )
			{
			match(input,RAISE_VK,FOLLOW_RAISE_VK_in_raise_statement9751); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1012:21: ( exception_name )?
				int alt212=2;
				int LA212_0 = input.LA(1);
				if ( (LA212_0==EXCEPTION_NAME) ) {
					alt212=1;
				}
				switch (alt212) {
					case 1 :
						// PLSQLPrinter.g:1012:21: exception_name
						{
						pushFollow(FOLLOW_exception_name_in_raise_statement9753);
						exception_name168=exception_name();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1013:5: -> raise_statement(name=$exception_name.st)
			{
				retval.st = templateLib.getInstanceOf("raise_statement",new STAttrMap().put("name", (exception_name168!=null?((StringTemplate)exception_name168.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "raise_statement"


	public static class return_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "return_statement"
	// PLSQLPrinter.g:1016:1: return_statement : ^( RETURN_VK ( expression )? ) -> return_statement(expression=$expression.st);
	public final PLSQLPrinter.return_statement_return return_statement() throws RecognitionException {
		PLSQLPrinter.return_statement_return retval = new PLSQLPrinter.return_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression169 =null;

		try {
			// PLSQLPrinter.g:1017:5: ( ^( RETURN_VK ( expression )? ) -> return_statement(expression=$expression.st))
			// PLSQLPrinter.g:1017:10: ^( RETURN_VK ( expression )? )
			{
			match(input,RETURN_VK,FOLLOW_RETURN_VK_in_return_statement9791); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1017:22: ( expression )?
				int alt213=2;
				int LA213_0 = input.LA(1);
				if ( (LA213_0==EXPR||LA213_0==LOGIC_EXPR) ) {
					alt213=1;
				}
				switch (alt213) {
					case 1 :
						// PLSQLPrinter.g:1017:22: expression
						{
						pushFollow(FOLLOW_expression_in_return_statement9793);
						expression169=expression();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1017:35: -> return_statement(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("return_statement",new STAttrMap().put("expression", (expression169!=null?((StringTemplate)expression169.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "return_statement"


	public static class body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "body"
	// PLSQLPrinter.g:1020:1: body : ^( BODY ( label_name )? seq_of_statements ( exception_clause )? ) -> body(bodyLabel=$label_name.ststatements=$seq_of_statements.stexception_clause=$exception_clause.st);
	public final PLSQLPrinter.body_return body() throws RecognitionException {
		PLSQLPrinter.body_return retval = new PLSQLPrinter.body_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name170 =null;
		TreeRuleReturnScope seq_of_statements171 =null;
		TreeRuleReturnScope exception_clause172 =null;

		try {
			// PLSQLPrinter.g:1021:5: ( ^( BODY ( label_name )? seq_of_statements ( exception_clause )? ) -> body(bodyLabel=$label_name.ststatements=$seq_of_statements.stexception_clause=$exception_clause.st))
			// PLSQLPrinter.g:1021:10: ^( BODY ( label_name )? seq_of_statements ( exception_clause )? )
			{
			match(input,BODY,FOLLOW_BODY_in_body9825); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1021:17: ( label_name )?
			int alt214=2;
			int LA214_0 = input.LA(1);
			if ( (LA214_0==LABEL_NAME) ) {
				alt214=1;
			}
			switch (alt214) {
				case 1 :
					// PLSQLPrinter.g:1021:17: label_name
					{
					pushFollow(FOLLOW_label_name_in_body9827);
					label_name170=label_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_seq_of_statements_in_body9830);
			seq_of_statements171=seq_of_statements();
			state._fsp--;

			// PLSQLPrinter.g:1021:47: ( exception_clause )?
			int alt215=2;
			int LA215_0 = input.LA(1);
			if ( (LA215_0==SQL92_RESERVED_EXCEPTION) ) {
				alt215=1;
			}
			switch (alt215) {
				case 1 :
					// PLSQLPrinter.g:1021:47: exception_clause
					{
					pushFollow(FOLLOW_exception_clause_in_body9832);
					exception_clause172=exception_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1022:5: -> body(bodyLabel=$label_name.ststatements=$seq_of_statements.stexception_clause=$exception_clause.st)
			{
				retval.st = templateLib.getInstanceOf("body",new STAttrMap().put("bodyLabel", (label_name170!=null?((StringTemplate)label_name170.getTemplate()):null)).put("statements", (seq_of_statements171!=null?((StringTemplate)seq_of_statements171.getTemplate()):null)).put("exception_clause", (exception_clause172!=null?((StringTemplate)exception_clause172.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "body"


	public static class exception_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_clause"
	// PLSQLPrinter.g:1027:1: exception_clause : ^( SQL92_RESERVED_EXCEPTION (handlers+= exception_handler )+ ) -> exception_clause(exception_handlers=$handlers);
	public final PLSQLPrinter.exception_clause_return exception_clause() throws RecognitionException {
		PLSQLPrinter.exception_clause_return retval = new PLSQLPrinter.exception_clause_return();
		retval.start = input.LT(1);

		List<Object> list_handlers=null;
		RuleReturnScope handlers = null;
		try {
			// PLSQLPrinter.g:1028:5: ( ^( SQL92_RESERVED_EXCEPTION (handlers+= exception_handler )+ ) -> exception_clause(exception_handlers=$handlers))
			// PLSQLPrinter.g:1028:10: ^( SQL92_RESERVED_EXCEPTION (handlers+= exception_handler )+ )
			{
			match(input,SQL92_RESERVED_EXCEPTION,FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_clause9883); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1028:45: (handlers+= exception_handler )+
			int cnt216=0;
			loop216:
			while (true) {
				int alt216=2;
				int LA216_0 = input.LA(1);
				if ( (LA216_0==SQL92_RESERVED_WHEN) ) {
					alt216=1;
				}

				switch (alt216) {
				case 1 :
					// PLSQLPrinter.g:1028:45: handlers+= exception_handler
					{
					pushFollow(FOLLOW_exception_handler_in_exception_clause9887);
					handlers=exception_handler();
					state._fsp--;

					if (list_handlers==null) list_handlers=new ArrayList<Object>();
					list_handlers.add(handlers.getTemplate());
					}
					break;

				default :
					if ( cnt216 >= 1 ) break loop216;
					EarlyExitException eee = new EarlyExitException(216, input);
					throw eee;
				}
				cnt216++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1029:5: -> exception_clause(exception_handlers=$handlers)
			{
				retval.st = templateLib.getInstanceOf("exception_clause",new STAttrMap().put("exception_handlers", list_handlers));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_clause"


	public static class exception_handler_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_handler"
	// PLSQLPrinter.g:1032:1: exception_handler : ^( SQL92_RESERVED_WHEN (names+= exception_name )+ seq_of_statements ) -> exception_handler(exception_names=$namesseq_of_statements=$seq_of_statements.st);
	public final PLSQLPrinter.exception_handler_return exception_handler() throws RecognitionException {
		PLSQLPrinter.exception_handler_return retval = new PLSQLPrinter.exception_handler_return();
		retval.start = input.LT(1);

		List<Object> list_names=null;
		TreeRuleReturnScope seq_of_statements173 =null;
		RuleReturnScope names = null;
		try {
			// PLSQLPrinter.g:1033:5: ( ^( SQL92_RESERVED_WHEN (names+= exception_name )+ seq_of_statements ) -> exception_handler(exception_names=$namesseq_of_statements=$seq_of_statements.st))
			// PLSQLPrinter.g:1033:10: ^( SQL92_RESERVED_WHEN (names+= exception_name )+ seq_of_statements )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_exception_handler9925); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1033:37: (names+= exception_name )+
			int cnt217=0;
			loop217:
			while (true) {
				int alt217=2;
				int LA217_0 = input.LA(1);
				if ( (LA217_0==EXCEPTION_NAME) ) {
					alt217=1;
				}

				switch (alt217) {
				case 1 :
					// PLSQLPrinter.g:1033:37: names+= exception_name
					{
					pushFollow(FOLLOW_exception_name_in_exception_handler9929);
					names=exception_name();
					state._fsp--;

					if (list_names==null) list_names=new ArrayList<Object>();
					list_names.add(names.getTemplate());
					}
					break;

				default :
					if ( cnt217 >= 1 ) break loop217;
					EarlyExitException eee = new EarlyExitException(217, input);
					throw eee;
				}
				cnt217++;
			}

			pushFollow(FOLLOW_seq_of_statements_in_exception_handler9932);
			seq_of_statements173=seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1034:5: -> exception_handler(exception_names=$namesseq_of_statements=$seq_of_statements.st)
			{
				retval.st = templateLib.getInstanceOf("exception_handler",new STAttrMap().put("exception_names", list_names).put("seq_of_statements", (seq_of_statements173!=null?((StringTemplate)seq_of_statements173.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_handler"


	public static class block_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "block"
	// PLSQLPrinter.g:1039:1: block : ^( BLOCK (specs+= declare_spec )* body ) -> block(declare_spec=$specsbody=$body.st);
	public final PLSQLPrinter.block_return block() throws RecognitionException {
		PLSQLPrinter.block_return retval = new PLSQLPrinter.block_return();
		retval.start = input.LT(1);

		List<Object> list_specs=null;
		TreeRuleReturnScope body174 =null;
		RuleReturnScope specs = null;
		try {
			// PLSQLPrinter.g:1040:5: ( ^( BLOCK (specs+= declare_spec )* body ) -> block(declare_spec=$specsbody=$body.st))
			// PLSQLPrinter.g:1040:10: ^( BLOCK (specs+= declare_spec )* body )
			{
			match(input,BLOCK,FOLLOW_BLOCK_in_block9976); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1040:23: (specs+= declare_spec )*
			loop218:
			while (true) {
				int alt218=2;
				int LA218_0 = input.LA(1);
				if ( (LA218_0==CREATE_FUNCTION||LA218_0==CREATE_PROCEDURE||(LA218_0 >= CREATE_TYPE_BODY && LA218_0 <= CREATE_TYPE_SPEC)||LA218_0==CURSOR_DECLARE||LA218_0==EXCEPTION_DECLARE||LA218_0==PRAGMA_DECLARE||(LA218_0 >= RECORD_TYPE_DECLARE && LA218_0 <= RECORD_VAR_DECLARE)||LA218_0==SUBTYPE_DECLARE||(LA218_0 >= TABLE_TYPE_DECLARE && LA218_0 <= TABLE_VAR_DECLARE)||LA218_0==VARIABLE_DECLARE) ) {
					alt218=1;
				}

				switch (alt218) {
				case 1 :
					// PLSQLPrinter.g:1040:23: specs+= declare_spec
					{
					pushFollow(FOLLOW_declare_spec_in_block9980);
					specs=declare_spec();
					state._fsp--;

					if (list_specs==null) list_specs=new ArrayList<Object>();
					list_specs.add(specs.getTemplate());
					}
					break;

				default :
					break loop218;
				}
			}

			pushFollow(FOLLOW_body_in_block9983);
			body174=body();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1041:5: -> block(declare_spec=$specsbody=$body.st)
			{
				retval.st = templateLib.getInstanceOf("block",new STAttrMap().put("declare_spec", list_specs).put("body", (body174!=null?((StringTemplate)body174.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "block"


	public static class sql_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sql_statement"
	// PLSQLPrinter.g:1048:1: sql_statement : ( execute_immediate -> { $execute_immediate.st }| data_manipulation_language_statements -> { $data_manipulation_language_statements.st }| cursor_manipulation_statements -> { $cursor_manipulation_statements.st }| transaction_control_statements -> { $transaction_control_statements.st });
	public final PLSQLPrinter.sql_statement_return sql_statement() throws RecognitionException {
		PLSQLPrinter.sql_statement_return retval = new PLSQLPrinter.sql_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope execute_immediate175 =null;
		TreeRuleReturnScope data_manipulation_language_statements176 =null;
		TreeRuleReturnScope cursor_manipulation_statements177 =null;
		TreeRuleReturnScope transaction_control_statements178 =null;

		try {
			// PLSQLPrinter.g:1049:5: ( execute_immediate -> { $execute_immediate.st }| data_manipulation_language_statements -> { $data_manipulation_language_statements.st }| cursor_manipulation_statements -> { $cursor_manipulation_statements.st }| transaction_control_statements -> { $transaction_control_statements.st })
			int alt219=4;
			switch ( input.LA(1) ) {
			case EXECUTE_VK:
				{
				alt219=1;
				}
				break;
			case PLSQL_RESERVED_LOCK:
			case SQL92_RESERVED_DELETE:
			case SQL92_RESERVED_INSERT:
			case SQL92_RESERVED_UPDATE:
			case MERGE_VK:
			case SELECT_STATEMENT:
				{
				alt219=2;
				}
				break;
			case SQL92_RESERVED_FETCH:
			case CLOSE_VK:
			case OPEN_VK:
				{
				alt219=3;
				}
				break;
			case COMMIT_VK:
			case ROLLBACK_VK:
			case SAVEPOINT_VK:
			case SET_CONSTRAINT:
			case SET_TRANSACTION:
				{
				alt219=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 219, 0, input);
				throw nvae;
			}
			switch (alt219) {
				case 1 :
					// PLSQLPrinter.g:1049:10: execute_immediate
					{
					pushFollow(FOLLOW_execute_immediate_in_sql_statement10028);
					execute_immediate175=execute_immediate();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1049:28: -> { $execute_immediate.st }
					{
						retval.st =  (execute_immediate175!=null?((StringTemplate)execute_immediate175.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1050:10: data_manipulation_language_statements
					{
					pushFollow(FOLLOW_data_manipulation_language_statements_in_sql_statement10043);
					data_manipulation_language_statements176=data_manipulation_language_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1050:48: -> { $data_manipulation_language_statements.st }
					{
						retval.st =  (data_manipulation_language_statements176!=null?((StringTemplate)data_manipulation_language_statements176.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1051:10: cursor_manipulation_statements
					{
					pushFollow(FOLLOW_cursor_manipulation_statements_in_sql_statement10058);
					cursor_manipulation_statements177=cursor_manipulation_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1051:41: -> { $cursor_manipulation_statements.st }
					{
						retval.st =  (cursor_manipulation_statements177!=null?((StringTemplate)cursor_manipulation_statements177.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1052:10: transaction_control_statements
					{
					pushFollow(FOLLOW_transaction_control_statements_in_sql_statement10073);
					transaction_control_statements178=transaction_control_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1052:41: -> { $transaction_control_statements.st }
					{
						retval.st =  (transaction_control_statements178!=null?((StringTemplate)transaction_control_statements178.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sql_statement"


	public static class execute_immediate_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "execute_immediate"
	// PLSQLPrinter.g:1055:1: execute_immediate : ^( EXECUTE_VK expression (into= into_clause (using= using_clause )? |using= using_clause (dynamic_returning= dynamic_returning_clause )? |dynamic_returning= dynamic_returning_clause )? ) -> execute_immediate_statement(expression=$expression.stinto_clause=$into.stusing_clause=$using.stdynamic_returning_clause=$dynamic_returning.st);
	public final PLSQLPrinter.execute_immediate_return execute_immediate() throws RecognitionException {
		PLSQLPrinter.execute_immediate_return retval = new PLSQLPrinter.execute_immediate_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope into =null;
		TreeRuleReturnScope using =null;
		TreeRuleReturnScope dynamic_returning =null;
		TreeRuleReturnScope expression179 =null;

		try {
			// PLSQLPrinter.g:1056:5: ( ^( EXECUTE_VK expression (into= into_clause (using= using_clause )? |using= using_clause (dynamic_returning= dynamic_returning_clause )? |dynamic_returning= dynamic_returning_clause )? ) -> execute_immediate_statement(expression=$expression.stinto_clause=$into.stusing_clause=$using.stdynamic_returning_clause=$dynamic_returning.st))
			// PLSQLPrinter.g:1056:10: ^( EXECUTE_VK expression (into= into_clause (using= using_clause )? |using= using_clause (dynamic_returning= dynamic_returning_clause )? |dynamic_returning= dynamic_returning_clause )? )
			{
			match(input,EXECUTE_VK,FOLLOW_EXECUTE_VK_in_execute_immediate10098); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_execute_immediate10100);
			expression179=expression();
			state._fsp--;

			// PLSQLPrinter.g:1057:11: (into= into_clause (using= using_clause )? |using= using_clause (dynamic_returning= dynamic_returning_clause )? |dynamic_returning= dynamic_returning_clause )?
			int alt222=4;
			switch ( input.LA(1) ) {
				case SQL92_RESERVED_INTO:
				case BULK_VK:
					{
					alt222=1;
					}
					break;
				case PLSQL_NON_RESERVED_USING:
					{
					alt222=2;
					}
					break;
				case DYNAMIC_RETURN:
					{
					alt222=3;
					}
					break;
			}
			switch (alt222) {
				case 1 :
					// PLSQLPrinter.g:1057:16: into= into_clause (using= using_clause )?
					{
					pushFollow(FOLLOW_into_clause_in_execute_immediate10119);
					into=into_clause();
					state._fsp--;

					// PLSQLPrinter.g:1057:38: (using= using_clause )?
					int alt220=2;
					int LA220_0 = input.LA(1);
					if ( (LA220_0==PLSQL_NON_RESERVED_USING) ) {
						alt220=1;
					}
					switch (alt220) {
						case 1 :
							// PLSQLPrinter.g:1057:38: using= using_clause
							{
							pushFollow(FOLLOW_using_clause_in_execute_immediate10123);
							using=using_clause();
							state._fsp--;

							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1058:16: using= using_clause (dynamic_returning= dynamic_returning_clause )?
					{
					pushFollow(FOLLOW_using_clause_in_execute_immediate10143);
					using=using_clause();
					state._fsp--;

					// PLSQLPrinter.g:1058:52: (dynamic_returning= dynamic_returning_clause )?
					int alt221=2;
					int LA221_0 = input.LA(1);
					if ( (LA221_0==DYNAMIC_RETURN) ) {
						alt221=1;
					}
					switch (alt221) {
						case 1 :
							// PLSQLPrinter.g:1058:52: dynamic_returning= dynamic_returning_clause
							{
							pushFollow(FOLLOW_dynamic_returning_clause_in_execute_immediate10147);
							dynamic_returning=dynamic_returning_clause();
							state._fsp--;

							}
							break;

					}

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1059:16: dynamic_returning= dynamic_returning_clause
					{
					pushFollow(FOLLOW_dynamic_returning_clause_in_execute_immediate10167);
					dynamic_returning=dynamic_returning_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1062:5: -> execute_immediate_statement(expression=$expression.stinto_clause=$into.stusing_clause=$using.stdynamic_returning_clause=$dynamic_returning.st)
			{
				retval.st = templateLib.getInstanceOf("execute_immediate_statement",new STAttrMap().put("expression", (expression179!=null?((StringTemplate)expression179.getTemplate()):null)).put("into_clause", (into!=null?((StringTemplate)into.getTemplate()):null)).put("using_clause", (using!=null?((StringTemplate)using.getTemplate()):null)).put("dynamic_returning_clause", (dynamic_returning!=null?((StringTemplate)dynamic_returning.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "execute_immediate"


	public static class dynamic_returning_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dynamic_returning_clause"
	// PLSQLPrinter.g:1068:1: dynamic_returning_clause : ^( DYNAMIC_RETURN into_clause ) -> dynamic_returning_clause(into_clause=$into_clause.st);
	public final PLSQLPrinter.dynamic_returning_clause_return dynamic_returning_clause() throws RecognitionException {
		PLSQLPrinter.dynamic_returning_clause_return retval = new PLSQLPrinter.dynamic_returning_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope into_clause180 =null;

		try {
			// PLSQLPrinter.g:1069:5: ( ^( DYNAMIC_RETURN into_clause ) -> dynamic_returning_clause(into_clause=$into_clause.st))
			// PLSQLPrinter.g:1069:10: ^( DYNAMIC_RETURN into_clause )
			{
			match(input,DYNAMIC_RETURN,FOLLOW_DYNAMIC_RETURN_in_dynamic_returning_clause10263); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_into_clause_in_dynamic_returning_clause10265);
			into_clause180=into_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1070:5: -> dynamic_returning_clause(into_clause=$into_clause.st)
			{
				retval.st = templateLib.getInstanceOf("dynamic_returning_clause",new STAttrMap().put("into_clause", (into_clause180!=null?((StringTemplate)into_clause180.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dynamic_returning_clause"


	public static class data_manipulation_language_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "data_manipulation_language_statements"
	// PLSQLPrinter.g:1077:1: data_manipulation_language_statements : ( merge_statement -> { $merge_statement.st }| lock_table_statement -> { $lock_table_statement.st }| select_statement -> { $select_statement.st }| update_statement -> { $update_statement.st }| delete_statement -> { $delete_statement.st }| insert_statement -> { $insert_statement.st });
	public final PLSQLPrinter.data_manipulation_language_statements_return data_manipulation_language_statements() throws RecognitionException {
		PLSQLPrinter.data_manipulation_language_statements_return retval = new PLSQLPrinter.data_manipulation_language_statements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope merge_statement181 =null;
		TreeRuleReturnScope lock_table_statement182 =null;
		TreeRuleReturnScope select_statement183 =null;
		TreeRuleReturnScope update_statement184 =null;
		TreeRuleReturnScope delete_statement185 =null;
		TreeRuleReturnScope insert_statement186 =null;

		try {
			// PLSQLPrinter.g:1078:5: ( merge_statement -> { $merge_statement.st }| lock_table_statement -> { $lock_table_statement.st }| select_statement -> { $select_statement.st }| update_statement -> { $update_statement.st }| delete_statement -> { $delete_statement.st }| insert_statement -> { $insert_statement.st })
			int alt223=6;
			switch ( input.LA(1) ) {
			case MERGE_VK:
				{
				alt223=1;
				}
				break;
			case PLSQL_RESERVED_LOCK:
				{
				alt223=2;
				}
				break;
			case SELECT_STATEMENT:
				{
				alt223=3;
				}
				break;
			case SQL92_RESERVED_UPDATE:
				{
				alt223=4;
				}
				break;
			case SQL92_RESERVED_DELETE:
				{
				alt223=5;
				}
				break;
			case SQL92_RESERVED_INSERT:
				{
				alt223=6;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 223, 0, input);
				throw nvae;
			}
			switch (alt223) {
				case 1 :
					// PLSQLPrinter.g:1078:10: merge_statement
					{
					pushFollow(FOLLOW_merge_statement_in_data_manipulation_language_statements10305);
					merge_statement181=merge_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1078:26: -> { $merge_statement.st }
					{
						retval.st =  (merge_statement181!=null?((StringTemplate)merge_statement181.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1079:10: lock_table_statement
					{
					pushFollow(FOLLOW_lock_table_statement_in_data_manipulation_language_statements10320);
					lock_table_statement182=lock_table_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1079:31: -> { $lock_table_statement.st }
					{
						retval.st =  (lock_table_statement182!=null?((StringTemplate)lock_table_statement182.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1080:10: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_data_manipulation_language_statements10335);
					select_statement183=select_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1080:27: -> { $select_statement.st }
					{
						retval.st =  (select_statement183!=null?((StringTemplate)select_statement183.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1081:10: update_statement
					{
					pushFollow(FOLLOW_update_statement_in_data_manipulation_language_statements10350);
					update_statement184=update_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1081:27: -> { $update_statement.st }
					{
						retval.st =  (update_statement184!=null?((StringTemplate)update_statement184.getTemplate()):null) ;
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1082:10: delete_statement
					{
					pushFollow(FOLLOW_delete_statement_in_data_manipulation_language_statements10365);
					delete_statement185=delete_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1082:27: -> { $delete_statement.st }
					{
						retval.st =  (delete_statement185!=null?((StringTemplate)delete_statement185.getTemplate()):null) ;
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:1083:10: insert_statement
					{
					pushFollow(FOLLOW_insert_statement_in_data_manipulation_language_statements10380);
					insert_statement186=insert_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1083:27: -> { $insert_statement.st }
					{
						retval.st =  (insert_statement186!=null?((StringTemplate)insert_statement186.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "data_manipulation_language_statements"


	public static class select_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "select_statement"
	// PLSQLPrinter.g:1086:1: select_statement : ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( order_by_clause )? ( for_update_clause )? ) -> select_statement(subquery_factoring_clause=$subquery_factoring_clause.stsubquery=$subquery.storder_by_clause=$order_by_clause.stfor_update_clause=$for_update_clause.st);
	public final PLSQLPrinter.select_statement_return select_statement() throws RecognitionException {
		PLSQLPrinter.select_statement_return retval = new PLSQLPrinter.select_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope subquery_factoring_clause187 =null;
		TreeRuleReturnScope subquery188 =null;
		TreeRuleReturnScope order_by_clause189 =null;
		TreeRuleReturnScope for_update_clause190 =null;

		try {
			// PLSQLPrinter.g:1087:5: ( ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( order_by_clause )? ( for_update_clause )? ) -> select_statement(subquery_factoring_clause=$subquery_factoring_clause.stsubquery=$subquery.storder_by_clause=$order_by_clause.stfor_update_clause=$for_update_clause.st))
			// PLSQLPrinter.g:1087:10: ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( order_by_clause )? ( for_update_clause )? )
			{
			match(input,SELECT_STATEMENT,FOLLOW_SELECT_STATEMENT_in_select_statement10405); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1087:29: ( subquery_factoring_clause )?
			int alt224=2;
			int LA224_0 = input.LA(1);
			if ( (LA224_0==SQL92_RESERVED_WITH) ) {
				alt224=1;
			}
			switch (alt224) {
				case 1 :
					// PLSQLPrinter.g:1087:29: subquery_factoring_clause
					{
					pushFollow(FOLLOW_subquery_factoring_clause_in_select_statement10407);
					subquery_factoring_clause187=subquery_factoring_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_subquery_in_select_statement10410);
			subquery188=subquery();
			state._fsp--;

			// PLSQLPrinter.g:1087:65: ( order_by_clause )?
			int alt225=2;
			int LA225_0 = input.LA(1);
			if ( (LA225_0==SQL92_RESERVED_ORDER) ) {
				alt225=1;
			}
			switch (alt225) {
				case 1 :
					// PLSQLPrinter.g:1087:65: order_by_clause
					{
					pushFollow(FOLLOW_order_by_clause_in_select_statement10412);
					order_by_clause189=order_by_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1087:82: ( for_update_clause )?
			int alt226=2;
			int LA226_0 = input.LA(1);
			if ( (LA226_0==SQL92_RESERVED_FOR) ) {
				alt226=1;
			}
			switch (alt226) {
				case 1 :
					// PLSQLPrinter.g:1087:82: for_update_clause
					{
					pushFollow(FOLLOW_for_update_clause_in_select_statement10415);
					for_update_clause190=for_update_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1088:5: -> select_statement(subquery_factoring_clause=$subquery_factoring_clause.stsubquery=$subquery.storder_by_clause=$order_by_clause.stfor_update_clause=$for_update_clause.st)
			{
				retval.st = templateLib.getInstanceOf("select_statement",new STAttrMap().put("subquery_factoring_clause", (subquery_factoring_clause187!=null?((StringTemplate)subquery_factoring_clause187.getTemplate()):null)).put("subquery", (subquery188!=null?((StringTemplate)subquery188.getTemplate()):null)).put("order_by_clause", (order_by_clause189!=null?((StringTemplate)order_by_clause189.getTemplate()):null)).put("for_update_clause", (for_update_clause190!=null?((StringTemplate)for_update_clause190.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "select_statement"


	public static class subquery_factoring_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_factoring_clause"
	// PLSQLPrinter.g:1096:1: subquery_factoring_clause : ^( SQL92_RESERVED_WITH ( RECURSIVE_VK )? (factoring_elements+= factoring_element )+ ) -> subquery_factoring_clause(is_recursive=$RECURSIVE_VK != nullfactoring_elements=$factoring_elements);
	public final PLSQLPrinter.subquery_factoring_clause_return subquery_factoring_clause() throws RecognitionException {
		PLSQLPrinter.subquery_factoring_clause_return retval = new PLSQLPrinter.subquery_factoring_clause_return();
		retval.start = input.LT(1);

		CommonTree RECURSIVE_VK191=null;
		List<Object> list_factoring_elements=null;
		RuleReturnScope factoring_elements = null;
		try {
			// PLSQLPrinter.g:1097:5: ( ^( SQL92_RESERVED_WITH ( RECURSIVE_VK )? (factoring_elements+= factoring_element )+ ) -> subquery_factoring_clause(is_recursive=$RECURSIVE_VK != nullfactoring_elements=$factoring_elements))
			// PLSQLPrinter.g:1097:10: ^( SQL92_RESERVED_WITH ( RECURSIVE_VK )? (factoring_elements+= factoring_element )+ )
			{
			match(input,SQL92_RESERVED_WITH,FOLLOW_SQL92_RESERVED_WITH_in_subquery_factoring_clause10518); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1097:32: ( RECURSIVE_VK )?
			int alt227=2;
			int LA227_0 = input.LA(1);
			if ( (LA227_0==RECURSIVE_VK) ) {
				alt227=1;
			}
			switch (alt227) {
				case 1 :
					// PLSQLPrinter.g:1097:32: RECURSIVE_VK
					{
					RECURSIVE_VK191=(CommonTree)match(input,RECURSIVE_VK,FOLLOW_RECURSIVE_VK_in_subquery_factoring_clause10520); 
					}
					break;

			}

			// PLSQLPrinter.g:1097:64: (factoring_elements+= factoring_element )+
			int cnt228=0;
			loop228:
			while (true) {
				int alt228=2;
				int LA228_0 = input.LA(1);
				if ( (LA228_0==FACTORING) ) {
					alt228=1;
				}

				switch (alt228) {
				case 1 :
					// PLSQLPrinter.g:1097:64: factoring_elements+= factoring_element
					{
					pushFollow(FOLLOW_factoring_element_in_subquery_factoring_clause10525);
					factoring_elements=factoring_element();
					state._fsp--;

					if (list_factoring_elements==null) list_factoring_elements=new ArrayList<Object>();
					list_factoring_elements.add(factoring_elements.getTemplate());
					}
					break;

				default :
					if ( cnt228 >= 1 ) break loop228;
					EarlyExitException eee = new EarlyExitException(228, input);
					throw eee;
				}
				cnt228++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1098:5: -> subquery_factoring_clause(is_recursive=$RECURSIVE_VK != nullfactoring_elements=$factoring_elements)
			{
				retval.st = templateLib.getInstanceOf("subquery_factoring_clause",new STAttrMap().put("is_recursive", RECURSIVE_VK191 != null).put("factoring_elements", list_factoring_elements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_factoring_clause"


	public static class factoring_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "factoring_element"
	// PLSQLPrinter.g:1101:1: factoring_element : ^( FACTORING query_name (column_names+= column_name )* subquery ( order_by_clause )? ) -> factoring_element(query_name=$query_name.stcolumn_names=$column_namessubquery=$subquery.storder_by_clause=$order_by_clause.st);
	public final PLSQLPrinter.factoring_element_return factoring_element() throws RecognitionException {
		PLSQLPrinter.factoring_element_return retval = new PLSQLPrinter.factoring_element_return();
		retval.start = input.LT(1);

		List<Object> list_column_names=null;
		TreeRuleReturnScope query_name192 =null;
		TreeRuleReturnScope subquery193 =null;
		TreeRuleReturnScope order_by_clause194 =null;
		RuleReturnScope column_names = null;
		try {
			// PLSQLPrinter.g:1102:5: ( ^( FACTORING query_name (column_names+= column_name )* subquery ( order_by_clause )? ) -> factoring_element(query_name=$query_name.stcolumn_names=$column_namessubquery=$subquery.storder_by_clause=$order_by_clause.st))
			// PLSQLPrinter.g:1102:10: ^( FACTORING query_name (column_names+= column_name )* subquery ( order_by_clause )? )
			{
			match(input,FACTORING,FOLLOW_FACTORING_in_factoring_element10568); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_query_name_in_factoring_element10570);
			query_name192=query_name();
			state._fsp--;

			// PLSQLPrinter.g:1102:45: (column_names+= column_name )*
			loop229:
			while (true) {
				int alt229=2;
				int LA229_0 = input.LA(1);
				if ( (LA229_0==COLUMN_NAME) ) {
					alt229=1;
				}

				switch (alt229) {
				case 1 :
					// PLSQLPrinter.g:1102:45: column_names+= column_name
					{
					pushFollow(FOLLOW_column_name_in_factoring_element10574);
					column_names=column_name();
					state._fsp--;

					if (list_column_names==null) list_column_names=new ArrayList<Object>();
					list_column_names.add(column_names.getTemplate());
					}
					break;

				default :
					break loop229;
				}
			}

			pushFollow(FOLLOW_subquery_in_factoring_element10577);
			subquery193=subquery();
			state._fsp--;

			// PLSQLPrinter.g:1102:69: ( order_by_clause )?
			int alt230=2;
			int LA230_0 = input.LA(1);
			if ( (LA230_0==SQL92_RESERVED_ORDER) ) {
				alt230=1;
			}
			switch (alt230) {
				case 1 :
					// PLSQLPrinter.g:1102:69: order_by_clause
					{
					pushFollow(FOLLOW_order_by_clause_in_factoring_element10579);
					order_by_clause194=order_by_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1103:5: -> factoring_element(query_name=$query_name.stcolumn_names=$column_namessubquery=$subquery.storder_by_clause=$order_by_clause.st)
			{
				retval.st = templateLib.getInstanceOf("factoring_element",new STAttrMap().put("query_name", (query_name192!=null?((StringTemplate)query_name192.getTemplate()):null)).put("column_names", list_column_names).put("subquery", (subquery193!=null?((StringTemplate)subquery193.getTemplate()):null)).put("order_by_clause", (order_by_clause194!=null?((StringTemplate)order_by_clause194.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factoring_element"


	public static class subquery_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery"
	// PLSQLPrinter.g:1108:1: subquery : ^( SUBQUERY subquery_basic_elements (parts+= subquery_operation_part )* ) -> subquery(subquery_basic_elements=$subquery_basic_elements.stsubquery_operation_parts=$parts);
	public final PLSQLPrinter.subquery_return subquery() throws RecognitionException {
		PLSQLPrinter.subquery_return retval = new PLSQLPrinter.subquery_return();
		retval.start = input.LT(1);

		List<Object> list_parts=null;
		TreeRuleReturnScope subquery_basic_elements195 =null;
		RuleReturnScope parts = null;
		try {
			// PLSQLPrinter.g:1109:5: ( ^( SUBQUERY subquery_basic_elements (parts+= subquery_operation_part )* ) -> subquery(subquery_basic_elements=$subquery_basic_elements.stsubquery_operation_parts=$parts))
			// PLSQLPrinter.g:1109:10: ^( SUBQUERY subquery_basic_elements (parts+= subquery_operation_part )* )
			{
			match(input,SUBQUERY,FOLLOW_SUBQUERY_in_subquery10659); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_subquery_basic_elements_in_subquery10661);
			subquery_basic_elements195=subquery_basic_elements();
			state._fsp--;

			// PLSQLPrinter.g:1109:50: (parts+= subquery_operation_part )*
			loop231:
			while (true) {
				int alt231=2;
				int LA231_0 = input.LA(1);
				if ( (LA231_0==PLSQL_RESERVED_MINUS||LA231_0==SQL92_RESERVED_INTERSECT||LA231_0==SQL92_RESERVED_UNION) ) {
					alt231=1;
				}

				switch (alt231) {
				case 1 :
					// PLSQLPrinter.g:1109:50: parts+= subquery_operation_part
					{
					pushFollow(FOLLOW_subquery_operation_part_in_subquery10665);
					parts=subquery_operation_part();
					state._fsp--;

					if (list_parts==null) list_parts=new ArrayList<Object>();
					list_parts.add(parts.getTemplate());
					}
					break;

				default :
					break loop231;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1110:5: -> subquery(subquery_basic_elements=$subquery_basic_elements.stsubquery_operation_parts=$parts)
			{
				retval.st = templateLib.getInstanceOf("subquery",new STAttrMap().put("subquery_basic_elements", (subquery_basic_elements195!=null?((StringTemplate)subquery_basic_elements195.getTemplate()):null)).put("subquery_operation_parts", list_parts));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery"


	public static class subquery_operation_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_operation_part"
	// PLSQLPrinter.g:1113:1: subquery_operation_part : ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements ) -> subquery_operation_part(operator=opis_all=$SQL92_RESERVED_ALL != nullsubquery_basic_elements=$subquery_basic_elements.st);
	public final PLSQLPrinter.subquery_operation_part_return subquery_operation_part() throws RecognitionException {
		PLSQLPrinter.subquery_operation_part_return retval = new PLSQLPrinter.subquery_operation_part_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_ALL196=null;
		TreeRuleReturnScope subquery_basic_elements197 =null;

		 String op = null; 
		try {
			// PLSQLPrinter.g:1115:5: ( ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements ) -> subquery_operation_part(operator=opis_all=$SQL92_RESERVED_ALL != nullsubquery_basic_elements=$subquery_basic_elements.st))
			// PLSQLPrinter.g:1115:10: ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements )
			{
			// PLSQLPrinter.g:1116:13: ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS )
			int alt232=3;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_UNION:
				{
				alt232=1;
				}
				break;
			case SQL92_RESERVED_INTERSECT:
				{
				alt232=2;
				}
				break;
			case PLSQL_RESERVED_MINUS:
				{
				alt232=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 232, 0, input);
				throw nvae;
			}
			switch (alt232) {
				case 1 :
					// PLSQLPrinter.g:1117:15: SQL92_RESERVED_UNION
					{
					match(input,SQL92_RESERVED_UNION,FOLLOW_SQL92_RESERVED_UNION_in_subquery_operation_part10742); 
					 op = "union"; 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1118:16: SQL92_RESERVED_INTERSECT
					{
					match(input,SQL92_RESERVED_INTERSECT,FOLLOW_SQL92_RESERVED_INTERSECT_in_subquery_operation_part10761); 
					 op = "intersect"; 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:1119:16: PLSQL_RESERVED_MINUS
					{
					match(input,PLSQL_RESERVED_MINUS,FOLLOW_PLSQL_RESERVED_MINUS_in_subquery_operation_part10780); 
					 op = "minus"; 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1121:13: ( SQL92_RESERVED_ALL )?
			int alt233=2;
			int LA233_0 = input.LA(1);
			if ( (LA233_0==SQL92_RESERVED_ALL) ) {
				alt233=1;
			}
			switch (alt233) {
				case 1 :
					// PLSQLPrinter.g:1121:13: SQL92_RESERVED_ALL
					{
					SQL92_RESERVED_ALL196=(CommonTree)match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_subquery_operation_part10810); 
					}
					break;

			}

			pushFollow(FOLLOW_subquery_basic_elements_in_subquery_operation_part10813);
			subquery_basic_elements197=subquery_basic_elements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1123:5: -> subquery_operation_part(operator=opis_all=$SQL92_RESERVED_ALL != nullsubquery_basic_elements=$subquery_basic_elements.st)
			{
				retval.st = templateLib.getInstanceOf("subquery_operation_part",new STAttrMap().put("operator", op).put("is_all", SQL92_RESERVED_ALL196 != null).put("subquery_basic_elements", (subquery_basic_elements197!=null?((StringTemplate)subquery_basic_elements197.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_operation_part"


	public static class subquery_basic_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_basic_elements"
	// PLSQLPrinter.g:1126:1: subquery_basic_elements : ( query_block -> { $query_block.st }| subquery -> in_parens(val=$subquery.st));
	public final PLSQLPrinter.subquery_basic_elements_return subquery_basic_elements() throws RecognitionException {
		PLSQLPrinter.subquery_basic_elements_return retval = new PLSQLPrinter.subquery_basic_elements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope query_block198 =null;
		TreeRuleReturnScope subquery199 =null;

		try {
			// PLSQLPrinter.g:1127:5: ( query_block -> { $query_block.st }| subquery -> in_parens(val=$subquery.st))
			int alt234=2;
			int LA234_0 = input.LA(1);
			if ( (LA234_0==SQL92_RESERVED_SELECT) ) {
				alt234=1;
			}
			else if ( (LA234_0==SUBQUERY) ) {
				alt234=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 234, 0, input);
				throw nvae;
			}

			switch (alt234) {
				case 1 :
					// PLSQLPrinter.g:1127:10: query_block
					{
					pushFollow(FOLLOW_query_block_in_subquery_basic_elements10870);
					query_block198=query_block();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1127:22: -> { $query_block.st }
					{
						retval.st =  (query_block198!=null?((StringTemplate)query_block198.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1128:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_subquery_basic_elements10885);
					subquery199=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1129:5: -> in_parens(val=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (subquery199!=null?((StringTemplate)subquery199.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_basic_elements"


	public static class query_block_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_block"
	// PLSQLPrinter.g:1132:1: query_block : ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) -> query_block(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullselected_elements=$selectedinto_clause=$into_clause.stfrom_clause=$from_clause.stwhere_clause=$where_clause.sthierarchical_query_clause=$hierarchical_query_clause.stgroup_by_clause=$group_by_clause.stmodel_clause=$model_clause.st);
	public final PLSQLPrinter.query_block_return query_block() throws RecognitionException {
		PLSQLPrinter.query_block_return retval = new PLSQLPrinter.query_block_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_DISTINCT200=null;
		CommonTree SQL92_RESERVED_UNIQUE201=null;
		CommonTree SQL92_RESERVED_ALL202=null;
		CommonTree ASTERISK203=null;
		List<Object> list_selected=null;
		TreeRuleReturnScope into_clause204 =null;
		TreeRuleReturnScope from_clause205 =null;
		TreeRuleReturnScope where_clause206 =null;
		TreeRuleReturnScope hierarchical_query_clause207 =null;
		TreeRuleReturnScope group_by_clause208 =null;
		TreeRuleReturnScope model_clause209 =null;
		RuleReturnScope selected = null;
		try {
			// PLSQLPrinter.g:1133:5: ( ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) -> query_block(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullselected_elements=$selectedinto_clause=$into_clause.stfrom_clause=$from_clause.stwhere_clause=$where_clause.sthierarchical_query_clause=$hierarchical_query_clause.stgroup_by_clause=$group_by_clause.stmodel_clause=$model_clause.st))
			// PLSQLPrinter.g:1133:10: ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
			{
			match(input,SQL92_RESERVED_SELECT,FOLLOW_SQL92_RESERVED_SELECT_in_query_block10921); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_from_clause_in_query_block10936);
			from_clause205=from_clause();
			state._fsp--;

			// PLSQLPrinter.g:1135:13: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )?
			int alt235=4;
			switch ( input.LA(1) ) {
				case SQL92_RESERVED_DISTINCT:
					{
					alt235=1;
					}
					break;
				case SQL92_RESERVED_UNIQUE:
					{
					alt235=2;
					}
					break;
				case SQL92_RESERVED_ALL:
					{
					alt235=3;
					}
					break;
			}
			switch (alt235) {
				case 1 :
					// PLSQLPrinter.g:1135:14: SQL92_RESERVED_DISTINCT
					{
					SQL92_RESERVED_DISTINCT200=(CommonTree)match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_query_block10952); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1135:38: SQL92_RESERVED_UNIQUE
					{
					SQL92_RESERVED_UNIQUE201=(CommonTree)match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_query_block10954); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:1135:60: SQL92_RESERVED_ALL
					{
					SQL92_RESERVED_ALL202=(CommonTree)match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_query_block10956); 
					}
					break;

			}

			// PLSQLPrinter.g:1136:13: ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) )
			int alt237=2;
			int LA237_0 = input.LA(1);
			if ( (LA237_0==ASTERISK) ) {
				alt237=1;
			}
			else if ( (LA237_0==SELECT_LIST) ) {
				alt237=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 237, 0, input);
				throw nvae;
			}

			switch (alt237) {
				case 1 :
					// PLSQLPrinter.g:1136:18: ASTERISK
					{
					ASTERISK203=(CommonTree)match(input,ASTERISK,FOLLOW_ASTERISK_in_query_block10978); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1137:18: ^( SELECT_LIST (selected+= selected_element )+ )
					{
					match(input,SELECT_LIST,FOLLOW_SELECT_LIST_in_query_block10998); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1137:40: (selected+= selected_element )+
					int cnt236=0;
					loop236:
					while (true) {
						int alt236=2;
						int LA236_0 = input.LA(1);
						if ( (LA236_0==SELECT_ITEM) ) {
							alt236=1;
						}

						switch (alt236) {
						case 1 :
							// PLSQLPrinter.g:1137:40: selected+= selected_element
							{
							pushFollow(FOLLOW_selected_element_in_query_block11002);
							selected=selected_element();
							state._fsp--;

							if (list_selected==null) list_selected=new ArrayList<Object>();
							list_selected.add(selected.getTemplate());
							}
							break;

						default :
							if ( cnt236 >= 1 ) break loop236;
							EarlyExitException eee = new EarlyExitException(236, input);
							throw eee;
						}
						cnt236++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}

			// PLSQLPrinter.g:1139:13: ( into_clause )?
			int alt238=2;
			int LA238_0 = input.LA(1);
			if ( (LA238_0==SQL92_RESERVED_INTO||LA238_0==BULK_VK) ) {
				alt238=1;
			}
			switch (alt238) {
				case 1 :
					// PLSQLPrinter.g:1139:13: into_clause
					{
					pushFollow(FOLLOW_into_clause_in_query_block11032);
					into_clause204=into_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1139:26: ( where_clause )?
			int alt239=2;
			int LA239_0 = input.LA(1);
			if ( (LA239_0==SQL92_RESERVED_WHERE) ) {
				alt239=1;
			}
			switch (alt239) {
				case 1 :
					// PLSQLPrinter.g:1139:26: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_query_block11035);
					where_clause206=where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1139:40: ( hierarchical_query_clause )?
			int alt240=2;
			int LA240_0 = input.LA(1);
			if ( (LA240_0==HIERARCHICAL) ) {
				alt240=1;
			}
			switch (alt240) {
				case 1 :
					// PLSQLPrinter.g:1139:40: hierarchical_query_clause
					{
					pushFollow(FOLLOW_hierarchical_query_clause_in_query_block11038);
					hierarchical_query_clause207=hierarchical_query_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1140:13: ( group_by_clause )?
			int alt241=2;
			int LA241_0 = input.LA(1);
			if ( (LA241_0==SQL92_RESERVED_GROUP) ) {
				alt241=1;
			}
			switch (alt241) {
				case 1 :
					// PLSQLPrinter.g:1140:13: group_by_clause
					{
					pushFollow(FOLLOW_group_by_clause_in_query_block11054);
					group_by_clause208=group_by_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1140:30: ( model_clause )?
			int alt242=2;
			int LA242_0 = input.LA(1);
			if ( (LA242_0==PLSQL_NON_RESERVED_MODEL) ) {
				alt242=1;
			}
			switch (alt242) {
				case 1 :
					// PLSQLPrinter.g:1140:30: model_clause
					{
					pushFollow(FOLLOW_model_clause_in_query_block11057);
					model_clause209=model_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1142:5: -> query_block(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullselected_elements=$selectedinto_clause=$into_clause.stfrom_clause=$from_clause.stwhere_clause=$where_clause.sthierarchical_query_clause=$hierarchical_query_clause.stgroup_by_clause=$group_by_clause.stmodel_clause=$model_clause.st)
			{
				retval.st = templateLib.getInstanceOf("query_block",new STAttrMap().put("is_distinct", SQL92_RESERVED_DISTINCT200 != null).put("is_unique", SQL92_RESERVED_UNIQUE201 != null).put("is_all", SQL92_RESERVED_ALL202 != null).put("is_asterisk", ASTERISK203 != null).put("selected_elements", list_selected).put("into_clause", (into_clause204!=null?((StringTemplate)into_clause204.getTemplate()):null)).put("from_clause", (from_clause205!=null?((StringTemplate)from_clause205.getTemplate()):null)).put("where_clause", (where_clause206!=null?((StringTemplate)where_clause206.getTemplate()):null)).put("hierarchical_query_clause", (hierarchical_query_clause207!=null?((StringTemplate)hierarchical_query_clause207.getTemplate()):null)).put("group_by_clause", (group_by_clause208!=null?((StringTemplate)group_by_clause208.getTemplate()):null)).put("model_clause", (model_clause209!=null?((StringTemplate)model_clause209.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_block"


	public static class selected_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "selected_element"
	// PLSQLPrinter.g:1157:1: selected_element : ^( SELECT_ITEM expression ( alias )? ) -> selected_element(expression=$expression.stalias=$alias.st);
	public final PLSQLPrinter.selected_element_return selected_element() throws RecognitionException {
		PLSQLPrinter.selected_element_return retval = new PLSQLPrinter.selected_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression210 =null;
		TreeRuleReturnScope alias211 =null;

		try {
			// PLSQLPrinter.g:1158:5: ( ^( SELECT_ITEM expression ( alias )? ) -> selected_element(expression=$expression.stalias=$alias.st))
			// PLSQLPrinter.g:1158:10: ^( SELECT_ITEM expression ( alias )? )
			{
			match(input,SELECT_ITEM,FOLLOW_SELECT_ITEM_in_selected_element11286); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_selected_element11288);
			expression210=expression();
			state._fsp--;

			// PLSQLPrinter.g:1158:35: ( alias )?
			int alt243=2;
			int LA243_0 = input.LA(1);
			if ( (LA243_0==COLUMN_ALIAS||LA243_0==TABLE_ALIAS) ) {
				alt243=1;
			}
			switch (alt243) {
				case 1 :
					// PLSQLPrinter.g:1158:35: alias
					{
					pushFollow(FOLLOW_alias_in_selected_element11290);
					alias211=alias();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1159:5: -> selected_element(expression=$expression.stalias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("selected_element",new STAttrMap().put("expression", (expression210!=null?((StringTemplate)expression210.getTemplate()):null)).put("alias", (alias211!=null?((StringTemplate)alias211.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selected_element"


	public static class from_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "from_clause"
	// PLSQLPrinter.g:1162:1: from_clause : ^( SQL92_RESERVED_FROM (refs+= table_ref )+ ) -> from_clause(table_refs=$refs);
	public final PLSQLPrinter.from_clause_return from_clause() throws RecognitionException {
		PLSQLPrinter.from_clause_return retval = new PLSQLPrinter.from_clause_return();
		retval.start = input.LT(1);

		List<Object> list_refs=null;
		RuleReturnScope refs = null;
		try {
			// PLSQLPrinter.g:1163:5: ( ^( SQL92_RESERVED_FROM (refs+= table_ref )+ ) -> from_clause(table_refs=$refs))
			// PLSQLPrinter.g:1163:10: ^( SQL92_RESERVED_FROM (refs+= table_ref )+ )
			{
			match(input,SQL92_RESERVED_FROM,FOLLOW_SQL92_RESERVED_FROM_in_from_clause11333); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1163:36: (refs+= table_ref )+
			int cnt244=0;
			loop244:
			while (true) {
				int alt244=2;
				int LA244_0 = input.LA(1);
				if ( (LA244_0==TABLE_REF) ) {
					alt244=1;
				}

				switch (alt244) {
				case 1 :
					// PLSQLPrinter.g:1163:36: refs+= table_ref
					{
					pushFollow(FOLLOW_table_ref_in_from_clause11337);
					refs=table_ref();
					state._fsp--;

					if (list_refs==null) list_refs=new ArrayList<Object>();
					list_refs.add(refs.getTemplate());
					}
					break;

				default :
					if ( cnt244 >= 1 ) break loop244;
					EarlyExitException eee = new EarlyExitException(244, input);
					throw eee;
				}
				cnt244++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1164:5: -> from_clause(table_refs=$refs)
			{
				retval.st = templateLib.getInstanceOf("from_clause",new STAttrMap().put("table_refs", list_refs));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "from_clause"


	public static class table_ref_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_ref"
	// PLSQLPrinter.g:1167:1: table_ref : ^( TABLE_REF table_ref_aux (joins+= join_clause )* ) -> table_ref(table_ref_aux=$table_ref_aux.stjoin_clauses=$joins);
	public final PLSQLPrinter.table_ref_return table_ref() throws RecognitionException {
		PLSQLPrinter.table_ref_return retval = new PLSQLPrinter.table_ref_return();
		retval.start = input.LT(1);

		List<Object> list_joins=null;
		TreeRuleReturnScope table_ref_aux212 =null;
		RuleReturnScope joins = null;
		try {
			// PLSQLPrinter.g:1168:5: ( ^( TABLE_REF table_ref_aux (joins+= join_clause )* ) -> table_ref(table_ref_aux=$table_ref_aux.stjoin_clauses=$joins))
			// PLSQLPrinter.g:1168:10: ^( TABLE_REF table_ref_aux (joins+= join_clause )* )
			{
			match(input,TABLE_REF,FOLLOW_TABLE_REF_in_table_ref11375); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_table_ref_aux_in_table_ref11377);
			table_ref_aux212=table_ref_aux();
			state._fsp--;

			// PLSQLPrinter.g:1168:41: (joins+= join_clause )*
			loop245:
			while (true) {
				int alt245=2;
				int LA245_0 = input.LA(1);
				if ( (LA245_0==JOIN_DEF) ) {
					alt245=1;
				}

				switch (alt245) {
				case 1 :
					// PLSQLPrinter.g:1168:41: joins+= join_clause
					{
					pushFollow(FOLLOW_join_clause_in_table_ref11381);
					joins=join_clause();
					state._fsp--;

					if (list_joins==null) list_joins=new ArrayList<Object>();
					list_joins.add(joins.getTemplate());
					}
					break;

				default :
					break loop245;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1169:5: -> table_ref(table_ref_aux=$table_ref_aux.stjoin_clauses=$joins)
			{
				retval.st = templateLib.getInstanceOf("table_ref",new STAttrMap().put("table_ref_aux", (table_ref_aux212!=null?((StringTemplate)table_ref_aux212.getTemplate()):null)).put("join_clauses", list_joins));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_ref"


	public static class table_ref_aux_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_ref_aux"
	// PLSQLPrinter.g:1172:1: table_ref_aux : ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK | pivot_clause | unpivot_clause )? ( flashback_query_clause )* ) -> table_ref_aux(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.stpivot_clause=$pivot_clause.stunpivot_clause=$unpivot_clause.stflashback_query_clause=$flashback_query_clause.stalias=$alias.st);
	public final PLSQLPrinter.table_ref_aux_return table_ref_aux() throws RecognitionException {
		PLSQLPrinter.table_ref_aux_return retval = new PLSQLPrinter.table_ref_aux_return();
		retval.start = input.LT(1);

		CommonTree ONLY_VK213=null;
		TreeRuleReturnScope dml_table_expression_clause214 =null;
		TreeRuleReturnScope pivot_clause215 =null;
		TreeRuleReturnScope unpivot_clause216 =null;
		TreeRuleReturnScope flashback_query_clause217 =null;
		TreeRuleReturnScope alias218 =null;

		try {
			// PLSQLPrinter.g:1173:5: ( ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK | pivot_clause | unpivot_clause )? ( flashback_query_clause )* ) -> table_ref_aux(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.stpivot_clause=$pivot_clause.stunpivot_clause=$unpivot_clause.stflashback_query_clause=$flashback_query_clause.stalias=$alias.st))
			// PLSQLPrinter.g:1173:10: ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK | pivot_clause | unpivot_clause )? ( flashback_query_clause )* )
			{
			match(input,TABLE_REF_ELEMENT,FOLLOW_TABLE_REF_ELEMENT_in_table_ref_aux11424); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1173:30: ( alias )?
			int alt246=2;
			int LA246_0 = input.LA(1);
			if ( (LA246_0==COLUMN_ALIAS||LA246_0==TABLE_ALIAS) ) {
				alt246=1;
			}
			switch (alt246) {
				case 1 :
					// PLSQLPrinter.g:1173:30: alias
					{
					pushFollow(FOLLOW_alias_in_table_ref_aux11426);
					alias218=alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_table_expression_clause_in_table_ref_aux11429);
			dml_table_expression_clause214=dml_table_expression_clause();
			state._fsp--;

			// PLSQLPrinter.g:1173:65: ( ONLY_VK | pivot_clause | unpivot_clause )?
			int alt247=4;
			switch ( input.LA(1) ) {
				case ONLY_VK:
					{
					alt247=1;
					}
					break;
				case PIVOT_VK:
					{
					alt247=2;
					}
					break;
				case UNPIVOT_VK:
					{
					alt247=3;
					}
					break;
			}
			switch (alt247) {
				case 1 :
					// PLSQLPrinter.g:1173:66: ONLY_VK
					{
					ONLY_VK213=(CommonTree)match(input,ONLY_VK,FOLLOW_ONLY_VK_in_table_ref_aux11432); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1173:74: pivot_clause
					{
					pushFollow(FOLLOW_pivot_clause_in_table_ref_aux11434);
					pivot_clause215=pivot_clause();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1173:87: unpivot_clause
					{
					pushFollow(FOLLOW_unpivot_clause_in_table_ref_aux11436);
					unpivot_clause216=unpivot_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1173:104: ( flashback_query_clause )*
			loop248:
			while (true) {
				int alt248=2;
				int LA248_0 = input.LA(1);
				if ( (LA248_0==SQL92_RESERVED_AS||LA248_0==VERSIONS_VK) ) {
					alt248=1;
				}

				switch (alt248) {
				case 1 :
					// PLSQLPrinter.g:1173:104: flashback_query_clause
					{
					pushFollow(FOLLOW_flashback_query_clause_in_table_ref_aux11440);
					flashback_query_clause217=flashback_query_clause();
					state._fsp--;

					}
					break;

				default :
					break loop248;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1174:5: -> table_ref_aux(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.stpivot_clause=$pivot_clause.stunpivot_clause=$unpivot_clause.stflashback_query_clause=$flashback_query_clause.stalias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("table_ref_aux",new STAttrMap().put("is_only", ONLY_VK213 != null).put("dml_table_expression_clause", (dml_table_expression_clause214!=null?((StringTemplate)dml_table_expression_clause214.getTemplate()):null)).put("pivot_clause", (pivot_clause215!=null?((StringTemplate)pivot_clause215.getTemplate()):null)).put("unpivot_clause", (unpivot_clause216!=null?((StringTemplate)unpivot_clause216.getTemplate()):null)).put("flashback_query_clause", (flashback_query_clause217!=null?((StringTemplate)flashback_query_clause217.getTemplate()):null)).put("alias", (alias218!=null?((StringTemplate)alias218.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_ref_aux"


	public static class join_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "join_clause"
	// PLSQLPrinter.g:1180:1: join_clause : ^( JOIN_DEF (qpc1= query_partition_clause )? ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )? ) -> join_clause(qpc1=$qpc1.stis_cross=$CROSS_VK != nullis_natural=$NATURAL_VK != nullis_inner=$INNER_VK != nullis_left=$LEFT_VK != nullis_right=$RIGHT_VK != nullis_full=$FULL_VK != nulltable_ref_aux=$table_ref_aux.stqpc2=$qpc2.stjoin_on_part=$join_on_part.stjoin_using_part=$join_using_part.st);
	public final PLSQLPrinter.join_clause_return join_clause() throws RecognitionException {
		PLSQLPrinter.join_clause_return retval = new PLSQLPrinter.join_clause_return();
		retval.start = input.LT(1);

		CommonTree CROSS_VK219=null;
		CommonTree NATURAL_VK220=null;
		CommonTree INNER_VK221=null;
		CommonTree LEFT_VK222=null;
		CommonTree RIGHT_VK223=null;
		CommonTree FULL_VK224=null;
		TreeRuleReturnScope qpc1 =null;
		TreeRuleReturnScope qpc2 =null;
		TreeRuleReturnScope table_ref_aux225 =null;
		TreeRuleReturnScope join_on_part226 =null;
		TreeRuleReturnScope join_using_part227 =null;

		try {
			// PLSQLPrinter.g:1181:5: ( ^( JOIN_DEF (qpc1= query_partition_clause )? ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )? ) -> join_clause(qpc1=$qpc1.stis_cross=$CROSS_VK != nullis_natural=$NATURAL_VK != nullis_inner=$INNER_VK != nullis_left=$LEFT_VK != nullis_right=$RIGHT_VK != nullis_full=$FULL_VK != nulltable_ref_aux=$table_ref_aux.stqpc2=$qpc2.stjoin_on_part=$join_on_part.stjoin_using_part=$join_using_part.st))
			// PLSQLPrinter.g:1181:10: ^( JOIN_DEF (qpc1= query_partition_clause )? ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )? )
			{
			match(input,JOIN_DEF,FOLLOW_JOIN_DEF_in_join_clause11537); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1182:17: (qpc1= query_partition_clause )?
			int alt249=2;
			int LA249_0 = input.LA(1);
			if ( (LA249_0==PARTITION_VK) ) {
				alt249=1;
			}
			switch (alt249) {
				case 1 :
					// PLSQLPrinter.g:1182:17: qpc1= query_partition_clause
					{
					pushFollow(FOLLOW_query_partition_clause_in_join_clause11553);
					qpc1=query_partition_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1183:13: ( CROSS_VK | NATURAL_VK )?
			int alt250=3;
			int LA250_0 = input.LA(1);
			if ( (LA250_0==CROSS_VK) ) {
				alt250=1;
			}
			else if ( (LA250_0==NATURAL_VK) ) {
				alt250=2;
			}
			switch (alt250) {
				case 1 :
					// PLSQLPrinter.g:1183:14: CROSS_VK
					{
					CROSS_VK219=(CommonTree)match(input,CROSS_VK,FOLLOW_CROSS_VK_in_join_clause11569); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1183:23: NATURAL_VK
					{
					NATURAL_VK220=(CommonTree)match(input,NATURAL_VK,FOLLOW_NATURAL_VK_in_join_clause11571); 
					}
					break;

			}

			// PLSQLPrinter.g:1183:36: ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )?
			int alt251=5;
			switch ( input.LA(1) ) {
				case INNER_VK:
					{
					alt251=1;
					}
					break;
				case FULL_VK:
					{
					alt251=2;
					}
					break;
				case LEFT_VK:
					{
					alt251=3;
					}
					break;
				case RIGHT_VK:
					{
					alt251=4;
					}
					break;
			}
			switch (alt251) {
				case 1 :
					// PLSQLPrinter.g:1183:37: INNER_VK
					{
					INNER_VK221=(CommonTree)match(input,INNER_VK,FOLLOW_INNER_VK_in_join_clause11576); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1183:46: FULL_VK
					{
					FULL_VK224=(CommonTree)match(input,FULL_VK,FOLLOW_FULL_VK_in_join_clause11578); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:1183:54: LEFT_VK
					{
					LEFT_VK222=(CommonTree)match(input,LEFT_VK,FOLLOW_LEFT_VK_in_join_clause11580); 
					}
					break;
				case 4 :
					// PLSQLPrinter.g:1183:62: RIGHT_VK
					{
					RIGHT_VK223=(CommonTree)match(input,RIGHT_VK,FOLLOW_RIGHT_VK_in_join_clause11582); 
					}
					break;

			}

			pushFollow(FOLLOW_table_ref_aux_in_join_clause11586);
			table_ref_aux225=table_ref_aux();
			state._fsp--;

			// PLSQLPrinter.g:1184:17: (qpc2= query_partition_clause )?
			int alt252=2;
			int LA252_0 = input.LA(1);
			if ( (LA252_0==PARTITION_VK) ) {
				alt252=1;
			}
			switch (alt252) {
				case 1 :
					// PLSQLPrinter.g:1184:17: qpc2= query_partition_clause
					{
					pushFollow(FOLLOW_query_partition_clause_in_join_clause11602);
					qpc2=query_partition_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1185:13: ( join_on_part | join_using_part )?
			int alt253=3;
			int LA253_0 = input.LA(1);
			if ( (LA253_0==SQL92_RESERVED_ON) ) {
				alt253=1;
			}
			else if ( (LA253_0==PLSQL_NON_RESERVED_USING) ) {
				alt253=2;
			}
			switch (alt253) {
				case 1 :
					// PLSQLPrinter.g:1185:14: join_on_part
					{
					pushFollow(FOLLOW_join_on_part_in_join_clause11618);
					join_on_part226=join_on_part();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1185:27: join_using_part
					{
					pushFollow(FOLLOW_join_using_part_in_join_clause11620);
					join_using_part227=join_using_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1186:5: -> join_clause(qpc1=$qpc1.stis_cross=$CROSS_VK != nullis_natural=$NATURAL_VK != nullis_inner=$INNER_VK != nullis_left=$LEFT_VK != nullis_right=$RIGHT_VK != nullis_full=$FULL_VK != nulltable_ref_aux=$table_ref_aux.stqpc2=$qpc2.stjoin_on_part=$join_on_part.stjoin_using_part=$join_using_part.st)
			{
				retval.st = templateLib.getInstanceOf("join_clause",new STAttrMap().put("qpc1", (qpc1!=null?((StringTemplate)qpc1.getTemplate()):null)).put("is_cross", CROSS_VK219 != null).put("is_natural", NATURAL_VK220 != null).put("is_inner", INNER_VK221 != null).put("is_left", LEFT_VK222 != null).put("is_right", RIGHT_VK223 != null).put("is_full", FULL_VK224 != null).put("table_ref_aux", (table_ref_aux225!=null?((StringTemplate)table_ref_aux225.getTemplate()):null)).put("qpc2", (qpc2!=null?((StringTemplate)qpc2.getTemplate()):null)).put("join_on_part", (join_on_part226!=null?((StringTemplate)join_on_part226.getTemplate()):null)).put("join_using_part", (join_using_part227!=null?((StringTemplate)join_using_part227.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_clause"


	public static class join_on_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "join_on_part"
	// PLSQLPrinter.g:1192:1: join_on_part : ^( SQL92_RESERVED_ON expression ) -> join_on_part(expression=$expression.st);
	public final PLSQLPrinter.join_on_part_return join_on_part() throws RecognitionException {
		PLSQLPrinter.join_on_part_return retval = new PLSQLPrinter.join_on_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression228 =null;

		try {
			// PLSQLPrinter.g:1193:5: ( ^( SQL92_RESERVED_ON expression ) -> join_on_part(expression=$expression.st))
			// PLSQLPrinter.g:1193:10: ^( SQL92_RESERVED_ON expression )
			{
			match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_join_on_part11746); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_join_on_part11748);
			expression228=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1194:5: -> join_on_part(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("join_on_part",new STAttrMap().put("expression", (expression228!=null?((StringTemplate)expression228.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_on_part"


	public static class join_using_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "join_using_part"
	// PLSQLPrinter.g:1197:1: join_using_part : ^( PLSQL_NON_RESERVED_USING ( column_name )+ ) -> template( \"not implemented: join_using_part\";
	public final PLSQLPrinter.join_using_part_return join_using_part() throws RecognitionException {
		PLSQLPrinter.join_using_part_return retval = new PLSQLPrinter.join_using_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1198:5: ( ^( PLSQL_NON_RESERVED_USING ( column_name )+ ) -> template( \"not implemented: join_using_part\")
			// PLSQLPrinter.g:1198:10: ^( PLSQL_NON_RESERVED_USING ( column_name )+ )
			{
			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_join_using_part11785); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1198:37: ( column_name )+
			int cnt254=0;
			loop254:
			while (true) {
				int alt254=2;
				int LA254_0 = input.LA(1);
				if ( (LA254_0==COLUMN_NAME) ) {
					alt254=1;
				}

				switch (alt254) {
				case 1 :
					// PLSQLPrinter.g:1198:37: column_name
					{
					pushFollow(FOLLOW_column_name_in_join_using_part11787);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt254 >= 1 ) break loop254;
					EarlyExitException eee = new EarlyExitException(254, input);
					throw eee;
				}
				cnt254++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1199:5: -> template( \"not implemented: join_using_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: join_using_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_using_part"


	public static class query_partition_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_partition_clause"
	// PLSQLPrinter.g:1202:1: query_partition_clause : ^( PARTITION_VK query_partition_clause_impl ) -> query_partition_clause(impl=$query_partition_clause_impl.st);
	public final PLSQLPrinter.query_partition_clause_return query_partition_clause() throws RecognitionException {
		PLSQLPrinter.query_partition_clause_return retval = new PLSQLPrinter.query_partition_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope query_partition_clause_impl229 =null;

		try {
			// PLSQLPrinter.g:1203:5: ( ^( PARTITION_VK query_partition_clause_impl ) -> query_partition_clause(impl=$query_partition_clause_impl.st))
			// PLSQLPrinter.g:1203:10: ^( PARTITION_VK query_partition_clause_impl )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_query_partition_clause11824); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_query_partition_clause_impl_in_query_partition_clause11826);
			query_partition_clause_impl229=query_partition_clause_impl();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1204:5: -> query_partition_clause(impl=$query_partition_clause_impl.st)
			{
				retval.st = templateLib.getInstanceOf("query_partition_clause",new STAttrMap().put("impl", (query_partition_clause_impl229!=null?((StringTemplate)query_partition_clause_impl229.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_partition_clause"


	public static class query_partition_clause_impl_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_partition_clause_impl"
	// PLSQLPrinter.g:1207:1: query_partition_clause_impl : ( subquery -> in_parens(val=$subquery.st)| expression_list -> { $expression_list.st }| (expressions+= expression )+ -> query_partition_clause_impl_expressions(expressions=$expressions));
	public final PLSQLPrinter.query_partition_clause_impl_return query_partition_clause_impl() throws RecognitionException {
		PLSQLPrinter.query_partition_clause_impl_return retval = new PLSQLPrinter.query_partition_clause_impl_return();
		retval.start = input.LT(1);

		List<Object> list_expressions=null;
		TreeRuleReturnScope subquery230 =null;
		TreeRuleReturnScope expression_list231 =null;
		RuleReturnScope expressions = null;
		try {
			// PLSQLPrinter.g:1208:5: ( subquery -> in_parens(val=$subquery.st)| expression_list -> { $expression_list.st }| (expressions+= expression )+ -> query_partition_clause_impl_expressions(expressions=$expressions))
			int alt256=3;
			switch ( input.LA(1) ) {
			case SUBQUERY:
				{
				alt256=1;
				}
				break;
			case EXPR_LIST:
				{
				alt256=2;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt256=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 256, 0, input);
				throw nvae;
			}
			switch (alt256) {
				case 1 :
					// PLSQLPrinter.g:1208:9: subquery
					{
					pushFollow(FOLLOW_subquery_in_query_partition_clause_impl11865);
					subquery230=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1208:18: -> in_parens(val=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (subquery230!=null?((StringTemplate)subquery230.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1209:11: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_query_partition_clause_impl11886);
					expression_list231=expression_list();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1209:27: -> { $expression_list.st }
					{
						retval.st =  (expression_list231!=null?((StringTemplate)expression_list231.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1210:11: (expressions+= expression )+
					{
					// PLSQLPrinter.g:1210:22: (expressions+= expression )+
					int cnt255=0;
					loop255:
					while (true) {
						int alt255=2;
						int LA255_0 = input.LA(1);
						if ( (LA255_0==EXPR||LA255_0==LOGIC_EXPR) ) {
							alt255=1;
						}

						switch (alt255) {
						case 1 :
							// PLSQLPrinter.g:1210:22: expressions+= expression
							{
							pushFollow(FOLLOW_expression_in_query_partition_clause_impl11904);
							expressions=expression();
							state._fsp--;

							if (list_expressions==null) list_expressions=new ArrayList<Object>();
							list_expressions.add(expressions.getTemplate());
							}
							break;

						default :
							if ( cnt255 >= 1 ) break loop255;
							EarlyExitException eee = new EarlyExitException(255, input);
							throw eee;
						}
						cnt255++;
					}

					// TEMPLATE REWRITE
					// 1210:36: -> query_partition_clause_impl_expressions(expressions=$expressions)
					{
						retval.st = templateLib.getInstanceOf("query_partition_clause_impl_expressions",new STAttrMap().put("expressions", list_expressions));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_partition_clause_impl"


	public static class flashback_query_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "flashback_query_clause"
	// PLSQLPrinter.g:1213:1: flashback_query_clause : ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression ) -> template( \"not implemented: flashback_query_clause\";
	public final PLSQLPrinter.flashback_query_clause_return flashback_query_clause() throws RecognitionException {
		PLSQLPrinter.flashback_query_clause_return retval = new PLSQLPrinter.flashback_query_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1214:5: ( ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression ) -> template( \"not implemented: flashback_query_clause\")
			// PLSQLPrinter.g:1214:10: ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression )
			{
			// PLSQLPrinter.g:1214:12: ( VERSIONS_VK | SQL92_RESERVED_AS )
			int alt257=2;
			int LA257_0 = input.LA(1);
			if ( (LA257_0==VERSIONS_VK) ) {
				alt257=1;
			}
			else if ( (LA257_0==SQL92_RESERVED_AS) ) {
				alt257=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 257, 0, input);
				throw nvae;
			}

			switch (alt257) {
				case 1 :
					// PLSQLPrinter.g:1214:13: VERSIONS_VK
					{
					match(input,VERSIONS_VK,FOLLOW_VERSIONS_VK_in_flashback_query_clause11936); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1214:25: SQL92_RESERVED_AS
					{
					match(input,SQL92_RESERVED_AS,FOLLOW_SQL92_RESERVED_AS_in_flashback_query_clause11938); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1214:44: ( SCN_VK | TIMESTAMP_VK )?
			int alt258=3;
			int LA258_0 = input.LA(1);
			if ( (LA258_0==SCN_VK) ) {
				alt258=1;
			}
			else if ( (LA258_0==TIMESTAMP_VK) ) {
				alt258=2;
			}
			switch (alt258) {
				case 1 :
					// PLSQLPrinter.g:1214:45: SCN_VK
					{
					match(input,SCN_VK,FOLLOW_SCN_VK_in_flashback_query_clause11942); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1214:52: TIMESTAMP_VK
					{
					match(input,TIMESTAMP_VK,FOLLOW_TIMESTAMP_VK_in_flashback_query_clause11944); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_flashback_query_clause11948);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1215:5: -> template( \"not implemented: flashback_query_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: flashback_query_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "flashback_query_clause"


	public static class pivot_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_clause"
	// PLSQLPrinter.g:1218:1: pivot_clause : ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) -> template( \"not implemented: pivot_clause\";
	public final PLSQLPrinter.pivot_clause_return pivot_clause() throws RecognitionException {
		PLSQLPrinter.pivot_clause_return retval = new PLSQLPrinter.pivot_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1219:5: ( ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) -> template( \"not implemented: pivot_clause\")
			// PLSQLPrinter.g:1219:10: ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause )
			{
			match(input,PIVOT_VK,FOLLOW_PIVOT_VK_in_pivot_clause11985); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1219:21: ( XML_VK )?
			int alt259=2;
			int LA259_0 = input.LA(1);
			if ( (LA259_0==XML_VK) ) {
				alt259=1;
			}
			switch (alt259) {
				case 1 :
					// PLSQLPrinter.g:1219:21: XML_VK
					{
					match(input,XML_VK,FOLLOW_XML_VK_in_pivot_clause11987); 
					}
					break;

			}

			// PLSQLPrinter.g:1219:29: ( pivot_element )+
			int cnt260=0;
			loop260:
			while (true) {
				int alt260=2;
				int LA260_0 = input.LA(1);
				if ( (LA260_0==PIVOT_ELEMENT) ) {
					alt260=1;
				}

				switch (alt260) {
				case 1 :
					// PLSQLPrinter.g:1219:29: pivot_element
					{
					pushFollow(FOLLOW_pivot_element_in_pivot_clause11990);
					pivot_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt260 >= 1 ) break loop260;
					EarlyExitException eee = new EarlyExitException(260, input);
					throw eee;
				}
				cnt260++;
			}

			pushFollow(FOLLOW_pivot_for_clause_in_pivot_clause11993);
			pivot_for_clause();
			state._fsp--;

			pushFollow(FOLLOW_pivot_in_clause_in_pivot_clause11995);
			pivot_in_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1220:5: -> template( \"not implemented: pivot_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_clause"


	public static class pivot_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_element"
	// PLSQLPrinter.g:1223:1: pivot_element : ^( PIVOT_ELEMENT ( alias )? expression ) -> template( \"not implemented: pivot_element\";
	public final PLSQLPrinter.pivot_element_return pivot_element() throws RecognitionException {
		PLSQLPrinter.pivot_element_return retval = new PLSQLPrinter.pivot_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1224:5: ( ^( PIVOT_ELEMENT ( alias )? expression ) -> template( \"not implemented: pivot_element\")
			// PLSQLPrinter.g:1224:10: ^( PIVOT_ELEMENT ( alias )? expression )
			{
			match(input,PIVOT_ELEMENT,FOLLOW_PIVOT_ELEMENT_in_pivot_element12031); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1224:26: ( alias )?
			int alt261=2;
			int LA261_0 = input.LA(1);
			if ( (LA261_0==COLUMN_ALIAS||LA261_0==TABLE_ALIAS) ) {
				alt261=1;
			}
			switch (alt261) {
				case 1 :
					// PLSQLPrinter.g:1224:26: alias
					{
					pushFollow(FOLLOW_alias_in_pivot_element12033);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_expression_in_pivot_element12036);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1225:5: -> template( \"not implemented: pivot_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_element"


	public static class pivot_for_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_for_clause"
	// PLSQLPrinter.g:1228:1: pivot_for_clause : ^( SQL92_RESERVED_FOR ( column_name )+ ) -> template( \"not implemented: pivot_for_clause\";
	public final PLSQLPrinter.pivot_for_clause_return pivot_for_clause() throws RecognitionException {
		PLSQLPrinter.pivot_for_clause_return retval = new PLSQLPrinter.pivot_for_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1229:5: ( ^( SQL92_RESERVED_FOR ( column_name )+ ) -> template( \"not implemented: pivot_for_clause\")
			// PLSQLPrinter.g:1229:10: ^( SQL92_RESERVED_FOR ( column_name )+ )
			{
			match(input,SQL92_RESERVED_FOR,FOLLOW_SQL92_RESERVED_FOR_in_pivot_for_clause12072); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1229:31: ( column_name )+
			int cnt262=0;
			loop262:
			while (true) {
				int alt262=2;
				int LA262_0 = input.LA(1);
				if ( (LA262_0==COLUMN_NAME) ) {
					alt262=1;
				}

				switch (alt262) {
				case 1 :
					// PLSQLPrinter.g:1229:31: column_name
					{
					pushFollow(FOLLOW_column_name_in_pivot_for_clause12074);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt262 >= 1 ) break loop262;
					EarlyExitException eee = new EarlyExitException(262, input);
					throw eee;
				}
				cnt262++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1230:5: -> template( \"not implemented: pivot_for_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_for_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_for_clause"


	public static class pivot_in_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_in_clause"
	// PLSQLPrinter.g:1233:1: pivot_in_clause : ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ) -> template( \"not implemented: pivot_in_clause\";
	public final PLSQLPrinter.pivot_in_clause_return pivot_in_clause() throws RecognitionException {
		PLSQLPrinter.pivot_in_clause_return retval = new PLSQLPrinter.pivot_in_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1234:5: ( ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ) -> template( \"not implemented: pivot_in_clause\")
			// PLSQLPrinter.g:1234:10: ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) )
			{
			match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_pivot_in_clause12111); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1235:9: ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) )
			int alt265=3;
			switch ( input.LA(1) ) {
			case SUBQUERY:
				{
				alt265=1;
				}
				break;
			case ANY_MODE:
				{
				alt265=2;
				}
				break;
			case ELEMENTS_MODE:
				{
				alt265=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 265, 0, input);
				throw nvae;
			}
			switch (alt265) {
				case 1 :
					// PLSQLPrinter.g:1235:14: subquery
					{
					pushFollow(FOLLOW_subquery_in_pivot_in_clause12127);
					subquery();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1236:14: ^( ANY_MODE ( SQL92_RESERVED_ANY )+ )
					{
					match(input,ANY_MODE,FOLLOW_ANY_MODE_in_pivot_in_clause12143); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1236:25: ( SQL92_RESERVED_ANY )+
					int cnt263=0;
					loop263:
					while (true) {
						int alt263=2;
						int LA263_0 = input.LA(1);
						if ( (LA263_0==SQL92_RESERVED_ANY) ) {
							alt263=1;
						}

						switch (alt263) {
						case 1 :
							// PLSQLPrinter.g:1236:25: SQL92_RESERVED_ANY
							{
							match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_pivot_in_clause12145); 
							}
							break;

						default :
							if ( cnt263 >= 1 ) break loop263;
							EarlyExitException eee = new EarlyExitException(263, input);
							throw eee;
						}
						cnt263++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1237:14: ^( ELEMENTS_MODE ( pivot_in_clause_element )+ )
					{
					match(input,ELEMENTS_MODE,FOLLOW_ELEMENTS_MODE_in_pivot_in_clause12163); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1237:30: ( pivot_in_clause_element )+
					int cnt264=0;
					loop264:
					while (true) {
						int alt264=2;
						int LA264_0 = input.LA(1);
						if ( (LA264_0==PIVOT_IN_ELEMENT) ) {
							alt264=1;
						}

						switch (alt264) {
						case 1 :
							// PLSQLPrinter.g:1237:30: pivot_in_clause_element
							{
							pushFollow(FOLLOW_pivot_in_clause_element_in_pivot_in_clause12165);
							pivot_in_clause_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt264 >= 1 ) break loop264;
							EarlyExitException eee = new EarlyExitException(264, input);
							throw eee;
						}
						cnt264++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1240:5: -> template( \"not implemented: pivot_in_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_in_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_in_clause"


	public static class pivot_in_clause_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_in_clause_element"
	// PLSQLPrinter.g:1243:1: pivot_in_clause_element : ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) ) -> template( \"not implemented: pivot_in_clause_element\";
	public final PLSQLPrinter.pivot_in_clause_element_return pivot_in_clause_element() throws RecognitionException {
		PLSQLPrinter.pivot_in_clause_element_return retval = new PLSQLPrinter.pivot_in_clause_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1244:5: ( ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) ) -> template( \"not implemented: pivot_in_clause_element\")
			// PLSQLPrinter.g:1244:10: ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) )
			{
			match(input,PIVOT_IN_ELEMENT,FOLLOW_PIVOT_IN_ELEMENT_in_pivot_in_clause_element12222); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1244:29: ( alias )?
			int alt266=2;
			int LA266_0 = input.LA(1);
			if ( (LA266_0==COLUMN_ALIAS||LA266_0==TABLE_ALIAS) ) {
				alt266=1;
			}
			switch (alt266) {
				case 1 :
					// PLSQLPrinter.g:1244:29: alias
					{
					pushFollow(FOLLOW_alias_in_pivot_in_clause_element12224);
					alias();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1244:36: ( expression | expression_list )
			int alt267=2;
			int LA267_0 = input.LA(1);
			if ( (LA267_0==EXPR||LA267_0==LOGIC_EXPR) ) {
				alt267=1;
			}
			else if ( (LA267_0==EXPR_LIST) ) {
				alt267=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 267, 0, input);
				throw nvae;
			}

			switch (alt267) {
				case 1 :
					// PLSQLPrinter.g:1244:37: expression
					{
					pushFollow(FOLLOW_expression_in_pivot_in_clause_element12228);
					expression();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1244:48: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_pivot_in_clause_element12230);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1245:5: -> template( \"not implemented: pivot_in_clause_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_in_clause_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_in_clause_element"


	public static class unpivot_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unpivot_clause"
	// PLSQLPrinter.g:1248:1: unpivot_clause : ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause ) -> template( \"not implemented: unpivot_clause\";
	public final PLSQLPrinter.unpivot_clause_return unpivot_clause() throws RecognitionException {
		PLSQLPrinter.unpivot_clause_return retval = new PLSQLPrinter.unpivot_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1249:5: ( ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause ) -> template( \"not implemented: unpivot_clause\")
			// PLSQLPrinter.g:1249:10: ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause )
			{
			match(input,UNPIVOT_VK,FOLLOW_UNPIVOT_VK_in_unpivot_clause12267); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1249:23: ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )?
			int alt270=2;
			int LA270_0 = input.LA(1);
			if ( (LA270_0==EXCLUDE_VK||LA270_0==INCLUDE_VK) ) {
				alt270=1;
			}
			switch (alt270) {
				case 1 :
					// PLSQLPrinter.g:1249:24: ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )?
					{
					// PLSQLPrinter.g:1249:24: ( INCLUDE_VK | EXCLUDE_VK )
					int alt268=2;
					int LA268_0 = input.LA(1);
					if ( (LA268_0==INCLUDE_VK) ) {
						alt268=1;
					}
					else if ( (LA268_0==EXCLUDE_VK) ) {
						alt268=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 268, 0, input);
						throw nvae;
					}

					switch (alt268) {
						case 1 :
							// PLSQLPrinter.g:1249:25: INCLUDE_VK
							{
							match(input,INCLUDE_VK,FOLLOW_INCLUDE_VK_in_unpivot_clause12271); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1249:36: EXCLUDE_VK
							{
							match(input,EXCLUDE_VK,FOLLOW_EXCLUDE_VK_in_unpivot_clause12273); 
							}
							break;

					}

					// PLSQLPrinter.g:1249:48: ( NULLS_VK )?
					int alt269=2;
					int LA269_0 = input.LA(1);
					if ( (LA269_0==NULLS_VK) ) {
						alt269=1;
					}
					switch (alt269) {
						case 1 :
							// PLSQLPrinter.g:1249:48: NULLS_VK
							{
							match(input,NULLS_VK,FOLLOW_NULLS_VK_in_unpivot_clause12276); 
							}
							break;

					}

					}
					break;

			}

			// PLSQLPrinter.g:1249:60: ( column_name )+
			int cnt271=0;
			loop271:
			while (true) {
				int alt271=2;
				int LA271_0 = input.LA(1);
				if ( (LA271_0==COLUMN_NAME) ) {
					alt271=1;
				}

				switch (alt271) {
				case 1 :
					// PLSQLPrinter.g:1249:60: column_name
					{
					pushFollow(FOLLOW_column_name_in_unpivot_clause12281);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt271 >= 1 ) break loop271;
					EarlyExitException eee = new EarlyExitException(271, input);
					throw eee;
				}
				cnt271++;
			}

			pushFollow(FOLLOW_pivot_for_clause_in_unpivot_clause12284);
			pivot_for_clause();
			state._fsp--;

			pushFollow(FOLLOW_unpivot_in_clause_in_unpivot_clause12286);
			unpivot_in_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1250:5: -> template( \"not implemented: unpivot_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: unpivot_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unpivot_clause"


	public static class unpivot_in_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unpivot_in_clause"
	// PLSQLPrinter.g:1253:1: unpivot_in_clause : ^( SQL92_RESERVED_IN ( unpivot_in_element )+ ) -> template( \"not implemented: unpivot_in_clause\";
	public final PLSQLPrinter.unpivot_in_clause_return unpivot_in_clause() throws RecognitionException {
		PLSQLPrinter.unpivot_in_clause_return retval = new PLSQLPrinter.unpivot_in_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1254:5: ( ^( SQL92_RESERVED_IN ( unpivot_in_element )+ ) -> template( \"not implemented: unpivot_in_clause\")
			// PLSQLPrinter.g:1254:10: ^( SQL92_RESERVED_IN ( unpivot_in_element )+ )
			{
			match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_unpivot_in_clause12322); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1254:30: ( unpivot_in_element )+
			int cnt272=0;
			loop272:
			while (true) {
				int alt272=2;
				int LA272_0 = input.LA(1);
				if ( (LA272_0==UNPIVOT_IN_ELEMENT) ) {
					alt272=1;
				}

				switch (alt272) {
				case 1 :
					// PLSQLPrinter.g:1254:30: unpivot_in_element
					{
					pushFollow(FOLLOW_unpivot_in_element_in_unpivot_in_clause12324);
					unpivot_in_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt272 >= 1 ) break loop272;
					EarlyExitException eee = new EarlyExitException(272, input);
					throw eee;
				}
				cnt272++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1255:5: -> template( \"not implemented: unpivot_in_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: unpivot_in_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unpivot_in_clause"


	public static class unpivot_in_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unpivot_in_element"
	// PLSQLPrinter.g:1258:1: unpivot_in_element : ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) ) -> template( \"not implemented: unpivot_in_element\";
	public final PLSQLPrinter.unpivot_in_element_return unpivot_in_element() throws RecognitionException {
		PLSQLPrinter.unpivot_in_element_return retval = new PLSQLPrinter.unpivot_in_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1259:5: ( ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) ) -> template( \"not implemented: unpivot_in_element\")
			// PLSQLPrinter.g:1259:10: ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) )
			{
			match(input,UNPIVOT_IN_ELEMENT,FOLLOW_UNPIVOT_IN_ELEMENT_in_unpivot_in_element12361); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1259:31: ( column_name )+
			int cnt273=0;
			loop273:
			while (true) {
				int alt273=2;
				int LA273_0 = input.LA(1);
				if ( (LA273_0==COLUMN_NAME) ) {
					alt273=1;
				}

				switch (alt273) {
				case 1 :
					// PLSQLPrinter.g:1259:31: column_name
					{
					pushFollow(FOLLOW_column_name_in_unpivot_in_element12363);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt273 >= 1 ) break loop273;
					EarlyExitException eee = new EarlyExitException(273, input);
					throw eee;
				}
				cnt273++;
			}

			match(input,PIVOT_ALIAS,FOLLOW_PIVOT_ALIAS_in_unpivot_in_element12367); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1259:58: ( expression | expression_list )
			int alt274=2;
			int LA274_0 = input.LA(1);
			if ( (LA274_0==EXPR||LA274_0==LOGIC_EXPR) ) {
				alt274=1;
			}
			else if ( (LA274_0==EXPR_LIST) ) {
				alt274=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 274, 0, input);
				throw nvae;
			}

			switch (alt274) {
				case 1 :
					// PLSQLPrinter.g:1259:59: expression
					{
					pushFollow(FOLLOW_expression_in_unpivot_in_element12370);
					expression();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1259:70: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_unpivot_in_element12372);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1260:5: -> template( \"not implemented: unpivot_in_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: unpivot_in_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unpivot_in_element"


	public static class hierarchical_query_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "hierarchical_query_clause"
	// PLSQLPrinter.g:1263:1: hierarchical_query_clause : ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) ) -> hierarchical_query_clause(is_nocycle=$NOCYCLE_VK != nullcondition=$expression.ststart_part=$start_part.st);
	public final PLSQLPrinter.hierarchical_query_clause_return hierarchical_query_clause() throws RecognitionException {
		PLSQLPrinter.hierarchical_query_clause_return retval = new PLSQLPrinter.hierarchical_query_clause_return();
		retval.start = input.LT(1);

		CommonTree NOCYCLE_VK232=null;
		TreeRuleReturnScope expression233 =null;
		TreeRuleReturnScope start_part234 =null;

		try {
			// PLSQLPrinter.g:1264:5: ( ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) ) -> hierarchical_query_clause(is_nocycle=$NOCYCLE_VK != nullcondition=$expression.ststart_part=$start_part.st))
			// PLSQLPrinter.g:1264:10: ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) )
			{
			match(input,HIERARCHICAL,FOLLOW_HIERARCHICAL_in_hierarchical_query_clause12410); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1264:25: ( start_part )?
			int alt275=2;
			int LA275_0 = input.LA(1);
			if ( (LA275_0==PLSQL_RESERVED_START) ) {
				alt275=1;
			}
			switch (alt275) {
				case 1 :
					// PLSQLPrinter.g:1264:25: start_part
					{
					pushFollow(FOLLOW_start_part_in_hierarchical_query_clause12412);
					start_part234=start_part();
					state._fsp--;

					}
					break;

			}

			match(input,SQL92_RESERVED_CONNECT,FOLLOW_SQL92_RESERVED_CONNECT_in_hierarchical_query_clause12416); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1264:62: ( NOCYCLE_VK )?
			int alt276=2;
			int LA276_0 = input.LA(1);
			if ( (LA276_0==NOCYCLE_VK) ) {
				alt276=1;
			}
			switch (alt276) {
				case 1 :
					// PLSQLPrinter.g:1264:62: NOCYCLE_VK
					{
					NOCYCLE_VK232=(CommonTree)match(input,NOCYCLE_VK,FOLLOW_NOCYCLE_VK_in_hierarchical_query_clause12418); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_hierarchical_query_clause12421);
			expression233=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1265:5: -> hierarchical_query_clause(is_nocycle=$NOCYCLE_VK != nullcondition=$expression.ststart_part=$start_part.st)
			{
				retval.st = templateLib.getInstanceOf("hierarchical_query_clause",new STAttrMap().put("is_nocycle", NOCYCLE_VK232 != null).put("condition", (expression233!=null?((StringTemplate)expression233.getTemplate()):null)).put("start_part", (start_part234!=null?((StringTemplate)start_part234.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "hierarchical_query_clause"


	public static class start_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "start_part"
	// PLSQLPrinter.g:1268:1: start_part : ^( PLSQL_RESERVED_START expression ) -> start_part(condition=$expression.st);
	public final PLSQLPrinter.start_part_return start_part() throws RecognitionException {
		PLSQLPrinter.start_part_return retval = new PLSQLPrinter.start_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression235 =null;

		try {
			// PLSQLPrinter.g:1269:5: ( ^( PLSQL_RESERVED_START expression ) -> start_part(condition=$expression.st))
			// PLSQLPrinter.g:1269:10: ^( PLSQL_RESERVED_START expression )
			{
			match(input,PLSQL_RESERVED_START,FOLLOW_PLSQL_RESERVED_START_in_start_part12469); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_start_part12471);
			expression235=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1270:5: -> start_part(condition=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("start_part",new STAttrMap().put("condition", (expression235!=null?((StringTemplate)expression235.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "start_part"


	public static class group_by_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "group_by_clause"
	// PLSQLPrinter.g:1273:1: group_by_clause : ^( SQL92_RESERVED_GROUP (elements+= group_by_element )+ ( having_clause )? ) -> group_by_clause(group_by_elements=$elementshaving_clause=$having_clause.st);
	public final PLSQLPrinter.group_by_clause_return group_by_clause() throws RecognitionException {
		PLSQLPrinter.group_by_clause_return retval = new PLSQLPrinter.group_by_clause_return();
		retval.start = input.LT(1);

		List<Object> list_elements=null;
		TreeRuleReturnScope having_clause236 =null;
		RuleReturnScope elements = null;
		try {
			// PLSQLPrinter.g:1274:5: ( ^( SQL92_RESERVED_GROUP (elements+= group_by_element )+ ( having_clause )? ) -> group_by_clause(group_by_elements=$elementshaving_clause=$having_clause.st))
			// PLSQLPrinter.g:1274:10: ^( SQL92_RESERVED_GROUP (elements+= group_by_element )+ ( having_clause )? )
			{
			match(input,SQL92_RESERVED_GROUP,FOLLOW_SQL92_RESERVED_GROUP_in_group_by_clause12508); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1274:41: (elements+= group_by_element )+
			int cnt277=0;
			loop277:
			while (true) {
				int alt277=2;
				int LA277_0 = input.LA(1);
				if ( (LA277_0==GROUP_BY_ELEMENT) ) {
					alt277=1;
				}

				switch (alt277) {
				case 1 :
					// PLSQLPrinter.g:1274:41: elements+= group_by_element
					{
					pushFollow(FOLLOW_group_by_element_in_group_by_clause12512);
					elements=group_by_element();
					state._fsp--;

					if (list_elements==null) list_elements=new ArrayList<Object>();
					list_elements.add(elements.getTemplate());
					}
					break;

				default :
					if ( cnt277 >= 1 ) break loop277;
					EarlyExitException eee = new EarlyExitException(277, input);
					throw eee;
				}
				cnt277++;
			}

			// PLSQLPrinter.g:1274:61: ( having_clause )?
			int alt278=2;
			int LA278_0 = input.LA(1);
			if ( (LA278_0==SQL92_RESERVED_HAVING) ) {
				alt278=1;
			}
			switch (alt278) {
				case 1 :
					// PLSQLPrinter.g:1274:61: having_clause
					{
					pushFollow(FOLLOW_having_clause_in_group_by_clause12515);
					having_clause236=having_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1275:5: -> group_by_clause(group_by_elements=$elementshaving_clause=$having_clause.st)
			{
				retval.st = templateLib.getInstanceOf("group_by_clause",new STAttrMap().put("group_by_elements", list_elements).put("having_clause", (having_clause236!=null?((StringTemplate)having_clause236.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_by_clause"


	public static class group_by_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "group_by_element"
	// PLSQLPrinter.g:1278:1: group_by_element : ^( GROUP_BY_ELEMENT group_by_elements ) -> {$group_by_elements.st};
	public final PLSQLPrinter.group_by_element_return group_by_element() throws RecognitionException {
		PLSQLPrinter.group_by_element_return retval = new PLSQLPrinter.group_by_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope group_by_elements237 =null;

		try {
			// PLSQLPrinter.g:1279:5: ( ^( GROUP_BY_ELEMENT group_by_elements ) -> {$group_by_elements.st})
			// PLSQLPrinter.g:1279:10: ^( GROUP_BY_ELEMENT group_by_elements )
			{
			match(input,GROUP_BY_ELEMENT,FOLLOW_GROUP_BY_ELEMENT_in_group_by_element12558); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_group_by_elements_in_group_by_element12560);
			group_by_elements237=group_by_elements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1279:48: -> {$group_by_elements.st}
			{
				retval.st = (group_by_elements237!=null?((StringTemplate)group_by_elements237.getTemplate()):null);
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_by_element"


	public static class group_by_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "group_by_elements"
	// PLSQLPrinter.g:1282:1: group_by_elements : ( ^( GROUPING_VK ( groupin_set )+ ) -> template( \"not implemented: group_by_elements\"| grouping_element -> {$grouping_element.st});
	public final PLSQLPrinter.group_by_elements_return group_by_elements() throws RecognitionException {
		PLSQLPrinter.group_by_elements_return retval = new PLSQLPrinter.group_by_elements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope grouping_element238 =null;

		try {
			// PLSQLPrinter.g:1283:5: ( ^( GROUPING_VK ( groupin_set )+ ) -> template( \"not implemented: group_by_elements\"| grouping_element -> {$grouping_element.st})
			int alt280=2;
			int LA280_0 = input.LA(1);
			if ( (LA280_0==GROUPING_VK) ) {
				alt280=1;
			}
			else if ( (LA280_0==CUBE_VK||(LA280_0 >= EXPR && LA280_0 <= EXPR_LIST)||LA280_0==LOGIC_EXPR||LA280_0==ROLLUP_VK) ) {
				alt280=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 280, 0, input);
				throw nvae;
			}

			switch (alt280) {
				case 1 :
					// PLSQLPrinter.g:1283:10: ^( GROUPING_VK ( groupin_set )+ )
					{
					match(input,GROUPING_VK,FOLLOW_GROUPING_VK_in_group_by_elements12586); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1283:24: ( groupin_set )+
					int cnt279=0;
					loop279:
					while (true) {
						int alt279=2;
						int LA279_0 = input.LA(1);
						if ( (LA279_0==GROUPIN_SET) ) {
							alt279=1;
						}

						switch (alt279) {
						case 1 :
							// PLSQLPrinter.g:1283:24: groupin_set
							{
							pushFollow(FOLLOW_groupin_set_in_group_by_elements12588);
							groupin_set();
							state._fsp--;

							}
							break;

						default :
							if ( cnt279 >= 1 ) break loop279;
							EarlyExitException eee = new EarlyExitException(279, input);
							throw eee;
						}
						cnt279++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1284:5: -> template( \"not implemented: group_by_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: group_by_elements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1285:10: grouping_element
					{
					pushFollow(FOLLOW_grouping_element_in_group_by_elements12615);
					grouping_element238=grouping_element();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1285:27: -> {$grouping_element.st}
					{
						retval.st = (grouping_element238!=null?((StringTemplate)grouping_element238.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_by_elements"


	public static class groupin_set_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "groupin_set"
	// PLSQLPrinter.g:1288:1: groupin_set : ^( GROUPIN_SET grouping_element ) -> template( \"not implemented: groupin_set\";
	public final PLSQLPrinter.groupin_set_return groupin_set() throws RecognitionException {
		PLSQLPrinter.groupin_set_return retval = new PLSQLPrinter.groupin_set_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1289:5: ( ^( GROUPIN_SET grouping_element ) -> template( \"not implemented: groupin_set\")
			// PLSQLPrinter.g:1289:10: ^( GROUPIN_SET grouping_element )
			{
			match(input,GROUPIN_SET,FOLLOW_GROUPIN_SET_in_groupin_set12640); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_grouping_element_in_groupin_set12642);
			grouping_element();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1290:5: -> template( \"not implemented: groupin_set\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: groupin_set");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "groupin_set"


	public static class grouping_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "grouping_element"
	// PLSQLPrinter.g:1293:1: grouping_element : ( ^( ROLLUP_VK (elements+= grouping_element )+ ) -> rollup_grouping_element(elements=$elements)| ^( CUBE_VK (elements+= grouping_element )+ ) -> cube_grouping_element(elements=$elements)| expression_list -> {$expression_list.st}| expression -> {$expression.st});
	public final PLSQLPrinter.grouping_element_return grouping_element() throws RecognitionException {
		PLSQLPrinter.grouping_element_return retval = new PLSQLPrinter.grouping_element_return();
		retval.start = input.LT(1);

		List<Object> list_elements=null;
		TreeRuleReturnScope expression_list239 =null;
		TreeRuleReturnScope expression240 =null;
		RuleReturnScope elements = null;
		try {
			// PLSQLPrinter.g:1294:5: ( ^( ROLLUP_VK (elements+= grouping_element )+ ) -> rollup_grouping_element(elements=$elements)| ^( CUBE_VK (elements+= grouping_element )+ ) -> cube_grouping_element(elements=$elements)| expression_list -> {$expression_list.st}| expression -> {$expression.st})
			int alt283=4;
			switch ( input.LA(1) ) {
			case ROLLUP_VK:
				{
				alt283=1;
				}
				break;
			case CUBE_VK:
				{
				alt283=2;
				}
				break;
			case EXPR_LIST:
				{
				alt283=3;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt283=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 283, 0, input);
				throw nvae;
			}
			switch (alt283) {
				case 1 :
					// PLSQLPrinter.g:1294:10: ^( ROLLUP_VK (elements+= grouping_element )+ )
					{
					match(input,ROLLUP_VK,FOLLOW_ROLLUP_VK_in_grouping_element12678); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1294:30: (elements+= grouping_element )+
					int cnt281=0;
					loop281:
					while (true) {
						int alt281=2;
						int LA281_0 = input.LA(1);
						if ( (LA281_0==CUBE_VK||(LA281_0 >= EXPR && LA281_0 <= EXPR_LIST)||LA281_0==LOGIC_EXPR||LA281_0==ROLLUP_VK) ) {
							alt281=1;
						}

						switch (alt281) {
						case 1 :
							// PLSQLPrinter.g:1294:30: elements+= grouping_element
							{
							pushFollow(FOLLOW_grouping_element_in_grouping_element12682);
							elements=grouping_element();
							state._fsp--;

							if (list_elements==null) list_elements=new ArrayList<Object>();
							list_elements.add(elements.getTemplate());
							}
							break;

						default :
							if ( cnt281 >= 1 ) break loop281;
							EarlyExitException eee = new EarlyExitException(281, input);
							throw eee;
						}
						cnt281++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1295:5: -> rollup_grouping_element(elements=$elements)
					{
						retval.st = templateLib.getInstanceOf("rollup_grouping_element",new STAttrMap().put("elements", list_elements));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1296:10: ^( CUBE_VK (elements+= grouping_element )+ )
					{
					match(input,CUBE_VK,FOLLOW_CUBE_VK_in_grouping_element12711); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1296:28: (elements+= grouping_element )+
					int cnt282=0;
					loop282:
					while (true) {
						int alt282=2;
						int LA282_0 = input.LA(1);
						if ( (LA282_0==CUBE_VK||(LA282_0 >= EXPR && LA282_0 <= EXPR_LIST)||LA282_0==LOGIC_EXPR||LA282_0==ROLLUP_VK) ) {
							alt282=1;
						}

						switch (alt282) {
						case 1 :
							// PLSQLPrinter.g:1296:28: elements+= grouping_element
							{
							pushFollow(FOLLOW_grouping_element_in_grouping_element12715);
							elements=grouping_element();
							state._fsp--;

							if (list_elements==null) list_elements=new ArrayList<Object>();
							list_elements.add(elements.getTemplate());
							}
							break;

						default :
							if ( cnt282 >= 1 ) break loop282;
							EarlyExitException eee = new EarlyExitException(282, input);
							throw eee;
						}
						cnt282++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1297:5: -> cube_grouping_element(elements=$elements)
					{
						retval.st = templateLib.getInstanceOf("cube_grouping_element",new STAttrMap().put("elements", list_elements));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1298:10: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_grouping_element12743);
					expression_list239=expression_list();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1298:26: -> {$expression_list.st}
					{
						retval.st = (expression_list239!=null?((StringTemplate)expression_list239.getTemplate()):null);
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1299:10: expression
					{
					pushFollow(FOLLOW_expression_in_grouping_element12758);
					expression240=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1299:21: -> {$expression.st}
					{
						retval.st = (expression240!=null?((StringTemplate)expression240.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grouping_element"


	public static class having_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "having_clause"
	// PLSQLPrinter.g:1302:1: having_clause : ^( SQL92_RESERVED_HAVING expression ) -> having_clause(condition=$expression.st);
	public final PLSQLPrinter.having_clause_return having_clause() throws RecognitionException {
		PLSQLPrinter.having_clause_return retval = new PLSQLPrinter.having_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression241 =null;

		try {
			// PLSQLPrinter.g:1303:5: ( ^( SQL92_RESERVED_HAVING expression ) -> having_clause(condition=$expression.st))
			// PLSQLPrinter.g:1303:10: ^( SQL92_RESERVED_HAVING expression )
			{
			match(input,SQL92_RESERVED_HAVING,FOLLOW_SQL92_RESERVED_HAVING_in_having_clause12783); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_having_clause12785);
			expression241=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1304:5: -> having_clause(condition=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("having_clause",new STAttrMap().put("condition", (expression241!=null?((StringTemplate)expression241.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "having_clause"


	public static class model_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_clause"
	// PLSQLPrinter.g:1307:1: model_clause : ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) -> template( \"not implemented: model_clause\";
	public final PLSQLPrinter.model_clause_return model_clause() throws RecognitionException {
		PLSQLPrinter.model_clause_return retval = new PLSQLPrinter.model_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1308:5: ( ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) -> template( \"not implemented: model_clause\")
			// PLSQLPrinter.g:1308:10: ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* )
			{
			match(input,PLSQL_NON_RESERVED_MODEL,FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_clause12822); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_main_model_in_model_clause12824);
			main_model();
			state._fsp--;

			// PLSQLPrinter.g:1308:48: ( cell_reference_options )*
			loop284:
			while (true) {
				int alt284=2;
				int LA284_0 = input.LA(1);
				if ( (LA284_0==SQL92_RESERVED_UNIQUE||LA284_0==IGNORE_VK||LA284_0==KEEP_VK) ) {
					alt284=1;
				}

				switch (alt284) {
				case 1 :
					// PLSQLPrinter.g:1308:48: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_model_clause12826);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop284;
				}
			}

			// PLSQLPrinter.g:1308:72: ( return_rows_clause )?
			int alt285=2;
			int LA285_0 = input.LA(1);
			if ( (LA285_0==RETURN_VK) ) {
				alt285=1;
			}
			switch (alt285) {
				case 1 :
					// PLSQLPrinter.g:1308:72: return_rows_clause
					{
					pushFollow(FOLLOW_return_rows_clause_in_model_clause12829);
					return_rows_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1308:92: ( reference_model )*
			loop286:
			while (true) {
				int alt286=2;
				int LA286_0 = input.LA(1);
				if ( (LA286_0==REFERENCE_VK) ) {
					alt286=1;
				}

				switch (alt286) {
				case 1 :
					// PLSQLPrinter.g:1308:92: reference_model
					{
					pushFollow(FOLLOW_reference_model_in_model_clause12832);
					reference_model();
					state._fsp--;

					}
					break;

				default :
					break loop286;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1309:5: -> template( \"not implemented: model_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_clause"


	public static class cell_reference_options_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cell_reference_options"
	// PLSQLPrinter.g:1312:1: cell_reference_options : ( ^( ( IGNORE_VK | KEEP_VK ) NAV_VK ) | ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) ) -> template( \"not implemented: cell_reference_options\");
	public final PLSQLPrinter.cell_reference_options_return cell_reference_options() throws RecognitionException {
		PLSQLPrinter.cell_reference_options_return retval = new PLSQLPrinter.cell_reference_options_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1313:5: ( ^( ( IGNORE_VK | KEEP_VK ) NAV_VK ) | ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) ) -> template( \"not implemented: cell_reference_options\")
			int alt288=2;
			int LA288_0 = input.LA(1);
			if ( (LA288_0==IGNORE_VK||LA288_0==KEEP_VK) ) {
				alt288=1;
			}
			else if ( (LA288_0==SQL92_RESERVED_UNIQUE) ) {
				alt288=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 288, 0, input);
				throw nvae;
			}

			switch (alt288) {
				case 1 :
					// PLSQLPrinter.g:1313:10: ^( ( IGNORE_VK | KEEP_VK ) NAV_VK )
					{
					if ( input.LA(1)==IGNORE_VK||input.LA(1)==KEEP_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					match(input,NAV_VK,FOLLOW_NAV_VK_in_cell_reference_options12875); 
					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1314:10: ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) )
					{
					match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_cell_reference_options12888); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1314:34: ( DIMENSION_VK | SINGLE_VK )
					int alt287=2;
					int LA287_0 = input.LA(1);
					if ( (LA287_0==DIMENSION_VK) ) {
						alt287=1;
					}
					else if ( (LA287_0==SINGLE_VK) ) {
						alt287=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 287, 0, input);
						throw nvae;
					}

					switch (alt287) {
						case 1 :
							// PLSQLPrinter.g:1314:35: DIMENSION_VK
							{
							match(input,DIMENSION_VK,FOLLOW_DIMENSION_VK_in_cell_reference_options12891); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1314:48: SINGLE_VK
							{
							match(input,SINGLE_VK,FOLLOW_SINGLE_VK_in_cell_reference_options12893); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1315:5: -> template( \"not implemented: cell_reference_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: cell_reference_options");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cell_reference_options"


	public static class return_rows_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "return_rows_clause"
	// PLSQLPrinter.g:1318:1: return_rows_clause : ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) ) -> template( \"not implemented: return_rows_clause\";
	public final PLSQLPrinter.return_rows_clause_return return_rows_clause() throws RecognitionException {
		PLSQLPrinter.return_rows_clause_return retval = new PLSQLPrinter.return_rows_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1319:5: ( ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) ) -> template( \"not implemented: return_rows_clause\")
			// PLSQLPrinter.g:1319:10: ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) )
			{
			match(input,RETURN_VK,FOLLOW_RETURN_VK_in_return_rows_clause12930); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1319:22: ( UPDATED_VK | SQL92_RESERVED_ALL )
			int alt289=2;
			int LA289_0 = input.LA(1);
			if ( (LA289_0==UPDATED_VK) ) {
				alt289=1;
			}
			else if ( (LA289_0==SQL92_RESERVED_ALL) ) {
				alt289=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 289, 0, input);
				throw nvae;
			}

			switch (alt289) {
				case 1 :
					// PLSQLPrinter.g:1319:23: UPDATED_VK
					{
					match(input,UPDATED_VK,FOLLOW_UPDATED_VK_in_return_rows_clause12933); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1319:34: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_return_rows_clause12935); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1320:5: -> template( \"not implemented: return_rows_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: return_rows_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "return_rows_clause"


	public static class reference_model_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "reference_model"
	// PLSQLPrinter.g:1323:1: reference_model : ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* ) -> template( \"not implemented: reference_model\";
	public final PLSQLPrinter.reference_model_return reference_model() throws RecognitionException {
		PLSQLPrinter.reference_model_return retval = new PLSQLPrinter.reference_model_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1324:5: ( ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* ) -> template( \"not implemented: reference_model\")
			// PLSQLPrinter.g:1324:10: ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* )
			{
			match(input,REFERENCE_VK,FOLLOW_REFERENCE_VK_in_reference_model12972); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_reference_model_name_in_reference_model12974);
			reference_model_name();
			state._fsp--;

			pushFollow(FOLLOW_subquery_in_reference_model12976);
			subquery();
			state._fsp--;

			pushFollow(FOLLOW_model_column_clauses_in_reference_model12978);
			model_column_clauses();
			state._fsp--;

			// PLSQLPrinter.g:1324:76: ( cell_reference_options )*
			loop290:
			while (true) {
				int alt290=2;
				int LA290_0 = input.LA(1);
				if ( (LA290_0==SQL92_RESERVED_UNIQUE||LA290_0==IGNORE_VK||LA290_0==KEEP_VK) ) {
					alt290=1;
				}

				switch (alt290) {
				case 1 :
					// PLSQLPrinter.g:1324:76: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_reference_model12980);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop290;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1325:5: -> template( \"not implemented: reference_model\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: reference_model");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reference_model"


	public static class main_model_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "main_model"
	// PLSQLPrinter.g:1328:1: main_model : ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) -> template( \"not implemented: main_model\";
	public final PLSQLPrinter.main_model_return main_model() throws RecognitionException {
		PLSQLPrinter.main_model_return retval = new PLSQLPrinter.main_model_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1329:5: ( ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) -> template( \"not implemented: main_model\")
			// PLSQLPrinter.g:1329:10: ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* )
			{
			match(input,MAIN_MODEL,FOLLOW_MAIN_MODEL_in_main_model13017); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1329:23: ( main_model_name )?
			int alt291=2;
			int LA291_0 = input.LA(1);
			if ( (LA291_0==MAIN_MODEL_NAME) ) {
				alt291=1;
			}
			switch (alt291) {
				case 1 :
					// PLSQLPrinter.g:1329:23: main_model_name
					{
					pushFollow(FOLLOW_main_model_name_in_main_model13019);
					main_model_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_model_column_clauses_in_main_model13022);
			model_column_clauses();
			state._fsp--;

			pushFollow(FOLLOW_model_rules_clause_in_main_model13024);
			model_rules_clause();
			state._fsp--;

			// PLSQLPrinter.g:1329:80: ( cell_reference_options )*
			loop292:
			while (true) {
				int alt292=2;
				int LA292_0 = input.LA(1);
				if ( (LA292_0==SQL92_RESERVED_UNIQUE||LA292_0==IGNORE_VK||LA292_0==KEEP_VK) ) {
					alt292=1;
				}

				switch (alt292) {
				case 1 :
					// PLSQLPrinter.g:1329:80: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_main_model13026);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop292;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1330:5: -> template( \"not implemented: main_model\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: main_model");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "main_model"


	public static class model_column_clauses_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column_clauses"
	// PLSQLPrinter.g:1333:1: model_column_clauses : ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? ) -> template( \"not implemented: model_column_clauses\";
	public final PLSQLPrinter.model_column_clauses_return model_column_clauses() throws RecognitionException {
		PLSQLPrinter.model_column_clauses_return retval = new PLSQLPrinter.model_column_clauses_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1334:5: ( ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? ) -> template( \"not implemented: model_column_clauses\")
			// PLSQLPrinter.g:1334:10: ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? )
			{
			match(input,MODEL_COLUMN,FOLLOW_MODEL_COLUMN_in_model_column_clauses13063); 
			match(input, Token.DOWN, null); 
			match(input,DIMENSION_VK,FOLLOW_DIMENSION_VK_in_model_column_clauses13066); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_clauses13068);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input,MEASURES_VK,FOLLOW_MEASURES_VK_in_model_column_clauses13072); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_clauses13074);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1334:92: ( model_column_partition_part )?
			int alt293=2;
			int LA293_0 = input.LA(1);
			if ( (LA293_0==PARTITION_VK) ) {
				alt293=1;
			}
			switch (alt293) {
				case 1 :
					// PLSQLPrinter.g:1334:92: model_column_partition_part
					{
					pushFollow(FOLLOW_model_column_partition_part_in_model_column_clauses13077);
					model_column_partition_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1335:5: -> template( \"not implemented: model_column_clauses\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column_clauses");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column_clauses"


	public static class model_column_partition_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column_partition_part"
	// PLSQLPrinter.g:1338:1: model_column_partition_part : ^( PARTITION_VK model_column_list ) -> template( \"not implemented: model_column_partition_part\";
	public final PLSQLPrinter.model_column_partition_part_return model_column_partition_part() throws RecognitionException {
		PLSQLPrinter.model_column_partition_part_return retval = new PLSQLPrinter.model_column_partition_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1339:5: ( ^( PARTITION_VK model_column_list ) -> template( \"not implemented: model_column_partition_part\")
			// PLSQLPrinter.g:1339:10: ^( PARTITION_VK model_column_list )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_model_column_partition_part13114); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_partition_part13116);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1340:5: -> template( \"not implemented: model_column_partition_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column_partition_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column_partition_part"


	public static class model_column_list_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column_list"
	// PLSQLPrinter.g:1343:1: model_column_list : ^( MODEL_COLUMNS ( model_column )+ ) -> template( \"not implemented: model_column_list\";
	public final PLSQLPrinter.model_column_list_return model_column_list() throws RecognitionException {
		PLSQLPrinter.model_column_list_return retval = new PLSQLPrinter.model_column_list_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1344:5: ( ^( MODEL_COLUMNS ( model_column )+ ) -> template( \"not implemented: model_column_list\")
			// PLSQLPrinter.g:1344:10: ^( MODEL_COLUMNS ( model_column )+ )
			{
			match(input,MODEL_COLUMNS,FOLLOW_MODEL_COLUMNS_in_model_column_list13152); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1344:26: ( model_column )+
			int cnt294=0;
			loop294:
			while (true) {
				int alt294=2;
				int LA294_0 = input.LA(1);
				if ( (LA294_0==MODEL_COLUMN) ) {
					alt294=1;
				}

				switch (alt294) {
				case 1 :
					// PLSQLPrinter.g:1344:26: model_column
					{
					pushFollow(FOLLOW_model_column_in_model_column_list13154);
					model_column();
					state._fsp--;

					}
					break;

				default :
					if ( cnt294 >= 1 ) break loop294;
					EarlyExitException eee = new EarlyExitException(294, input);
					throw eee;
				}
				cnt294++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1345:5: -> template( \"not implemented: model_column_list\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column_list");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column_list"


	public static class model_column_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column"
	// PLSQLPrinter.g:1348:1: model_column : ^( MODEL_COLUMN ( alias )? expression ) -> template( \"not implemented: model_column\";
	public final PLSQLPrinter.model_column_return model_column() throws RecognitionException {
		PLSQLPrinter.model_column_return retval = new PLSQLPrinter.model_column_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1349:5: ( ^( MODEL_COLUMN ( alias )? expression ) -> template( \"not implemented: model_column\")
			// PLSQLPrinter.g:1349:10: ^( MODEL_COLUMN ( alias )? expression )
			{
			match(input,MODEL_COLUMN,FOLLOW_MODEL_COLUMN_in_model_column13191); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1349:25: ( alias )?
			int alt295=2;
			int LA295_0 = input.LA(1);
			if ( (LA295_0==COLUMN_ALIAS||LA295_0==TABLE_ALIAS) ) {
				alt295=1;
			}
			switch (alt295) {
				case 1 :
					// PLSQLPrinter.g:1349:25: alias
					{
					pushFollow(FOLLOW_alias_in_model_column13193);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_expression_in_model_column13196);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1350:5: -> template( \"not implemented: model_column\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column"


	public static class model_rules_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_rules_clause"
	// PLSQLPrinter.g:1353:1: model_rules_clause : ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) -> template( \"not implemented: model_rules_clause\";
	public final PLSQLPrinter.model_rules_clause_return model_rules_clause() throws RecognitionException {
		PLSQLPrinter.model_rules_clause_return retval = new PLSQLPrinter.model_rules_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1354:5: ( ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) -> template( \"not implemented: model_rules_clause\")
			// PLSQLPrinter.g:1354:10: ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? )
			{
			match(input,MODEL_RULES,FOLLOW_MODEL_RULES_in_model_rules_clause13233); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1354:24: ( model_rules_element )+
			int cnt296=0;
			loop296:
			while (true) {
				int alt296=2;
				int LA296_0 = input.LA(1);
				if ( (LA296_0==MODEL_RULE) ) {
					alt296=1;
				}

				switch (alt296) {
				case 1 :
					// PLSQLPrinter.g:1354:24: model_rules_element
					{
					pushFollow(FOLLOW_model_rules_element_in_model_rules_clause13235);
					model_rules_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt296 >= 1 ) break loop296;
					EarlyExitException eee = new EarlyExitException(296, input);
					throw eee;
				}
				cnt296++;
			}

			// PLSQLPrinter.g:1354:45: ( model_rules_part )?
			int alt297=2;
			int LA297_0 = input.LA(1);
			if ( (LA297_0==RULES_VK) ) {
				alt297=1;
			}
			switch (alt297) {
				case 1 :
					// PLSQLPrinter.g:1354:45: model_rules_part
					{
					pushFollow(FOLLOW_model_rules_part_in_model_rules_clause13238);
					model_rules_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1355:5: -> template( \"not implemented: model_rules_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_rules_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_rules_clause"


	public static class model_rules_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_rules_part"
	// PLSQLPrinter.g:1358:1: model_rules_part : ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? ) -> template( \"not implemented: model_rules_part\";
	public final PLSQLPrinter.model_rules_part_return model_rules_part() throws RecognitionException {
		PLSQLPrinter.model_rules_part_return retval = new PLSQLPrinter.model_rules_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1359:5: ( ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? ) -> template( \"not implemented: model_rules_part\")
			// PLSQLPrinter.g:1359:10: ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? )
			{
			match(input,RULES_VK,FOLLOW_RULES_VK_in_model_rules_part13275); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1360:13: ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )?
				int alt299=3;
				int LA299_0 = input.LA(1);
				if ( (LA299_0==SQL92_RESERVED_UPDATE) ) {
					alt299=1;
				}
				else if ( (LA299_0==UPSERT_VK) ) {
					alt299=2;
				}
				switch (alt299) {
					case 1 :
						// PLSQLPrinter.g:1360:14: SQL92_RESERVED_UPDATE
						{
						match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_part13291); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1360:36: UPSERT_VK ( SQL92_RESERVED_ALL )?
						{
						match(input,UPSERT_VK,FOLLOW_UPSERT_VK_in_model_rules_part13293); 
						// PLSQLPrinter.g:1360:46: ( SQL92_RESERVED_ALL )?
						int alt298=2;
						int LA298_0 = input.LA(1);
						if ( (LA298_0==SQL92_RESERVED_ALL) ) {
							alt298=1;
						}
						switch (alt298) {
							case 1 :
								// PLSQLPrinter.g:1360:46: SQL92_RESERVED_ALL
								{
								match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_model_rules_part13295); 
								}
								break;

						}

						}
						break;

				}

				// PLSQLPrinter.g:1361:13: ( AUTOMATIC_VK | SEQUENTIAL_VK )?
				int alt300=3;
				int LA300_0 = input.LA(1);
				if ( (LA300_0==AUTOMATIC_VK) ) {
					alt300=1;
				}
				else if ( (LA300_0==SEQUENTIAL_VK) ) {
					alt300=2;
				}
				switch (alt300) {
					case 1 :
						// PLSQLPrinter.g:1361:14: AUTOMATIC_VK
						{
						match(input,AUTOMATIC_VK,FOLLOW_AUTOMATIC_VK_in_model_rules_part13314); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1361:27: SEQUENTIAL_VK
						{
						match(input,SEQUENTIAL_VK,FOLLOW_SEQUENTIAL_VK_in_model_rules_part13316); 
						}
						break;

				}

				// PLSQLPrinter.g:1362:13: ( model_iterate_clause )?
				int alt301=2;
				int LA301_0 = input.LA(1);
				if ( (LA301_0==ITERATE_VK) ) {
					alt301=1;
				}
				switch (alt301) {
					case 1 :
						// PLSQLPrinter.g:1362:13: model_iterate_clause
						{
						pushFollow(FOLLOW_model_iterate_clause_in_model_rules_part13333);
						model_iterate_clause();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1364:5: -> template( \"not implemented: model_rules_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_rules_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_rules_part"


	public static class model_rules_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_rules_element"
	// PLSQLPrinter.g:1367:1: model_rules_element : ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? ) -> template( \"not implemented: model_rules_element\";
	public final PLSQLPrinter.model_rules_element_return model_rules_element() throws RecognitionException {
		PLSQLPrinter.model_rules_element_return retval = new PLSQLPrinter.model_rules_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1368:5: ( ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? ) -> template( \"not implemented: model_rules_element\")
			// PLSQLPrinter.g:1368:10: ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? )
			{
			match(input,MODEL_RULE,FOLLOW_MODEL_RULE_in_model_rules_element13379); 
			match(input, Token.DOWN, null); 
			match(input,ASSIGN,FOLLOW_ASSIGN_in_model_rules_element13395); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_expression_in_model_rules_element13397);
			model_expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_model_rules_element13399);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1370:13: ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )?
			int alt303=3;
			int LA303_0 = input.LA(1);
			if ( (LA303_0==SQL92_RESERVED_UPDATE) ) {
				alt303=1;
			}
			else if ( (LA303_0==UPSERT_VK) ) {
				alt303=2;
			}
			switch (alt303) {
				case 1 :
					// PLSQLPrinter.g:1370:14: SQL92_RESERVED_UPDATE
					{
					match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_element13416); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1370:36: UPSERT_VK ( SQL92_RESERVED_ALL )?
					{
					match(input,UPSERT_VK,FOLLOW_UPSERT_VK_in_model_rules_element13418); 
					// PLSQLPrinter.g:1370:46: ( SQL92_RESERVED_ALL )?
					int alt302=2;
					int LA302_0 = input.LA(1);
					if ( (LA302_0==SQL92_RESERVED_ALL) ) {
						alt302=1;
					}
					switch (alt302) {
						case 1 :
							// PLSQLPrinter.g:1370:46: SQL92_RESERVED_ALL
							{
							match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_model_rules_element13420); 
							}
							break;

					}

					}
					break;

			}

			// PLSQLPrinter.g:1371:13: ( order_by_clause )?
			int alt304=2;
			int LA304_0 = input.LA(1);
			if ( (LA304_0==SQL92_RESERVED_ORDER) ) {
				alt304=1;
			}
			switch (alt304) {
				case 1 :
					// PLSQLPrinter.g:1371:13: order_by_clause
					{
					pushFollow(FOLLOW_order_by_clause_in_model_rules_element13438);
					order_by_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1373:5: -> template( \"not implemented: model_rules_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_rules_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_rules_element"


	public static class model_iterate_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_iterate_clause"
	// PLSQLPrinter.g:1376:1: model_iterate_clause : ^( ITERATE_VK expression ( until_part )? ) -> template( \"not implemented: model_iterate_clause\";
	public final PLSQLPrinter.model_iterate_clause_return model_iterate_clause() throws RecognitionException {
		PLSQLPrinter.model_iterate_clause_return retval = new PLSQLPrinter.model_iterate_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1377:5: ( ^( ITERATE_VK expression ( until_part )? ) -> template( \"not implemented: model_iterate_clause\")
			// PLSQLPrinter.g:1377:10: ^( ITERATE_VK expression ( until_part )? )
			{
			match(input,ITERATE_VK,FOLLOW_ITERATE_VK_in_model_iterate_clause13484); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_model_iterate_clause13486);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1377:34: ( until_part )?
			int alt305=2;
			int LA305_0 = input.LA(1);
			if ( (LA305_0==UNTIL_VK) ) {
				alt305=1;
			}
			switch (alt305) {
				case 1 :
					// PLSQLPrinter.g:1377:34: until_part
					{
					pushFollow(FOLLOW_until_part_in_model_iterate_clause13488);
					until_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1378:5: -> template( \"not implemented: model_iterate_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_iterate_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_iterate_clause"


	public static class until_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "until_part"
	// PLSQLPrinter.g:1381:1: until_part : ^( UNTIL_VK expression ) -> template( \"not implemented: until_part\";
	public final PLSQLPrinter.until_part_return until_part() throws RecognitionException {
		PLSQLPrinter.until_part_return retval = new PLSQLPrinter.until_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1382:5: ( ^( UNTIL_VK expression ) -> template( \"not implemented: until_part\")
			// PLSQLPrinter.g:1382:10: ^( UNTIL_VK expression )
			{
			match(input,UNTIL_VK,FOLLOW_UNTIL_VK_in_until_part13525); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_until_part13527);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1383:5: -> template( \"not implemented: until_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: until_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "until_part"


	public static class order_by_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "order_by_clause"
	// PLSQLPrinter.g:1386:1: order_by_clause : ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS (elements+= order_by_elements )+ ) ) -> order_by_clause(is_siblings=$SIBLINGS_VK != nullelements=$elements);
	public final PLSQLPrinter.order_by_clause_return order_by_clause() throws RecognitionException {
		PLSQLPrinter.order_by_clause_return retval = new PLSQLPrinter.order_by_clause_return();
		retval.start = input.LT(1);

		CommonTree SIBLINGS_VK242=null;
		List<Object> list_elements=null;
		RuleReturnScope elements = null;
		try {
			// PLSQLPrinter.g:1387:5: ( ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS (elements+= order_by_elements )+ ) ) -> order_by_clause(is_siblings=$SIBLINGS_VK != nullelements=$elements))
			// PLSQLPrinter.g:1387:10: ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS (elements+= order_by_elements )+ ) )
			{
			match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_order_by_clause13563); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1387:33: ( SIBLINGS_VK )?
			int alt306=2;
			int LA306_0 = input.LA(1);
			if ( (LA306_0==SIBLINGS_VK) ) {
				alt306=1;
			}
			switch (alt306) {
				case 1 :
					// PLSQLPrinter.g:1387:33: SIBLINGS_VK
					{
					SIBLINGS_VK242=(CommonTree)match(input,SIBLINGS_VK,FOLLOW_SIBLINGS_VK_in_order_by_clause13565); 
					}
					break;

			}

			match(input,ORDER_BY_ELEMENTS,FOLLOW_ORDER_BY_ELEMENTS_in_order_by_clause13569); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1387:74: (elements+= order_by_elements )+
			int cnt307=0;
			loop307:
			while (true) {
				int alt307=2;
				int LA307_0 = input.LA(1);
				if ( (LA307_0==ORDER_BY_ELEMENT) ) {
					alt307=1;
				}

				switch (alt307) {
				case 1 :
					// PLSQLPrinter.g:1387:74: elements+= order_by_elements
					{
					pushFollow(FOLLOW_order_by_elements_in_order_by_clause13573);
					elements=order_by_elements();
					state._fsp--;

					if (list_elements==null) list_elements=new ArrayList<Object>();
					list_elements.add(elements.getTemplate());
					}
					break;

				default :
					if ( cnt307 >= 1 ) break loop307;
					EarlyExitException eee = new EarlyExitException(307, input);
					throw eee;
				}
				cnt307++;
			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1388:5: -> order_by_clause(is_siblings=$SIBLINGS_VK != nullelements=$elements)
			{
				retval.st = templateLib.getInstanceOf("order_by_clause",new STAttrMap().put("is_siblings", SIBLINGS_VK242 != null).put("elements", list_elements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "order_by_clause"


	public static class order_by_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "order_by_elements"
	// PLSQLPrinter.g:1391:1: order_by_elements : ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? ) -> order_by_elements(expression=$expression.stis_asc=$SQL92_RESERVED_ASC != nullis_desc=$SQL92_RESERVED_DESC != nullis_nulls_first=$FIRST_VK != nullis_nulls_last=$LAST_VK != null);
	public final PLSQLPrinter.order_by_elements_return order_by_elements() throws RecognitionException {
		PLSQLPrinter.order_by_elements_return retval = new PLSQLPrinter.order_by_elements_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_ASC244=null;
		CommonTree SQL92_RESERVED_DESC245=null;
		CommonTree FIRST_VK246=null;
		CommonTree LAST_VK247=null;
		TreeRuleReturnScope expression243 =null;

		try {
			// PLSQLPrinter.g:1392:5: ( ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? ) -> order_by_elements(expression=$expression.stis_asc=$SQL92_RESERVED_ASC != nullis_desc=$SQL92_RESERVED_DESC != nullis_nulls_first=$FIRST_VK != nullis_nulls_last=$LAST_VK != null))
			// PLSQLPrinter.g:1392:10: ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? )
			{
			match(input,ORDER_BY_ELEMENT,FOLLOW_ORDER_BY_ELEMENT_in_order_by_elements13617); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_order_by_elements13619);
			expression243=expression();
			state._fsp--;

			// PLSQLPrinter.g:1392:40: ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )?
			int alt308=3;
			int LA308_0 = input.LA(1);
			if ( (LA308_0==SQL92_RESERVED_ASC) ) {
				alt308=1;
			}
			else if ( (LA308_0==SQL92_RESERVED_DESC) ) {
				alt308=2;
			}
			switch (alt308) {
				case 1 :
					// PLSQLPrinter.g:1392:41: SQL92_RESERVED_ASC
					{
					SQL92_RESERVED_ASC244=(CommonTree)match(input,SQL92_RESERVED_ASC,FOLLOW_SQL92_RESERVED_ASC_in_order_by_elements13622); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1392:60: SQL92_RESERVED_DESC
					{
					SQL92_RESERVED_DESC245=(CommonTree)match(input,SQL92_RESERVED_DESC,FOLLOW_SQL92_RESERVED_DESC_in_order_by_elements13624); 
					}
					break;

			}

			// PLSQLPrinter.g:1392:82: ( NULLS_VK ( FIRST_VK | LAST_VK ) )?
			int alt310=2;
			int LA310_0 = input.LA(1);
			if ( (LA310_0==NULLS_VK) ) {
				alt310=1;
			}
			switch (alt310) {
				case 1 :
					// PLSQLPrinter.g:1392:83: NULLS_VK ( FIRST_VK | LAST_VK )
					{
					match(input,NULLS_VK,FOLLOW_NULLS_VK_in_order_by_elements13629); 
					// PLSQLPrinter.g:1392:92: ( FIRST_VK | LAST_VK )
					int alt309=2;
					int LA309_0 = input.LA(1);
					if ( (LA309_0==FIRST_VK) ) {
						alt309=1;
					}
					else if ( (LA309_0==LAST_VK) ) {
						alt309=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 309, 0, input);
						throw nvae;
					}

					switch (alt309) {
						case 1 :
							// PLSQLPrinter.g:1392:93: FIRST_VK
							{
							FIRST_VK246=(CommonTree)match(input,FIRST_VK,FOLLOW_FIRST_VK_in_order_by_elements13632); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1392:102: LAST_VK
							{
							LAST_VK247=(CommonTree)match(input,LAST_VK,FOLLOW_LAST_VK_in_order_by_elements13634); 
							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1393:5: -> order_by_elements(expression=$expression.stis_asc=$SQL92_RESERVED_ASC != nullis_desc=$SQL92_RESERVED_DESC != nullis_nulls_first=$FIRST_VK != nullis_nulls_last=$LAST_VK != null)
			{
				retval.st = templateLib.getInstanceOf("order_by_elements",new STAttrMap().put("expression", (expression243!=null?((StringTemplate)expression243.getTemplate()):null)).put("is_asc", SQL92_RESERVED_ASC244 != null).put("is_desc", SQL92_RESERVED_DESC245 != null).put("is_nulls_first", FIRST_VK246 != null).put("is_nulls_last", LAST_VK247 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "order_by_elements"


	public static class for_update_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_update_clause"
	// PLSQLPrinter.g:1398:1: for_update_clause : ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? ) -> for_update_clause(for_update_of_part=$for_update_of_part.stfor_update_options=$for_update_options.st);
	public final PLSQLPrinter.for_update_clause_return for_update_clause() throws RecognitionException {
		PLSQLPrinter.for_update_clause_return retval = new PLSQLPrinter.for_update_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope for_update_of_part248 =null;
		TreeRuleReturnScope for_update_options249 =null;

		try {
			// PLSQLPrinter.g:1399:5: ( ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? ) -> for_update_clause(for_update_of_part=$for_update_of_part.stfor_update_options=$for_update_options.st))
			// PLSQLPrinter.g:1399:10: ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? )
			{
			match(input,SQL92_RESERVED_FOR,FOLLOW_SQL92_RESERVED_FOR_in_for_update_clause13715); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1399:31: ( for_update_of_part )?
				int alt311=2;
				int LA311_0 = input.LA(1);
				if ( (LA311_0==SQL92_RESERVED_OF) ) {
					alt311=1;
				}
				switch (alt311) {
					case 1 :
						// PLSQLPrinter.g:1399:31: for_update_of_part
						{
						pushFollow(FOLLOW_for_update_of_part_in_for_update_clause13717);
						for_update_of_part248=for_update_of_part();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1399:51: ( for_update_options )?
				int alt312=2;
				int LA312_0 = input.LA(1);
				if ( (LA312_0==PLSQL_RESERVED_NOWAIT||LA312_0==SKIP_VK||LA312_0==WAIT_VK) ) {
					alt312=1;
				}
				switch (alt312) {
					case 1 :
						// PLSQLPrinter.g:1399:51: for_update_options
						{
						pushFollow(FOLLOW_for_update_options_in_for_update_clause13720);
						for_update_options249=for_update_options();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1400:5: -> for_update_clause(for_update_of_part=$for_update_of_part.stfor_update_options=$for_update_options.st)
			{
				retval.st = templateLib.getInstanceOf("for_update_clause",new STAttrMap().put("for_update_of_part", (for_update_of_part248!=null?((StringTemplate)for_update_of_part248.getTemplate()):null)).put("for_update_options", (for_update_options249!=null?((StringTemplate)for_update_options249.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_update_clause"


	public static class for_update_of_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_update_of_part"
	// PLSQLPrinter.g:1403:1: for_update_of_part : ^( SQL92_RESERVED_OF (column_names+= column_name )+ ) -> for_update_of_part(column_names=$column_names);
	public final PLSQLPrinter.for_update_of_part_return for_update_of_part() throws RecognitionException {
		PLSQLPrinter.for_update_of_part_return retval = new PLSQLPrinter.for_update_of_part_return();
		retval.start = input.LT(1);

		List<Object> list_column_names=null;
		RuleReturnScope column_names = null;
		try {
			// PLSQLPrinter.g:1404:5: ( ^( SQL92_RESERVED_OF (column_names+= column_name )+ ) -> for_update_of_part(column_names=$column_names))
			// PLSQLPrinter.g:1404:10: ^( SQL92_RESERVED_OF (column_names+= column_name )+ )
			{
			match(input,SQL92_RESERVED_OF,FOLLOW_SQL92_RESERVED_OF_in_for_update_of_part13763); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1404:42: (column_names+= column_name )+
			int cnt313=0;
			loop313:
			while (true) {
				int alt313=2;
				int LA313_0 = input.LA(1);
				if ( (LA313_0==COLUMN_NAME) ) {
					alt313=1;
				}

				switch (alt313) {
				case 1 :
					// PLSQLPrinter.g:1404:42: column_names+= column_name
					{
					pushFollow(FOLLOW_column_name_in_for_update_of_part13767);
					column_names=column_name();
					state._fsp--;

					if (list_column_names==null) list_column_names=new ArrayList<Object>();
					list_column_names.add(column_names.getTemplate());
					}
					break;

				default :
					if ( cnt313 >= 1 ) break loop313;
					EarlyExitException eee = new EarlyExitException(313, input);
					throw eee;
				}
				cnt313++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1405:5: -> for_update_of_part(column_names=$column_names)
			{
				retval.st = templateLib.getInstanceOf("for_update_of_part",new STAttrMap().put("column_names", list_column_names));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_update_of_part"


	public static class for_update_options_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_update_options"
	// PLSQLPrinter.g:1408:1: for_update_options : ( SKIP_VK -> for_update_options_skip_locked(| PLSQL_RESERVED_NOWAIT -> for_update_options_nowait(| ^( WAIT_VK expression ) -> for_update_options_wait(expression=$expression.st));
	public final PLSQLPrinter.for_update_options_return for_update_options() throws RecognitionException {
		PLSQLPrinter.for_update_options_return retval = new PLSQLPrinter.for_update_options_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression250 =null;

		try {
			// PLSQLPrinter.g:1409:5: ( SKIP_VK -> for_update_options_skip_locked(| PLSQL_RESERVED_NOWAIT -> for_update_options_nowait(| ^( WAIT_VK expression ) -> for_update_options_wait(expression=$expression.st))
			int alt314=3;
			switch ( input.LA(1) ) {
			case SKIP_VK:
				{
				alt314=1;
				}
				break;
			case PLSQL_RESERVED_NOWAIT:
				{
				alt314=2;
				}
				break;
			case WAIT_VK:
				{
				alt314=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 314, 0, input);
				throw nvae;
			}
			switch (alt314) {
				case 1 :
					// PLSQLPrinter.g:1409:10: SKIP_VK
					{
					match(input,SKIP_VK,FOLLOW_SKIP_VK_in_for_update_options13804); 
					// TEMPLATE REWRITE
					// 1409:18: -> for_update_options_skip_locked(
					{
						retval.st = templateLib.getInstanceOf("for_update_options_skip_locked");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1410:10: PLSQL_RESERVED_NOWAIT
					{
					match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_for_update_options13821); 
					// TEMPLATE REWRITE
					// 1410:32: -> for_update_options_nowait(
					{
						retval.st = templateLib.getInstanceOf("for_update_options_nowait");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1411:10: ^( WAIT_VK expression )
					{
					match(input,WAIT_VK,FOLLOW_WAIT_VK_in_for_update_options13839); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_update_options13841);
					expression250=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1411:32: -> for_update_options_wait(expression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("for_update_options_wait",new STAttrMap().put("expression", (expression250!=null?((StringTemplate)expression250.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_update_options"


	public static class update_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "update_statement"
	// PLSQLPrinter.g:1416:1: update_statement : ^( SQL92_RESERVED_UPDATE general_table_ref ^( SET_VK (update_elements+= update_set_elements )+ ) ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> update_statement(general_table_ref=$general_table_ref.stupdate_set_elements=$update_elementswhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st);
	public final PLSQLPrinter.update_statement_return update_statement() throws RecognitionException {
		PLSQLPrinter.update_statement_return retval = new PLSQLPrinter.update_statement_return();
		retval.start = input.LT(1);

		List<Object> list_update_elements=null;
		TreeRuleReturnScope general_table_ref251 =null;
		TreeRuleReturnScope where_clause252 =null;
		TreeRuleReturnScope static_returning_clause253 =null;
		TreeRuleReturnScope error_logging_clause254 =null;
		RuleReturnScope update_elements = null;
		try {
			// PLSQLPrinter.g:1417:5: ( ^( SQL92_RESERVED_UPDATE general_table_ref ^( SET_VK (update_elements+= update_set_elements )+ ) ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> update_statement(general_table_ref=$general_table_ref.stupdate_set_elements=$update_elementswhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st))
			// PLSQLPrinter.g:1417:10: ^( SQL92_RESERVED_UPDATE general_table_ref ^( SET_VK (update_elements+= update_set_elements )+ ) ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
			{
			match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_update_statement13874); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_update_statement13876);
			general_table_ref251=general_table_ref();
			state._fsp--;

			match(input,SET_VK,FOLLOW_SET_VK_in_update_statement13891); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1418:37: (update_elements+= update_set_elements )+
			int cnt315=0;
			loop315:
			while (true) {
				int alt315=2;
				int LA315_0 = input.LA(1);
				if ( (LA315_0==ASSIGN||LA315_0==VALUE_VK) ) {
					alt315=1;
				}

				switch (alt315) {
				case 1 :
					// PLSQLPrinter.g:1418:37: update_elements+= update_set_elements
					{
					pushFollow(FOLLOW_update_set_elements_in_update_statement13895);
					update_elements=update_set_elements();
					state._fsp--;

					if (list_update_elements==null) list_update_elements=new ArrayList<Object>();
					list_update_elements.add(update_elements.getTemplate());
					}
					break;

				default :
					if ( cnt315 >= 1 ) break loop315;
					EarlyExitException eee = new EarlyExitException(315, input);
					throw eee;
				}
				cnt315++;
			}

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1419:13: ( where_clause )?
			int alt316=2;
			int LA316_0 = input.LA(1);
			if ( (LA316_0==SQL92_RESERVED_WHERE) ) {
				alt316=1;
			}
			switch (alt316) {
				case 1 :
					// PLSQLPrinter.g:1419:13: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_update_statement13911);
					where_clause252=where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1419:27: ( static_returning_clause )?
			int alt317=2;
			int LA317_0 = input.LA(1);
			if ( (LA317_0==STATIC_RETURNING) ) {
				alt317=1;
			}
			switch (alt317) {
				case 1 :
					// PLSQLPrinter.g:1419:27: static_returning_clause
					{
					pushFollow(FOLLOW_static_returning_clause_in_update_statement13914);
					static_returning_clause253=static_returning_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1419:52: ( error_logging_clause )?
			int alt318=2;
			int LA318_0 = input.LA(1);
			if ( (LA318_0==LOG_VK) ) {
				alt318=1;
			}
			switch (alt318) {
				case 1 :
					// PLSQLPrinter.g:1419:52: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_update_statement13917);
					error_logging_clause254=error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1421:5: -> update_statement(general_table_ref=$general_table_ref.stupdate_set_elements=$update_elementswhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st)
			{
				retval.st = templateLib.getInstanceOf("update_statement",new STAttrMap().put("general_table_ref", (general_table_ref251!=null?((StringTemplate)general_table_ref251.getTemplate()):null)).put("update_set_elements", list_update_elements).put("where_clause", (where_clause252!=null?((StringTemplate)where_clause252.getTemplate()):null)).put("static_returning_clause", (static_returning_clause253!=null?((StringTemplate)static_returning_clause253.getTemplate()):null)).put("error_logging_clause", (error_logging_clause254!=null?((StringTemplate)error_logging_clause254.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "update_statement"


	public static class update_set_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "update_set_elements"
	// PLSQLPrinter.g:1429:1: update_set_elements : ( ^( ASSIGN column_name expression ) -> update_set_element_column_expr(column_name=$column_name.stexpression=$expression.st)| ^( ASSIGN (names+= column_name )+ subquery ) -> update_set_element_columns_subquery(column_names=$namessubquery=$subquery.st)| ^( VALUE_VK ( char_set_name )? ID expression ) -> update_set_element_column_value(column_name=$ID.textexpression=$expression.st));
	public final PLSQLPrinter.update_set_elements_return update_set_elements() throws RecognitionException {
		PLSQLPrinter.update_set_elements_return retval = new PLSQLPrinter.update_set_elements_return();
		retval.start = input.LT(1);

		CommonTree ID258=null;
		List<Object> list_names=null;
		TreeRuleReturnScope column_name255 =null;
		TreeRuleReturnScope expression256 =null;
		TreeRuleReturnScope subquery257 =null;
		TreeRuleReturnScope expression259 =null;
		RuleReturnScope names = null;
		try {
			// PLSQLPrinter.g:1430:5: ( ^( ASSIGN column_name expression ) -> update_set_element_column_expr(column_name=$column_name.stexpression=$expression.st)| ^( ASSIGN (names+= column_name )+ subquery ) -> update_set_element_columns_subquery(column_names=$namessubquery=$subquery.st)| ^( VALUE_VK ( char_set_name )? ID expression ) -> update_set_element_column_value(column_name=$ID.textexpression=$expression.st))
			int alt321=3;
			alt321 = dfa321.predict(input);
			switch (alt321) {
				case 1 :
					// PLSQLPrinter.g:1430:10: ^( ASSIGN column_name expression )
					{
					match(input,ASSIGN,FOLLOW_ASSIGN_in_update_set_elements14023); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_column_name_in_update_set_elements14025);
					column_name255=column_name();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_update_set_elements14027);
					expression256=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1431:5: -> update_set_element_column_expr(column_name=$column_name.stexpression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("update_set_element_column_expr",new STAttrMap().put("column_name", (column_name255!=null?((StringTemplate)column_name255.getTemplate()):null)).put("expression", (expression256!=null?((StringTemplate)expression256.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1432:10: ^( ASSIGN (names+= column_name )+ subquery )
					{
					match(input,ASSIGN,FOLLOW_ASSIGN_in_update_set_elements14060); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1432:24: (names+= column_name )+
					int cnt319=0;
					loop319:
					while (true) {
						int alt319=2;
						int LA319_0 = input.LA(1);
						if ( (LA319_0==COLUMN_NAME) ) {
							alt319=1;
						}

						switch (alt319) {
						case 1 :
							// PLSQLPrinter.g:1432:24: names+= column_name
							{
							pushFollow(FOLLOW_column_name_in_update_set_elements14064);
							names=column_name();
							state._fsp--;

							if (list_names==null) list_names=new ArrayList<Object>();
							list_names.add(names.getTemplate());
							}
							break;

						default :
							if ( cnt319 >= 1 ) break loop319;
							EarlyExitException eee = new EarlyExitException(319, input);
							throw eee;
						}
						cnt319++;
					}

					pushFollow(FOLLOW_subquery_in_update_set_elements14067);
					subquery257=subquery();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1433:5: -> update_set_element_columns_subquery(column_names=$namessubquery=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("update_set_element_columns_subquery",new STAttrMap().put("column_names", list_names).put("subquery", (subquery257!=null?((StringTemplate)subquery257.getTemplate()):null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1434:10: ^( VALUE_VK ( char_set_name )? ID expression )
					{
					match(input,VALUE_VK,FOLLOW_VALUE_VK_in_update_set_elements14100); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1434:21: ( char_set_name )?
					int alt320=2;
					int LA320_0 = input.LA(1);
					if ( (LA320_0==CHAR_SET_NAME) ) {
						alt320=1;
					}
					switch (alt320) {
						case 1 :
							// PLSQLPrinter.g:1434:21: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_update_set_elements14102);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					ID258=(CommonTree)match(input,ID,FOLLOW_ID_in_update_set_elements14105); 
					pushFollow(FOLLOW_expression_in_update_set_elements14107);
					expression259=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1435:5: -> update_set_element_column_value(column_name=$ID.textexpression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("update_set_element_column_value",new STAttrMap().put("column_name", (ID258!=null?ID258.getText():null)).put("expression", (expression259!=null?((StringTemplate)expression259.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "update_set_elements"


	public static class delete_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "delete_statement"
	// PLSQLPrinter.g:1440:1: delete_statement : ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> delete_statement(general_table_ref=$general_table_ref.stwhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st);
	public final PLSQLPrinter.delete_statement_return delete_statement() throws RecognitionException {
		PLSQLPrinter.delete_statement_return retval = new PLSQLPrinter.delete_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope general_table_ref260 =null;
		TreeRuleReturnScope where_clause261 =null;
		TreeRuleReturnScope static_returning_clause262 =null;
		TreeRuleReturnScope error_logging_clause263 =null;

		try {
			// PLSQLPrinter.g:1441:5: ( ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> delete_statement(general_table_ref=$general_table_ref.stwhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st))
			// PLSQLPrinter.g:1441:10: ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
			{
			match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_delete_statement14151); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_delete_statement14153);
			general_table_ref260=general_table_ref();
			state._fsp--;

			// PLSQLPrinter.g:1442:13: ( where_clause )?
			int alt322=2;
			int LA322_0 = input.LA(1);
			if ( (LA322_0==SQL92_RESERVED_WHERE) ) {
				alt322=1;
			}
			switch (alt322) {
				case 1 :
					// PLSQLPrinter.g:1442:13: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_delete_statement14167);
					where_clause261=where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1442:27: ( static_returning_clause )?
			int alt323=2;
			int LA323_0 = input.LA(1);
			if ( (LA323_0==STATIC_RETURNING) ) {
				alt323=1;
			}
			switch (alt323) {
				case 1 :
					// PLSQLPrinter.g:1442:27: static_returning_clause
					{
					pushFollow(FOLLOW_static_returning_clause_in_delete_statement14170);
					static_returning_clause262=static_returning_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1442:52: ( error_logging_clause )?
			int alt324=2;
			int LA324_0 = input.LA(1);
			if ( (LA324_0==LOG_VK) ) {
				alt324=1;
			}
			switch (alt324) {
				case 1 :
					// PLSQLPrinter.g:1442:52: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_delete_statement14173);
					error_logging_clause263=error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1443:5: -> delete_statement(general_table_ref=$general_table_ref.stwhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st)
			{
				retval.st = templateLib.getInstanceOf("delete_statement",new STAttrMap().put("general_table_ref", (general_table_ref260!=null?((StringTemplate)general_table_ref260.getTemplate()):null)).put("where_clause", (where_clause261!=null?((StringTemplate)where_clause261.getTemplate()):null)).put("static_returning_clause", (static_returning_clause262!=null?((StringTemplate)static_returning_clause262.getTemplate()):null)).put("error_logging_clause", (error_logging_clause263!=null?((StringTemplate)error_logging_clause263.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "delete_statement"


	public static class insert_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "insert_statement"
	// PLSQLPrinter.g:1448:1: insert_statement : ^( SQL92_RESERVED_INSERT ( single_table_insert -> { $single_table_insert.st }| multi_table_insert -> { $multi_table_insert.st }) ) ;
	public final PLSQLPrinter.insert_statement_return insert_statement() throws RecognitionException {
		PLSQLPrinter.insert_statement_return retval = new PLSQLPrinter.insert_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope single_table_insert264 =null;
		TreeRuleReturnScope multi_table_insert265 =null;

		try {
			// PLSQLPrinter.g:1449:5: ( ^( SQL92_RESERVED_INSERT ( single_table_insert -> { $single_table_insert.st }| multi_table_insert -> { $multi_table_insert.st }) ) )
			// PLSQLPrinter.g:1449:10: ^( SQL92_RESERVED_INSERT ( single_table_insert -> { $single_table_insert.st }| multi_table_insert -> { $multi_table_insert.st }) )
			{
			match(input,SQL92_RESERVED_INSERT,FOLLOW_SQL92_RESERVED_INSERT_in_insert_statement14251); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1450:13: ( single_table_insert -> { $single_table_insert.st }| multi_table_insert -> { $multi_table_insert.st })
			int alt325=2;
			int LA325_0 = input.LA(1);
			if ( (LA325_0==SINGLE_TABLE_MODE) ) {
				alt325=1;
			}
			else if ( (LA325_0==MULTI_TABLE_MODE) ) {
				alt325=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 325, 0, input);
				throw nvae;
			}

			switch (alt325) {
				case 1 :
					// PLSQLPrinter.g:1451:15: single_table_insert
					{
					pushFollow(FOLLOW_single_table_insert_in_insert_statement14281);
					single_table_insert264=single_table_insert();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1451:35: -> { $single_table_insert.st }
					{
						retval.st =  (single_table_insert264!=null?((StringTemplate)single_table_insert264.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1452:20: multi_table_insert
					{
					pushFollow(FOLLOW_multi_table_insert_in_insert_statement14306);
					multi_table_insert265=multi_table_insert();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1452:39: -> { $multi_table_insert.st }
					{
						retval.st =  (multi_table_insert265!=null?((StringTemplate)multi_table_insert265.getTemplate()):null) ;
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_statement"


	public static class single_table_insert_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "single_table_insert"
	// PLSQLPrinter.g:1459:1: single_table_insert : ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? ) -> single_table_insert(insert_into_clause=$insert_into_clause.stvalues_clause=$values_clause.ststatic_returning_clause=$static_returning_clause.stselect_statement=$select_statement.sterror_logging_clause=$error_logging_clause.st);
	public final PLSQLPrinter.single_table_insert_return single_table_insert() throws RecognitionException {
		PLSQLPrinter.single_table_insert_return retval = new PLSQLPrinter.single_table_insert_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope insert_into_clause266 =null;
		TreeRuleReturnScope values_clause267 =null;
		TreeRuleReturnScope static_returning_clause268 =null;
		TreeRuleReturnScope select_statement269 =null;
		TreeRuleReturnScope error_logging_clause270 =null;

		try {
			// PLSQLPrinter.g:1460:5: ( ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? ) -> single_table_insert(insert_into_clause=$insert_into_clause.stvalues_clause=$values_clause.ststatic_returning_clause=$static_returning_clause.stselect_statement=$select_statement.sterror_logging_clause=$error_logging_clause.st))
			// PLSQLPrinter.g:1460:10: ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? )
			{
			match(input,SINGLE_TABLE_MODE,FOLLOW_SINGLE_TABLE_MODE_in_single_table_insert14359); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_insert_into_clause_in_single_table_insert14361);
			insert_into_clause266=insert_into_clause();
			state._fsp--;

			// PLSQLPrinter.g:1460:49: ( values_clause ( static_returning_clause )? | select_statement )
			int alt327=2;
			int LA327_0 = input.LA(1);
			if ( (LA327_0==SQL92_RESERVED_VALUES) ) {
				alt327=1;
			}
			else if ( (LA327_0==SELECT_STATEMENT) ) {
				alt327=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 327, 0, input);
				throw nvae;
			}

			switch (alt327) {
				case 1 :
					// PLSQLPrinter.g:1460:50: values_clause ( static_returning_clause )?
					{
					pushFollow(FOLLOW_values_clause_in_single_table_insert14364);
					values_clause267=values_clause();
					state._fsp--;

					// PLSQLPrinter.g:1460:64: ( static_returning_clause )?
					int alt326=2;
					int LA326_0 = input.LA(1);
					if ( (LA326_0==STATIC_RETURNING) ) {
						alt326=1;
					}
					switch (alt326) {
						case 1 :
							// PLSQLPrinter.g:1460:64: static_returning_clause
							{
							pushFollow(FOLLOW_static_returning_clause_in_single_table_insert14366);
							static_returning_clause268=static_returning_clause();
							state._fsp--;

							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1460:90: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_single_table_insert14370);
					select_statement269=select_statement();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1460:108: ( error_logging_clause )?
			int alt328=2;
			int LA328_0 = input.LA(1);
			if ( (LA328_0==LOG_VK) ) {
				alt328=1;
			}
			switch (alt328) {
				case 1 :
					// PLSQLPrinter.g:1460:108: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_single_table_insert14373);
					error_logging_clause270=error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1461:5: -> single_table_insert(insert_into_clause=$insert_into_clause.stvalues_clause=$values_clause.ststatic_returning_clause=$static_returning_clause.stselect_statement=$select_statement.sterror_logging_clause=$error_logging_clause.st)
			{
				retval.st = templateLib.getInstanceOf("single_table_insert",new STAttrMap().put("insert_into_clause", (insert_into_clause266!=null?((StringTemplate)insert_into_clause266.getTemplate()):null)).put("values_clause", (values_clause267!=null?((StringTemplate)values_clause267.getTemplate()):null)).put("static_returning_clause", (static_returning_clause268!=null?((StringTemplate)static_returning_clause268.getTemplate()):null)).put("select_statement", (select_statement269!=null?((StringTemplate)select_statement269.getTemplate()):null)).put("error_logging_clause", (error_logging_clause270!=null?((StringTemplate)error_logging_clause270.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "single_table_insert"


	public static class multi_table_insert_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "multi_table_insert"
	// PLSQLPrinter.g:1467:1: multi_table_insert : ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) ) -> template( \"not implemented: multi_table_insert\";
	public final PLSQLPrinter.multi_table_insert_return multi_table_insert() throws RecognitionException {
		PLSQLPrinter.multi_table_insert_return retval = new PLSQLPrinter.multi_table_insert_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1468:5: ( ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) ) -> template( \"not implemented: multi_table_insert\")
			// PLSQLPrinter.g:1468:10: ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) )
			{
			match(input,MULTI_TABLE_MODE,FOLLOW_MULTI_TABLE_MODE_in_multi_table_insert14468); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_select_statement_in_multi_table_insert14470);
			select_statement();
			state._fsp--;

			// PLSQLPrinter.g:1468:46: ( conditional_insert_clause | ( multi_table_element )+ )
			int alt330=2;
			int LA330_0 = input.LA(1);
			if ( (LA330_0==CONDITIONAL_INSERT) ) {
				alt330=1;
			}
			else if ( (LA330_0==TABLE_ELEMENT) ) {
				alt330=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 330, 0, input);
				throw nvae;
			}

			switch (alt330) {
				case 1 :
					// PLSQLPrinter.g:1468:47: conditional_insert_clause
					{
					pushFollow(FOLLOW_conditional_insert_clause_in_multi_table_insert14473);
					conditional_insert_clause();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1468:73: ( multi_table_element )+
					{
					// PLSQLPrinter.g:1468:73: ( multi_table_element )+
					int cnt329=0;
					loop329:
					while (true) {
						int alt329=2;
						int LA329_0 = input.LA(1);
						if ( (LA329_0==TABLE_ELEMENT) ) {
							alt329=1;
						}

						switch (alt329) {
						case 1 :
							// PLSQLPrinter.g:1468:73: multi_table_element
							{
							pushFollow(FOLLOW_multi_table_element_in_multi_table_insert14475);
							multi_table_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt329 >= 1 ) break loop329;
							EarlyExitException eee = new EarlyExitException(329, input);
							throw eee;
						}
						cnt329++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1469:5: -> template( \"not implemented: multi_table_insert\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: multi_table_insert");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "multi_table_insert"


	public static class multi_table_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "multi_table_element"
	// PLSQLPrinter.g:1472:1: multi_table_element : ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) -> template( \"not implemented: multi_table_element\";
	public final PLSQLPrinter.multi_table_element_return multi_table_element() throws RecognitionException {
		PLSQLPrinter.multi_table_element_return retval = new PLSQLPrinter.multi_table_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1473:5: ( ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) -> template( \"not implemented: multi_table_element\")
			// PLSQLPrinter.g:1473:10: ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? )
			{
			match(input,TABLE_ELEMENT,FOLLOW_TABLE_ELEMENT_in_multi_table_element14513); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_insert_into_clause_in_multi_table_element14515);
			insert_into_clause();
			state._fsp--;

			// PLSQLPrinter.g:1473:45: ( values_clause )?
			int alt331=2;
			int LA331_0 = input.LA(1);
			if ( (LA331_0==SQL92_RESERVED_VALUES) ) {
				alt331=1;
			}
			switch (alt331) {
				case 1 :
					// PLSQLPrinter.g:1473:45: values_clause
					{
					pushFollow(FOLLOW_values_clause_in_multi_table_element14517);
					values_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1473:60: ( error_logging_clause )?
			int alt332=2;
			int LA332_0 = input.LA(1);
			if ( (LA332_0==LOG_VK) ) {
				alt332=1;
			}
			switch (alt332) {
				case 1 :
					// PLSQLPrinter.g:1473:60: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_multi_table_element14520);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1474:5: -> template( \"not implemented: multi_table_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: multi_table_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "multi_table_element"


	public static class conditional_insert_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "conditional_insert_clause"
	// PLSQLPrinter.g:1477:1: conditional_insert_clause : ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) -> template( \"not implemented: conditional_insert_clause\";
	public final PLSQLPrinter.conditional_insert_clause_return conditional_insert_clause() throws RecognitionException {
		PLSQLPrinter.conditional_insert_clause_return retval = new PLSQLPrinter.conditional_insert_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1478:5: ( ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) -> template( \"not implemented: conditional_insert_clause\")
			// PLSQLPrinter.g:1478:10: ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? )
			{
			match(input,CONDITIONAL_INSERT,FOLLOW_CONDITIONAL_INSERT_in_conditional_insert_clause14557); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1478:31: ( SQL92_RESERVED_ALL | FIRST_VK )?
			int alt333=3;
			int LA333_0 = input.LA(1);
			if ( (LA333_0==SQL92_RESERVED_ALL) ) {
				alt333=1;
			}
			else if ( (LA333_0==FIRST_VK) ) {
				alt333=2;
			}
			switch (alt333) {
				case 1 :
					// PLSQLPrinter.g:1478:32: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_conditional_insert_clause14560); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1478:51: FIRST_VK
					{
					match(input,FIRST_VK,FOLLOW_FIRST_VK_in_conditional_insert_clause14562); 
					}
					break;

			}

			// PLSQLPrinter.g:1478:62: ( conditional_insert_when_part )+
			int cnt334=0;
			loop334:
			while (true) {
				int alt334=2;
				int LA334_0 = input.LA(1);
				if ( (LA334_0==SQL92_RESERVED_WHEN) ) {
					alt334=1;
				}

				switch (alt334) {
				case 1 :
					// PLSQLPrinter.g:1478:62: conditional_insert_when_part
					{
					pushFollow(FOLLOW_conditional_insert_when_part_in_conditional_insert_clause14566);
					conditional_insert_when_part();
					state._fsp--;

					}
					break;

				default :
					if ( cnt334 >= 1 ) break loop334;
					EarlyExitException eee = new EarlyExitException(334, input);
					throw eee;
				}
				cnt334++;
			}

			// PLSQLPrinter.g:1478:92: ( conditional_insert_else_part )?
			int alt335=2;
			int LA335_0 = input.LA(1);
			if ( (LA335_0==SQL92_RESERVED_ELSE) ) {
				alt335=1;
			}
			switch (alt335) {
				case 1 :
					// PLSQLPrinter.g:1478:92: conditional_insert_else_part
					{
					pushFollow(FOLLOW_conditional_insert_else_part_in_conditional_insert_clause14569);
					conditional_insert_else_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1479:5: -> template( \"not implemented: conditional_insert_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: conditional_insert_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "conditional_insert_clause"


	public static class conditional_insert_when_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "conditional_insert_when_part"
	// PLSQLPrinter.g:1482:1: conditional_insert_when_part : ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_when_part\";
	public final PLSQLPrinter.conditional_insert_when_part_return conditional_insert_when_part() throws RecognitionException {
		PLSQLPrinter.conditional_insert_when_part_return retval = new PLSQLPrinter.conditional_insert_when_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1483:5: ( ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_when_part\")
			// PLSQLPrinter.g:1483:10: ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_conditional_insert_when_part14607); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_conditional_insert_when_part14609);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1483:43: ( multi_table_element )+
			int cnt336=0;
			loop336:
			while (true) {
				int alt336=2;
				int LA336_0 = input.LA(1);
				if ( (LA336_0==TABLE_ELEMENT) ) {
					alt336=1;
				}

				switch (alt336) {
				case 1 :
					// PLSQLPrinter.g:1483:43: multi_table_element
					{
					pushFollow(FOLLOW_multi_table_element_in_conditional_insert_when_part14611);
					multi_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt336 >= 1 ) break loop336;
					EarlyExitException eee = new EarlyExitException(336, input);
					throw eee;
				}
				cnt336++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1484:5: -> template( \"not implemented: conditional_insert_when_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: conditional_insert_when_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "conditional_insert_when_part"


	public static class conditional_insert_else_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "conditional_insert_else_part"
	// PLSQLPrinter.g:1487:1: conditional_insert_else_part : ^( SQL92_RESERVED_ELSE ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_else_part\";
	public final PLSQLPrinter.conditional_insert_else_part_return conditional_insert_else_part() throws RecognitionException {
		PLSQLPrinter.conditional_insert_else_part_return retval = new PLSQLPrinter.conditional_insert_else_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1488:5: ( ^( SQL92_RESERVED_ELSE ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_else_part\")
			// PLSQLPrinter.g:1488:10: ^( SQL92_RESERVED_ELSE ( multi_table_element )+ )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_conditional_insert_else_part14648); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1488:32: ( multi_table_element )+
			int cnt337=0;
			loop337:
			while (true) {
				int alt337=2;
				int LA337_0 = input.LA(1);
				if ( (LA337_0==TABLE_ELEMENT) ) {
					alt337=1;
				}

				switch (alt337) {
				case 1 :
					// PLSQLPrinter.g:1488:32: multi_table_element
					{
					pushFollow(FOLLOW_multi_table_element_in_conditional_insert_else_part14650);
					multi_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt337 >= 1 ) break loop337;
					EarlyExitException eee = new EarlyExitException(337, input);
					throw eee;
				}
				cnt337++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1489:5: -> template( \"not implemented: conditional_insert_else_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: conditional_insert_else_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "conditional_insert_else_part"


	public static class insert_into_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "insert_into_clause"
	// PLSQLPrinter.g:1492:1: insert_into_clause : ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS (columns+= column_name )* ) ) -> insert_into_clause(general_table_ref=$general_table_ref.stcolumns=$columns);
	public final PLSQLPrinter.insert_into_clause_return insert_into_clause() throws RecognitionException {
		PLSQLPrinter.insert_into_clause_return retval = new PLSQLPrinter.insert_into_clause_return();
		retval.start = input.LT(1);

		List<Object> list_columns=null;
		TreeRuleReturnScope general_table_ref271 =null;
		RuleReturnScope columns = null;
		try {
			// PLSQLPrinter.g:1493:5: ( ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS (columns+= column_name )* ) ) -> insert_into_clause(general_table_ref=$general_table_ref.stcolumns=$columns))
			// PLSQLPrinter.g:1493:10: ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS (columns+= column_name )* ) )
			{
			match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_insert_into_clause14687); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_insert_into_clause14689);
			general_table_ref271=general_table_ref();
			state._fsp--;

			match(input,COLUMNS,FOLLOW_COLUMNS_in_insert_into_clause14692); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1493:67: (columns+= column_name )*
				loop338:
				while (true) {
					int alt338=2;
					int LA338_0 = input.LA(1);
					if ( (LA338_0==COLUMN_NAME) ) {
						alt338=1;
					}

					switch (alt338) {
					case 1 :
						// PLSQLPrinter.g:1493:67: columns+= column_name
						{
						pushFollow(FOLLOW_column_name_in_insert_into_clause14696);
						columns=column_name();
						state._fsp--;

						if (list_columns==null) list_columns=new ArrayList<Object>();
						list_columns.add(columns.getTemplate());
						}
						break;

					default :
						break loop338;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1494:5: -> insert_into_clause(general_table_ref=$general_table_ref.stcolumns=$columns)
			{
				retval.st = templateLib.getInstanceOf("insert_into_clause",new STAttrMap().put("general_table_ref", (general_table_ref271!=null?((StringTemplate)general_table_ref271.getTemplate()):null)).put("columns", list_columns));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_into_clause"


	public static class values_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "values_clause"
	// PLSQLPrinter.g:1497:1: values_clause : ^( SQL92_RESERVED_VALUES (r= expression_list |r= expression ) ) -> values_clause(expression_or_expression_list=$r.st);
	public final PLSQLPrinter.values_clause_return values_clause() throws RecognitionException {
		PLSQLPrinter.values_clause_return retval = new PLSQLPrinter.values_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope r =null;

		try {
			// PLSQLPrinter.g:1498:5: ( ^( SQL92_RESERVED_VALUES (r= expression_list |r= expression ) ) -> values_clause(expression_or_expression_list=$r.st))
			// PLSQLPrinter.g:1498:10: ^( SQL92_RESERVED_VALUES (r= expression_list |r= expression ) )
			{
			match(input,SQL92_RESERVED_VALUES,FOLLOW_SQL92_RESERVED_VALUES_in_values_clause14740); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1498:34: (r= expression_list |r= expression )
			int alt339=2;
			int LA339_0 = input.LA(1);
			if ( (LA339_0==EXPR_LIST) ) {
				alt339=1;
			}
			else if ( (LA339_0==EXPR||LA339_0==LOGIC_EXPR) ) {
				alt339=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 339, 0, input);
				throw nvae;
			}

			switch (alt339) {
				case 1 :
					// PLSQLPrinter.g:1498:35: r= expression_list
					{
					pushFollow(FOLLOW_expression_list_in_values_clause14745);
					r=expression_list();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1498:53: r= expression
					{
					pushFollow(FOLLOW_expression_in_values_clause14749);
					r=expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1499:5: -> values_clause(expression_or_expression_list=$r.st)
			{
				retval.st = templateLib.getInstanceOf("values_clause",new STAttrMap().put("expression_or_expression_list", (r!=null?((StringTemplate)r.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "values_clause"


	public static class merge_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_statement"
	// PLSQLPrinter.g:1503:1: merge_statement : ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) -> merge_statement(table_name=$tableview_name.sttable_alias=$alias.stselected_tableview=$selected_tableview.stcondition=$expression.stmerge_update_clause=$merge_update_clause.stmerge_insert_clause=$merge_insert_clause.sterror_logging_clause=$error_logging_clause.st);
	public final PLSQLPrinter.merge_statement_return merge_statement() throws RecognitionException {
		PLSQLPrinter.merge_statement_return retval = new PLSQLPrinter.merge_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope tableview_name272 =null;
		TreeRuleReturnScope alias273 =null;
		TreeRuleReturnScope selected_tableview274 =null;
		TreeRuleReturnScope expression275 =null;
		TreeRuleReturnScope merge_update_clause276 =null;
		TreeRuleReturnScope merge_insert_clause277 =null;
		TreeRuleReturnScope error_logging_clause278 =null;

		try {
			// PLSQLPrinter.g:1504:5: ( ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) -> merge_statement(table_name=$tableview_name.sttable_alias=$alias.stselected_tableview=$selected_tableview.stcondition=$expression.stmerge_update_clause=$merge_update_clause.stmerge_insert_clause=$merge_insert_clause.sterror_logging_clause=$error_logging_clause.st))
			// PLSQLPrinter.g:1504:10: ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? )
			{
			match(input,MERGE_VK,FOLLOW_MERGE_VK_in_merge_statement14788); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1504:21: ( alias )?
			int alt340=2;
			int LA340_0 = input.LA(1);
			if ( (LA340_0==COLUMN_ALIAS||LA340_0==TABLE_ALIAS) ) {
				alt340=1;
			}
			switch (alt340) {
				case 1 :
					// PLSQLPrinter.g:1504:21: alias
					{
					pushFollow(FOLLOW_alias_in_merge_statement14790);
					alias273=alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_tableview_name_in_merge_statement14793);
			tableview_name272=tableview_name();
			state._fsp--;

			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_merge_statement14809); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_selected_tableview_in_merge_statement14811);
			selected_tableview274=selected_tableview();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_merge_statement14813);
			expression275=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1506:14: ( merge_update_clause )?
			int alt341=2;
			int LA341_0 = input.LA(1);
			if ( (LA341_0==MERGE_UPDATE) ) {
				alt341=1;
			}
			switch (alt341) {
				case 1 :
					// PLSQLPrinter.g:1506:14: merge_update_clause
					{
					pushFollow(FOLLOW_merge_update_clause_in_merge_statement14829);
					merge_update_clause276=merge_update_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1506:35: ( merge_insert_clause )?
			int alt342=2;
			int LA342_0 = input.LA(1);
			if ( (LA342_0==MERGE_INSERT) ) {
				alt342=1;
			}
			switch (alt342) {
				case 1 :
					// PLSQLPrinter.g:1506:35: merge_insert_clause
					{
					pushFollow(FOLLOW_merge_insert_clause_in_merge_statement14832);
					merge_insert_clause277=merge_insert_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1506:56: ( error_logging_clause )?
			int alt343=2;
			int LA343_0 = input.LA(1);
			if ( (LA343_0==LOG_VK) ) {
				alt343=1;
			}
			switch (alt343) {
				case 1 :
					// PLSQLPrinter.g:1506:56: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_merge_statement14835);
					error_logging_clause278=error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1507:5: -> merge_statement(table_name=$tableview_name.sttable_alias=$alias.stselected_tableview=$selected_tableview.stcondition=$expression.stmerge_update_clause=$merge_update_clause.stmerge_insert_clause=$merge_insert_clause.sterror_logging_clause=$error_logging_clause.st)
			{
				retval.st = templateLib.getInstanceOf("merge_statement",new STAttrMap().put("table_name", (tableview_name272!=null?((StringTemplate)tableview_name272.getTemplate()):null)).put("table_alias", (alias273!=null?((StringTemplate)alias273.getTemplate()):null)).put("selected_tableview", (selected_tableview274!=null?((StringTemplate)selected_tableview274.getTemplate()):null)).put("condition", (expression275!=null?((StringTemplate)expression275.getTemplate()):null)).put("merge_update_clause", (merge_update_clause276!=null?((StringTemplate)merge_update_clause276.getTemplate()):null)).put("merge_insert_clause", (merge_insert_clause277!=null?((StringTemplate)merge_insert_clause277.getTemplate()):null)).put("error_logging_clause", (error_logging_clause278!=null?((StringTemplate)error_logging_clause278.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_statement"


	public static class merge_update_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_update_clause"
	// PLSQLPrinter.g:1515:1: merge_update_clause : ^( MERGE_UPDATE (merge_elements+= merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) -> merge_update_clause(merge_elements=$merge_elementswhere_clause=$where_clause.stmerge_update_delete_part=$merge_update_delete_part.st);
	public final PLSQLPrinter.merge_update_clause_return merge_update_clause() throws RecognitionException {
		PLSQLPrinter.merge_update_clause_return retval = new PLSQLPrinter.merge_update_clause_return();
		retval.start = input.LT(1);

		List<Object> list_merge_elements=null;
		TreeRuleReturnScope where_clause279 =null;
		TreeRuleReturnScope merge_update_delete_part280 =null;
		RuleReturnScope merge_elements = null;
		try {
			// PLSQLPrinter.g:1516:5: ( ^( MERGE_UPDATE (merge_elements+= merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) -> merge_update_clause(merge_elements=$merge_elementswhere_clause=$where_clause.stmerge_update_delete_part=$merge_update_delete_part.st))
			// PLSQLPrinter.g:1516:10: ^( MERGE_UPDATE (merge_elements+= merge_element )+ ( where_clause )? ( merge_update_delete_part )? )
			{
			match(input,MERGE_UPDATE,FOLLOW_MERGE_UPDATE_in_merge_update_clause14936); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1516:39: (merge_elements+= merge_element )+
			int cnt344=0;
			loop344:
			while (true) {
				int alt344=2;
				int LA344_0 = input.LA(1);
				if ( (LA344_0==ASSIGN) ) {
					alt344=1;
				}

				switch (alt344) {
				case 1 :
					// PLSQLPrinter.g:1516:39: merge_elements+= merge_element
					{
					pushFollow(FOLLOW_merge_element_in_merge_update_clause14940);
					merge_elements=merge_element();
					state._fsp--;

					if (list_merge_elements==null) list_merge_elements=new ArrayList<Object>();
					list_merge_elements.add(merge_elements.getTemplate());
					}
					break;

				default :
					if ( cnt344 >= 1 ) break loop344;
					EarlyExitException eee = new EarlyExitException(344, input);
					throw eee;
				}
				cnt344++;
			}

			// PLSQLPrinter.g:1516:56: ( where_clause )?
			int alt345=2;
			int LA345_0 = input.LA(1);
			if ( (LA345_0==SQL92_RESERVED_WHERE) ) {
				alt345=1;
			}
			switch (alt345) {
				case 1 :
					// PLSQLPrinter.g:1516:56: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_merge_update_clause14943);
					where_clause279=where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1516:70: ( merge_update_delete_part )?
			int alt346=2;
			int LA346_0 = input.LA(1);
			if ( (LA346_0==SQL92_RESERVED_DELETE) ) {
				alt346=1;
			}
			switch (alt346) {
				case 1 :
					// PLSQLPrinter.g:1516:70: merge_update_delete_part
					{
					pushFollow(FOLLOW_merge_update_delete_part_in_merge_update_clause14946);
					merge_update_delete_part280=merge_update_delete_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1517:5: -> merge_update_clause(merge_elements=$merge_elementswhere_clause=$where_clause.stmerge_update_delete_part=$merge_update_delete_part.st)
			{
				retval.st = templateLib.getInstanceOf("merge_update_clause",new STAttrMap().put("merge_elements", list_merge_elements).put("where_clause", (where_clause279!=null?((StringTemplate)where_clause279.getTemplate()):null)).put("merge_update_delete_part", (merge_update_delete_part280!=null?((StringTemplate)merge_update_delete_part280.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_update_clause"


	public static class merge_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_element"
	// PLSQLPrinter.g:1522:1: merge_element : ^( ASSIGN column_name expression ) -> merge_element(column_name=$column_name.stexpression=$expression.st);
	public final PLSQLPrinter.merge_element_return merge_element() throws RecognitionException {
		PLSQLPrinter.merge_element_return retval = new PLSQLPrinter.merge_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope column_name281 =null;
		TreeRuleReturnScope expression282 =null;

		try {
			// PLSQLPrinter.g:1523:5: ( ^( ASSIGN column_name expression ) -> merge_element(column_name=$column_name.stexpression=$expression.st))
			// PLSQLPrinter.g:1523:10: ^( ASSIGN column_name expression )
			{
			match(input,ASSIGN,FOLLOW_ASSIGN_in_merge_element15015); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_column_name_in_merge_element15017);
			column_name281=column_name();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_merge_element15019);
			expression282=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1524:5: -> merge_element(column_name=$column_name.stexpression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("merge_element",new STAttrMap().put("column_name", (column_name281!=null?((StringTemplate)column_name281.getTemplate()):null)).put("expression", (expression282!=null?((StringTemplate)expression282.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_element"


	public static class merge_update_delete_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_update_delete_part"
	// PLSQLPrinter.g:1527:1: merge_update_delete_part : ^( SQL92_RESERVED_DELETE where_clause ) -> merge_update_delete_part(where_clause=$where_clause.st);
	public final PLSQLPrinter.merge_update_delete_part_return merge_update_delete_part() throws RecognitionException {
		PLSQLPrinter.merge_update_delete_part_return retval = new PLSQLPrinter.merge_update_delete_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope where_clause283 =null;

		try {
			// PLSQLPrinter.g:1528:5: ( ^( SQL92_RESERVED_DELETE where_clause ) -> merge_update_delete_part(where_clause=$where_clause.st))
			// PLSQLPrinter.g:1528:10: ^( SQL92_RESERVED_DELETE where_clause )
			{
			match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_merge_update_delete_part15061); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_where_clause_in_merge_update_delete_part15063);
			where_clause283=where_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1529:5: -> merge_update_delete_part(where_clause=$where_clause.st)
			{
				retval.st = templateLib.getInstanceOf("merge_update_delete_part",new STAttrMap().put("where_clause", (where_clause283!=null?((StringTemplate)where_clause283.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_update_delete_part"


	public static class merge_insert_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_insert_clause"
	// PLSQLPrinter.g:1532:1: merge_insert_clause : ^( MERGE_INSERT ^( COLUMNS (columns+= column_name )* ) expression_list ( where_clause )? ) -> merge_insert_clause(columns=$columnsexpression_list=$expression_list.stwhere_clause=$where_clause.st);
	public final PLSQLPrinter.merge_insert_clause_return merge_insert_clause() throws RecognitionException {
		PLSQLPrinter.merge_insert_clause_return retval = new PLSQLPrinter.merge_insert_clause_return();
		retval.start = input.LT(1);

		List<Object> list_columns=null;
		TreeRuleReturnScope expression_list284 =null;
		TreeRuleReturnScope where_clause285 =null;
		RuleReturnScope columns = null;
		try {
			// PLSQLPrinter.g:1533:5: ( ^( MERGE_INSERT ^( COLUMNS (columns+= column_name )* ) expression_list ( where_clause )? ) -> merge_insert_clause(columns=$columnsexpression_list=$expression_list.stwhere_clause=$where_clause.st))
			// PLSQLPrinter.g:1533:10: ^( MERGE_INSERT ^( COLUMNS (columns+= column_name )* ) expression_list ( where_clause )? )
			{
			match(input,MERGE_INSERT,FOLLOW_MERGE_INSERT_in_merge_insert_clause15100); 
			match(input, Token.DOWN, null); 
			match(input,COLUMNS,FOLLOW_COLUMNS_in_merge_insert_clause15103); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1533:42: (columns+= column_name )*
				loop347:
				while (true) {
					int alt347=2;
					int LA347_0 = input.LA(1);
					if ( (LA347_0==COLUMN_NAME) ) {
						alt347=1;
					}

					switch (alt347) {
					case 1 :
						// PLSQLPrinter.g:1533:42: columns+= column_name
						{
						pushFollow(FOLLOW_column_name_in_merge_insert_clause15107);
						columns=column_name();
						state._fsp--;

						if (list_columns==null) list_columns=new ArrayList<Object>();
						list_columns.add(columns.getTemplate());
						}
						break;

					default :
						break loop347;
					}
				}

				match(input, Token.UP, null); 
			}

			pushFollow(FOLLOW_expression_list_in_merge_insert_clause15111);
			expression_list284=expression_list();
			state._fsp--;

			// PLSQLPrinter.g:1533:74: ( where_clause )?
			int alt348=2;
			int LA348_0 = input.LA(1);
			if ( (LA348_0==SQL92_RESERVED_WHERE) ) {
				alt348=1;
			}
			switch (alt348) {
				case 1 :
					// PLSQLPrinter.g:1533:74: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_merge_insert_clause15113);
					where_clause285=where_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1534:5: -> merge_insert_clause(columns=$columnsexpression_list=$expression_list.stwhere_clause=$where_clause.st)
			{
				retval.st = templateLib.getInstanceOf("merge_insert_clause",new STAttrMap().put("columns", list_columns).put("expression_list", (expression_list284!=null?((StringTemplate)expression_list284.getTemplate()):null)).put("where_clause", (where_clause285!=null?((StringTemplate)where_clause285.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_insert_clause"


	public static class selected_tableview_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "selected_tableview"
	// PLSQLPrinter.g:1537:1: selected_tableview : ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name -> selected_tableview_table(name=$tableview_name.stalias=$alias.st)| select_statement -> selected_tableview_select_statement(select_statement=$select_statement.stalias=$alias.st)) ) ;
	public final PLSQLPrinter.selected_tableview_return selected_tableview() throws RecognitionException {
		PLSQLPrinter.selected_tableview_return retval = new PLSQLPrinter.selected_tableview_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope tableview_name286 =null;
		TreeRuleReturnScope alias287 =null;
		TreeRuleReturnScope select_statement288 =null;

		try {
			// PLSQLPrinter.g:1538:5: ( ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name -> selected_tableview_table(name=$tableview_name.stalias=$alias.st)| select_statement -> selected_tableview_select_statement(select_statement=$select_statement.stalias=$alias.st)) ) )
			// PLSQLPrinter.g:1538:10: ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name -> selected_tableview_table(name=$tableview_name.stalias=$alias.st)| select_statement -> selected_tableview_select_statement(select_statement=$select_statement.stalias=$alias.st)) )
			{
			match(input,SELECTED_TABLEVIEW,FOLLOW_SELECTED_TABLEVIEW_in_selected_tableview15162); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1539:13: ( alias )?
			int alt349=2;
			int LA349_0 = input.LA(1);
			if ( (LA349_0==COLUMN_ALIAS||LA349_0==TABLE_ALIAS) ) {
				alt349=1;
			}
			switch (alt349) {
				case 1 :
					// PLSQLPrinter.g:1539:13: alias
					{
					pushFollow(FOLLOW_alias_in_selected_tableview15176);
					alias287=alias();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1540:13: ( tableview_name -> selected_tableview_table(name=$tableview_name.stalias=$alias.st)| select_statement -> selected_tableview_select_statement(select_statement=$select_statement.stalias=$alias.st))
			int alt350=2;
			int LA350_0 = input.LA(1);
			if ( (LA350_0==TABLEVIEW_NAME) ) {
				alt350=1;
			}
			else if ( (LA350_0==SELECT_STATEMENT) ) {
				alt350=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 350, 0, input);
				throw nvae;
			}

			switch (alt350) {
				case 1 :
					// PLSQLPrinter.g:1541:15: tableview_name
					{
					pushFollow(FOLLOW_tableview_name_in_selected_tableview15207);
					tableview_name286=tableview_name();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1542:17: -> selected_tableview_table(name=$tableview_name.stalias=$alias.st)
					{
						retval.st = templateLib.getInstanceOf("selected_tableview_table",new STAttrMap().put("name", (tableview_name286!=null?((StringTemplate)tableview_name286.getTemplate()):null)).put("alias", (alias287!=null?((StringTemplate)alias287.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1543:17: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_selected_tableview15255);
					select_statement288=select_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1544:17: -> selected_tableview_select_statement(select_statement=$select_statement.stalias=$alias.st)
					{
						retval.st = templateLib.getInstanceOf("selected_tableview_select_statement",new STAttrMap().put("select_statement", (select_statement288!=null?((StringTemplate)select_statement288.getTemplate()):null)).put("alias", (alias287!=null?((StringTemplate)alias287.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selected_tableview"


	public static class lock_table_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "lock_table_statement"
	// PLSQLPrinter.g:1551:1: lock_table_statement : ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) -> template( \"not implemented: lock_table_statement\";
	public final PLSQLPrinter.lock_table_statement_return lock_table_statement() throws RecognitionException {
		PLSQLPrinter.lock_table_statement_return retval = new PLSQLPrinter.lock_table_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1552:5: ( ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) -> template( \"not implemented: lock_table_statement\")
			// PLSQLPrinter.g:1552:10: ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? )
			{
			match(input,PLSQL_RESERVED_LOCK,FOLLOW_PLSQL_RESERVED_LOCK_in_lock_table_statement15334); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1552:32: ( lock_table_element )+
			int cnt351=0;
			loop351:
			while (true) {
				int alt351=2;
				int LA351_0 = input.LA(1);
				if ( (LA351_0==LOCK_TABLE_ELEMENT) ) {
					alt351=1;
				}

				switch (alt351) {
				case 1 :
					// PLSQLPrinter.g:1552:32: lock_table_element
					{
					pushFollow(FOLLOW_lock_table_element_in_lock_table_statement15336);
					lock_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt351 >= 1 ) break loop351;
					EarlyExitException eee = new EarlyExitException(351, input);
					throw eee;
				}
				cnt351++;
			}

			pushFollow(FOLLOW_lock_mode_in_lock_table_statement15339);
			lock_mode();
			state._fsp--;

			// PLSQLPrinter.g:1552:62: ( wait_nowait_part )?
			int alt352=2;
			int LA352_0 = input.LA(1);
			if ( (LA352_0==PLSQL_RESERVED_NOWAIT||LA352_0==WAIT_VK) ) {
				alt352=1;
			}
			switch (alt352) {
				case 1 :
					// PLSQLPrinter.g:1552:62: wait_nowait_part
					{
					pushFollow(FOLLOW_wait_nowait_part_in_lock_table_statement15341);
					wait_nowait_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1553:5: -> template( \"not implemented: lock_table_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: lock_table_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_table_statement"


	public static class wait_nowait_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "wait_nowait_part"
	// PLSQLPrinter.g:1556:1: wait_nowait_part : ( ^( WAIT_VK expression ) -> template( \"not implemented: wait_nowait_part\"| PLSQL_RESERVED_NOWAIT -> template( \"not implemented: wait_nowait_part\");
	public final PLSQLPrinter.wait_nowait_part_return wait_nowait_part() throws RecognitionException {
		PLSQLPrinter.wait_nowait_part_return retval = new PLSQLPrinter.wait_nowait_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1557:5: ( ^( WAIT_VK expression ) -> template( \"not implemented: wait_nowait_part\"| PLSQL_RESERVED_NOWAIT -> template( \"not implemented: wait_nowait_part\")
			int alt353=2;
			int LA353_0 = input.LA(1);
			if ( (LA353_0==WAIT_VK) ) {
				alt353=1;
			}
			else if ( (LA353_0==PLSQL_RESERVED_NOWAIT) ) {
				alt353=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 353, 0, input);
				throw nvae;
			}

			switch (alt353) {
				case 1 :
					// PLSQLPrinter.g:1557:10: ^( WAIT_VK expression )
					{
					match(input,WAIT_VK,FOLLOW_WAIT_VK_in_wait_nowait_part15378); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_wait_nowait_part15380);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1558:5: -> template( \"not implemented: wait_nowait_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: wait_nowait_part");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1559:10: PLSQL_RESERVED_NOWAIT
					{
					match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_wait_nowait_part15406); 
					// TEMPLATE REWRITE
					// 1560:5: -> template( \"not implemented: wait_nowait_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: wait_nowait_part");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "wait_nowait_part"


	public static class lock_table_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "lock_table_element"
	// PLSQLPrinter.g:1565:1: lock_table_element : ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) -> template( \"not implemented: lock_table_element\";
	public final PLSQLPrinter.lock_table_element_return lock_table_element() throws RecognitionException {
		PLSQLPrinter.lock_table_element_return retval = new PLSQLPrinter.lock_table_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1566:5: ( ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) -> template( \"not implemented: lock_table_element\")
			// PLSQLPrinter.g:1566:10: ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? )
			{
			match(input,LOCK_TABLE_ELEMENT,FOLLOW_LOCK_TABLE_ELEMENT_in_lock_table_element15443); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_lock_table_element15445);
			tableview_name();
			state._fsp--;

			// PLSQLPrinter.g:1566:46: ( partition_extension_clause )?
			int alt354=2;
			int LA354_0 = input.LA(1);
			if ( (LA354_0==PARTITION_VK||LA354_0==SUBPARTITION_VK) ) {
				alt354=1;
			}
			switch (alt354) {
				case 1 :
					// PLSQLPrinter.g:1566:46: partition_extension_clause
					{
					pushFollow(FOLLOW_partition_extension_clause_in_lock_table_element15447);
					partition_extension_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1567:5: -> template( \"not implemented: lock_table_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: lock_table_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_table_element"


	public static class lock_mode_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "lock_mode"
	// PLSQLPrinter.g:1570:1: lock_mode : ( ROW_VK PLSQL_RESERVED_SHARE -> template( \"not implemented: lock_mode\"| ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )? -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\");
	public final PLSQLPrinter.lock_mode_return lock_mode() throws RecognitionException {
		PLSQLPrinter.lock_mode_return retval = new PLSQLPrinter.lock_mode_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1571:5: ( ROW_VK PLSQL_RESERVED_SHARE -> template( \"not implemented: lock_mode\"| ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )? -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\")
			int alt356=5;
			switch ( input.LA(1) ) {
			case ROW_VK:
				{
				int LA356_1 = input.LA(2);
				if ( (LA356_1==PLSQL_RESERVED_SHARE) ) {
					alt356=1;
				}
				else if ( (LA356_1==PLSQL_RESERVED_EXCLUSIVE) ) {
					alt356=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 356, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PLSQL_RESERVED_SHARE:
				{
				int LA356_2 = input.LA(2);
				if ( (LA356_2==ROW_VK) ) {
					alt356=4;
				}
				else if ( (LA356_2==UP||LA356_2==PLSQL_RESERVED_NOWAIT||LA356_2==SQL92_RESERVED_UPDATE||LA356_2==WAIT_VK) ) {
					alt356=3;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 356, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PLSQL_RESERVED_EXCLUSIVE:
				{
				alt356=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 356, 0, input);
				throw nvae;
			}
			switch (alt356) {
				case 1 :
					// PLSQLPrinter.g:1571:10: ROW_VK PLSQL_RESERVED_SHARE
					{
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode15483); 
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode15485); 
					// TEMPLATE REWRITE
					// 1572:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1573:10: ROW_VK PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode15510); 
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode15512); 
					// TEMPLATE REWRITE
					// 1574:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1575:10: PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )?
					{
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode15537); 
					// PLSQLPrinter.g:1575:31: ( SQL92_RESERVED_UPDATE )?
					int alt355=2;
					int LA355_0 = input.LA(1);
					if ( (LA355_0==SQL92_RESERVED_UPDATE) ) {
						alt355=1;
					}
					switch (alt355) {
						case 1 :
							// PLSQLPrinter.g:1575:31: SQL92_RESERVED_UPDATE
							{
							match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_lock_mode15539); 
							}
							break;

					}

					// TEMPLATE REWRITE
					// 1576:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1577:10: PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode15565); 
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode15567); 
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode15569); 
					// TEMPLATE REWRITE
					// 1578:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1579:10: PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode15594); 
					// TEMPLATE REWRITE
					// 1580:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_mode"


	public static class general_table_ref_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_table_ref"
	// PLSQLPrinter.g:1586:1: general_table_ref : ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? ) -> general_table_ref(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.sttable_alias=$alias.st);
	public final PLSQLPrinter.general_table_ref_return general_table_ref() throws RecognitionException {
		PLSQLPrinter.general_table_ref_return retval = new PLSQLPrinter.general_table_ref_return();
		retval.start = input.LT(1);

		CommonTree ONLY_VK289=null;
		TreeRuleReturnScope dml_table_expression_clause290 =null;
		TreeRuleReturnScope alias291 =null;

		try {
			// PLSQLPrinter.g:1587:5: ( ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? ) -> general_table_ref(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.sttable_alias=$alias.st))
			// PLSQLPrinter.g:1587:10: ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? )
			{
			match(input,TABLE_REF,FOLLOW_TABLE_REF_in_general_table_ref15632); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1587:22: ( alias )?
			int alt357=2;
			int LA357_0 = input.LA(1);
			if ( (LA357_0==COLUMN_ALIAS||LA357_0==TABLE_ALIAS) ) {
				alt357=1;
			}
			switch (alt357) {
				case 1 :
					// PLSQLPrinter.g:1587:22: alias
					{
					pushFollow(FOLLOW_alias_in_general_table_ref15634);
					alias291=alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_table_expression_clause_in_general_table_ref15637);
			dml_table_expression_clause290=dml_table_expression_clause();
			state._fsp--;

			// PLSQLPrinter.g:1587:57: ( ONLY_VK )?
			int alt358=2;
			int LA358_0 = input.LA(1);
			if ( (LA358_0==ONLY_VK) ) {
				alt358=1;
			}
			switch (alt358) {
				case 1 :
					// PLSQLPrinter.g:1587:57: ONLY_VK
					{
					ONLY_VK289=(CommonTree)match(input,ONLY_VK,FOLLOW_ONLY_VK_in_general_table_ref15639); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1588:5: -> general_table_ref(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.sttable_alias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("general_table_ref",new STAttrMap().put("is_only", ONLY_VK289 != null).put("dml_table_expression_clause", (dml_table_expression_clause290!=null?((StringTemplate)dml_table_expression_clause290.getTemplate()):null)).put("table_alias", (alias291!=null?((StringTemplate)alias291.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_table_ref"


	public static class static_returning_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "static_returning_clause"
	// PLSQLPrinter.g:1594:1: static_returning_clause : ^( STATIC_RETURNING (expressions+= expression )+ into_clause ) -> static_returning_clause(expressions=$expressionsinto_clause=$into_clause.st);
	public final PLSQLPrinter.static_returning_clause_return static_returning_clause() throws RecognitionException {
		PLSQLPrinter.static_returning_clause_return retval = new PLSQLPrinter.static_returning_clause_return();
		retval.start = input.LT(1);

		List<Object> list_expressions=null;
		TreeRuleReturnScope into_clause292 =null;
		RuleReturnScope expressions = null;
		try {
			// PLSQLPrinter.g:1595:5: ( ^( STATIC_RETURNING (expressions+= expression )+ into_clause ) -> static_returning_clause(expressions=$expressionsinto_clause=$into_clause.st))
			// PLSQLPrinter.g:1595:10: ^( STATIC_RETURNING (expressions+= expression )+ into_clause )
			{
			match(input,STATIC_RETURNING,FOLLOW_STATIC_RETURNING_in_static_returning_clause15724); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1595:40: (expressions+= expression )+
			int cnt359=0;
			loop359:
			while (true) {
				int alt359=2;
				int LA359_0 = input.LA(1);
				if ( (LA359_0==EXPR||LA359_0==LOGIC_EXPR) ) {
					alt359=1;
				}

				switch (alt359) {
				case 1 :
					// PLSQLPrinter.g:1595:40: expressions+= expression
					{
					pushFollow(FOLLOW_expression_in_static_returning_clause15728);
					expressions=expression();
					state._fsp--;

					if (list_expressions==null) list_expressions=new ArrayList<Object>();
					list_expressions.add(expressions.getTemplate());
					}
					break;

				default :
					if ( cnt359 >= 1 ) break loop359;
					EarlyExitException eee = new EarlyExitException(359, input);
					throw eee;
				}
				cnt359++;
			}

			pushFollow(FOLLOW_into_clause_in_static_returning_clause15731);
			into_clause292=into_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1596:5: -> static_returning_clause(expressions=$expressionsinto_clause=$into_clause.st)
			{
				retval.st = templateLib.getInstanceOf("static_returning_clause",new STAttrMap().put("expressions", list_expressions).put("into_clause", (into_clause292!=null?((StringTemplate)into_clause292.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "static_returning_clause"


	public static class error_logging_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "error_logging_clause"
	// PLSQLPrinter.g:1599:1: error_logging_clause : ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? ) -> template( \"not implemented: error_logging_clause\";
	public final PLSQLPrinter.error_logging_clause_return error_logging_clause() throws RecognitionException {
		PLSQLPrinter.error_logging_clause_return retval = new PLSQLPrinter.error_logging_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1600:5: ( ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? ) -> template( \"not implemented: error_logging_clause\")
			// PLSQLPrinter.g:1600:10: ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? )
			{
			match(input,LOG_VK,FOLLOW_LOG_VK_in_error_logging_clause15773); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1600:19: ( error_logging_into_part )?
				int alt360=2;
				int LA360_0 = input.LA(1);
				if ( (LA360_0==SQL92_RESERVED_INTO) ) {
					alt360=1;
				}
				switch (alt360) {
					case 1 :
						// PLSQLPrinter.g:1600:19: error_logging_into_part
						{
						pushFollow(FOLLOW_error_logging_into_part_in_error_logging_clause15775);
						error_logging_into_part();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1600:44: ( expression )?
				int alt361=2;
				int LA361_0 = input.LA(1);
				if ( (LA361_0==EXPR||LA361_0==LOGIC_EXPR) ) {
					alt361=1;
				}
				switch (alt361) {
					case 1 :
						// PLSQLPrinter.g:1600:44: expression
						{
						pushFollow(FOLLOW_expression_in_error_logging_clause15778);
						expression();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1600:56: ( error_logging_reject_part )?
				int alt362=2;
				int LA362_0 = input.LA(1);
				if ( (LA362_0==REJECT_VK) ) {
					alt362=1;
				}
				switch (alt362) {
					case 1 :
						// PLSQLPrinter.g:1600:56: error_logging_reject_part
						{
						pushFollow(FOLLOW_error_logging_reject_part_in_error_logging_clause15781);
						error_logging_reject_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1601:5: -> template( \"not implemented: error_logging_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: error_logging_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "error_logging_clause"


	public static class error_logging_into_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "error_logging_into_part"
	// PLSQLPrinter.g:1604:1: error_logging_into_part : ^( SQL92_RESERVED_INTO tableview_name ) -> template( \"not implemented: error_logging_into_part\";
	public final PLSQLPrinter.error_logging_into_part_return error_logging_into_part() throws RecognitionException {
		PLSQLPrinter.error_logging_into_part_return retval = new PLSQLPrinter.error_logging_into_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1605:5: ( ^( SQL92_RESERVED_INTO tableview_name ) -> template( \"not implemented: error_logging_into_part\")
			// PLSQLPrinter.g:1605:10: ^( SQL92_RESERVED_INTO tableview_name )
			{
			match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_error_logging_into_part15818); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_error_logging_into_part15820);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1606:5: -> template( \"not implemented: error_logging_into_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: error_logging_into_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "error_logging_into_part"


	public static class error_logging_reject_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "error_logging_reject_part"
	// PLSQLPrinter.g:1609:1: error_logging_reject_part : ^( REJECT_VK ( UNLIMITED_VK | expression ) ) -> template( \"not implemented: error_logging_reject_part\";
	public final PLSQLPrinter.error_logging_reject_part_return error_logging_reject_part() throws RecognitionException {
		PLSQLPrinter.error_logging_reject_part_return retval = new PLSQLPrinter.error_logging_reject_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1610:5: ( ^( REJECT_VK ( UNLIMITED_VK | expression ) ) -> template( \"not implemented: error_logging_reject_part\")
			// PLSQLPrinter.g:1610:10: ^( REJECT_VK ( UNLIMITED_VK | expression ) )
			{
			match(input,REJECT_VK,FOLLOW_REJECT_VK_in_error_logging_reject_part15856); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1610:22: ( UNLIMITED_VK | expression )
			int alt363=2;
			int LA363_0 = input.LA(1);
			if ( (LA363_0==UNLIMITED_VK) ) {
				alt363=1;
			}
			else if ( (LA363_0==EXPR||LA363_0==LOGIC_EXPR) ) {
				alt363=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 363, 0, input);
				throw nvae;
			}

			switch (alt363) {
				case 1 :
					// PLSQLPrinter.g:1610:23: UNLIMITED_VK
					{
					match(input,UNLIMITED_VK,FOLLOW_UNLIMITED_VK_in_error_logging_reject_part15859); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1610:36: expression
					{
					pushFollow(FOLLOW_expression_in_error_logging_reject_part15861);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1611:5: -> template( \"not implemented: error_logging_reject_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: error_logging_reject_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "error_logging_reject_part"


	public static class dml_table_expression_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_table_expression_clause"
	// PLSQLPrinter.g:1614:1: dml_table_expression_clause : ( ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE table_collection_expression ) -> { $table_collection_expression.st }| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> dml_table_expression_clause_select(select_statement=$select_statement.stsubquery_restriction_clause=$subquery_restriction_clause.st)| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st }) ) | table_ref -> in_parens(val=$table_ref.st));
	public final PLSQLPrinter.dml_table_expression_clause_return dml_table_expression_clause() throws RecognitionException {
		PLSQLPrinter.dml_table_expression_clause_return retval = new PLSQLPrinter.dml_table_expression_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope table_collection_expression293 =null;
		TreeRuleReturnScope select_statement294 =null;
		TreeRuleReturnScope subquery_restriction_clause295 =null;
		TreeRuleReturnScope tableview_name296 =null;
		TreeRuleReturnScope sample_clause297 =null;
		TreeRuleReturnScope general_element298 =null;
		TreeRuleReturnScope standard_function299 =null;
		TreeRuleReturnScope table_ref300 =null;

		try {
			// PLSQLPrinter.g:1615:5: ( ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE table_collection_expression ) -> { $table_collection_expression.st }| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> dml_table_expression_clause_select(select_statement=$select_statement.stsubquery_restriction_clause=$subquery_restriction_clause.st)| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st }) ) | table_ref -> in_parens(val=$table_ref.st))
			int alt367=2;
			int LA367_0 = input.LA(1);
			if ( (LA367_0==TABLE_EXPRESSION) ) {
				alt367=1;
			}
			else if ( (LA367_0==TABLE_REF) ) {
				alt367=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 367, 0, input);
				throw nvae;
			}

			switch (alt367) {
				case 1 :
					// PLSQLPrinter.g:1615:10: ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE table_collection_expression ) -> { $table_collection_expression.st }| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> dml_table_expression_clause_select(select_statement=$select_statement.stsubquery_restriction_clause=$subquery_restriction_clause.st)| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st }) )
					{
					match(input,TABLE_EXPRESSION,FOLLOW_TABLE_EXPRESSION_in_dml_table_expression_clause15898); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1616:9: ( ^( COLLECTION_MODE table_collection_expression ) -> { $table_collection_expression.st }| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> dml_table_expression_clause_select(select_statement=$select_statement.stsubquery_restriction_clause=$subquery_restriction_clause.st)| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st })
					int alt366=5;
					switch ( input.LA(1) ) {
					case COLLECTION_MODE:
						{
						alt366=1;
						}
						break;
					case SELECT_MODE:
						{
						alt366=2;
						}
						break;
					case DIRECT_MODE:
						{
						alt366=3;
						}
						break;
					case CASCATED_ELEMENT:
						{
						alt366=4;
						}
						break;
					case CAST_VK:
					case CHR_VK:
					case COLLECT_VK:
					case COUNT_VK:
					case DECOMPOSE_VK:
					case EXTRACT_VK:
					case FIRST_VALUE_VK:
					case FUNCTION_ENABLING_OVER:
					case FUNCTION_ENABLING_USING:
					case FUNCTION_ENABLING_WITHIN_OR_OVER:
					case LAST_VALUE_VK:
					case PREDICTION_FUNCTION:
					case TRANSLATE_VK:
					case TREAT_VK:
					case TRIM_VK:
					case XMLAGG_VK:
					case XMLCAST_VK:
					case XMLCOLATTVAL_VK:
					case XMLELEMENT_VK:
					case XMLEXISTS_VK:
					case XMLFOREST_VK:
					case XMLPARSE_VK:
					case XMLPI_VK:
					case XMLQUERY_VK:
					case XMLROOT_VK:
					case XMLSERIALIZE_VK:
					case XMLTABLE_VK:
						{
						alt366=5;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 366, 0, input);
						throw nvae;
					}
					switch (alt366) {
						case 1 :
							// PLSQLPrinter.g:1616:14: ^( COLLECTION_MODE table_collection_expression )
							{
							match(input,COLLECTION_MODE,FOLLOW_COLLECTION_MODE_in_dml_table_expression_clause15915); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_table_collection_expression_in_dml_table_expression_clause15917);
							table_collection_expression293=table_collection_expression();
							state._fsp--;

							match(input, Token.UP, null); 

							// TEMPLATE REWRITE
							// 1616:61: -> { $table_collection_expression.st }
							{
								retval.st =  (table_collection_expression293!=null?((StringTemplate)table_collection_expression293.getTemplate()):null) ;
							}



							}
							break;
						case 2 :
							// PLSQLPrinter.g:1617:14: ^( SELECT_MODE select_statement ( subquery_restriction_clause )? )
							{
							match(input,SELECT_MODE,FOLLOW_SELECT_MODE_in_dml_table_expression_clause15938); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_select_statement_in_dml_table_expression_clause15940);
							select_statement294=select_statement();
							state._fsp--;

							// PLSQLPrinter.g:1617:45: ( subquery_restriction_clause )?
							int alt364=2;
							int LA364_0 = input.LA(1);
							if ( (LA364_0==SQL92_RESERVED_WITH) ) {
								alt364=1;
							}
							switch (alt364) {
								case 1 :
									// PLSQLPrinter.g:1617:45: subquery_restriction_clause
									{
									pushFollow(FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause15942);
									subquery_restriction_clause295=subquery_restriction_clause();
									state._fsp--;

									}
									break;

							}

							match(input, Token.UP, null); 

							// TEMPLATE REWRITE
							// 1618:15: -> dml_table_expression_clause_select(select_statement=$select_statement.stsubquery_restriction_clause=$subquery_restriction_clause.st)
							{
								retval.st = templateLib.getInstanceOf("dml_table_expression_clause_select",new STAttrMap().put("select_statement", (select_statement294!=null?((StringTemplate)select_statement294.getTemplate()):null)).put("subquery_restriction_clause", (subquery_restriction_clause295!=null?((StringTemplate)subquery_restriction_clause295.getTemplate()):null)));
							}



							}
							break;
						case 3 :
							// PLSQLPrinter.g:1621:14: ^( DIRECT_MODE tableview_name ( sample_clause )? )
							{
							match(input,DIRECT_MODE,FOLLOW_DIRECT_MODE_in_dml_table_expression_clause16031); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_tableview_name_in_dml_table_expression_clause16033);
							tableview_name296=tableview_name();
							state._fsp--;

							// PLSQLPrinter.g:1621:43: ( sample_clause )?
							int alt365=2;
							int LA365_0 = input.LA(1);
							if ( (LA365_0==SAMPLE_VK) ) {
								alt365=1;
							}
							switch (alt365) {
								case 1 :
									// PLSQLPrinter.g:1621:43: sample_clause
									{
									pushFollow(FOLLOW_sample_clause_in_dml_table_expression_clause16035);
									sample_clause297=sample_clause();
									state._fsp--;

									}
									break;

							}

							match(input, Token.UP, null); 

							// TEMPLATE REWRITE
							// 1622:15: -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)
							{
								retval.st = templateLib.getInstanceOf("dml_table_expression_clause_direct",new STAttrMap().put("table_or_view_name", (tableview_name296!=null?((StringTemplate)tableview_name296.getTemplate()):null)).put("sample_clause", (sample_clause297!=null?((StringTemplate)sample_clause297.getTemplate()):null)));
							}



							}
							break;
						case 4 :
							// PLSQLPrinter.g:1623:14: general_element
							{
							pushFollow(FOLLOW_general_element_in_dml_table_expression_clause16080);
							general_element298=general_element();
							state._fsp--;

							// TEMPLATE REWRITE
							// 1623:30: -> { $general_element.st }
							{
								retval.st =  (general_element298!=null?((StringTemplate)general_element298.getTemplate()):null) ;
							}



							}
							break;
						case 5 :
							// PLSQLPrinter.g:1624:14: standard_function
							{
							pushFollow(FOLLOW_standard_function_in_dml_table_expression_clause16099);
							standard_function299=standard_function();
							state._fsp--;

							// TEMPLATE REWRITE
							// 1624:32: -> { $standard_function.st }
							{
								retval.st =  (standard_function299!=null?((StringTemplate)standard_function299.getTemplate()):null) ;
							}



							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1627:14: table_ref
					{
					pushFollow(FOLLOW_table_ref_in_dml_table_expression_clause16138);
					table_ref300=table_ref();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1627:24: -> in_parens(val=$table_ref.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (table_ref300!=null?((StringTemplate)table_ref300.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_table_expression_clause"


	public static class table_collection_expression_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_collection_expression"
	// PLSQLPrinter.g:1630:1: table_collection_expression : ( expression -> table_collection_expression(expression_or_subquery=$expression.stis_outer_join=false)| subquery -> table_collection_expression(expression_or_subquery=$subquery.stis_outer_join=false)| ^( OUTER_JOIN_SIGN expression ) -> table_collection_expression(expression_or_subquery=$expression.stis_outer_join=true)| ^( OUTER_JOIN_SIGN subquery ) -> table_collection_expression(expression_or_subquery=$subquery.stis_outer_join=true));
	public final PLSQLPrinter.table_collection_expression_return table_collection_expression() throws RecognitionException {
		PLSQLPrinter.table_collection_expression_return retval = new PLSQLPrinter.table_collection_expression_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression301 =null;
		TreeRuleReturnScope subquery302 =null;
		TreeRuleReturnScope expression303 =null;
		TreeRuleReturnScope subquery304 =null;

		try {
			// PLSQLPrinter.g:1631:5: ( expression -> table_collection_expression(expression_or_subquery=$expression.stis_outer_join=false)| subquery -> table_collection_expression(expression_or_subquery=$subquery.stis_outer_join=false)| ^( OUTER_JOIN_SIGN expression ) -> table_collection_expression(expression_or_subquery=$expression.stis_outer_join=true)| ^( OUTER_JOIN_SIGN subquery ) -> table_collection_expression(expression_or_subquery=$subquery.stis_outer_join=true))
			int alt368=4;
			switch ( input.LA(1) ) {
			case EXPR:
			case LOGIC_EXPR:
				{
				alt368=1;
				}
				break;
			case SUBQUERY:
				{
				alt368=2;
				}
				break;
			case OUTER_JOIN_SIGN:
				{
				int LA368_3 = input.LA(2);
				if ( (LA368_3==DOWN) ) {
					int LA368_4 = input.LA(3);
					if ( (LA368_4==EXPR||LA368_4==LOGIC_EXPR) ) {
						alt368=3;
					}
					else if ( (LA368_4==SUBQUERY) ) {
						alt368=4;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 368, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 368, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 368, 0, input);
				throw nvae;
			}
			switch (alt368) {
				case 1 :
					// PLSQLPrinter.g:1631:9: expression
					{
					pushFollow(FOLLOW_expression_in_table_collection_expression16166);
					expression301=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1632:5: -> table_collection_expression(expression_or_subquery=$expression.stis_outer_join=false)
					{
						retval.st = templateLib.getInstanceOf("table_collection_expression",new STAttrMap().put("expression_or_subquery", (expression301!=null?((StringTemplate)expression301.getTemplate()):null)).put("is_outer_join", false));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1633:9: subquery
					{
					pushFollow(FOLLOW_subquery_in_table_collection_expression16195);
					subquery302=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1634:5: -> table_collection_expression(expression_or_subquery=$subquery.stis_outer_join=false)
					{
						retval.st = templateLib.getInstanceOf("table_collection_expression",new STAttrMap().put("expression_or_subquery", (subquery302!=null?((StringTemplate)subquery302.getTemplate()):null)).put("is_outer_join", false));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1635:9: ^( OUTER_JOIN_SIGN expression )
					{
					match(input,OUTER_JOIN_SIGN,FOLLOW_OUTER_JOIN_SIGN_in_table_collection_expression16225); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_table_collection_expression16227);
					expression303=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1636:5: -> table_collection_expression(expression_or_subquery=$expression.stis_outer_join=true)
					{
						retval.st = templateLib.getInstanceOf("table_collection_expression",new STAttrMap().put("expression_or_subquery", (expression303!=null?((StringTemplate)expression303.getTemplate()):null)).put("is_outer_join", true));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1637:9: ^( OUTER_JOIN_SIGN subquery )
					{
					match(input,OUTER_JOIN_SIGN,FOLLOW_OUTER_JOIN_SIGN_in_table_collection_expression16258); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_subquery_in_table_collection_expression16260);
					subquery304=subquery();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1638:5: -> table_collection_expression(expression_or_subquery=$subquery.stis_outer_join=true)
					{
						retval.st = templateLib.getInstanceOf("table_collection_expression",new STAttrMap().put("expression_or_subquery", (subquery304!=null?((StringTemplate)subquery304.getTemplate()):null)).put("is_outer_join", true));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_collection_expression"


	public static class subquery_restriction_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_restriction_clause"
	// PLSQLPrinter.g:1641:1: subquery_restriction_clause : ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) ) -> template( \"not implemented: subquery_restriction_clause\";
	public final PLSQLPrinter.subquery_restriction_clause_return subquery_restriction_clause() throws RecognitionException {
		PLSQLPrinter.subquery_restriction_clause_return retval = new PLSQLPrinter.subquery_restriction_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1642:5: ( ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) ) -> template( \"not implemented: subquery_restriction_clause\")
			// PLSQLPrinter.g:1642:10: ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) )
			{
			match(input,SQL92_RESERVED_WITH,FOLLOW_SQL92_RESERVED_WITH_in_subquery_restriction_clause16301); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1642:32: ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? )
			int alt370=2;
			int LA370_0 = input.LA(1);
			if ( (LA370_0==READ_VK) ) {
				alt370=1;
			}
			else if ( (LA370_0==SQL92_RESERVED_CHECK) ) {
				alt370=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 370, 0, input);
				throw nvae;
			}

			switch (alt370) {
				case 1 :
					// PLSQLPrinter.g:1642:33: READ_VK
					{
					match(input,READ_VK,FOLLOW_READ_VK_in_subquery_restriction_clause16304); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1642:41: SQL92_RESERVED_CHECK ( constraint_name )?
					{
					match(input,SQL92_RESERVED_CHECK,FOLLOW_SQL92_RESERVED_CHECK_in_subquery_restriction_clause16306); 
					// PLSQLPrinter.g:1642:62: ( constraint_name )?
					int alt369=2;
					int LA369_0 = input.LA(1);
					if ( (LA369_0==CONSTRAINT_NAME) ) {
						alt369=1;
					}
					switch (alt369) {
						case 1 :
							// PLSQLPrinter.g:1642:62: constraint_name
							{
							pushFollow(FOLLOW_constraint_name_in_subquery_restriction_clause16308);
							constraint_name();
							state._fsp--;

							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1643:5: -> template( \"not implemented: subquery_restriction_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: subquery_restriction_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_restriction_clause"


	public static class sample_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sample_clause"
	// PLSQLPrinter.g:1646:1: sample_clause : ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? ) -> template( \"not implemented: sample_clause\";
	public final PLSQLPrinter.sample_clause_return sample_clause() throws RecognitionException {
		PLSQLPrinter.sample_clause_return retval = new PLSQLPrinter.sample_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1647:5: ( ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? ) -> template( \"not implemented: sample_clause\")
			// PLSQLPrinter.g:1647:10: ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? )
			{
			match(input,SAMPLE_VK,FOLLOW_SAMPLE_VK_in_sample_clause16346); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1647:22: ( BLOCK_VK )?
			int alt371=2;
			int LA371_0 = input.LA(1);
			if ( (LA371_0==BLOCK_VK) ) {
				alt371=1;
			}
			switch (alt371) {
				case 1 :
					// PLSQLPrinter.g:1647:22: BLOCK_VK
					{
					match(input,BLOCK_VK,FOLLOW_BLOCK_VK_in_sample_clause16348); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_sample_clause16351);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1647:43: ( seed_part )?
			int alt372=2;
			int LA372_0 = input.LA(1);
			if ( (LA372_0==SEED_VK) ) {
				alt372=1;
			}
			switch (alt372) {
				case 1 :
					// PLSQLPrinter.g:1647:43: seed_part
					{
					pushFollow(FOLLOW_seed_part_in_sample_clause16353);
					seed_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1648:5: -> template( \"not implemented: sample_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: sample_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sample_clause"


	public static class seed_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "seed_part"
	// PLSQLPrinter.g:1651:1: seed_part : ^( SEED_VK expression ) -> template( \"not implemented: seed_part\";
	public final PLSQLPrinter.seed_part_return seed_part() throws RecognitionException {
		PLSQLPrinter.seed_part_return retval = new PLSQLPrinter.seed_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1652:5: ( ^( SEED_VK expression ) -> template( \"not implemented: seed_part\")
			// PLSQLPrinter.g:1652:10: ^( SEED_VK expression )
			{
			match(input,SEED_VK,FOLLOW_SEED_VK_in_seed_part16391); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_seed_part16393);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1653:5: -> template( \"not implemented: seed_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: seed_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "seed_part"


	public static class cursor_manipulation_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_manipulation_statements"
	// PLSQLPrinter.g:1662:1: cursor_manipulation_statements : ( close_statement -> { $close_statement.st }| open_statement -> { $open_statement.st }| fetch_statement -> { $fetch_statement.st }| open_for_statement -> { $open_for_statement.st });
	public final PLSQLPrinter.cursor_manipulation_statements_return cursor_manipulation_statements() throws RecognitionException {
		PLSQLPrinter.cursor_manipulation_statements_return retval = new PLSQLPrinter.cursor_manipulation_statements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope close_statement305 =null;
		TreeRuleReturnScope open_statement306 =null;
		TreeRuleReturnScope fetch_statement307 =null;
		TreeRuleReturnScope open_for_statement308 =null;

		try {
			// PLSQLPrinter.g:1663:5: ( close_statement -> { $close_statement.st }| open_statement -> { $open_statement.st }| fetch_statement -> { $fetch_statement.st }| open_for_statement -> { $open_for_statement.st })
			int alt373=4;
			switch ( input.LA(1) ) {
			case CLOSE_VK:
				{
				alt373=1;
				}
				break;
			case OPEN_VK:
				{
				int LA373_2 = input.LA(2);
				if ( (LA373_2==DOWN) ) {
					int LA373_4 = input.LA(3);
					if ( (LA373_4==CURSOR_NAME) ) {
						alt373=2;
					}
					else if ( (LA373_4==VARIABLE_NAME) ) {
						alt373=4;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 373, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 373, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_FETCH:
				{
				alt373=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 373, 0, input);
				throw nvae;
			}
			switch (alt373) {
				case 1 :
					// PLSQLPrinter.g:1663:10: close_statement
					{
					pushFollow(FOLLOW_close_statement_in_cursor_manipulation_statements16434);
					close_statement305=close_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1663:26: -> { $close_statement.st }
					{
						retval.st =  (close_statement305!=null?((StringTemplate)close_statement305.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1664:10: open_statement
					{
					pushFollow(FOLLOW_open_statement_in_cursor_manipulation_statements16449);
					open_statement306=open_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1664:25: -> { $open_statement.st }
					{
						retval.st =  (open_statement306!=null?((StringTemplate)open_statement306.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1665:10: fetch_statement
					{
					pushFollow(FOLLOW_fetch_statement_in_cursor_manipulation_statements16464);
					fetch_statement307=fetch_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1665:26: -> { $fetch_statement.st }
					{
						retval.st =  (fetch_statement307!=null?((StringTemplate)fetch_statement307.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1666:10: open_for_statement
					{
					pushFollow(FOLLOW_open_for_statement_in_cursor_manipulation_statements16479);
					open_for_statement308=open_for_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1666:29: -> { $open_for_statement.st }
					{
						retval.st =  (open_for_statement308!=null?((StringTemplate)open_for_statement308.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_manipulation_statements"


	public static class close_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "close_statement"
	// PLSQLPrinter.g:1669:1: close_statement : ^( CLOSE_VK cursor_name ) -> close_statement(cursor_name=$cursor_name.st);
	public final PLSQLPrinter.close_statement_return close_statement() throws RecognitionException {
		PLSQLPrinter.close_statement_return retval = new PLSQLPrinter.close_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope cursor_name309 =null;

		try {
			// PLSQLPrinter.g:1670:5: ( ^( CLOSE_VK cursor_name ) -> close_statement(cursor_name=$cursor_name.st))
			// PLSQLPrinter.g:1670:11: ^( CLOSE_VK cursor_name )
			{
			match(input,CLOSE_VK,FOLLOW_CLOSE_VK_in_close_statement16505); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_close_statement16507);
			cursor_name309=cursor_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1671:5: -> close_statement(cursor_name=$cursor_name.st)
			{
				retval.st = templateLib.getInstanceOf("close_statement",new STAttrMap().put("cursor_name", (cursor_name309!=null?((StringTemplate)cursor_name309.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "close_statement"


	public static class open_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "open_statement"
	// PLSQLPrinter.g:1674:1: open_statement : ^( OPEN_VK cursor_name ( expression_list )? ) -> open_statement(cursor_name=$cursor_name.stexpression_list=$expression_list.st);
	public final PLSQLPrinter.open_statement_return open_statement() throws RecognitionException {
		PLSQLPrinter.open_statement_return retval = new PLSQLPrinter.open_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope cursor_name310 =null;
		TreeRuleReturnScope expression_list311 =null;

		try {
			// PLSQLPrinter.g:1675:5: ( ^( OPEN_VK cursor_name ( expression_list )? ) -> open_statement(cursor_name=$cursor_name.stexpression_list=$expression_list.st))
			// PLSQLPrinter.g:1675:10: ^( OPEN_VK cursor_name ( expression_list )? )
			{
			match(input,OPEN_VK,FOLLOW_OPEN_VK_in_open_statement16545); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_open_statement16547);
			cursor_name310=cursor_name();
			state._fsp--;

			// PLSQLPrinter.g:1675:32: ( expression_list )?
			int alt374=2;
			int LA374_0 = input.LA(1);
			if ( (LA374_0==EXPR_LIST) ) {
				alt374=1;
			}
			switch (alt374) {
				case 1 :
					// PLSQLPrinter.g:1675:32: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_open_statement16549);
					expression_list311=expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1676:5: -> open_statement(cursor_name=$cursor_name.stexpression_list=$expression_list.st)
			{
				retval.st = templateLib.getInstanceOf("open_statement",new STAttrMap().put("cursor_name", (cursor_name310!=null?((StringTemplate)cursor_name310.getTemplate()):null)).put("expression_list", (expression_list311!=null?((StringTemplate)expression_list311.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "open_statement"


	public static class fetch_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "fetch_statement"
	// PLSQLPrinter.g:1679:1: fetch_statement : ^( SQL92_RESERVED_FETCH cursor_name into_clause ) -> fetch_statement(cursor_name=$cursor_name.stinto_clause=$into_clause.st);
	public final PLSQLPrinter.fetch_statement_return fetch_statement() throws RecognitionException {
		PLSQLPrinter.fetch_statement_return retval = new PLSQLPrinter.fetch_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope cursor_name312 =null;
		TreeRuleReturnScope into_clause313 =null;

		try {
			// PLSQLPrinter.g:1680:5: ( ^( SQL92_RESERVED_FETCH cursor_name into_clause ) -> fetch_statement(cursor_name=$cursor_name.stinto_clause=$into_clause.st))
			// PLSQLPrinter.g:1680:10: ^( SQL92_RESERVED_FETCH cursor_name into_clause )
			{
			match(input,SQL92_RESERVED_FETCH,FOLLOW_SQL92_RESERVED_FETCH_in_fetch_statement16592); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_fetch_statement16594);
			cursor_name312=cursor_name();
			state._fsp--;

			pushFollow(FOLLOW_into_clause_in_fetch_statement16596);
			into_clause313=into_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1681:5: -> fetch_statement(cursor_name=$cursor_name.stinto_clause=$into_clause.st)
			{
				retval.st = templateLib.getInstanceOf("fetch_statement",new STAttrMap().put("cursor_name", (cursor_name312!=null?((StringTemplate)cursor_name312.getTemplate()):null)).put("into_clause", (into_clause313!=null?((StringTemplate)into_clause313.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fetch_statement"


	public static class open_for_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "open_for_statement"
	// PLSQLPrinter.g:1684:1: open_for_statement : ^( OPEN_VK variable_name (e_or_s= expression |e_or_s= select_statement ) ( using_clause )? ) -> open_for_statement(cursor_name=$variable_name.stexpression_or_select_statement=$e_or_s.stusing_clause=$using_clause.st);
	public final PLSQLPrinter.open_for_statement_return open_for_statement() throws RecognitionException {
		PLSQLPrinter.open_for_statement_return retval = new PLSQLPrinter.open_for_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope e_or_s =null;
		TreeRuleReturnScope variable_name314 =null;
		TreeRuleReturnScope using_clause315 =null;

		try {
			// PLSQLPrinter.g:1685:5: ( ^( OPEN_VK variable_name (e_or_s= expression |e_or_s= select_statement ) ( using_clause )? ) -> open_for_statement(cursor_name=$variable_name.stexpression_or_select_statement=$e_or_s.stusing_clause=$using_clause.st))
			// PLSQLPrinter.g:1685:10: ^( OPEN_VK variable_name (e_or_s= expression |e_or_s= select_statement ) ( using_clause )? )
			{
			match(input,OPEN_VK,FOLLOW_OPEN_VK_in_open_for_statement16638); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_variable_name_in_open_for_statement16640);
			variable_name314=variable_name();
			state._fsp--;

			// PLSQLPrinter.g:1685:34: (e_or_s= expression |e_or_s= select_statement )
			int alt375=2;
			int LA375_0 = input.LA(1);
			if ( (LA375_0==EXPR||LA375_0==LOGIC_EXPR) ) {
				alt375=1;
			}
			else if ( (LA375_0==SELECT_STATEMENT) ) {
				alt375=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 375, 0, input);
				throw nvae;
			}

			switch (alt375) {
				case 1 :
					// PLSQLPrinter.g:1685:35: e_or_s= expression
					{
					pushFollow(FOLLOW_expression_in_open_for_statement16645);
					e_or_s=expression();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1685:53: e_or_s= select_statement
					{
					pushFollow(FOLLOW_select_statement_in_open_for_statement16649);
					e_or_s=select_statement();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1685:78: ( using_clause )?
			int alt376=2;
			int LA376_0 = input.LA(1);
			if ( (LA376_0==PLSQL_NON_RESERVED_USING) ) {
				alt376=1;
			}
			switch (alt376) {
				case 1 :
					// PLSQLPrinter.g:1685:78: using_clause
					{
					pushFollow(FOLLOW_using_clause_in_open_for_statement16652);
					using_clause315=using_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1686:5: -> open_for_statement(cursor_name=$variable_name.stexpression_or_select_statement=$e_or_s.stusing_clause=$using_clause.st)
			{
				retval.st = templateLib.getInstanceOf("open_for_statement",new STAttrMap().put("cursor_name", (variable_name314!=null?((StringTemplate)variable_name314.getTemplate()):null)).put("expression_or_select_statement", (e_or_s!=null?((StringTemplate)e_or_s.getTemplate()):null)).put("using_clause", (using_clause315!=null?((StringTemplate)using_clause315.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "open_for_statement"


	public static class transaction_control_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "transaction_control_statements"
	// PLSQLPrinter.g:1693:1: transaction_control_statements : ( set_transaction_command -> { $set_transaction_command.st }| set_constraint_command -> { $set_constraint_command.st }| commit_statement -> { $commit_statement.st }| rollback_statement -> { $rollback_statement.st }| savepoint_statement -> { $savepoint_statement.st });
	public final PLSQLPrinter.transaction_control_statements_return transaction_control_statements() throws RecognitionException {
		PLSQLPrinter.transaction_control_statements_return retval = new PLSQLPrinter.transaction_control_statements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope set_transaction_command316 =null;
		TreeRuleReturnScope set_constraint_command317 =null;
		TreeRuleReturnScope commit_statement318 =null;
		TreeRuleReturnScope rollback_statement319 =null;
		TreeRuleReturnScope savepoint_statement320 =null;

		try {
			// PLSQLPrinter.g:1694:5: ( set_transaction_command -> { $set_transaction_command.st }| set_constraint_command -> { $set_constraint_command.st }| commit_statement -> { $commit_statement.st }| rollback_statement -> { $rollback_statement.st }| savepoint_statement -> { $savepoint_statement.st })
			int alt377=5;
			switch ( input.LA(1) ) {
			case SET_TRANSACTION:
				{
				alt377=1;
				}
				break;
			case SET_CONSTRAINT:
				{
				alt377=2;
				}
				break;
			case COMMIT_VK:
				{
				alt377=3;
				}
				break;
			case ROLLBACK_VK:
				{
				alt377=4;
				}
				break;
			case SAVEPOINT_VK:
				{
				alt377=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 377, 0, input);
				throw nvae;
			}
			switch (alt377) {
				case 1 :
					// PLSQLPrinter.g:1694:10: set_transaction_command
					{
					pushFollow(FOLLOW_set_transaction_command_in_transaction_control_statements16703);
					set_transaction_command316=set_transaction_command();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1694:34: -> { $set_transaction_command.st }
					{
						retval.st =  (set_transaction_command316!=null?((StringTemplate)set_transaction_command316.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1695:10: set_constraint_command
					{
					pushFollow(FOLLOW_set_constraint_command_in_transaction_control_statements16718);
					set_constraint_command317=set_constraint_command();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1695:33: -> { $set_constraint_command.st }
					{
						retval.st =  (set_constraint_command317!=null?((StringTemplate)set_constraint_command317.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1696:10: commit_statement
					{
					pushFollow(FOLLOW_commit_statement_in_transaction_control_statements16733);
					commit_statement318=commit_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1696:27: -> { $commit_statement.st }
					{
						retval.st =  (commit_statement318!=null?((StringTemplate)commit_statement318.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1697:10: rollback_statement
					{
					pushFollow(FOLLOW_rollback_statement_in_transaction_control_statements16748);
					rollback_statement319=rollback_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1697:29: -> { $rollback_statement.st }
					{
						retval.st =  (rollback_statement319!=null?((StringTemplate)rollback_statement319.getTemplate()):null) ;
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1698:10: savepoint_statement
					{
					pushFollow(FOLLOW_savepoint_statement_in_transaction_control_statements16763);
					savepoint_statement320=savepoint_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1698:30: -> { $savepoint_statement.st }
					{
						retval.st =  (savepoint_statement320!=null?((StringTemplate)savepoint_statement320.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "transaction_control_statements"


	public static class set_transaction_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "set_transaction_command"
	// PLSQLPrinter.g:1701:1: set_transaction_command : ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? ) -> template( \"not implemented: set_transaction_command\";
	public final PLSQLPrinter.set_transaction_command_return set_transaction_command() throws RecognitionException {
		PLSQLPrinter.set_transaction_command_return retval = new PLSQLPrinter.set_transaction_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1702:5: ( ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? ) -> template( \"not implemented: set_transaction_command\")
			// PLSQLPrinter.g:1702:10: ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? )
			{
			match(input,SET_TRANSACTION,FOLLOW_SET_TRANSACTION_in_set_transaction_command16788); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1702:28: ( CHAR_STRING )?
				int alt378=2;
				int LA378_0 = input.LA(1);
				if ( (LA378_0==CHAR_STRING) ) {
					alt378=1;
				}
				switch (alt378) {
					case 1 :
						// PLSQLPrinter.g:1702:28: CHAR_STRING
						{
						match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_set_transaction_command16790); 
						}
						break;

				}

				// PLSQLPrinter.g:1703:13: ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )?
				int alt381=4;
				switch ( input.LA(1) ) {
					case READ_VK:
						{
						alt381=1;
						}
						break;
					case ISOLATION_VK:
						{
						alt381=2;
						}
						break;
					case ROLLBACK_VK:
						{
						alt381=3;
						}
						break;
				}
				switch (alt381) {
					case 1 :
						// PLSQLPrinter.g:1703:18: ^( READ_VK ( ONLY_VK | WRITE_VK ) )
						{
						match(input,READ_VK,FOLLOW_READ_VK_in_set_transaction_command16811); 
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:1703:28: ( ONLY_VK | WRITE_VK )
						int alt379=2;
						int LA379_0 = input.LA(1);
						if ( (LA379_0==ONLY_VK) ) {
							alt379=1;
						}
						else if ( (LA379_0==WRITE_VK) ) {
							alt379=2;
						}

						else {
							NoViableAltException nvae =
								new NoViableAltException("", 379, 0, input);
							throw nvae;
						}

						switch (alt379) {
							case 1 :
								// PLSQLPrinter.g:1703:29: ONLY_VK
								{
								match(input,ONLY_VK,FOLLOW_ONLY_VK_in_set_transaction_command16814); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:1703:37: WRITE_VK
								{
								match(input,WRITE_VK,FOLLOW_WRITE_VK_in_set_transaction_command16816); 
								}
								break;

						}

						match(input, Token.UP, null); 

						}
						break;
					case 2 :
						// PLSQLPrinter.g:1704:18: ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) )
						{
						match(input,ISOLATION_VK,FOLLOW_ISOLATION_VK_in_set_transaction_command16838); 
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:1704:33: ( SERIALIZABLE_VK | COMMITTED_VK )
						int alt380=2;
						int LA380_0 = input.LA(1);
						if ( (LA380_0==SERIALIZABLE_VK) ) {
							alt380=1;
						}
						else if ( (LA380_0==COMMITTED_VK) ) {
							alt380=2;
						}

						else {
							NoViableAltException nvae =
								new NoViableAltException("", 380, 0, input);
							throw nvae;
						}

						switch (alt380) {
							case 1 :
								// PLSQLPrinter.g:1704:34: SERIALIZABLE_VK
								{
								match(input,SERIALIZABLE_VK,FOLLOW_SERIALIZABLE_VK_in_set_transaction_command16841); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:1704:50: COMMITTED_VK
								{
								match(input,COMMITTED_VK,FOLLOW_COMMITTED_VK_in_set_transaction_command16843); 
								}
								break;

						}

						match(input, Token.UP, null); 

						}
						break;
					case 3 :
						// PLSQLPrinter.g:1705:18: ^( ROLLBACK_VK rollback_segment_name )
						{
						match(input,ROLLBACK_VK,FOLLOW_ROLLBACK_VK_in_set_transaction_command16865); 
						match(input, Token.DOWN, null); 
						pushFollow(FOLLOW_rollback_segment_name_in_set_transaction_command16867);
						rollback_segment_name();
						state._fsp--;

						match(input, Token.UP, null); 

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1708:5: -> template( \"not implemented: set_transaction_command\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: set_transaction_command");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_transaction_command"


	public static class set_constraint_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "set_constraint_command"
	// PLSQLPrinter.g:1711:1: set_constraint_command : ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) ) -> template( \"not implemented: set_constraint_command\";
	public final PLSQLPrinter.set_constraint_command_return set_constraint_command() throws RecognitionException {
		PLSQLPrinter.set_constraint_command_return retval = new PLSQLPrinter.set_constraint_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1712:5: ( ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) ) -> template( \"not implemented: set_constraint_command\")
			// PLSQLPrinter.g:1712:10: ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) )
			{
			match(input,SET_CONSTRAINT,FOLLOW_SET_CONSTRAINT_in_set_constraint_command16928); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1712:27: ( SQL92_RESERVED_ALL | ( constraint_name )+ )
			int alt383=2;
			int LA383_0 = input.LA(1);
			if ( (LA383_0==SQL92_RESERVED_ALL) ) {
				alt383=1;
			}
			else if ( (LA383_0==CONSTRAINT_NAME) ) {
				alt383=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 383, 0, input);
				throw nvae;
			}

			switch (alt383) {
				case 1 :
					// PLSQLPrinter.g:1712:28: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_set_constraint_command16931); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1712:47: ( constraint_name )+
					{
					// PLSQLPrinter.g:1712:47: ( constraint_name )+
					int cnt382=0;
					loop382:
					while (true) {
						int alt382=2;
						int LA382_0 = input.LA(1);
						if ( (LA382_0==CONSTRAINT_NAME) ) {
							alt382=1;
						}

						switch (alt382) {
						case 1 :
							// PLSQLPrinter.g:1712:47: constraint_name
							{
							pushFollow(FOLLOW_constraint_name_in_set_constraint_command16933);
							constraint_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt382 >= 1 ) break loop382;
							EarlyExitException eee = new EarlyExitException(382, input);
							throw eee;
						}
						cnt382++;
					}

					}
					break;

			}

			// PLSQLPrinter.g:1712:65: ( IMMEDIATE_VK | DEFERRED_VK )
			int alt384=2;
			int LA384_0 = input.LA(1);
			if ( (LA384_0==IMMEDIATE_VK) ) {
				alt384=1;
			}
			else if ( (LA384_0==DEFERRED_VK) ) {
				alt384=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 384, 0, input);
				throw nvae;
			}

			switch (alt384) {
				case 1 :
					// PLSQLPrinter.g:1712:66: IMMEDIATE_VK
					{
					match(input,IMMEDIATE_VK,FOLLOW_IMMEDIATE_VK_in_set_constraint_command16938); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1712:79: DEFERRED_VK
					{
					match(input,DEFERRED_VK,FOLLOW_DEFERRED_VK_in_set_constraint_command16940); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1713:5: -> template( \"not implemented: set_constraint_command\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: set_constraint_command");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_constraint_command"


	public static class commit_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "commit_statement"
	// PLSQLPrinter.g:1716:1: commit_statement : ^( COMMIT_VK ( WORK_VK )? (additional= commit_comment |additional= commit_force )? ) -> commit_statement(is_work=$WORK_VK != nulladditional=$additional.st);
	public final PLSQLPrinter.commit_statement_return commit_statement() throws RecognitionException {
		PLSQLPrinter.commit_statement_return retval = new PLSQLPrinter.commit_statement_return();
		retval.start = input.LT(1);

		CommonTree WORK_VK321=null;
		TreeRuleReturnScope additional =null;

		try {
			// PLSQLPrinter.g:1717:5: ( ^( COMMIT_VK ( WORK_VK )? (additional= commit_comment |additional= commit_force )? ) -> commit_statement(is_work=$WORK_VK != nulladditional=$additional.st))
			// PLSQLPrinter.g:1717:11: ^( COMMIT_VK ( WORK_VK )? (additional= commit_comment |additional= commit_force )? )
			{
			match(input,COMMIT_VK,FOLLOW_COMMIT_VK_in_commit_statement16978); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1717:23: ( WORK_VK )?
				int alt385=2;
				int LA385_0 = input.LA(1);
				if ( (LA385_0==WORK_VK) ) {
					alt385=1;
				}
				switch (alt385) {
					case 1 :
						// PLSQLPrinter.g:1717:23: WORK_VK
						{
						WORK_VK321=(CommonTree)match(input,WORK_VK,FOLLOW_WORK_VK_in_commit_statement16980); 
						}
						break;

				}

				// PLSQLPrinter.g:1718:13: (additional= commit_comment |additional= commit_force )?
				int alt386=3;
				int LA386_0 = input.LA(1);
				if ( (LA386_0==COMMENT_VK) ) {
					alt386=1;
				}
				else if ( (LA386_0==FORCE_VK) ) {
					alt386=2;
				}
				switch (alt386) {
					case 1 :
						// PLSQLPrinter.g:1719:15: additional= commit_comment
						{
						pushFollow(FOLLOW_commit_comment_in_commit_statement17013);
						additional=commit_comment();
						state._fsp--;

						}
						break;
					case 2 :
						// PLSQLPrinter.g:1720:17: additional= commit_force
						{
						pushFollow(FOLLOW_commit_force_in_commit_statement17033);
						additional=commit_force();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1724:5: -> commit_statement(is_work=$WORK_VK != nulladditional=$additional.st)
			{
				retval.st = templateLib.getInstanceOf("commit_statement",new STAttrMap().put("is_work", WORK_VK321 != null).put("additional", (additional!=null?((StringTemplate)additional.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commit_statement"


	public static class commit_comment_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "commit_comment"
	// PLSQLPrinter.g:1727:1: commit_comment : ^( COMMENT_VK comment_expr= expression ) ( write_clause )? -> commit_comment(comment_expr=$expression.stwrite_clause=$write_clause.st);
	public final PLSQLPrinter.commit_comment_return commit_comment() throws RecognitionException {
		PLSQLPrinter.commit_comment_return retval = new PLSQLPrinter.commit_comment_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope comment_expr =null;
		TreeRuleReturnScope write_clause322 =null;

		try {
			// PLSQLPrinter.g:1728:5: ( ^( COMMENT_VK comment_expr= expression ) ( write_clause )? -> commit_comment(comment_expr=$expression.stwrite_clause=$write_clause.st))
			// PLSQLPrinter.g:1728:9: ^( COMMENT_VK comment_expr= expression ) ( write_clause )?
			{
			match(input,COMMENT_VK,FOLLOW_COMMENT_VK_in_commit_comment17124); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_commit_comment17128);
			comment_expr=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1728:47: ( write_clause )?
			int alt387=2;
			int LA387_0 = input.LA(1);
			if ( (LA387_0==WRITE_VK) ) {
				alt387=1;
			}
			switch (alt387) {
				case 1 :
					// PLSQLPrinter.g:1728:47: write_clause
					{
					pushFollow(FOLLOW_write_clause_in_commit_comment17131);
					write_clause322=write_clause();
					state._fsp--;

					}
					break;

			}

			// TEMPLATE REWRITE
			// 1729:5: -> commit_comment(comment_expr=$expression.stwrite_clause=$write_clause.st)
			{
				retval.st = templateLib.getInstanceOf("commit_comment",new STAttrMap().put("comment_expr", (comment_expr!=null?((StringTemplate)comment_expr.getTemplate()):null)).put("write_clause", (write_clause322!=null?((StringTemplate)write_clause322.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commit_comment"


	public static class commit_force_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "commit_force"
	// PLSQLPrinter.g:1732:1: commit_force : ^( FORCE_VK ( CORRUPT_XID_VK expr1= expression -> commit_statement_force_2(expression=$expr1.st)| CORRUPT_XID_ALL_VK -> commit_statement_force_3(|expr1= expression (expr2= expression )? -> commit_statement_force_1(expr1=$expr1.stexpr2=$expr2.st)) ) ;
	public final PLSQLPrinter.commit_force_return commit_force() throws RecognitionException {
		PLSQLPrinter.commit_force_return retval = new PLSQLPrinter.commit_force_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expr1 =null;
		TreeRuleReturnScope expr2 =null;

		try {
			// PLSQLPrinter.g:1733:5: ( ^( FORCE_VK ( CORRUPT_XID_VK expr1= expression -> commit_statement_force_2(expression=$expr1.st)| CORRUPT_XID_ALL_VK -> commit_statement_force_3(|expr1= expression (expr2= expression )? -> commit_statement_force_1(expr1=$expr1.stexpr2=$expr2.st)) ) )
			// PLSQLPrinter.g:1733:9: ^( FORCE_VK ( CORRUPT_XID_VK expr1= expression -> commit_statement_force_2(expression=$expr1.st)| CORRUPT_XID_ALL_VK -> commit_statement_force_3(|expr1= expression (expr2= expression )? -> commit_statement_force_1(expr1=$expr1.stexpr2=$expr2.st)) )
			{
			match(input,FORCE_VK,FOLLOW_FORCE_VK_in_commit_force17175); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1734:11: ( CORRUPT_XID_VK expr1= expression -> commit_statement_force_2(expression=$expr1.st)| CORRUPT_XID_ALL_VK -> commit_statement_force_3(|expr1= expression (expr2= expression )? -> commit_statement_force_1(expr1=$expr1.stexpr2=$expr2.st))
			int alt389=3;
			switch ( input.LA(1) ) {
			case CORRUPT_XID_VK:
				{
				alt389=1;
				}
				break;
			case CORRUPT_XID_ALL_VK:
				{
				alt389=2;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt389=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 389, 0, input);
				throw nvae;
			}
			switch (alt389) {
				case 1 :
					// PLSQLPrinter.g:1735:13: CORRUPT_XID_VK expr1= expression
					{
					match(input,CORRUPT_XID_VK,FOLLOW_CORRUPT_XID_VK_in_commit_force17201); 
					pushFollow(FOLLOW_expression_in_commit_force17205);
					expr1=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1735:45: -> commit_statement_force_2(expression=$expr1.st)
					{
						retval.st = templateLib.getInstanceOf("commit_statement_force_2",new STAttrMap().put("expression", (expr1!=null?((StringTemplate)expr1.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1736:15: CORRUPT_XID_ALL_VK
					{
					match(input,CORRUPT_XID_ALL_VK,FOLLOW_CORRUPT_XID_ALL_VK_in_commit_force17230); 
					// TEMPLATE REWRITE
					// 1736:34: -> commit_statement_force_3(
					{
						retval.st = templateLib.getInstanceOf("commit_statement_force_3");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1737:15: expr1= expression (expr2= expression )?
					{
					pushFollow(FOLLOW_expression_in_commit_force17254);
					expr1=expression();
					state._fsp--;

					// PLSQLPrinter.g:1737:37: (expr2= expression )?
					int alt388=2;
					int LA388_0 = input.LA(1);
					if ( (LA388_0==EXPR||LA388_0==LOGIC_EXPR) ) {
						alt388=1;
					}
					switch (alt388) {
						case 1 :
							// PLSQLPrinter.g:1737:37: expr2= expression
							{
							pushFollow(FOLLOW_expression_in_commit_force17258);
							expr2=expression();
							state._fsp--;

							}
							break;

					}

					// TEMPLATE REWRITE
					// 1737:50: -> commit_statement_force_1(expr1=$expr1.stexpr2=$expr2.st)
					{
						retval.st = templateLib.getInstanceOf("commit_statement_force_1",new STAttrMap().put("expr1", (expr1!=null?((StringTemplate)expr1.getTemplate()):null)).put("expr2", (expr2!=null?((StringTemplate)expr2.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commit_force"


	public static class write_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "write_clause"
	// PLSQLPrinter.g:1742:1: write_clause : ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? ) -> commit_statement_write_clause(is_wait=$WAIT_VK != nullis_nowait=$PLSQL_RESERVED_NOWAIT != nullis_immediate=$IMMEDIATE_VK != nullis_batch=$BATCH_VK != null);
	public final PLSQLPrinter.write_clause_return write_clause() throws RecognitionException {
		PLSQLPrinter.write_clause_return retval = new PLSQLPrinter.write_clause_return();
		retval.start = input.LT(1);

		CommonTree WAIT_VK323=null;
		CommonTree PLSQL_RESERVED_NOWAIT324=null;
		CommonTree IMMEDIATE_VK325=null;
		CommonTree BATCH_VK326=null;

		try {
			// PLSQLPrinter.g:1743:5: ( ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? ) -> commit_statement_write_clause(is_wait=$WAIT_VK != nullis_nowait=$PLSQL_RESERVED_NOWAIT != nullis_immediate=$IMMEDIATE_VK != nullis_batch=$BATCH_VK != null))
			// PLSQLPrinter.g:1743:10: ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? )
			{
			match(input,WRITE_VK,FOLLOW_WRITE_VK_in_write_clause17316); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1743:21: ( WAIT_VK | PLSQL_RESERVED_NOWAIT )?
				int alt390=3;
				int LA390_0 = input.LA(1);
				if ( (LA390_0==WAIT_VK) ) {
					alt390=1;
				}
				else if ( (LA390_0==PLSQL_RESERVED_NOWAIT) ) {
					alt390=2;
				}
				switch (alt390) {
					case 1 :
						// PLSQLPrinter.g:1743:22: WAIT_VK
						{
						WAIT_VK323=(CommonTree)match(input,WAIT_VK,FOLLOW_WAIT_VK_in_write_clause17319); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1743:30: PLSQL_RESERVED_NOWAIT
						{
						PLSQL_RESERVED_NOWAIT324=(CommonTree)match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_write_clause17321); 
						}
						break;

				}

				// PLSQLPrinter.g:1743:54: ( IMMEDIATE_VK | BATCH_VK )?
				int alt391=3;
				int LA391_0 = input.LA(1);
				if ( (LA391_0==IMMEDIATE_VK) ) {
					alt391=1;
				}
				else if ( (LA391_0==BATCH_VK) ) {
					alt391=2;
				}
				switch (alt391) {
					case 1 :
						// PLSQLPrinter.g:1743:55: IMMEDIATE_VK
						{
						IMMEDIATE_VK325=(CommonTree)match(input,IMMEDIATE_VK,FOLLOW_IMMEDIATE_VK_in_write_clause17326); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1743:68: BATCH_VK
						{
						BATCH_VK326=(CommonTree)match(input,BATCH_VK,FOLLOW_BATCH_VK_in_write_clause17328); 
						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1744:5: -> commit_statement_write_clause(is_wait=$WAIT_VK != nullis_nowait=$PLSQL_RESERVED_NOWAIT != nullis_immediate=$IMMEDIATE_VK != nullis_batch=$BATCH_VK != null)
			{
				retval.st = templateLib.getInstanceOf("commit_statement_write_clause",new STAttrMap().put("is_wait", WAIT_VK323 != null).put("is_nowait", PLSQL_RESERVED_NOWAIT324 != null).put("is_immediate", IMMEDIATE_VK325 != null).put("is_batch", BATCH_VK326 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "write_clause"


	public static class rollback_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "rollback_statement"
	// PLSQLPrinter.g:1749:1: rollback_statement : ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? ) -> rollback_statement(is_work=$WORK_VK != nullis_to_savepoint=$SQL92_RESERVED_TO != nullsavepoint_name=$savepoint_name.stis_force=$FORCE_VK !=nullforce_string=$CHAR_STRING.text);
	public final PLSQLPrinter.rollback_statement_return rollback_statement() throws RecognitionException {
		PLSQLPrinter.rollback_statement_return retval = new PLSQLPrinter.rollback_statement_return();
		retval.start = input.LT(1);

		CommonTree WORK_VK327=null;
		CommonTree SQL92_RESERVED_TO328=null;
		CommonTree FORCE_VK330=null;
		CommonTree CHAR_STRING331=null;
		TreeRuleReturnScope savepoint_name329 =null;

		try {
			// PLSQLPrinter.g:1750:5: ( ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? ) -> rollback_statement(is_work=$WORK_VK != nullis_to_savepoint=$SQL92_RESERVED_TO != nullsavepoint_name=$savepoint_name.stis_force=$FORCE_VK !=nullforce_string=$CHAR_STRING.text))
			// PLSQLPrinter.g:1750:11: ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? )
			{
			match(input,ROLLBACK_VK,FOLLOW_ROLLBACK_VK_in_rollback_statement17404); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1750:25: ( WORK_VK )?
				int alt392=2;
				int LA392_0 = input.LA(1);
				if ( (LA392_0==WORK_VK) ) {
					alt392=1;
				}
				switch (alt392) {
					case 1 :
						// PLSQLPrinter.g:1750:25: WORK_VK
						{
						WORK_VK327=(CommonTree)match(input,WORK_VK,FOLLOW_WORK_VK_in_rollback_statement17406); 
						}
						break;

				}

				// PLSQLPrinter.g:1751:15: ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )?
				int alt393=3;
				int LA393_0 = input.LA(1);
				if ( (LA393_0==SQL92_RESERVED_TO) ) {
					alt393=1;
				}
				else if ( (LA393_0==FORCE_VK) ) {
					alt393=2;
				}
				switch (alt393) {
					case 1 :
						// PLSQLPrinter.g:1751:20: ^( SQL92_RESERVED_TO savepoint_name )
						{
						SQL92_RESERVED_TO328=(CommonTree)match(input,SQL92_RESERVED_TO,FOLLOW_SQL92_RESERVED_TO_in_rollback_statement17430); 
						match(input, Token.DOWN, null); 
						pushFollow(FOLLOW_savepoint_name_in_rollback_statement17432);
						savepoint_name329=savepoint_name();
						state._fsp--;

						match(input, Token.UP, null); 

						}
						break;
					case 2 :
						// PLSQLPrinter.g:1752:20: ^( FORCE_VK CHAR_STRING )
						{
						FORCE_VK330=(CommonTree)match(input,FORCE_VK,FOLLOW_FORCE_VK_in_rollback_statement17455); 
						match(input, Token.DOWN, null); 
						CHAR_STRING331=(CommonTree)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_rollback_statement17457); 
						match(input, Token.UP, null); 

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1755:9: -> rollback_statement(is_work=$WORK_VK != nullis_to_savepoint=$SQL92_RESERVED_TO != nullsavepoint_name=$savepoint_name.stis_force=$FORCE_VK !=nullforce_string=$CHAR_STRING.text)
			{
				retval.st = templateLib.getInstanceOf("rollback_statement",new STAttrMap().put("is_work", WORK_VK327 != null).put("is_to_savepoint", SQL92_RESERVED_TO328 != null).put("savepoint_name", (savepoint_name329!=null?((StringTemplate)savepoint_name329.getTemplate()):null)).put("is_force", FORCE_VK330 !=null).put("force_string", (CHAR_STRING331!=null?CHAR_STRING331.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rollback_statement"


	public static class savepoint_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "savepoint_statement"
	// PLSQLPrinter.g:1760:1: savepoint_statement : ^( SAVEPOINT_VK savepoint_name ) -> savepoint_statement(name=$savepoint_name.st);
	public final PLSQLPrinter.savepoint_statement_return savepoint_statement() throws RecognitionException {
		PLSQLPrinter.savepoint_statement_return retval = new PLSQLPrinter.savepoint_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope savepoint_name332 =null;

		try {
			// PLSQLPrinter.g:1761:5: ( ^( SAVEPOINT_VK savepoint_name ) -> savepoint_statement(name=$savepoint_name.st))
			// PLSQLPrinter.g:1761:10: ^( SAVEPOINT_VK savepoint_name )
			{
			match(input,SAVEPOINT_VK,FOLLOW_SAVEPOINT_VK_in_savepoint_statement17572); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_savepoint_name_in_savepoint_statement17574);
			savepoint_name332=savepoint_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1762:5: -> savepoint_statement(name=$savepoint_name.st)
			{
				retval.st = templateLib.getInstanceOf("savepoint_statement",new STAttrMap().put("name", (savepoint_name332!=null?((StringTemplate)savepoint_name332.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "savepoint_statement"


	public static class pipe_row_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pipe_row_statement"
	// PLSQLPrinter.g:1765:1: pipe_row_statement : ^( PIPE_ROW expression ) -> pipe_row_statement(expression=$expression.st);
	public final PLSQLPrinter.pipe_row_statement_return pipe_row_statement() throws RecognitionException {
		PLSQLPrinter.pipe_row_statement_return retval = new PLSQLPrinter.pipe_row_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression333 =null;

		try {
			// PLSQLPrinter.g:1766:5: ( ^( PIPE_ROW expression ) -> pipe_row_statement(expression=$expression.st))
			// PLSQLPrinter.g:1766:10: ^( PIPE_ROW expression )
			{
			match(input,PIPE_ROW,FOLLOW_PIPE_ROW_in_pipe_row_statement17616); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_pipe_row_statement17618);
			expression333=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1767:5: -> pipe_row_statement(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("pipe_row_statement",new STAttrMap().put("expression", (expression333!=null?((StringTemplate)expression333.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pipe_row_statement"


	public static class expression_list_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "expression_list"
	// PLSQLPrinter.g:1774:1: expression_list : ^( EXPR_LIST (expressions+= expression )* ) -> expression_list(expressions=$expressions);
	public final PLSQLPrinter.expression_list_return expression_list() throws RecognitionException {
		PLSQLPrinter.expression_list_return retval = new PLSQLPrinter.expression_list_return();
		retval.start = input.LT(1);

		List<Object> list_expressions=null;
		RuleReturnScope expressions = null;
		try {
			// PLSQLPrinter.g:1775:5: ( ^( EXPR_LIST (expressions+= expression )* ) -> expression_list(expressions=$expressions))
			// PLSQLPrinter.g:1775:10: ^( EXPR_LIST (expressions+= expression )* )
			{
			match(input,EXPR_LIST,FOLLOW_EXPR_LIST_in_expression_list17659); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1775:33: (expressions+= expression )*
				loop394:
				while (true) {
					int alt394=2;
					int LA394_0 = input.LA(1);
					if ( (LA394_0==EXPR||LA394_0==LOGIC_EXPR) ) {
						alt394=1;
					}

					switch (alt394) {
					case 1 :
						// PLSQLPrinter.g:1775:33: expressions+= expression
						{
						pushFollow(FOLLOW_expression_in_expression_list17663);
						expressions=expression();
						state._fsp--;

						if (list_expressions==null) list_expressions=new ArrayList<Object>();
						list_expressions.add(expressions.getTemplate());
						}
						break;

					default :
						break loop394;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1776:5: -> expression_list(expressions=$expressions)
			{
				retval.st = templateLib.getInstanceOf("expression_list",new STAttrMap().put("expressions", list_expressions));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression_list"


	public static class expression_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "expression"
	// PLSQLPrinter.g:1779:1: expression : ( ^( LOGIC_EXPR expression_element ) -> {$expression_element.st}| ^( EXPR expression_element ) -> {$expression_element.st});
	public final PLSQLPrinter.expression_return expression() throws RecognitionException {
		PLSQLPrinter.expression_return retval = new PLSQLPrinter.expression_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression_element334 =null;
		TreeRuleReturnScope expression_element335 =null;

		try {
			// PLSQLPrinter.g:1780:5: ( ^( LOGIC_EXPR expression_element ) -> {$expression_element.st}| ^( EXPR expression_element ) -> {$expression_element.st})
			int alt395=2;
			int LA395_0 = input.LA(1);
			if ( (LA395_0==LOGIC_EXPR) ) {
				alt395=1;
			}
			else if ( (LA395_0==EXPR) ) {
				alt395=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 395, 0, input);
				throw nvae;
			}

			switch (alt395) {
				case 1 :
					// PLSQLPrinter.g:1780:10: ^( LOGIC_EXPR expression_element )
					{
					match(input,LOGIC_EXPR,FOLLOW_LOGIC_EXPR_in_expression17701); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression17703);
					expression_element334=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1780:43: -> {$expression_element.st}
					{
						retval.st = (expression_element334!=null?((StringTemplate)expression_element334.getTemplate()):null);
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1781:10: ^( EXPR expression_element )
					{
					match(input,EXPR,FOLLOW_EXPR_in_expression17720); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression17722);
					expression_element335=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1781:38: -> {$expression_element.st}
					{
						retval.st = (expression_element335!=null?((StringTemplate)expression_element335.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression"


	public static class expression_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "expression_element"
	// PLSQLPrinter.g:1784:1: expression_element : ( ^( ( SQL92_RESERVED_OR | SQL92_RESERVED_AND | EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP | CONCATENATION_OP | PLUS_SIGN | MINUS_SIGN | ASTERISK | SOLIDUS | PERCENT | MOD_VK | DIV_VK ) arg1= expression_element arg2= expression_element ) -> expression_element_generic_binop(op=oparg1=$arg1.starg2=$arg2.st)| ^( SQL92_RESERVED_NOT expr= expression_element ) -> expression_element_not(expr=$expr.st)| ^( ( IS_NOT_NULL | IS_NULL | IS_NOT_NAN | IS_NAN | IS_NOT_PRESENT | IS_PRESENT | IS_NOT_INFINITE | IS_INFINITE | IS_NOT_A_SET | IS_A_SET | IS_NOT_EMPTY | IS_EMPTY ) arg= expression_element ) -> expression_element_generic_suffix_unary_op(op=oparg=$arg.st)| ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^( IS_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( NOT_IN expr= expression_element in_elements ) -> expression_element_not_in(expr=$expr.stin_elements=$in_elements.st)| ^( SQL92_RESERVED_IN expr= expression_element in_elements ) -> expression_element_in(expr=$expr.stin_elements=$in_elements.st)| ^( NOT_BETWEEN expr= expression_element expr_low= expression_element expr_high= expression_element ) -> expression_element_between(expr=$expr.stis_not=trueexpr_low=$expr_low.stexpr_high=$expr_high.st)| ^( SQL92_RESERVED_BETWEEN expr= expression_element expr_low= expression_element expr_high= expression_element ) -> expression_element_between(expr=$expr.stis_not=falseexpr_low=$expr_low.stexpr_high=$expr_high.st)| ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK | NOT_LIKE ) text= expression_element pattern= expression_element (escape= expression_element )? ) -> expression_element_like(text=$text.stlike_op=oppattern=$pattern.stescape_char=$escape.st)| ^( PIPE_VK expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( UNARY_OPERATOR arg= expression_element ) -> expression_element_generic_prefix_unary_op(op=$UNARY_OPERATOR.textis_spaced=falsearg=$arg.st)| ^( SQL92_RESERVED_PRIOR arg= expression_element ) -> expression_element_prior(expr=$arg.st)| ^( NEW_VK expression ) -> template( \"not implemented: expression_element\"| ^( SQL92_RESERVED_DISTINCT expression_element ) -> template( \"not implemented: expression_element\"| ^( STANDARD_FUNCTION standard_function ) -> { $standard_function.st }| ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) (s_or_e= subquery |s_or_e= expression ) ) -> expression_element_quantified_expr(subquery_or_expression=$s_or_e.stis_some=$SOME_VK != nullis_any=$SQL92_RESERVED_ANY != nullis_all=$SQL92_RESERVED_ALL != nullis_exists=$SQL92_RESERVED_EXISTS != null)| ^( VECTOR_EXPR ( expression_element )+ ) -> template( \"not implemented: expression_element\"| ^( DATETIME_OP expression_element datetime_element ) -> template( \"not implemented: expression_element\"| model_expression -> template( \"not implemented: expression_element\"| ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? ) -> template( \"not implemented: expression_element\"| ^( DOT_ASTERISK tableview_name ) -> expression_element_dot_star(tableview_name=$tableview_name.st)| ^( ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK ) cursor_name ) -> expression_element_cursor_op(op=opcursor_name=$cursor_name.st)| ^( OUTER_JOIN_SIGN expr= expression_element ) -> expression_element_outer_join_sign(expr=$expr.st)| case_statement -> { $case_statement.st }| constant -> { $constant.st }| general_element -> { $general_element.st }| hosted_variable_name -> { $hosted_variable_name.st }| subquery -> in_parens(val=$subquery.st));
	public final PLSQLPrinter.expression_element_return expression_element() throws RecognitionException {
		PLSQLPrinter.expression_element_return retval = new PLSQLPrinter.expression_element_return();
		retval.start = input.LT(1);

		CommonTree UNARY_OPERATOR338=null;
		CommonTree SOME_VK340=null;
		CommonTree SQL92_RESERVED_ANY341=null;
		CommonTree SQL92_RESERVED_ALL342=null;
		CommonTree SQL92_RESERVED_EXISTS343=null;
		TreeRuleReturnScope arg1 =null;
		TreeRuleReturnScope arg2 =null;
		TreeRuleReturnScope expr =null;
		TreeRuleReturnScope arg =null;
		TreeRuleReturnScope expr_low =null;
		TreeRuleReturnScope expr_high =null;
		TreeRuleReturnScope text =null;
		TreeRuleReturnScope pattern =null;
		TreeRuleReturnScope escape =null;
		TreeRuleReturnScope s_or_e =null;
		TreeRuleReturnScope in_elements336 =null;
		TreeRuleReturnScope in_elements337 =null;
		TreeRuleReturnScope standard_function339 =null;
		TreeRuleReturnScope tableview_name344 =null;
		TreeRuleReturnScope cursor_name345 =null;
		TreeRuleReturnScope case_statement346 =null;
		TreeRuleReturnScope constant347 =null;
		TreeRuleReturnScope general_element348 =null;
		TreeRuleReturnScope hosted_variable_name349 =null;
		TreeRuleReturnScope subquery350 =null;

		 String op = null; 
		try {
			// PLSQLPrinter.g:1786:5: ( ^( ( SQL92_RESERVED_OR | SQL92_RESERVED_AND | EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP | CONCATENATION_OP | PLUS_SIGN | MINUS_SIGN | ASTERISK | SOLIDUS | PERCENT | MOD_VK | DIV_VK ) arg1= expression_element arg2= expression_element ) -> expression_element_generic_binop(op=oparg1=$arg1.starg2=$arg2.st)| ^( SQL92_RESERVED_NOT expr= expression_element ) -> expression_element_not(expr=$expr.st)| ^( ( IS_NOT_NULL | IS_NULL | IS_NOT_NAN | IS_NAN | IS_NOT_PRESENT | IS_PRESENT | IS_NOT_INFINITE | IS_INFINITE | IS_NOT_A_SET | IS_A_SET | IS_NOT_EMPTY | IS_EMPTY ) arg= expression_element ) -> expression_element_generic_suffix_unary_op(op=oparg=$arg.st)| ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^( IS_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( NOT_IN expr= expression_element in_elements ) -> expression_element_not_in(expr=$expr.stin_elements=$in_elements.st)| ^( SQL92_RESERVED_IN expr= expression_element in_elements ) -> expression_element_in(expr=$expr.stin_elements=$in_elements.st)| ^( NOT_BETWEEN expr= expression_element expr_low= expression_element expr_high= expression_element ) -> expression_element_between(expr=$expr.stis_not=trueexpr_low=$expr_low.stexpr_high=$expr_high.st)| ^( SQL92_RESERVED_BETWEEN expr= expression_element expr_low= expression_element expr_high= expression_element ) -> expression_element_between(expr=$expr.stis_not=falseexpr_low=$expr_low.stexpr_high=$expr_high.st)| ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK | NOT_LIKE ) text= expression_element pattern= expression_element (escape= expression_element )? ) -> expression_element_like(text=$text.stlike_op=oppattern=$pattern.stescape_char=$escape.st)| ^( PIPE_VK expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( UNARY_OPERATOR arg= expression_element ) -> expression_element_generic_prefix_unary_op(op=$UNARY_OPERATOR.textis_spaced=falsearg=$arg.st)| ^( SQL92_RESERVED_PRIOR arg= expression_element ) -> expression_element_prior(expr=$arg.st)| ^( NEW_VK expression ) -> template( \"not implemented: expression_element\"| ^( SQL92_RESERVED_DISTINCT expression_element ) -> template( \"not implemented: expression_element\"| ^( STANDARD_FUNCTION standard_function ) -> { $standard_function.st }| ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) (s_or_e= subquery |s_or_e= expression ) ) -> expression_element_quantified_expr(subquery_or_expression=$s_or_e.stis_some=$SOME_VK != nullis_any=$SQL92_RESERVED_ANY != nullis_all=$SQL92_RESERVED_ALL != nullis_exists=$SQL92_RESERVED_EXISTS != null)| ^( VECTOR_EXPR ( expression_element )+ ) -> template( \"not implemented: expression_element\"| ^( DATETIME_OP expression_element datetime_element ) -> template( \"not implemented: expression_element\"| model_expression -> template( \"not implemented: expression_element\"| ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? ) -> template( \"not implemented: expression_element\"| ^( DOT_ASTERISK tableview_name ) -> expression_element_dot_star(tableview_name=$tableview_name.st)| ^( ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK ) cursor_name ) -> expression_element_cursor_op(op=opcursor_name=$cursor_name.st)| ^( OUTER_JOIN_SIGN expr= expression_element ) -> expression_element_outer_join_sign(expr=$expr.st)| case_statement -> { $case_statement.st }| constant -> { $constant.st }| general_element -> { $general_element.st }| hosted_variable_name -> { $hosted_variable_name.st }| subquery -> in_parens(val=$subquery.st))
			int alt409=30;
			switch ( input.LA(1) ) {
			case ASTERISK:
			case CONCATENATION_OP:
			case EQUALS_OP:
			case GREATER_THAN_OP:
			case GREATER_THAN_OR_EQUALS_OP:
			case LESS_THAN_OP:
			case LESS_THAN_OR_EQUALS_OP:
			case NOT_EQUAL_OP:
			case PERCENT:
			case PLUS_SIGN:
			case SOLIDUS:
			case SQL92_RESERVED_AND:
			case SQL92_RESERVED_OR:
			case DIV_VK:
			case MOD_VK:
				{
				alt409=1;
				}
				break;
			case MINUS_SIGN:
				{
				int LA409_2 = input.LA(2);
				if ( (LA409_2==DOWN) ) {
					int LA409_32 = input.LA(3);
					if ( (LA409_32==UNSIGNED_INTEGER) ) {
						int LA409_33 = input.LA(4);
						if ( (LA409_33==UP) ) {
							alt409=27;
						}
						else if ( (LA409_33==APPROXIMATE_NUM_LIT||LA409_33==ASTERISK||LA409_33==CHAR_STRING||LA409_33==CONCATENATION_OP||(LA409_33 >= EQUALS_OP && LA409_33 <= EXACT_NUM_LIT)||(LA409_33 >= GREATER_THAN_OP && LA409_33 <= GREATER_THAN_OR_EQUALS_OP)||(LA409_33 >= LESS_THAN_OP && LA409_33 <= LESS_THAN_OR_EQUALS_OP)||LA409_33==MINUS_SIGN||LA409_33==NOT_EQUAL_OP||LA409_33==PERCENT||LA409_33==PLUS_SIGN||LA409_33==SOLIDUS||LA409_33==SQL92_RESERVED_ALL||(LA409_33 >= SQL92_RESERVED_AND && LA409_33 <= SQL92_RESERVED_ANY)||LA409_33==SQL92_RESERVED_BETWEEN||LA409_33==SQL92_RESERVED_DEFAULT||LA409_33==SQL92_RESERVED_DISTINCT||(LA409_33 >= SQL92_RESERVED_EXISTS && LA409_33 <= SQL92_RESERVED_FALSE)||LA409_33==SQL92_RESERVED_IN||(LA409_33 >= SQL92_RESERVED_LIKE && LA409_33 <= SQL92_RESERVED_NULL)||LA409_33==SQL92_RESERVED_OR||LA409_33==SQL92_RESERVED_PRIOR||LA409_33==SQL92_RESERVED_TRUE||LA409_33==UNSIGNED_INTEGER||LA409_33==CASCATED_ELEMENT||LA409_33==DATETIME_OP||LA409_33==DBTIMEZONE_VK||LA409_33==DIV_VK||LA409_33==DOT_ASTERISK||LA409_33==HOSTED_VARIABLE_NAME||(LA409_33 >= IS_A_SET && LA409_33 <= IS_PRESENT)||LA409_33==KEEP_VK||(LA409_33 >= LIKE2_VK && LA409_33 <= LIKEC_VK)||LA409_33==MAXVALUE_VK||LA409_33==MEMBER_VK||LA409_33==MINVALUE_VK||LA409_33==MODEL_EXPRESSION||LA409_33==MOD_VK||LA409_33==NEW_VK||LA409_33==NOT_BETWEEN||(LA409_33 >= NOT_IN && LA409_33 <= NOT_LIKE)||LA409_33==OUTER_JOIN_SIGN||(LA409_33 >= PERCENT_FOUND_VK && LA409_33 <= PERCENT_ROWCOUNT_VK)||LA409_33==PIPE_VK||LA409_33==SEARCHED_CASE||LA409_33==SESSIONTIMEZONE_VK||LA409_33==SIMPLE_CASE||LA409_33==SOME_VK||LA409_33==STANDARD_FUNCTION||LA409_33==SUBMULTISET_VK||LA409_33==SUBQUERY||LA409_33==UNARY_OPERATOR||LA409_33==VECTOR_EXPR) ) {
							alt409=1;
						}

						else {
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 409, 33, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA409_32==APPROXIMATE_NUM_LIT||LA409_32==ASTERISK||LA409_32==CHAR_STRING||LA409_32==CONCATENATION_OP||(LA409_32 >= EQUALS_OP && LA409_32 <= EXACT_NUM_LIT)||(LA409_32 >= GREATER_THAN_OP && LA409_32 <= GREATER_THAN_OR_EQUALS_OP)||(LA409_32 >= LESS_THAN_OP && LA409_32 <= LESS_THAN_OR_EQUALS_OP)||LA409_32==MINUS_SIGN||LA409_32==NOT_EQUAL_OP||LA409_32==PERCENT||LA409_32==PLUS_SIGN||LA409_32==SOLIDUS||LA409_32==SQL92_RESERVED_ALL||(LA409_32 >= SQL92_RESERVED_AND && LA409_32 <= SQL92_RESERVED_ANY)||LA409_32==SQL92_RESERVED_BETWEEN||LA409_32==SQL92_RESERVED_DEFAULT||LA409_32==SQL92_RESERVED_DISTINCT||(LA409_32 >= SQL92_RESERVED_EXISTS && LA409_32 <= SQL92_RESERVED_FALSE)||LA409_32==SQL92_RESERVED_IN||(LA409_32 >= SQL92_RESERVED_LIKE && LA409_32 <= SQL92_RESERVED_NULL)||LA409_32==SQL92_RESERVED_OR||LA409_32==SQL92_RESERVED_PRIOR||LA409_32==SQL92_RESERVED_TRUE||LA409_32==CASCATED_ELEMENT||LA409_32==DATETIME_OP||LA409_32==DBTIMEZONE_VK||LA409_32==DIV_VK||LA409_32==DOT_ASTERISK||LA409_32==HOSTED_VARIABLE_NAME||(LA409_32 >= IS_A_SET && LA409_32 <= IS_PRESENT)||LA409_32==KEEP_VK||(LA409_32 >= LIKE2_VK && LA409_32 <= LIKEC_VK)||LA409_32==MAXVALUE_VK||LA409_32==MEMBER_VK||LA409_32==MINVALUE_VK||LA409_32==MODEL_EXPRESSION||LA409_32==MOD_VK||LA409_32==NEW_VK||LA409_32==NOT_BETWEEN||(LA409_32 >= NOT_IN && LA409_32 <= NOT_LIKE)||LA409_32==OUTER_JOIN_SIGN||(LA409_32 >= PERCENT_FOUND_VK && LA409_32 <= PERCENT_ROWCOUNT_VK)||LA409_32==PIPE_VK||LA409_32==SEARCHED_CASE||LA409_32==SESSIONTIMEZONE_VK||LA409_32==SIMPLE_CASE||LA409_32==SOME_VK||LA409_32==STANDARD_FUNCTION||LA409_32==SUBMULTISET_VK||LA409_32==SUBQUERY||LA409_32==UNARY_OPERATOR||LA409_32==VECTOR_EXPR) ) {
						alt409=1;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 409, 32, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 409, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_NOT:
				{
				alt409=2;
				}
				break;
			case IS_A_SET:
			case IS_EMPTY:
			case IS_INFINITE:
			case IS_NAN:
			case IS_NOT_A_SET:
			case IS_NOT_EMPTY:
			case IS_NOT_INFINITE:
			case IS_NOT_NAN:
			case IS_NOT_NULL:
			case IS_NOT_PRESENT:
			case IS_NULL:
			case IS_PRESENT:
				{
				alt409=3;
				}
				break;
			case IS_NOT_OF_TYPE:
				{
				alt409=4;
				}
				break;
			case IS_OF_TYPE:
				{
				alt409=5;
				}
				break;
			case MEMBER_VK:
			case SUBMULTISET_VK:
				{
				alt409=6;
				}
				break;
			case NOT_IN:
				{
				alt409=7;
				}
				break;
			case SQL92_RESERVED_IN:
				{
				alt409=8;
				}
				break;
			case NOT_BETWEEN:
				{
				alt409=9;
				}
				break;
			case SQL92_RESERVED_BETWEEN:
				{
				alt409=10;
				}
				break;
			case SQL92_RESERVED_LIKE:
			case LIKE2_VK:
			case LIKE4_VK:
			case LIKEC_VK:
			case NOT_LIKE:
				{
				alt409=11;
				}
				break;
			case PIPE_VK:
				{
				alt409=12;
				}
				break;
			case UNARY_OPERATOR:
				{
				alt409=13;
				}
				break;
			case SQL92_RESERVED_PRIOR:
				{
				alt409=14;
				}
				break;
			case NEW_VK:
				{
				alt409=15;
				}
				break;
			case SQL92_RESERVED_DISTINCT:
				{
				alt409=16;
				}
				break;
			case STANDARD_FUNCTION:
				{
				alt409=17;
				}
				break;
			case SQL92_RESERVED_ALL:
			case SQL92_RESERVED_ANY:
			case SQL92_RESERVED_EXISTS:
			case SOME_VK:
				{
				alt409=18;
				}
				break;
			case VECTOR_EXPR:
				{
				alt409=19;
				}
				break;
			case DATETIME_OP:
				{
				alt409=20;
				}
				break;
			case MODEL_EXPRESSION:
				{
				alt409=21;
				}
				break;
			case KEEP_VK:
				{
				alt409=22;
				}
				break;
			case DOT_ASTERISK:
				{
				alt409=23;
				}
				break;
			case PERCENT_FOUND_VK:
			case PERCENT_ISOPEN_VK:
			case PERCENT_NOTFOUND_VK:
			case PERCENT_ROWCOUNT_VK:
				{
				alt409=24;
				}
				break;
			case OUTER_JOIN_SIGN:
				{
				alt409=25;
				}
				break;
			case SEARCHED_CASE:
			case SIMPLE_CASE:
				{
				alt409=26;
				}
				break;
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case EXACT_NUM_LIT:
			case SQL92_RESERVED_DEFAULT:
			case SQL92_RESERVED_FALSE:
			case SQL92_RESERVED_NULL:
			case SQL92_RESERVED_TRUE:
			case UNSIGNED_INTEGER:
			case DBTIMEZONE_VK:
			case MAXVALUE_VK:
			case MINVALUE_VK:
			case SESSIONTIMEZONE_VK:
				{
				alt409=27;
				}
				break;
			case CASCATED_ELEMENT:
				{
				alt409=28;
				}
				break;
			case HOSTED_VARIABLE_NAME:
				{
				alt409=29;
				}
				break;
			case SUBQUERY:
				{
				alt409=30;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 409, 0, input);
				throw nvae;
			}
			switch (alt409) {
				case 1 :
					// PLSQLPrinter.g:1786:10: ^( ( SQL92_RESERVED_OR | SQL92_RESERVED_AND | EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP | CONCATENATION_OP | PLUS_SIGN | MINUS_SIGN | ASTERISK | SOLIDUS | PERCENT | MOD_VK | DIV_VK ) arg1= expression_element arg2= expression_element )
					{
					// PLSQLPrinter.g:1787:11: ( SQL92_RESERVED_OR | SQL92_RESERVED_AND | EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP | CONCATENATION_OP | PLUS_SIGN | MINUS_SIGN | ASTERISK | SOLIDUS | PERCENT | MOD_VK | DIV_VK )
					int alt396=16;
					switch ( input.LA(1) ) {
					case SQL92_RESERVED_OR:
						{
						alt396=1;
						}
						break;
					case SQL92_RESERVED_AND:
						{
						alt396=2;
						}
						break;
					case EQUALS_OP:
						{
						alt396=3;
						}
						break;
					case NOT_EQUAL_OP:
						{
						alt396=4;
						}
						break;
					case LESS_THAN_OP:
						{
						alt396=5;
						}
						break;
					case GREATER_THAN_OP:
						{
						alt396=6;
						}
						break;
					case LESS_THAN_OR_EQUALS_OP:
						{
						alt396=7;
						}
						break;
					case GREATER_THAN_OR_EQUALS_OP:
						{
						alt396=8;
						}
						break;
					case CONCATENATION_OP:
						{
						alt396=9;
						}
						break;
					case PLUS_SIGN:
						{
						alt396=10;
						}
						break;
					case MINUS_SIGN:
						{
						alt396=11;
						}
						break;
					case ASTERISK:
						{
						alt396=12;
						}
						break;
					case SOLIDUS:
						{
						alt396=13;
						}
						break;
					case PERCENT:
						{
						alt396=14;
						}
						break;
					case MOD_VK:
						{
						alt396=15;
						}
						break;
					case DIV_VK:
						{
						alt396=16;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 396, 0, input);
						throw nvae;
					}
					switch (alt396) {
						case 1 :
							// PLSQLPrinter.g:1788:13: SQL92_RESERVED_OR
							{
							match(input,SQL92_RESERVED_OR,FOLLOW_SQL92_RESERVED_OR_in_expression_element17779); 
							 op = "or"; 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1789:15: SQL92_RESERVED_AND
							{
							match(input,SQL92_RESERVED_AND,FOLLOW_SQL92_RESERVED_AND_in_expression_element17797); 
							 op = "and"; 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1790:15: EQUALS_OP
							{
							match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_expression_element17815); 
							 op = "="; 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1791:15: NOT_EQUAL_OP
							{
							match(input,NOT_EQUAL_OP,FOLLOW_NOT_EQUAL_OP_in_expression_element17833); 
							 op = "<>"; 
							}
							break;
						case 5 :
							// PLSQLPrinter.g:1792:15: LESS_THAN_OP
							{
							match(input,LESS_THAN_OP,FOLLOW_LESS_THAN_OP_in_expression_element17851); 
							 op = "<"; 
							}
							break;
						case 6 :
							// PLSQLPrinter.g:1793:15: GREATER_THAN_OP
							{
							match(input,GREATER_THAN_OP,FOLLOW_GREATER_THAN_OP_in_expression_element17869); 
							 op = ">"; 
							}
							break;
						case 7 :
							// PLSQLPrinter.g:1794:15: LESS_THAN_OR_EQUALS_OP
							{
							match(input,LESS_THAN_OR_EQUALS_OP,FOLLOW_LESS_THAN_OR_EQUALS_OP_in_expression_element17887); 
							 op = "<="; 
							}
							break;
						case 8 :
							// PLSQLPrinter.g:1795:15: GREATER_THAN_OR_EQUALS_OP
							{
							match(input,GREATER_THAN_OR_EQUALS_OP,FOLLOW_GREATER_THAN_OR_EQUALS_OP_in_expression_element17905); 
							 op = ">="; 
							}
							break;
						case 9 :
							// PLSQLPrinter.g:1796:15: CONCATENATION_OP
							{
							match(input,CONCATENATION_OP,FOLLOW_CONCATENATION_OP_in_expression_element17923); 
							 op = "||"; 
							}
							break;
						case 10 :
							// PLSQLPrinter.g:1797:15: PLUS_SIGN
							{
							match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_expression_element17941); 
							 op = "+"; 
							}
							break;
						case 11 :
							// PLSQLPrinter.g:1798:15: MINUS_SIGN
							{
							match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_expression_element17959); 
							 op = "-"; 
							}
							break;
						case 12 :
							// PLSQLPrinter.g:1799:15: ASTERISK
							{
							match(input,ASTERISK,FOLLOW_ASTERISK_in_expression_element17977); 
							 op = "*"; 
							}
							break;
						case 13 :
							// PLSQLPrinter.g:1800:15: SOLIDUS
							{
							match(input,SOLIDUS,FOLLOW_SOLIDUS_in_expression_element17995); 
							 op = "/"; 
							}
							break;
						case 14 :
							// PLSQLPrinter.g:1801:15: PERCENT
							{
							match(input,PERCENT,FOLLOW_PERCENT_in_expression_element18013); 
							 op = "%"; 
							}
							break;
						case 15 :
							// PLSQLPrinter.g:1802:15: MOD_VK
							{
							match(input,MOD_VK,FOLLOW_MOD_VK_in_expression_element18031); 
							 op = "mod"; 
							}
							break;
						case 16 :
							// PLSQLPrinter.g:1803:15: DIV_VK
							{
							match(input,DIV_VK,FOLLOW_DIV_VK_in_expression_element18049); 
							 op = "div"; 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18077);
					arg1=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element18081);
					arg2=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1807:5: -> expression_element_generic_binop(op=oparg1=$arg1.starg2=$arg2.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_generic_binop",new STAttrMap().put("op", op).put("arg1", (arg1!=null?((StringTemplate)arg1.getTemplate()):null)).put("arg2", (arg2!=null?((StringTemplate)arg2.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1808:10: ^( SQL92_RESERVED_NOT expr= expression_element )
					{
					match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_expression_element18129); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18133);
					expr=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1809:5: -> expression_element_not(expr=$expr.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_not",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1810:10: ^( ( IS_NOT_NULL | IS_NULL | IS_NOT_NAN | IS_NAN | IS_NOT_PRESENT | IS_PRESENT | IS_NOT_INFINITE | IS_INFINITE | IS_NOT_A_SET | IS_A_SET | IS_NOT_EMPTY | IS_EMPTY ) arg= expression_element )
					{
					// PLSQLPrinter.g:1811:13: ( IS_NOT_NULL | IS_NULL | IS_NOT_NAN | IS_NAN | IS_NOT_PRESENT | IS_PRESENT | IS_NOT_INFINITE | IS_INFINITE | IS_NOT_A_SET | IS_A_SET | IS_NOT_EMPTY | IS_EMPTY )
					int alt397=12;
					switch ( input.LA(1) ) {
					case IS_NOT_NULL:
						{
						alt397=1;
						}
						break;
					case IS_NULL:
						{
						alt397=2;
						}
						break;
					case IS_NOT_NAN:
						{
						alt397=3;
						}
						break;
					case IS_NAN:
						{
						alt397=4;
						}
						break;
					case IS_NOT_PRESENT:
						{
						alt397=5;
						}
						break;
					case IS_PRESENT:
						{
						alt397=6;
						}
						break;
					case IS_NOT_INFINITE:
						{
						alt397=7;
						}
						break;
					case IS_INFINITE:
						{
						alt397=8;
						}
						break;
					case IS_NOT_A_SET:
						{
						alt397=9;
						}
						break;
					case IS_A_SET:
						{
						alt397=10;
						}
						break;
					case IS_NOT_EMPTY:
						{
						alt397=11;
						}
						break;
					case IS_EMPTY:
						{
						alt397=12;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 397, 0, input);
						throw nvae;
					}
					switch (alt397) {
						case 1 :
							// PLSQLPrinter.g:1812:15: IS_NOT_NULL
							{
							match(input,IS_NOT_NULL,FOLLOW_IS_NOT_NULL_in_expression_element18190); 
							 op = "is not null"; 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1813:17: IS_NULL
							{
							match(input,IS_NULL,FOLLOW_IS_NULL_in_expression_element18210); 
							 op = "is null"; 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1814:17: IS_NOT_NAN
							{
							match(input,IS_NOT_NAN,FOLLOW_IS_NOT_NAN_in_expression_element18230); 
							 op = "is not nan"; 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1815:17: IS_NAN
							{
							match(input,IS_NAN,FOLLOW_IS_NAN_in_expression_element18250); 
							 op = "is nan"; 
							}
							break;
						case 5 :
							// PLSQLPrinter.g:1816:17: IS_NOT_PRESENT
							{
							match(input,IS_NOT_PRESENT,FOLLOW_IS_NOT_PRESENT_in_expression_element18270); 
							 op = "is not present"; 
							}
							break;
						case 6 :
							// PLSQLPrinter.g:1817:17: IS_PRESENT
							{
							match(input,IS_PRESENT,FOLLOW_IS_PRESENT_in_expression_element18290); 
							 op = "is present"; 
							}
							break;
						case 7 :
							// PLSQLPrinter.g:1818:17: IS_NOT_INFINITE
							{
							match(input,IS_NOT_INFINITE,FOLLOW_IS_NOT_INFINITE_in_expression_element18310); 
							 op = "is not infinite"; 
							}
							break;
						case 8 :
							// PLSQLPrinter.g:1819:17: IS_INFINITE
							{
							match(input,IS_INFINITE,FOLLOW_IS_INFINITE_in_expression_element18330); 
							 op = "is infinite"; 
							}
							break;
						case 9 :
							// PLSQLPrinter.g:1820:17: IS_NOT_A_SET
							{
							match(input,IS_NOT_A_SET,FOLLOW_IS_NOT_A_SET_in_expression_element18350); 
							 op = "is not a set"; 
							}
							break;
						case 10 :
							// PLSQLPrinter.g:1821:17: IS_A_SET
							{
							match(input,IS_A_SET,FOLLOW_IS_A_SET_in_expression_element18370); 
							 op = "is a set"; 
							}
							break;
						case 11 :
							// PLSQLPrinter.g:1822:17: IS_NOT_EMPTY
							{
							match(input,IS_NOT_EMPTY,FOLLOW_IS_NOT_EMPTY_in_expression_element18390); 
							 op = "is not empty"; 
							}
							break;
						case 12 :
							// PLSQLPrinter.g:1823:17: IS_EMPTY
							{
							match(input,IS_EMPTY,FOLLOW_IS_EMPTY_in_expression_element18410); 
							 op = "is empty"; 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18442);
					arg=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1827:5: -> expression_element_generic_suffix_unary_op(op=oparg=$arg.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_generic_suffix_unary_op",new STAttrMap().put("op", op).put("arg", (arg!=null?((StringTemplate)arg.getTemplate()):null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1828:10: ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ )
					{
					match(input,IS_NOT_OF_TYPE,FOLLOW_IS_NOT_OF_TYPE_in_expression_element18486); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18488);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1828:46: ( type_spec )+
					int cnt398=0;
					loop398:
					while (true) {
						int alt398=2;
						int LA398_0 = input.LA(1);
						if ( (LA398_0==CUSTOM_TYPE||LA398_0==INTERVAL_DATATYPE||LA398_0==NATIVE_DATATYPE) ) {
							alt398=1;
						}

						switch (alt398) {
						case 1 :
							// PLSQLPrinter.g:1828:46: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_expression_element18490);
							type_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt398 >= 1 ) break loop398;
							EarlyExitException eee = new EarlyExitException(398, input);
							throw eee;
						}
						cnt398++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1829:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1830:10: ^( IS_OF_TYPE expression_element ( type_spec )+ )
					{
					match(input,IS_OF_TYPE,FOLLOW_IS_OF_TYPE_in_expression_element18518); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18520);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1830:42: ( type_spec )+
					int cnt399=0;
					loop399:
					while (true) {
						int alt399=2;
						int LA399_0 = input.LA(1);
						if ( (LA399_0==CUSTOM_TYPE||LA399_0==INTERVAL_DATATYPE||LA399_0==NATIVE_DATATYPE) ) {
							alt399=1;
						}

						switch (alt399) {
						case 1 :
							// PLSQLPrinter.g:1830:42: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_expression_element18522);
							type_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt399 >= 1 ) break loop399;
							EarlyExitException eee = new EarlyExitException(399, input);
							throw eee;
						}
						cnt399++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1831:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:1833:10: ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element )
					{
					// PLSQLPrinter.g:1833:12: ( MEMBER_VK | SUBMULTISET_VK )
					int alt400=2;
					int LA400_0 = input.LA(1);
					if ( (LA400_0==MEMBER_VK) ) {
						alt400=1;
					}
					else if ( (LA400_0==SUBMULTISET_VK) ) {
						alt400=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 400, 0, input);
						throw nvae;
					}

					switch (alt400) {
						case 1 :
							// PLSQLPrinter.g:1833:13: MEMBER_VK
							{
							match(input,MEMBER_VK,FOLLOW_MEMBER_VK_in_expression_element18552); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1833:23: SUBMULTISET_VK
							{
							match(input,SUBMULTISET_VK,FOLLOW_SUBMULTISET_VK_in_expression_element18554); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18557);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element18559);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1834:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:1836:10: ^( NOT_IN expr= expression_element in_elements )
					{
					match(input,NOT_IN,FOLLOW_NOT_IN_in_expression_element18587); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18591);
					expr=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_in_elements_in_expression_element18593);
					in_elements336=in_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1837:5: -> expression_element_not_in(expr=$expr.stin_elements=$in_elements.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_not_in",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("in_elements", (in_elements336!=null?((StringTemplate)in_elements336.getTemplate()):null)));
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:1838:10: ^( SQL92_RESERVED_IN expr= expression_element in_elements )
					{
					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_expression_element18626); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18630);
					expr=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_in_elements_in_expression_element18632);
					in_elements337=in_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1839:5: -> expression_element_in(expr=$expr.stin_elements=$in_elements.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_in",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("in_elements", (in_elements337!=null?((StringTemplate)in_elements337.getTemplate()):null)));
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:1840:10: ^( NOT_BETWEEN expr= expression_element expr_low= expression_element expr_high= expression_element )
					{
					match(input,NOT_BETWEEN,FOLLOW_NOT_BETWEEN_in_expression_element18665); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18669);
					expr=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element18673);
					expr_low=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element18677);
					expr_high=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1841:5: -> expression_element_between(expr=$expr.stis_not=trueexpr_low=$expr_low.stexpr_high=$expr_high.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_between",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("is_not", true).put("expr_low", (expr_low!=null?((StringTemplate)expr_low.getTemplate()):null)).put("expr_high", (expr_high!=null?((StringTemplate)expr_high.getTemplate()):null)));
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:1842:10: ^( SQL92_RESERVED_BETWEEN expr= expression_element expr_low= expression_element expr_high= expression_element )
					{
					match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_expression_element18720); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18724);
					expr=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element18728);
					expr_low=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element18732);
					expr_high=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1843:5: -> expression_element_between(expr=$expr.stis_not=falseexpr_low=$expr_low.stexpr_high=$expr_high.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_between",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("is_not", false).put("expr_low", (expr_low!=null?((StringTemplate)expr_low.getTemplate()):null)).put("expr_high", (expr_high!=null?((StringTemplate)expr_high.getTemplate()):null)));
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:1844:10: ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK | NOT_LIKE ) text= expression_element pattern= expression_element (escape= expression_element )? )
					{
					// PLSQLPrinter.g:1845:13: ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK | NOT_LIKE )
					int alt401=5;
					switch ( input.LA(1) ) {
					case SQL92_RESERVED_LIKE:
						{
						alt401=1;
						}
						break;
					case LIKEC_VK:
						{
						alt401=2;
						}
						break;
					case LIKE2_VK:
						{
						alt401=3;
						}
						break;
					case LIKE4_VK:
						{
						alt401=4;
						}
						break;
					case NOT_LIKE:
						{
						alt401=5;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 401, 0, input);
						throw nvae;
					}
					switch (alt401) {
						case 1 :
							// PLSQLPrinter.g:1846:15: SQL92_RESERVED_LIKE
							{
							match(input,SQL92_RESERVED_LIKE,FOLLOW_SQL92_RESERVED_LIKE_in_expression_element18804); 
							 op = "like"; 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1847:17: LIKEC_VK
							{
							match(input,LIKEC_VK,FOLLOW_LIKEC_VK_in_expression_element18824); 
							 op = "likec"; 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1848:17: LIKE2_VK
							{
							match(input,LIKE2_VK,FOLLOW_LIKE2_VK_in_expression_element18844); 
							 op = "like2"; 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1849:17: LIKE4_VK
							{
							match(input,LIKE4_VK,FOLLOW_LIKE4_VK_in_expression_element18864); 
							 op = "like4"; 
							}
							break;
						case 5 :
							// PLSQLPrinter.g:1850:17: NOT_LIKE
							{
							match(input,NOT_LIKE,FOLLOW_NOT_LIKE_in_expression_element18884); 
							 op = "not like"; 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18916);
					text=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element18932);
					pattern=expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1854:19: (escape= expression_element )?
					int alt402=2;
					int LA402_0 = input.LA(1);
					if ( (LA402_0==APPROXIMATE_NUM_LIT||LA402_0==ASTERISK||LA402_0==CHAR_STRING||LA402_0==CONCATENATION_OP||(LA402_0 >= EQUALS_OP && LA402_0 <= EXACT_NUM_LIT)||(LA402_0 >= GREATER_THAN_OP && LA402_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA402_0 >= LESS_THAN_OP && LA402_0 <= LESS_THAN_OR_EQUALS_OP)||LA402_0==MINUS_SIGN||LA402_0==NOT_EQUAL_OP||LA402_0==PERCENT||LA402_0==PLUS_SIGN||LA402_0==SOLIDUS||LA402_0==SQL92_RESERVED_ALL||(LA402_0 >= SQL92_RESERVED_AND && LA402_0 <= SQL92_RESERVED_ANY)||LA402_0==SQL92_RESERVED_BETWEEN||LA402_0==SQL92_RESERVED_DEFAULT||LA402_0==SQL92_RESERVED_DISTINCT||(LA402_0 >= SQL92_RESERVED_EXISTS && LA402_0 <= SQL92_RESERVED_FALSE)||LA402_0==SQL92_RESERVED_IN||(LA402_0 >= SQL92_RESERVED_LIKE && LA402_0 <= SQL92_RESERVED_NULL)||LA402_0==SQL92_RESERVED_OR||LA402_0==SQL92_RESERVED_PRIOR||LA402_0==SQL92_RESERVED_TRUE||LA402_0==UNSIGNED_INTEGER||LA402_0==CASCATED_ELEMENT||LA402_0==DATETIME_OP||LA402_0==DBTIMEZONE_VK||LA402_0==DIV_VK||LA402_0==DOT_ASTERISK||LA402_0==HOSTED_VARIABLE_NAME||(LA402_0 >= IS_A_SET && LA402_0 <= IS_PRESENT)||LA402_0==KEEP_VK||(LA402_0 >= LIKE2_VK && LA402_0 <= LIKEC_VK)||LA402_0==MAXVALUE_VK||LA402_0==MEMBER_VK||LA402_0==MINVALUE_VK||LA402_0==MODEL_EXPRESSION||LA402_0==MOD_VK||LA402_0==NEW_VK||LA402_0==NOT_BETWEEN||(LA402_0 >= NOT_IN && LA402_0 <= NOT_LIKE)||LA402_0==OUTER_JOIN_SIGN||(LA402_0 >= PERCENT_FOUND_VK && LA402_0 <= PERCENT_ROWCOUNT_VK)||LA402_0==PIPE_VK||LA402_0==SEARCHED_CASE||LA402_0==SESSIONTIMEZONE_VK||LA402_0==SIMPLE_CASE||LA402_0==SOME_VK||LA402_0==STANDARD_FUNCTION||LA402_0==SUBMULTISET_VK||LA402_0==SUBQUERY||LA402_0==UNARY_OPERATOR||LA402_0==VECTOR_EXPR) ) {
						alt402=1;
					}
					switch (alt402) {
						case 1 :
							// PLSQLPrinter.g:1854:19: escape= expression_element
							{
							pushFollow(FOLLOW_expression_element_in_expression_element18948);
							escape=expression_element();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1856:5: -> expression_element_like(text=$text.stlike_op=oppattern=$pattern.stescape_char=$escape.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_like",new STAttrMap().put("text", (text!=null?((StringTemplate)text.getTemplate()):null)).put("like_op", op).put("pattern", (pattern!=null?((StringTemplate)pattern.getTemplate()):null)).put("escape_char", (escape!=null?((StringTemplate)escape.getTemplate()):null)));
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:1858:10: ^( PIPE_VK expression_element expression_element )
					{
					match(input,PIPE_VK,FOLLOW_PIPE_VK_in_expression_element19008); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element19010);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element19012);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1859:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:1861:10: ^( UNARY_OPERATOR arg= expression_element )
					{
					UNARY_OPERATOR338=(CommonTree)match(input,UNARY_OPERATOR,FOLLOW_UNARY_OPERATOR_in_expression_element19040); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element19044);
					arg=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1862:5: -> expression_element_generic_prefix_unary_op(op=$UNARY_OPERATOR.textis_spaced=falsearg=$arg.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_generic_prefix_unary_op",new STAttrMap().put("op", (UNARY_OPERATOR338!=null?UNARY_OPERATOR338.getText():null)).put("is_spaced", false).put("arg", (arg!=null?((StringTemplate)arg.getTemplate()):null)));
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:1863:10: ^( SQL92_RESERVED_PRIOR arg= expression_element )
					{
					match(input,SQL92_RESERVED_PRIOR,FOLLOW_SQL92_RESERVED_PRIOR_in_expression_element19082); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element19086);
					arg=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1864:5: -> expression_element_prior(expr=$arg.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_prior",new STAttrMap().put("expr", (arg!=null?((StringTemplate)arg.getTemplate()):null)));
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:1865:10: ^( NEW_VK expression )
					{
					match(input,NEW_VK,FOLLOW_NEW_VK_in_expression_element19114); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_expression_element19116);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1866:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:1867:10: ^( SQL92_RESERVED_DISTINCT expression_element )
					{
					match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_expression_element19143); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element19145);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1868:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:1869:10: ^( STANDARD_FUNCTION standard_function )
					{
					match(input,STANDARD_FUNCTION,FOLLOW_STANDARD_FUNCTION_in_expression_element19172); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_standard_function_in_expression_element19174);
					standard_function339=standard_function();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1869:49: -> { $standard_function.st }
					{
						retval.st =  (standard_function339!=null?((StringTemplate)standard_function339.getTemplate()):null) ;
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:1870:10: ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) (s_or_e= subquery |s_or_e= expression ) )
					{
					// PLSQLPrinter.g:1870:12: ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY )
					int alt403=4;
					switch ( input.LA(1) ) {
					case SOME_VK:
						{
						alt403=1;
						}
						break;
					case SQL92_RESERVED_EXISTS:
						{
						alt403=2;
						}
						break;
					case SQL92_RESERVED_ALL:
						{
						alt403=3;
						}
						break;
					case SQL92_RESERVED_ANY:
						{
						alt403=4;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 403, 0, input);
						throw nvae;
					}
					switch (alt403) {
						case 1 :
							// PLSQLPrinter.g:1870:13: SOME_VK
							{
							SOME_VK340=(CommonTree)match(input,SOME_VK,FOLLOW_SOME_VK_in_expression_element19192); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1870:21: SQL92_RESERVED_EXISTS
							{
							SQL92_RESERVED_EXISTS343=(CommonTree)match(input,SQL92_RESERVED_EXISTS,FOLLOW_SQL92_RESERVED_EXISTS_in_expression_element19194); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1870:43: SQL92_RESERVED_ALL
							{
							SQL92_RESERVED_ALL342=(CommonTree)match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_expression_element19196); 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1870:62: SQL92_RESERVED_ANY
							{
							SQL92_RESERVED_ANY341=(CommonTree)match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_expression_element19198); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1870:82: (s_or_e= subquery |s_or_e= expression )
					int alt404=2;
					int LA404_0 = input.LA(1);
					if ( (LA404_0==SUBQUERY) ) {
						alt404=1;
					}
					else if ( (LA404_0==EXPR||LA404_0==LOGIC_EXPR) ) {
						alt404=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 404, 0, input);
						throw nvae;
					}

					switch (alt404) {
						case 1 :
							// PLSQLPrinter.g:1870:83: s_or_e= subquery
							{
							pushFollow(FOLLOW_subquery_in_expression_element19204);
							s_or_e=subquery();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1870:99: s_or_e= expression
							{
							pushFollow(FOLLOW_expression_in_expression_element19208);
							s_or_e=expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1871:5: -> expression_element_quantified_expr(subquery_or_expression=$s_or_e.stis_some=$SOME_VK != nullis_any=$SQL92_RESERVED_ANY != nullis_all=$SQL92_RESERVED_ALL != nullis_exists=$SQL92_RESERVED_EXISTS != null)
					{
						retval.st = templateLib.getInstanceOf("expression_element_quantified_expr",new STAttrMap().put("subquery_or_expression", (s_or_e!=null?((StringTemplate)s_or_e.getTemplate()):null)).put("is_some", SOME_VK340 != null).put("is_any", SQL92_RESERVED_ANY341 != null).put("is_all", SQL92_RESERVED_ALL342 != null).put("is_exists", SQL92_RESERVED_EXISTS343 != null));
					}



					}
					break;
				case 19 :
					// PLSQLPrinter.g:1874:10: ^( VECTOR_EXPR ( expression_element )+ )
					{
					match(input,VECTOR_EXPR,FOLLOW_VECTOR_EXPR_in_expression_element19278); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1874:24: ( expression_element )+
					int cnt405=0;
					loop405:
					while (true) {
						int alt405=2;
						int LA405_0 = input.LA(1);
						if ( (LA405_0==APPROXIMATE_NUM_LIT||LA405_0==ASTERISK||LA405_0==CHAR_STRING||LA405_0==CONCATENATION_OP||(LA405_0 >= EQUALS_OP && LA405_0 <= EXACT_NUM_LIT)||(LA405_0 >= GREATER_THAN_OP && LA405_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA405_0 >= LESS_THAN_OP && LA405_0 <= LESS_THAN_OR_EQUALS_OP)||LA405_0==MINUS_SIGN||LA405_0==NOT_EQUAL_OP||LA405_0==PERCENT||LA405_0==PLUS_SIGN||LA405_0==SOLIDUS||LA405_0==SQL92_RESERVED_ALL||(LA405_0 >= SQL92_RESERVED_AND && LA405_0 <= SQL92_RESERVED_ANY)||LA405_0==SQL92_RESERVED_BETWEEN||LA405_0==SQL92_RESERVED_DEFAULT||LA405_0==SQL92_RESERVED_DISTINCT||(LA405_0 >= SQL92_RESERVED_EXISTS && LA405_0 <= SQL92_RESERVED_FALSE)||LA405_0==SQL92_RESERVED_IN||(LA405_0 >= SQL92_RESERVED_LIKE && LA405_0 <= SQL92_RESERVED_NULL)||LA405_0==SQL92_RESERVED_OR||LA405_0==SQL92_RESERVED_PRIOR||LA405_0==SQL92_RESERVED_TRUE||LA405_0==UNSIGNED_INTEGER||LA405_0==CASCATED_ELEMENT||LA405_0==DATETIME_OP||LA405_0==DBTIMEZONE_VK||LA405_0==DIV_VK||LA405_0==DOT_ASTERISK||LA405_0==HOSTED_VARIABLE_NAME||(LA405_0 >= IS_A_SET && LA405_0 <= IS_PRESENT)||LA405_0==KEEP_VK||(LA405_0 >= LIKE2_VK && LA405_0 <= LIKEC_VK)||LA405_0==MAXVALUE_VK||LA405_0==MEMBER_VK||LA405_0==MINVALUE_VK||LA405_0==MODEL_EXPRESSION||LA405_0==MOD_VK||LA405_0==NEW_VK||LA405_0==NOT_BETWEEN||(LA405_0 >= NOT_IN && LA405_0 <= NOT_LIKE)||LA405_0==OUTER_JOIN_SIGN||(LA405_0 >= PERCENT_FOUND_VK && LA405_0 <= PERCENT_ROWCOUNT_VK)||LA405_0==PIPE_VK||LA405_0==SEARCHED_CASE||LA405_0==SESSIONTIMEZONE_VK||LA405_0==SIMPLE_CASE||LA405_0==SOME_VK||LA405_0==STANDARD_FUNCTION||LA405_0==SUBMULTISET_VK||LA405_0==SUBQUERY||LA405_0==UNARY_OPERATOR||LA405_0==VECTOR_EXPR) ) {
							alt405=1;
						}

						switch (alt405) {
						case 1 :
							// PLSQLPrinter.g:1874:24: expression_element
							{
							pushFollow(FOLLOW_expression_element_in_expression_element19280);
							expression_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt405 >= 1 ) break loop405;
							EarlyExitException eee = new EarlyExitException(405, input);
							throw eee;
						}
						cnt405++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1875:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 20 :
					// PLSQLPrinter.g:1877:10: ^( DATETIME_OP expression_element datetime_element )
					{
					match(input,DATETIME_OP,FOLLOW_DATETIME_OP_in_expression_element19309); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element19311);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_datetime_element_in_expression_element19313);
					datetime_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1878:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 21 :
					// PLSQLPrinter.g:1879:10: model_expression
					{
					pushFollow(FOLLOW_model_expression_in_expression_element19339);
					model_expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1880:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 22 :
					// PLSQLPrinter.g:1881:10: ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? )
					{
					match(input,KEEP_VK,FOLLOW_KEEP_VK_in_expression_element19365); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element19367);
					expression_element();
					state._fsp--;

					match(input,DENSE_RANK_VK,FOLLOW_DENSE_RANK_VK_in_expression_element19369); 
					// PLSQLPrinter.g:1881:53: ( FIRST_VK | LAST_VK )
					int alt406=2;
					int LA406_0 = input.LA(1);
					if ( (LA406_0==FIRST_VK) ) {
						alt406=1;
					}
					else if ( (LA406_0==LAST_VK) ) {
						alt406=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 406, 0, input);
						throw nvae;
					}

					switch (alt406) {
						case 1 :
							// PLSQLPrinter.g:1881:54: FIRST_VK
							{
							match(input,FIRST_VK,FOLLOW_FIRST_VK_in_expression_element19372); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1881:63: LAST_VK
							{
							match(input,LAST_VK,FOLLOW_LAST_VK_in_expression_element19374); 
							}
							break;

					}

					pushFollow(FOLLOW_order_by_clause_in_expression_element19377);
					order_by_clause();
					state._fsp--;

					// PLSQLPrinter.g:1881:88: ( over_clause )?
					int alt407=2;
					int LA407_0 = input.LA(1);
					if ( (LA407_0==OVER_VK) ) {
						alt407=1;
					}
					switch (alt407) {
						case 1 :
							// PLSQLPrinter.g:1881:88: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_expression_element19379);
							over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1882:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 23 :
					// PLSQLPrinter.g:1884:10: ^( DOT_ASTERISK tableview_name )
					{
					match(input,DOT_ASTERISK,FOLLOW_DOT_ASTERISK_in_expression_element19408); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_tableview_name_in_expression_element19410);
					tableview_name344=tableview_name();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1885:5: -> expression_element_dot_star(tableview_name=$tableview_name.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_dot_star",new STAttrMap().put("tableview_name", (tableview_name344!=null?((StringTemplate)tableview_name344.getTemplate()):null)));
					}



					}
					break;
				case 24 :
					// PLSQLPrinter.g:1886:10: ^( ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK ) cursor_name )
					{
					// PLSQLPrinter.g:1887:13: ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK )
					int alt408=4;
					switch ( input.LA(1) ) {
					case PERCENT_FOUND_VK:
						{
						alt408=1;
						}
						break;
					case PERCENT_NOTFOUND_VK:
						{
						alt408=2;
						}
						break;
					case PERCENT_ROWCOUNT_VK:
						{
						alt408=3;
						}
						break;
					case PERCENT_ISOPEN_VK:
						{
						alt408=4;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 408, 0, input);
						throw nvae;
					}
					switch (alt408) {
						case 1 :
							// PLSQLPrinter.g:1888:15: PERCENT_FOUND_VK
							{
							match(input,PERCENT_FOUND_VK,FOLLOW_PERCENT_FOUND_VK_in_expression_element19467); 
							 op = "%FOUND"; 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1889:16: PERCENT_NOTFOUND_VK
							{
							match(input,PERCENT_NOTFOUND_VK,FOLLOW_PERCENT_NOTFOUND_VK_in_expression_element19486); 
							 op = "%NOTFOUND"; 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1890:16: PERCENT_ROWCOUNT_VK
							{
							match(input,PERCENT_ROWCOUNT_VK,FOLLOW_PERCENT_ROWCOUNT_VK_in_expression_element19505); 
							 op = "%ROWCOUNT"; 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1891:16: PERCENT_ISOPEN_VK
							{
							match(input,PERCENT_ISOPEN_VK,FOLLOW_PERCENT_ISOPEN_VK_in_expression_element19524); 
							 op = "%ISOPEN"; 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_cursor_name_in_expression_element19554);
					cursor_name345=cursor_name();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1895:5: -> expression_element_cursor_op(op=opcursor_name=$cursor_name.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_cursor_op",new STAttrMap().put("op", op).put("cursor_name", (cursor_name345!=null?((StringTemplate)cursor_name345.getTemplate()):null)));
					}



					}
					break;
				case 25 :
					// PLSQLPrinter.g:1896:10: ^( OUTER_JOIN_SIGN expr= expression_element )
					{
					match(input,OUTER_JOIN_SIGN,FOLLOW_OUTER_JOIN_SIGN_in_expression_element19598); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element19602);
					expr=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1897:5: -> expression_element_outer_join_sign(expr=$expr.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_outer_join_sign",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)));
					}



					}
					break;
				case 26 :
					// PLSQLPrinter.g:1899:10: case_statement
					{
					pushFollow(FOLLOW_case_statement_in_expression_element19630);
					case_statement346=case_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1899:25: -> { $case_statement.st }
					{
						retval.st =  (case_statement346!=null?((StringTemplate)case_statement346.getTemplate()):null) ;
					}



					}
					break;
				case 27 :
					// PLSQLPrinter.g:1900:10: constant
					{
					pushFollow(FOLLOW_constant_in_expression_element19645);
					constant347=constant();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1900:19: -> { $constant.st }
					{
						retval.st =  (constant347!=null?((StringTemplate)constant347.getTemplate()):null) ;
					}



					}
					break;
				case 28 :
					// PLSQLPrinter.g:1901:10: general_element
					{
					pushFollow(FOLLOW_general_element_in_expression_element19660);
					general_element348=general_element();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1901:26: -> { $general_element.st }
					{
						retval.st =  (general_element348!=null?((StringTemplate)general_element348.getTemplate()):null) ;
					}



					}
					break;
				case 29 :
					// PLSQLPrinter.g:1902:10: hosted_variable_name
					{
					pushFollow(FOLLOW_hosted_variable_name_in_expression_element19675);
					hosted_variable_name349=hosted_variable_name();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1902:31: -> { $hosted_variable_name.st }
					{
						retval.st =  (hosted_variable_name349!=null?((StringTemplate)hosted_variable_name349.getTemplate()):null) ;
					}



					}
					break;
				case 30 :
					// PLSQLPrinter.g:1903:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_expression_element19690);
					subquery350=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1903:19: -> in_parens(val=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (subquery350!=null?((StringTemplate)subquery350.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression_element"


	public static class in_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "in_elements"
	// PLSQLPrinter.g:1906:1: in_elements : ( subquery -> in_parens(val=$subquery.st)| expression -> { $expression.st }| expression_list -> { $expression_list.st });
	public final PLSQLPrinter.in_elements_return in_elements() throws RecognitionException {
		PLSQLPrinter.in_elements_return retval = new PLSQLPrinter.in_elements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope subquery351 =null;
		TreeRuleReturnScope expression352 =null;
		TreeRuleReturnScope expression_list353 =null;

		try {
			// PLSQLPrinter.g:1907:5: ( subquery -> in_parens(val=$subquery.st)| expression -> { $expression.st }| expression_list -> { $expression_list.st })
			int alt410=3;
			switch ( input.LA(1) ) {
			case SUBQUERY:
				{
				alt410=1;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt410=2;
				}
				break;
			case EXPR_LIST:
				{
				alt410=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 410, 0, input);
				throw nvae;
			}
			switch (alt410) {
				case 1 :
					// PLSQLPrinter.g:1907:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_in_elements19719);
					subquery351=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1907:19: -> in_parens(val=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (subquery351!=null?((StringTemplate)subquery351.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1908:10: expression
					{
					pushFollow(FOLLOW_expression_in_in_elements19739);
					expression352=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1908:21: -> { $expression.st }
					{
						retval.st =  (expression352!=null?((StringTemplate)expression352.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1909:10: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_in_elements19754);
					expression_list353=expression_list();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1909:26: -> { $expression_list.st }
					{
						retval.st =  (expression_list353!=null?((StringTemplate)expression_list353.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "in_elements"


	public static class datetime_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "datetime_element"
	// PLSQLPrinter.g:1912:1: datetime_element : ( ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) ) -> template( \"not implemented: datetime_element\"| ^( DAY_VK SECOND_VK ( expression )* ) -> template( \"not implemented: datetime_element\"| ^( YEAR_VK MONTH_VK expression ) -> template( \"not implemented: datetime_element\");
	public final PLSQLPrinter.datetime_element_return datetime_element() throws RecognitionException {
		PLSQLPrinter.datetime_element_return retval = new PLSQLPrinter.datetime_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1913:5: ( ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) ) -> template( \"not implemented: datetime_element\"| ^( DAY_VK SECOND_VK ( expression )* ) -> template( \"not implemented: datetime_element\"| ^( YEAR_VK MONTH_VK expression ) -> template( \"not implemented: datetime_element\")
			int alt413=3;
			switch ( input.LA(1) ) {
			case AT_VK:
				{
				alt413=1;
				}
				break;
			case DAY_VK:
				{
				alt413=2;
				}
				break;
			case YEAR_VK:
				{
				alt413=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 413, 0, input);
				throw nvae;
			}
			switch (alt413) {
				case 1 :
					// PLSQLPrinter.g:1913:10: ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) )
					{
					match(input,AT_VK,FOLLOW_AT_VK_in_datetime_element19779); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_datetime_element19781);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1913:37: ( LOCAL_VK | TIME_VK expression )
					int alt411=2;
					int LA411_0 = input.LA(1);
					if ( (LA411_0==LOCAL_VK) ) {
						alt411=1;
					}
					else if ( (LA411_0==TIME_VK) ) {
						alt411=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 411, 0, input);
						throw nvae;
					}

					switch (alt411) {
						case 1 :
							// PLSQLPrinter.g:1913:38: LOCAL_VK
							{
							match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_datetime_element19784); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1913:47: TIME_VK expression
							{
							match(input,TIME_VK,FOLLOW_TIME_VK_in_datetime_element19786); 
							pushFollow(FOLLOW_expression_in_datetime_element19788);
							expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1914:5: -> template( \"not implemented: datetime_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: datetime_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1915:10: ^( DAY_VK SECOND_VK ( expression )* )
					{
					match(input,DAY_VK,FOLLOW_DAY_VK_in_datetime_element19816); 
					match(input, Token.DOWN, null); 
					match(input,SECOND_VK,FOLLOW_SECOND_VK_in_datetime_element19818); 
					// PLSQLPrinter.g:1915:29: ( expression )*
					loop412:
					while (true) {
						int alt412=2;
						int LA412_0 = input.LA(1);
						if ( (LA412_0==EXPR||LA412_0==LOGIC_EXPR) ) {
							alt412=1;
						}

						switch (alt412) {
						case 1 :
							// PLSQLPrinter.g:1915:29: expression
							{
							pushFollow(FOLLOW_expression_in_datetime_element19820);
							expression();
							state._fsp--;

							}
							break;

						default :
							break loop412;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1916:5: -> template( \"not implemented: datetime_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: datetime_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1917:10: ^( YEAR_VK MONTH_VK expression )
					{
					match(input,YEAR_VK,FOLLOW_YEAR_VK_in_datetime_element19848); 
					match(input, Token.DOWN, null); 
					match(input,MONTH_VK,FOLLOW_MONTH_VK_in_datetime_element19850); 
					pushFollow(FOLLOW_expression_in_datetime_element19852);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1918:5: -> template( \"not implemented: datetime_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: datetime_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "datetime_element"


	public static class model_expression_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_expression"
	// PLSQLPrinter.g:1921:1: model_expression : ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ ) -> template( \"not implemented: model_expression\";
	public final PLSQLPrinter.model_expression_return model_expression() throws RecognitionException {
		PLSQLPrinter.model_expression_return retval = new PLSQLPrinter.model_expression_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1922:5: ( ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ ) -> template( \"not implemented: model_expression\")
			// PLSQLPrinter.g:1922:10: ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ )
			{
			match(input,MODEL_EXPRESSION,FOLLOW_MODEL_EXPRESSION_in_model_expression19888); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_element_in_model_expression19890);
			expression_element();
			state._fsp--;

			// PLSQLPrinter.g:1922:48: ( model_expression_element )+
			int cnt414=0;
			loop414:
			while (true) {
				int alt414=2;
				int LA414_0 = input.LA(1);
				if ( (LA414_0==SQL92_RESERVED_ANY||LA414_0==EXPR||(LA414_0 >= FOR_MULTI_COLUMN && LA414_0 <= FOR_SINGLE_COLUMN)||LA414_0==LOGIC_EXPR) ) {
					alt414=1;
				}

				switch (alt414) {
				case 1 :
					// PLSQLPrinter.g:1922:48: model_expression_element
					{
					pushFollow(FOLLOW_model_expression_element_in_model_expression19892);
					model_expression_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt414 >= 1 ) break loop414;
					EarlyExitException eee = new EarlyExitException(414, input);
					throw eee;
				}
				cnt414++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1923:5: -> template( \"not implemented: model_expression\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_expression");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_expression"


	public static class model_expression_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_expression_element"
	// PLSQLPrinter.g:1926:1: model_expression_element : ( SQL92_RESERVED_ANY -> template( \"not implemented: model_expression_element\"| expression -> template( \"not implemented: model_expression_element\"| ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? ) -> template( \"not implemented: model_expression_element\"| ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) ) -> template( \"not implemented: model_expression_element\");
	public final PLSQLPrinter.model_expression_element_return model_expression_element() throws RecognitionException {
		PLSQLPrinter.model_expression_element_return retval = new PLSQLPrinter.model_expression_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1927:5: ( SQL92_RESERVED_ANY -> template( \"not implemented: model_expression_element\"| expression -> template( \"not implemented: model_expression_element\"| ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? ) -> template( \"not implemented: model_expression_element\"| ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) ) -> template( \"not implemented: model_expression_element\")
			int alt419=4;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ANY:
				{
				alt419=1;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt419=2;
				}
				break;
			case FOR_SINGLE_COLUMN:
				{
				alt419=3;
				}
				break;
			case FOR_MULTI_COLUMN:
				{
				alt419=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 419, 0, input);
				throw nvae;
			}
			switch (alt419) {
				case 1 :
					// PLSQLPrinter.g:1927:10: SQL92_RESERVED_ANY
					{
					match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_model_expression_element19928); 
					// TEMPLATE REWRITE
					// 1928:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1929:10: expression
					{
					pushFollow(FOLLOW_expression_in_model_expression_element19953);
					expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1930:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1931:10: ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? )
					{
					match(input,FOR_SINGLE_COLUMN,FOLLOW_FOR_SINGLE_COLUMN_in_model_expression_element19979); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_column_name_in_model_expression_element19981);
					column_name();
					state._fsp--;

					pushFollow(FOLLOW_for_single_column_element_in_model_expression_element19983);
					for_single_column_element();
					state._fsp--;

					// PLSQLPrinter.g:1931:68: ( for_like_part )?
					int alt415=2;
					int LA415_0 = input.LA(1);
					if ( (LA415_0==SQL92_RESERVED_LIKE) ) {
						alt415=1;
					}
					switch (alt415) {
						case 1 :
							// PLSQLPrinter.g:1931:68: for_like_part
							{
							pushFollow(FOLLOW_for_like_part_in_model_expression_element19985);
							for_like_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1932:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1933:10: ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) )
					{
					match(input,FOR_MULTI_COLUMN,FOLLOW_FOR_MULTI_COLUMN_in_model_expression_element20013); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1933:29: ( column_name )+
					int cnt416=0;
					loop416:
					while (true) {
						int alt416=2;
						int LA416_0 = input.LA(1);
						if ( (LA416_0==COLUMN_NAME) ) {
							alt416=1;
						}

						switch (alt416) {
						case 1 :
							// PLSQLPrinter.g:1933:29: column_name
							{
							pushFollow(FOLLOW_column_name_in_model_expression_element20015);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt416 >= 1 ) break loop416;
							EarlyExitException eee = new EarlyExitException(416, input);
							throw eee;
						}
						cnt416++;
					}

					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_model_expression_element20019); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1933:62: ( subquery | ( expression_list )+ )
					int alt418=2;
					int LA418_0 = input.LA(1);
					if ( (LA418_0==SUBQUERY) ) {
						alt418=1;
					}
					else if ( (LA418_0==EXPR_LIST) ) {
						alt418=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 418, 0, input);
						throw nvae;
					}

					switch (alt418) {
						case 1 :
							// PLSQLPrinter.g:1933:63: subquery
							{
							pushFollow(FOLLOW_subquery_in_model_expression_element20022);
							subquery();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1933:72: ( expression_list )+
							{
							// PLSQLPrinter.g:1933:72: ( expression_list )+
							int cnt417=0;
							loop417:
							while (true) {
								int alt417=2;
								int LA417_0 = input.LA(1);
								if ( (LA417_0==EXPR_LIST) ) {
									alt417=1;
								}

								switch (alt417) {
								case 1 :
									// PLSQLPrinter.g:1933:72: expression_list
									{
									pushFollow(FOLLOW_expression_list_in_model_expression_element20024);
									expression_list();
									state._fsp--;

									}
									break;

								default :
									if ( cnt417 >= 1 ) break loop417;
									EarlyExitException eee = new EarlyExitException(417, input);
									throw eee;
								}
								cnt417++;
							}

							}
							break;

					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1934:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_expression_element"


	public static class for_single_column_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_single_column_element"
	// PLSQLPrinter.g:1937:1: for_single_column_element : ( ^( SQL92_RESERVED_IN expression_list ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_FROM expression ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_TO expression ) -> template( \"not implemented: for_single_column_element\"| ^( ( INCREMENT_VK | DECREMENT_VK ) expression ) -> template( \"not implemented: for_single_column_element\");
	public final PLSQLPrinter.for_single_column_element_return for_single_column_element() throws RecognitionException {
		PLSQLPrinter.for_single_column_element_return retval = new PLSQLPrinter.for_single_column_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1938:5: ( ^( SQL92_RESERVED_IN expression_list ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_FROM expression ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_TO expression ) -> template( \"not implemented: for_single_column_element\"| ^( ( INCREMENT_VK | DECREMENT_VK ) expression ) -> template( \"not implemented: for_single_column_element\")
			int alt421=4;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_IN:
				{
				alt421=1;
				}
				break;
			case SQL92_RESERVED_FROM:
				{
				alt421=2;
				}
				break;
			case SQL92_RESERVED_TO:
				{
				alt421=3;
				}
				break;
			case DECREMENT_VK:
			case INCREMENT_VK:
				{
				alt421=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 421, 0, input);
				throw nvae;
			}
			switch (alt421) {
				case 1 :
					// PLSQLPrinter.g:1938:10: ^( SQL92_RESERVED_IN expression_list )
					{
					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_for_single_column_element20063); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_list_in_for_single_column_element20065);
					expression_list();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1939:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1940:10: ^( SQL92_RESERVED_FROM expression )
					{
					match(input,SQL92_RESERVED_FROM,FOLLOW_SQL92_RESERVED_FROM_in_for_single_column_element20092); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element20094);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1941:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1942:10: ^( SQL92_RESERVED_TO expression )
					{
					match(input,SQL92_RESERVED_TO,FOLLOW_SQL92_RESERVED_TO_in_for_single_column_element20122); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element20124);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1943:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1944:10: ^( ( INCREMENT_VK | DECREMENT_VK ) expression )
					{
					// PLSQLPrinter.g:1944:12: ( INCREMENT_VK | DECREMENT_VK )
					int alt420=2;
					int LA420_0 = input.LA(1);
					if ( (LA420_0==INCREMENT_VK) ) {
						alt420=1;
					}
					else if ( (LA420_0==DECREMENT_VK) ) {
						alt420=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 420, 0, input);
						throw nvae;
					}

					switch (alt420) {
						case 1 :
							// PLSQLPrinter.g:1944:13: INCREMENT_VK
							{
							match(input,INCREMENT_VK,FOLLOW_INCREMENT_VK_in_for_single_column_element20153); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1944:26: DECREMENT_VK
							{
							match(input,DECREMENT_VK,FOLLOW_DECREMENT_VK_in_for_single_column_element20155); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element20158);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1945:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_single_column_element"


	public static class for_like_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_like_part"
	// PLSQLPrinter.g:1948:1: for_like_part : ^( SQL92_RESERVED_LIKE expression ) -> template( \"not implemented: for_like_part\";
	public final PLSQLPrinter.for_like_part_return for_like_part() throws RecognitionException {
		PLSQLPrinter.for_like_part_return retval = new PLSQLPrinter.for_like_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1949:5: ( ^( SQL92_RESERVED_LIKE expression ) -> template( \"not implemented: for_like_part\")
			// PLSQLPrinter.g:1949:10: ^( SQL92_RESERVED_LIKE expression )
			{
			match(input,SQL92_RESERVED_LIKE,FOLLOW_SQL92_RESERVED_LIKE_in_for_like_part20195); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_for_like_part20197);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1950:5: -> template( \"not implemented: for_like_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: for_like_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_like_part"


	public static class case_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "case_statement"
	// PLSQLPrinter.g:1953:1: case_statement : ( ^( SIMPLE_CASE expression (parts+= case_when_part )+ ( case_else_part )? ) -> case_statement_simple(expression=$expression.stcase_when_parts=$partscase_else_part=$case_else_part.st)| ^( SEARCHED_CASE (parts+= case_when_part )+ ( case_else_part )? ) -> case_statement_searched(case_when_parts=$partscase_else_part=$case_else_part.st));
	public final PLSQLPrinter.case_statement_return case_statement() throws RecognitionException {
		PLSQLPrinter.case_statement_return retval = new PLSQLPrinter.case_statement_return();
		retval.start = input.LT(1);

		List<Object> list_parts=null;
		TreeRuleReturnScope expression354 =null;
		TreeRuleReturnScope case_else_part355 =null;
		TreeRuleReturnScope case_else_part356 =null;
		RuleReturnScope parts = null;
		try {
			// PLSQLPrinter.g:1954:5: ( ^( SIMPLE_CASE expression (parts+= case_when_part )+ ( case_else_part )? ) -> case_statement_simple(expression=$expression.stcase_when_parts=$partscase_else_part=$case_else_part.st)| ^( SEARCHED_CASE (parts+= case_when_part )+ ( case_else_part )? ) -> case_statement_searched(case_when_parts=$partscase_else_part=$case_else_part.st))
			int alt426=2;
			int LA426_0 = input.LA(1);
			if ( (LA426_0==SIMPLE_CASE) ) {
				alt426=1;
			}
			else if ( (LA426_0==SEARCHED_CASE) ) {
				alt426=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 426, 0, input);
				throw nvae;
			}

			switch (alt426) {
				case 1 :
					// PLSQLPrinter.g:1954:10: ^( SIMPLE_CASE expression (parts+= case_when_part )+ ( case_else_part )? )
					{
					match(input,SIMPLE_CASE,FOLLOW_SIMPLE_CASE_in_case_statement20233); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_case_statement20235);
					expression354=expression();
					state._fsp--;

					// PLSQLPrinter.g:1954:40: (parts+= case_when_part )+
					int cnt422=0;
					loop422:
					while (true) {
						int alt422=2;
						int LA422_0 = input.LA(1);
						if ( (LA422_0==SQL92_RESERVED_WHEN) ) {
							alt422=1;
						}

						switch (alt422) {
						case 1 :
							// PLSQLPrinter.g:1954:40: parts+= case_when_part
							{
							pushFollow(FOLLOW_case_when_part_in_case_statement20239);
							parts=case_when_part();
							state._fsp--;

							if (list_parts==null) list_parts=new ArrayList<Object>();
							list_parts.add(parts.getTemplate());
							}
							break;

						default :
							if ( cnt422 >= 1 ) break loop422;
							EarlyExitException eee = new EarlyExitException(422, input);
							throw eee;
						}
						cnt422++;
					}

					// PLSQLPrinter.g:1954:58: ( case_else_part )?
					int alt423=2;
					int LA423_0 = input.LA(1);
					if ( (LA423_0==SQL92_RESERVED_ELSE) ) {
						alt423=1;
					}
					switch (alt423) {
						case 1 :
							// PLSQLPrinter.g:1954:58: case_else_part
							{
							pushFollow(FOLLOW_case_else_part_in_case_statement20242);
							case_else_part355=case_else_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1955:5: -> case_statement_simple(expression=$expression.stcase_when_parts=$partscase_else_part=$case_else_part.st)
					{
						retval.st = templateLib.getInstanceOf("case_statement_simple",new STAttrMap().put("expression", (expression354!=null?((StringTemplate)expression354.getTemplate()):null)).put("case_when_parts", list_parts).put("case_else_part", (case_else_part355!=null?((StringTemplate)case_else_part355.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1956:10: ^( SEARCHED_CASE (parts+= case_when_part )+ ( case_else_part )? )
					{
					match(input,SEARCHED_CASE,FOLLOW_SEARCHED_CASE_in_case_statement20283); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1956:31: (parts+= case_when_part )+
					int cnt424=0;
					loop424:
					while (true) {
						int alt424=2;
						int LA424_0 = input.LA(1);
						if ( (LA424_0==SQL92_RESERVED_WHEN) ) {
							alt424=1;
						}

						switch (alt424) {
						case 1 :
							// PLSQLPrinter.g:1956:31: parts+= case_when_part
							{
							pushFollow(FOLLOW_case_when_part_in_case_statement20287);
							parts=case_when_part();
							state._fsp--;

							if (list_parts==null) list_parts=new ArrayList<Object>();
							list_parts.add(parts.getTemplate());
							}
							break;

						default :
							if ( cnt424 >= 1 ) break loop424;
							EarlyExitException eee = new EarlyExitException(424, input);
							throw eee;
						}
						cnt424++;
					}

					// PLSQLPrinter.g:1956:49: ( case_else_part )?
					int alt425=2;
					int LA425_0 = input.LA(1);
					if ( (LA425_0==SQL92_RESERVED_ELSE) ) {
						alt425=1;
					}
					switch (alt425) {
						case 1 :
							// PLSQLPrinter.g:1956:49: case_else_part
							{
							pushFollow(FOLLOW_case_else_part_in_case_statement20290);
							case_else_part356=case_else_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1957:5: -> case_statement_searched(case_when_parts=$partscase_else_part=$case_else_part.st)
					{
						retval.st = templateLib.getInstanceOf("case_statement_searched",new STAttrMap().put("case_when_parts", list_parts).put("case_else_part", (case_else_part356!=null?((StringTemplate)case_else_part356.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_statement"


	public static class case_when_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "case_when_part"
	// PLSQLPrinter.g:1962:1: case_when_part : ^( SQL92_RESERVED_WHEN condition= expression ( seq_of_statements -> case_when_part_statements(condition=$condition.stseq_of_statements=$seq_of_statements.st)|then_expr= expression -> case_when_part_expression(condition=$condition.stexpression=$then_expr.st)) ) ;
	public final PLSQLPrinter.case_when_part_return case_when_part() throws RecognitionException {
		PLSQLPrinter.case_when_part_return retval = new PLSQLPrinter.case_when_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope condition =null;
		TreeRuleReturnScope then_expr =null;
		TreeRuleReturnScope seq_of_statements357 =null;

		try {
			// PLSQLPrinter.g:1963:5: ( ^( SQL92_RESERVED_WHEN condition= expression ( seq_of_statements -> case_when_part_statements(condition=$condition.stseq_of_statements=$seq_of_statements.st)|then_expr= expression -> case_when_part_expression(condition=$condition.stexpression=$then_expr.st)) ) )
			// PLSQLPrinter.g:1963:10: ^( SQL92_RESERVED_WHEN condition= expression ( seq_of_statements -> case_when_part_statements(condition=$condition.stseq_of_statements=$seq_of_statements.st)|then_expr= expression -> case_when_part_expression(condition=$condition.stexpression=$then_expr.st)) )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_case_when_part20336); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_case_when_part20340);
			condition=expression();
			state._fsp--;

			// PLSQLPrinter.g:1964:13: ( seq_of_statements -> case_when_part_statements(condition=$condition.stseq_of_statements=$seq_of_statements.st)|then_expr= expression -> case_when_part_expression(condition=$condition.stexpression=$then_expr.st))
			int alt427=2;
			int LA427_0 = input.LA(1);
			if ( (LA427_0==STATEMENTS) ) {
				alt427=1;
			}
			else if ( (LA427_0==EXPR||LA427_0==LOGIC_EXPR) ) {
				alt427=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 427, 0, input);
				throw nvae;
			}

			switch (alt427) {
				case 1 :
					// PLSQLPrinter.g:1965:15: seq_of_statements
					{
					pushFollow(FOLLOW_seq_of_statements_in_case_when_part20370);
					seq_of_statements357=seq_of_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1965:33: -> case_when_part_statements(condition=$condition.stseq_of_statements=$seq_of_statements.st)
					{
						retval.st = templateLib.getInstanceOf("case_when_part_statements",new STAttrMap().put("condition", (condition!=null?((StringTemplate)condition.getTemplate()):null)).put("seq_of_statements", (seq_of_statements357!=null?((StringTemplate)seq_of_statements357.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1966:17: then_expr= expression
					{
					pushFollow(FOLLOW_expression_in_case_when_part20404);
					then_expr=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1966:38: -> case_when_part_expression(condition=$condition.stexpression=$then_expr.st)
					{
						retval.st = templateLib.getInstanceOf("case_when_part_expression",new STAttrMap().put("condition", (condition!=null?((StringTemplate)condition.getTemplate()):null)).put("expression", (then_expr!=null?((StringTemplate)then_expr.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_when_part"


	public static class case_else_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "case_else_part"
	// PLSQLPrinter.g:1971:1: case_else_part : ^( SQL92_RESERVED_ELSE ( seq_of_statements -> case_else_part_statements(seq_of_statements=$seq_of_statements.st)| expression -> case_else_part_expression(expression=$expression.st)) ) ;
	public final PLSQLPrinter.case_else_part_return case_else_part() throws RecognitionException {
		PLSQLPrinter.case_else_part_return retval = new PLSQLPrinter.case_else_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope seq_of_statements358 =null;
		TreeRuleReturnScope expression359 =null;

		try {
			// PLSQLPrinter.g:1972:5: ( ^( SQL92_RESERVED_ELSE ( seq_of_statements -> case_else_part_statements(seq_of_statements=$seq_of_statements.st)| expression -> case_else_part_expression(expression=$expression.st)) ) )
			// PLSQLPrinter.g:1972:10: ^( SQL92_RESERVED_ELSE ( seq_of_statements -> case_else_part_statements(seq_of_statements=$seq_of_statements.st)| expression -> case_else_part_expression(expression=$expression.st)) )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_case_else_part20465); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1973:13: ( seq_of_statements -> case_else_part_statements(seq_of_statements=$seq_of_statements.st)| expression -> case_else_part_expression(expression=$expression.st))
			int alt428=2;
			int LA428_0 = input.LA(1);
			if ( (LA428_0==STATEMENTS) ) {
				alt428=1;
			}
			else if ( (LA428_0==EXPR||LA428_0==LOGIC_EXPR) ) {
				alt428=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 428, 0, input);
				throw nvae;
			}

			switch (alt428) {
				case 1 :
					// PLSQLPrinter.g:1974:15: seq_of_statements
					{
					pushFollow(FOLLOW_seq_of_statements_in_case_else_part20495);
					seq_of_statements358=seq_of_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1974:33: -> case_else_part_statements(seq_of_statements=$seq_of_statements.st)
					{
						retval.st = templateLib.getInstanceOf("case_else_part_statements",new STAttrMap().put("seq_of_statements", (seq_of_statements358!=null?((StringTemplate)seq_of_statements358.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1975:17: expression
					{
					pushFollow(FOLLOW_expression_in_case_else_part20522);
					expression359=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1975:28: -> case_else_part_expression(expression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("case_else_part_expression",new STAttrMap().put("expression", (expression359!=null?((StringTemplate)expression359.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_else_part"


	public static class standard_function_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "standard_function"
	// PLSQLPrinter.g:1981:1: standard_function : ( ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? ) -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)| ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( COUNT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | expression ) ( over_clause )? ) -> standard_function_count(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullexpression=$expression.stover_clause=$over_clause.st)| ^( XMLCAST_VK expression type_spec ) -> standard_function_xmlcast(expression=$expression.sttype_spec=$type_spec.st)| ^( CAST_VK (s_or_e= subquery |s_or_e= expression ) type_spec ) -> standard_function_cast(subquery_or_expression=$s_or_e.sttype_spec=$type_spec.st)| ^( CHR_VK expression NCHAR_CS_VK ) -> template( \"not implemented: standard_function\"| ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? ) -> template( \"not implemented: standard_function\"| ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause -> standard_function_enabling_within(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stwithin_clause=$within_clause.st)| over_clause -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)) ) | ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? ) -> template( \"not implemented: standard_function\"| ^( EXTRACT_VK extract_part expression ) -> standard_function_extract(part=$extract_part.stexpression=$expression.st)| ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause ) -> template( \"not implemented: standard_function\"| ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( TRANSLATE_VK expr= expression expr_from= expression expr_to= expression ) -> standard_function_translate(expr=$expr.stexpr_from=$expr_from.stexpr_to=$expr_to.st)| ^( TREAT_VK expression ( REF_VK )? type_spec ) -> template( \"not implemented: standard_function\"| ^( TRIM_VK text_expr= expression_element (trim_char_expr= expression_element ( LEADING_VK | TRAILING_VK | BOTH_VK )? )? ) -> standard_function_trim(text_expr=$text_expr.sttrim_char_expr=$trim_char_expr.sttrim_kind=trimKind)| ^( XMLAGG_VK expression ( order_by_clause )? ) -> xmlagg(expression=$expression.storder_by_clause=$order_by_clause.st)| ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ ) -> template( \"not implemented: standard_function\"| ^( XMLEXISTS_VK expression ( xml_passing_clause )? ) -> template( \"not implemented: standard_function\"| ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? ) -> xml_parse(is_document=$DOCUMENT_VK != nullis_content=$CONTENT_VK != nullexpression=$expression.stis_wellformed=$WELLFORMED_VK != null)| ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? ) -> template( \"not implemented: standard_function\"| ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? ) -> xmlroot(expression=$expression.stxml_param_version_part=$xml_param_version_part.stxmlroot_param_standalone_part=$xmlroot_param_standalone_part.st)| ^( XMLTABLE_VK ( xml_namespaces_clause )? expr= expression ( xml_passing_clause )? (xml_table_columns+= xml_table_column )* ) -> xmltable(xml_namespaces_clause=$xml_namespaces_clause.stxquery_expression=$expr.stxml_passing_clause=$xml_passing_clause.stxml_table_columns=$xml_table_columns)| ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? (value_exprs+= xmlelement_value_expr )* ) -> xmlelement(is_entity_escaping=$ENTITYESCAPING_VK != nullis_no_entity_escaping=$NOENTITYESCAPING_VK != nullis_name=$NAME_VK != nullis_evalname=$EVALNAME_VK != nullexpression=$expression.stxml_attributes_clause=$xml_attributes_clause.stvalue_expressions=$value_exprs)| ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? ) -> template( \"not implemented: standard_function\"| ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? ) -> template( \"not implemented: standard_function\");
	public final PLSQLPrinter.standard_function_return standard_function() throws RecognitionException {
		PLSQLPrinter.standard_function_return retval = new PLSQLPrinter.standard_function_return();
		retval.start = input.LT(1);

		CommonTree FUNCTION_ENABLING_OVER360=null;
		CommonTree SQL92_RESERVED_DISTINCT363=null;
		CommonTree SQL92_RESERVED_UNIQUE364=null;
		CommonTree SQL92_RESERVED_ALL365=null;
		CommonTree ASTERISK366=null;
		CommonTree FUNCTION_ENABLING_WITHIN_OR_OVER372=null;
		CommonTree DOCUMENT_VK380=null;
		CommonTree CONTENT_VK381=null;
		CommonTree WELLFORMED_VK383=null;
		CommonTree ENTITYESCAPING_VK389=null;
		CommonTree NOENTITYESCAPING_VK390=null;
		CommonTree NAME_VK391=null;
		CommonTree EVALNAME_VK392=null;
		List<Object> list_xml_table_columns=null;
		List<Object> list_value_exprs=null;
		TreeRuleReturnScope s_or_e =null;
		TreeRuleReturnScope expr =null;
		TreeRuleReturnScope expr_from =null;
		TreeRuleReturnScope expr_to =null;
		TreeRuleReturnScope text_expr =null;
		TreeRuleReturnScope trim_char_expr =null;
		TreeRuleReturnScope function_argument361 =null;
		TreeRuleReturnScope over_clause362 =null;
		TreeRuleReturnScope expression367 =null;
		TreeRuleReturnScope over_clause368 =null;
		TreeRuleReturnScope expression369 =null;
		TreeRuleReturnScope type_spec370 =null;
		TreeRuleReturnScope type_spec371 =null;
		TreeRuleReturnScope function_argument373 =null;
		TreeRuleReturnScope within_clause374 =null;
		TreeRuleReturnScope over_clause375 =null;
		TreeRuleReturnScope extract_part376 =null;
		TreeRuleReturnScope expression377 =null;
		TreeRuleReturnScope expression378 =null;
		TreeRuleReturnScope order_by_clause379 =null;
		TreeRuleReturnScope expression382 =null;
		TreeRuleReturnScope expression384 =null;
		TreeRuleReturnScope xml_param_version_part385 =null;
		TreeRuleReturnScope xmlroot_param_standalone_part386 =null;
		TreeRuleReturnScope xml_namespaces_clause387 =null;
		TreeRuleReturnScope xml_passing_clause388 =null;
		TreeRuleReturnScope expression393 =null;
		TreeRuleReturnScope xml_attributes_clause394 =null;
		RuleReturnScope xml_table_columns = null;
		RuleReturnScope value_exprs = null;
		 StringTemplate trimKind = null; 
		try {
			// PLSQLPrinter.g:1983:5: ( ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? ) -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)| ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( COUNT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | expression ) ( over_clause )? ) -> standard_function_count(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullexpression=$expression.stover_clause=$over_clause.st)| ^( XMLCAST_VK expression type_spec ) -> standard_function_xmlcast(expression=$expression.sttype_spec=$type_spec.st)| ^( CAST_VK (s_or_e= subquery |s_or_e= expression ) type_spec ) -> standard_function_cast(subquery_or_expression=$s_or_e.sttype_spec=$type_spec.st)| ^( CHR_VK expression NCHAR_CS_VK ) -> template( \"not implemented: standard_function\"| ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? ) -> template( \"not implemented: standard_function\"| ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause -> standard_function_enabling_within(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stwithin_clause=$within_clause.st)| over_clause -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)) ) | ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? ) -> template( \"not implemented: standard_function\"| ^( EXTRACT_VK extract_part expression ) -> standard_function_extract(part=$extract_part.stexpression=$expression.st)| ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause ) -> template( \"not implemented: standard_function\"| ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( TRANSLATE_VK expr= expression expr_from= expression expr_to= expression ) -> standard_function_translate(expr=$expr.stexpr_from=$expr_from.stexpr_to=$expr_to.st)| ^( TREAT_VK expression ( REF_VK )? type_spec ) -> template( \"not implemented: standard_function\"| ^( TRIM_VK text_expr= expression_element (trim_char_expr= expression_element ( LEADING_VK | TRAILING_VK | BOTH_VK )? )? ) -> standard_function_trim(text_expr=$text_expr.sttrim_char_expr=$trim_char_expr.sttrim_kind=trimKind)| ^( XMLAGG_VK expression ( order_by_clause )? ) -> xmlagg(expression=$expression.storder_by_clause=$order_by_clause.st)| ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ ) -> template( \"not implemented: standard_function\"| ^( XMLEXISTS_VK expression ( xml_passing_clause )? ) -> template( \"not implemented: standard_function\"| ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? ) -> xml_parse(is_document=$DOCUMENT_VK != nullis_content=$CONTENT_VK != nullexpression=$expression.stis_wellformed=$WELLFORMED_VK != null)| ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? ) -> template( \"not implemented: standard_function\"| ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? ) -> xmlroot(expression=$expression.stxml_param_version_part=$xml_param_version_part.stxmlroot_param_standalone_part=$xmlroot_param_standalone_part.st)| ^( XMLTABLE_VK ( xml_namespaces_clause )? expr= expression ( xml_passing_clause )? (xml_table_columns+= xml_table_column )* ) -> xmltable(xml_namespaces_clause=$xml_namespaces_clause.stxquery_expression=$expr.stxml_passing_clause=$xml_passing_clause.stxml_table_columns=$xml_table_columns)| ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? (value_exprs+= xmlelement_value_expr )* ) -> xmlelement(is_entity_escaping=$ENTITYESCAPING_VK != nullis_no_entity_escaping=$NOENTITYESCAPING_VK != nullis_name=$NAME_VK != nullis_evalname=$EVALNAME_VK != nullexpression=$expression.stxml_attributes_clause=$xml_attributes_clause.stvalue_expressions=$value_exprs)| ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? ) -> template( \"not implemented: standard_function\"| ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? ) -> template( \"not implemented: standard_function\")
			int alt473=25;
			switch ( input.LA(1) ) {
			case FUNCTION_ENABLING_OVER:
				{
				alt473=1;
				}
				break;
			case FUNCTION_ENABLING_USING:
				{
				alt473=2;
				}
				break;
			case COUNT_VK:
				{
				alt473=3;
				}
				break;
			case XMLCAST_VK:
				{
				alt473=4;
				}
				break;
			case CAST_VK:
				{
				alt473=5;
				}
				break;
			case CHR_VK:
				{
				alt473=6;
				}
				break;
			case COLLECT_VK:
				{
				alt473=7;
				}
				break;
			case FUNCTION_ENABLING_WITHIN_OR_OVER:
				{
				alt473=8;
				}
				break;
			case DECOMPOSE_VK:
				{
				alt473=9;
				}
				break;
			case EXTRACT_VK:
				{
				alt473=10;
				}
				break;
			case FIRST_VALUE_VK:
			case LAST_VALUE_VK:
				{
				alt473=11;
				}
				break;
			case PREDICTION_FUNCTION:
				{
				alt473=12;
				}
				break;
			case TRANSLATE_VK:
				{
				alt473=13;
				}
				break;
			case TREAT_VK:
				{
				alt473=14;
				}
				break;
			case TRIM_VK:
				{
				alt473=15;
				}
				break;
			case XMLAGG_VK:
				{
				alt473=16;
				}
				break;
			case XMLCOLATTVAL_VK:
			case XMLFOREST_VK:
				{
				alt473=17;
				}
				break;
			case XMLEXISTS_VK:
				{
				alt473=18;
				}
				break;
			case XMLPARSE_VK:
				{
				alt473=19;
				}
				break;
			case XMLQUERY_VK:
				{
				alt473=20;
				}
				break;
			case XMLROOT_VK:
				{
				alt473=21;
				}
				break;
			case XMLTABLE_VK:
				{
				alt473=22;
				}
				break;
			case XMLELEMENT_VK:
				{
				alt473=23;
				}
				break;
			case XMLPI_VK:
				{
				alt473=24;
				}
				break;
			case XMLSERIALIZE_VK:
				{
				alt473=25;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 473, 0, input);
				throw nvae;
			}
			switch (alt473) {
				case 1 :
					// PLSQLPrinter.g:1983:10: ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? )
					{
					FUNCTION_ENABLING_OVER360=(CommonTree)match(input,FUNCTION_ENABLING_OVER,FOLLOW_FUNCTION_ENABLING_OVER_in_standard_function20584); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function20586);
					function_argument361=function_argument();
					state._fsp--;

					// PLSQLPrinter.g:1983:53: ( over_clause )?
					int alt429=2;
					int LA429_0 = input.LA(1);
					if ( (LA429_0==OVER_VK) ) {
						alt429=1;
					}
					switch (alt429) {
						case 1 :
							// PLSQLPrinter.g:1983:53: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function20588);
							over_clause362=over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1984:5: -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)
					{
						retval.st = templateLib.getInstanceOf("standard_function_enabling_over",new STAttrMap().put("function_name", (FUNCTION_ENABLING_OVER360!=null?FUNCTION_ENABLING_OVER360.getText():null)).put("function_arguments", (function_argument361!=null?((StringTemplate)function_argument361.getTemplate()):null)).put("over_clause", (over_clause362!=null?((StringTemplate)over_clause362.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1986:10: ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? )
					{
					match(input,FUNCTION_ENABLING_USING,FOLLOW_FUNCTION_ENABLING_USING_in_standard_function20638); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function20640);
					function_argument();
					state._fsp--;

					// PLSQLPrinter.g:1986:54: ( using_clause )?
					int alt430=2;
					int LA430_0 = input.LA(1);
					if ( (LA430_0==PLSQL_NON_RESERVED_USING) ) {
						alt430=1;
					}
					switch (alt430) {
						case 1 :
							// PLSQLPrinter.g:1986:54: using_clause
							{
							pushFollow(FOLLOW_using_clause_in_standard_function20642);
							using_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1987:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1988:10: ^( COUNT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | expression ) ( over_clause )? )
					{
					match(input,COUNT_VK,FOLLOW_COUNT_VK_in_standard_function20670); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1988:21: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )?
					int alt431=4;
					switch ( input.LA(1) ) {
						case SQL92_RESERVED_DISTINCT:
							{
							alt431=1;
							}
							break;
						case SQL92_RESERVED_UNIQUE:
							{
							alt431=2;
							}
							break;
						case SQL92_RESERVED_ALL:
							{
							alt431=3;
							}
							break;
					}
					switch (alt431) {
						case 1 :
							// PLSQLPrinter.g:1988:22: SQL92_RESERVED_DISTINCT
							{
							SQL92_RESERVED_DISTINCT363=(CommonTree)match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function20673); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1988:46: SQL92_RESERVED_UNIQUE
							{
							SQL92_RESERVED_UNIQUE364=(CommonTree)match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function20675); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1988:68: SQL92_RESERVED_ALL
							{
							SQL92_RESERVED_ALL365=(CommonTree)match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_standard_function20677); 
							}
							break;

					}

					// PLSQLPrinter.g:1988:89: ( ASTERISK | expression )
					int alt432=2;
					int LA432_0 = input.LA(1);
					if ( (LA432_0==ASTERISK) ) {
						alt432=1;
					}
					else if ( (LA432_0==EXPR||LA432_0==LOGIC_EXPR) ) {
						alt432=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 432, 0, input);
						throw nvae;
					}

					switch (alt432) {
						case 1 :
							// PLSQLPrinter.g:1988:91: ASTERISK
							{
							ASTERISK366=(CommonTree)match(input,ASTERISK,FOLLOW_ASTERISK_in_standard_function20683); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1988:102: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function20687);
							expression367=expression();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1988:115: ( over_clause )?
					int alt433=2;
					int LA433_0 = input.LA(1);
					if ( (LA433_0==OVER_VK) ) {
						alt433=1;
					}
					switch (alt433) {
						case 1 :
							// PLSQLPrinter.g:1988:115: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function20691);
							over_clause368=over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1989:5: -> standard_function_count(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullexpression=$expression.stover_clause=$over_clause.st)
					{
						retval.st = templateLib.getInstanceOf("standard_function_count",new STAttrMap().put("is_distinct", SQL92_RESERVED_DISTINCT363 != null).put("is_unique", SQL92_RESERVED_UNIQUE364 != null).put("is_all", SQL92_RESERVED_ALL365 != null).put("is_asterisk", ASTERISK366 != null).put("expression", (expression367!=null?((StringTemplate)expression367.getTemplate()):null)).put("over_clause", (over_clause368!=null?((StringTemplate)over_clause368.getTemplate()):null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1993:10: ^( XMLCAST_VK expression type_spec )
					{
					match(input,XMLCAST_VK,FOLLOW_XMLCAST_VK_in_standard_function20782); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function20784);
					expression369=expression();
					state._fsp--;

					pushFollow(FOLLOW_type_spec_in_standard_function20786);
					type_spec370=type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1994:5: -> standard_function_xmlcast(expression=$expression.sttype_spec=$type_spec.st)
					{
						retval.st = templateLib.getInstanceOf("standard_function_xmlcast",new STAttrMap().put("expression", (expression369!=null?((StringTemplate)expression369.getTemplate()):null)).put("type_spec", (type_spec370!=null?((StringTemplate)type_spec370.getTemplate()):null)));
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1995:10: ^( CAST_VK (s_or_e= subquery |s_or_e= expression ) type_spec )
					{
					match(input,CAST_VK,FOLLOW_CAST_VK_in_standard_function20819); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1995:20: (s_or_e= subquery |s_or_e= expression )
					int alt434=2;
					int LA434_0 = input.LA(1);
					if ( (LA434_0==SUBQUERY) ) {
						alt434=1;
					}
					else if ( (LA434_0==EXPR||LA434_0==LOGIC_EXPR) ) {
						alt434=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 434, 0, input);
						throw nvae;
					}

					switch (alt434) {
						case 1 :
							// PLSQLPrinter.g:1995:21: s_or_e= subquery
							{
							pushFollow(FOLLOW_subquery_in_standard_function20824);
							s_or_e=subquery();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1995:37: s_or_e= expression
							{
							pushFollow(FOLLOW_expression_in_standard_function20828);
							s_or_e=expression();
							state._fsp--;

							}
							break;

					}

					pushFollow(FOLLOW_type_spec_in_standard_function20831);
					type_spec371=type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1996:5: -> standard_function_cast(subquery_or_expression=$s_or_e.sttype_spec=$type_spec.st)
					{
						retval.st = templateLib.getInstanceOf("standard_function_cast",new STAttrMap().put("subquery_or_expression", (s_or_e!=null?((StringTemplate)s_or_e.getTemplate()):null)).put("type_spec", (type_spec371!=null?((StringTemplate)type_spec371.getTemplate()):null)));
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:1997:10: ^( CHR_VK expression NCHAR_CS_VK )
					{
					match(input,CHR_VK,FOLLOW_CHR_VK_in_standard_function20864); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function20866);
					expression();
					state._fsp--;

					match(input,NCHAR_CS_VK,FOLLOW_NCHAR_CS_VK_in_standard_function20868); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1998:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:1999:10: ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? )
					{
					match(input,COLLECT_VK,FOLLOW_COLLECT_VK_in_standard_function20895); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1999:23: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )?
					int alt435=3;
					int LA435_0 = input.LA(1);
					if ( (LA435_0==SQL92_RESERVED_DISTINCT) ) {
						alt435=1;
					}
					else if ( (LA435_0==SQL92_RESERVED_UNIQUE) ) {
						alt435=2;
					}
					switch (alt435) {
						case 1 :
							// PLSQLPrinter.g:1999:24: SQL92_RESERVED_DISTINCT
							{
							match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function20898); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1999:48: SQL92_RESERVED_UNIQUE
							{
							match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function20900); 
							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_standard_function20904);
					column_name();
					state._fsp--;

					// PLSQLPrinter.g:1999:84: ( collect_order_by_part )?
					int alt436=2;
					int LA436_0 = input.LA(1);
					if ( (LA436_0==SQL92_RESERVED_ORDER) ) {
						alt436=1;
					}
					switch (alt436) {
						case 1 :
							// PLSQLPrinter.g:1999:84: collect_order_by_part
							{
							pushFollow(FOLLOW_collect_order_by_part_in_standard_function20906);
							collect_order_by_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2000:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:2001:10: ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause -> standard_function_enabling_within(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stwithin_clause=$within_clause.st)| over_clause -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)) )
					{
					FUNCTION_ENABLING_WITHIN_OR_OVER372=(CommonTree)match(input,FUNCTION_ENABLING_WITHIN_OR_OVER,FOLLOW_FUNCTION_ENABLING_WITHIN_OR_OVER_in_standard_function20934); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function20948);
					function_argument373=function_argument();
					state._fsp--;

					// PLSQLPrinter.g:2003:13: ( within_clause -> standard_function_enabling_within(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stwithin_clause=$within_clause.st)| over_clause -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st))
					int alt437=2;
					int LA437_0 = input.LA(1);
					if ( (LA437_0==WITHIN_VK) ) {
						alt437=1;
					}
					else if ( (LA437_0==OVER_VK) ) {
						alt437=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 437, 0, input);
						throw nvae;
					}

					switch (alt437) {
						case 1 :
							// PLSQLPrinter.g:2004:15: within_clause
							{
							pushFollow(FOLLOW_within_clause_in_standard_function20978);
							within_clause374=within_clause();
							state._fsp--;

							// TEMPLATE REWRITE
							// 2005:15: -> standard_function_enabling_within(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stwithin_clause=$within_clause.st)
							{
								retval.st = templateLib.getInstanceOf("standard_function_enabling_within",new STAttrMap().put("function_name", (FUNCTION_ENABLING_WITHIN_OR_OVER372!=null?FUNCTION_ENABLING_WITHIN_OR_OVER372.getText():null)).put("function_arguments", (function_argument373!=null?((StringTemplate)function_argument373.getTemplate()):null)).put("within_clause", (within_clause374!=null?((StringTemplate)within_clause374.getTemplate()):null)));
							}



							}
							break;
						case 2 :
							// PLSQLPrinter.g:2008:17: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function21066);
							over_clause375=over_clause();
							state._fsp--;

							// TEMPLATE REWRITE
							// 2009:15: -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)
							{
								retval.st = templateLib.getInstanceOf("standard_function_enabling_over",new STAttrMap().put("function_name", (FUNCTION_ENABLING_WITHIN_OR_OVER372!=null?FUNCTION_ENABLING_WITHIN_OR_OVER372.getText():null)).put("function_arguments", (function_argument373!=null?((StringTemplate)function_argument373.getTemplate()):null)).put("over_clause", (over_clause375!=null?((StringTemplate)over_clause375.getTemplate()):null)));
							}



							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 9 :
					// PLSQLPrinter.g:2014:10: ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? )
					{
					match(input,DECOMPOSE_VK,FOLLOW_DECOMPOSE_VK_in_standard_function21175); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function21177);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:2014:36: ( CANONICAL_VK | COMPATIBILITY_VK )?
					int alt438=3;
					int LA438_0 = input.LA(1);
					if ( (LA438_0==CANONICAL_VK) ) {
						alt438=1;
					}
					else if ( (LA438_0==COMPATIBILITY_VK) ) {
						alt438=2;
					}
					switch (alt438) {
						case 1 :
							// PLSQLPrinter.g:2014:37: CANONICAL_VK
							{
							match(input,CANONICAL_VK,FOLLOW_CANONICAL_VK_in_standard_function21180); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2014:50: COMPATIBILITY_VK
							{
							match(input,COMPATIBILITY_VK,FOLLOW_COMPATIBILITY_VK_in_standard_function21182); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2015:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:2016:10: ^( EXTRACT_VK extract_part expression )
					{
					match(input,EXTRACT_VK,FOLLOW_EXTRACT_VK_in_standard_function21212); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_extract_part_in_standard_function21214);
					extract_part376=extract_part();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_standard_function21216);
					expression377=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2017:5: -> standard_function_extract(part=$extract_part.stexpression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("standard_function_extract",new STAttrMap().put("part", (extract_part376!=null?((StringTemplate)extract_part376.getTemplate()):null)).put("expression", (expression377!=null?((StringTemplate)expression377.getTemplate()):null)));
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:2018:10: ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause )
					{
					// PLSQLPrinter.g:2018:12: ( FIRST_VALUE_VK | LAST_VALUE_VK )
					int alt439=2;
					int LA439_0 = input.LA(1);
					if ( (LA439_0==FIRST_VALUE_VK) ) {
						alt439=1;
					}
					else if ( (LA439_0==LAST_VALUE_VK) ) {
						alt439=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 439, 0, input);
						throw nvae;
					}

					switch (alt439) {
						case 1 :
							// PLSQLPrinter.g:2018:13: FIRST_VALUE_VK
							{
							match(input,FIRST_VALUE_VK,FOLLOW_FIRST_VALUE_VK_in_standard_function21250); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2018:28: LAST_VALUE_VK
							{
							match(input,LAST_VALUE_VK,FOLLOW_LAST_VALUE_VK_in_standard_function21252); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function21255);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:2018:54: ( NULLS_VK )?
					int alt440=2;
					int LA440_0 = input.LA(1);
					if ( (LA440_0==NULLS_VK) ) {
						alt440=1;
					}
					switch (alt440) {
						case 1 :
							// PLSQLPrinter.g:2018:54: NULLS_VK
							{
							match(input,NULLS_VK,FOLLOW_NULLS_VK_in_standard_function21257); 
							}
							break;

					}

					pushFollow(FOLLOW_over_clause_in_standard_function21260);
					over_clause();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2019:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:2020:10: ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? )
					{
					match(input,PREDICTION_FUNCTION,FOLLOW_PREDICTION_FUNCTION_in_standard_function21288); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2020:32: ( expression )+
					int cnt441=0;
					loop441:
					while (true) {
						int alt441=2;
						int LA441_0 = input.LA(1);
						if ( (LA441_0==EXPR||LA441_0==LOGIC_EXPR) ) {
							alt441=1;
						}

						switch (alt441) {
						case 1 :
							// PLSQLPrinter.g:2020:32: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function21290);
							expression();
							state._fsp--;

							}
							break;

						default :
							if ( cnt441 >= 1 ) break loop441;
							EarlyExitException eee = new EarlyExitException(441, input);
							throw eee;
						}
						cnt441++;
					}

					// PLSQLPrinter.g:2020:44: ( cost_matrix_clause )?
					int alt442=2;
					int LA442_0 = input.LA(1);
					if ( (LA442_0==COST_VK) ) {
						alt442=1;
					}
					switch (alt442) {
						case 1 :
							// PLSQLPrinter.g:2020:44: cost_matrix_clause
							{
							pushFollow(FOLLOW_cost_matrix_clause_in_standard_function21293);
							cost_matrix_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2020:64: ( using_clause )?
					int alt443=2;
					int LA443_0 = input.LA(1);
					if ( (LA443_0==PLSQL_NON_RESERVED_USING) ) {
						alt443=1;
					}
					switch (alt443) {
						case 1 :
							// PLSQLPrinter.g:2020:64: using_clause
							{
							pushFollow(FOLLOW_using_clause_in_standard_function21296);
							using_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2021:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:2022:10: ^( TRANSLATE_VK expr= expression expr_from= expression expr_to= expression )
					{
					match(input,TRANSLATE_VK,FOLLOW_TRANSLATE_VK_in_standard_function21324); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function21330);
					expr=expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_standard_function21334);
					expr_from=expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_standard_function21338);
					expr_to=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2023:5: -> standard_function_translate(expr=$expr.stexpr_from=$expr_from.stexpr_to=$expr_to.st)
					{
						retval.st = templateLib.getInstanceOf("standard_function_translate",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("expr_from", (expr_from!=null?((StringTemplate)expr_from.getTemplate()):null)).put("expr_to", (expr_to!=null?((StringTemplate)expr_to.getTemplate()):null)));
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:2024:10: ^( TREAT_VK expression ( REF_VK )? type_spec )
					{
					match(input,TREAT_VK,FOLLOW_TREAT_VK_in_standard_function21376); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function21378);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:2024:32: ( REF_VK )?
					int alt444=2;
					int LA444_0 = input.LA(1);
					if ( (LA444_0==REF_VK) ) {
						alt444=1;
					}
					switch (alt444) {
						case 1 :
							// PLSQLPrinter.g:2024:32: REF_VK
							{
							match(input,REF_VK,FOLLOW_REF_VK_in_standard_function21380); 
							}
							break;

					}

					pushFollow(FOLLOW_type_spec_in_standard_function21383);
					type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2025:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:2026:10: ^( TRIM_VK text_expr= expression_element (trim_char_expr= expression_element ( LEADING_VK | TRAILING_VK | BOTH_VK )? )? )
					{
					match(input,TRIM_VK,FOLLOW_TRIM_VK_in_standard_function21410); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_standard_function21426);
					text_expr=expression_element();
					state._fsp--;

					// PLSQLPrinter.g:2028:13: (trim_char_expr= expression_element ( LEADING_VK | TRAILING_VK | BOTH_VK )? )?
					int alt446=2;
					int LA446_0 = input.LA(1);
					if ( (LA446_0==APPROXIMATE_NUM_LIT||LA446_0==ASTERISK||LA446_0==CHAR_STRING||LA446_0==CONCATENATION_OP||(LA446_0 >= EQUALS_OP && LA446_0 <= EXACT_NUM_LIT)||(LA446_0 >= GREATER_THAN_OP && LA446_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA446_0 >= LESS_THAN_OP && LA446_0 <= LESS_THAN_OR_EQUALS_OP)||LA446_0==MINUS_SIGN||LA446_0==NOT_EQUAL_OP||LA446_0==PERCENT||LA446_0==PLUS_SIGN||LA446_0==SOLIDUS||LA446_0==SQL92_RESERVED_ALL||(LA446_0 >= SQL92_RESERVED_AND && LA446_0 <= SQL92_RESERVED_ANY)||LA446_0==SQL92_RESERVED_BETWEEN||LA446_0==SQL92_RESERVED_DEFAULT||LA446_0==SQL92_RESERVED_DISTINCT||(LA446_0 >= SQL92_RESERVED_EXISTS && LA446_0 <= SQL92_RESERVED_FALSE)||LA446_0==SQL92_RESERVED_IN||(LA446_0 >= SQL92_RESERVED_LIKE && LA446_0 <= SQL92_RESERVED_NULL)||LA446_0==SQL92_RESERVED_OR||LA446_0==SQL92_RESERVED_PRIOR||LA446_0==SQL92_RESERVED_TRUE||LA446_0==UNSIGNED_INTEGER||LA446_0==CASCATED_ELEMENT||LA446_0==DATETIME_OP||LA446_0==DBTIMEZONE_VK||LA446_0==DIV_VK||LA446_0==DOT_ASTERISK||LA446_0==HOSTED_VARIABLE_NAME||(LA446_0 >= IS_A_SET && LA446_0 <= IS_PRESENT)||LA446_0==KEEP_VK||(LA446_0 >= LIKE2_VK && LA446_0 <= LIKEC_VK)||LA446_0==MAXVALUE_VK||LA446_0==MEMBER_VK||LA446_0==MINVALUE_VK||LA446_0==MODEL_EXPRESSION||LA446_0==MOD_VK||LA446_0==NEW_VK||LA446_0==NOT_BETWEEN||(LA446_0 >= NOT_IN && LA446_0 <= NOT_LIKE)||LA446_0==OUTER_JOIN_SIGN||(LA446_0 >= PERCENT_FOUND_VK && LA446_0 <= PERCENT_ROWCOUNT_VK)||LA446_0==PIPE_VK||LA446_0==SEARCHED_CASE||LA446_0==SESSIONTIMEZONE_VK||LA446_0==SIMPLE_CASE||LA446_0==SOME_VK||LA446_0==STANDARD_FUNCTION||LA446_0==SUBMULTISET_VK||LA446_0==SUBQUERY||LA446_0==UNARY_OPERATOR||LA446_0==VECTOR_EXPR) ) {
						alt446=1;
					}
					switch (alt446) {
						case 1 :
							// PLSQLPrinter.g:2029:15: trim_char_expr= expression_element ( LEADING_VK | TRAILING_VK | BOTH_VK )?
							{
							pushFollow(FOLLOW_expression_element_in_standard_function21458);
							trim_char_expr=expression_element();
							state._fsp--;

							// PLSQLPrinter.g:2030:15: ( LEADING_VK | TRAILING_VK | BOTH_VK )?
							int alt445=4;
							switch ( input.LA(1) ) {
								case LEADING_VK:
									{
									alt445=1;
									}
									break;
								case TRAILING_VK:
									{
									alt445=2;
									}
									break;
								case BOTH_VK:
									{
									alt445=3;
									}
									break;
							}
							switch (alt445) {
								case 1 :
									// PLSQLPrinter.g:2031:17: LEADING_VK
									{
									match(input,LEADING_VK,FOLLOW_LEADING_VK_in_standard_function21492); 
									 trimKind = templateLib.getInstanceOf("trim_kind_leading"); 
									}
									break;
								case 2 :
									// PLSQLPrinter.g:2032:19: TRAILING_VK
									{
									match(input,TRAILING_VK,FOLLOW_TRAILING_VK_in_standard_function21514); 
									 trimKind = templateLib.getInstanceOf("trim_kind_trailing"); 
									}
									break;
								case 3 :
									// PLSQLPrinter.g:2033:19: BOTH_VK
									{
									match(input,BOTH_VK,FOLLOW_BOTH_VK_in_standard_function21536); 
									 trimKind = templateLib.getInstanceOf("trim_kind_both"); 
									}
									break;

							}

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2037:5: -> standard_function_trim(text_expr=$text_expr.sttrim_char_expr=$trim_char_expr.sttrim_kind=trimKind)
					{
						retval.st = templateLib.getInstanceOf("standard_function_trim",new STAttrMap().put("text_expr", (text_expr!=null?((StringTemplate)text_expr.getTemplate()):null)).put("trim_char_expr", (trim_char_expr!=null?((StringTemplate)trim_char_expr.getTemplate()):null)).put("trim_kind", trimKind));
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:2039:10: ^( XMLAGG_VK expression ( order_by_clause )? )
					{
					match(input,XMLAGG_VK,FOLLOW_XMLAGG_VK_in_standard_function21621); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function21623);
					expression378=expression();
					state._fsp--;

					// PLSQLPrinter.g:2039:33: ( order_by_clause )?
					int alt447=2;
					int LA447_0 = input.LA(1);
					if ( (LA447_0==SQL92_RESERVED_ORDER) ) {
						alt447=1;
					}
					switch (alt447) {
						case 1 :
							// PLSQLPrinter.g:2039:33: order_by_clause
							{
							pushFollow(FOLLOW_order_by_clause_in_standard_function21625);
							order_by_clause379=order_by_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2040:5: -> xmlagg(expression=$expression.storder_by_clause=$order_by_clause.st)
					{
						retval.st = templateLib.getInstanceOf("xmlagg",new STAttrMap().put("expression", (expression378!=null?((StringTemplate)expression378.getTemplate()):null)).put("order_by_clause", (order_by_clause379!=null?((StringTemplate)order_by_clause379.getTemplate()):null)));
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:2041:10: ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ )
					{
					// PLSQLPrinter.g:2041:12: ( XMLCOLATTVAL_VK | XMLFOREST_VK )
					int alt448=2;
					int LA448_0 = input.LA(1);
					if ( (LA448_0==XMLCOLATTVAL_VK) ) {
						alt448=1;
					}
					else if ( (LA448_0==XMLFOREST_VK) ) {
						alt448=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 448, 0, input);
						throw nvae;
					}

					switch (alt448) {
						case 1 :
							// PLSQLPrinter.g:2041:13: XMLCOLATTVAL_VK
							{
							match(input,XMLCOLATTVAL_VK,FOLLOW_XMLCOLATTVAL_VK_in_standard_function21660); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2041:29: XMLFOREST_VK
							{
							match(input,XMLFOREST_VK,FOLLOW_XMLFOREST_VK_in_standard_function21662); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2041:43: ( xml_multiuse_expression_element )+
					int cnt449=0;
					loop449:
					while (true) {
						int alt449=2;
						int LA449_0 = input.LA(1);
						if ( (LA449_0==XML_ELEMENT) ) {
							alt449=1;
						}

						switch (alt449) {
						case 1 :
							// PLSQLPrinter.g:2041:43: xml_multiuse_expression_element
							{
							pushFollow(FOLLOW_xml_multiuse_expression_element_in_standard_function21665);
							xml_multiuse_expression_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt449 >= 1 ) break loop449;
							EarlyExitException eee = new EarlyExitException(449, input);
							throw eee;
						}
						cnt449++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2042:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:2043:10: ^( XMLEXISTS_VK expression ( xml_passing_clause )? )
					{
					match(input,XMLEXISTS_VK,FOLLOW_XMLEXISTS_VK_in_standard_function21693); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function21695);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:2043:36: ( xml_passing_clause )?
					int alt450=2;
					int LA450_0 = input.LA(1);
					if ( (LA450_0==PASSING_VK) ) {
						alt450=1;
					}
					switch (alt450) {
						case 1 :
							// PLSQLPrinter.g:2043:36: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function21697);
							xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2044:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 19 :
					// PLSQLPrinter.g:2045:10: ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? )
					{
					match(input,XMLPARSE_VK,FOLLOW_XMLPARSE_VK_in_standard_function21725); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2045:24: ( DOCUMENT_VK | CONTENT_VK )
					int alt451=2;
					int LA451_0 = input.LA(1);
					if ( (LA451_0==DOCUMENT_VK) ) {
						alt451=1;
					}
					else if ( (LA451_0==CONTENT_VK) ) {
						alt451=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 451, 0, input);
						throw nvae;
					}

					switch (alt451) {
						case 1 :
							// PLSQLPrinter.g:2045:25: DOCUMENT_VK
							{
							DOCUMENT_VK380=(CommonTree)match(input,DOCUMENT_VK,FOLLOW_DOCUMENT_VK_in_standard_function21728); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2045:37: CONTENT_VK
							{
							CONTENT_VK381=(CommonTree)match(input,CONTENT_VK,FOLLOW_CONTENT_VK_in_standard_function21730); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function21733);
					expression382=expression();
					state._fsp--;

					// PLSQLPrinter.g:2045:60: ( WELLFORMED_VK )?
					int alt452=2;
					int LA452_0 = input.LA(1);
					if ( (LA452_0==WELLFORMED_VK) ) {
						alt452=1;
					}
					switch (alt452) {
						case 1 :
							// PLSQLPrinter.g:2045:60: WELLFORMED_VK
							{
							WELLFORMED_VK383=(CommonTree)match(input,WELLFORMED_VK,FOLLOW_WELLFORMED_VK_in_standard_function21735); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2046:5: -> xml_parse(is_document=$DOCUMENT_VK != nullis_content=$CONTENT_VK != nullexpression=$expression.stis_wellformed=$WELLFORMED_VK != null)
					{
						retval.st = templateLib.getInstanceOf("xml_parse",new STAttrMap().put("is_document", DOCUMENT_VK380 != null).put("is_content", CONTENT_VK381 != null).put("expression", (expression382!=null?((StringTemplate)expression382.getTemplate()):null)).put("is_wellformed", WELLFORMED_VK383 != null));
					}



					}
					break;
				case 20 :
					// PLSQLPrinter.g:2049:10: ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? )
					{
					match(input,XMLQUERY_VK,FOLLOW_XMLQUERY_VK_in_standard_function21800); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function21802);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:2049:35: ( xml_passing_clause )?
					int alt453=2;
					int LA453_0 = input.LA(1);
					if ( (LA453_0==PASSING_VK) ) {
						alt453=1;
					}
					switch (alt453) {
						case 1 :
							// PLSQLPrinter.g:2049:35: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function21804);
							xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2049:55: ( SQL92_RESERVED_NULL )?
					int alt454=2;
					int LA454_0 = input.LA(1);
					if ( (LA454_0==SQL92_RESERVED_NULL) ) {
						alt454=1;
					}
					switch (alt454) {
						case 1 :
							// PLSQLPrinter.g:2049:55: SQL92_RESERVED_NULL
							{
							match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_standard_function21807); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2050:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 21 :
					// PLSQLPrinter.g:2051:10: ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? )
					{
					match(input,XMLROOT_VK,FOLLOW_XMLROOT_VK_in_standard_function21835); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function21837);
					expression384=expression();
					state._fsp--;

					pushFollow(FOLLOW_xml_param_version_part_in_standard_function21839);
					xml_param_version_part385=xml_param_version_part();
					state._fsp--;

					// PLSQLPrinter.g:2051:57: ( xmlroot_param_standalone_part )?
					int alt455=2;
					int LA455_0 = input.LA(1);
					if ( (LA455_0==STANDALONE_VK) ) {
						alt455=1;
					}
					switch (alt455) {
						case 1 :
							// PLSQLPrinter.g:2051:57: xmlroot_param_standalone_part
							{
							pushFollow(FOLLOW_xmlroot_param_standalone_part_in_standard_function21841);
							xmlroot_param_standalone_part386=xmlroot_param_standalone_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2052:5: -> xmlroot(expression=$expression.stxml_param_version_part=$xml_param_version_part.stxmlroot_param_standalone_part=$xmlroot_param_standalone_part.st)
					{
						retval.st = templateLib.getInstanceOf("xmlroot",new STAttrMap().put("expression", (expression384!=null?((StringTemplate)expression384.getTemplate()):null)).put("xml_param_version_part", (xml_param_version_part385!=null?((StringTemplate)xml_param_version_part385.getTemplate()):null)).put("xmlroot_param_standalone_part", (xmlroot_param_standalone_part386!=null?((StringTemplate)xmlroot_param_standalone_part386.getTemplate()):null)));
					}



					}
					break;
				case 22 :
					// PLSQLPrinter.g:2055:10: ^( XMLTABLE_VK ( xml_namespaces_clause )? expr= expression ( xml_passing_clause )? (xml_table_columns+= xml_table_column )* )
					{
					match(input,XMLTABLE_VK,FOLLOW_XMLTABLE_VK_in_standard_function21901); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2055:24: ( xml_namespaces_clause )?
					int alt456=2;
					int LA456_0 = input.LA(1);
					if ( (LA456_0==XMLNAMESPACES_VK) ) {
						alt456=1;
					}
					switch (alt456) {
						case 1 :
							// PLSQLPrinter.g:2055:24: xml_namespaces_clause
							{
							pushFollow(FOLLOW_xml_namespaces_clause_in_standard_function21903);
							xml_namespaces_clause387=xml_namespaces_clause();
							state._fsp--;

							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function21908);
					expr=expression();
					state._fsp--;

					// PLSQLPrinter.g:2055:63: ( xml_passing_clause )?
					int alt457=2;
					int LA457_0 = input.LA(1);
					if ( (LA457_0==PASSING_VK) ) {
						alt457=1;
					}
					switch (alt457) {
						case 1 :
							// PLSQLPrinter.g:2055:63: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function21910);
							xml_passing_clause388=xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2055:100: (xml_table_columns+= xml_table_column )*
					loop458:
					while (true) {
						int alt458=2;
						int LA458_0 = input.LA(1);
						if ( (LA458_0==XML_COLUMN) ) {
							alt458=1;
						}

						switch (alt458) {
						case 1 :
							// PLSQLPrinter.g:2055:100: xml_table_columns+= xml_table_column
							{
							pushFollow(FOLLOW_xml_table_column_in_standard_function21915);
							xml_table_columns=xml_table_column();
							state._fsp--;

							if (list_xml_table_columns==null) list_xml_table_columns=new ArrayList<Object>();
							list_xml_table_columns.add(xml_table_columns.getTemplate());
							}
							break;

						default :
							break loop458;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2056:5: -> xmltable(xml_namespaces_clause=$xml_namespaces_clause.stxquery_expression=$expr.stxml_passing_clause=$xml_passing_clause.stxml_table_columns=$xml_table_columns)
					{
						retval.st = templateLib.getInstanceOf("xmltable",new STAttrMap().put("xml_namespaces_clause", (xml_namespaces_clause387!=null?((StringTemplate)xml_namespaces_clause387.getTemplate()):null)).put("xquery_expression", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("xml_passing_clause", (xml_passing_clause388!=null?((StringTemplate)xml_passing_clause388.getTemplate()):null)).put("xml_table_columns", list_xml_table_columns));
					}



					}
					break;
				case 23 :
					// PLSQLPrinter.g:2059:10: ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? (value_exprs+= xmlelement_value_expr )* )
					{
					match(input,XMLELEMENT_VK,FOLLOW_XMLELEMENT_VK_in_standard_function21980); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2060:13: ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )?
					int alt459=3;
					int LA459_0 = input.LA(1);
					if ( (LA459_0==ENTITYESCAPING_VK) ) {
						alt459=1;
					}
					else if ( (LA459_0==NOENTITYESCAPING_VK) ) {
						alt459=2;
					}
					switch (alt459) {
						case 1 :
							// PLSQLPrinter.g:2060:14: ENTITYESCAPING_VK
							{
							ENTITYESCAPING_VK389=(CommonTree)match(input,ENTITYESCAPING_VK,FOLLOW_ENTITYESCAPING_VK_in_standard_function21995); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2060:32: NOENTITYESCAPING_VK
							{
							NOENTITYESCAPING_VK390=(CommonTree)match(input,NOENTITYESCAPING_VK,FOLLOW_NOENTITYESCAPING_VK_in_standard_function21997); 
							}
							break;

					}

					// PLSQLPrinter.g:2061:13: ( NAME_VK | EVALNAME_VK )?
					int alt460=3;
					int LA460_0 = input.LA(1);
					if ( (LA460_0==NAME_VK) ) {
						alt460=1;
					}
					else if ( (LA460_0==EVALNAME_VK) ) {
						alt460=2;
					}
					switch (alt460) {
						case 1 :
							// PLSQLPrinter.g:2061:14: NAME_VK
							{
							NAME_VK391=(CommonTree)match(input,NAME_VK,FOLLOW_NAME_VK_in_standard_function22014); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2061:22: EVALNAME_VK
							{
							EVALNAME_VK392=(CommonTree)match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_standard_function22016); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function22020);
					expression393=expression();
					state._fsp--;

					// PLSQLPrinter.g:2062:13: ( xml_attributes_clause )?
					int alt461=2;
					int LA461_0 = input.LA(1);
					if ( (LA461_0==XMLATTRIBUTES_VK) ) {
						alt461=1;
					}
					switch (alt461) {
						case 1 :
							// PLSQLPrinter.g:2062:13: xml_attributes_clause
							{
							pushFollow(FOLLOW_xml_attributes_clause_in_standard_function22034);
							xml_attributes_clause394=xml_attributes_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2062:47: (value_exprs+= xmlelement_value_expr )*
					loop462:
					while (true) {
						int alt462=2;
						int LA462_0 = input.LA(1);
						if ( (LA462_0==EXPR||LA462_0==LOGIC_EXPR) ) {
							alt462=1;
						}

						switch (alt462) {
						case 1 :
							// PLSQLPrinter.g:2062:47: value_exprs+= xmlelement_value_expr
							{
							pushFollow(FOLLOW_xmlelement_value_expr_in_standard_function22039);
							value_exprs=xmlelement_value_expr();
							state._fsp--;

							if (list_value_exprs==null) list_value_exprs=new ArrayList<Object>();
							list_value_exprs.add(value_exprs.getTemplate());
							}
							break;

						default :
							break loop462;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2064:5: -> xmlelement(is_entity_escaping=$ENTITYESCAPING_VK != nullis_no_entity_escaping=$NOENTITYESCAPING_VK != nullis_name=$NAME_VK != nullis_evalname=$EVALNAME_VK != nullexpression=$expression.stxml_attributes_clause=$xml_attributes_clause.stvalue_expressions=$value_exprs)
					{
						retval.st = templateLib.getInstanceOf("xmlelement",new STAttrMap().put("is_entity_escaping", ENTITYESCAPING_VK389 != null).put("is_no_entity_escaping", NOENTITYESCAPING_VK390 != null).put("is_name", NAME_VK391 != null).put("is_evalname", EVALNAME_VK392 != null).put("expression", (expression393!=null?((StringTemplate)expression393.getTemplate()):null)).put("xml_attributes_clause", (xml_attributes_clause394!=null?((StringTemplate)xml_attributes_clause394.getTemplate()):null)).put("value_expressions", list_value_exprs));
					}



					}
					break;
				case 24 :
					// PLSQLPrinter.g:2068:10: ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? )
					{
					match(input,XMLPI_VK,FOLLOW_XMLPI_VK_in_standard_function22138); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2069:17: ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression )
					int alt464=2;
					int LA464_0 = input.LA(1);
					if ( (LA464_0==NAME_VK) ) {
						alt464=1;
					}
					else if ( (LA464_0==EVALNAME_VK) ) {
						alt464=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 464, 0, input);
						throw nvae;
					}

					switch (alt464) {
						case 1 :
							// PLSQLPrinter.g:2069:22: NAME_VK ( char_set_name )? ID
							{
							match(input,NAME_VK,FOLLOW_NAME_VK_in_standard_function22161); 
							// PLSQLPrinter.g:2069:30: ( char_set_name )?
							int alt463=2;
							int LA463_0 = input.LA(1);
							if ( (LA463_0==CHAR_SET_NAME) ) {
								alt463=1;
							}
							switch (alt463) {
								case 1 :
									// PLSQLPrinter.g:2069:30: char_set_name
									{
									pushFollow(FOLLOW_char_set_name_in_standard_function22163);
									char_set_name();
									state._fsp--;

									}
									break;

							}

							match(input,ID,FOLLOW_ID_in_standard_function22166); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2070:22: EVALNAME_VK expression
							{
							match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_standard_function22189); 
							pushFollow(FOLLOW_expression_in_standard_function22191);
							expression();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2072:17: ( expression )?
					int alt465=2;
					int LA465_0 = input.LA(1);
					if ( (LA465_0==EXPR||LA465_0==LOGIC_EXPR) ) {
						alt465=1;
					}
					switch (alt465) {
						case 1 :
							// PLSQLPrinter.g:2072:17: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function22227);
							expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2074:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 25 :
					// PLSQLPrinter.g:2075:10: ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? )
					{
					match(input,XMLSERIALIZE_VK,FOLLOW_XMLSERIALIZE_VK_in_standard_function22264); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2076:17: ( DOCUMENT_VK | CONTENT_VK )
					int alt466=2;
					int LA466_0 = input.LA(1);
					if ( (LA466_0==DOCUMENT_VK) ) {
						alt466=1;
					}
					else if ( (LA466_0==CONTENT_VK) ) {
						alt466=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 466, 0, input);
						throw nvae;
					}

					switch (alt466) {
						case 1 :
							// PLSQLPrinter.g:2076:18: DOCUMENT_VK
							{
							match(input,DOCUMENT_VK,FOLLOW_DOCUMENT_VK_in_standard_function22283); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2076:30: CONTENT_VK
							{
							match(input,CONTENT_VK,FOLLOW_CONTENT_VK_in_standard_function22285); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function22304);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:2077:28: ( type_spec )?
					int alt467=2;
					int LA467_0 = input.LA(1);
					if ( (LA467_0==CUSTOM_TYPE||LA467_0==INTERVAL_DATATYPE||LA467_0==NATIVE_DATATYPE) ) {
						alt467=1;
					}
					switch (alt467) {
						case 1 :
							// PLSQLPrinter.g:2077:28: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_standard_function22306);
							type_spec();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2078:17: ( xmlserialize_param_enconding_part )?
					int alt468=2;
					int LA468_0 = input.LA(1);
					if ( (LA468_0==ENCODING_VK) ) {
						alt468=1;
					}
					switch (alt468) {
						case 1 :
							// PLSQLPrinter.g:2078:17: xmlserialize_param_enconding_part
							{
							pushFollow(FOLLOW_xmlserialize_param_enconding_part_in_standard_function22325);
							xmlserialize_param_enconding_part();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2079:17: ( xml_param_version_part )?
					int alt469=2;
					int LA469_0 = input.LA(1);
					if ( (LA469_0==VERSION_VK) ) {
						alt469=1;
					}
					switch (alt469) {
						case 1 :
							// PLSQLPrinter.g:2079:17: xml_param_version_part
							{
							pushFollow(FOLLOW_xml_param_version_part_in_standard_function22344);
							xml_param_version_part();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2080:17: ( xmlserialize_param_ident_part )?
					int alt470=2;
					int LA470_0 = input.LA(1);
					if ( (LA470_0==INDENT_VK||LA470_0==NO_VK) ) {
						alt470=1;
					}
					switch (alt470) {
						case 1 :
							// PLSQLPrinter.g:2080:17: xmlserialize_param_ident_part
							{
							pushFollow(FOLLOW_xmlserialize_param_ident_part_in_standard_function22363);
							xmlserialize_param_ident_part();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2081:17: ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )?
					int alt472=2;
					int LA472_0 = input.LA(1);
					if ( (LA472_0==HIDE_VK||LA472_0==SHOW_VK) ) {
						alt472=1;
					}
					switch (alt472) {
						case 1 :
							// PLSQLPrinter.g:2081:18: ( HIDE_VK | SHOW_VK ) DEFAULTS_VK
							{
							// PLSQLPrinter.g:2081:18: ( HIDE_VK | SHOW_VK )
							int alt471=2;
							int LA471_0 = input.LA(1);
							if ( (LA471_0==HIDE_VK) ) {
								alt471=1;
							}
							else if ( (LA471_0==SHOW_VK) ) {
								alt471=2;
							}

							else {
								NoViableAltException nvae =
									new NoViableAltException("", 471, 0, input);
								throw nvae;
							}

							switch (alt471) {
								case 1 :
									// PLSQLPrinter.g:2081:19: HIDE_VK
									{
									match(input,HIDE_VK,FOLLOW_HIDE_VK_in_standard_function22384); 
									}
									break;
								case 2 :
									// PLSQLPrinter.g:2081:27: SHOW_VK
									{
									match(input,SHOW_VK,FOLLOW_SHOW_VK_in_standard_function22386); 
									}
									break;

							}

							match(input,DEFAULTS_VK,FOLLOW_DEFAULTS_VK_in_standard_function22389); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2083:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "standard_function"


	public static class extract_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "extract_part"
	// PLSQLPrinter.g:2086:1: extract_part : ( YEAR_VK -> string_literal(val=\"year\")| MONTH_VK -> string_literal(val=\"month\")| DAY_VK -> string_literal(val=\"day\")| HOUR_VK -> string_literal(val=\"hour\")| MINUTE_VK -> string_literal(val=\"minute\")| SECOND_VK -> string_literal(val=\"second\")| TIMEZONE_HOUR_VK -> string_literal(val=\"timezone_hour\")| TIMEZONE_MINUTE_VK -> string_literal(val=\"timezone_minute\")| TIMEZONE_ABBR_VK -> string_literal(val=\"timezone_abbr\")| TIMEZONE_REGION_VK -> string_literal(val=\"timezone_region\"));
	public final PLSQLPrinter.extract_part_return extract_part() throws RecognitionException {
		PLSQLPrinter.extract_part_return retval = new PLSQLPrinter.extract_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2087:5: ( YEAR_VK -> string_literal(val=\"year\")| MONTH_VK -> string_literal(val=\"month\")| DAY_VK -> string_literal(val=\"day\")| HOUR_VK -> string_literal(val=\"hour\")| MINUTE_VK -> string_literal(val=\"minute\")| SECOND_VK -> string_literal(val=\"second\")| TIMEZONE_HOUR_VK -> string_literal(val=\"timezone_hour\")| TIMEZONE_MINUTE_VK -> string_literal(val=\"timezone_minute\")| TIMEZONE_ABBR_VK -> string_literal(val=\"timezone_abbr\")| TIMEZONE_REGION_VK -> string_literal(val=\"timezone_region\"))
			int alt474=10;
			switch ( input.LA(1) ) {
			case YEAR_VK:
				{
				alt474=1;
				}
				break;
			case MONTH_VK:
				{
				alt474=2;
				}
				break;
			case DAY_VK:
				{
				alt474=3;
				}
				break;
			case HOUR_VK:
				{
				alt474=4;
				}
				break;
			case MINUTE_VK:
				{
				alt474=5;
				}
				break;
			case SECOND_VK:
				{
				alt474=6;
				}
				break;
			case TIMEZONE_HOUR_VK:
				{
				alt474=7;
				}
				break;
			case TIMEZONE_MINUTE_VK:
				{
				alt474=8;
				}
				break;
			case TIMEZONE_ABBR_VK:
				{
				alt474=9;
				}
				break;
			case TIMEZONE_REGION_VK:
				{
				alt474=10;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 474, 0, input);
				throw nvae;
			}
			switch (alt474) {
				case 1 :
					// PLSQLPrinter.g:2088:9: YEAR_VK
					{
					match(input,YEAR_VK,FOLLOW_YEAR_VK_in_extract_part22444); 
					// TEMPLATE REWRITE
					// 2088:17: -> string_literal(val=\"year\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "year"));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2089:11: MONTH_VK
					{
					match(input,MONTH_VK,FOLLOW_MONTH_VK_in_extract_part22465); 
					// TEMPLATE REWRITE
					// 2089:20: -> string_literal(val=\"month\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "month"));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:2090:11: DAY_VK
					{
					match(input,DAY_VK,FOLLOW_DAY_VK_in_extract_part22486); 
					// TEMPLATE REWRITE
					// 2090:18: -> string_literal(val=\"day\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "day"));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:2091:11: HOUR_VK
					{
					match(input,HOUR_VK,FOLLOW_HOUR_VK_in_extract_part22507); 
					// TEMPLATE REWRITE
					// 2091:19: -> string_literal(val=\"hour\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "hour"));
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:2092:11: MINUTE_VK
					{
					match(input,MINUTE_VK,FOLLOW_MINUTE_VK_in_extract_part22528); 
					// TEMPLATE REWRITE
					// 2092:21: -> string_literal(val=\"minute\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "minute"));
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:2093:11: SECOND_VK
					{
					match(input,SECOND_VK,FOLLOW_SECOND_VK_in_extract_part22549); 
					// TEMPLATE REWRITE
					// 2093:21: -> string_literal(val=\"second\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "second"));
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:2094:11: TIMEZONE_HOUR_VK
					{
					match(input,TIMEZONE_HOUR_VK,FOLLOW_TIMEZONE_HOUR_VK_in_extract_part22570); 
					// TEMPLATE REWRITE
					// 2094:28: -> string_literal(val=\"timezone_hour\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "timezone_hour"));
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:2095:11: TIMEZONE_MINUTE_VK
					{
					match(input,TIMEZONE_MINUTE_VK,FOLLOW_TIMEZONE_MINUTE_VK_in_extract_part22591); 
					// TEMPLATE REWRITE
					// 2095:30: -> string_literal(val=\"timezone_minute\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "timezone_minute"));
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:2096:11: TIMEZONE_ABBR_VK
					{
					match(input,TIMEZONE_ABBR_VK,FOLLOW_TIMEZONE_ABBR_VK_in_extract_part22612); 
					// TEMPLATE REWRITE
					// 2096:28: -> string_literal(val=\"timezone_abbr\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "timezone_abbr"));
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:2097:11: TIMEZONE_REGION_VK
					{
					match(input,TIMEZONE_REGION_VK,FOLLOW_TIMEZONE_REGION_VK_in_extract_part22633); 
					// TEMPLATE REWRITE
					// 2097:30: -> string_literal(val=\"timezone_region\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "timezone_region"));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "extract_part"


	public static class xmlelement_value_expr_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlelement_value_expr"
	// PLSQLPrinter.g:2100:1: xmlelement_value_expr : expression ( alias )? -> xmlelement_value_expr(expression=$expression.stalias=$alias.st);
	public final PLSQLPrinter.xmlelement_value_expr_return xmlelement_value_expr() throws RecognitionException {
		PLSQLPrinter.xmlelement_value_expr_return retval = new PLSQLPrinter.xmlelement_value_expr_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression395 =null;
		TreeRuleReturnScope alias396 =null;

		try {
			// PLSQLPrinter.g:2101:5: ( expression ( alias )? -> xmlelement_value_expr(expression=$expression.stalias=$alias.st))
			// PLSQLPrinter.g:2101:9: expression ( alias )?
			{
			pushFollow(FOLLOW_expression_in_xmlelement_value_expr22665);
			expression395=expression();
			state._fsp--;

			// PLSQLPrinter.g:2101:20: ( alias )?
			int alt475=2;
			int LA475_0 = input.LA(1);
			if ( (LA475_0==COLUMN_ALIAS||LA475_0==TABLE_ALIAS) ) {
				alt475=1;
			}
			switch (alt475) {
				case 1 :
					// PLSQLPrinter.g:2101:20: alias
					{
					pushFollow(FOLLOW_alias_in_xmlelement_value_expr22667);
					alias396=alias();
					state._fsp--;

					}
					break;

			}

			// TEMPLATE REWRITE
			// 2102:5: -> xmlelement_value_expr(expression=$expression.stalias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("xmlelement_value_expr",new STAttrMap().put("expression", (expression395!=null?((StringTemplate)expression395.getTemplate()):null)).put("alias", (alias396!=null?((StringTemplate)alias396.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlelement_value_expr"


	public static class over_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "over_clause"
	// PLSQLPrinter.g:2105:1: over_clause : ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? ) -> over_clause(query_partition_clause=$query_partition_clause.storder_by_clause=$order_by_clause.stwindowing_clause=$windowing_clause.st);
	public final PLSQLPrinter.over_clause_return over_clause() throws RecognitionException {
		PLSQLPrinter.over_clause_return retval = new PLSQLPrinter.over_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope query_partition_clause397 =null;
		TreeRuleReturnScope order_by_clause398 =null;
		TreeRuleReturnScope windowing_clause399 =null;

		try {
			// PLSQLPrinter.g:2106:5: ( ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? ) -> over_clause(query_partition_clause=$query_partition_clause.storder_by_clause=$order_by_clause.stwindowing_clause=$windowing_clause.st))
			// PLSQLPrinter.g:2106:10: ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? )
			{
			match(input,OVER_VK,FOLLOW_OVER_VK_in_over_clause22708); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:2106:20: ( query_partition_clause )?
				int alt476=2;
				int LA476_0 = input.LA(1);
				if ( (LA476_0==PARTITION_VK) ) {
					alt476=1;
				}
				switch (alt476) {
					case 1 :
						// PLSQLPrinter.g:2106:20: query_partition_clause
						{
						pushFollow(FOLLOW_query_partition_clause_in_over_clause22710);
						query_partition_clause397=query_partition_clause();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:2106:44: ( order_by_clause ( windowing_clause )? )?
				int alt478=2;
				int LA478_0 = input.LA(1);
				if ( (LA478_0==SQL92_RESERVED_ORDER) ) {
					alt478=1;
				}
				switch (alt478) {
					case 1 :
						// PLSQLPrinter.g:2106:45: order_by_clause ( windowing_clause )?
						{
						pushFollow(FOLLOW_order_by_clause_in_over_clause22714);
						order_by_clause398=order_by_clause();
						state._fsp--;

						// PLSQLPrinter.g:2106:61: ( windowing_clause )?
						int alt477=2;
						int LA477_0 = input.LA(1);
						if ( (LA477_0==RANGE_VK||LA477_0==ROWS_VK) ) {
							alt477=1;
						}
						switch (alt477) {
							case 1 :
								// PLSQLPrinter.g:2106:61: windowing_clause
								{
								pushFollow(FOLLOW_windowing_clause_in_over_clause22716);
								windowing_clause399=windowing_clause();
								state._fsp--;

								}
								break;

						}

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 2107:5: -> over_clause(query_partition_clause=$query_partition_clause.storder_by_clause=$order_by_clause.stwindowing_clause=$windowing_clause.st)
			{
				retval.st = templateLib.getInstanceOf("over_clause",new STAttrMap().put("query_partition_clause", (query_partition_clause397!=null?((StringTemplate)query_partition_clause397.getTemplate()):null)).put("order_by_clause", (order_by_clause398!=null?((StringTemplate)order_by_clause398.getTemplate()):null)).put("windowing_clause", (windowing_clause399!=null?((StringTemplate)windowing_clause399.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "over_clause"


	public static class windowing_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "windowing_clause"
	// PLSQLPrinter.g:2112:1: windowing_clause : ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN e1= windowing_elements e2= windowing_elements ) |e1= windowing_elements ) ) -> windowing_clause(is_rows=$ROWS_VK != nullis_range=$RANGE_VK != nullis_between=$SQL92_RESERVED_BETWEEN != nullwindowing_element_1=$e1.stwindowing_element_2=$e2.st);
	public final PLSQLPrinter.windowing_clause_return windowing_clause() throws RecognitionException {
		PLSQLPrinter.windowing_clause_return retval = new PLSQLPrinter.windowing_clause_return();
		retval.start = input.LT(1);

		CommonTree ROWS_VK400=null;
		CommonTree RANGE_VK401=null;
		CommonTree SQL92_RESERVED_BETWEEN402=null;
		TreeRuleReturnScope e1 =null;
		TreeRuleReturnScope e2 =null;

		try {
			// PLSQLPrinter.g:2113:5: ( ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN e1= windowing_elements e2= windowing_elements ) |e1= windowing_elements ) ) -> windowing_clause(is_rows=$ROWS_VK != nullis_range=$RANGE_VK != nullis_between=$SQL92_RESERVED_BETWEEN != nullwindowing_element_1=$e1.stwindowing_element_2=$e2.st))
			// PLSQLPrinter.g:2113:10: ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN e1= windowing_elements e2= windowing_elements ) |e1= windowing_elements ) )
			{
			// PLSQLPrinter.g:2113:12: ( ROWS_VK | RANGE_VK )
			int alt479=2;
			int LA479_0 = input.LA(1);
			if ( (LA479_0==ROWS_VK) ) {
				alt479=1;
			}
			else if ( (LA479_0==RANGE_VK) ) {
				alt479=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 479, 0, input);
				throw nvae;
			}

			switch (alt479) {
				case 1 :
					// PLSQLPrinter.g:2113:13: ROWS_VK
					{
					ROWS_VK400=(CommonTree)match(input,ROWS_VK,FOLLOW_ROWS_VK_in_windowing_clause22788); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2113:21: RANGE_VK
					{
					RANGE_VK401=(CommonTree)match(input,RANGE_VK,FOLLOW_RANGE_VK_in_windowing_clause22790); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2114:13: ( ^( SQL92_RESERVED_BETWEEN e1= windowing_elements e2= windowing_elements ) |e1= windowing_elements )
			int alt480=2;
			int LA480_0 = input.LA(1);
			if ( (LA480_0==SQL92_RESERVED_BETWEEN) ) {
				alt480=1;
			}
			else if ( (LA480_0==CURRENT_VK||LA480_0==FOLLOWING_VK||LA480_0==PRECEDING_VK||LA480_0==UNBOUNDED_VK) ) {
				alt480=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 480, 0, input);
				throw nvae;
			}

			switch (alt480) {
				case 1 :
					// PLSQLPrinter.g:2114:18: ^( SQL92_RESERVED_BETWEEN e1= windowing_elements e2= windowing_elements )
					{
					SQL92_RESERVED_BETWEEN402=(CommonTree)match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_windowing_clause22811); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_windowing_elements_in_windowing_clause22815);
					e1=windowing_elements();
					state._fsp--;

					pushFollow(FOLLOW_windowing_elements_in_windowing_clause22819);
					e2=windowing_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:2115:18: e1= windowing_elements
					{
					pushFollow(FOLLOW_windowing_elements_in_windowing_clause22841);
					e1=windowing_elements();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2118:5: -> windowing_clause(is_rows=$ROWS_VK != nullis_range=$RANGE_VK != nullis_between=$SQL92_RESERVED_BETWEEN != nullwindowing_element_1=$e1.stwindowing_element_2=$e2.st)
			{
				retval.st = templateLib.getInstanceOf("windowing_clause",new STAttrMap().put("is_rows", ROWS_VK400 != null).put("is_range", RANGE_VK401 != null).put("is_between", SQL92_RESERVED_BETWEEN402 != null).put("windowing_element_1", (e1!=null?((StringTemplate)e1.getTemplate()):null)).put("windowing_element_2", (e2!=null?((StringTemplate)e2.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "windowing_clause"


	public static class windowing_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "windowing_elements"
	// PLSQLPrinter.g:2123:1: windowing_elements : ( ^( UNBOUNDED_VK PRECEDING_VK ) -> windowing_elements_unbounded_preceding(| ^( CURRENT_VK ROW_VK ) -> windowing_elements_current_row(| ^( PRECEDING_VK expr= expression ) -> windowing_elements_rows_preceding(expression=$expr.st)| ^( FOLLOWING_VK expr= expression ) -> windowing_elements_rows_following(expression=$expr.st));
	public final PLSQLPrinter.windowing_elements_return windowing_elements() throws RecognitionException {
		PLSQLPrinter.windowing_elements_return retval = new PLSQLPrinter.windowing_elements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expr =null;

		try {
			// PLSQLPrinter.g:2124:5: ( ^( UNBOUNDED_VK PRECEDING_VK ) -> windowing_elements_unbounded_preceding(| ^( CURRENT_VK ROW_VK ) -> windowing_elements_current_row(| ^( PRECEDING_VK expr= expression ) -> windowing_elements_rows_preceding(expression=$expr.st)| ^( FOLLOWING_VK expr= expression ) -> windowing_elements_rows_following(expression=$expr.st))
			int alt481=4;
			switch ( input.LA(1) ) {
			case UNBOUNDED_VK:
				{
				alt481=1;
				}
				break;
			case CURRENT_VK:
				{
				alt481=2;
				}
				break;
			case PRECEDING_VK:
				{
				alt481=3;
				}
				break;
			case FOLLOWING_VK:
				{
				alt481=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 481, 0, input);
				throw nvae;
			}
			switch (alt481) {
				case 1 :
					// PLSQLPrinter.g:2124:10: ^( UNBOUNDED_VK PRECEDING_VK )
					{
					match(input,UNBOUNDED_VK,FOLLOW_UNBOUNDED_VK_in_windowing_elements22942); 
					match(input, Token.DOWN, null); 
					match(input,PRECEDING_VK,FOLLOW_PRECEDING_VK_in_windowing_elements22944); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2124:39: -> windowing_elements_unbounded_preceding(
					{
						retval.st = templateLib.getInstanceOf("windowing_elements_unbounded_preceding");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2125:10: ^( CURRENT_VK ROW_VK )
					{
					match(input,CURRENT_VK,FOLLOW_CURRENT_VK_in_windowing_elements22963); 
					match(input, Token.DOWN, null); 
					match(input,ROW_VK,FOLLOW_ROW_VK_in_windowing_elements22965); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2125:31: -> windowing_elements_current_row(
					{
						retval.st = templateLib.getInstanceOf("windowing_elements_current_row");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:2126:10: ^( PRECEDING_VK expr= expression )
					{
					match(input,PRECEDING_VK,FOLLOW_PRECEDING_VK_in_windowing_elements22984); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_windowing_elements22988);
					expr=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2126:42: -> windowing_elements_rows_preceding(expression=$expr.st)
					{
						retval.st = templateLib.getInstanceOf("windowing_elements_rows_preceding",new STAttrMap().put("expression", (expr!=null?((StringTemplate)expr.getTemplate()):null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:2127:10: ^( FOLLOWING_VK expr= expression )
					{
					match(input,FOLLOWING_VK,FOLLOW_FOLLOWING_VK_in_windowing_elements23010); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_windowing_elements23014);
					expr=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2127:42: -> windowing_elements_rows_following(expression=$expr.st)
					{
						retval.st = templateLib.getInstanceOf("windowing_elements_rows_following",new STAttrMap().put("expression", (expr!=null?((StringTemplate)expr.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "windowing_elements"


	public static class using_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "using_clause"
	// PLSQLPrinter.g:2130:1: using_clause : ^( PLSQL_NON_RESERVED_USING (using_elements+= using_element )+ ) -> using_clause(using_elements=$using_elements);
	public final PLSQLPrinter.using_clause_return using_clause() throws RecognitionException {
		PLSQLPrinter.using_clause_return retval = new PLSQLPrinter.using_clause_return();
		retval.start = input.LT(1);

		List<Object> list_using_elements=null;
		RuleReturnScope using_elements = null;
		try {
			// PLSQLPrinter.g:2131:5: ( ^( PLSQL_NON_RESERVED_USING (using_elements+= using_element )+ ) -> using_clause(using_elements=$using_elements))
			// PLSQLPrinter.g:2131:10: ^( PLSQL_NON_RESERVED_USING (using_elements+= using_element )+ )
			{
			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_using_clause23045); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2131:51: (using_elements+= using_element )+
			int cnt482=0;
			loop482:
			while (true) {
				int alt482=2;
				int LA482_0 = input.LA(1);
				if ( (LA482_0==ASTERISK||LA482_0==ELEMENT) ) {
					alt482=1;
				}

				switch (alt482) {
				case 1 :
					// PLSQLPrinter.g:2131:51: using_elements+= using_element
					{
					pushFollow(FOLLOW_using_element_in_using_clause23049);
					using_elements=using_element();
					state._fsp--;

					if (list_using_elements==null) list_using_elements=new ArrayList<Object>();
					list_using_elements.add(using_elements.getTemplate());
					}
					break;

				default :
					if ( cnt482 >= 1 ) break loop482;
					EarlyExitException eee = new EarlyExitException(482, input);
					throw eee;
				}
				cnt482++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2132:5: -> using_clause(using_elements=$using_elements)
			{
				retval.st = templateLib.getInstanceOf("using_clause",new STAttrMap().put("using_elements", list_using_elements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "using_clause"


	public static class using_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "using_element"
	// PLSQLPrinter.g:2135:1: using_element : ( ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? ) -> using_element_element(is_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullexpression=$expression.stalias=$alias.st)| ASTERISK -> using_element_asterisk();
	public final PLSQLPrinter.using_element_return using_element() throws RecognitionException {
		PLSQLPrinter.using_element_return retval = new PLSQLPrinter.using_element_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_IN403=null;
		CommonTree OUT_VK404=null;
		TreeRuleReturnScope expression405 =null;
		TreeRuleReturnScope alias406 =null;

		try {
			// PLSQLPrinter.g:2136:5: ( ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? ) -> using_element_element(is_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullexpression=$expression.stalias=$alias.st)| ASTERISK -> using_element_asterisk()
			int alt486=2;
			int LA486_0 = input.LA(1);
			if ( (LA486_0==ELEMENT) ) {
				alt486=1;
			}
			else if ( (LA486_0==ASTERISK) ) {
				alt486=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 486, 0, input);
				throw nvae;
			}

			switch (alt486) {
				case 1 :
					// PLSQLPrinter.g:2136:10: ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? )
					{
					match(input,ELEMENT,FOLLOW_ELEMENT_in_using_element23087); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2136:20: ( SQL92_RESERVED_IN )?
					int alt483=2;
					int LA483_0 = input.LA(1);
					if ( (LA483_0==SQL92_RESERVED_IN) ) {
						alt483=1;
					}
					switch (alt483) {
						case 1 :
							// PLSQLPrinter.g:2136:20: SQL92_RESERVED_IN
							{
							SQL92_RESERVED_IN403=(CommonTree)match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_using_element23089); 
							}
							break;

					}

					// PLSQLPrinter.g:2136:39: ( OUT_VK )?
					int alt484=2;
					int LA484_0 = input.LA(1);
					if ( (LA484_0==OUT_VK) ) {
						alt484=1;
					}
					switch (alt484) {
						case 1 :
							// PLSQLPrinter.g:2136:39: OUT_VK
							{
							OUT_VK404=(CommonTree)match(input,OUT_VK,FOLLOW_OUT_VK_in_using_element23092); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_using_element23095);
					expression405=expression();
					state._fsp--;

					// PLSQLPrinter.g:2136:58: ( alias )?
					int alt485=2;
					int LA485_0 = input.LA(1);
					if ( (LA485_0==COLUMN_ALIAS||LA485_0==TABLE_ALIAS) ) {
						alt485=1;
					}
					switch (alt485) {
						case 1 :
							// PLSQLPrinter.g:2136:58: alias
							{
							pushFollow(FOLLOW_alias_in_using_element23097);
							alias406=alias();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2137:5: -> using_element_element(is_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullexpression=$expression.stalias=$alias.st)
					{
						retval.st = templateLib.getInstanceOf("using_element_element",new STAttrMap().put("is_in", SQL92_RESERVED_IN403 != null).put("is_out", OUT_VK404 != null).put("expression", (expression405!=null?((StringTemplate)expression405.getTemplate()):null)).put("alias", (alias406!=null?((StringTemplate)alias406.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2140:10: ASTERISK
					{
					match(input,ASTERISK,FOLLOW_ASTERISK_in_using_element23161); 
					// TEMPLATE REWRITE
					// 2141:5: -> using_element_asterisk(
					{
						retval.st = templateLib.getInstanceOf("using_element_asterisk");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "using_element"


	public static class collect_order_by_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "collect_order_by_part"
	// PLSQLPrinter.g:2144:1: collect_order_by_part : ^( SQL92_RESERVED_ORDER expression ) -> template( \"not implemented: collect_order_by_part\";
	public final PLSQLPrinter.collect_order_by_part_return collect_order_by_part() throws RecognitionException {
		PLSQLPrinter.collect_order_by_part_return retval = new PLSQLPrinter.collect_order_by_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2145:5: ( ^( SQL92_RESERVED_ORDER expression ) -> template( \"not implemented: collect_order_by_part\")
			// PLSQLPrinter.g:2145:10: ^( SQL92_RESERVED_ORDER expression )
			{
			match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_collect_order_by_part23194); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_collect_order_by_part23196);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2146:5: -> template( \"not implemented: collect_order_by_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: collect_order_by_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "collect_order_by_part"


	public static class within_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "within_clause"
	// PLSQLPrinter.g:2149:1: within_clause : ^( WITHIN_VK order_by_clause ) -> within_clause(order_by_clause=$order_by_clause.st);
	public final PLSQLPrinter.within_clause_return within_clause() throws RecognitionException {
		PLSQLPrinter.within_clause_return retval = new PLSQLPrinter.within_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope order_by_clause407 =null;

		try {
			// PLSQLPrinter.g:2150:5: ( ^( WITHIN_VK order_by_clause ) -> within_clause(order_by_clause=$order_by_clause.st))
			// PLSQLPrinter.g:2150:10: ^( WITHIN_VK order_by_clause )
			{
			match(input,WITHIN_VK,FOLLOW_WITHIN_VK_in_within_clause23232); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_order_by_clause_in_within_clause23234);
			order_by_clause407=order_by_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2151:5: -> within_clause(order_by_clause=$order_by_clause.st)
			{
				retval.st = templateLib.getInstanceOf("within_clause",new STAttrMap().put("order_by_clause", (order_by_clause407!=null?((StringTemplate)order_by_clause407.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "within_clause"


	public static class cost_matrix_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cost_matrix_clause"
	// PLSQLPrinter.g:2154:1: cost_matrix_clause : ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) ) -> template( \"not implemented: cost_matrix_clause\";
	public final PLSQLPrinter.cost_matrix_clause_return cost_matrix_clause() throws RecognitionException {
		PLSQLPrinter.cost_matrix_clause_return retval = new PLSQLPrinter.cost_matrix_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2155:5: ( ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) ) -> template( \"not implemented: cost_matrix_clause\")
			// PLSQLPrinter.g:2155:10: ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) )
			{
			match(input,COST_VK,FOLLOW_COST_VK_in_cost_matrix_clause23271); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2156:13: ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list )
			int alt489=2;
			int LA489_0 = input.LA(1);
			if ( (LA489_0==PLSQL_NON_RESERVED_MODEL) ) {
				alt489=1;
			}
			else if ( (LA489_0==COST_CLASS_NAME) ) {
				alt489=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 489, 0, input);
				throw nvae;
			}

			switch (alt489) {
				case 1 :
					// PLSQLPrinter.g:2156:18: PLSQL_NON_RESERVED_MODEL ( AUTO_VK )?
					{
					match(input,PLSQL_NON_RESERVED_MODEL,FOLLOW_PLSQL_NON_RESERVED_MODEL_in_cost_matrix_clause23290); 
					// PLSQLPrinter.g:2156:43: ( AUTO_VK )?
					int alt487=2;
					int LA487_0 = input.LA(1);
					if ( (LA487_0==AUTO_VK) ) {
						alt487=1;
					}
					switch (alt487) {
						case 1 :
							// PLSQLPrinter.g:2156:43: AUTO_VK
							{
							match(input,AUTO_VK,FOLLOW_AUTO_VK_in_cost_matrix_clause23292); 
							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:2157:18: ( cost_class_name )+ expression_list
					{
					// PLSQLPrinter.g:2157:18: ( cost_class_name )+
					int cnt488=0;
					loop488:
					while (true) {
						int alt488=2;
						int LA488_0 = input.LA(1);
						if ( (LA488_0==COST_CLASS_NAME) ) {
							alt488=1;
						}

						switch (alt488) {
						case 1 :
							// PLSQLPrinter.g:2157:18: cost_class_name
							{
							pushFollow(FOLLOW_cost_class_name_in_cost_matrix_clause23312);
							cost_class_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt488 >= 1 ) break loop488;
							EarlyExitException eee = new EarlyExitException(488, input);
							throw eee;
						}
						cnt488++;
					}

					pushFollow(FOLLOW_expression_list_in_cost_matrix_clause23315);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2160:5: -> template( \"not implemented: cost_matrix_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: cost_matrix_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cost_matrix_clause"


	public static class xml_passing_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_passing_clause"
	// PLSQLPrinter.g:2163:1: xml_passing_clause : ^( PASSING_VK ( VALUE_VK )? exprs+= xml_passing_clause_expr ) -> xml_passing_clause(is_by_value=$VALUE_VK != nullxml_passing_clause_expressions=$exprs);
	public final PLSQLPrinter.xml_passing_clause_return xml_passing_clause() throws RecognitionException {
		PLSQLPrinter.xml_passing_clause_return retval = new PLSQLPrinter.xml_passing_clause_return();
		retval.start = input.LT(1);

		CommonTree VALUE_VK408=null;
		List<Object> list_exprs=null;
		RuleReturnScope exprs = null;
		try {
			// PLSQLPrinter.g:2164:5: ( ^( PASSING_VK ( VALUE_VK )? exprs+= xml_passing_clause_expr ) -> xml_passing_clause(is_by_value=$VALUE_VK != nullxml_passing_clause_expressions=$exprs))
			// PLSQLPrinter.g:2164:10: ^( PASSING_VK ( VALUE_VK )? exprs+= xml_passing_clause_expr )
			{
			match(input,PASSING_VK,FOLLOW_PASSING_VK_in_xml_passing_clause23374); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2164:23: ( VALUE_VK )?
			int alt490=2;
			int LA490_0 = input.LA(1);
			if ( (LA490_0==VALUE_VK) ) {
				alt490=1;
			}
			switch (alt490) {
				case 1 :
					// PLSQLPrinter.g:2164:23: VALUE_VK
					{
					VALUE_VK408=(CommonTree)match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xml_passing_clause23376); 
					}
					break;

			}

			pushFollow(FOLLOW_xml_passing_clause_expr_in_xml_passing_clause23381);
			exprs=xml_passing_clause_expr();
			state._fsp--;

			if (list_exprs==null) list_exprs=new ArrayList<Object>();
			list_exprs.add(exprs.getTemplate());
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2165:5: -> xml_passing_clause(is_by_value=$VALUE_VK != nullxml_passing_clause_expressions=$exprs)
			{
				retval.st = templateLib.getInstanceOf("xml_passing_clause",new STAttrMap().put("is_by_value", VALUE_VK408 != null).put("xml_passing_clause_expressions", list_exprs));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_passing_clause"


	public static class xml_passing_clause_expr_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_passing_clause_expr"
	// PLSQLPrinter.g:2168:1: xml_passing_clause_expr : expression ( alias )? -> xml_passing_clause_expr(expression=$expression.stalias=$alias.st);
	public final PLSQLPrinter.xml_passing_clause_expr_return xml_passing_clause_expr() throws RecognitionException {
		PLSQLPrinter.xml_passing_clause_expr_return retval = new PLSQLPrinter.xml_passing_clause_expr_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression409 =null;
		TreeRuleReturnScope alias410 =null;

		try {
			// PLSQLPrinter.g:2169:5: ( expression ( alias )? -> xml_passing_clause_expr(expression=$expression.stalias=$alias.st))
			// PLSQLPrinter.g:2169:9: expression ( alias )?
			{
			pushFollow(FOLLOW_expression_in_xml_passing_clause_expr23425);
			expression409=expression();
			state._fsp--;

			// PLSQLPrinter.g:2169:20: ( alias )?
			int alt491=2;
			int LA491_0 = input.LA(1);
			if ( (LA491_0==COLUMN_ALIAS||LA491_0==TABLE_ALIAS) ) {
				alt491=1;
			}
			switch (alt491) {
				case 1 :
					// PLSQLPrinter.g:2169:20: alias
					{
					pushFollow(FOLLOW_alias_in_xml_passing_clause_expr23427);
					alias410=alias();
					state._fsp--;

					}
					break;

			}

			// TEMPLATE REWRITE
			// 2170:5: -> xml_passing_clause_expr(expression=$expression.stalias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("xml_passing_clause_expr",new STAttrMap().put("expression", (expression409!=null?((StringTemplate)expression409.getTemplate()):null)).put("alias", (alias410!=null?((StringTemplate)alias410.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_passing_clause_expr"


	public static class xml_attributes_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_attributes_clause"
	// PLSQLPrinter.g:2173:1: xml_attributes_clause : ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? (xml_multiuse_expression_elements+= xml_multiuse_expression_element )+ ) -> xml_attributes_clause(is_entity_escaping=$ENTITYESCAPING_VK != nullis_no_entity_escaping=$NOENTITYESCAPING_VK != nullis_schema_check=$SCHEMACHECK_VK != nullis_no_schema_check=$NOSCHEMACHECK_VK != nullxml_multiuse_expression_elements=$xml_multiuse_expression_elements);
	public final PLSQLPrinter.xml_attributes_clause_return xml_attributes_clause() throws RecognitionException {
		PLSQLPrinter.xml_attributes_clause_return retval = new PLSQLPrinter.xml_attributes_clause_return();
		retval.start = input.LT(1);

		CommonTree ENTITYESCAPING_VK411=null;
		CommonTree NOENTITYESCAPING_VK412=null;
		CommonTree SCHEMACHECK_VK413=null;
		CommonTree NOSCHEMACHECK_VK414=null;
		List<Object> list_xml_multiuse_expression_elements=null;
		RuleReturnScope xml_multiuse_expression_elements = null;
		try {
			// PLSQLPrinter.g:2174:5: ( ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? (xml_multiuse_expression_elements+= xml_multiuse_expression_element )+ ) -> xml_attributes_clause(is_entity_escaping=$ENTITYESCAPING_VK != nullis_no_entity_escaping=$NOENTITYESCAPING_VK != nullis_schema_check=$SCHEMACHECK_VK != nullis_no_schema_check=$NOSCHEMACHECK_VK != nullxml_multiuse_expression_elements=$xml_multiuse_expression_elements))
			// PLSQLPrinter.g:2174:10: ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? (xml_multiuse_expression_elements+= xml_multiuse_expression_element )+ )
			{
			match(input,XMLATTRIBUTES_VK,FOLLOW_XMLATTRIBUTES_VK_in_xml_attributes_clause23468); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2175:13: ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )?
			int alt492=3;
			int LA492_0 = input.LA(1);
			if ( (LA492_0==ENTITYESCAPING_VK) ) {
				alt492=1;
			}
			else if ( (LA492_0==NOENTITYESCAPING_VK) ) {
				alt492=2;
			}
			switch (alt492) {
				case 1 :
					// PLSQLPrinter.g:2175:14: ENTITYESCAPING_VK
					{
					ENTITYESCAPING_VK411=(CommonTree)match(input,ENTITYESCAPING_VK,FOLLOW_ENTITYESCAPING_VK_in_xml_attributes_clause23483); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2175:32: NOENTITYESCAPING_VK
					{
					NOENTITYESCAPING_VK412=(CommonTree)match(input,NOENTITYESCAPING_VK,FOLLOW_NOENTITYESCAPING_VK_in_xml_attributes_clause23485); 
					}
					break;

			}

			// PLSQLPrinter.g:2176:13: ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )?
			int alt493=3;
			int LA493_0 = input.LA(1);
			if ( (LA493_0==SCHEMACHECK_VK) ) {
				alt493=1;
			}
			else if ( (LA493_0==NOSCHEMACHECK_VK) ) {
				alt493=2;
			}
			switch (alt493) {
				case 1 :
					// PLSQLPrinter.g:2176:14: SCHEMACHECK_VK
					{
					SCHEMACHECK_VK413=(CommonTree)match(input,SCHEMACHECK_VK,FOLLOW_SCHEMACHECK_VK_in_xml_attributes_clause23502); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2176:29: NOSCHEMACHECK_VK
					{
					NOSCHEMACHECK_VK414=(CommonTree)match(input,NOSCHEMACHECK_VK,FOLLOW_NOSCHEMACHECK_VK_in_xml_attributes_clause23504); 
					}
					break;

			}

			// PLSQLPrinter.g:2177:45: (xml_multiuse_expression_elements+= xml_multiuse_expression_element )+
			int cnt494=0;
			loop494:
			while (true) {
				int alt494=2;
				int LA494_0 = input.LA(1);
				if ( (LA494_0==XML_ELEMENT) ) {
					alt494=1;
				}

				switch (alt494) {
				case 1 :
					// PLSQLPrinter.g:2177:45: xml_multiuse_expression_elements+= xml_multiuse_expression_element
					{
					pushFollow(FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause23522);
					xml_multiuse_expression_elements=xml_multiuse_expression_element();
					state._fsp--;

					if (list_xml_multiuse_expression_elements==null) list_xml_multiuse_expression_elements=new ArrayList<Object>();
					list_xml_multiuse_expression_elements.add(xml_multiuse_expression_elements.getTemplate());
					}
					break;

				default :
					if ( cnt494 >= 1 ) break loop494;
					EarlyExitException eee = new EarlyExitException(494, input);
					throw eee;
				}
				cnt494++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2179:5: -> xml_attributes_clause(is_entity_escaping=$ENTITYESCAPING_VK != nullis_no_entity_escaping=$NOENTITYESCAPING_VK != nullis_schema_check=$SCHEMACHECK_VK != nullis_no_schema_check=$NOSCHEMACHECK_VK != nullxml_multiuse_expression_elements=$xml_multiuse_expression_elements)
			{
				retval.st = templateLib.getInstanceOf("xml_attributes_clause",new STAttrMap().put("is_entity_escaping", ENTITYESCAPING_VK411 != null).put("is_no_entity_escaping", NOENTITYESCAPING_VK412 != null).put("is_schema_check", SCHEMACHECK_VK413 != null).put("is_no_schema_check", NOSCHEMACHECK_VK414 != null).put("xml_multiuse_expression_elements", list_xml_multiuse_expression_elements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_attributes_clause"


	public static class xml_namespaces_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_namespaces_clause"
	// PLSQLPrinter.g:2185:1: xml_namespaces_clause : ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? ) -> template( \"not implemented: xml_namespaces_clause\";
	public final PLSQLPrinter.xml_namespaces_clause_return xml_namespaces_clause() throws RecognitionException {
		PLSQLPrinter.xml_namespaces_clause_return retval = new PLSQLPrinter.xml_namespaces_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2186:5: ( ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? ) -> template( \"not implemented: xml_namespaces_clause\")
			// PLSQLPrinter.g:2186:10: ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? )
			{
			match(input,XMLNAMESPACES_VK,FOLLOW_XMLNAMESPACES_VK_in_xml_namespaces_clause23620); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:2187:13: ( expression ( alias )? )*
				loop496:
				while (true) {
					int alt496=2;
					int LA496_0 = input.LA(1);
					if ( (LA496_0==EXPR||LA496_0==LOGIC_EXPR) ) {
						alt496=1;
					}

					switch (alt496) {
					case 1 :
						// PLSQLPrinter.g:2187:14: expression ( alias )?
						{
						pushFollow(FOLLOW_expression_in_xml_namespaces_clause23635);
						expression();
						state._fsp--;

						// PLSQLPrinter.g:2187:25: ( alias )?
						int alt495=2;
						int LA495_0 = input.LA(1);
						if ( (LA495_0==COLUMN_ALIAS||LA495_0==TABLE_ALIAS) ) {
							alt495=1;
						}
						switch (alt495) {
							case 1 :
								// PLSQLPrinter.g:2187:25: alias
								{
								pushFollow(FOLLOW_alias_in_xml_namespaces_clause23637);
								alias();
								state._fsp--;

								}
								break;

						}

						}
						break;

					default :
						break loop496;
					}
				}

				// PLSQLPrinter.g:2187:34: ( xml_general_default_part )?
				int alt497=2;
				int LA497_0 = input.LA(1);
				if ( (LA497_0==SQL92_RESERVED_DEFAULT) ) {
					alt497=1;
				}
				switch (alt497) {
					case 1 :
						// PLSQLPrinter.g:2187:34: xml_general_default_part
						{
						pushFollow(FOLLOW_xml_general_default_part_in_xml_namespaces_clause23642);
						xml_general_default_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 2189:5: -> template( \"not implemented: xml_namespaces_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_namespaces_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_namespaces_clause"


	public static class xml_table_column_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_table_column"
	// PLSQLPrinter.g:2192:1: xml_table_column : ^( XML_COLUMN xml_column_name ( ORDINALITY_VK -> xml_table_column_ordinality(name=$xml_column_name.st)| type_spec ( expression )? ( xml_general_default_part )? -> xml_table_column_typespec(name=$xml_column_name.sttype_spec=$type_spec.stpath_expr=$expression.stxml_general_default_part=$xml_general_default_part.st)) ) ;
	public final PLSQLPrinter.xml_table_column_return xml_table_column() throws RecognitionException {
		PLSQLPrinter.xml_table_column_return retval = new PLSQLPrinter.xml_table_column_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope xml_column_name415 =null;
		TreeRuleReturnScope type_spec416 =null;
		TreeRuleReturnScope expression417 =null;
		TreeRuleReturnScope xml_general_default_part418 =null;

		try {
			// PLSQLPrinter.g:2193:5: ( ^( XML_COLUMN xml_column_name ( ORDINALITY_VK -> xml_table_column_ordinality(name=$xml_column_name.st)| type_spec ( expression )? ( xml_general_default_part )? -> xml_table_column_typespec(name=$xml_column_name.sttype_spec=$type_spec.stpath_expr=$expression.stxml_general_default_part=$xml_general_default_part.st)) ) )
			// PLSQLPrinter.g:2193:10: ^( XML_COLUMN xml_column_name ( ORDINALITY_VK -> xml_table_column_ordinality(name=$xml_column_name.st)| type_spec ( expression )? ( xml_general_default_part )? -> xml_table_column_typespec(name=$xml_column_name.sttype_spec=$type_spec.stpath_expr=$expression.stxml_general_default_part=$xml_general_default_part.st)) )
			{
			match(input,XML_COLUMN,FOLLOW_XML_COLUMN_in_xml_table_column23688); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_xml_column_name_in_xml_table_column23690);
			xml_column_name415=xml_column_name();
			state._fsp--;

			// PLSQLPrinter.g:2194:13: ( ORDINALITY_VK -> xml_table_column_ordinality(name=$xml_column_name.st)| type_spec ( expression )? ( xml_general_default_part )? -> xml_table_column_typespec(name=$xml_column_name.sttype_spec=$type_spec.stpath_expr=$expression.stxml_general_default_part=$xml_general_default_part.st))
			int alt500=2;
			int LA500_0 = input.LA(1);
			if ( (LA500_0==ORDINALITY_VK) ) {
				alt500=1;
			}
			else if ( (LA500_0==CUSTOM_TYPE||LA500_0==INTERVAL_DATATYPE||LA500_0==NATIVE_DATATYPE) ) {
				alt500=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 500, 0, input);
				throw nvae;
			}

			switch (alt500) {
				case 1 :
					// PLSQLPrinter.g:2195:15: ORDINALITY_VK
					{
					match(input,ORDINALITY_VK,FOLLOW_ORDINALITY_VK_in_xml_table_column23720); 
					// TEMPLATE REWRITE
					// 2195:29: -> xml_table_column_ordinality(name=$xml_column_name.st)
					{
						retval.st = templateLib.getInstanceOf("xml_table_column_ordinality",new STAttrMap().put("name", (xml_column_name415!=null?((StringTemplate)xml_column_name415.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2196:17: type_spec ( expression )? ( xml_general_default_part )?
					{
					pushFollow(FOLLOW_type_spec_in_xml_table_column23747);
					type_spec416=type_spec();
					state._fsp--;

					// PLSQLPrinter.g:2196:27: ( expression )?
					int alt498=2;
					int LA498_0 = input.LA(1);
					if ( (LA498_0==EXPR||LA498_0==LOGIC_EXPR) ) {
						alt498=1;
					}
					switch (alt498) {
						case 1 :
							// PLSQLPrinter.g:2196:27: expression
							{
							pushFollow(FOLLOW_expression_in_xml_table_column23749);
							expression417=expression();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2196:39: ( xml_general_default_part )?
					int alt499=2;
					int LA499_0 = input.LA(1);
					if ( (LA499_0==SQL92_RESERVED_DEFAULT) ) {
						alt499=1;
					}
					switch (alt499) {
						case 1 :
							// PLSQLPrinter.g:2196:39: xml_general_default_part
							{
							pushFollow(FOLLOW_xml_general_default_part_in_xml_table_column23752);
							xml_general_default_part418=xml_general_default_part();
							state._fsp--;

							}
							break;

					}

					// TEMPLATE REWRITE
					// 2197:15: -> xml_table_column_typespec(name=$xml_column_name.sttype_spec=$type_spec.stpath_expr=$expression.stxml_general_default_part=$xml_general_default_part.st)
					{
						retval.st = templateLib.getInstanceOf("xml_table_column_typespec",new STAttrMap().put("name", (xml_column_name415!=null?((StringTemplate)xml_column_name415.getTemplate()):null)).put("type_spec", (type_spec416!=null?((StringTemplate)type_spec416.getTemplate()):null)).put("path_expr", (expression417!=null?((StringTemplate)expression417.getTemplate()):null)).put("xml_general_default_part", (xml_general_default_part418!=null?((StringTemplate)xml_general_default_part418.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_table_column"


	public static class xml_general_default_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_general_default_part"
	// PLSQLPrinter.g:2204:1: xml_general_default_part : ^( SQL92_RESERVED_DEFAULT expression ) -> xml_general_default_part(expression=$expression.st);
	public final PLSQLPrinter.xml_general_default_part_return xml_general_default_part() throws RecognitionException {
		PLSQLPrinter.xml_general_default_part_return retval = new PLSQLPrinter.xml_general_default_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression419 =null;

		try {
			// PLSQLPrinter.g:2205:5: ( ^( SQL92_RESERVED_DEFAULT expression ) -> xml_general_default_part(expression=$expression.st))
			// PLSQLPrinter.g:2205:10: ^( SQL92_RESERVED_DEFAULT expression )
			{
			match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_xml_general_default_part23875); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xml_general_default_part23877);
			expression419=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2206:5: -> xml_general_default_part(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("xml_general_default_part",new STAttrMap().put("expression", (expression419!=null?((StringTemplate)expression419.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_general_default_part"


	public static class xml_multiuse_expression_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_multiuse_expression_element"
	// PLSQLPrinter.g:2209:1: xml_multiuse_expression_element : ^( XML_ELEMENT expression ( xml_alias )? ) -> xml_multiuse_expression_element(expression=$expression.stxml_alias=$xml_alias.st);
	public final PLSQLPrinter.xml_multiuse_expression_element_return xml_multiuse_expression_element() throws RecognitionException {
		PLSQLPrinter.xml_multiuse_expression_element_return retval = new PLSQLPrinter.xml_multiuse_expression_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression420 =null;
		TreeRuleReturnScope xml_alias421 =null;

		try {
			// PLSQLPrinter.g:2210:5: ( ^( XML_ELEMENT expression ( xml_alias )? ) -> xml_multiuse_expression_element(expression=$expression.stxml_alias=$xml_alias.st))
			// PLSQLPrinter.g:2210:10: ^( XML_ELEMENT expression ( xml_alias )? )
			{
			match(input,XML_ELEMENT,FOLLOW_XML_ELEMENT_in_xml_multiuse_expression_element23914); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xml_multiuse_expression_element23916);
			expression420=expression();
			state._fsp--;

			// PLSQLPrinter.g:2210:35: ( xml_alias )?
			int alt501=2;
			int LA501_0 = input.LA(1);
			if ( (LA501_0==XML_ALIAS) ) {
				alt501=1;
			}
			switch (alt501) {
				case 1 :
					// PLSQLPrinter.g:2210:35: xml_alias
					{
					pushFollow(FOLLOW_xml_alias_in_xml_multiuse_expression_element23918);
					xml_alias421=xml_alias();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2211:5: -> xml_multiuse_expression_element(expression=$expression.stxml_alias=$xml_alias.st)
			{
				retval.st = templateLib.getInstanceOf("xml_multiuse_expression_element",new STAttrMap().put("expression", (expression420!=null?((StringTemplate)expression420.getTemplate()):null)).put("xml_alias", (xml_alias421!=null?((StringTemplate)xml_alias421.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_multiuse_expression_element"


	public static class xml_alias_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_alias"
	// PLSQLPrinter.g:2214:1: xml_alias : ( ^( XML_ALIAS ID ) -> xml_alias_id(id=$ID.text)| ^( XML_ALIAS ^( EVALNAME_VK expression ) ) -> xml_alias_evalname(expression=$expression.st));
	public final PLSQLPrinter.xml_alias_return xml_alias() throws RecognitionException {
		PLSQLPrinter.xml_alias_return retval = new PLSQLPrinter.xml_alias_return();
		retval.start = input.LT(1);

		CommonTree ID422=null;
		TreeRuleReturnScope expression423 =null;

		try {
			// PLSQLPrinter.g:2215:5: ( ^( XML_ALIAS ID ) -> xml_alias_id(id=$ID.text)| ^( XML_ALIAS ^( EVALNAME_VK expression ) ) -> xml_alias_evalname(expression=$expression.st))
			int alt502=2;
			int LA502_0 = input.LA(1);
			if ( (LA502_0==XML_ALIAS) ) {
				int LA502_1 = input.LA(2);
				if ( (LA502_1==DOWN) ) {
					int LA502_2 = input.LA(3);
					if ( (LA502_2==ID) ) {
						alt502=1;
					}
					else if ( (LA502_2==EVALNAME_VK) ) {
						alt502=2;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 502, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 502, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 502, 0, input);
				throw nvae;
			}

			switch (alt502) {
				case 1 :
					// PLSQLPrinter.g:2215:10: ^( XML_ALIAS ID )
					{
					match(input,XML_ALIAS,FOLLOW_XML_ALIAS_in_xml_alias23961); 
					match(input, Token.DOWN, null); 
					ID422=(CommonTree)match(input,ID,FOLLOW_ID_in_xml_alias23963); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2215:26: -> xml_alias_id(id=$ID.text)
					{
						retval.st = templateLib.getInstanceOf("xml_alias_id",new STAttrMap().put("id", (ID422!=null?ID422.getText():null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2216:10: ^( XML_ALIAS ^( EVALNAME_VK expression ) )
					{
					match(input,XML_ALIAS,FOLLOW_XML_ALIAS_in_xml_alias23985); 
					match(input, Token.DOWN, null); 
					match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_xml_alias23988); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_xml_alias23990);
					expression423=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2217:5: -> xml_alias_evalname(expression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("xml_alias_evalname",new STAttrMap().put("expression", (expression423!=null?((StringTemplate)expression423.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_alias"


	public static class xml_param_version_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_param_version_part"
	// PLSQLPrinter.g:2220:1: xml_param_version_part : ^( VERSION_VK ( NO_VK VALUE_VK -> xml_param_version_part_novalue(| expression -> {$expression.st}) ) ;
	public final PLSQLPrinter.xml_param_version_part_return xml_param_version_part() throws RecognitionException {
		PLSQLPrinter.xml_param_version_part_return retval = new PLSQLPrinter.xml_param_version_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression424 =null;

		try {
			// PLSQLPrinter.g:2221:5: ( ^( VERSION_VK ( NO_VK VALUE_VK -> xml_param_version_part_novalue(| expression -> {$expression.st}) ) )
			// PLSQLPrinter.g:2221:10: ^( VERSION_VK ( NO_VK VALUE_VK -> xml_param_version_part_novalue(| expression -> {$expression.st}) )
			{
			match(input,VERSION_VK,FOLLOW_VERSION_VK_in_xml_param_version_part24028); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2222:13: ( NO_VK VALUE_VK -> xml_param_version_part_novalue(| expression -> {$expression.st})
			int alt503=2;
			int LA503_0 = input.LA(1);
			if ( (LA503_0==NO_VK) ) {
				alt503=1;
			}
			else if ( (LA503_0==EXPR||LA503_0==LOGIC_EXPR) ) {
				alt503=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 503, 0, input);
				throw nvae;
			}

			switch (alt503) {
				case 1 :
					// PLSQLPrinter.g:2223:15: NO_VK VALUE_VK
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xml_param_version_part24058); 
					match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xml_param_version_part24060); 
					// TEMPLATE REWRITE
					// 2223:30: -> xml_param_version_part_novalue(
					{
						retval.st = templateLib.getInstanceOf("xml_param_version_part_novalue");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2224:17: expression
					{
					pushFollow(FOLLOW_expression_in_xml_param_version_part24084);
					expression424=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 2224:28: -> {$expression.st}
					{
						retval.st = (expression424!=null?((StringTemplate)expression424.getTemplate()):null);
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_param_version_part"


	public static class xmlroot_param_standalone_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlroot_param_standalone_part"
	// PLSQLPrinter.g:2229:1: xmlroot_param_standalone_part : ^( STANDALONE_VK ( YES_VK -> xmlroot_param_standalone_part_yes(| NO_VK ( VALUE_VK -> xmlroot_param_standalone_part_no_value(| -> xmlroot_param_standalone_part_no() ) ) ;
	public final PLSQLPrinter.xmlroot_param_standalone_part_return xmlroot_param_standalone_part() throws RecognitionException {
		PLSQLPrinter.xmlroot_param_standalone_part_return retval = new PLSQLPrinter.xmlroot_param_standalone_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2230:5: ( ^( STANDALONE_VK ( YES_VK -> xmlroot_param_standalone_part_yes(| NO_VK ( VALUE_VK -> xmlroot_param_standalone_part_no_value(| -> xmlroot_param_standalone_part_no() ) ) )
			// PLSQLPrinter.g:2230:10: ^( STANDALONE_VK ( YES_VK -> xmlroot_param_standalone_part_yes(| NO_VK ( VALUE_VK -> xmlroot_param_standalone_part_no_value(| -> xmlroot_param_standalone_part_no() ) )
			{
			match(input,STANDALONE_VK,FOLLOW_STANDALONE_VK_in_xmlroot_param_standalone_part24135); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2231:13: ( YES_VK -> xmlroot_param_standalone_part_yes(| NO_VK ( VALUE_VK -> xmlroot_param_standalone_part_no_value(| -> xmlroot_param_standalone_part_no() )
			int alt505=2;
			int LA505_0 = input.LA(1);
			if ( (LA505_0==YES_VK) ) {
				alt505=1;
			}
			else if ( (LA505_0==NO_VK) ) {
				alt505=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 505, 0, input);
				throw nvae;
			}

			switch (alt505) {
				case 1 :
					// PLSQLPrinter.g:2232:15: YES_VK
					{
					match(input,YES_VK,FOLLOW_YES_VK_in_xmlroot_param_standalone_part24165); 
					// TEMPLATE REWRITE
					// 2232:22: -> xmlroot_param_standalone_part_yes(
					{
						retval.st = templateLib.getInstanceOf("xmlroot_param_standalone_part_yes");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2233:17: NO_VK ( VALUE_VK -> xmlroot_param_standalone_part_no_value(| -> xmlroot_param_standalone_part_no()
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xmlroot_param_standalone_part24189); 
					// PLSQLPrinter.g:2234:17: ( VALUE_VK -> xmlroot_param_standalone_part_no_value(| -> xmlroot_param_standalone_part_no()
					int alt504=2;
					int LA504_0 = input.LA(1);
					if ( (LA504_0==VALUE_VK) ) {
						alt504=1;
					}
					else if ( (LA504_0==UP) ) {
						alt504=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 504, 0, input);
						throw nvae;
					}

					switch (alt504) {
						case 1 :
							// PLSQLPrinter.g:2235:19: VALUE_VK
							{
							match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xmlroot_param_standalone_part24227); 
							// TEMPLATE REWRITE
							// 2235:28: -> xmlroot_param_standalone_part_no_value(
							{
								retval.st = templateLib.getInstanceOf("xmlroot_param_standalone_part_no_value");
							}



							}
							break;
						case 2 :
							// PLSQLPrinter.g:2236:22: 
							{
							// TEMPLATE REWRITE
							// 2236:22: -> xmlroot_param_standalone_part_no(
							{
								retval.st = templateLib.getInstanceOf("xmlroot_param_standalone_part_no");
							}



							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlroot_param_standalone_part"


	public static class xmlserialize_param_enconding_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlserialize_param_enconding_part"
	// PLSQLPrinter.g:2242:1: xmlserialize_param_enconding_part : ^( ENCODING_VK expression ) -> template( \"not implemented: xmlserialize_param_enconding_part\";
	public final PLSQLPrinter.xmlserialize_param_enconding_part_return xmlserialize_param_enconding_part() throws RecognitionException {
		PLSQLPrinter.xmlserialize_param_enconding_part_return retval = new PLSQLPrinter.xmlserialize_param_enconding_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2243:5: ( ^( ENCODING_VK expression ) -> template( \"not implemented: xmlserialize_param_enconding_part\")
			// PLSQLPrinter.g:2243:10: ^( ENCODING_VK expression )
			{
			match(input,ENCODING_VK,FOLLOW_ENCODING_VK_in_xmlserialize_param_enconding_part24325); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xmlserialize_param_enconding_part24327);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2244:5: -> template( \"not implemented: xmlserialize_param_enconding_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xmlserialize_param_enconding_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlserialize_param_enconding_part"


	public static class xmlserialize_param_ident_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlserialize_param_ident_part"
	// PLSQLPrinter.g:2247:1: xmlserialize_param_ident_part : ( NO_VK INDENT_VK -> template( \"not implemented: xmlserialize_param_ident_part\"| ^( INDENT_VK ( expression )? ) -> template( \"not implemented: xmlserialize_param_ident_part\");
	public final PLSQLPrinter.xmlserialize_param_ident_part_return xmlserialize_param_ident_part() throws RecognitionException {
		PLSQLPrinter.xmlserialize_param_ident_part_return retval = new PLSQLPrinter.xmlserialize_param_ident_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2248:5: ( NO_VK INDENT_VK -> template( \"not implemented: xmlserialize_param_ident_part\"| ^( INDENT_VK ( expression )? ) -> template( \"not implemented: xmlserialize_param_ident_part\")
			int alt507=2;
			int LA507_0 = input.LA(1);
			if ( (LA507_0==NO_VK) ) {
				alt507=1;
			}
			else if ( (LA507_0==INDENT_VK) ) {
				alt507=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 507, 0, input);
				throw nvae;
			}

			switch (alt507) {
				case 1 :
					// PLSQLPrinter.g:2248:10: NO_VK INDENT_VK
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xmlserialize_param_ident_part24362); 
					match(input,INDENT_VK,FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part24364); 
					// TEMPLATE REWRITE
					// 2249:5: -> template( \"not implemented: xmlserialize_param_ident_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: xmlserialize_param_ident_part");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2250:10: ^( INDENT_VK ( expression )? )
					{
					match(input,INDENT_VK,FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part24390); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:2250:22: ( expression )?
						int alt506=2;
						int LA506_0 = input.LA(1);
						if ( (LA506_0==EXPR||LA506_0==LOGIC_EXPR) ) {
							alt506=1;
						}
						switch (alt506) {
							case 1 :
								// PLSQLPrinter.g:2250:22: expression
								{
								pushFollow(FOLLOW_expression_in_xmlserialize_param_ident_part24392);
								expression();
								state._fsp--;

								}
								break;

						}

						match(input, Token.UP, null); 
					}

					// TEMPLATE REWRITE
					// 2251:5: -> template( \"not implemented: xmlserialize_param_ident_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: xmlserialize_param_ident_part");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlserialize_param_ident_part"


	public static class partition_extension_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "partition_extension_clause"
	// PLSQLPrinter.g:2258:1: partition_extension_clause : ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list ) -> template( \"not implemented: partition_extension_clause\";
	public final PLSQLPrinter.partition_extension_clause_return partition_extension_clause() throws RecognitionException {
		PLSQLPrinter.partition_extension_clause_return retval = new PLSQLPrinter.partition_extension_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2259:5: ( ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list ) -> template( \"not implemented: partition_extension_clause\")
			// PLSQLPrinter.g:2259:10: ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list )
			{
			// PLSQLPrinter.g:2259:12: ( SUBPARTITION_VK | PARTITION_VK )
			int alt508=2;
			int LA508_0 = input.LA(1);
			if ( (LA508_0==SUBPARTITION_VK) ) {
				alt508=1;
			}
			else if ( (LA508_0==PARTITION_VK) ) {
				alt508=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 508, 0, input);
				throw nvae;
			}

			switch (alt508) {
				case 1 :
					// PLSQLPrinter.g:2259:13: SUBPARTITION_VK
					{
					match(input,SUBPARTITION_VK,FOLLOW_SUBPARTITION_VK_in_partition_extension_clause24434); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2259:29: PARTITION_VK
					{
					match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_partition_extension_clause24436); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_list_in_partition_extension_clause24439);
			expression_list();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2260:5: -> template( \"not implemented: partition_extension_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: partition_extension_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_extension_clause"


	public static class alias_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alias"
	// PLSQLPrinter.g:2263:1: alias : ( ^( COLUMN_ALIAS ( char_set_name )? ID ) -> column_alias(name=$ID.text)| ^( TABLE_ALIAS ( char_set_name )? ID ) -> table_alias(name=$ID.text));
	public final PLSQLPrinter.alias_return alias() throws RecognitionException {
		PLSQLPrinter.alias_return retval = new PLSQLPrinter.alias_return();
		retval.start = input.LT(1);

		CommonTree ID425=null;
		CommonTree ID426=null;

		try {
			// PLSQLPrinter.g:2264:5: ( ^( COLUMN_ALIAS ( char_set_name )? ID ) -> column_alias(name=$ID.text)| ^( TABLE_ALIAS ( char_set_name )? ID ) -> table_alias(name=$ID.text))
			int alt511=2;
			int LA511_0 = input.LA(1);
			if ( (LA511_0==COLUMN_ALIAS) ) {
				alt511=1;
			}
			else if ( (LA511_0==TABLE_ALIAS) ) {
				alt511=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 511, 0, input);
				throw nvae;
			}

			switch (alt511) {
				case 1 :
					// PLSQLPrinter.g:2264:10: ^( COLUMN_ALIAS ( char_set_name )? ID )
					{
					match(input,COLUMN_ALIAS,FOLLOW_COLUMN_ALIAS_in_alias24475); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2264:25: ( char_set_name )?
					int alt509=2;
					int LA509_0 = input.LA(1);
					if ( (LA509_0==CHAR_SET_NAME) ) {
						alt509=1;
					}
					switch (alt509) {
						case 1 :
							// PLSQLPrinter.g:2264:25: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_alias24477);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					ID425=(CommonTree)match(input,ID,FOLLOW_ID_in_alias24480); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2265:5: -> column_alias(name=$ID.text)
					{
						retval.st = templateLib.getInstanceOf("column_alias",new STAttrMap().put("name", (ID425!=null?ID425.getText():null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2266:10: ^( TABLE_ALIAS ( char_set_name )? ID )
					{
					match(input,TABLE_ALIAS,FOLLOW_TABLE_ALIAS_in_alias24508); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2266:24: ( char_set_name )?
					int alt510=2;
					int LA510_0 = input.LA(1);
					if ( (LA510_0==CHAR_SET_NAME) ) {
						alt510=1;
					}
					switch (alt510) {
						case 1 :
							// PLSQLPrinter.g:2266:24: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_alias24510);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					ID426=(CommonTree)match(input,ID,FOLLOW_ID_in_alias24513); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2267:5: -> table_alias(name=$ID.text)
					{
						retval.st = templateLib.getInstanceOf("table_alias",new STAttrMap().put("name", (ID426!=null?ID426.getText():null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alias"


	public static class where_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "where_clause"
	// PLSQLPrinter.g:2270:1: where_clause : ^( SQL92_RESERVED_WHERE expression ) -> where_clause(expression=$expression.st);
	public final PLSQLPrinter.where_clause_return where_clause() throws RecognitionException {
		PLSQLPrinter.where_clause_return retval = new PLSQLPrinter.where_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression427 =null;

		try {
			// PLSQLPrinter.g:2271:5: ( ^( SQL92_RESERVED_WHERE expression ) -> where_clause(expression=$expression.st))
			// PLSQLPrinter.g:2271:10: ^( SQL92_RESERVED_WHERE expression )
			{
			match(input,SQL92_RESERVED_WHERE,FOLLOW_SQL92_RESERVED_WHERE_in_where_clause24550); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_where_clause24552);
			expression427=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2272:5: -> where_clause(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("where_clause",new STAttrMap().put("expression", (expression427!=null?((StringTemplate)expression427.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "where_clause"


	public static class into_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "into_clause"
	// PLSQLPrinter.g:2275:1: into_clause : ( ^( SQL92_RESERVED_INTO (elements+= general_element )+ ) -> into_clause(is_bulk_collect=falsegeneral_elements=$elements)| ^( BULK_VK (elements+= general_element )+ ) -> into_clause(is_bulk_collect=truegeneral_elements=$elements));
	public final PLSQLPrinter.into_clause_return into_clause() throws RecognitionException {
		PLSQLPrinter.into_clause_return retval = new PLSQLPrinter.into_clause_return();
		retval.start = input.LT(1);

		List<Object> list_elements=null;
		RuleReturnScope elements = null;
		try {
			// PLSQLPrinter.g:2276:5: ( ^( SQL92_RESERVED_INTO (elements+= general_element )+ ) -> into_clause(is_bulk_collect=falsegeneral_elements=$elements)| ^( BULK_VK (elements+= general_element )+ ) -> into_clause(is_bulk_collect=truegeneral_elements=$elements))
			int alt514=2;
			int LA514_0 = input.LA(1);
			if ( (LA514_0==SQL92_RESERVED_INTO) ) {
				alt514=1;
			}
			else if ( (LA514_0==BULK_VK) ) {
				alt514=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 514, 0, input);
				throw nvae;
			}

			switch (alt514) {
				case 1 :
					// PLSQLPrinter.g:2276:10: ^( SQL92_RESERVED_INTO (elements+= general_element )+ )
					{
					match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_into_clause24589); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2276:40: (elements+= general_element )+
					int cnt512=0;
					loop512:
					while (true) {
						int alt512=2;
						int LA512_0 = input.LA(1);
						if ( (LA512_0==CASCATED_ELEMENT) ) {
							alt512=1;
						}

						switch (alt512) {
						case 1 :
							// PLSQLPrinter.g:2276:40: elements+= general_element
							{
							pushFollow(FOLLOW_general_element_in_into_clause24593);
							elements=general_element();
							state._fsp--;

							if (list_elements==null) list_elements=new ArrayList<Object>();
							list_elements.add(elements.getTemplate());
							}
							break;

						default :
							if ( cnt512 >= 1 ) break loop512;
							EarlyExitException eee = new EarlyExitException(512, input);
							throw eee;
						}
						cnt512++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2277:5: -> into_clause(is_bulk_collect=falsegeneral_elements=$elements)
					{
						retval.st = templateLib.getInstanceOf("into_clause",new STAttrMap().put("is_bulk_collect", false).put("general_elements", list_elements));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2278:10: ^( BULK_VK (elements+= general_element )+ )
					{
					match(input,BULK_VK,FOLLOW_BULK_VK_in_into_clause24628); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2278:28: (elements+= general_element )+
					int cnt513=0;
					loop513:
					while (true) {
						int alt513=2;
						int LA513_0 = input.LA(1);
						if ( (LA513_0==CASCATED_ELEMENT) ) {
							alt513=1;
						}

						switch (alt513) {
						case 1 :
							// PLSQLPrinter.g:2278:28: elements+= general_element
							{
							pushFollow(FOLLOW_general_element_in_into_clause24632);
							elements=general_element();
							state._fsp--;

							if (list_elements==null) list_elements=new ArrayList<Object>();
							list_elements.add(elements.getTemplate());
							}
							break;

						default :
							if ( cnt513 >= 1 ) break loop513;
							EarlyExitException eee = new EarlyExitException(513, input);
							throw eee;
						}
						cnt513++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2279:5: -> into_clause(is_bulk_collect=truegeneral_elements=$elements)
					{
						retval.st = templateLib.getInstanceOf("into_clause",new STAttrMap().put("is_bulk_collect", true).put("general_elements", list_elements));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "into_clause"


	public static class xml_column_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_column_name"
	// PLSQLPrinter.g:2286:1: xml_column_name : ^( XML_COLUMN_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.xml_column_name_return xml_column_name() throws RecognitionException {
		PLSQLPrinter.xml_column_name_return retval = new PLSQLPrinter.xml_column_name_return();
		retval.start = input.LT(1);

		CommonTree ID428=null;

		try {
			// PLSQLPrinter.g:2287:5: ( ^( XML_COLUMN_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2287:10: ^( XML_COLUMN_NAME ( char_set_name )? ID )
			{
			match(input,XML_COLUMN_NAME,FOLLOW_XML_COLUMN_NAME_in_xml_column_name24680); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2287:28: ( char_set_name )?
			int alt515=2;
			int LA515_0 = input.LA(1);
			if ( (LA515_0==CHAR_SET_NAME) ) {
				alt515=1;
			}
			switch (alt515) {
				case 1 :
					// PLSQLPrinter.g:2287:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_xml_column_name24682);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID428=(CommonTree)match(input,ID,FOLLOW_ID_in_xml_column_name24685); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2287:47: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID428!=null?ID428.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_column_name"


	public static class cost_class_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cost_class_name"
	// PLSQLPrinter.g:2290:1: cost_class_name : ^( COST_CLASS_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.cost_class_name_return cost_class_name() throws RecognitionException {
		PLSQLPrinter.cost_class_name_return retval = new PLSQLPrinter.cost_class_name_return();
		retval.start = input.LT(1);

		CommonTree ID429=null;

		try {
			// PLSQLPrinter.g:2291:5: ( ^( COST_CLASS_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2291:10: ^( COST_CLASS_NAME ( char_set_name )? ID )
			{
			match(input,COST_CLASS_NAME,FOLLOW_COST_CLASS_NAME_in_cost_class_name24716); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2291:28: ( char_set_name )?
			int alt516=2;
			int LA516_0 = input.LA(1);
			if ( (LA516_0==CHAR_SET_NAME) ) {
				alt516=1;
			}
			switch (alt516) {
				case 1 :
					// PLSQLPrinter.g:2291:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_cost_class_name24718);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID429=(CommonTree)match(input,ID,FOLLOW_ID_in_cost_class_name24721); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2291:47: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID429!=null?ID429.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cost_class_name"


	public static class attribute_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "attribute_name"
	// PLSQLPrinter.g:2294:1: attribute_name : ^( ATTRIBUTE_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.attribute_name_return attribute_name() throws RecognitionException {
		PLSQLPrinter.attribute_name_return retval = new PLSQLPrinter.attribute_name_return();
		retval.start = input.LT(1);

		CommonTree ID430=null;

		try {
			// PLSQLPrinter.g:2295:5: ( ^( ATTRIBUTE_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2295:10: ^( ATTRIBUTE_NAME ( char_set_name )? ID )
			{
			match(input,ATTRIBUTE_NAME,FOLLOW_ATTRIBUTE_NAME_in_attribute_name24752); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2295:27: ( char_set_name )?
			int alt517=2;
			int LA517_0 = input.LA(1);
			if ( (LA517_0==CHAR_SET_NAME) ) {
				alt517=1;
			}
			switch (alt517) {
				case 1 :
					// PLSQLPrinter.g:2295:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_attribute_name24754);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID430=(CommonTree)match(input,ID,FOLLOW_ID_in_attribute_name24757); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2295:46: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID430!=null?ID430.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "attribute_name"


	public static class savepoint_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "savepoint_name"
	// PLSQLPrinter.g:2298:1: savepoint_name : ^( SAVEPOINT_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.savepoint_name_return savepoint_name() throws RecognitionException {
		PLSQLPrinter.savepoint_name_return retval = new PLSQLPrinter.savepoint_name_return();
		retval.start = input.LT(1);

		CommonTree ID431=null;

		try {
			// PLSQLPrinter.g:2299:5: ( ^( SAVEPOINT_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2299:10: ^( SAVEPOINT_NAME ( char_set_name )? ID )
			{
			match(input,SAVEPOINT_NAME,FOLLOW_SAVEPOINT_NAME_in_savepoint_name24788); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2299:27: ( char_set_name )?
			int alt518=2;
			int LA518_0 = input.LA(1);
			if ( (LA518_0==CHAR_SET_NAME) ) {
				alt518=1;
			}
			switch (alt518) {
				case 1 :
					// PLSQLPrinter.g:2299:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_savepoint_name24790);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID431=(CommonTree)match(input,ID,FOLLOW_ID_in_savepoint_name24793); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2299:46: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID431!=null?ID431.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "savepoint_name"


	public static class rollback_segment_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "rollback_segment_name"
	// PLSQLPrinter.g:2302:1: rollback_segment_name : ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.rollback_segment_name_return rollback_segment_name() throws RecognitionException {
		PLSQLPrinter.rollback_segment_name_return retval = new PLSQLPrinter.rollback_segment_name_return();
		retval.start = input.LT(1);

		CommonTree ID432=null;

		try {
			// PLSQLPrinter.g:2303:5: ( ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2303:10: ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID )
			{
			match(input,ROLLBACK_SEGMENT_NAME,FOLLOW_ROLLBACK_SEGMENT_NAME_in_rollback_segment_name24824); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2303:34: ( char_set_name )?
			int alt519=2;
			int LA519_0 = input.LA(1);
			if ( (LA519_0==CHAR_SET_NAME) ) {
				alt519=1;
			}
			switch (alt519) {
				case 1 :
					// PLSQLPrinter.g:2303:34: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_rollback_segment_name24826);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID432=(CommonTree)match(input,ID,FOLLOW_ID_in_rollback_segment_name24829); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2303:53: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID432!=null?ID432.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rollback_segment_name"


	public static class table_var_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_var_name"
	// PLSQLPrinter.g:2307:1: table_var_name : ^( TABLE_VAR_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.table_var_name_return table_var_name() throws RecognitionException {
		PLSQLPrinter.table_var_name_return retval = new PLSQLPrinter.table_var_name_return();
		retval.start = input.LT(1);

		CommonTree ID433=null;

		try {
			// PLSQLPrinter.g:2308:5: ( ^( TABLE_VAR_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2308:10: ^( TABLE_VAR_NAME ( char_set_name )? ID )
			{
			match(input,TABLE_VAR_NAME,FOLLOW_TABLE_VAR_NAME_in_table_var_name24861); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2308:27: ( char_set_name )?
			int alt520=2;
			int LA520_0 = input.LA(1);
			if ( (LA520_0==CHAR_SET_NAME) ) {
				alt520=1;
			}
			switch (alt520) {
				case 1 :
					// PLSQLPrinter.g:2308:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_table_var_name24863);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID433=(CommonTree)match(input,ID,FOLLOW_ID_in_table_var_name24866); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2308:46: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID433!=null?ID433.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_var_name"


	public static class schema_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "schema_name"
	// PLSQLPrinter.g:2311:1: schema_name : ^( SCHEMA_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.schema_name_return schema_name() throws RecognitionException {
		PLSQLPrinter.schema_name_return retval = new PLSQLPrinter.schema_name_return();
		retval.start = input.LT(1);

		CommonTree ID434=null;

		try {
			// PLSQLPrinter.g:2312:5: ( ^( SCHEMA_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2312:10: ^( SCHEMA_NAME ( char_set_name )? ID )
			{
			match(input,SCHEMA_NAME,FOLLOW_SCHEMA_NAME_in_schema_name24897); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2312:24: ( char_set_name )?
			int alt521=2;
			int LA521_0 = input.LA(1);
			if ( (LA521_0==CHAR_SET_NAME) ) {
				alt521=1;
			}
			switch (alt521) {
				case 1 :
					// PLSQLPrinter.g:2312:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_schema_name24899);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID434=(CommonTree)match(input,ID,FOLLOW_ID_in_schema_name24902); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2312:43: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID434!=null?ID434.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "schema_name"


	public static class routine_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "routine_name"
	// PLSQLPrinter.g:2315:1: routine_name : ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? ) -> template( \"not implemented: routine_name\";
	public final PLSQLPrinter.routine_name_return routine_name() throws RecognitionException {
		PLSQLPrinter.routine_name_return retval = new PLSQLPrinter.routine_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2316:5: ( ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? ) -> template( \"not implemented: routine_name\")
			// PLSQLPrinter.g:2316:10: ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? )
			{
			match(input,ROUTINE_NAME,FOLLOW_ROUTINE_NAME_in_routine_name24933); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2316:25: ( char_set_name )?
			int alt522=2;
			int LA522_0 = input.LA(1);
			if ( (LA522_0==CHAR_SET_NAME) ) {
				alt522=1;
			}
			switch (alt522) {
				case 1 :
					// PLSQLPrinter.g:2316:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_routine_name24935);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2316:40: ( ID )+
			int cnt523=0;
			loop523:
			while (true) {
				int alt523=2;
				int LA523_0 = input.LA(1);
				if ( (LA523_0==ID) ) {
					alt523=1;
				}

				switch (alt523) {
				case 1 :
					// PLSQLPrinter.g:2316:40: ID
					{
					match(input,ID,FOLLOW_ID_in_routine_name24938); 
					}
					break;

				default :
					if ( cnt523 >= 1 ) break loop523;
					EarlyExitException eee = new EarlyExitException(523, input);
					throw eee;
				}
				cnt523++;
			}

			// PLSQLPrinter.g:2316:44: ( link_name )?
			int alt524=2;
			int LA524_0 = input.LA(1);
			if ( (LA524_0==LINK_NAME) ) {
				alt524=1;
			}
			switch (alt524) {
				case 1 :
					// PLSQLPrinter.g:2316:44: link_name
					{
					pushFollow(FOLLOW_link_name_in_routine_name24941);
					link_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2317:5: -> template( \"not implemented: routine_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: routine_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "routine_name"


	public static class package_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "package_name"
	// PLSQLPrinter.g:2320:1: package_name : ^( PACKAGE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.package_name_return package_name() throws RecognitionException {
		PLSQLPrinter.package_name_return retval = new PLSQLPrinter.package_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2321:5: ( ^( PACKAGE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2321:10: ^( PACKAGE_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,PACKAGE_NAME,FOLLOW_PACKAGE_NAME_in_package_name24978); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2321:25: ( char_set_name )?
			int alt525=2;
			int LA525_0 = input.LA(1);
			if ( (LA525_0==CHAR_SET_NAME) ) {
				alt525=1;
			}
			switch (alt525) {
				case 1 :
					// PLSQLPrinter.g:2321:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_package_name24980);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2321:43: (ids+= ID )+
			int cnt526=0;
			loop526:
			while (true) {
				int alt526=2;
				int LA526_0 = input.LA(1);
				if ( (LA526_0==ID) ) {
					alt526=1;
				}

				switch (alt526) {
				case 1 :
					// PLSQLPrinter.g:2321:43: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_package_name24985); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt526 >= 1 ) break loop526;
					EarlyExitException eee = new EarlyExitException(526, input);
					throw eee;
				}
				cnt526++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2322:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_name"


	public static class implementation_type_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "implementation_type_name"
	// PLSQLPrinter.g:2325:1: implementation_type_name : ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.implementation_type_name_return implementation_type_name() throws RecognitionException {
		PLSQLPrinter.implementation_type_name_return retval = new PLSQLPrinter.implementation_type_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2326:5: ( ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2326:10: ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,IMPLEMENTATION_TYPE_NAME,FOLLOW_IMPLEMENTATION_TYPE_NAME_in_implementation_type_name25023); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2326:37: ( char_set_name )?
			int alt527=2;
			int LA527_0 = input.LA(1);
			if ( (LA527_0==CHAR_SET_NAME) ) {
				alt527=1;
			}
			switch (alt527) {
				case 1 :
					// PLSQLPrinter.g:2326:37: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_implementation_type_name25025);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2326:55: (ids+= ID )+
			int cnt528=0;
			loop528:
			while (true) {
				int alt528=2;
				int LA528_0 = input.LA(1);
				if ( (LA528_0==ID) ) {
					alt528=1;
				}

				switch (alt528) {
				case 1 :
					// PLSQLPrinter.g:2326:55: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_implementation_type_name25030); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt528 >= 1 ) break loop528;
					EarlyExitException eee = new EarlyExitException(528, input);
					throw eee;
				}
				cnt528++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2327:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "implementation_type_name"


	public static class parameter_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parameter_name"
	// PLSQLPrinter.g:2330:1: parameter_name : ^( PARAMETER_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.parameter_name_return parameter_name() throws RecognitionException {
		PLSQLPrinter.parameter_name_return retval = new PLSQLPrinter.parameter_name_return();
		retval.start = input.LT(1);

		CommonTree ID435=null;

		try {
			// PLSQLPrinter.g:2331:5: ( ^( PARAMETER_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2331:10: ^( PARAMETER_NAME ( char_set_name )? ID )
			{
			match(input,PARAMETER_NAME,FOLLOW_PARAMETER_NAME_in_parameter_name25068); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2331:27: ( char_set_name )?
			int alt529=2;
			int LA529_0 = input.LA(1);
			if ( (LA529_0==CHAR_SET_NAME) ) {
				alt529=1;
			}
			switch (alt529) {
				case 1 :
					// PLSQLPrinter.g:2331:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_parameter_name25070);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID435=(CommonTree)match(input,ID,FOLLOW_ID_in_parameter_name25073); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2332:5: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID435!=null?ID435.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter_name"


	public static class reference_model_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "reference_model_name"
	// PLSQLPrinter.g:2335:1: reference_model_name : ^( REFERENCE_MODEL_NAME ( char_set_name )? ID ) -> template( \"not implemented: reference_model_name\";
	public final PLSQLPrinter.reference_model_name_return reference_model_name() throws RecognitionException {
		PLSQLPrinter.reference_model_name_return retval = new PLSQLPrinter.reference_model_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2336:5: ( ^( REFERENCE_MODEL_NAME ( char_set_name )? ID ) -> template( \"not implemented: reference_model_name\")
			// PLSQLPrinter.g:2336:10: ^( REFERENCE_MODEL_NAME ( char_set_name )? ID )
			{
			match(input,REFERENCE_MODEL_NAME,FOLLOW_REFERENCE_MODEL_NAME_in_reference_model_name25110); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2336:33: ( char_set_name )?
			int alt530=2;
			int LA530_0 = input.LA(1);
			if ( (LA530_0==CHAR_SET_NAME) ) {
				alt530=1;
			}
			switch (alt530) {
				case 1 :
					// PLSQLPrinter.g:2336:33: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_reference_model_name25112);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_reference_model_name25115); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2337:5: -> template( \"not implemented: reference_model_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: reference_model_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reference_model_name"


	public static class main_model_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "main_model_name"
	// PLSQLPrinter.g:2340:1: main_model_name : ^( MAIN_MODEL_NAME ( char_set_name )? ID ) -> template( \"not implemented: main_model_name\";
	public final PLSQLPrinter.main_model_name_return main_model_name() throws RecognitionException {
		PLSQLPrinter.main_model_name_return retval = new PLSQLPrinter.main_model_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2341:5: ( ^( MAIN_MODEL_NAME ( char_set_name )? ID ) -> template( \"not implemented: main_model_name\")
			// PLSQLPrinter.g:2341:10: ^( MAIN_MODEL_NAME ( char_set_name )? ID )
			{
			match(input,MAIN_MODEL_NAME,FOLLOW_MAIN_MODEL_NAME_in_main_model_name25151); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2341:28: ( char_set_name )?
			int alt531=2;
			int LA531_0 = input.LA(1);
			if ( (LA531_0==CHAR_SET_NAME) ) {
				alt531=1;
			}
			switch (alt531) {
				case 1 :
					// PLSQLPrinter.g:2341:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_main_model_name25153);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_main_model_name25156); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2342:5: -> template( \"not implemented: main_model_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: main_model_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "main_model_name"


	public static class query_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_name"
	// PLSQLPrinter.g:2345:1: query_name : ^( QUERY_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.query_name_return query_name() throws RecognitionException {
		PLSQLPrinter.query_name_return retval = new PLSQLPrinter.query_name_return();
		retval.start = input.LT(1);

		CommonTree ID436=null;

		try {
			// PLSQLPrinter.g:2346:5: ( ^( QUERY_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2346:10: ^( QUERY_NAME ( char_set_name )? ID )
			{
			match(input,QUERY_NAME,FOLLOW_QUERY_NAME_in_query_name25192); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2346:23: ( char_set_name )?
			int alt532=2;
			int LA532_0 = input.LA(1);
			if ( (LA532_0==CHAR_SET_NAME) ) {
				alt532=1;
			}
			switch (alt532) {
				case 1 :
					// PLSQLPrinter.g:2346:23: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_query_name25194);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID436=(CommonTree)match(input,ID,FOLLOW_ID_in_query_name25197); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2346:42: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID436!=null?ID436.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_name"


	public static class constraint_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constraint_name"
	// PLSQLPrinter.g:2349:1: constraint_name : ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? ) -> template( \"not implemented: constraint_name\";
	public final PLSQLPrinter.constraint_name_return constraint_name() throws RecognitionException {
		PLSQLPrinter.constraint_name_return retval = new PLSQLPrinter.constraint_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2350:5: ( ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? ) -> template( \"not implemented: constraint_name\")
			// PLSQLPrinter.g:2350:10: ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? )
			{
			match(input,CONSTRAINT_NAME,FOLLOW_CONSTRAINT_NAME_in_constraint_name25228); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2350:28: ( char_set_name )?
			int alt533=2;
			int LA533_0 = input.LA(1);
			if ( (LA533_0==CHAR_SET_NAME) ) {
				alt533=1;
			}
			switch (alt533) {
				case 1 :
					// PLSQLPrinter.g:2350:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_constraint_name25230);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2350:43: ( ID )+
			int cnt534=0;
			loop534:
			while (true) {
				int alt534=2;
				int LA534_0 = input.LA(1);
				if ( (LA534_0==ID) ) {
					alt534=1;
				}

				switch (alt534) {
				case 1 :
					// PLSQLPrinter.g:2350:43: ID
					{
					match(input,ID,FOLLOW_ID_in_constraint_name25233); 
					}
					break;

				default :
					if ( cnt534 >= 1 ) break loop534;
					EarlyExitException eee = new EarlyExitException(534, input);
					throw eee;
				}
				cnt534++;
			}

			// PLSQLPrinter.g:2350:47: ( link_name )?
			int alt535=2;
			int LA535_0 = input.LA(1);
			if ( (LA535_0==LINK_NAME) ) {
				alt535=1;
			}
			switch (alt535) {
				case 1 :
					// PLSQLPrinter.g:2350:47: link_name
					{
					pushFollow(FOLLOW_link_name_in_constraint_name25236);
					link_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2351:5: -> template( \"not implemented: constraint_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: constraint_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constraint_name"


	public static class label_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "label_name"
	// PLSQLPrinter.g:2354:1: label_name : ^( LABEL_NAME ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.label_name_return label_name() throws RecognitionException {
		PLSQLPrinter.label_name_return retval = new PLSQLPrinter.label_name_return();
		retval.start = input.LT(1);

		CommonTree ID437=null;

		try {
			// PLSQLPrinter.g:2355:5: ( ^( LABEL_NAME ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2355:10: ^( LABEL_NAME ID )
			{
			match(input,LABEL_NAME,FOLLOW_LABEL_NAME_in_label_name25273); 
			match(input, Token.DOWN, null); 
			ID437=(CommonTree)match(input,ID,FOLLOW_ID_in_label_name25275); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2355:27: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID437!=null?ID437.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "label_name"


	public static class type_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_name"
	// PLSQLPrinter.g:2358:1: type_name : ^( TYPE_NAME (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.type_name_return type_name() throws RecognitionException {
		PLSQLPrinter.type_name_return retval = new PLSQLPrinter.type_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2359:5: ( ^( TYPE_NAME (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2359:10: ^( TYPE_NAME (ids+= ID )+ )
			{
			match(input,TYPE_NAME,FOLLOW_TYPE_NAME_in_type_name25306); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2359:25: (ids+= ID )+
			int cnt536=0;
			loop536:
			while (true) {
				int alt536=2;
				int LA536_0 = input.LA(1);
				if ( (LA536_0==ID) ) {
					alt536=1;
				}

				switch (alt536) {
				case 1 :
					// PLSQLPrinter.g:2359:25: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_type_name25310); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt536 >= 1 ) break loop536;
					EarlyExitException eee = new EarlyExitException(536, input);
					throw eee;
				}
				cnt536++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2360:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_name"


	public static class sequence_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sequence_name"
	// PLSQLPrinter.g:2363:1: sequence_name : ^( SEQUENCE_NAME ( ID )+ ) -> template( \"not implemented: sequence_name\";
	public final PLSQLPrinter.sequence_name_return sequence_name() throws RecognitionException {
		PLSQLPrinter.sequence_name_return retval = new PLSQLPrinter.sequence_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2364:5: ( ^( SEQUENCE_NAME ( ID )+ ) -> template( \"not implemented: sequence_name\")
			// PLSQLPrinter.g:2364:10: ^( SEQUENCE_NAME ( ID )+ )
			{
			match(input,SEQUENCE_NAME,FOLLOW_SEQUENCE_NAME_in_sequence_name25348); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2364:26: ( ID )+
			int cnt537=0;
			loop537:
			while (true) {
				int alt537=2;
				int LA537_0 = input.LA(1);
				if ( (LA537_0==ID) ) {
					alt537=1;
				}

				switch (alt537) {
				case 1 :
					// PLSQLPrinter.g:2364:26: ID
					{
					match(input,ID,FOLLOW_ID_in_sequence_name25350); 
					}
					break;

				default :
					if ( cnt537 >= 1 ) break loop537;
					EarlyExitException eee = new EarlyExitException(537, input);
					throw eee;
				}
				cnt537++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2365:5: -> template( \"not implemented: sequence_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: sequence_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sequence_name"


	public static class exception_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_name"
	// PLSQLPrinter.g:2368:1: exception_name : ^( EXCEPTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.exception_name_return exception_name() throws RecognitionException {
		PLSQLPrinter.exception_name_return retval = new PLSQLPrinter.exception_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2369:5: ( ^( EXCEPTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2369:10: ^( EXCEPTION_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,EXCEPTION_NAME,FOLLOW_EXCEPTION_NAME_in_exception_name25387); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2369:27: ( char_set_name )?
			int alt538=2;
			int LA538_0 = input.LA(1);
			if ( (LA538_0==CHAR_SET_NAME) ) {
				alt538=1;
			}
			switch (alt538) {
				case 1 :
					// PLSQLPrinter.g:2369:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_exception_name25389);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2369:45: (ids+= ID )+
			int cnt539=0;
			loop539:
			while (true) {
				int alt539=2;
				int LA539_0 = input.LA(1);
				if ( (LA539_0==ID) ) {
					alt539=1;
				}

				switch (alt539) {
				case 1 :
					// PLSQLPrinter.g:2369:45: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_exception_name25394); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt539 >= 1 ) break loop539;
					EarlyExitException eee = new EarlyExitException(539, input);
					throw eee;
				}
				cnt539++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2370:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_name"


	public static class function_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "function_name"
	// PLSQLPrinter.g:2373:1: function_name : ^( FUNCTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.function_name_return function_name() throws RecognitionException {
		PLSQLPrinter.function_name_return retval = new PLSQLPrinter.function_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2374:5: ( ^( FUNCTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2374:10: ^( FUNCTION_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,FUNCTION_NAME,FOLLOW_FUNCTION_NAME_in_function_name25432); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2374:26: ( char_set_name )?
			int alt540=2;
			int LA540_0 = input.LA(1);
			if ( (LA540_0==CHAR_SET_NAME) ) {
				alt540=1;
			}
			switch (alt540) {
				case 1 :
					// PLSQLPrinter.g:2374:26: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_function_name25434);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2374:44: (ids+= ID )+
			int cnt541=0;
			loop541:
			while (true) {
				int alt541=2;
				int LA541_0 = input.LA(1);
				if ( (LA541_0==ID) ) {
					alt541=1;
				}

				switch (alt541) {
				case 1 :
					// PLSQLPrinter.g:2374:44: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_function_name25439); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt541 >= 1 ) break loop541;
					EarlyExitException eee = new EarlyExitException(541, input);
					throw eee;
				}
				cnt541++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2375:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_name"


	public static class procedure_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "procedure_name"
	// PLSQLPrinter.g:2378:1: procedure_name : ^( PROCEDURE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.procedure_name_return procedure_name() throws RecognitionException {
		PLSQLPrinter.procedure_name_return retval = new PLSQLPrinter.procedure_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2379:5: ( ^( PROCEDURE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2379:10: ^( PROCEDURE_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,PROCEDURE_NAME,FOLLOW_PROCEDURE_NAME_in_procedure_name25477); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2379:27: ( char_set_name )?
			int alt542=2;
			int LA542_0 = input.LA(1);
			if ( (LA542_0==CHAR_SET_NAME) ) {
				alt542=1;
			}
			switch (alt542) {
				case 1 :
					// PLSQLPrinter.g:2379:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_procedure_name25479);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2379:45: (ids+= ID )+
			int cnt543=0;
			loop543:
			while (true) {
				int alt543=2;
				int LA543_0 = input.LA(1);
				if ( (LA543_0==ID) ) {
					alt543=1;
				}

				switch (alt543) {
				case 1 :
					// PLSQLPrinter.g:2379:45: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_procedure_name25484); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt543 >= 1 ) break loop543;
					EarlyExitException eee = new EarlyExitException(543, input);
					throw eee;
				}
				cnt543++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2380:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "procedure_name"


	public static class trigger_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_name"
	// PLSQLPrinter.g:2383:1: trigger_name : ^( TRIGGER_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.trigger_name_return trigger_name() throws RecognitionException {
		PLSQLPrinter.trigger_name_return retval = new PLSQLPrinter.trigger_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2384:5: ( ^( TRIGGER_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2384:10: ^( TRIGGER_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,TRIGGER_NAME,FOLLOW_TRIGGER_NAME_in_trigger_name25522); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2384:25: ( char_set_name )?
			int alt544=2;
			int LA544_0 = input.LA(1);
			if ( (LA544_0==CHAR_SET_NAME) ) {
				alt544=1;
			}
			switch (alt544) {
				case 1 :
					// PLSQLPrinter.g:2384:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_trigger_name25524);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2384:43: (ids+= ID )+
			int cnt545=0;
			loop545:
			while (true) {
				int alt545=2;
				int LA545_0 = input.LA(1);
				if ( (LA545_0==ID) ) {
					alt545=1;
				}

				switch (alt545) {
				case 1 :
					// PLSQLPrinter.g:2384:43: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_trigger_name25529); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt545 >= 1 ) break loop545;
					EarlyExitException eee = new EarlyExitException(545, input);
					throw eee;
				}
				cnt545++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2385:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_name"


	public static class hosted_variable_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "hosted_variable_name"
	// PLSQLPrinter.g:2388:1: hosted_variable_name : ^( HOSTED_VARIABLE_NAME ( BINDVAR -> string_literal(val=$BINDVAR.text)| UNSIGNED_INTEGER -> string_literal(val= \":\" + $UNSIGNED_INTEGER.text)) ) ;
	public final PLSQLPrinter.hosted_variable_name_return hosted_variable_name() throws RecognitionException {
		PLSQLPrinter.hosted_variable_name_return retval = new PLSQLPrinter.hosted_variable_name_return();
		retval.start = input.LT(1);

		CommonTree BINDVAR438=null;
		CommonTree UNSIGNED_INTEGER439=null;

		try {
			// PLSQLPrinter.g:2389:5: ( ^( HOSTED_VARIABLE_NAME ( BINDVAR -> string_literal(val=$BINDVAR.text)| UNSIGNED_INTEGER -> string_literal(val= \":\" + $UNSIGNED_INTEGER.text)) ) )
			// PLSQLPrinter.g:2389:10: ^( HOSTED_VARIABLE_NAME ( BINDVAR -> string_literal(val=$BINDVAR.text)| UNSIGNED_INTEGER -> string_literal(val= \":\" + $UNSIGNED_INTEGER.text)) )
			{
			match(input,HOSTED_VARIABLE_NAME,FOLLOW_HOSTED_VARIABLE_NAME_in_hosted_variable_name25571); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2390:13: ( BINDVAR -> string_literal(val=$BINDVAR.text)| UNSIGNED_INTEGER -> string_literal(val= \":\" + $UNSIGNED_INTEGER.text))
			int alt546=2;
			int LA546_0 = input.LA(1);
			if ( (LA546_0==BINDVAR) ) {
				alt546=1;
			}
			else if ( (LA546_0==UNSIGNED_INTEGER) ) {
				alt546=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 546, 0, input);
				throw nvae;
			}

			switch (alt546) {
				case 1 :
					// PLSQLPrinter.g:2391:15: BINDVAR
					{
					BINDVAR438=(CommonTree)match(input,BINDVAR,FOLLOW_BINDVAR_in_hosted_variable_name25601); 
					// TEMPLATE REWRITE
					// 2391:23: -> string_literal(val=$BINDVAR.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (BINDVAR438!=null?BINDVAR438.getText():null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2392:16: UNSIGNED_INTEGER
					{
					UNSIGNED_INTEGER439=(CommonTree)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_hosted_variable_name25627); 
					// TEMPLATE REWRITE
					// 2392:33: -> string_literal(val= \":\" + $UNSIGNED_INTEGER.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val",  ":" + (UNSIGNED_INTEGER439!=null?UNSIGNED_INTEGER439.getText():null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "hosted_variable_name"


	public static class variable_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "variable_name"
	// PLSQLPrinter.g:2397:1: variable_name : ^( VARIABLE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.variable_name_return variable_name() throws RecognitionException {
		PLSQLPrinter.variable_name_return retval = new PLSQLPrinter.variable_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2398:5: ( ^( VARIABLE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2398:10: ^( VARIABLE_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,VARIABLE_NAME,FOLLOW_VARIABLE_NAME_in_variable_name25683); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2398:26: ( char_set_name )?
			int alt547=2;
			int LA547_0 = input.LA(1);
			if ( (LA547_0==CHAR_SET_NAME) ) {
				alt547=1;
			}
			switch (alt547) {
				case 1 :
					// PLSQLPrinter.g:2398:26: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_variable_name25685);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2398:44: (ids+= ID )+
			int cnt548=0;
			loop548:
			while (true) {
				int alt548=2;
				int LA548_0 = input.LA(1);
				if ( (LA548_0==ID) ) {
					alt548=1;
				}

				switch (alt548) {
				case 1 :
					// PLSQLPrinter.g:2398:44: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_variable_name25690); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt548 >= 1 ) break loop548;
					EarlyExitException eee = new EarlyExitException(548, input);
					throw eee;
				}
				cnt548++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2399:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "variable_name"


	public static class index_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "index_name"
	// PLSQLPrinter.g:2402:1: index_name : ^( INDEX_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.index_name_return index_name() throws RecognitionException {
		PLSQLPrinter.index_name_return retval = new PLSQLPrinter.index_name_return();
		retval.start = input.LT(1);

		CommonTree ID440=null;

		try {
			// PLSQLPrinter.g:2403:5: ( ^( INDEX_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2403:10: ^( INDEX_NAME ( char_set_name )? ID )
			{
			match(input,INDEX_NAME,FOLLOW_INDEX_NAME_in_index_name25728); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2403:23: ( char_set_name )?
			int alt549=2;
			int LA549_0 = input.LA(1);
			if ( (LA549_0==CHAR_SET_NAME) ) {
				alt549=1;
			}
			switch (alt549) {
				case 1 :
					// PLSQLPrinter.g:2403:23: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_index_name25730);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID440=(CommonTree)match(input,ID,FOLLOW_ID_in_index_name25733); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2403:42: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID440!=null?ID440.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_name"


	public static class cursor_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_name"
	// PLSQLPrinter.g:2406:1: cursor_name : ^( CURSOR_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.cursor_name_return cursor_name() throws RecognitionException {
		PLSQLPrinter.cursor_name_return retval = new PLSQLPrinter.cursor_name_return();
		retval.start = input.LT(1);

		CommonTree ID441=null;

		try {
			// PLSQLPrinter.g:2407:5: ( ^( CURSOR_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2407:10: ^( CURSOR_NAME ( char_set_name )? ID )
			{
			match(input,CURSOR_NAME,FOLLOW_CURSOR_NAME_in_cursor_name25764); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2407:24: ( char_set_name )?
			int alt550=2;
			int LA550_0 = input.LA(1);
			if ( (LA550_0==CHAR_SET_NAME) ) {
				alt550=1;
			}
			switch (alt550) {
				case 1 :
					// PLSQLPrinter.g:2407:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_cursor_name25766);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID441=(CommonTree)match(input,ID,FOLLOW_ID_in_cursor_name25769); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2407:43: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID441!=null?ID441.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_name"


	public static class record_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_name"
	// PLSQLPrinter.g:2410:1: record_name : ^( RECORD_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.record_name_return record_name() throws RecognitionException {
		PLSQLPrinter.record_name_return retval = new PLSQLPrinter.record_name_return();
		retval.start = input.LT(1);

		CommonTree ID442=null;

		try {
			// PLSQLPrinter.g:2411:5: ( ^( RECORD_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2411:10: ^( RECORD_NAME ( char_set_name )? ID )
			{
			match(input,RECORD_NAME,FOLLOW_RECORD_NAME_in_record_name25800); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2411:24: ( char_set_name )?
			int alt551=2;
			int LA551_0 = input.LA(1);
			if ( (LA551_0==CHAR_SET_NAME) ) {
				alt551=1;
			}
			switch (alt551) {
				case 1 :
					// PLSQLPrinter.g:2411:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_record_name25802);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID442=(CommonTree)match(input,ID,FOLLOW_ID_in_record_name25805); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2411:43: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID442!=null?ID442.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_name"


	public static class collection_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "collection_name"
	// PLSQLPrinter.g:2414:1: collection_name : ^( COLLECTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.collection_name_return collection_name() throws RecognitionException {
		PLSQLPrinter.collection_name_return retval = new PLSQLPrinter.collection_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2415:5: ( ^( COLLECTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2415:10: ^( COLLECTION_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,COLLECTION_NAME,FOLLOW_COLLECTION_NAME_in_collection_name25836); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2415:28: ( char_set_name )?
			int alt552=2;
			int LA552_0 = input.LA(1);
			if ( (LA552_0==CHAR_SET_NAME) ) {
				alt552=1;
			}
			switch (alt552) {
				case 1 :
					// PLSQLPrinter.g:2415:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_collection_name25838);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2415:46: (ids+= ID )+
			int cnt553=0;
			loop553:
			while (true) {
				int alt553=2;
				int LA553_0 = input.LA(1);
				if ( (LA553_0==ID) ) {
					alt553=1;
				}

				switch (alt553) {
				case 1 :
					// PLSQLPrinter.g:2415:46: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_collection_name25843); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt553 >= 1 ) break loop553;
					EarlyExitException eee = new EarlyExitException(553, input);
					throw eee;
				}
				cnt553++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2416:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "collection_name"


	public static class link_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "link_name"
	// PLSQLPrinter.g:2419:1: link_name : ^( LINK_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.link_name_return link_name() throws RecognitionException {
		PLSQLPrinter.link_name_return retval = new PLSQLPrinter.link_name_return();
		retval.start = input.LT(1);

		CommonTree ID443=null;

		try {
			// PLSQLPrinter.g:2420:5: ( ^( LINK_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2420:10: ^( LINK_NAME ( char_set_name )? ID )
			{
			match(input,LINK_NAME,FOLLOW_LINK_NAME_in_link_name25881); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2420:22: ( char_set_name )?
			int alt554=2;
			int LA554_0 = input.LA(1);
			if ( (LA554_0==CHAR_SET_NAME) ) {
				alt554=1;
			}
			switch (alt554) {
				case 1 :
					// PLSQLPrinter.g:2420:22: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_link_name25883);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID443=(CommonTree)match(input,ID,FOLLOW_ID_in_link_name25886); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2420:41: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID443!=null?ID443.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "link_name"


	public static class column_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "column_name"
	// PLSQLPrinter.g:2423:1: column_name : ^( COLUMN_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.column_name_return column_name() throws RecognitionException {
		PLSQLPrinter.column_name_return retval = new PLSQLPrinter.column_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2424:5: ( ^( COLUMN_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2424:10: ^( COLUMN_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,COLUMN_NAME,FOLLOW_COLUMN_NAME_in_column_name25917); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2424:24: ( char_set_name )?
			int alt555=2;
			int LA555_0 = input.LA(1);
			if ( (LA555_0==CHAR_SET_NAME) ) {
				alt555=1;
			}
			switch (alt555) {
				case 1 :
					// PLSQLPrinter.g:2424:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_column_name25919);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2424:42: (ids+= ID )+
			int cnt556=0;
			loop556:
			while (true) {
				int alt556=2;
				int LA556_0 = input.LA(1);
				if ( (LA556_0==ID) ) {
					alt556=1;
				}

				switch (alt556) {
				case 1 :
					// PLSQLPrinter.g:2424:42: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_column_name25924); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt556 >= 1 ) break loop556;
					EarlyExitException eee = new EarlyExitException(556, input);
					throw eee;
				}
				cnt556++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2425:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_name"


	public static class tableview_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "tableview_name"
	// PLSQLPrinter.g:2428:1: tableview_name : ^( TABLEVIEW_NAME ( char_set_name )? (ids+= ID )+ ( link_name )? ( partition_extension_clause )? ) -> tableview_name(ids=$idslink_name=$link_name.stpartition_extension_clause=$partition_extension_clause.st);
	public final PLSQLPrinter.tableview_name_return tableview_name() throws RecognitionException {
		PLSQLPrinter.tableview_name_return retval = new PLSQLPrinter.tableview_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;
		TreeRuleReturnScope link_name444 =null;
		TreeRuleReturnScope partition_extension_clause445 =null;

		try {
			// PLSQLPrinter.g:2429:5: ( ^( TABLEVIEW_NAME ( char_set_name )? (ids+= ID )+ ( link_name )? ( partition_extension_clause )? ) -> tableview_name(ids=$idslink_name=$link_name.stpartition_extension_clause=$partition_extension_clause.st))
			// PLSQLPrinter.g:2429:10: ^( TABLEVIEW_NAME ( char_set_name )? (ids+= ID )+ ( link_name )? ( partition_extension_clause )? )
			{
			match(input,TABLEVIEW_NAME,FOLLOW_TABLEVIEW_NAME_in_tableview_name25962); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2429:27: ( char_set_name )?
			int alt557=2;
			int LA557_0 = input.LA(1);
			if ( (LA557_0==CHAR_SET_NAME) ) {
				alt557=1;
			}
			switch (alt557) {
				case 1 :
					// PLSQLPrinter.g:2429:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_tableview_name25964);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2429:45: (ids+= ID )+
			int cnt558=0;
			loop558:
			while (true) {
				int alt558=2;
				int LA558_0 = input.LA(1);
				if ( (LA558_0==ID) ) {
					alt558=1;
				}

				switch (alt558) {
				case 1 :
					// PLSQLPrinter.g:2429:45: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_tableview_name25969); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt558 >= 1 ) break loop558;
					EarlyExitException eee = new EarlyExitException(558, input);
					throw eee;
				}
				cnt558++;
			}

			// PLSQLPrinter.g:2429:51: ( link_name )?
			int alt559=2;
			int LA559_0 = input.LA(1);
			if ( (LA559_0==LINK_NAME) ) {
				alt559=1;
			}
			switch (alt559) {
				case 1 :
					// PLSQLPrinter.g:2429:51: link_name
					{
					pushFollow(FOLLOW_link_name_in_tableview_name25972);
					link_name444=link_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2429:62: ( partition_extension_clause )?
			int alt560=2;
			int LA560_0 = input.LA(1);
			if ( (LA560_0==PARTITION_VK||LA560_0==SUBPARTITION_VK) ) {
				alt560=1;
			}
			switch (alt560) {
				case 1 :
					// PLSQLPrinter.g:2429:62: partition_extension_clause
					{
					pushFollow(FOLLOW_partition_extension_clause_in_tableview_name25975);
					partition_extension_clause445=partition_extension_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2430:5: -> tableview_name(ids=$idslink_name=$link_name.stpartition_extension_clause=$partition_extension_clause.st)
			{
				retval.st = templateLib.getInstanceOf("tableview_name",new STAttrMap().put("ids", list_ids).put("link_name", (link_name444!=null?((StringTemplate)link_name444.getTemplate()):null)).put("partition_extension_clause", (partition_extension_clause445!=null?((StringTemplate)partition_extension_clause445.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableview_name"


	public static class char_set_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "char_set_name"
	// PLSQLPrinter.g:2433:1: char_set_name : ^( CHAR_SET_NAME (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.char_set_name_return char_set_name() throws RecognitionException {
		PLSQLPrinter.char_set_name_return retval = new PLSQLPrinter.char_set_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2434:5: ( ^( CHAR_SET_NAME (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2434:10: ^( CHAR_SET_NAME (ids+= ID )+ )
			{
			match(input,CHAR_SET_NAME,FOLLOW_CHAR_SET_NAME_in_char_set_name26023); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2434:29: (ids+= ID )+
			int cnt561=0;
			loop561:
			while (true) {
				int alt561=2;
				int LA561_0 = input.LA(1);
				if ( (LA561_0==ID) ) {
					alt561=1;
				}

				switch (alt561) {
				case 1 :
					// PLSQLPrinter.g:2434:29: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_char_set_name26027); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt561 >= 1 ) break loop561;
					EarlyExitException eee = new EarlyExitException(561, input);
					throw eee;
				}
				cnt561++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2435:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "char_set_name"


	public static class function_argument_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "function_argument"
	// PLSQLPrinter.g:2442:1: function_argument : ^( ARGUMENTS (args+= argument )* ) -> function_arguments(arguments=$args);
	public final PLSQLPrinter.function_argument_return function_argument() throws RecognitionException {
		PLSQLPrinter.function_argument_return retval = new PLSQLPrinter.function_argument_return();
		retval.start = input.LT(1);

		List<Object> list_args=null;
		RuleReturnScope args = null;
		try {
			// PLSQLPrinter.g:2443:5: ( ^( ARGUMENTS (args+= argument )* ) -> function_arguments(arguments=$args))
			// PLSQLPrinter.g:2443:10: ^( ARGUMENTS (args+= argument )* )
			{
			match(input,ARGUMENTS,FOLLOW_ARGUMENTS_in_function_argument26069); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:2443:26: (args+= argument )*
				loop562:
				while (true) {
					int alt562=2;
					int LA562_0 = input.LA(1);
					if ( (LA562_0==ARGUMENT) ) {
						alt562=1;
					}

					switch (alt562) {
					case 1 :
						// PLSQLPrinter.g:2443:26: args+= argument
						{
						pushFollow(FOLLOW_argument_in_function_argument26073);
						args=argument();
						state._fsp--;

						if (list_args==null) list_args=new ArrayList<Object>();
						list_args.add(args.getTemplate());
						}
						break;

					default :
						break loop562;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 2444:5: -> function_arguments(arguments=$args)
			{
				retval.st = templateLib.getInstanceOf("function_arguments",new STAttrMap().put("arguments", list_args));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_argument"


	public static class argument_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "argument"
	// PLSQLPrinter.g:2447:1: argument : ^( ARGUMENT expression ( parameter_name )? ) -> function_argument(valueExpr=$expression.stname=$parameter_name.st);
	public final PLSQLPrinter.argument_return argument() throws RecognitionException {
		PLSQLPrinter.argument_return retval = new PLSQLPrinter.argument_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression446 =null;
		TreeRuleReturnScope parameter_name447 =null;

		try {
			// PLSQLPrinter.g:2448:5: ( ^( ARGUMENT expression ( parameter_name )? ) -> function_argument(valueExpr=$expression.stname=$parameter_name.st))
			// PLSQLPrinter.g:2448:10: ^( ARGUMENT expression ( parameter_name )? )
			{
			match(input,ARGUMENT,FOLLOW_ARGUMENT_in_argument26111); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_argument26113);
			expression446=expression();
			state._fsp--;

			// PLSQLPrinter.g:2448:32: ( parameter_name )?
			int alt563=2;
			int LA563_0 = input.LA(1);
			if ( (LA563_0==PARAMETER_NAME) ) {
				alt563=1;
			}
			switch (alt563) {
				case 1 :
					// PLSQLPrinter.g:2448:32: parameter_name
					{
					pushFollow(FOLLOW_parameter_name_in_argument26115);
					parameter_name447=parameter_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2449:5: -> function_argument(valueExpr=$expression.stname=$parameter_name.st)
			{
				retval.st = templateLib.getInstanceOf("function_argument",new STAttrMap().put("valueExpr", (expression446!=null?((StringTemplate)expression446.getTemplate()):null)).put("name", (parameter_name447!=null?((StringTemplate)parameter_name447.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "argument"


	public static class type_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_spec"
	// PLSQLPrinter.g:2452:1: type_spec : ( ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? ) -> typespec_custom(name=$type_name.stis_ref=$REF_VK != nullis_percent_rowtype=$PERCENT_ROWTYPE_VK != nullis_percent_type=$PERCENT_TYPE_VK != null)| native_datatype_spec -> { $native_datatype_spec.st; }| ^( INTERVAL_DATATYPE interval_type_spec_first interval_type_spec_second ) -> interval_type_spec(left_side=$interval_type_spec_first.stright_side=$interval_type_spec_second.st));
	public final PLSQLPrinter.type_spec_return type_spec() throws RecognitionException {
		PLSQLPrinter.type_spec_return retval = new PLSQLPrinter.type_spec_return();
		retval.start = input.LT(1);

		CommonTree REF_VK449=null;
		CommonTree PERCENT_ROWTYPE_VK450=null;
		CommonTree PERCENT_TYPE_VK451=null;
		TreeRuleReturnScope type_name448 =null;
		TreeRuleReturnScope native_datatype_spec452 =null;
		TreeRuleReturnScope interval_type_spec_first453 =null;
		TreeRuleReturnScope interval_type_spec_second454 =null;

		try {
			// PLSQLPrinter.g:2453:5: ( ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? ) -> typespec_custom(name=$type_name.stis_ref=$REF_VK != nullis_percent_rowtype=$PERCENT_ROWTYPE_VK != nullis_percent_type=$PERCENT_TYPE_VK != null)| native_datatype_spec -> { $native_datatype_spec.st; }| ^( INTERVAL_DATATYPE interval_type_spec_first interval_type_spec_second ) -> interval_type_spec(left_side=$interval_type_spec_first.stright_side=$interval_type_spec_second.st))
			int alt566=3;
			switch ( input.LA(1) ) {
			case CUSTOM_TYPE:
				{
				alt566=1;
				}
				break;
			case NATIVE_DATATYPE:
				{
				alt566=2;
				}
				break;
			case INTERVAL_DATATYPE:
				{
				alt566=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 566, 0, input);
				throw nvae;
			}
			switch (alt566) {
				case 1 :
					// PLSQLPrinter.g:2453:11: ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? )
					{
					match(input,CUSTOM_TYPE,FOLLOW_CUSTOM_TYPE_in_type_spec26159); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_type_name_in_type_spec26161);
					type_name448=type_name();
					state._fsp--;

					// PLSQLPrinter.g:2453:35: ( REF_VK )?
					int alt564=2;
					int LA564_0 = input.LA(1);
					if ( (LA564_0==REF_VK) ) {
						alt564=1;
					}
					switch (alt564) {
						case 1 :
							// PLSQLPrinter.g:2453:35: REF_VK
							{
							REF_VK449=(CommonTree)match(input,REF_VK,FOLLOW_REF_VK_in_type_spec26163); 
							}
							break;

					}

					// PLSQLPrinter.g:2453:43: ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )?
					int alt565=3;
					int LA565_0 = input.LA(1);
					if ( (LA565_0==PERCENT_ROWTYPE_VK) ) {
						alt565=1;
					}
					else if ( (LA565_0==PERCENT_TYPE_VK) ) {
						alt565=2;
					}
					switch (alt565) {
						case 1 :
							// PLSQLPrinter.g:2453:44: PERCENT_ROWTYPE_VK
							{
							PERCENT_ROWTYPE_VK450=(CommonTree)match(input,PERCENT_ROWTYPE_VK,FOLLOW_PERCENT_ROWTYPE_VK_in_type_spec26167); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2453:63: PERCENT_TYPE_VK
							{
							PERCENT_TYPE_VK451=(CommonTree)match(input,PERCENT_TYPE_VK,FOLLOW_PERCENT_TYPE_VK_in_type_spec26169); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2454:5: -> typespec_custom(name=$type_name.stis_ref=$REF_VK != nullis_percent_rowtype=$PERCENT_ROWTYPE_VK != nullis_percent_type=$PERCENT_TYPE_VK != null)
					{
						retval.st = templateLib.getInstanceOf("typespec_custom",new STAttrMap().put("name", (type_name448!=null?((StringTemplate)type_name448.getTemplate()):null)).put("is_ref", REF_VK449 != null).put("is_percent_rowtype", PERCENT_ROWTYPE_VK450 != null).put("is_percent_type", PERCENT_TYPE_VK451 != null));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2457:10: native_datatype_spec
					{
					pushFollow(FOLLOW_native_datatype_spec_in_type_spec26238);
					native_datatype_spec452=native_datatype_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 2457:31: -> { $native_datatype_spec.st; }
					{
						retval.st =  (native_datatype_spec452!=null?((StringTemplate)native_datatype_spec452.getTemplate()):null); ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:2458:10: ^( INTERVAL_DATATYPE interval_type_spec_first interval_type_spec_second )
					{
					match(input,INTERVAL_DATATYPE,FOLLOW_INTERVAL_DATATYPE_in_type_spec26254); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_interval_type_spec_first_in_type_spec26256);
					interval_type_spec_first453=interval_type_spec_first();
					state._fsp--;

					pushFollow(FOLLOW_interval_type_spec_second_in_type_spec26258);
					interval_type_spec_second454=interval_type_spec_second();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2459:5: -> interval_type_spec(left_side=$interval_type_spec_first.stright_side=$interval_type_spec_second.st)
					{
						retval.st = templateLib.getInstanceOf("interval_type_spec",new STAttrMap().put("left_side", (interval_type_spec_first453!=null?((StringTemplate)interval_type_spec_first453.getTemplate()):null)).put("right_side", (interval_type_spec_second454!=null?((StringTemplate)interval_type_spec_second454.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_spec"


	public static class interval_type_spec_first_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "interval_type_spec_first"
	// PLSQLPrinter.g:2462:1: interval_type_spec_first : ^( ( YEAR_VK | DAY_VK ) ( expression )? ) -> interval_type_spec_first(is_year=$YEAR_VK != nullis_day=$DAY_VK != nullexpression=$expression.st);
	public final PLSQLPrinter.interval_type_spec_first_return interval_type_spec_first() throws RecognitionException {
		PLSQLPrinter.interval_type_spec_first_return retval = new PLSQLPrinter.interval_type_spec_first_return();
		retval.start = input.LT(1);

		CommonTree YEAR_VK455=null;
		CommonTree DAY_VK456=null;
		TreeRuleReturnScope expression457 =null;

		try {
			// PLSQLPrinter.g:2463:5: ( ^( ( YEAR_VK | DAY_VK ) ( expression )? ) -> interval_type_spec_first(is_year=$YEAR_VK != nullis_day=$DAY_VK != nullexpression=$expression.st))
			// PLSQLPrinter.g:2463:9: ^( ( YEAR_VK | DAY_VK ) ( expression )? )
			{
			// PLSQLPrinter.g:2464:11: ( YEAR_VK | DAY_VK )
			int alt567=2;
			int LA567_0 = input.LA(1);
			if ( (LA567_0==YEAR_VK) ) {
				alt567=1;
			}
			else if ( (LA567_0==DAY_VK) ) {
				alt567=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 567, 0, input);
				throw nvae;
			}

			switch (alt567) {
				case 1 :
					// PLSQLPrinter.g:2464:12: YEAR_VK
					{
					YEAR_VK455=(CommonTree)match(input,YEAR_VK,FOLLOW_YEAR_VK_in_interval_type_spec_first26311); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2464:20: DAY_VK
					{
					DAY_VK456=(CommonTree)match(input,DAY_VK,FOLLOW_DAY_VK_in_interval_type_spec_first26313); 
					}
					break;

			}

			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:2465:11: ( expression )?
				int alt568=2;
				int LA568_0 = input.LA(1);
				if ( (LA568_0==EXPR||LA568_0==LOGIC_EXPR) ) {
					alt568=1;
				}
				switch (alt568) {
					case 1 :
						// PLSQLPrinter.g:2465:11: expression
						{
						pushFollow(FOLLOW_expression_in_interval_type_spec_first26326);
						expression457=expression();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 2467:9: -> interval_type_spec_first(is_year=$YEAR_VK != nullis_day=$DAY_VK != nullexpression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("interval_type_spec_first",new STAttrMap().put("is_year", YEAR_VK455 != null).put("is_day", DAY_VK456 != null).put("expression", (expression457!=null?((StringTemplate)expression457.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "interval_type_spec_first"


	public static class interval_type_spec_second_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "interval_type_spec_second"
	// PLSQLPrinter.g:2470:1: interval_type_spec_second : ^( ( MONTH_VK | SECOND_VK ) ( expression )? ) -> interval_type_spec_second(is_month=$MONTH_VK != nullis_second=$SECOND_VK != nullexpression=$expression.st);
	public final PLSQLPrinter.interval_type_spec_second_return interval_type_spec_second() throws RecognitionException {
		PLSQLPrinter.interval_type_spec_second_return retval = new PLSQLPrinter.interval_type_spec_second_return();
		retval.start = input.LT(1);

		CommonTree MONTH_VK458=null;
		CommonTree SECOND_VK459=null;
		TreeRuleReturnScope expression460 =null;

		try {
			// PLSQLPrinter.g:2471:5: ( ^( ( MONTH_VK | SECOND_VK ) ( expression )? ) -> interval_type_spec_second(is_month=$MONTH_VK != nullis_second=$SECOND_VK != nullexpression=$expression.st))
			// PLSQLPrinter.g:2471:9: ^( ( MONTH_VK | SECOND_VK ) ( expression )? )
			{
			// PLSQLPrinter.g:2472:11: ( MONTH_VK | SECOND_VK )
			int alt569=2;
			int LA569_0 = input.LA(1);
			if ( (LA569_0==MONTH_VK) ) {
				alt569=1;
			}
			else if ( (LA569_0==SECOND_VK) ) {
				alt569=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 569, 0, input);
				throw nvae;
			}

			switch (alt569) {
				case 1 :
					// PLSQLPrinter.g:2472:12: MONTH_VK
					{
					MONTH_VK458=(CommonTree)match(input,MONTH_VK,FOLLOW_MONTH_VK_in_interval_type_spec_second26396); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2472:21: SECOND_VK
					{
					SECOND_VK459=(CommonTree)match(input,SECOND_VK,FOLLOW_SECOND_VK_in_interval_type_spec_second26398); 
					}
					break;

			}

			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:2473:11: ( expression )?
				int alt570=2;
				int LA570_0 = input.LA(1);
				if ( (LA570_0==EXPR||LA570_0==LOGIC_EXPR) ) {
					alt570=1;
				}
				switch (alt570) {
					case 1 :
						// PLSQLPrinter.g:2473:11: expression
						{
						pushFollow(FOLLOW_expression_in_interval_type_spec_second26411);
						expression460=expression();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 2475:9: -> interval_type_spec_second(is_month=$MONTH_VK != nullis_second=$SECOND_VK != nullexpression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("interval_type_spec_second",new STAttrMap().put("is_month", MONTH_VK458 != null).put("is_second", SECOND_VK459 != null).put("expression", (expression460!=null?((StringTemplate)expression460.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "interval_type_spec_second"


	public static class type_precision_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_precision"
	// PLSQLPrinter.g:2478:1: type_precision : ^( PRECISION size1= constant (size2= constant )? (precision_char= CHAR_VK |precision_byte= BYTE_VK )? ) -> base_type_spec_precision(size1=$size1.stsize2=$size2.stis_byte=$precision_byte != nullis_char=$precision_char != null);
	public final PLSQLPrinter.type_precision_return type_precision() throws RecognitionException {
		PLSQLPrinter.type_precision_return retval = new PLSQLPrinter.type_precision_return();
		retval.start = input.LT(1);

		CommonTree precision_char=null;
		CommonTree precision_byte=null;
		TreeRuleReturnScope size1 =null;
		TreeRuleReturnScope size2 =null;

		try {
			// PLSQLPrinter.g:2479:5: ( ^( PRECISION size1= constant (size2= constant )? (precision_char= CHAR_VK |precision_byte= BYTE_VK )? ) -> base_type_spec_precision(size1=$size1.stsize2=$size2.stis_byte=$precision_byte != nullis_char=$precision_char != null))
			// PLSQLPrinter.g:2479:10: ^( PRECISION size1= constant (size2= constant )? (precision_char= CHAR_VK |precision_byte= BYTE_VK )? )
			{
			match(input,PRECISION,FOLLOW_PRECISION_in_type_precision26470); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_constant_in_type_precision26474);
			size1=constant();
			state._fsp--;

			// PLSQLPrinter.g:2479:42: (size2= constant )?
			int alt571=2;
			int LA571_0 = input.LA(1);
			if ( (LA571_0==APPROXIMATE_NUM_LIT||LA571_0==CHAR_STRING||LA571_0==EXACT_NUM_LIT||LA571_0==MINUS_SIGN||LA571_0==SQL92_RESERVED_DEFAULT||LA571_0==SQL92_RESERVED_FALSE||LA571_0==SQL92_RESERVED_NULL||LA571_0==SQL92_RESERVED_TRUE||LA571_0==UNSIGNED_INTEGER||LA571_0==DBTIMEZONE_VK||LA571_0==MAXVALUE_VK||LA571_0==MINVALUE_VK||LA571_0==SESSIONTIMEZONE_VK) ) {
				alt571=1;
			}
			switch (alt571) {
				case 1 :
					// PLSQLPrinter.g:2479:42: size2= constant
					{
					pushFollow(FOLLOW_constant_in_type_precision26478);
					size2=constant();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2479:53: (precision_char= CHAR_VK |precision_byte= BYTE_VK )?
			int alt572=3;
			int LA572_0 = input.LA(1);
			if ( (LA572_0==CHAR_VK) ) {
				alt572=1;
			}
			else if ( (LA572_0==BYTE_VK) ) {
				alt572=2;
			}
			switch (alt572) {
				case 1 :
					// PLSQLPrinter.g:2479:54: precision_char= CHAR_VK
					{
					precision_char=(CommonTree)match(input,CHAR_VK,FOLLOW_CHAR_VK_in_type_precision26484); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2479:77: precision_byte= BYTE_VK
					{
					precision_byte=(CommonTree)match(input,BYTE_VK,FOLLOW_BYTE_VK_in_type_precision26488); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2480:5: -> base_type_spec_precision(size1=$size1.stsize2=$size2.stis_byte=$precision_byte != nullis_char=$precision_char != null)
			{
				retval.st = templateLib.getInstanceOf("base_type_spec_precision",new STAttrMap().put("size1", (size1!=null?((StringTemplate)size1.getTemplate()):null)).put("size2", (size2!=null?((StringTemplate)size2.getTemplate()):null)).put("is_byte", precision_byte != null).put("is_char", precision_char != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_precision"


	public static class native_datatype_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "native_datatype_spec"
	// PLSQLPrinter.g:2485:1: native_datatype_spec : ^( NATIVE_DATATYPE ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | DATE_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DOUBLE_VK PRECISION_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_VK RAW_VK | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK ) (prec= type_precision )? (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )? ) -> base_type_spec(baseName=typeBaseNameprecision=$prec.stis_with_time_zone=$is_tz != nullis_time_zone_local=$is_tz_local != null);
	public final PLSQLPrinter.native_datatype_spec_return native_datatype_spec() throws RecognitionException {
		PLSQLPrinter.native_datatype_spec_return retval = new PLSQLPrinter.native_datatype_spec_return();
		retval.start = input.LT(1);

		CommonTree is_tz=null;
		CommonTree is_tz_local=null;
		TreeRuleReturnScope prec =null;

		 String typeBaseName = null; 
		try {
			// PLSQLPrinter.g:2487:5: ( ^( NATIVE_DATATYPE ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | DATE_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DOUBLE_VK PRECISION_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_VK RAW_VK | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK ) (prec= type_precision )? (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )? ) -> base_type_spec(baseName=typeBaseNameprecision=$prec.stis_with_time_zone=$is_tz != nullis_time_zone_local=$is_tz_local != null))
			// PLSQLPrinter.g:2487:10: ^( NATIVE_DATATYPE ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | DATE_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DOUBLE_VK PRECISION_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_VK RAW_VK | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK ) (prec= type_precision )? (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )? )
			{
			match(input,NATIVE_DATATYPE,FOLLOW_NATIVE_DATATYPE_in_native_datatype_spec26551); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2488:5: ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | DATE_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DOUBLE_VK PRECISION_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_VK RAW_VK | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK )
			int alt573=56;
			switch ( input.LA(1) ) {
			case BFILE_VK:
				{
				alt573=1;
				}
				break;
			case BINARY_FLOAT_VK:
				{
				alt573=2;
				}
				break;
			case BINARY_INTEGER_VK:
				{
				alt573=3;
				}
				break;
			case BLOB_VK:
				{
				alt573=4;
				}
				break;
			case BOOLEAN_VK:
				{
				alt573=5;
				}
				break;
			case CHARACTER_VK:
				{
				alt573=6;
				}
				break;
			case CHAR_VK:
				{
				alt573=7;
				}
				break;
			case CLOB_VK:
				{
				alt573=8;
				}
				break;
			case DATE_VK:
				{
				alt573=9;
				}
				break;
			case SQL92_RESERVED_DATE:
				{
				alt573=10;
				}
				break;
			case DAY_VK:
				{
				alt573=11;
				}
				break;
			case DECIMAL_VK:
				{
				alt573=12;
				}
				break;
			case DEC_VK:
				{
				alt573=13;
				}
				break;
			case DOUBLE_VK:
				{
				int LA573_14 = input.LA(2);
				if ( (LA573_14==PRECISION_VK) ) {
					alt573=15;
				}
				else if ( (LA573_14==UP||LA573_14==PRECISION||LA573_14==TIME_VK) ) {
					alt573=14;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 573, 14, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DSINTERVAL_UNCONSTRAINED_VK:
				{
				alt573=16;
				}
				break;
			case FLOAT_VK:
				{
				alt573=17;
				}
				break;
			case HOUR_VK:
				{
				alt573=18;
				}
				break;
			case INTEGER_VK:
				{
				alt573=19;
				}
				break;
			case INT_VK:
				{
				alt573=20;
				}
				break;
			case LONG_VK:
				{
				int LA573_20 = input.LA(2);
				if ( (LA573_20==RAW_VK) ) {
					alt573=22;
				}
				else if ( (LA573_20==UP||LA573_20==PRECISION||LA573_20==TIME_VK) ) {
					alt573=21;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 573, 20, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case MINUTE_VK:
				{
				alt573=23;
				}
				break;
			case MLSLABEL_VK:
				{
				alt573=24;
				}
				break;
			case MONTH_VK:
				{
				alt573=25;
				}
				break;
			case NATURALN_VK:
				{
				alt573=26;
				}
				break;
			case NATURAL_VK:
				{
				alt573=27;
				}
				break;
			case NCHAR_VK:
				{
				alt573=28;
				}
				break;
			case NCLOB_VK:
				{
				alt573=29;
				}
				break;
			case NUMBER_VK:
				{
				alt573=30;
				}
				break;
			case NUMERIC_VK:
				{
				alt573=31;
				}
				break;
			case NVARCHAR2_VK:
				{
				alt573=32;
				}
				break;
			case PLS_INTEGER_VK:
				{
				alt573=33;
				}
				break;
			case POSITIVEN_VK:
				{
				alt573=34;
				}
				break;
			case POSITIVE_VK:
				{
				alt573=35;
				}
				break;
			case RAW_VK:
				{
				alt573=36;
				}
				break;
			case REAL_VK:
				{
				alt573=37;
				}
				break;
			case ROWID_VK:
				{
				alt573=38;
				}
				break;
			case SECOND_VK:
				{
				alt573=39;
				}
				break;
			case SIGNTYPE_VK:
				{
				alt573=40;
				}
				break;
			case SIMPLE_INTEGER_VK:
				{
				alt573=41;
				}
				break;
			case SMALLINT_VK:
				{
				alt573=42;
				}
				break;
			case STRING_VK:
				{
				alt573=43;
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED_VK:
				{
				alt573=44;
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED_VK:
				{
				alt573=45;
				}
				break;
			case TIMESTAMP_UNCONSTRAINED_VK:
				{
				alt573=46;
				}
				break;
			case TIMESTAMP_VK:
				{
				alt573=47;
				}
				break;
			case TIMEZONE_ABBR_VK:
				{
				alt573=48;
				}
				break;
			case TIMEZONE_HOUR_VK:
				{
				alt573=49;
				}
				break;
			case TIMEZONE_MINUTE_VK:
				{
				alt573=50;
				}
				break;
			case TIMEZONE_REGION_VK:
				{
				alt573=51;
				}
				break;
			case UROWID_VK:
				{
				alt573=52;
				}
				break;
			case VARCHAR2_VK:
				{
				alt573=53;
				}
				break;
			case VARCHAR_VK:
				{
				alt573=54;
				}
				break;
			case YEAR_VK:
				{
				alt573=55;
				}
				break;
			case YMINTERVAL_UNCONSTRAINED_VK:
				{
				alt573=56;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 573, 0, input);
				throw nvae;
			}
			switch (alt573) {
				case 1 :
					// PLSQLPrinter.g:2488:10: BFILE_VK
					{
					match(input,BFILE_VK,FOLLOW_BFILE_VK_in_native_datatype_spec26562); 
					 typeBaseName = "bfile"; 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2489:10: BINARY_FLOAT_VK
					{
					match(input,BINARY_FLOAT_VK,FOLLOW_BINARY_FLOAT_VK_in_native_datatype_spec26575); 
					 typeBaseName = "binary_float"; 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:2490:10: BINARY_INTEGER_VK
					{
					match(input,BINARY_INTEGER_VK,FOLLOW_BINARY_INTEGER_VK_in_native_datatype_spec26588); 
					 typeBaseName = "binary_integer"; 
					}
					break;
				case 4 :
					// PLSQLPrinter.g:2491:10: BLOB_VK
					{
					match(input,BLOB_VK,FOLLOW_BLOB_VK_in_native_datatype_spec26601); 
					 typeBaseName = "blob"; 
					}
					break;
				case 5 :
					// PLSQLPrinter.g:2492:10: BOOLEAN_VK
					{
					match(input,BOOLEAN_VK,FOLLOW_BOOLEAN_VK_in_native_datatype_spec26614); 
					 typeBaseName = "boolean"; 
					}
					break;
				case 6 :
					// PLSQLPrinter.g:2493:10: CHARACTER_VK
					{
					match(input,CHARACTER_VK,FOLLOW_CHARACTER_VK_in_native_datatype_spec26627); 
					 typeBaseName = "character"; 
					}
					break;
				case 7 :
					// PLSQLPrinter.g:2494:10: CHAR_VK
					{
					match(input,CHAR_VK,FOLLOW_CHAR_VK_in_native_datatype_spec26641); 
					 typeBaseName = "char"; 
					}
					break;
				case 8 :
					// PLSQLPrinter.g:2495:10: CLOB_VK
					{
					match(input,CLOB_VK,FOLLOW_CLOB_VK_in_native_datatype_spec26654); 
					 typeBaseName = "clob"; 
					}
					break;
				case 9 :
					// PLSQLPrinter.g:2496:10: DATE_VK
					{
					match(input,DATE_VK,FOLLOW_DATE_VK_in_native_datatype_spec26667); 
					 typeBaseName = "date"; 
					}
					break;
				case 10 :
					// PLSQLPrinter.g:2497:10: SQL92_RESERVED_DATE
					{
					match(input,SQL92_RESERVED_DATE,FOLLOW_SQL92_RESERVED_DATE_in_native_datatype_spec26680); 
					 typeBaseName = "date"; 
					}
					break;
				case 11 :
					// PLSQLPrinter.g:2498:10: DAY_VK
					{
					match(input,DAY_VK,FOLLOW_DAY_VK_in_native_datatype_spec26693); 
					}
					break;
				case 12 :
					// PLSQLPrinter.g:2499:10: DECIMAL_VK
					{
					match(input,DECIMAL_VK,FOLLOW_DECIMAL_VK_in_native_datatype_spec26704); 
					 typeBaseName = "decimal"; 
					}
					break;
				case 13 :
					// PLSQLPrinter.g:2500:10: DEC_VK
					{
					match(input,DEC_VK,FOLLOW_DEC_VK_in_native_datatype_spec26718); 
					 typeBaseName = "dec"; 
					}
					break;
				case 14 :
					// PLSQLPrinter.g:2501:10: DOUBLE_VK
					{
					match(input,DOUBLE_VK,FOLLOW_DOUBLE_VK_in_native_datatype_spec26731); 
					 typeBaseName = "double"; 
					}
					break;
				case 15 :
					// PLSQLPrinter.g:2502:10: DOUBLE_VK PRECISION_VK
					{
					match(input,DOUBLE_VK,FOLLOW_DOUBLE_VK_in_native_datatype_spec26744); 
					match(input,PRECISION_VK,FOLLOW_PRECISION_VK_in_native_datatype_spec26746); 
					 typeBaseName = "double precision"; 
					}
					break;
				case 16 :
					// PLSQLPrinter.g:2503:10: DSINTERVAL_UNCONSTRAINED_VK
					{
					match(input,DSINTERVAL_UNCONSTRAINED_VK,FOLLOW_DSINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec26759); 
					}
					break;
				case 17 :
					// PLSQLPrinter.g:2504:10: FLOAT_VK
					{
					match(input,FLOAT_VK,FOLLOW_FLOAT_VK_in_native_datatype_spec26770); 
					 typeBaseName = "float"; 
					}
					break;
				case 18 :
					// PLSQLPrinter.g:2505:10: HOUR_VK
					{
					match(input,HOUR_VK,FOLLOW_HOUR_VK_in_native_datatype_spec26783); 
					}
					break;
				case 19 :
					// PLSQLPrinter.g:2506:10: INTEGER_VK
					{
					match(input,INTEGER_VK,FOLLOW_INTEGER_VK_in_native_datatype_spec26794); 
					 typeBaseName = "integer"; 
					}
					break;
				case 20 :
					// PLSQLPrinter.g:2507:10: INT_VK
					{
					match(input,INT_VK,FOLLOW_INT_VK_in_native_datatype_spec26807); 
					 typeBaseName = "int"; 
					}
					break;
				case 21 :
					// PLSQLPrinter.g:2508:10: LONG_VK
					{
					match(input,LONG_VK,FOLLOW_LONG_VK_in_native_datatype_spec26820); 
					 typeBaseName = "long"; 
					}
					break;
				case 22 :
					// PLSQLPrinter.g:2509:10: LONG_VK RAW_VK
					{
					match(input,LONG_VK,FOLLOW_LONG_VK_in_native_datatype_spec26833); 
					match(input,RAW_VK,FOLLOW_RAW_VK_in_native_datatype_spec26835); 
					 typeBaseName = "long raw"; 
					}
					break;
				case 23 :
					// PLSQLPrinter.g:2510:10: MINUTE_VK
					{
					match(input,MINUTE_VK,FOLLOW_MINUTE_VK_in_native_datatype_spec26848); 
					}
					break;
				case 24 :
					// PLSQLPrinter.g:2511:10: MLSLABEL_VK
					{
					match(input,MLSLABEL_VK,FOLLOW_MLSLABEL_VK_in_native_datatype_spec26859); 
					}
					break;
				case 25 :
					// PLSQLPrinter.g:2512:10: MONTH_VK
					{
					match(input,MONTH_VK,FOLLOW_MONTH_VK_in_native_datatype_spec26870); 
					}
					break;
				case 26 :
					// PLSQLPrinter.g:2513:10: NATURALN_VK
					{
					match(input,NATURALN_VK,FOLLOW_NATURALN_VK_in_native_datatype_spec26881); 
					}
					break;
				case 27 :
					// PLSQLPrinter.g:2514:10: NATURAL_VK
					{
					match(input,NATURAL_VK,FOLLOW_NATURAL_VK_in_native_datatype_spec26892); 
					}
					break;
				case 28 :
					// PLSQLPrinter.g:2515:10: NCHAR_VK
					{
					match(input,NCHAR_VK,FOLLOW_NCHAR_VK_in_native_datatype_spec26903); 
					 typeBaseName = "nchar"; 
					}
					break;
				case 29 :
					// PLSQLPrinter.g:2516:10: NCLOB_VK
					{
					match(input,NCLOB_VK,FOLLOW_NCLOB_VK_in_native_datatype_spec26916); 
					 typeBaseName = "nclob"; 
					}
					break;
				case 30 :
					// PLSQLPrinter.g:2517:10: NUMBER_VK
					{
					match(input,NUMBER_VK,FOLLOW_NUMBER_VK_in_native_datatype_spec26929); 
					 typeBaseName = "number"; 
					}
					break;
				case 31 :
					// PLSQLPrinter.g:2518:10: NUMERIC_VK
					{
					match(input,NUMERIC_VK,FOLLOW_NUMERIC_VK_in_native_datatype_spec26942); 
					 typeBaseName = "numeric"; 
					}
					break;
				case 32 :
					// PLSQLPrinter.g:2519:10: NVARCHAR2_VK
					{
					match(input,NVARCHAR2_VK,FOLLOW_NVARCHAR2_VK_in_native_datatype_spec26955); 
					 typeBaseName = "nvarchar2"; 
					}
					break;
				case 33 :
					// PLSQLPrinter.g:2520:10: PLS_INTEGER_VK
					{
					match(input,PLS_INTEGER_VK,FOLLOW_PLS_INTEGER_VK_in_native_datatype_spec26968); 
					 typeBaseName = "pls_integer"; 
					}
					break;
				case 34 :
					// PLSQLPrinter.g:2521:10: POSITIVEN_VK
					{
					match(input,POSITIVEN_VK,FOLLOW_POSITIVEN_VK_in_native_datatype_spec26981); 
					}
					break;
				case 35 :
					// PLSQLPrinter.g:2522:10: POSITIVE_VK
					{
					match(input,POSITIVE_VK,FOLLOW_POSITIVE_VK_in_native_datatype_spec26992); 
					}
					break;
				case 36 :
					// PLSQLPrinter.g:2523:10: RAW_VK
					{
					match(input,RAW_VK,FOLLOW_RAW_VK_in_native_datatype_spec27003); 
					 typeBaseName = "raw"; 
					}
					break;
				case 37 :
					// PLSQLPrinter.g:2524:10: REAL_VK
					{
					match(input,REAL_VK,FOLLOW_REAL_VK_in_native_datatype_spec27016); 
					}
					break;
				case 38 :
					// PLSQLPrinter.g:2525:10: ROWID_VK
					{
					match(input,ROWID_VK,FOLLOW_ROWID_VK_in_native_datatype_spec27027); 
					 typeBaseName = "rowid"; 
					}
					break;
				case 39 :
					// PLSQLPrinter.g:2526:10: SECOND_VK
					{
					match(input,SECOND_VK,FOLLOW_SECOND_VK_in_native_datatype_spec27040); 
					}
					break;
				case 40 :
					// PLSQLPrinter.g:2527:10: SIGNTYPE_VK
					{
					match(input,SIGNTYPE_VK,FOLLOW_SIGNTYPE_VK_in_native_datatype_spec27051); 
					}
					break;
				case 41 :
					// PLSQLPrinter.g:2528:10: SIMPLE_INTEGER_VK
					{
					match(input,SIMPLE_INTEGER_VK,FOLLOW_SIMPLE_INTEGER_VK_in_native_datatype_spec27062); 
					}
					break;
				case 42 :
					// PLSQLPrinter.g:2529:10: SMALLINT_VK
					{
					match(input,SMALLINT_VK,FOLLOW_SMALLINT_VK_in_native_datatype_spec27073); 
					 typeBaseName = "smallint"; 
					}
					break;
				case 43 :
					// PLSQLPrinter.g:2530:10: STRING_VK
					{
					match(input,STRING_VK,FOLLOW_STRING_VK_in_native_datatype_spec27086); 
					}
					break;
				case 44 :
					// PLSQLPrinter.g:2531:10: TIMESTAMP_LTZ_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_LTZ_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_LTZ_UNCONSTRAINED_VK_in_native_datatype_spec27097); 
					}
					break;
				case 45 :
					// PLSQLPrinter.g:2532:10: TIMESTAMP_TZ_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_TZ_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_TZ_UNCONSTRAINED_VK_in_native_datatype_spec27108); 
					}
					break;
				case 46 :
					// PLSQLPrinter.g:2533:10: TIMESTAMP_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_UNCONSTRAINED_VK_in_native_datatype_spec27119); 
					}
					break;
				case 47 :
					// PLSQLPrinter.g:2534:10: TIMESTAMP_VK
					{
					match(input,TIMESTAMP_VK,FOLLOW_TIMESTAMP_VK_in_native_datatype_spec27130); 
					 typeBaseName = "timestamp"; 
					}
					break;
				case 48 :
					// PLSQLPrinter.g:2535:10: TIMEZONE_ABBR_VK
					{
					match(input,TIMEZONE_ABBR_VK,FOLLOW_TIMEZONE_ABBR_VK_in_native_datatype_spec27143); 
					}
					break;
				case 49 :
					// PLSQLPrinter.g:2536:10: TIMEZONE_HOUR_VK
					{
					match(input,TIMEZONE_HOUR_VK,FOLLOW_TIMEZONE_HOUR_VK_in_native_datatype_spec27154); 
					}
					break;
				case 50 :
					// PLSQLPrinter.g:2537:10: TIMEZONE_MINUTE_VK
					{
					match(input,TIMEZONE_MINUTE_VK,FOLLOW_TIMEZONE_MINUTE_VK_in_native_datatype_spec27165); 
					}
					break;
				case 51 :
					// PLSQLPrinter.g:2538:10: TIMEZONE_REGION_VK
					{
					match(input,TIMEZONE_REGION_VK,FOLLOW_TIMEZONE_REGION_VK_in_native_datatype_spec27176); 
					}
					break;
				case 52 :
					// PLSQLPrinter.g:2539:10: UROWID_VK
					{
					match(input,UROWID_VK,FOLLOW_UROWID_VK_in_native_datatype_spec27187); 
					 typeBaseName = "urowid"; 
					}
					break;
				case 53 :
					// PLSQLPrinter.g:2540:10: VARCHAR2_VK
					{
					match(input,VARCHAR2_VK,FOLLOW_VARCHAR2_VK_in_native_datatype_spec27200); 
					 typeBaseName = "varchar2"; 
					}
					break;
				case 54 :
					// PLSQLPrinter.g:2541:10: VARCHAR_VK
					{
					match(input,VARCHAR_VK,FOLLOW_VARCHAR_VK_in_native_datatype_spec27213); 
					 typeBaseName = "varchar"; 
					}
					break;
				case 55 :
					// PLSQLPrinter.g:2542:10: YEAR_VK
					{
					match(input,YEAR_VK,FOLLOW_YEAR_VK_in_native_datatype_spec27226); 
					}
					break;
				case 56 :
					// PLSQLPrinter.g:2543:10: YMINTERVAL_UNCONSTRAINED_VK
					{
					match(input,YMINTERVAL_UNCONSTRAINED_VK,FOLLOW_YMINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec27237); 
					}
					break;

			}

			// PLSQLPrinter.g:2544:9: (prec= type_precision )?
			int alt574=2;
			int LA574_0 = input.LA(1);
			if ( (LA574_0==PRECISION) ) {
				alt574=1;
			}
			switch (alt574) {
				case 1 :
					// PLSQLPrinter.g:2544:9: prec= type_precision
					{
					pushFollow(FOLLOW_type_precision_in_native_datatype_spec27246);
					prec=type_precision();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2545:5: (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )?
			int alt576=2;
			int LA576_0 = input.LA(1);
			if ( (LA576_0==TIME_VK) ) {
				alt576=1;
			}
			switch (alt576) {
				case 1 :
					// PLSQLPrinter.g:2545:6: is_tz= TIME_VK (is_tz_local= LOCAL_VK )?
					{
					is_tz=(CommonTree)match(input,TIME_VK,FOLLOW_TIME_VK_in_native_datatype_spec27256); 
					// PLSQLPrinter.g:2545:31: (is_tz_local= LOCAL_VK )?
					int alt575=2;
					int LA575_0 = input.LA(1);
					if ( (LA575_0==LOCAL_VK) ) {
						alt575=1;
					}
					switch (alt575) {
						case 1 :
							// PLSQLPrinter.g:2545:31: is_tz_local= LOCAL_VK
							{
							is_tz_local=(CommonTree)match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_native_datatype_spec27260); 
							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			 if (typeBaseName == null) { typeBaseName = "Unsupported datatype"; } 
			// TEMPLATE REWRITE
			// 2548:5: -> base_type_spec(baseName=typeBaseNameprecision=$prec.stis_with_time_zone=$is_tz != nullis_time_zone_local=$is_tz_local != null)
			{
				retval.st = templateLib.getInstanceOf("base_type_spec",new STAttrMap().put("baseName", typeBaseName).put("precision", (prec!=null?((StringTemplate)prec.getTemplate()):null)).put("is_with_time_zone", is_tz != null).put("is_time_zone_local", is_tz_local != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "native_datatype_spec"


	public static class general_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_element"
	// PLSQLPrinter.g:2554:1: general_element : ^( CASCATED_ELEMENT ( general_element_id | function_argument )+ ) -> general_element(parts=parts);
	public final PLSQLPrinter.general_element_return general_element() throws RecognitionException {
		PLSQLPrinter.general_element_return retval = new PLSQLPrinter.general_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope general_element_id461 =null;
		TreeRuleReturnScope function_argument462 =null;


		    List<StringTemplate> parts = new ArrayList<StringTemplate>();

		try {
			// PLSQLPrinter.g:2558:5: ( ^( CASCATED_ELEMENT ( general_element_id | function_argument )+ ) -> general_element(parts=parts))
			// PLSQLPrinter.g:2558:10: ^( CASCATED_ELEMENT ( general_element_id | function_argument )+ )
			{
			match(input,CASCATED_ELEMENT,FOLLOW_CASCATED_ELEMENT_in_general_element27335); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2559:13: ( general_element_id | function_argument )+
			int cnt577=0;
			loop577:
			while (true) {
				int alt577=3;
				int LA577_0 = input.LA(1);
				if ( (LA577_0==ANY_ELEMENT) ) {
					alt577=1;
				}
				else if ( (LA577_0==ARGUMENTS) ) {
					alt577=2;
				}

				switch (alt577) {
				case 1 :
					// PLSQLPrinter.g:2560:15: general_element_id
					{
					pushFollow(FOLLOW_general_element_id_in_general_element27365);
					general_element_id461=general_element_id();
					state._fsp--;


					                if (parts.size() > 0) {
					                   parts.add(templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", ".")));
					                }
					                parts.add((general_element_id461!=null?((StringTemplate)general_element_id461.getTemplate()):null));
					              
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2566:17: function_argument
					{
					pushFollow(FOLLOW_function_argument_in_general_element27385);
					function_argument462=function_argument();
					state._fsp--;

					 parts.add((function_argument462!=null?((StringTemplate)function_argument462.getTemplate()):null)); 
					}
					break;

				default :
					if ( cnt577 >= 1 ) break loop577;
					EarlyExitException eee = new EarlyExitException(577, input);
					throw eee;
				}
				cnt577++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2569:5: -> general_element(parts=parts)
			{
				retval.st = templateLib.getInstanceOf("general_element",new STAttrMap().put("parts", parts));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_element"


	public static class general_element_id_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_element_id"
	// PLSQLPrinter.g:2572:1: general_element_id : ^( ANY_ELEMENT ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.general_element_id_return general_element_id() throws RecognitionException {
		PLSQLPrinter.general_element_id_return retval = new PLSQLPrinter.general_element_id_return();
		retval.start = input.LT(1);

		CommonTree ID463=null;

		try {
			// PLSQLPrinter.g:2573:5: ( ^( ANY_ELEMENT ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2573:7: ^( ANY_ELEMENT ID )
			{
			match(input,ANY_ELEMENT,FOLLOW_ANY_ELEMENT_in_general_element_id27448); 
			match(input, Token.DOWN, null); 
			ID463=(CommonTree)match(input,ID,FOLLOW_ID_in_general_element_id27450); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2573:25: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID463!=null?ID463.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_element_id"


	public static class constant_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constant"
	// PLSQLPrinter.g:2580:1: constant : (v1= UNSIGNED_INTEGER -> string_literal(val=$v1.text)| ^( MINUS_SIGN v2= UNSIGNED_INTEGER ) -> string_literal(val=\"-\" + $v2.text)| EXACT_NUM_LIT -> string_literal(val=$EXACT_NUM_LIT.text)| APPROXIMATE_NUM_LIT -> string_literal(val=$APPROXIMATE_NUM_LIT.text)| CHAR_STRING -> string_literal(val=$CHAR_STRING.text)| SQL92_RESERVED_NULL -> string_literal(val=\"null\")| SQL92_RESERVED_TRUE -> string_literal(val=\"true\")| SQL92_RESERVED_FALSE -> string_literal(val=\"false\")| DBTIMEZONE_VK -> string_literal(val=\"dbtimezone\")| SESSIONTIMEZONE_VK -> string_literal(val=\"sessiontimezone\")| MINVALUE_VK -> string_literal(val=\"minvalue\")| MAXVALUE_VK -> string_literal(val=\"maxvalue\")| SQL92_RESERVED_DEFAULT -> string_literal(val=\"default\"));
	public final PLSQLPrinter.constant_return constant() throws RecognitionException {
		PLSQLPrinter.constant_return retval = new PLSQLPrinter.constant_return();
		retval.start = input.LT(1);

		CommonTree v1=null;
		CommonTree v2=null;
		CommonTree EXACT_NUM_LIT464=null;
		CommonTree APPROXIMATE_NUM_LIT465=null;
		CommonTree CHAR_STRING466=null;

		try {
			// PLSQLPrinter.g:2581:5: (v1= UNSIGNED_INTEGER -> string_literal(val=$v1.text)| ^( MINUS_SIGN v2= UNSIGNED_INTEGER ) -> string_literal(val=\"-\" + $v2.text)| EXACT_NUM_LIT -> string_literal(val=$EXACT_NUM_LIT.text)| APPROXIMATE_NUM_LIT -> string_literal(val=$APPROXIMATE_NUM_LIT.text)| CHAR_STRING -> string_literal(val=$CHAR_STRING.text)| SQL92_RESERVED_NULL -> string_literal(val=\"null\")| SQL92_RESERVED_TRUE -> string_literal(val=\"true\")| SQL92_RESERVED_FALSE -> string_literal(val=\"false\")| DBTIMEZONE_VK -> string_literal(val=\"dbtimezone\")| SESSIONTIMEZONE_VK -> string_literal(val=\"sessiontimezone\")| MINVALUE_VK -> string_literal(val=\"minvalue\")| MAXVALUE_VK -> string_literal(val=\"maxvalue\")| SQL92_RESERVED_DEFAULT -> string_literal(val=\"default\"))
			int alt578=13;
			switch ( input.LA(1) ) {
			case UNSIGNED_INTEGER:
				{
				alt578=1;
				}
				break;
			case MINUS_SIGN:
				{
				alt578=2;
				}
				break;
			case EXACT_NUM_LIT:
				{
				alt578=3;
				}
				break;
			case APPROXIMATE_NUM_LIT:
				{
				alt578=4;
				}
				break;
			case CHAR_STRING:
				{
				alt578=5;
				}
				break;
			case SQL92_RESERVED_NULL:
				{
				alt578=6;
				}
				break;
			case SQL92_RESERVED_TRUE:
				{
				alt578=7;
				}
				break;
			case SQL92_RESERVED_FALSE:
				{
				alt578=8;
				}
				break;
			case DBTIMEZONE_VK:
				{
				alt578=9;
				}
				break;
			case SESSIONTIMEZONE_VK:
				{
				alt578=10;
				}
				break;
			case MINVALUE_VK:
				{
				alt578=11;
				}
				break;
			case MAXVALUE_VK:
				{
				alt578=12;
				}
				break;
			case SQL92_RESERVED_DEFAULT:
				{
				alt578=13;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 578, 0, input);
				throw nvae;
			}
			switch (alt578) {
				case 1 :
					// PLSQLPrinter.g:2581:10: v1= UNSIGNED_INTEGER
					{
					v1=(CommonTree)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_constant27486); 
					// TEMPLATE REWRITE
					// 2581:30: -> string_literal(val=$v1.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (v1!=null?v1.getText():null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2582:10: ^( MINUS_SIGN v2= UNSIGNED_INTEGER )
					{
					match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_constant27507); 
					match(input, Token.DOWN, null); 
					v2=(CommonTree)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_constant27511); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2582:44: -> string_literal(val=\"-\" + $v2.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "-" + (v2!=null?v2.getText():null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:2583:10: EXACT_NUM_LIT
					{
					EXACT_NUM_LIT464=(CommonTree)match(input,EXACT_NUM_LIT,FOLLOW_EXACT_NUM_LIT_in_constant27532); 
					// TEMPLATE REWRITE
					// 2583:24: -> string_literal(val=$EXACT_NUM_LIT.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (EXACT_NUM_LIT464!=null?EXACT_NUM_LIT464.getText():null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:2584:10: APPROXIMATE_NUM_LIT
					{
					APPROXIMATE_NUM_LIT465=(CommonTree)match(input,APPROXIMATE_NUM_LIT,FOLLOW_APPROXIMATE_NUM_LIT_in_constant27552); 
					// TEMPLATE REWRITE
					// 2584:30: -> string_literal(val=$APPROXIMATE_NUM_LIT.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (APPROXIMATE_NUM_LIT465!=null?APPROXIMATE_NUM_LIT465.getText():null)));
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:2585:10: CHAR_STRING
					{
					CHAR_STRING466=(CommonTree)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_constant27572); 
					// TEMPLATE REWRITE
					// 2585:22: -> string_literal(val=$CHAR_STRING.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (CHAR_STRING466!=null?CHAR_STRING466.getText():null)));
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:2586:10: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_constant27592); 
					// TEMPLATE REWRITE
					// 2586:30: -> string_literal(val=\"null\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "null"));
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:2587:10: SQL92_RESERVED_TRUE
					{
					match(input,SQL92_RESERVED_TRUE,FOLLOW_SQL92_RESERVED_TRUE_in_constant27612); 
					// TEMPLATE REWRITE
					// 2587:30: -> string_literal(val=\"true\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "true"));
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:2588:10: SQL92_RESERVED_FALSE
					{
					match(input,SQL92_RESERVED_FALSE,FOLLOW_SQL92_RESERVED_FALSE_in_constant27632); 
					// TEMPLATE REWRITE
					// 2588:31: -> string_literal(val=\"false\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "false"));
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:2589:10: DBTIMEZONE_VK
					{
					match(input,DBTIMEZONE_VK,FOLLOW_DBTIMEZONE_VK_in_constant27652); 
					// TEMPLATE REWRITE
					// 2589:25: -> string_literal(val=\"dbtimezone\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "dbtimezone"));
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:2590:10: SESSIONTIMEZONE_VK
					{
					match(input,SESSIONTIMEZONE_VK,FOLLOW_SESSIONTIMEZONE_VK_in_constant27673); 
					// TEMPLATE REWRITE
					// 2590:29: -> string_literal(val=\"sessiontimezone\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "sessiontimezone"));
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:2591:10: MINVALUE_VK
					{
					match(input,MINVALUE_VK,FOLLOW_MINVALUE_VK_in_constant27693); 
					// TEMPLATE REWRITE
					// 2591:22: -> string_literal(val=\"minvalue\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "minvalue"));
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:2592:10: MAXVALUE_VK
					{
					match(input,MAXVALUE_VK,FOLLOW_MAXVALUE_VK_in_constant27713); 
					// TEMPLATE REWRITE
					// 2592:22: -> string_literal(val=\"maxvalue\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "maxvalue"));
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:2593:10: SQL92_RESERVED_DEFAULT
					{
					match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_constant27733); 
					// TEMPLATE REWRITE
					// 2593:33: -> string_literal(val=\"default\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "default"));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constant"


	public static class id_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "id"
	// PLSQLPrinter.g:2598:1: id : ( char_set_name )? ID -> string_literal(val=$ID.text);
	public final PLSQLPrinter.id_return id() throws RecognitionException {
		PLSQLPrinter.id_return retval = new PLSQLPrinter.id_return();
		retval.start = input.LT(1);

		CommonTree ID467=null;

		try {
			// PLSQLPrinter.g:2599:5: ( ( char_set_name )? ID -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2599:10: ( char_set_name )? ID
			{
			// PLSQLPrinter.g:2599:10: ( char_set_name )?
			int alt579=2;
			int LA579_0 = input.LA(1);
			if ( (LA579_0==CHAR_SET_NAME) ) {
				alt579=1;
			}
			switch (alt579) {
				case 1 :
					// PLSQLPrinter.g:2599:10: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_id27768);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID467=(CommonTree)match(input,ID,FOLLOW_ID_in_id27771); 
			// TEMPLATE REWRITE
			// 2600:5: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID467!=null?ID467.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "id"

	// Delegated rules


	protected DFA184 dfa184 = new DFA184(this);
	protected DFA321 dfa321 = new DFA321(this);
	static final String DFA184_eotS =
		"\11\uffff";
	static final String DFA184_eofS =
		"\11\uffff";
	static final String DFA184_minS =
		"\1\u0251\1\2\1\u0306\1\2\1\u018e\2\3\2\uffff";
	static final String DFA184_maxS =
		"\1\u0251\1\2\1\u0306\1\2\2\u018e\1\u0257\2\uffff";
	static final String DFA184_acceptS =
		"\7\uffff\1\1\1\2";
	static final String DFA184_specialS =
		"\11\uffff}>";
	static final String[] DFA184_transitionS = {
			"\1\1",
			"\1\2",
			"\1\3",
			"\1\4",
			"\1\5",
			"\1\6\u018a\uffff\1\5",
			"\1\7\u016a\uffff\1\7\u00e8\uffff\1\10",
			"",
			""
	};

	static final short[] DFA184_eot = DFA.unpackEncodedString(DFA184_eotS);
	static final short[] DFA184_eof = DFA.unpackEncodedString(DFA184_eofS);
	static final char[] DFA184_min = DFA.unpackEncodedStringToUnsignedChars(DFA184_minS);
	static final char[] DFA184_max = DFA.unpackEncodedStringToUnsignedChars(DFA184_maxS);
	static final short[] DFA184_accept = DFA.unpackEncodedString(DFA184_acceptS);
	static final short[] DFA184_special = DFA.unpackEncodedString(DFA184_specialS);
	static final short[][] DFA184_transition;

	static {
		int numStates = DFA184_transitionS.length;
		DFA184_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA184_transition[i] = DFA.unpackEncodedString(DFA184_transitionS[i]);
		}
	}

	protected class DFA184 extends DFA {

		public DFA184(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 184;
			this.eot = DFA184_eot;
			this.eof = DFA184_eof;
			this.min = DFA184_min;
			this.max = DFA184_max;
			this.accept = DFA184_accept;
			this.special = DFA184_special;
			this.transition = DFA184_transition;
		}
		@Override
		public String getDescription() {
			return "826:1: record_type_dec : ( record_type_dec_record -> { $record_type_dec_record.st }| record_type_dec_refcursor -> { $record_type_dec_refcursor.st });";
		}
	}

	static final String DFA321_eotS =
		"\16\uffff";
	static final String DFA321_eofS =
		"\16\uffff";
	static final String DFA321_minS =
		"\1\u00c9\1\2\1\uffff\1\u0103\1\2\1\u00f5\1\2\1\3\1\u018e\1\u0103\1\3\2"+
		"\uffff\1\u018e";
	static final String DFA321_maxS =
		"\1\u0316\1\2\1\uffff\1\u0103\1\2\1\u018e\1\2\2\u018e\1\u02e9\1\u018e\2"+
		"\uffff\1\u018e";
	static final String DFA321_acceptS =
		"\2\uffff\1\3\10\uffff\1\1\1\2\1\uffff";
	static final String DFA321_specialS =
		"\16\uffff}>";
	static final String[] DFA321_transitionS = {
			"\1\1\u024c\uffff\1\2",
			"\1\3",
			"",
			"\1\4",
			"\1\5",
			"\1\6\u0098\uffff\1\7",
			"\1\10",
			"\1\11\u018a\uffff\1\7",
			"\1\12",
			"\1\14\144\uffff\1\13\141\uffff\1\13\u011e\uffff\1\14",
			"\1\15\u018a\uffff\1\12",
			"",
			"",
			"\1\7"
	};

	static final short[] DFA321_eot = DFA.unpackEncodedString(DFA321_eotS);
	static final short[] DFA321_eof = DFA.unpackEncodedString(DFA321_eofS);
	static final char[] DFA321_min = DFA.unpackEncodedStringToUnsignedChars(DFA321_minS);
	static final char[] DFA321_max = DFA.unpackEncodedStringToUnsignedChars(DFA321_maxS);
	static final short[] DFA321_accept = DFA.unpackEncodedString(DFA321_acceptS);
	static final short[] DFA321_special = DFA.unpackEncodedString(DFA321_specialS);
	static final short[][] DFA321_transition;

	static {
		int numStates = DFA321_transitionS.length;
		DFA321_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA321_transition[i] = DFA.unpackEncodedString(DFA321_transitionS[i]);
		}
	}

	protected class DFA321 extends DFA {

		public DFA321(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 321;
			this.eot = DFA321_eot;
			this.eof = DFA321_eof;
			this.min = DFA321_min;
			this.max = DFA321_max;
			this.accept = DFA321_accept;
			this.special = DFA321_special;
			this.transition = DFA321_transition;
		}
		@Override
		public String getDescription() {
			return "1429:1: update_set_elements : ( ^( ASSIGN column_name expression ) -> update_set_element_column_expr(column_name=$column_name.stexpression=$expression.st)| ^( ASSIGN (names+= column_name )+ subquery ) -> update_set_element_columns_subquery(column_names=$namessubquery=$subquery.st)| ^( VALUE_VK ( char_set_name )? ID expression ) -> update_set_element_column_value(column_name=$ID.textexpression=$expression.st));";
		}
	}

	public static final BitSet FOLLOW_COMPILATION_UNIT_in_compilation_unit69 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unit_statement_in_compilation_unit73 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0xC800000000000000L,0x0000000000000007L,0x0000001FE0000000L,0x00000000000FC000L});
	public static final BitSet FOLLOW_SQL_SCRIPT_in_sql_script112 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unit_statement_in_sql_script116 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0xC800000000000000L,0x0000000000000007L,0x0000001FE0000000L,0x00000000000FC000L});
	public static final BitSet FOLLOW_SET_SERVEROUTPUT_in_serveroutput_declaration155 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_serveroutput_declaration158 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OFF_VK_in_serveroutput_declaration160 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_alter_function_in_unit_statement196 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_package_in_unit_statement211 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_procedure_in_unit_statement226 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_sequence_in_unit_statement241 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_trigger_in_unit_statement256 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_type_in_unit_statement271 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_unit_statement286 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_unit_statement301 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_package_in_unit_statement316 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_sequence_in_unit_statement331 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_trigger_in_unit_statement346 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_unit_statement361 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_function_in_unit_statement376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_package_in_unit_statement391 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_procedure_in_unit_statement406 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_sequence_in_unit_statement421 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_trigger_in_unit_statement436 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_type_in_unit_statement451 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_FUNCTION_in_drop_function480 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_name_in_drop_function482 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_FUNCTION_in_alter_function518 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_name_in_alter_function520 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_function522 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_function525 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_function528 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_FUNCTION_in_create_function_body565 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_create_function_body567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_function_body570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_FUNCTION_NAME_in_create_function_body574 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_create_function_body578 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_type_spec_in_create_function_body584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_create_function_body587 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_create_function_body591 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_function_body609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101000040000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000010001000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_parallel_enable_clause_in_create_function_body614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000010001000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_result_cache_clause_in_create_function_body619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_DETERMINISTIC_VK_in_create_function_body622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_PIPELINED_VK_in_create_function_body625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_USING_MODE_in_create_function_body646 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_AGGREGATE_VK_in_create_function_body648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_implementation_type_name_in_create_function_body651 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CALL_MODE_in_create_function_body686 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_create_function_body688 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_create_function_body723 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_create_function_body725 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARALLEL_ENABLE_VK_in_parallel_enable_clause896 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_partition_by_clause_in_parallel_enable_clause898 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARTITION_VK_in_partition_by_clause935 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_partition_by_clause937 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_partition_by_clause957 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_HASH_VK_in_partition_by_clause977 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_partition_by_clause980 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_partition_by_clause982 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_RANGE_VK_in_partition_by_clause1005 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_partition_by_clause1008 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_partition_by_clause1010 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_streaming_clause_in_partition_by_clause1042 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RESULT_CACHE_VK_in_result_cache_clause1088 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_relies_on_part_in_result_cache_clause1090 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RELIES_ON_VK_in_relies_on_part1127 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_relies_on_part1129 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_STREAMING_CLAUSE_in_streaming_clause1166 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_streaming_clause1169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CLUSTER_VK_in_streaming_clause1171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_streaming_clause1174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_COLUMNS_in_streaming_clause1177 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_streaming_clause1179 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_PACKAGE_in_drop_package1222 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_package_name_in_drop_package1224 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_BODY_VK_in_drop_package1226 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_PACKAGE_in_alter_package1263 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_package_name_in_alter_package1265 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0040000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000200000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_package1267 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000200000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_package1270 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_PACKAGE_VK_in_alter_package1291 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_BODY_VK_in_alter_package1293 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SPECIFICATION_VK_in_alter_package1295 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_package1299 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_PACKAGE_SPEC_in_create_package1336 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_package1338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_package_name_in_create_package1341 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L,0x0000040000000000L,0x0000000100000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000060102L,0x0000000000000000L,0x000C040000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_package1343 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000100000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000060102L,0x0000000000000000L,0x000C040000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_package_obj_spec_in_create_package1348 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000100000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000060102L,0x0000000000000000L,0x000C040000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_CREATE_PACKAGE_BODY_in_create_package1416 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_package1418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_package_name_in_create_package1421 = new BitSet(new long[]{0x0000000000000008L,0x1000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041920000000L,0x0000000100000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000060100L,0x0000000000000000L,0x000C040200000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_package_obj_body_in_create_package1425 = new BitSet(new long[]{0x0000000000000008L,0x1000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041920000000L,0x0000000100000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000060100L,0x0000000000000000L,0x000C040200000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_create_package1428 = new BitSet(new long[]{0x0000000000000008L,0x1000000000000000L});
	public static final BitSet FOLLOW_exception_clause_in_create_package1431 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_variable_declaration_in_package_obj_spec1524 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_package_obj_spec1540 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_package_obj_spec1556 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_package_obj_spec1572 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_package_obj_spec1588 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_package_obj_spec1604 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedure_spec_in_package_obj_spec1620 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_spec_in_package_obj_spec1636 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pragma_declaration_in_package_obj_spec1652 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_SPEC_in_procedure_spec1678 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_name_in_procedure_spec1680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_procedure_spec1683 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_procedure_spec1687 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_CALL_MODE_in_procedure_spec1705 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_procedure_spec1707 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_SPEC_in_function_spec1757 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_name_in_function_spec1759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_function_spec1761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_function_spec1764 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_function_spec1768 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_PIPELINED_VK_in_function_spec1784 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_RESULT_CACHE_VK_in_function_spec1787 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_DETERMINISTIC_VK_in_function_spec1790 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_procedure_spec_in_package_obj_body1885 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_spec_in_package_obj_body1901 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variable_declaration_in_package_obj_body1917 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_package_obj_body1933 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_package_obj_body1949 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_package_obj_body1965 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_package_obj_body1981 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_package_obj_body1997 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_package_obj_body2013 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_package_obj_body2029 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_package_obj_body2045 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_PROCEDURE_in_drop_procedure2076 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_name_in_drop_procedure2078 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_PROCEDURE_in_alter_procedure2114 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_name_in_alter_procedure2116 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_procedure2118 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_procedure2121 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_procedure2124 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_PROCEDURE_in_create_procedure_body2161 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_create_procedure_body2163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000080L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_procedure_body2166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_procedure_name_in_create_procedure_body2169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_create_procedure_body2172 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_create_procedure_body2176 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_procedure_body2180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_create_procedure_body_impl_in_create_procedure_body2194 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXTERNAL_VK_in_create_procedure_body_impl2288 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CALL_MODE_in_create_procedure_body_impl2310 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_create_procedure_body_impl2312 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_create_procedure_body_impl2333 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_create_procedure_body_impl2335 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_TRIGGER_in_drop_trigger2365 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_drop_trigger2367 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_TRIGGER_in_alter_trigger2403 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_alter_trigger2405 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000400L,0x0000000002000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000208000000L});
	public static final BitSet FOLLOW_ENABLE_VK_in_alter_trigger2426 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DISABLE_VK_in_alter_trigger2428 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RENAME_VK_in_alter_trigger2449 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_alter_trigger2451 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_trigger2471 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_trigger2474 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_trigger2477 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_TRIGGER_in_create_trigger2537 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_trigger2539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_create_trigger2542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000003000L,0x0020000002000040L,0x0000000000000000L,0x0400000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_simple_dml_trigger_in_create_trigger2558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000003000L,0x0020000002000040L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_compound_dml_trigger_in_create_trigger2561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000002000L,0x0020000002000040L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_non_dml_trigger_in_create_trigger2564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000002000L,0x0020000002000040L});
	public static final BitSet FOLLOW_trigger_follows_clause_in_create_trigger2579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000002000L,0x0000000002000040L});
	public static final BitSet FOLLOW_ENABLE_VK_in_create_trigger2583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_DISABLE_VK_in_create_trigger2585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_trigger_when_clause_in_create_trigger2589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000201000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_trigger_body_in_create_trigger2592 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOLLOWS_VK_in_trigger_follows_clause2628 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_trigger_follows_clause2630 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_trigger_when_clause2667 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_trigger_when_clause2669 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_DML_in_simple_dml_trigger2706 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BEFORE_VK_in_simple_dml_trigger2709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_AFTER_VK_in_simple_dml_trigger2711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_INSTEAD_VK_in_simple_dml_trigger2713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_FOR_EACH_ROW_in_simple_dml_trigger2716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_referencing_clause_in_simple_dml_trigger2719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_dml_event_clause_in_simple_dml_trigger2722 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPOUND_DML_in_compound_dml_trigger2758 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_referencing_clause_in_compound_dml_trigger2760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_dml_event_clause_in_compound_dml_trigger2763 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NON_DML_in_non_dml_trigger2799 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BEFORE_VK_in_non_dml_trigger2802 = new BitSet(new long[]{0x0000000000000000L,0x0201002000000000L,0x0000000000800008L,0x0000000000020408L,0x0031000000000020L,0x0020000000000080L,0x0000000000000000L,0x0008000000001800L,0x0000000000000000L,0x0010000008000000L,0x0000000000004080L,0x0000080100000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_AFTER_VK_in_non_dml_trigger2804 = new BitSet(new long[]{0x0000000000000000L,0x0201002000000000L,0x0000000000800008L,0x0000000000020408L,0x0031000000000020L,0x0020000000000080L,0x0000000000000000L,0x0008000000001800L,0x0000000000000000L,0x0010000008000000L,0x0000000000004080L,0x0000080100000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_non_dml_event_in_non_dml_trigger2807 = new BitSet(new long[]{0x0000000000000000L,0x0201002000000000L,0x0000000000800008L,0x0000000000020408L,0x0031000000000020L,0x0020000000000080L,0x0000000000000000L,0x0008000000001800L,0x0000000000000000L,0x0018000008000000L,0x0000000000004080L,0x0000080100000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_DATABASE_VK_in_non_dml_trigger2811 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_schema_name_in_non_dml_trigger2813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_SCHEMA_VK_in_non_dml_trigger2816 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPOUND_VK_in_trigger_body2853 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_trigger_body2855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0030000000000000L,0x0000000001800000L,0x0000041920000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060002L,0x0000000000000000L,0x000C040000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_declare_spec_in_trigger_body2857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0030000000000000L,0x0000000001800000L,0x0000041920000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060002L,0x0000000000000000L,0x000C040000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_timing_point_section_in_trigger_body2860 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0030000000000000L,0x0000000001800000L});
	public static final BitSet FOLLOW_CALL_VK_in_trigger_body2888 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_routine_name_in_trigger_body2890 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_function_argument_in_trigger_body2892 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_trigger_body2921 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_trigger_body2923 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BEFORE_STATEMENT_in_timing_point_section2959 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section2961 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BEFORE_EACH_ROW_in_timing_point_section2988 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section2990 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AFTER_STATEMENT_in_timing_point_section3017 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section3019 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AFTER_EACH_ROW_in_timing_point_section3046 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section3048 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALTER_in_non_dml_event3083 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANALYZE_VK_in_non_dml_event3108 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASSOCIATE_VK_in_non_dml_event3133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_STATISTICS_VK_in_non_dml_event3135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUDIT_VK_in_non_dml_event3160 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMENT_VK_in_non_dml_event3185 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_non_dml_event3210 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DISASSOCIATE_VK_in_non_dml_event3235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_STATISTICS_VK_in_non_dml_event3237 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DROP_in_non_dml_event3262 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GRANT_in_non_dml_event3287 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOAUDIT_VK_in_non_dml_event3312 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RENAME_VK_in_non_dml_event3337 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_REVOKE_in_non_dml_event3362 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUNCATE_VK_in_non_dml_event3387 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DDL_VK_in_non_dml_event3412 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STARTUP_VK_in_non_dml_event3437 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SHUTDOWN_VK_in_non_dml_event3462 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DB_ROLE_CHANGE_VK_in_non_dml_event3487 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOGON_VK_in_non_dml_event3512 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOGOFF_VK_in_non_dml_event3537 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SERVERERROR_VK_in_non_dml_event3562 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SUSPEND_VK_in_non_dml_event3587 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATABASE_VK_in_non_dml_event3612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SCHEMA_VK_in_non_dml_event3637 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOLLOWS_VK_in_non_dml_event3662 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DML_EVENT_in_dml_event_clause3697 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_dml_event_element_in_dml_event_clause3699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_dml_event_clause3703 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_event_clause3705 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_dml_event_nested_clause_in_dml_event_clause3707 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DML_EVENT_ELEMENT_in_dml_event_element3747 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_dml_event_element3750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INSERT_in_dml_event_element3752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_dml_event_element3754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_COLUMNS_in_dml_event_element3758 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_dml_event_element3760 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_NESTED_VK_in_dml_event_nested_clause3798 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_event_nested_clause3800 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCING_VK_in_referencing_clause3836 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_referencing_element_in_referencing_clause3838 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000020000800L});
	public static final BitSet FOLLOW_NEW_VK_in_referencing_element3876 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_OLD_VK_in_referencing_element3878 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PARENT_VK_in_referencing_element3880 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_referencing_element3883 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_TYPE_in_drop_type3924 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_drop_type3926 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_BODY_VK_in_drop_type3928 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_FORCE_VK_in_drop_type3931 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_VALIDATE_VK_in_drop_type3934 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_TYPE_in_alter_type3971 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_alter_type3973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1600000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_REPLACE_VK_in_alter_type3994 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_OBJECT_MEMBERS_in_alter_type3997 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_element_spec_in_alter_type3999 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_alter_type4003 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_ATTRIBUTE_in_alter_type4025 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ADD_VK_in_alter_type4028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_MODIFY_VK_in_alter_type4030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DROP_in_alter_type4032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_ATTRIBUTES_in_alter_type4036 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_attribute_definition_in_alter_type4038 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_ALTER_METHOD_in_alter_type4061 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alter_method_element_in_alter_type4063 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_alter_collection_clauses_in_alter_type4084 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_modifier_clause_in_alter_type4103 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_COMPILE_VK_in_alter_type4123 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SPECIFICATION_VK_in_alter_type4126 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_BODY_VK_in_alter_type4128 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_type4132 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_type4135 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_type4138 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_dependent_handling_clause_in_alter_type4169 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_METHOD_ELEMENT_in_alter_method_element4217 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ADD_VK_in_alter_method_element4220 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DROP_in_alter_method_element4222 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_map_order_function_spec_in_alter_method_element4225 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_subprogram_spec_in_alter_method_element4228 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ATTRIBUTE_in_attribute_definition4265 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_attribute_name_in_attribute_definition4267 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_attribute_definition4269 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_COLLECTION_in_alter_collection_clauses4306 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_TYPE_VK_in_alter_collection_clauses4327 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_alter_collection_clauses4329 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LIMIT_VK_in_alter_collection_clauses4350 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_alter_collection_clauses4352 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEPENDENT_HANDLING_in_dependent_handling_clause4413 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_INVALIDATE_VK_in_dependent_handling_clause4433 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CASCADE_VK_in_dependent_handling_clause4453 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CONVERT_VK_in_dependent_handling_clause4481 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_dependent_handling_clause4508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_INCLUDING_VK_in_dependent_handling_clause4511 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXCEPTIONS_VK_in_dependent_exceptions_part4611 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_FORCE_VK_in_dependent_exceptions_part4613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_tableview_name_in_dependent_exceptions_part4616 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CREATE_TYPE_BODY_in_create_type4654 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_create_type4656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_type4659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_type_name_in_create_type4662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_TYPE_BODY_ELEMENTS_in_create_type4665 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_body_elements_in_create_type4667 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_CREATE_TYPE_SPEC_in_create_type4696 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_create_type4698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_type4701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_type_name_in_create_type4704 = new BitSet(new long[]{0x0000000000008008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_CHAR_STRING_in_create_type4706 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_object_type_def_in_create_type4709 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OBJECT_TYPE_DEF_in_object_type_def4746 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_object_as_part_in_object_type_def4749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_object_under_part_in_object_type_def4751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_object_type_def4754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_sqlj_object_type_in_object_type_def4770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_modifier_clause_in_object_type_def4773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_OBJECT_MEMBERS_in_object_type_def4777 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_element_spec_in_object_type_def4779 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_OBJECT_AS_in_object_as_part4819 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_OBJECT_VK_in_object_as_part4822 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_varray_type_def_in_object_as_part4824 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_nested_table_type_def_in_object_as_part4826 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNDER_VK_in_object_under_part4863 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_object_under_part4865 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NESTED_TABLE_TYPE_DEF_in_nested_table_type_def4901 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_nested_table_type_def4903 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_nested_table_type_def4905 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_table_indexed_by_part_in_nested_table_type_def4908 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_JAVA_VK_in_sqlj_object_type4945 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_sqlj_object_type4947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_SQLDATA_VK_in_sqlj_object_type4950 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CUSTOMDATUM_VK_in_sqlj_object_type4952 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ORADATA_VK_in_sqlj_object_type4954 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_map_order_func_declaration_in_type_body_elements4990 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subprog_decl_in_type_in_type_body_elements5015 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MAP_VK_in_map_order_func_declaration5051 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_map_order_func_declaration5053 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_create_function_body_in_map_order_func_declaration5056 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MEMBER_VK_in_subprog_decl_in_type5093 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_STATIC_VK_in_subprog_decl_in_type5095 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_create_procedure_body_in_subprog_decl_in_type5115 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_create_function_body_in_subprog_decl_in_type5134 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_constructor_declaration_in_subprog_decl_in_type5153 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRUCTOR_VK_in_constructor_declaration5212 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_constructor_declaration5214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_FINAL_VK_in_constructor_declaration5216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_INSTANTIABLE_VK_in_constructor_declaration5219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_constructor_declaration5223 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_elements_parameter_in_constructor_declaration5225 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_CALL_MODE_in_constructor_declaration5248 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_constructor_declaration5250 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_constructor_declaration5271 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_constructor_declaration5273 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODIFIER_in_modifier_clause5337 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_modifier_clause5339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_INSTANTIABLE_VK_in_modifier_clause5343 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FINAL_VK_in_modifier_clause5345 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OVERRIDING_VK_in_modifier_clause5347 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXTERNAL_VK_in_sqlj_object_type_attr5384 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_sqlj_object_type_attr5386 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ELEMENT_SPEC_in_element_spec5422 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_element_spec_options_in_element_spec5424 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000040000L,0x0000800000000000L,0x0000000000000000L,0x0000000400240000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_modifier_clause_in_element_spec5427 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_pragma_clause_in_element_spec5430 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_subprogram_spec_in_element_spec_options5466 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constructor_spec_in_element_spec_options5491 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_map_order_function_spec_in_element_spec_options5516 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FIELD_SPEC_in_element_spec_options5542 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_element_spec_options5544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_element_spec_options5546 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_sqlj_object_type_attr_in_element_spec_options5548 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MEMBER_VK_in_subprogram_spec5586 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_STATIC_VK_in_subprogram_spec5588 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_spec_in_subprogram_spec5608 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_function_spec_in_subprogram_spec5627 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRUCTOR_SPEC_in_constructor_spec5686 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_constructor_spec5688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_FINAL_VK_in_constructor_spec5690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_INSTANTIABLE_VK_in_constructor_spec5693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_constructor_spec5697 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_elements_parameter_in_constructor_spec5699 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_constructor_call_mode_in_constructor_spec5703 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CALL_MODE_in_constructor_call_mode5740 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_constructor_call_mode5742 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MAP_VK_in_map_order_function_spec5779 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_map_order_function_spec5781 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_spec_in_map_order_function_spec5784 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRAGMA_VK_in_pragma_clause5820 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pragma_elements_in_pragma_clause5822 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_id_in_pragma_elements5858 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_elements5883 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PARAMETER_in_type_elements_parameter5918 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_type_elements_parameter5920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_type_elements_parameter5922 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_SEQUENCE_in_drop_sequence5963 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_sequence_name_in_drop_sequence5965 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_SEQUENCE_in_alter_sequence6001 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_sequence_name_in_alter_sequence6003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000100000L,0x0B50000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
	public static final BitSet FOLLOW_sequence_spec_in_alter_sequence6005 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000100000L,0x0B50000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
	public static final BitSet FOLLOW_CREATE_SEQUENCE_in_create_sequence6042 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_sequence_name_in_create_sequence6044 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000100000L,0x0B50000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
	public static final BitSet FOLLOW_sequence_spec_in_create_sequence6046 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000100000L,0x0B50000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
	public static final BitSet FOLLOW_START_VK_in_sequence_spec6085 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6087 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INCREMENT_VK_in_sequence_spec6114 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6116 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MAXVALUE_VK_in_sequence_spec6143 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6145 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MINVALUE_VK_in_sequence_spec6172 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6174 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CACHE_VK_in_sequence_spec6201 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6203 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOMAXVALUE_VK_in_sequence_spec6229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOMINVALUE_VK_in_sequence_spec6254 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CYCLE_VK_in_sequence_spec6279 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOCYCLE_VK_in_sequence_spec6304 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOCACHE_VK_in_sequence_spec6329 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ORDER_VK_in_sequence_spec6354 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOORDER_VK_in_sequence_spec6379 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTHID_VK_in_invoker_rights_clause6420 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CURRENT_USER_VK_in_invoker_rights_clause6423 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEFINER_VK_in_invoker_rights_clause6425 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPILER_PARAMETER_in_compiler_parameters_clause6462 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASSIGN_in_compiler_parameters_clause6465 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_compiler_parameters_clause6467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_compiler_parameters_clause6469 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LANGUAGE_VK_in_call_spec6506 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_java_spec_in_call_spec6512 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_c_spec_in_call_spec6518 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_JAVA_VK_in_java_spec6559 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_java_spec6561 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_C_VK_in_c_spec6598 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_c_spec6600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_CONTEXT_VK_in_c_spec6603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_LIBRARY_VK_in_c_spec6607 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_c_spec6609 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_c_agent_in_clause_in_c_spec6612 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_c_parameters_clause_in_c_spec6615 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AGENT_VK_in_c_agent_in_clause6652 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_c_agent_in_clause6654 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_PARAMETERS_VK_in_c_parameters_clause6691 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_THREE_DOTS_in_c_parameters_clause6694 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_c_parameters_clause6696 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_PARAMETER_in_parameter6736 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_parameter6738 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000110000000L,0x0000020000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_parameter6741 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000110000000L,0x0000020000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_OUT_VK_in_parameter6743 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000110000000L,0x0000020000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_INOUT_VK_in_parameter6745 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000110000000L,0x0000020000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_type_spec_in_parameter6749 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_parameter6752 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEFAULT_VALUE_in_default_value_part6842 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_default_value_part6844 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_variable_declaration_in_declare_spec6886 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_declare_spec6902 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_declare_spec6918 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_declare_spec6934 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pragma_declaration_in_declare_spec6950 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_declare_spec6966 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_declare_spec6982 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_declare_spec6998 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_declare_spec7014 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_declare_spec7030 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIABLE_DECLARE_in_variable_declaration7056 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_variable_declaration7058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_variable_declaration7060 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x1000000000010000L});
	public static final BitSet FOLLOW_CONSTANT_VK_in_variable_declaration7062 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_variable_declaration7065 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_variable_declaration7068 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBTYPE_DECLARE_in_subtype_declaration7153 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_subtype_declaration7155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_subtype_declaration7157 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_subtype_declaration7159 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_subtype_range_in_subtype_declaration7162 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RANGE_VK_in_subtype_range7240 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_subtype_range7244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_subtype_range7248 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_DECLARE_in_cursor_declaration7291 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_cursor_declaration7293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L,0x0000000004000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_type_spec_in_cursor_declaration7295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_select_statement_in_cursor_declaration7298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_cursor_declaration7302 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_spec_in_cursor_declaration7306 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_PARAMETER_in_parameter_spec7382 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_parameter_spec7384 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_parameter_spec7386 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_parameter_spec7389 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXCEPTION_DECLARE_in_exception_declaration7459 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_exception_declaration7461 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRAGMA_DECLARE_in_pragma_declaration7511 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pragma_declaration_impl_in_pragma_declaration7513 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SERIALLY_REUSABLE_VK_in_pragma_declaration_impl7558 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTONOMOUS_TRANSACTION_VK_in_pragma_declaration_impl7581 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXCEPTION_INIT_VK_in_pragma_declaration_impl7604 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_pragma_declaration_impl7606 = new BitSet(new long[]{0x0000200008008040L,0x4020000000000000L,0x0000080040002000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_constant_in_pragma_declaration_impl7608 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INLINE_VK_in_pragma_declaration_impl7651 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_pragma_declaration_impl7653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_pragma_declaration_impl7655 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RESTRICT_REFERENCES_VK_in_pragma_declaration_impl7698 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_declaration_impl7736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_id_in_pragma_declaration_impl7762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_id_in_pragma_declaration_impl7802 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_record_type_dec_in_record_declaration7868 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_var_dec_in_record_declaration7883 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_type_dec_record_in_record_type_dec7910 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_type_dec_refcursor_in_record_type_dec7925 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_TYPE_DECLARE_in_record_type_dec_record7954 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_record_type_dec_record7956 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_FIELDS_in_record_type_dec_record7960 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_field_spec_in_record_type_dec_record7964 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_RECORD_TYPE_DECLARE_in_record_type_dec_refcursor8014 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_record_type_dec_refcursor8016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_REF_VK_in_record_type_dec_refcursor8018 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_record_type_dec_refcursor8020 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FIELD_SPEC_in_field_spec8063 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_field_spec8065 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x1000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_field_spec8067 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_field_spec8070 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_field_spec8073 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RECORD_VAR_DECLARE_in_record_var_dec8146 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_record_var_dec8148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_type_name_in_record_var_dec8150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000006000000000L});
	public static final BitSet FOLLOW_PERCENT_ROWTYPE_VK_in_record_var_dec8153 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PERCENT_TYPE_VK_in_record_var_dec8155 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_type_dec_in_table_declaration8193 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_var_dec_in_table_declaration8208 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_TYPE_DECLARE_in_table_type_dec8233 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_table_type_dec8235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_table_type_dec_impl_in_table_type_dec8237 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_type_dec_table_of_in_table_type_dec_impl8283 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varray_type_def_in_table_type_dec_impl8299 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_table_type_dec_table_of8327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TABLE_in_table_type_dec_table_of8331 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_table_type_dec_table_of8333 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_table_indexed_by_part_in_table_type_dec_table_of8335 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDEXED_BY_in_table_indexed_by_part8396 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_table_indexed_by_part8398 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_varray_type_def8434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_VARR_ARRAY_DEF_in_varray_type_def8438 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_varray_type_def8440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_varray_type_def8442 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_VAR_DECLARE_in_table_var_dec8489 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_var_name_in_table_var_dec8491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_table_var_dec8493 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STATEMENTS_in_seq_of_statements8534 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_statement_in_seq_of_statements8539 = new BitSet(new long[]{0x0000000000000008L,0x8040000000000024L,0x0000000200002084L,0x0802000A00000200L,0x0000000000400080L,0x0240006000000000L,0x0080000000000000L,0x0000000001008000L,0x0000020000002000L,0x8042008100000800L,0x0000000000040A00L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_labeled_statement_in_seq_of_statements8543 = new BitSet(new long[]{0x0000000000000008L,0x8040000000000024L,0x0000000200002084L,0x0802000A00000200L,0x0000000000400080L,0x0240006000000000L,0x0080000000000000L,0x0000000001008000L,0x0000020000002000L,0x8042008100000800L,0x0000000000040A00L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_LABEL_DECLARE_in_labeled_statement8584 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_labeled_statement8586 = new BitSet(new long[]{0x0000000000000000L,0x8040000000000024L,0x0000000200002084L,0x0802000A00000200L,0x0000000000400080L,0x0240006000000000L,0x0000000000000000L,0x0000000001008000L,0x0000020000002000L,0x8042008100000800L,0x0000000000040A00L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_statement_in_labeled_statement8588 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_assignment_statement_in_statement8623 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_continue_statement_in_statement8638 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exit_statement_in_statement8653 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_goto_statement_in_statement8668 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_if_statement_in_statement8683 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_loop_statement_in_statement8698 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_forall_statement_in_statement8713 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_null_statement_in_statement8728 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_raise_statement_in_statement8743 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_return_statement_in_statement8758 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pipe_row_statement_in_statement8773 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_statement_in_statement8788 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sql_statement_in_statement8803 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_general_element_in_statement8818 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_body_in_statement8833 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_statement8848 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASSIGN_in_assignment_statement8874 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_assignment_statement8879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_hosted_variable_name_in_assignment_statement8883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_assignment_statement8886 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONTINUE_VK_in_continue_statement8928 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_continue_statement8930 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_general_when_in_continue_statement8933 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_general_when8976 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_general_when8978 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXIT_VK_in_exit_statement9015 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_exit_statement9017 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_general_when_in_exit_statement9020 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GOTO_in_goto_statement9063 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_goto_statement9065 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_IF_in_if_statement9102 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_if_statement9104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_if_statement9106 = new BitSet(new long[]{0x0080000000000008L,0x0400000000000000L});
	public static final BitSet FOLLOW_elsif_part_in_if_statement9110 = new BitSet(new long[]{0x0080000000000008L,0x0400000000000000L});
	public static final BitSet FOLLOW_else_part_in_if_statement9113 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_part9187 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_elsif_part9189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_elsif_part9191 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_else_part9233 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_else_part9235 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WHILE_LOOP_in_loop_statement9272 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_loop_statement9274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement9276 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOR_LOOP_in_loop_statement9309 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_loop_param_in_loop_statement9311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement9313 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LOOP_VK_in_loop_statement9346 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement9348 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDEXED_FOR_in_cursor_loop_param9387 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_cursor_loop_param9389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_REVERSE_VK_in_cursor_loop_param9391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_SIMPLE_BOUND_in_cursor_loop_param9395 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_cursor_loop_param9399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_cursor_loop_param9403 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_BASED_FOR_in_cursor_loop_param9447 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_cursor_loop_param9449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_general_element_in_cursor_loop_param9451 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_BASED_FOR_in_cursor_loop_param9484 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_cursor_loop_param9486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_select_statement_in_cursor_loop_param9488 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FORALL_VK_in_forall_statement9532 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_forall_statement9534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_bounds_clause_in_forall_statement9536 = new BitSet(new long[]{0x0000000000000000L,0x8040000000000020L,0x0000000200000080L,0x0800000000000000L,0x0000000000000080L,0x0000002000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000002000L,0x8002008000000000L,0x0000000000000A00L});
	public static final BitSet FOLLOW_sql_statement_in_forall_statement9538 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_EXCEPTIONS_VK_in_forall_statement9540 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_BOUND_in_bounds_clause9577 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_bounds_clause9579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_bounds_clause9581 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDICES_BOUND_in_bounds_clause9608 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_collection_name_in_bounds_clause9610 = new BitSet(new long[]{0x0000000000000008L,0x0000080000000000L});
	public static final BitSet FOLLOW_between_bound_in_bounds_clause9612 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VALUES_BOUND_in_bounds_clause9640 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_bounds_clause9642 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_between_bound9679 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_between_bound9681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_between_bound9683 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_null_statement9718 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RAISE_VK_in_raise_statement9751 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_raise_statement9753 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RETURN_VK_in_return_statement9791 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_return_statement9793 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_in_body9825 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_body9827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_body9830 = new BitSet(new long[]{0x0000000000000008L,0x1000000000000000L});
	public static final BitSet FOLLOW_exception_clause_in_body9832 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_clause9883 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_handler_in_exception_clause9887 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_exception_handler9925 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_exception_handler9929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_exception_handler9932 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BLOCK_in_block9976 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_declare_spec_in_block9980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000041920000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060002L,0x0000000000000000L,0x000C040000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_body_in_block9983 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_execute_immediate_in_sql_statement10028 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_data_manipulation_language_statements_in_sql_statement10043 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_manipulation_statements_in_sql_statement10058 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_transaction_control_statements_in_sql_statement10073 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXECUTE_VK_in_execute_immediate10098 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_execute_immediate10100 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000000200L,0x0000020000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_into_clause_in_execute_immediate10119 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_execute_immediate10123 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_using_clause_in_execute_immediate10143 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_dynamic_returning_clause_in_execute_immediate10147 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_dynamic_returning_clause_in_execute_immediate10167 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DYNAMIC_RETURN_in_dynamic_returning_clause10263 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_into_clause_in_dynamic_returning_clause10265 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_merge_statement_in_data_manipulation_language_statements10305 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lock_table_statement_in_data_manipulation_language_statements10320 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_select_statement_in_data_manipulation_language_statements10335 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_update_statement_in_data_manipulation_language_statements10350 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delete_statement_in_data_manipulation_language_statements10365 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statement_in_data_manipulation_language_statements10380 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SELECT_STATEMENT_in_select_statement10405 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_factoring_clause_in_select_statement10407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_subquery_in_select_statement10410 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040001L});
	public static final BitSet FOLLOW_order_by_clause_in_select_statement10412 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_for_update_clause_in_select_statement10415 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WITH_in_subquery_factoring_clause10518 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_RECURSIVE_VK_in_subquery_factoring_clause10520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_factoring_element_in_subquery_factoring_clause10525 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_FACTORING_in_factoring_element10568 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_name_in_factoring_element10570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_column_name_in_factoring_element10574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_subquery_in_factoring_element10577 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_factoring_element10579 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBQUERY_in_subquery10659 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_basic_elements_in_subquery10661 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000040L,0x0000000080000100L});
	public static final BitSet FOLLOW_subquery_operation_part_in_subquery10665 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000040L,0x0000000080000100L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNION_in_subquery_operation_part10742 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTERSECT_in_subquery_operation_part10761 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_MINUS_in_subquery_operation_part10780 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_subquery_operation_part10810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_subquery_basic_elements_in_subquery_operation_part10813 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_query_block_in_subquery_basic_elements10870 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_subquery_basic_elements10885 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_SELECT_in_query_block10921 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_from_clause_in_query_block10936 = new BitSet(new long[]{0x0000000000000100L,0x0100001000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_query_block10952 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_query_block10954 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_query_block10956 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_ASTERISK_in_query_block10978 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000002000000210L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_SELECT_LIST_in_query_block10998 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_selected_element_in_query_block11002 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_into_clause_in_query_block11032 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000002000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_where_clause_in_query_block11035 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_hierarchical_query_clause_in_query_block11038 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_group_by_clause_in_query_block11054 = new BitSet(new long[]{0x0100000000000008L});
	public static final BitSet FOLLOW_model_clause_in_query_block11057 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_ITEM_in_selected_element11286 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_selected_element11288 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_alias_in_selected_element11290 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FROM_in_from_clause11333 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_ref_in_from_clause11337 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_TABLE_REF_in_table_ref11375 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_ref_aux_in_table_ref11377 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_join_clause_in_table_ref11381 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_TABLE_REF_ELEMENT_in_table_ref_aux11424 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_table_ref_aux11426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001800000000000L});
	public static final BitSet FOLLOW_dml_table_expression_clause_in_table_ref_aux11429 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020002000L});
	public static final BitSet FOLLOW_ONLY_VK_in_table_ref_aux11432 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_pivot_clause_in_table_ref_aux11434 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_unpivot_clause_in_table_ref_aux11436 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_flashback_query_clause_in_table_ref_aux11440 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_JOIN_DEF_in_join_clause11537 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_partition_clause_in_join_clause11553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x1000000000000000L,0x8000000008000000L,0x0000080000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_CROSS_VK_in_join_clause11569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x8000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_NATURAL_VK_in_join_clause11571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x8000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_INNER_VK_in_join_clause11576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_FULL_VK_in_join_clause11578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_LEFT_VK_in_join_clause11580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_RIGHT_VK_in_join_clause11582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_table_ref_aux_in_join_clause11586 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_query_partition_clause_in_join_clause11602 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_join_on_part_in_join_clause11618 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_join_using_part_in_join_clause11620 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_join_on_part11746 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_join_on_part11748 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_join_using_part11785 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_join_using_part11787 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_PARTITION_VK_in_query_partition_clause11824 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_partition_clause_impl_in_query_partition_clause11826 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_subquery_in_query_partition_clause_impl11865 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_query_partition_clause_impl11886 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_query_partition_clause_impl11904 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_VERSIONS_VK_in_flashback_query_clause11936 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_AS_in_flashback_query_clause11938 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SCN_VK_in_flashback_query_clause11942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_TIMESTAMP_VK_in_flashback_query_clause11944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_flashback_query_clause11948 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIVOT_VK_in_pivot_clause11985 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_XML_VK_in_pivot_clause11987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_pivot_element_in_pivot_clause11990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_pivot_for_clause_in_pivot_clause11993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_pivot_in_clause_in_pivot_clause11995 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIVOT_ELEMENT_in_pivot_element12031 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_pivot_element12033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_pivot_element12036 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FOR_in_pivot_for_clause12072 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_pivot_for_clause12074 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_pivot_in_clause12111 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_pivot_in_clause12127 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ANY_MODE_in_pivot_in_clause12143 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_pivot_in_clause12145 = new BitSet(new long[]{0x0000000000000008L,0x0000008000000000L});
	public static final BitSet FOLLOW_ELEMENTS_MODE_in_pivot_in_clause12163 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pivot_in_clause_element_in_pivot_in_clause12165 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_PIVOT_IN_ELEMENT_in_pivot_in_clause_element12222 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_pivot_in_clause_element12224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_pivot_in_clause_element12228 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_pivot_in_clause_element12230 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNPIVOT_VK_in_unpivot_clause12267 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_INCLUDE_VK_in_unpivot_clause12271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_EXCLUDE_VK_in_unpivot_clause12273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_NULLS_VK_in_unpivot_clause12276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_column_name_in_unpivot_clause12281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_pivot_for_clause_in_unpivot_clause12284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_unpivot_in_clause_in_unpivot_clause12286 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_unpivot_in_clause12322 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unpivot_in_element_in_unpivot_in_clause12324 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_UNPIVOT_IN_ELEMENT_in_unpivot_in_element12361 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_unpivot_in_element12363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_PIVOT_ALIAS_in_unpivot_in_element12367 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_unpivot_in_element12370 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_unpivot_in_element12372 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_HIERARCHICAL_in_hierarchical_query_clause12410 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_start_part_in_hierarchical_query_clause12412 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CONNECT_in_hierarchical_query_clause12416 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NOCYCLE_VK_in_hierarchical_query_clause12418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_hierarchical_query_clause12421 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_START_in_start_part12469 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_start_part12471 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GROUP_in_group_by_clause12508 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_group_by_element_in_group_by_clause12512 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_having_clause_in_group_by_clause12515 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_GROUP_BY_ELEMENT_in_group_by_element12558 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_group_by_elements_in_group_by_element12560 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_GROUPING_VK_in_group_by_elements12586 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_groupin_set_in_group_by_elements12588 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_grouping_element_in_group_by_elements12615 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GROUPIN_SET_in_groupin_set12640 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_grouping_element_in_groupin_set12642 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLUP_VK_in_grouping_element12678 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_grouping_element_in_grouping_element12682 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_CUBE_VK_in_grouping_element12711 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_grouping_element_in_grouping_element12715 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_expression_list_in_grouping_element12743 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_grouping_element12758 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_HAVING_in_having_clause12783 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_having_clause12785 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_clause12822 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_main_model_in_model_clause12824 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000100200000L});
	public static final BitSet FOLLOW_cell_reference_options_in_model_clause12826 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000100200000L});
	public static final BitSet FOLLOW_return_rows_clause_in_model_clause12829 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_reference_model_in_model_clause12832 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_set_in_cell_reference_options12869 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NAV_VK_in_cell_reference_options12875 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_cell_reference_options12888 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DIMENSION_VK_in_cell_reference_options12891 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SINGLE_VK_in_cell_reference_options12893 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RETURN_VK_in_return_rows_clause12930 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UPDATED_VK_in_return_rows_clause12933 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_return_rows_clause12935 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCE_VK_in_reference_model12972 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_reference_model_name_in_reference_model12974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_subquery_in_reference_model12976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_model_column_clauses_in_reference_model12978 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L});
	public static final BitSet FOLLOW_cell_reference_options_in_reference_model12980 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L});
	public static final BitSet FOLLOW_MAIN_MODEL_in_main_model13017 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_main_model_name_in_main_model13019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_model_column_clauses_in_main_model13022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_model_rules_clause_in_main_model13024 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L});
	public static final BitSet FOLLOW_cell_reference_options_in_main_model13026 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000008000L});
	public static final BitSet FOLLOW_MODEL_COLUMN_in_model_column_clauses13063 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DIMENSION_VK_in_model_column_clauses13066 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_clauses13068 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MEASURES_VK_in_model_column_clauses13072 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_clauses13074 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_model_column_partition_part_in_model_column_clauses13077 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARTITION_VK_in_model_column_partition_part13114 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_partition_part13116 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_COLUMNS_in_model_column_list13152 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_in_model_column_list13154 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_MODEL_COLUMN_in_model_column13191 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_model_column13193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_model_column13196 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_RULES_in_model_rules_clause13233 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_rules_element_in_model_rules_clause13235 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_model_rules_part_in_model_rules_clause13238 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RULES_VK_in_model_rules_part13275 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_part13291 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_UPSERT_VK_in_model_rules_part13293 = new BitSet(new long[]{0x0000000000000008L,0x0000001000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_model_rules_part13295 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_AUTOMATIC_VK_in_model_rules_part13314 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_SEQUENTIAL_VK_in_model_rules_part13316 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_model_iterate_clause_in_model_rules_part13333 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_RULE_in_model_rules_element13379 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASSIGN_in_model_rules_element13395 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_expression_in_model_rules_element13397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_model_rules_element13399 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_element13416 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_UPSERT_VK_in_model_rules_element13418 = new BitSet(new long[]{0x0000000000000008L,0x0000001000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_model_rules_element13420 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_model_rules_element13438 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ITERATE_VK_in_model_iterate_clause13484 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_model_iterate_clause13486 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_until_part_in_model_iterate_clause13488 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNTIL_VK_in_until_part13525 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_until_part13527 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_order_by_clause13563 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SIBLINGS_VK_in_order_by_clause13565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ORDER_BY_ELEMENTS_in_order_by_clause13569 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_order_by_elements_in_order_by_clause13573 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_ORDER_BY_ELEMENT_in_order_by_elements13617 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_order_by_elements13619 = new BitSet(new long[]{0x0000000000000008L,0x0080020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ASC_in_order_by_elements13622 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DESC_in_order_by_elements13624 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_NULLS_VK_in_order_by_elements13629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_FIRST_VK_in_order_by_elements13632 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LAST_VK_in_order_by_elements13634 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FOR_in_for_update_clause13715 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_for_update_of_part_in_for_update_clause13717 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_for_update_options_in_for_update_clause13720 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_OF_in_for_update_of_part13763 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_for_update_of_part13767 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SKIP_VK_in_for_update_options13804 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_for_update_options13821 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WAIT_VK_in_for_update_options13839 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_update_options13841 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_update_statement13874 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_update_statement13876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_SET_VK_in_update_statement13891 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_update_set_elements_in_update_statement13895 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_where_clause_in_update_statement13911 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_static_returning_clause_in_update_statement13914 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_update_statement13917 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_update_set_elements14023 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_update_set_elements14025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_update_set_elements14027 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_update_set_elements14060 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_update_set_elements14064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_subquery_in_update_set_elements14067 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VALUE_VK_in_update_set_elements14100 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_update_set_elements14102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_update_set_elements14105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_update_set_elements14107 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_delete_statement14151 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_delete_statement14153 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_where_clause_in_delete_statement14167 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_static_returning_clause_in_delete_statement14170 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_delete_statement14173 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INSERT_in_insert_statement14251 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_single_table_insert_in_insert_statement14281 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_multi_table_insert_in_insert_statement14306 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SINGLE_TABLE_MODE_in_single_table_insert14359 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_insert_into_clause_in_single_table_insert14361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_values_clause_in_single_table_insert14364 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_static_returning_clause_in_single_table_insert14366 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_select_statement_in_single_table_insert14370 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_single_table_insert14373 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MULTI_TABLE_MODE_in_multi_table_insert14468 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_select_statement_in_multi_table_insert14470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_conditional_insert_clause_in_multi_table_insert14473 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_multi_table_element_in_multi_table_insert14475 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_TABLE_ELEMENT_in_multi_table_element14513 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_insert_into_clause_in_multi_table_element14515 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_values_clause_in_multi_table_element14517 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_multi_table_element14520 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONDITIONAL_INSERT_in_conditional_insert_clause14557 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_conditional_insert_clause14560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_FIRST_VK_in_conditional_insert_clause14562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_conditional_insert_when_part_in_conditional_insert_clause14566 = new BitSet(new long[]{0x0000000000000008L,0x0400000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_conditional_insert_else_part_in_conditional_insert_clause14569 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_conditional_insert_when_part14607 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_conditional_insert_when_part14609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_when_part14611 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_conditional_insert_else_part14648 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_else_part14650 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_insert_into_clause14687 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_insert_into_clause14689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_COLUMNS_in_insert_into_clause14692 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_insert_into_clause14696 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_VALUES_in_values_clause14740 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_values_clause14745 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_values_clause14749 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_VK_in_merge_statement14788 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_merge_statement14790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_tableview_name_in_merge_statement14793 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_merge_statement14809 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_selected_tableview_in_merge_statement14811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_merge_statement14813 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_merge_update_clause_in_merge_statement14829 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000402000L});
	public static final BitSet FOLLOW_merge_insert_clause_in_merge_statement14832 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_error_logging_clause_in_merge_statement14835 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_UPDATE_in_merge_update_clause14936 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_merge_element_in_merge_update_clause14940 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000002000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_where_clause_in_merge_update_clause14943 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L});
	public static final BitSet FOLLOW_merge_update_delete_part_in_merge_update_clause14946 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_merge_element15015 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_merge_element15017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_merge_element15019 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_merge_update_delete_part15061 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_where_clause_in_merge_update_delete_part15063 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_INSERT_in_merge_insert_clause15100 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_merge_insert_clause15103 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_merge_insert_clause15107 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_merge_insert_clause15111 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_where_clause_in_merge_insert_clause15113 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECTED_TABLEVIEW_in_selected_tableview15162 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_selected_tableview15176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_tableview_name_in_selected_tableview15207 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_select_statement_in_selected_tableview15255 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_LOCK_in_lock_table_statement15334 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_lock_table_element_in_lock_table_statement15336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000801L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_lock_mode_in_lock_table_statement15339 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_wait_nowait_part_in_lock_table_statement15341 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WAIT_VK_in_wait_nowait_part15378 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_wait_nowait_part15380 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_wait_nowait_part15406 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCK_TABLE_ELEMENT_in_lock_table_element15443 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_lock_table_element15445 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_extension_clause_in_lock_table_element15447 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode15483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode15485 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode15510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode15512 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode15537 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_lock_mode15539 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode15565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode15567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode15569 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode15594 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_REF_in_general_table_ref15632 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_general_table_ref15634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001800000000000L});
	public static final BitSet FOLLOW_dml_table_expression_clause_in_general_table_ref15637 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_ONLY_VK_in_general_table_ref15639 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STATIC_RETURNING_in_static_returning_clause15724 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_static_returning_clause15728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000020000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_into_clause_in_static_returning_clause15731 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LOG_VK_in_error_logging_clause15773 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_error_logging_into_part_in_error_logging_clause15775 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_expression_in_error_logging_clause15778 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_error_logging_reject_part_in_error_logging_clause15781 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_error_logging_into_part15818 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_error_logging_into_part15820 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REJECT_VK_in_error_logging_reject_part15856 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNLIMITED_VK_in_error_logging_reject_part15859 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_error_logging_reject_part15861 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_EXPRESSION_in_dml_table_expression_clause15898 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLLECTION_MODE_in_dml_table_expression_clause15915 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_collection_expression_in_dml_table_expression_clause15917 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_MODE_in_dml_table_expression_clause15938 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_select_statement_in_dml_table_expression_clause15940 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause15942 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DIRECT_MODE_in_dml_table_expression_clause16031 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_table_expression_clause16033 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_sample_clause_in_dml_table_expression_clause16035 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_general_element_in_dml_table_expression_clause16080 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_standard_function_in_dml_table_expression_clause16099 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_ref_in_dml_table_expression_clause16138 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_table_collection_expression16166 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_table_collection_expression16195 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OUTER_JOIN_SIGN_in_table_collection_expression16225 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_table_collection_expression16227 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OUTER_JOIN_SIGN_in_table_collection_expression16258 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_table_collection_expression16260 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WITH_in_subquery_restriction_clause16301 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_READ_VK_in_subquery_restriction_clause16304 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CHECK_in_subquery_restriction_clause16306 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_constraint_name_in_subquery_restriction_clause16308 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAMPLE_VK_in_sample_clause16346 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BLOCK_VK_in_sample_clause16348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_sample_clause16351 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_seed_part_in_sample_clause16353 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SEED_VK_in_seed_part16391 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_seed_part16393 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_close_statement_in_cursor_manipulation_statements16434 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_open_statement_in_cursor_manipulation_statements16449 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fetch_statement_in_cursor_manipulation_statements16464 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_open_for_statement_in_cursor_manipulation_statements16479 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLOSE_VK_in_close_statement16505 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_close_statement16507 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OPEN_VK_in_open_statement16545 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_open_statement16547 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_expression_list_in_open_statement16549 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FETCH_in_fetch_statement16592 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_fetch_statement16594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000020000000000L});
	public static final BitSet FOLLOW_into_clause_in_fetch_statement16596 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OPEN_VK_in_open_for_statement16638 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_open_for_statement16640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_expression_in_open_for_statement16645 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_select_statement_in_open_for_statement16649 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_open_for_statement16652 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_transaction_command_in_transaction_control_statements16703 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_constraint_command_in_transaction_control_statements16718 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_commit_statement_in_transaction_control_statements16733 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rollback_statement_in_transaction_control_statements16748 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_savepoint_statement_in_transaction_control_statements16763 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_TRANSACTION_in_set_transaction_command16788 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_set_transaction_command16790 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000004000L});
	public static final BitSet FOLLOW_READ_VK_in_set_transaction_command16811 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ONLY_VK_in_set_transaction_command16814 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WRITE_VK_in_set_transaction_command16816 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ISOLATION_VK_in_set_transaction_command16838 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SERIALIZABLE_VK_in_set_transaction_command16841 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMMITTED_VK_in_set_transaction_command16843 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_VK_in_set_transaction_command16865 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_rollback_segment_name_in_set_transaction_command16867 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SET_CONSTRAINT_in_set_constraint_command16928 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_set_constraint_command16931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_constraint_name_in_set_constraint_command16933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000020000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_IMMEDIATE_VK_in_set_constraint_command16938 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEFERRED_VK_in_set_constraint_command16940 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMMIT_VK_in_commit_statement16978 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WORK_VK_in_commit_statement16980 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L,0x0080000000000000L});
	public static final BitSet FOLLOW_commit_comment_in_commit_statement17013 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_commit_force_in_commit_statement17033 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMMENT_VK_in_commit_comment17124 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_commit_comment17128 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_write_clause_in_commit_comment17131 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FORCE_VK_in_commit_force17175 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CORRUPT_XID_VK_in_commit_force17201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_commit_force17205 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CORRUPT_XID_ALL_VK_in_commit_force17230 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_commit_force17254 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_commit_force17258 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WRITE_VK_in_write_clause17316 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WAIT_VK_in_write_clause17319 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_write_clause17321 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_IMMEDIATE_VK_in_write_clause17326 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BATCH_VK_in_write_clause17328 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_VK_in_rollback_statement17404 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WORK_VK_in_rollback_statement17406 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TO_in_rollback_statement17430 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_savepoint_name_in_rollback_statement17432 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FORCE_VK_in_rollback_statement17455 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_rollback_statement17457 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAVEPOINT_VK_in_savepoint_statement17572 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_savepoint_name_in_savepoint_statement17574 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIPE_ROW_in_pipe_row_statement17616 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_pipe_row_statement17618 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXPR_LIST_in_expression_list17659 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_expression_list17663 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_LOGIC_EXPR_in_expression17701 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression17703 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXPR_in_expression17720 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression17722 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_OR_in_expression_element17779 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_AND_in_expression_element17797 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_EQUALS_OP_in_expression_element17815 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NOT_EQUAL_OP_in_expression_element17833 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LESS_THAN_OP_in_expression_element17851 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_GREATER_THAN_OP_in_expression_element17869 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LESS_THAN_OR_EQUALS_OP_in_expression_element17887 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_GREATER_THAN_OR_EQUALS_OP_in_expression_element17905 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CONCATENATION_OP_in_expression_element17923 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PLUS_SIGN_in_expression_element17941 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_MINUS_SIGN_in_expression_element17959 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASTERISK_in_expression_element17977 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SOLIDUS_in_expression_element17995 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_in_expression_element18013 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_MOD_VK_in_expression_element18031 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DIV_VK_in_expression_element18049 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18077 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000800L,0xA004001088280038L,0x0000041E00040001L,0x0040000000000000L,0x0000000004040100L,0x0000028080000000L,0x0000000010000100L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18081 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_expression_element18129 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18133 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_NULL_in_expression_element18190 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NULL_in_expression_element18210 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_NAN_in_expression_element18230 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NAN_in_expression_element18250 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_PRESENT_in_expression_element18270 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_PRESENT_in_expression_element18290 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_INFINITE_in_expression_element18310 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_INFINITE_in_expression_element18330 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_A_SET_in_expression_element18350 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_A_SET_in_expression_element18370 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_EMPTY_in_expression_element18390 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_EMPTY_in_expression_element18410 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18442 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_OF_TYPE_in_expression_element18486 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_expression_element18490 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_IS_OF_TYPE_in_expression_element18518 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_expression_element18522 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_MEMBER_VK_in_expression_element18552 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SUBMULTISET_VK_in_expression_element18554 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18557 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000800L,0xA004001088280038L,0x0000041E00040001L,0x0040000000000000L,0x0000000004040100L,0x0000028080000000L,0x0000000010000100L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18559 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOT_IN_in_expression_element18587 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_in_elements_in_expression_element18593 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_expression_element18626 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000030000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_in_elements_in_expression_element18632 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOT_BETWEEN_in_expression_element18665 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18669 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000800L,0xA004001088280038L,0x0000041E00040001L,0x0040000000000000L,0x0000000004040100L,0x0000028080000000L,0x0000000010000100L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18673 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000800L,0xA004001088280038L,0x0000041E00040001L,0x0040000000000000L,0x0000000004040100L,0x0000028080000000L,0x0000000010000100L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18677 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_expression_element18720 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18724 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000800L,0xA004001088280038L,0x0000041E00040001L,0x0040000000000000L,0x0000000004040100L,0x0000028080000000L,0x0000000010000100L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18728 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000800L,0xA004001088280038L,0x0000041E00040001L,0x0040000000000000L,0x0000000004040100L,0x0000028080000000L,0x0000000010000100L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18732 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_LIKE_in_expression_element18804 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LIKEC_VK_in_expression_element18824 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LIKE2_VK_in_expression_element18844 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LIKE4_VK_in_expression_element18864 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NOT_LIKE_in_expression_element18884 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18916 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000800L,0xA004001088280038L,0x0000041E00040001L,0x0040000000000000L,0x0000000004040100L,0x0000028080000000L,0x0000000010000100L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18932 = new BitSet(new long[]{0x00122C018C108148L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000800L,0xA004001088280038L,0x0000041E00040001L,0x0040000000000000L,0x0000000004040100L,0x0000028080000000L,0x0000000010000100L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18948 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIPE_VK_in_expression_element19008 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19010 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000800L,0xA004001088280038L,0x0000041E00040001L,0x0040000000000000L,0x0000000004040100L,0x0000028080000000L,0x0000000010000100L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19012 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNARY_OPERATOR_in_expression_element19040 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19044 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_PRIOR_in_expression_element19082 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19086 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NEW_VK_in_expression_element19114 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_expression_element19116 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_expression_element19143 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19145 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STANDARD_FUNCTION_in_expression_element19172 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_standard_function_in_expression_element19174 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SOME_VK_in_expression_element19192 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_EXISTS_in_expression_element19194 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_expression_element19196 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_expression_element19198 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_expression_element19204 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_expression_element19208 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VECTOR_EXPR_in_expression_element19278 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19280 = new BitSet(new long[]{0x00122C018C108148L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000800L,0xA004001088280038L,0x0000041E00040001L,0x0040000000000000L,0x0000000004040100L,0x0000028080000000L,0x0000000010000100L});
	public static final BitSet FOLLOW_DATETIME_OP_in_expression_element19309 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_datetime_element_in_expression_element19313 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_model_expression_in_expression_element19339 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KEEP_VK_in_expression_element19365 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_DENSE_RANK_VK_in_expression_element19369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_FIRST_VK_in_expression_element19372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_LAST_VK_in_expression_element19374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_expression_element19377 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_over_clause_in_expression_element19379 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DOT_ASTERISK_in_expression_element19408 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_expression_element19410 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PERCENT_FOUND_VK_in_expression_element19467 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_NOTFOUND_VK_in_expression_element19486 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_ROWCOUNT_VK_in_expression_element19505 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_ISOPEN_VK_in_expression_element19524 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_expression_element19554 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OUTER_JOIN_SIGN_in_expression_element19598 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19602 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_case_statement_in_expression_element19630 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constant_in_expression_element19645 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_general_element_in_expression_element19660 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hosted_variable_name_in_expression_element19675 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_expression_element19690 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_in_elements19719 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_in_elements19739 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_in_elements19754 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_VK_in_datetime_element19779 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_datetime_element19781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_LOCAL_VK_in_datetime_element19784 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TIME_VK_in_datetime_element19786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_datetime_element19788 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DAY_VK_in_datetime_element19816 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SECOND_VK_in_datetime_element19818 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_datetime_element19820 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_YEAR_VK_in_datetime_element19848 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_MONTH_VK_in_datetime_element19850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_datetime_element19852 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_EXPRESSION_in_model_expression19888 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_model_expression19890 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0C00010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_model_expression_element_in_model_expression19892 = new BitSet(new long[]{0x0000000000000008L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0C00010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_model_expression_element19928 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_model_expression_element19953 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_SINGLE_COLUMN_in_model_expression_element19979 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_model_expression_element19981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000042L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_for_single_column_element_in_model_expression_element19983 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_for_like_part_in_model_expression_element19985 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOR_MULTI_COLUMN_in_model_expression_element20013 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_model_expression_element20015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_model_expression_element20019 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_model_expression_element20022 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_model_expression_element20024 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_for_single_column_element20063 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_for_single_column_element20065 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FROM_in_for_single_column_element20092 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element20094 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TO_in_for_single_column_element20122 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element20124 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INCREMENT_VK_in_for_single_column_element20153 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DECREMENT_VK_in_for_single_column_element20155 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element20158 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_LIKE_in_for_like_part20195 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_like_part20197 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_CASE_in_case_statement20233 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_case_statement20235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_case_when_part_in_case_statement20239 = new BitSet(new long[]{0x0000000000000008L,0x0400000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_case_else_part_in_case_statement20242 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SEARCHED_CASE_in_case_statement20283 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_case_when_part_in_case_statement20287 = new BitSet(new long[]{0x0000000000000008L,0x0400000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_case_else_part_in_case_statement20290 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_case_when_part20336 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_case_when_part20340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_case_when_part20370 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_case_when_part20404 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_case_else_part20465 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_case_else_part20495 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_case_else_part20522 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_OVER_in_standard_function20584 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function20586 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function20588 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_USING_in_standard_function20638 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function20640 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_standard_function20642 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COUNT_VK_in_standard_function20670 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function20673 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function20675 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_standard_function20677 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_ASTERISK_in_standard_function20683 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_expression_in_standard_function20687 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function20691 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLCAST_VK_in_standard_function20782 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function20784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function20786 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CAST_VK_in_standard_function20819 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_standard_function20824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_expression_in_standard_function20828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function20831 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CHR_VK_in_standard_function20864 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function20866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_NCHAR_CS_VK_in_standard_function20868 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLLECT_VK_in_standard_function20895 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function20898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function20900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_column_name_in_standard_function20904 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_collect_order_by_part_in_standard_function20906 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_WITHIN_OR_OVER_in_standard_function20934 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function20948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_within_clause_in_standard_function20978 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_over_clause_in_standard_function21066 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DECOMPOSE_VK_in_standard_function21175 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function21177 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_CANONICAL_VK_in_standard_function21180 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPATIBILITY_VK_in_standard_function21182 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXTRACT_VK_in_standard_function21212 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_extract_part_in_standard_function21214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function21216 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FIRST_VALUE_VK_in_standard_function21250 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LAST_VALUE_VK_in_standard_function21252 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function21255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200004L});
	public static final BitSet FOLLOW_NULLS_VK_in_standard_function21257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function21260 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PREDICTION_FUNCTION_in_standard_function21288 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function21290 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_cost_matrix_clause_in_standard_function21293 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_standard_function21296 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TRANSLATE_VK_in_standard_function21324 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function21330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function21334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function21338 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TREAT_VK_in_standard_function21376 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function21378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_REF_VK_in_standard_function21380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function21383 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TRIM_VK_in_standard_function21410 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_standard_function21426 = new BitSet(new long[]{0x00122C018C108148L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x000A000000000000L,0x0000000000001100L,0x0047FFE000000800L,0xA004001088280038L,0x0000041E00040001L,0x0040000000000000L,0x0000000004040100L,0x0000028080000000L,0x0000000010000100L});
	public static final BitSet FOLLOW_expression_element_in_standard_function21458 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_LEADING_VK_in_standard_function21492 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TRAILING_VK_in_standard_function21514 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BOTH_VK_in_standard_function21536 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLAGG_VK_in_standard_function21621 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function21623 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_standard_function21625 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLCOLATTVAL_VK_in_standard_function21660 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_XMLFOREST_VK_in_standard_function21662 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_multiuse_expression_element_in_standard_function21665 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_XMLEXISTS_VK_in_standard_function21693 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function21695 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function21697 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLPARSE_VK_in_standard_function21725 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DOCUMENT_VK_in_standard_function21728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CONTENT_VK_in_standard_function21730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function21733 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_WELLFORMED_VK_in_standard_function21735 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLQUERY_VK_in_standard_function21800 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function21802 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function21804 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_standard_function21807 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLROOT_VK_in_standard_function21835 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function21837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_xml_param_version_part_in_standard_function21839 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_xmlroot_param_standalone_part_in_standard_function21841 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLTABLE_VK_in_standard_function21901 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_namespaces_clause_in_standard_function21903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function21908 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function21910 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_xml_table_column_in_standard_function21915 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_XMLELEMENT_VK_in_standard_function21980 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ENTITYESCAPING_VK_in_standard_function21995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010020000000L,0x0000000000000000L,0x0000008000000400L});
	public static final BitSet FOLLOW_NOENTITYESCAPING_VK_in_standard_function21997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010020000000L,0x0000000000000000L,0x0000008000000400L});
	public static final BitSet FOLLOW_NAME_VK_in_standard_function22014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_standard_function22016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function22020 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_xml_attributes_clause_in_standard_function22034 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_xmlelement_value_expr_in_standard_function22039 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_XMLPI_VK_in_standard_function22138 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NAME_VK_in_standard_function22161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_char_set_name_in_standard_function22163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_standard_function22166 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_standard_function22189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function22191 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function22227 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLSERIALIZE_VK_in_standard_function22264 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DOCUMENT_VK_in_standard_function22283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CONTENT_VK_in_standard_function22285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_standard_function22304 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000004000000L,0x0000000100200100L,0x0000020000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function22306 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000200100L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_xmlserialize_param_enconding_part_in_standard_function22325 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200100L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_xml_param_version_part_in_standard_function22344 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200100L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_xmlserialize_param_ident_part_in_standard_function22363 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_HIDE_VK_in_standard_function22384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_SHOW_VK_in_standard_function22386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_DEFAULTS_VK_in_standard_function22389 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_YEAR_VK_in_extract_part22444 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MONTH_VK_in_extract_part22465 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DAY_VK_in_extract_part22486 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HOUR_VK_in_extract_part22507 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUTE_VK_in_extract_part22528 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SECOND_VK_in_extract_part22549 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_HOUR_VK_in_extract_part22570 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_MINUTE_VK_in_extract_part22591 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_ABBR_VK_in_extract_part22612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_REGION_VK_in_extract_part22633 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_xmlelement_value_expr22665 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_alias_in_xmlelement_value_expr22667 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OVER_VK_in_over_clause22708 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_partition_clause_in_over_clause22710 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_over_clause22714 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000001000L});
	public static final BitSet FOLLOW_windowing_clause_in_over_clause22716 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROWS_VK_in_windowing_clause22788 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_RANGE_VK_in_windowing_clause22790 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_windowing_clause22811 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause22815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause22819 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause22841 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNBOUNDED_VK_in_windowing_elements22942 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PRECEDING_VK_in_windowing_elements22944 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURRENT_VK_in_windowing_elements22963 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ROW_VK_in_windowing_elements22965 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRECEDING_VK_in_windowing_elements22984 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_windowing_elements22988 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOLLOWING_VK_in_windowing_elements23010 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_windowing_elements23014 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_using_clause23045 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_using_element_in_using_clause23049 = new BitSet(new long[]{0x0000000000000108L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_ELEMENT_in_using_element23087 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_using_element23089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000080000L});
	public static final BitSet FOLLOW_OUT_VK_in_using_element23092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_using_element23095 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_alias_in_using_element23097 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASTERISK_in_using_element23161 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_collect_order_by_part23194 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_collect_order_by_part23196 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WITHIN_VK_in_within_clause23232 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_order_by_clause_in_within_clause23234 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COST_VK_in_cost_matrix_clause23271 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_MODEL_in_cost_matrix_clause23290 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_AUTO_VK_in_cost_matrix_clause23292 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_cost_class_name_in_cost_matrix_clause23312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_expression_list_in_cost_matrix_clause23315 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PASSING_VK_in_xml_passing_clause23374 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_VALUE_VK_in_xml_passing_clause23376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_xml_passing_clause_expr_in_xml_passing_clause23381 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_xml_passing_clause_expr23425 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_alias_in_xml_passing_clause_expr23427 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_XMLATTRIBUTES_VK_in_xml_attributes_clause23468 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ENTITYESCAPING_VK_in_xml_attributes_clause23483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_NOENTITYESCAPING_VK_in_xml_attributes_clause23485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_SCHEMACHECK_VK_in_xml_attributes_clause23502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_NOSCHEMACHECK_VK_in_xml_attributes_clause23504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause23522 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_XMLNAMESPACES_VK_in_xml_namespaces_clause23620 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_namespaces_clause23635 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_alias_in_xml_namespaces_clause23637 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_xml_general_default_part_in_xml_namespaces_clause23642 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_COLUMN_in_xml_table_column23688 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_column_name_in_xml_table_column23690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000100000000L,0x0000020000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ORDINALITY_VK_in_xml_table_column23720 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_type_spec_in_xml_table_column23747 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_expression_in_xml_table_column23749 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L});
	public static final BitSet FOLLOW_xml_general_default_part_in_xml_table_column23752 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_xml_general_default_part23875 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_general_default_part23877 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ELEMENT_in_xml_multiuse_expression_element23914 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_multiuse_expression_element23916 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_xml_alias_in_xml_multiuse_expression_element23918 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ALIAS_in_xml_alias23961 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_xml_alias23963 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ALIAS_in_xml_alias23985 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_xml_alias23988 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_alias23990 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VERSION_VK_in_xml_param_version_part24028 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NO_VK_in_xml_param_version_part24058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_VALUE_VK_in_xml_param_version_part24060 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_xml_param_version_part24084 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STANDALONE_VK_in_xmlroot_param_standalone_part24135 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_YES_VK_in_xmlroot_param_standalone_part24165 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NO_VK_in_xmlroot_param_standalone_part24189 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_VALUE_VK_in_xmlroot_param_standalone_part24227 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ENCODING_VK_in_xmlserialize_param_enconding_part24325 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xmlserialize_param_enconding_part24327 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NO_VK_in_xmlserialize_param_ident_part24362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part24364 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part24390 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xmlserialize_param_ident_part24392 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBPARTITION_VK_in_partition_extension_clause24434 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PARTITION_VK_in_partition_extension_clause24436 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_partition_extension_clause24439 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLUMN_ALIAS_in_alias24475 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_alias24477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_alias24480 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_ALIAS_in_alias24508 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_alias24510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_alias24513 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHERE_in_where_clause24550 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_where_clause24552 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_into_clause24589 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_into_clause24593 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_BULK_VK_in_into_clause24628 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_into_clause24632 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_XML_COLUMN_NAME_in_xml_column_name24680 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_xml_column_name24682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_xml_column_name24685 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COST_CLASS_NAME_in_cost_class_name24716 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_cost_class_name24718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_cost_class_name24721 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ATTRIBUTE_NAME_in_attribute_name24752 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_attribute_name24754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_attribute_name24757 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAVEPOINT_NAME_in_savepoint_name24788 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_savepoint_name24790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_savepoint_name24793 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_SEGMENT_NAME_in_rollback_segment_name24824 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_rollback_segment_name24826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_rollback_segment_name24829 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_VAR_NAME_in_table_var_name24861 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_table_var_name24863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_table_var_name24866 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SCHEMA_NAME_in_schema_name24897 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_schema_name24899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_schema_name24902 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROUTINE_NAME_in_routine_name24933 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_routine_name24935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_routine_name24938 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000080L});
	public static final BitSet FOLLOW_link_name_in_routine_name24941 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PACKAGE_NAME_in_package_name24978 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_package_name24980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_package_name24985 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_IMPLEMENTATION_TYPE_NAME_in_implementation_type_name25023 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_implementation_type_name25025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_implementation_type_name25030 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_PARAMETER_NAME_in_parameter_name25068 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_parameter_name25070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_parameter_name25073 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCE_MODEL_NAME_in_reference_model_name25110 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_reference_model_name25112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_reference_model_name25115 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MAIN_MODEL_NAME_in_main_model_name25151 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_main_model_name25153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_main_model_name25156 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_QUERY_NAME_in_query_name25192 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_query_name25194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_query_name25197 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRAINT_NAME_in_constraint_name25228 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_constraint_name25230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_constraint_name25233 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000080L});
	public static final BitSet FOLLOW_link_name_in_constraint_name25236 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LABEL_NAME_in_label_name25273 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_label_name25275 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TYPE_NAME_in_type_name25306 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_type_name25310 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SEQUENCE_NAME_in_sequence_name25348 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_sequence_name25350 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_EXCEPTION_NAME_in_exception_name25387 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_exception_name25389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_exception_name25394 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_FUNCTION_NAME_in_function_name25432 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_function_name25434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_function_name25439 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_PROCEDURE_NAME_in_procedure_name25477 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_procedure_name25479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_procedure_name25484 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_TRIGGER_NAME_in_trigger_name25522 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_trigger_name25524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_trigger_name25529 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_HOSTED_VARIABLE_NAME_in_hosted_variable_name25571 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BINDVAR_in_hosted_variable_name25601 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_hosted_variable_name25627 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VARIABLE_NAME_in_variable_name25683 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_variable_name25685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_variable_name25690 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_INDEX_NAME_in_index_name25728 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_index_name25730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_index_name25733 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_NAME_in_cursor_name25764 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_cursor_name25766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_cursor_name25769 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RECORD_NAME_in_record_name25800 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_record_name25802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_record_name25805 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLLECTION_NAME_in_collection_name25836 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_collection_name25838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_collection_name25843 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LINK_NAME_in_link_name25881 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_link_name25883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_link_name25886 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLUMN_NAME_in_column_name25917 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_column_name25919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_column_name25924 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_TABLEVIEW_NAME_in_tableview_name25962 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_tableview_name25964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_tableview_name25969 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000080L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_link_name_in_tableview_name25972 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_extension_clause_in_tableview_name25975 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CHAR_SET_NAME_in_char_set_name26023 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_char_set_name26027 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ARGUMENTS_in_function_argument26069 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_argument_in_function_argument26073 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_ARGUMENT_in_argument26111 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_argument26113 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_parameter_name_in_argument26115 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CUSTOM_TYPE_in_type_spec26159 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_type_spec26161 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000006000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_REF_VK_in_type_spec26163 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000006000000000L});
	public static final BitSet FOLLOW_PERCENT_ROWTYPE_VK_in_type_spec26167 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PERCENT_TYPE_VK_in_type_spec26169 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_native_datatype_spec_in_type_spec26238 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTERVAL_DATATYPE_in_type_spec26254 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_interval_type_spec_first_in_type_spec26256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_interval_type_spec_second_in_type_spec26258 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_YEAR_VK_in_interval_type_spec_first26311 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DAY_VK_in_interval_type_spec_first26313 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_interval_type_spec_first26326 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MONTH_VK_in_interval_type_spec_second26396 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SECOND_VK_in_interval_type_spec_second26398 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_interval_type_spec_second26411 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRECISION_in_type_precision26470 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_constant_in_type_precision26474 = new BitSet(new long[]{0x0000200008008048L,0x4020000000000000L,0x0000080040002000L,0x0100040000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_constant_in_type_precision26478 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0100040000000000L});
	public static final BitSet FOLLOW_CHAR_VK_in_type_precision26484 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BYTE_VK_in_type_precision26488 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NATIVE_DATATYPE_in_native_datatype_spec26551 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BFILE_VK_in_native_datatype_spec26562 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_BINARY_FLOAT_VK_in_native_datatype_spec26575 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_BINARY_INTEGER_VK_in_native_datatype_spec26588 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_BLOB_VK_in_native_datatype_spec26601 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_BOOLEAN_VK_in_native_datatype_spec26614 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_CHARACTER_VK_in_native_datatype_spec26627 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_CHAR_VK_in_native_datatype_spec26641 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_CLOB_VK_in_native_datatype_spec26654 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_DATE_VK_in_native_datatype_spec26667 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DATE_in_native_datatype_spec26680 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_DAY_VK_in_native_datatype_spec26693 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_DECIMAL_VK_in_native_datatype_spec26704 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_DEC_VK_in_native_datatype_spec26718 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_DOUBLE_VK_in_native_datatype_spec26731 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_DOUBLE_VK_in_native_datatype_spec26744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_PRECISION_VK_in_native_datatype_spec26746 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_DSINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec26759 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_FLOAT_VK_in_native_datatype_spec26770 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_HOUR_VK_in_native_datatype_spec26783 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_INTEGER_VK_in_native_datatype_spec26794 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_INT_VK_in_native_datatype_spec26807 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_LONG_VK_in_native_datatype_spec26820 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_LONG_VK_in_native_datatype_spec26833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_RAW_VK_in_native_datatype_spec26835 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_MINUTE_VK_in_native_datatype_spec26848 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_MLSLABEL_VK_in_native_datatype_spec26859 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_MONTH_VK_in_native_datatype_spec26870 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_NATURALN_VK_in_native_datatype_spec26881 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_NATURAL_VK_in_native_datatype_spec26892 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_NCHAR_VK_in_native_datatype_spec26903 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_NCLOB_VK_in_native_datatype_spec26916 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_NUMBER_VK_in_native_datatype_spec26929 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_NUMERIC_VK_in_native_datatype_spec26942 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_NVARCHAR2_VK_in_native_datatype_spec26955 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_PLS_INTEGER_VK_in_native_datatype_spec26968 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_POSITIVEN_VK_in_native_datatype_spec26981 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_POSITIVE_VK_in_native_datatype_spec26992 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_RAW_VK_in_native_datatype_spec27003 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_REAL_VK_in_native_datatype_spec27016 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_ROWID_VK_in_native_datatype_spec27027 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_SECOND_VK_in_native_datatype_spec27040 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_SIGNTYPE_VK_in_native_datatype_spec27051 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_SIMPLE_INTEGER_VK_in_native_datatype_spec27062 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_SMALLINT_VK_in_native_datatype_spec27073 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_STRING_VK_in_native_datatype_spec27086 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_TIMESTAMP_LTZ_UNCONSTRAINED_VK_in_native_datatype_spec27097 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_TIMESTAMP_TZ_UNCONSTRAINED_VK_in_native_datatype_spec27108 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_TIMESTAMP_UNCONSTRAINED_VK_in_native_datatype_spec27119 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_TIMESTAMP_VK_in_native_datatype_spec27130 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_TIMEZONE_ABBR_VK_in_native_datatype_spec27143 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_TIMEZONE_HOUR_VK_in_native_datatype_spec27154 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_TIMEZONE_MINUTE_VK_in_native_datatype_spec27165 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_TIMEZONE_REGION_VK_in_native_datatype_spec27176 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_UROWID_VK_in_native_datatype_spec27187 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_VARCHAR2_VK_in_native_datatype_spec27200 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_VARCHAR_VK_in_native_datatype_spec27213 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_YEAR_VK_in_native_datatype_spec27226 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_YMINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec27237 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_type_precision_in_native_datatype_spec27246 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_TIME_VK_in_native_datatype_spec27256 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LOCAL_VK_in_native_datatype_spec27260 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CASCATED_ELEMENT_in_general_element27335 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_id_in_general_element27365 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000110L});
	public static final BitSet FOLLOW_function_argument_in_general_element27385 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000110L});
	public static final BitSet FOLLOW_ANY_ELEMENT_in_general_element_id27448 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_general_element_id27450 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_constant27486 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUS_SIGN_in_constant27507 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_constant27511 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXACT_NUM_LIT_in_constant27532 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_APPROXIMATE_NUM_LIT_in_constant27552 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHAR_STRING_in_constant27572 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_constant27592 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TRUE_in_constant27612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FALSE_in_constant27632 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DBTIMEZONE_VK_in_constant27652 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SESSIONTIMEZONE_VK_in_constant27673 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINVALUE_VK_in_constant27693 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MAXVALUE_VK_in_constant27713 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_constant27733 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_char_set_name_in_id27768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ID_in_id27771 = new BitSet(new long[]{0x0000000000000002L});
}
