// $ANTLR 3.5.2 PLSQLPrinter.g 2014-09-18 13:16:10

/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2014 Bars Group
 */
package ru.barsopen.plsqlconverter;


import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.stringtemplate.*;
import org.antlr.stringtemplate.language.*;
import java.util.HashMap;
/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2014 Bars Group
 */
@SuppressWarnings("all")
public class PLSQLPrinter extends TreeParser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "AMPERSAND", "APPROXIMATE_NUM_LIT", 
		"ASSIGN_OP", "ASTERISK", "AT_SIGN", "B", "BINDVAR", "BIT_STRING_LIT", 
		"C", "CARRET_OPERATOR_PART", "CHAR_STRING", "CHAR_STRING_PERL", "COLON", 
		"COMMA", "COMMENT", "CONCATENATION_OP", "D", "DELIMITED_ID", "DOUBLE_ASTERISK", 
		"DOUBLE_PERIOD", "E", "EQUALS_OP", "EXACT_NUM_LIT", "EXCLAMATION_OPERATOR_PART", 
		"F", "G", "GREATER_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "H", "HEX_STRING_LIT", 
		"I", "INTRODUCER", "J", "K", "L", "LEFT_BRACKET", "LEFT_PAREN", "LESS_THAN_OP", 
		"LESS_THAN_OR_EQUALS_OP", "M", "MINUS_SIGN", "N", "NATIONAL_CHAR_STRING_LIT", 
		"NEWLINE", "NOT_EQUAL_OP", "O", "P", "PERCENT", "PERIOD", "PLSQL_NON_RESERVED_CONNECT_BY_ROOT", 
		"PLSQL_NON_RESERVED_ELSIF", "PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_PIVOT", 
		"PLSQL_NON_RESERVED_UNPIVOT", "PLSQL_NON_RESERVED_USING", "PLSQL_RESERVED_CLUSTERS", 
		"PLSQL_RESERVED_COLAUTH", "PLSQL_RESERVED_COMPRESS", "PLSQL_RESERVED_CRASH", 
		"PLSQL_RESERVED_EXCLUSIVE", "PLSQL_RESERVED_IDENTIFIED", "PLSQL_RESERVED_IF", 
		"PLSQL_RESERVED_INDEX", "PLSQL_RESERVED_INDEXES", "PLSQL_RESERVED_LOCK", 
		"PLSQL_RESERVED_MINUS", "PLSQL_RESERVED_MODE", "PLSQL_RESERVED_NOCOMPRESS", 
		"PLSQL_RESERVED_NOWAIT", "PLSQL_RESERVED_RESOURCE", "PLSQL_RESERVED_SHARE", 
		"PLSQL_RESERVED_START", "PLSQL_RESERVED_TABAUTH", "PLSQL_RESERVED_VIEWS", 
		"PLUS_SIGN", "PROMPT", "Q", "QS_ANGLE", "QS_BRACE", "QS_BRACK", "QS_OTHER", 
		"QS_OTHER_CH", "QS_PAREN", "QUESTION_MARK", "QUOTE", "R", "REGULAR_ID", 
		"RIGHT_BRACKET", "RIGHT_PAREN", "S", "SEMICOLON", "SEPARATOR", "SIMPLE_LETTER", 
		"SOLIDUS", "SPACE", "SQL92_RESERVED_ALL", "SQL92_RESERVED_ALTER", "SQL92_RESERVED_AND", 
		"SQL92_RESERVED_ANY", "SQL92_RESERVED_AS", "SQL92_RESERVED_ASC", "SQL92_RESERVED_BEGIN", 
		"SQL92_RESERVED_BETWEEN", "SQL92_RESERVED_BY", "SQL92_RESERVED_CASE", 
		"SQL92_RESERVED_CHECK", "SQL92_RESERVED_CONNECT", "SQL92_RESERVED_CREATE", 
		"SQL92_RESERVED_CURRENT", "SQL92_RESERVED_CURSOR", "SQL92_RESERVED_DATE", 
		"SQL92_RESERVED_DECLARE", "SQL92_RESERVED_DEFAULT", "SQL92_RESERVED_DELETE", 
		"SQL92_RESERVED_DESC", "SQL92_RESERVED_DISTINCT", "SQL92_RESERVED_DROP", 
		"SQL92_RESERVED_ELSE", "SQL92_RESERVED_END", "SQL92_RESERVED_EXCEPTION", 
		"SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE", "SQL92_RESERVED_FETCH", 
		"SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", "SQL92_RESERVED_GOTO", "SQL92_RESERVED_GRANT", 
		"SQL92_RESERVED_GROUP", "SQL92_RESERVED_HAVING", "SQL92_RESERVED_IN", 
		"SQL92_RESERVED_INSERT", "SQL92_RESERVED_INTERSECT", "SQL92_RESERVED_INTO", 
		"SQL92_RESERVED_IS", "SQL92_RESERVED_LIKE", "SQL92_RESERVED_NOT", "SQL92_RESERVED_NULL", 
		"SQL92_RESERVED_OF", "SQL92_RESERVED_ON", "SQL92_RESERVED_OPTION", "SQL92_RESERVED_OR", 
		"SQL92_RESERVED_ORDER", "SQL92_RESERVED_OVERLAPS", "SQL92_RESERVED_PRIOR", 
		"SQL92_RESERVED_PROCEDURE", "SQL92_RESERVED_PUBLIC", "SQL92_RESERVED_REVOKE", 
		"SQL92_RESERVED_SELECT", "SQL92_RESERVED_SIZE", "SQL92_RESERVED_TABLE", 
		"SQL92_RESERVED_THE", "SQL92_RESERVED_THEN", "SQL92_RESERVED_TO", "SQL92_RESERVED_TRUE", 
		"SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", "SQL92_RESERVED_UPDATE", 
		"SQL92_RESERVED_VALUES", "SQL92_RESERVED_VIEW", "SQL92_RESERVED_WHEN", 
		"SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH", "T", "TILDE_OPERATOR_PART", 
		"U", "UNDERSCORE", "UNSIGNED_INTEGER", "V", "VERTICAL_BAR", "W", "X", 
		"Y", "Z", "ZV", "ADD_VK", "AFTER_EACH_ROW", "AFTER_STATEMENT", "AFTER_VK", 
		"AGENT_VK", "AGGREGATE_VK", "ALTER_ATTRIBUTE", "ALTER_COLLECTION", "ALTER_FUNCTION", 
		"ALTER_METHOD", "ALTER_METHOD_ELEMENT", "ALTER_PACKAGE", "ALTER_PROCEDURE", 
		"ALTER_SEQUENCE", "ALTER_TRIGGER", "ALTER_TYPE", "ANALYZE_VK", "ANY_ELEMENT", 
		"ANY_MODE", "ARGUMENT", "ARGUMENTS", "ASSIGN", "ASSOCIATE_VK", "ATTRIBUTE", 
		"ATTRIBUTES", "ATTRIBUTE_NAME", "AT_VK", "AUDIT_VK", "AUTHID_VK", "AUTOMATIC_VK", 
		"AUTONOMOUS_TRANSACTION_VK", "AUTO_VK", "BATCH_VK", "BEFORE_EACH_ROW", 
		"BEFORE_STATEMENT", "BEFORE_VK", "BFILE_VK", "BINARY_DOUBLE_VK", "BINARY_FLOAT_VK", 
		"BINARY_INTEGER_VK", "BIT_VK", "BLOB_VK", "BLOCK", "BLOCK_VK", "BODY", 
		"BODY_MODE", "BODY_VK", "BOOLEAN_VK", "BOTH_VK", "BREADTH_VK", "BULK_VK", 
		"BYTE_VK", "CACHE_VK", "CALL_MODE", "CALL_VK", "CANONICAL_VK", "CASCADE_VK", 
		"CASCATED_ELEMENT", "CAST_VK", "CHARACTER_VK", "CHAR_CS_VK", "CHAR_SET_NAME", 
		"CHAR_VK", "CHR_VK", "CLOB_VK", "CLOSE_VK", "CLUSTER_VK", "COLLECTION_MODE", 
		"COLLECTION_NAME", "COLLECT_VK", "COLUMNS", "COLUMN_ALIAS", "COLUMN_NAME", 
		"COMMENT_VK", "COMMITTED_VK", "COMMIT_VK", "COMPATIBILITY_VK", "COMPILATION_UNIT", 
		"COMPILER_PARAMETER", "COMPILE_VK", "COMPOUND_DML", "COMPOUND_VK", "CONDITIONAL_INSERT", 
		"CONSTANT_NEGATED", "CONSTANT_VK", "CONSTRAINT_NAME", "CONSTRUCTOR_SPEC", 
		"CONSTRUCTOR_VK", "CONTENT_VK", "CONTEXT_VK", "CONTINUE_VK", "CONVERT_VK", 
		"CORRUPT_XID_ALL_VK", "CORRUPT_XID_VK", "COST_CLASS_NAME", "COST_VK", 
		"COUNT_VK", "CREATE_FUNCTION", "CREATE_PACKAGE_BODY", "CREATE_PACKAGE_SPEC", 
		"CREATE_PROCEDURE", "CREATE_SEQUENCE", "CREATE_TRIGGER", "CREATE_TYPE_BODY", 
		"CREATE_TYPE_SPEC", "CROSS_VK", "CUBE_VK", "CURRENT_USER_VK", "CURRENT_VK", 
		"CURSOR_BASED_FOR", "CURSOR_DECLARE", "CURSOR_NAME", "CUSTOMDATUM_VK", 
		"CUSTOM_TYPE", "CYCLE_VK", "C_VK", "DATABASE_VK", "DATETIME_OP", "DAY_VK", 
		"DBTIMEZONE_VK", "DB_ROLE_CHANGE_VK", "DDL_VK", "DEBUG_VK", "DECIMAL_VK", 
		"DECOMPOSE_VK", "DECREMENT_VK", "DEC_VK", "DEFAULTS_VK", "DEFAULT_VALUE", 
		"DEFERRED_VK", "DEFINER_VK", "DENSE_RANK_VK", "DEPENDENT_HANDLING", "DEPTH_VK", 
		"DETERMINISTIC_VK", "DIMENSION_VK", "DIRECT_MODE", "DISABLE_VK", "DISASSOCIATE_VK", 
		"DIV_VK", "DML_EVENT", "DML_EVENT_ELEMENT", "DOCUMENT_VK", "DOT_ASTERISK", 
		"DOUBLE_VK", "DROP_FUNCTION", "DROP_PACKAGE", "DROP_PROCEDURE", "DROP_SEQUENCE", 
		"DROP_TRIGGER", "DROP_TYPE", "DSINTERVAL_UNCONSTRAINED_VK", "DYNAMIC_RETURN", 
		"ELEMENT", "ELEMENTS_MODE", "ELEMENT_SPEC", "ENABLE_VK", "ENCODING_VK", 
		"ENTITYESCAPING_VK", "EVALNAME_VK", "EXCEPTIONS_VK", "EXCEPTION_DECLARE", 
		"EXCEPTION_INIT_VK", "EXCEPTION_NAME", "EXCLUDE_VK", "EXECUTE_VK", "EXIT_VK", 
		"EXPLAIN_STATEMENT", "EXPR", "EXPR_LIST", "EXTERNAL_MODE", "EXTERNAL_VK", 
		"EXTRACT_VK", "FACTORING", "FAILURE_VK", "FIELDS", "FIELD_SPEC", "FINAL_VK", 
		"FIRST_VALUE_VK", "FIRST_VK", "FLOAT_VK", "FOLLOWING_VK", "FOLLOWS_VK", 
		"FORALL_VK", "FORCE_VK", "FOR_EACH_ROW", "FOR_LOOP", "FOR_MULTI_COLUMN", 
		"FOR_SINGLE_COLUMN", "FULL_VK", "FUNCTION_ENABLING_OVER", "FUNCTION_ENABLING_USING", 
		"FUNCTION_ENABLING_WITHIN_OR_OVER", "FUNCTION_NAME", "FUNCTION_SPEC", 
		"GROUPING_VK", "GROUPIN_SET", "GROUP_BY_ELEMENT", "HASH_VK", "HIDE_VK", 
		"HIERARCHICAL", "HOSTED_VARIABLE", "HOSTED_VARIABLE_NAME", "HOSTED_VARIABLE_ROUTINE_CALL", 
		"HOUR_VK", "ID", "IGNORE_VK", "IMMEDIATE_VK", "IMPLEMENTATION_TYPE_NAME", 
		"INCLUDE_VK", "INCLUDING_VK", "INCREMENT_VK", "INDENT_VK", "INDEXED_BY", 
		"INDEXED_FOR", "INDEX_NAME", "INDICES_BOUND", "INLINE_VK", "INNER_VK", 
		"INOUT_VK", "INSTANTIABLE_VK", "INSTEAD_VK", "INTEGER_VK", "INTERVAL_DATATYPE", 
		"INT_VK", "INVALIDATE_VK", "ISOLATION_VK", "IS_A_SET", "IS_EMPTY", "IS_INFINITE", 
		"IS_NAN", "IS_NOT_A_SET", "IS_NOT_EMPTY", "IS_NOT_INFINITE", "IS_NOT_NAN", 
		"IS_NOT_NULL", "IS_NOT_OF_TYPE", "IS_NOT_PRESENT", "IS_NULL", "IS_OF_TYPE", 
		"IS_PRESENT", "ITERATE_VK", "JAVA_VK", "JOIN_DEF", "KEEP_VK", "LABEL_DECLARE", 
		"LABEL_NAME", "LANGUAGE_VK", "LAST_VALUE_VK", "LAST_VK", "LEADING_VK", 
		"LEFT_VK", "LIBRARY_VK", "LIKE2_VK", "LIKE4_VK", "LIKEC_VK", "LIMIT_VK", 
		"LINK_NAME", "LOCAL_VK", "LOCK_TABLE_ELEMENT", "LOGIC_EXPR", "LOGOFF_VK", 
		"LOGON_VK", "LOG_VK", "LONG_RAW", "LONG_VK", "LOOP_VK", "MAIN_MODEL", 
		"MAIN_MODEL_NAME", "MAP_VK", "MAXVALUE_VK", "MEASURES_VK", "MEMBER_VK", 
		"MERGE_INSERT", "MERGE_UPDATE", "MERGE_VK", "MINUTE_VK", "MINVALUE_VK", 
		"MLSLABEL_VK", "MODEL_COLUMN", "MODEL_COLUMNS", "MODEL_EXPRESSION", "MODEL_RULE", 
		"MODEL_RULES", "MODIFIER", "MODIFY_VK", "MOD_VK", "MONTH_VK", "MULTI_TABLE_MODE", 
		"NAME_VK", "NATIVE_DATATYPE", "NATURALN_VK", "NATURAL_VK", "NAV_VK", "NCHAR_CS_VK", 
		"NCHAR_VK", "NCLOB_VK", "NESTED_TABLE_TYPE_DEF", "NESTED_VK", "NEW_VK", 
		"NOAUDIT_VK", "NOCACHE_VK", "NOCOPY_VK", "NOCYCLE_VK", "NOENTITYESCAPING_VK", 
		"NOMAXVALUE_VK", "NOMINVALUE_VK", "NONE_VK", "NON_DML", "NOORDER_VK", 
		"NOSCHEMACHECK_VK", "NOT_BETWEEN", "NOT_IN", "NOT_LIKE", "NO_VK", "NULLS_VK", 
		"NUMBER_VK", "NUMERIC_VK", "NVARCHAR2_VK", "OBJECT_AS", "OBJECT_MEMBERS", 
		"OBJECT_TYPE_DEF", "OBJECT_VK", "OFF_VK", "OLD_VK", "ONLY_VK", "OPEN_FOR", 
		"OPEN_VK", "ORADATA_VK", "ORDER_BY_ELEMENT", "ORDER_BY_ELEMENTS", "ORDINALITY_VK", 
		"OSERROR_VK", "OUTER_JOIN_SIGN", "OUT_VK", "OVERRIDING_VK", "OVER_VK", 
		"PACKAGE_NAME", "PACKAGE_VK", "PARALLEL_ENABLE_VK", "PARAMETER", "PARAMETERS", 
		"PARAMETERS_VK", "PARAMETER_NAME", "PARENT_VK", "PARTITION_VK", "PASSING_VK", 
		"PERCENT_FOUND_VK", "PERCENT_ISOPEN_VK", "PERCENT_NOTFOUND_VK", "PERCENT_ROWCOUNT_VK", 
		"PERCENT_ROWTYPE_VK", "PERCENT_TYPE_VK", "PIPELINED_VK", "PIPE_ROW", "PIPE_VK", 
		"PIVOT_ALIAS", "PIVOT_ELEMENT", "PIVOT_IN_ELEMENT", "PIVOT_VK", "PLS_INTEGER_VK", 
		"POSITIVEN_VK", "POSITIVE_VK", "PRAGMA_DECLARE", "PRAGMA_VK", "PRECEDING_VK", 
		"PRECISION", "PRECISION_VK", "PREDICTION_FUNCTION", "PROCEDURE_NAME", 
		"PROCEDURE_SPEC", "QUERY_NAME", "QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS", 
		"RAISE_VK", "RANGE_VK", "RAW_VK", "READ_VK", "REAL_VK", "RECORD_NAME", 
		"RECORD_TYPE_DECLARE_FIELDS", "RECORD_TYPE_DECLARE_REFCURSOR", "RECORD_VAR_DECLARE", 
		"RECURSIVE_VK", "REFERENCE_MODEL_NAME", "REFERENCE_VK", "REFERENCING_VK", 
		"REF_VK", "REJECT_VK", "RELIES_ON_VK", "RENAME_VK", "REPLACE_VK", "RESPECT_VK", 
		"RESTRICT_REFERENCES_VK", "RESULT_CACHE_VK", "RETURN_VK", "REUSE_VK", 
		"REVERSE_VK", "RIGHT_VK", "ROLLBACK_SEGMENT_NAME", "ROLLBACK_VK", "ROLLUP_VK", 
		"ROUTINE_CALL", "ROUTINE_NAME", "ROWID_VK", "ROWS_VK", "ROW_VK", "RULES_VK", 
		"SAMPLE_VK", "SAVEPOINT_NAME", "SAVEPOINT_VK", "SCHEMACHECK_VK", "SCHEMA_NAME", 
		"SCHEMA_VK", "SCN_VK", "SEARCHED_CASE", "SEARCH_VK", "SECOND_VK", "SEED_VK", 
		"SELECTED_TABLEVIEW", "SELECT_BASED_FOR", "SELECT_ITEM", "SELECT_LIST", 
		"SELECT_MODE", "SELECT_STATEMENT", "SELF_VK", "SEQUENCE_NAME", "SEQUENCE_VK", 
		"SEQUENTIAL_VK", "SERIALIZABLE_VK", "SERIALLY_REUSABLE_VK", "SERVERERROR_VK", 
		"SESSIONTIMEZONE_VK", "SET_CONSTRAINT", "SET_SERVEROUTPUT", "SET_TRANSACTION", 
		"SET_VK", "SHOW_VK", "SHUTDOWN_VK", "SIBLINGS_VK", "SIGNTYPE_VK", "SIMPLE_BOUND", 
		"SIMPLE_CASE", "SIMPLE_DML", "SIMPLE_INTEGER_VK", "SINGLE_TABLE_MODE", 
		"SINGLE_VK", "SKIP_VK", "SMALLINT_VK", "SOME_VK", "SPECIFICATION_VK", 
		"SQLDATA_VK", "SQLERROR_VK", "SQL_SCRIPT", "STANDALONE_VK", "STANDARD_FUNCTION", 
		"STARTUP_VK", "STATEMENTS", "STATIC_RETURNING", "STATIC_VK", "STATISTICS_VK", 
		"STREAMING_CLAUSE", "STRING_VK", "SUBMULTISET_VK", "SUBPARTITION_VK", 
		"SUBQUERY", "SUBTYPE_DECLARE", "SUCCESS_VK", "SUSPEND_VK", "TABLEVIEW_NAME", 
		"TABLE_ALIAS", "TABLE_ELEMENT", "TABLE_EXPRESSION", "TABLE_REF", "TABLE_REF_ELEMENT", 
		"TABLE_TYPE_DECLARE", "TABLE_VAR_DECLARE", "TABLE_VAR_NAME", "THREE_DOTS", 
		"TIMESTAMP_LTZ_UNCONSTRAINED_VK", "TIMESTAMP_TZ_UNCONSTRAINED_VK", "TIMESTAMP_UNCONSTRAINED_VK", 
		"TIMESTAMP_VK", "TIMEZONE_ABBR_VK", "TIMEZONE_HOUR_VK", "TIMEZONE_MINUTE_VK", 
		"TIMEZONE_REGION_VK", "TIME_VK", "TRAILING_VK", "TRANSLATE_VK", "TREAT_VK", 
		"TRIGGER_NAME", "TRIM_VK", "TRUNCATE_VK", "TYPE_BODY_ELEMENTS", "TYPE_NAME", 
		"TYPE_VK", "UNARY_MINUS", "UNARY_PLUS", "UNBOUNDED_VK", "UNDER_VK", "UNLIMITED_VK", 
		"UNPIVOT_IN_ELEMENT", "UNPIVOT_VK", "UNTIL_VK", "UPDATED_VK", "UPSERT_VK", 
		"UROWID_VK", "USING_MODE", "VALIDATE_VK", "VALUES_BOUND", "VALUE_VK", 
		"VARCHAR2_VK", "VARCHAR_VK", "VARIABLE_DECLARE", "VARIABLE_NAME", "VARR_ARRAY_DEF", 
		"VECTOR_EXPR", "VERSIONS_VK", "VERSION_VK", "WAIT_VK", "WARNING_VK", "WELLFORMED_VK", 
		"WHENEVER_VK", "WHILE_LOOP", "WITHIN_VK", "WORK_VK", "WRITE_VK", "XMLAGG_VK", 
		"XMLATTRIBUTES_VK", "XMLCAST_VK", "XMLCOLATTVAL_VK", "XMLELEMENT_VK", 
		"XMLEXISTS_VK", "XMLFOREST_VK", "XMLNAMESPACES_VK", "XMLPARSE_VK", "XMLPI_VK", 
		"XMLQUERY_VK", "XMLROOT_VK", "XMLSERIALIZE_VK", "XMLTABLE_VK", "XML_ALIAS", 
		"XML_COLUMN", "XML_COLUMN_NAME", "XML_ELEMENT", "XML_VK", "YEAR_VK", "YES_VK", 
		"YMINTERVAL_UNCONSTRAINED_VK", "PGSQL_PERFORM"
	};
	public static final int EOF=-1;
	public static final int A=4;
	public static final int AMPERSAND=5;
	public static final int APPROXIMATE_NUM_LIT=6;
	public static final int ASSIGN_OP=7;
	public static final int ASTERISK=8;
	public static final int AT_SIGN=9;
	public static final int B=10;
	public static final int BINDVAR=11;
	public static final int BIT_STRING_LIT=12;
	public static final int C=13;
	public static final int CARRET_OPERATOR_PART=14;
	public static final int CHAR_STRING=15;
	public static final int CHAR_STRING_PERL=16;
	public static final int COLON=17;
	public static final int COMMA=18;
	public static final int COMMENT=19;
	public static final int CONCATENATION_OP=20;
	public static final int D=21;
	public static final int DELIMITED_ID=22;
	public static final int DOUBLE_ASTERISK=23;
	public static final int DOUBLE_PERIOD=24;
	public static final int E=25;
	public static final int EQUALS_OP=26;
	public static final int EXACT_NUM_LIT=27;
	public static final int EXCLAMATION_OPERATOR_PART=28;
	public static final int F=29;
	public static final int G=30;
	public static final int GREATER_THAN_OP=31;
	public static final int GREATER_THAN_OR_EQUALS_OP=32;
	public static final int H=33;
	public static final int HEX_STRING_LIT=34;
	public static final int I=35;
	public static final int INTRODUCER=36;
	public static final int J=37;
	public static final int K=38;
	public static final int L=39;
	public static final int LEFT_BRACKET=40;
	public static final int LEFT_PAREN=41;
	public static final int LESS_THAN_OP=42;
	public static final int LESS_THAN_OR_EQUALS_OP=43;
	public static final int M=44;
	public static final int MINUS_SIGN=45;
	public static final int N=46;
	public static final int NATIONAL_CHAR_STRING_LIT=47;
	public static final int NEWLINE=48;
	public static final int NOT_EQUAL_OP=49;
	public static final int O=50;
	public static final int P=51;
	public static final int PERCENT=52;
	public static final int PERIOD=53;
	public static final int PLSQL_NON_RESERVED_CONNECT_BY_ROOT=54;
	public static final int PLSQL_NON_RESERVED_ELSIF=55;
	public static final int PLSQL_NON_RESERVED_MODEL=56;
	public static final int PLSQL_NON_RESERVED_PIVOT=57;
	public static final int PLSQL_NON_RESERVED_UNPIVOT=58;
	public static final int PLSQL_NON_RESERVED_USING=59;
	public static final int PLSQL_RESERVED_CLUSTERS=60;
	public static final int PLSQL_RESERVED_COLAUTH=61;
	public static final int PLSQL_RESERVED_COMPRESS=62;
	public static final int PLSQL_RESERVED_CRASH=63;
	public static final int PLSQL_RESERVED_EXCLUSIVE=64;
	public static final int PLSQL_RESERVED_IDENTIFIED=65;
	public static final int PLSQL_RESERVED_IF=66;
	public static final int PLSQL_RESERVED_INDEX=67;
	public static final int PLSQL_RESERVED_INDEXES=68;
	public static final int PLSQL_RESERVED_LOCK=69;
	public static final int PLSQL_RESERVED_MINUS=70;
	public static final int PLSQL_RESERVED_MODE=71;
	public static final int PLSQL_RESERVED_NOCOMPRESS=72;
	public static final int PLSQL_RESERVED_NOWAIT=73;
	public static final int PLSQL_RESERVED_RESOURCE=74;
	public static final int PLSQL_RESERVED_SHARE=75;
	public static final int PLSQL_RESERVED_START=76;
	public static final int PLSQL_RESERVED_TABAUTH=77;
	public static final int PLSQL_RESERVED_VIEWS=78;
	public static final int PLUS_SIGN=79;
	public static final int PROMPT=80;
	public static final int Q=81;
	public static final int QS_ANGLE=82;
	public static final int QS_BRACE=83;
	public static final int QS_BRACK=84;
	public static final int QS_OTHER=85;
	public static final int QS_OTHER_CH=86;
	public static final int QS_PAREN=87;
	public static final int QUESTION_MARK=88;
	public static final int QUOTE=89;
	public static final int R=90;
	public static final int REGULAR_ID=91;
	public static final int RIGHT_BRACKET=92;
	public static final int RIGHT_PAREN=93;
	public static final int S=94;
	public static final int SEMICOLON=95;
	public static final int SEPARATOR=96;
	public static final int SIMPLE_LETTER=97;
	public static final int SOLIDUS=98;
	public static final int SPACE=99;
	public static final int SQL92_RESERVED_ALL=100;
	public static final int SQL92_RESERVED_ALTER=101;
	public static final int SQL92_RESERVED_AND=102;
	public static final int SQL92_RESERVED_ANY=103;
	public static final int SQL92_RESERVED_AS=104;
	public static final int SQL92_RESERVED_ASC=105;
	public static final int SQL92_RESERVED_BEGIN=106;
	public static final int SQL92_RESERVED_BETWEEN=107;
	public static final int SQL92_RESERVED_BY=108;
	public static final int SQL92_RESERVED_CASE=109;
	public static final int SQL92_RESERVED_CHECK=110;
	public static final int SQL92_RESERVED_CONNECT=111;
	public static final int SQL92_RESERVED_CREATE=112;
	public static final int SQL92_RESERVED_CURRENT=113;
	public static final int SQL92_RESERVED_CURSOR=114;
	public static final int SQL92_RESERVED_DATE=115;
	public static final int SQL92_RESERVED_DECLARE=116;
	public static final int SQL92_RESERVED_DEFAULT=117;
	public static final int SQL92_RESERVED_DELETE=118;
	public static final int SQL92_RESERVED_DESC=119;
	public static final int SQL92_RESERVED_DISTINCT=120;
	public static final int SQL92_RESERVED_DROP=121;
	public static final int SQL92_RESERVED_ELSE=122;
	public static final int SQL92_RESERVED_END=123;
	public static final int SQL92_RESERVED_EXCEPTION=124;
	public static final int SQL92_RESERVED_EXISTS=125;
	public static final int SQL92_RESERVED_FALSE=126;
	public static final int SQL92_RESERVED_FETCH=127;
	public static final int SQL92_RESERVED_FOR=128;
	public static final int SQL92_RESERVED_FROM=129;
	public static final int SQL92_RESERVED_GOTO=130;
	public static final int SQL92_RESERVED_GRANT=131;
	public static final int SQL92_RESERVED_GROUP=132;
	public static final int SQL92_RESERVED_HAVING=133;
	public static final int SQL92_RESERVED_IN=134;
	public static final int SQL92_RESERVED_INSERT=135;
	public static final int SQL92_RESERVED_INTERSECT=136;
	public static final int SQL92_RESERVED_INTO=137;
	public static final int SQL92_RESERVED_IS=138;
	public static final int SQL92_RESERVED_LIKE=139;
	public static final int SQL92_RESERVED_NOT=140;
	public static final int SQL92_RESERVED_NULL=141;
	public static final int SQL92_RESERVED_OF=142;
	public static final int SQL92_RESERVED_ON=143;
	public static final int SQL92_RESERVED_OPTION=144;
	public static final int SQL92_RESERVED_OR=145;
	public static final int SQL92_RESERVED_ORDER=146;
	public static final int SQL92_RESERVED_OVERLAPS=147;
	public static final int SQL92_RESERVED_PRIOR=148;
	public static final int SQL92_RESERVED_PROCEDURE=149;
	public static final int SQL92_RESERVED_PUBLIC=150;
	public static final int SQL92_RESERVED_REVOKE=151;
	public static final int SQL92_RESERVED_SELECT=152;
	public static final int SQL92_RESERVED_SIZE=153;
	public static final int SQL92_RESERVED_TABLE=154;
	public static final int SQL92_RESERVED_THE=155;
	public static final int SQL92_RESERVED_THEN=156;
	public static final int SQL92_RESERVED_TO=157;
	public static final int SQL92_RESERVED_TRUE=158;
	public static final int SQL92_RESERVED_UNION=159;
	public static final int SQL92_RESERVED_UNIQUE=160;
	public static final int SQL92_RESERVED_UPDATE=161;
	public static final int SQL92_RESERVED_VALUES=162;
	public static final int SQL92_RESERVED_VIEW=163;
	public static final int SQL92_RESERVED_WHEN=164;
	public static final int SQL92_RESERVED_WHERE=165;
	public static final int SQL92_RESERVED_WITH=166;
	public static final int T=167;
	public static final int TILDE_OPERATOR_PART=168;
	public static final int U=169;
	public static final int UNDERSCORE=170;
	public static final int UNSIGNED_INTEGER=171;
	public static final int V=172;
	public static final int VERTICAL_BAR=173;
	public static final int W=174;
	public static final int X=175;
	public static final int Y=176;
	public static final int Z=177;
	public static final int ZV=178;
	public static final int ADD_VK=179;
	public static final int AFTER_EACH_ROW=180;
	public static final int AFTER_STATEMENT=181;
	public static final int AFTER_VK=182;
	public static final int AGENT_VK=183;
	public static final int AGGREGATE_VK=184;
	public static final int ALTER_ATTRIBUTE=185;
	public static final int ALTER_COLLECTION=186;
	public static final int ALTER_FUNCTION=187;
	public static final int ALTER_METHOD=188;
	public static final int ALTER_METHOD_ELEMENT=189;
	public static final int ALTER_PACKAGE=190;
	public static final int ALTER_PROCEDURE=191;
	public static final int ALTER_SEQUENCE=192;
	public static final int ALTER_TRIGGER=193;
	public static final int ALTER_TYPE=194;
	public static final int ANALYZE_VK=195;
	public static final int ANY_ELEMENT=196;
	public static final int ANY_MODE=197;
	public static final int ARGUMENT=199;
	public static final int ARGUMENTS=200;
	public static final int ASSIGN=201;
	public static final int ASSOCIATE_VK=202;
	public static final int ATTRIBUTE=204;
	public static final int ATTRIBUTES=205;
	public static final int ATTRIBUTE_NAME=206;
	public static final int AT_VK=208;
	public static final int AUDIT_VK=209;
	public static final int AUTHID_VK=210;
	public static final int AUTOMATIC_VK=211;
	public static final int AUTONOMOUS_TRANSACTION_VK=212;
	public static final int AUTO_VK=213;
	public static final int BATCH_VK=214;
	public static final int BEFORE_EACH_ROW=215;
	public static final int BEFORE_STATEMENT=216;
	public static final int BEFORE_VK=217;
	public static final int BFILE_VK=218;
	public static final int BINARY_DOUBLE_VK=219;
	public static final int BINARY_FLOAT_VK=220;
	public static final int BINARY_INTEGER_VK=221;
	public static final int BIT_VK=223;
	public static final int BLOB_VK=224;
	public static final int BLOCK=225;
	public static final int BLOCK_VK=226;
	public static final int BODY=227;
	public static final int BODY_MODE=228;
	public static final int BODY_VK=229;
	public static final int BOOLEAN_VK=230;
	public static final int BOTH_VK=231;
	public static final int BREADTH_VK=232;
	public static final int BULK_VK=233;
	public static final int BYTE_VK=234;
	public static final int CACHE_VK=235;
	public static final int CALL_MODE=236;
	public static final int CALL_VK=237;
	public static final int CANONICAL_VK=238;
	public static final int CASCADE_VK=240;
	public static final int CASCATED_ELEMENT=241;
	public static final int CAST_VK=242;
	public static final int CHARACTER_VK=243;
	public static final int CHAR_CS_VK=244;
	public static final int CHAR_SET_NAME=245;
	public static final int CHAR_VK=248;
	public static final int CHR_VK=249;
	public static final int CLOB_VK=250;
	public static final int CLOSE_VK=251;
	public static final int CLUSTER_VK=252;
	public static final int COLLECTION_MODE=253;
	public static final int COLLECTION_NAME=254;
	public static final int COLLECT_VK=255;
	public static final int COLUMNS=257;
	public static final int COLUMN_ALIAS=258;
	public static final int COLUMN_NAME=259;
	public static final int COMMENT_VK=261;
	public static final int COMMITTED_VK=262;
	public static final int COMMIT_VK=263;
	public static final int COMPATIBILITY_VK=264;
	public static final int COMPILATION_UNIT=265;
	public static final int COMPILER_PARAMETER=266;
	public static final int COMPILE_VK=267;
	public static final int COMPOUND_DML=268;
	public static final int COMPOUND_VK=269;
	public static final int CONDITIONAL_INSERT=271;
	public static final int CONSTANT_NEGATED=272;
	public static final int CONSTANT_VK=273;
	public static final int CONSTRAINT_NAME=274;
	public static final int CONSTRUCTOR_SPEC=275;
	public static final int CONSTRUCTOR_VK=276;
	public static final int CONTENT_VK=277;
	public static final int CONTEXT_VK=278;
	public static final int CONTINUE_VK=279;
	public static final int CONVERT_VK=280;
	public static final int CORRUPT_XID_ALL_VK=281;
	public static final int CORRUPT_XID_VK=282;
	public static final int COST_CLASS_NAME=283;
	public static final int COST_VK=284;
	public static final int COUNT_VK=285;
	public static final int CREATE_FUNCTION=286;
	public static final int CREATE_PACKAGE_BODY=287;
	public static final int CREATE_PACKAGE_SPEC=288;
	public static final int CREATE_PROCEDURE=289;
	public static final int CREATE_SEQUENCE=290;
	public static final int CREATE_TRIGGER=291;
	public static final int CREATE_TYPE_BODY=292;
	public static final int CREATE_TYPE_SPEC=293;
	public static final int CROSS_VK=294;
	public static final int CUBE_VK=295;
	public static final int CURRENT_USER_VK=296;
	public static final int CURRENT_VK=297;
	public static final int CURSOR_BASED_FOR=298;
	public static final int CURSOR_DECLARE=299;
	public static final int CURSOR_NAME=300;
	public static final int CUSTOMDATUM_VK=301;
	public static final int CUSTOM_TYPE=302;
	public static final int CYCLE_VK=303;
	public static final int C_VK=304;
	public static final int DATABASE_VK=305;
	public static final int DATETIME_OP=306;
	public static final int DAY_VK=307;
	public static final int DBTIMEZONE_VK=308;
	public static final int DB_ROLE_CHANGE_VK=309;
	public static final int DDL_VK=310;
	public static final int DEBUG_VK=311;
	public static final int DECIMAL_VK=312;
	public static final int DECOMPOSE_VK=313;
	public static final int DECREMENT_VK=314;
	public static final int DEC_VK=315;
	public static final int DEFAULTS_VK=316;
	public static final int DEFAULT_VALUE=317;
	public static final int DEFERRED_VK=318;
	public static final int DEFINER_VK=319;
	public static final int DENSE_RANK_VK=321;
	public static final int DEPENDENT_HANDLING=322;
	public static final int DEPTH_VK=323;
	public static final int DETERMINISTIC_VK=324;
	public static final int DIMENSION_VK=325;
	public static final int DIRECT_MODE=326;
	public static final int DISABLE_VK=327;
	public static final int DISASSOCIATE_VK=328;
	public static final int DIV_VK=329;
	public static final int DML_EVENT=330;
	public static final int DML_EVENT_ELEMENT=331;
	public static final int DOCUMENT_VK=332;
	public static final int DOT_ASTERISK=333;
	public static final int DOUBLE_VK=334;
	public static final int DROP_FUNCTION=335;
	public static final int DROP_PACKAGE=336;
	public static final int DROP_PROCEDURE=337;
	public static final int DROP_SEQUENCE=338;
	public static final int DROP_TRIGGER=339;
	public static final int DROP_TYPE=340;
	public static final int DSINTERVAL_UNCONSTRAINED_VK=341;
	public static final int DYNAMIC_RETURN=342;
	public static final int ELEMENT=343;
	public static final int ELEMENTS_MODE=344;
	public static final int ELEMENT_SPEC=345;
	public static final int ENABLE_VK=346;
	public static final int ENCODING_VK=347;
	public static final int ENTITYESCAPING_VK=348;
	public static final int EVALNAME_VK=350;
	public static final int EXCEPTIONS_VK=352;
	public static final int EXCEPTION_DECLARE=353;
	public static final int EXCEPTION_INIT_VK=354;
	public static final int EXCEPTION_NAME=355;
	public static final int EXCLUDE_VK=357;
	public static final int EXECUTE_VK=358;
	public static final int EXIT_VK=359;
	public static final int EXPLAIN_STATEMENT=360;
	public static final int EXPR=361;
	public static final int EXPR_LIST=362;
	public static final int EXTERNAL_MODE=363;
	public static final int EXTERNAL_VK=364;
	public static final int EXTRACT_VK=365;
	public static final int FACTORING=366;
	public static final int FAILURE_VK=367;
	public static final int FIELDS=368;
	public static final int FIELD_SPEC=369;
	public static final int FINAL_VK=370;
	public static final int FIRST_VALUE_VK=371;
	public static final int FIRST_VK=372;
	public static final int FLOAT_VK=373;
	public static final int FOLLOWING_VK=374;
	public static final int FOLLOWS_VK=375;
	public static final int FORALL_VK=376;
	public static final int FORCE_VK=377;
	public static final int FOR_EACH_ROW=378;
	public static final int FOR_LOOP=379;
	public static final int FOR_MULTI_COLUMN=380;
	public static final int FOR_SINGLE_COLUMN=381;
	public static final int FULL_VK=382;
	public static final int FUNCTION_ENABLING_OVER=383;
	public static final int FUNCTION_ENABLING_USING=384;
	public static final int FUNCTION_ENABLING_WITHIN_OR_OVER=385;
	public static final int FUNCTION_NAME=386;
	public static final int FUNCTION_SPEC=387;
	public static final int GROUPING_VK=390;
	public static final int GROUPIN_SET=391;
	public static final int GROUP_BY_ELEMENT=392;
	public static final int HASH_VK=393;
	public static final int HIDE_VK=394;
	public static final int HIERARCHICAL=395;
	public static final int HOSTED_VARIABLE=396;
	public static final int HOSTED_VARIABLE_NAME=397;
	public static final int HOSTED_VARIABLE_ROUTINE_CALL=398;
	public static final int HOUR_VK=399;
	public static final int ID=400;
	public static final int IGNORE_VK=401;
	public static final int IMMEDIATE_VK=402;
	public static final int IMPLEMENTATION_TYPE_NAME=403;
	public static final int INCLUDE_VK=404;
	public static final int INCLUDING_VK=405;
	public static final int INCREMENT_VK=406;
	public static final int INDENT_VK=407;
	public static final int INDEXED_BY=408;
	public static final int INDEXED_FOR=409;
	public static final int INDEX_NAME=410;
	public static final int INDICES_BOUND=411;
	public static final int INLINE_VK=412;
	public static final int INNER_VK=413;
	public static final int INOUT_VK=414;
	public static final int INSTANTIABLE_VK=415;
	public static final int INSTEAD_VK=416;
	public static final int INTEGER_VK=417;
	public static final int INTERVAL_DATATYPE=418;
	public static final int INT_VK=420;
	public static final int INVALIDATE_VK=421;
	public static final int ISOLATION_VK=422;
	public static final int IS_A_SET=423;
	public static final int IS_EMPTY=424;
	public static final int IS_INFINITE=425;
	public static final int IS_NAN=426;
	public static final int IS_NOT_A_SET=427;
	public static final int IS_NOT_EMPTY=428;
	public static final int IS_NOT_INFINITE=429;
	public static final int IS_NOT_NAN=430;
	public static final int IS_NOT_NULL=431;
	public static final int IS_NOT_OF_TYPE=432;
	public static final int IS_NOT_PRESENT=433;
	public static final int IS_NULL=434;
	public static final int IS_OF_TYPE=435;
	public static final int IS_PRESENT=436;
	public static final int ITERATE_VK=437;
	public static final int JAVA_VK=438;
	public static final int JOIN_DEF=439;
	public static final int KEEP_VK=440;
	public static final int LABEL_DECLARE=441;
	public static final int LABEL_NAME=442;
	public static final int LANGUAGE_VK=443;
	public static final int LAST_VALUE_VK=444;
	public static final int LAST_VK=445;
	public static final int LEADING_VK=446;
	public static final int LEFT_VK=449;
	public static final int LIBRARY_VK=452;
	public static final int LIKE2_VK=453;
	public static final int LIKE4_VK=454;
	public static final int LIKEC_VK=455;
	public static final int LIMIT_VK=456;
	public static final int LINK_NAME=457;
	public static final int LOCAL_VK=458;
	public static final int LOCK_TABLE_ELEMENT=459;
	public static final int LOGIC_EXPR=460;
	public static final int LOGOFF_VK=461;
	public static final int LOGON_VK=462;
	public static final int LOG_VK=463;
	public static final int LONG_RAW=464;
	public static final int LONG_VK=465;
	public static final int LOOP_VK=466;
	public static final int MAIN_MODEL=467;
	public static final int MAIN_MODEL_NAME=468;
	public static final int MAP_VK=469;
	public static final int MAXVALUE_VK=470;
	public static final int MEASURES_VK=471;
	public static final int MEMBER_VK=472;
	public static final int MERGE_INSERT=473;
	public static final int MERGE_UPDATE=474;
	public static final int MERGE_VK=475;
	public static final int MINUTE_VK=477;
	public static final int MINVALUE_VK=478;
	public static final int MLSLABEL_VK=479;
	public static final int MODEL_COLUMN=480;
	public static final int MODEL_COLUMNS=481;
	public static final int MODEL_EXPRESSION=482;
	public static final int MODEL_RULE=483;
	public static final int MODEL_RULES=484;
	public static final int MODIFIER=485;
	public static final int MODIFY_VK=486;
	public static final int MOD_VK=487;
	public static final int MONTH_VK=488;
	public static final int MULTI_TABLE_MODE=489;
	public static final int NAME_VK=490;
	public static final int NATIVE_DATATYPE=492;
	public static final int NATURALN_VK=493;
	public static final int NATURAL_VK=494;
	public static final int NAV_VK=495;
	public static final int NCHAR_CS_VK=496;
	public static final int NCHAR_VK=497;
	public static final int NCLOB_VK=498;
	public static final int NESTED_TABLE_TYPE_DEF=499;
	public static final int NESTED_VK=500;
	public static final int NEW_VK=501;
	public static final int NOAUDIT_VK=502;
	public static final int NOCACHE_VK=503;
	public static final int NOCOPY_VK=504;
	public static final int NOCYCLE_VK=505;
	public static final int NOENTITYESCAPING_VK=506;
	public static final int NOMAXVALUE_VK=507;
	public static final int NOMINVALUE_VK=508;
	public static final int NONE_VK=509;
	public static final int NON_DML=510;
	public static final int NOORDER_VK=511;
	public static final int NOSCHEMACHECK_VK=512;
	public static final int NOT_BETWEEN=513;
	public static final int NOT_IN=515;
	public static final int NOT_LIKE=516;
	public static final int NO_VK=517;
	public static final int NULLS_VK=518;
	public static final int NUMBER_VK=519;
	public static final int NUMERIC_VK=520;
	public static final int NVARCHAR2_VK=521;
	public static final int OBJECT_AS=522;
	public static final int OBJECT_MEMBERS=523;
	public static final int OBJECT_TYPE_DEF=524;
	public static final int OBJECT_VK=525;
	public static final int OFF_VK=526;
	public static final int OLD_VK=527;
	public static final int ONLY_VK=528;
	public static final int OPEN_FOR=529;
	public static final int OPEN_VK=530;
	public static final int ORADATA_VK=531;
	public static final int ORDER_BY_ELEMENT=532;
	public static final int ORDER_BY_ELEMENTS=533;
	public static final int ORDINALITY_VK=534;
	public static final int OSERROR_VK=535;
	public static final int OUTER_JOIN_SIGN=536;
	public static final int OUT_VK=537;
	public static final int OVERRIDING_VK=538;
	public static final int OVER_VK=539;
	public static final int PACKAGE_NAME=540;
	public static final int PACKAGE_VK=541;
	public static final int PARALLEL_ENABLE_VK=542;
	public static final int PARAMETER=543;
	public static final int PARAMETERS=544;
	public static final int PARAMETERS_VK=545;
	public static final int PARAMETER_NAME=546;
	public static final int PARENT_VK=547;
	public static final int PARTITION_VK=548;
	public static final int PASSING_VK=549;
	public static final int PERCENT_FOUND_VK=551;
	public static final int PERCENT_ISOPEN_VK=552;
	public static final int PERCENT_NOTFOUND_VK=553;
	public static final int PERCENT_ROWCOUNT_VK=554;
	public static final int PERCENT_ROWTYPE_VK=555;
	public static final int PERCENT_TYPE_VK=556;
	public static final int PIPELINED_VK=558;
	public static final int PIPE_ROW=559;
	public static final int PIPE_VK=560;
	public static final int PIVOT_ALIAS=561;
	public static final int PIVOT_ELEMENT=562;
	public static final int PIVOT_IN_ELEMENT=563;
	public static final int PIVOT_VK=564;
	public static final int PLS_INTEGER_VK=579;
	public static final int POSITIVEN_VK=581;
	public static final int POSITIVE_VK=582;
	public static final int PRAGMA_DECLARE=583;
	public static final int PRAGMA_VK=584;
	public static final int PRECEDING_VK=585;
	public static final int PRECISION=586;
	public static final int PRECISION_VK=587;
	public static final int PREDICTION_FUNCTION=588;
	public static final int PROCEDURE_NAME=589;
	public static final int PROCEDURE_SPEC=590;
	public static final int QUERY_NAME=592;
	public static final int QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS=593;
	public static final int RAISE_VK=594;
	public static final int RANGE_VK=595;
	public static final int RAW_VK=596;
	public static final int READ_VK=597;
	public static final int REAL_VK=598;
	public static final int RECORD_NAME=599;
	public static final int RECORD_TYPE_DECLARE_FIELDS=600;
	public static final int RECORD_TYPE_DECLARE_REFCURSOR=601;
	public static final int RECORD_VAR_DECLARE=602;
	public static final int RECURSIVE_VK=603;
	public static final int REFERENCE_MODEL_NAME=604;
	public static final int REFERENCE_VK=605;
	public static final int REFERENCING_VK=606;
	public static final int REF_VK=607;
	public static final int REJECT_VK=609;
	public static final int RELIES_ON_VK=610;
	public static final int RENAME_VK=611;
	public static final int REPLACE_VK=612;
	public static final int RESPECT_VK=613;
	public static final int RESTRICT_REFERENCES_VK=614;
	public static final int RESULT_CACHE_VK=615;
	public static final int RETURN_VK=616;
	public static final int REUSE_VK=617;
	public static final int REVERSE_VK=618;
	public static final int RIGHT_VK=621;
	public static final int ROLLBACK_SEGMENT_NAME=622;
	public static final int ROLLBACK_VK=623;
	public static final int ROLLUP_VK=624;
	public static final int ROUTINE_CALL=625;
	public static final int ROUTINE_NAME=626;
	public static final int ROWID_VK=627;
	public static final int ROWS_VK=628;
	public static final int ROW_VK=629;
	public static final int RULES_VK=630;
	public static final int SAMPLE_VK=631;
	public static final int SAVEPOINT_NAME=632;
	public static final int SAVEPOINT_VK=633;
	public static final int SCHEMACHECK_VK=634;
	public static final int SCHEMA_NAME=635;
	public static final int SCHEMA_VK=636;
	public static final int SCN_VK=637;
	public static final int SEARCHED_CASE=638;
	public static final int SEARCH_VK=639;
	public static final int SECOND_VK=640;
	public static final int SEED_VK=641;
	public static final int SELECTED_TABLEVIEW=642;
	public static final int SELECT_BASED_FOR=643;
	public static final int SELECT_ITEM=644;
	public static final int SELECT_LIST=645;
	public static final int SELECT_MODE=646;
	public static final int SELECT_STATEMENT=647;
	public static final int SELF_VK=648;
	public static final int SEQUENCE_NAME=650;
	public static final int SEQUENCE_VK=651;
	public static final int SEQUENTIAL_VK=652;
	public static final int SERIALIZABLE_VK=653;
	public static final int SERIALLY_REUSABLE_VK=654;
	public static final int SERVERERROR_VK=655;
	public static final int SESSIONTIMEZONE_VK=656;
	public static final int SET_CONSTRAINT=657;
	public static final int SET_SERVEROUTPUT=658;
	public static final int SET_TRANSACTION=659;
	public static final int SET_VK=660;
	public static final int SHOW_VK=661;
	public static final int SHUTDOWN_VK=662;
	public static final int SIBLINGS_VK=663;
	public static final int SIGNTYPE_VK=664;
	public static final int SIMPLE_BOUND=665;
	public static final int SIMPLE_CASE=666;
	public static final int SIMPLE_DML=667;
	public static final int SIMPLE_INTEGER_VK=668;
	public static final int SINGLE_TABLE_MODE=669;
	public static final int SINGLE_VK=670;
	public static final int SKIP_VK=671;
	public static final int SMALLINT_VK=672;
	public static final int SOME_VK=674;
	public static final int SPECIFICATION_VK=675;
	public static final int SQLDATA_VK=740;
	public static final int SQLERROR_VK=741;
	public static final int SQL_SCRIPT=742;
	public static final int STANDALONE_VK=743;
	public static final int STANDARD_FUNCTION=744;
	public static final int STARTUP_VK=745;
	public static final int STATEMENTS=746;
	public static final int STATIC_RETURNING=747;
	public static final int STATIC_VK=748;
	public static final int STATISTICS_VK=749;
	public static final int STREAMING_CLAUSE=750;
	public static final int STRING_VK=751;
	public static final int SUBMULTISET_VK=752;
	public static final int SUBPARTITION_VK=753;
	public static final int SUBQUERY=754;
	public static final int SUBTYPE_DECLARE=755;
	public static final int SUCCESS_VK=756;
	public static final int SUSPEND_VK=757;
	public static final int TABLEVIEW_NAME=758;
	public static final int TABLE_ALIAS=759;
	public static final int TABLE_ELEMENT=760;
	public static final int TABLE_EXPRESSION=761;
	public static final int TABLE_REF=762;
	public static final int TABLE_REF_ELEMENT=763;
	public static final int TABLE_TYPE_DECLARE=764;
	public static final int TABLE_VAR_DECLARE=765;
	public static final int TABLE_VAR_NAME=766;
	public static final int THREE_DOTS=767;
	public static final int TIMESTAMP_LTZ_UNCONSTRAINED_VK=768;
	public static final int TIMESTAMP_TZ_UNCONSTRAINED_VK=769;
	public static final int TIMESTAMP_UNCONSTRAINED_VK=770;
	public static final int TIMESTAMP_VK=771;
	public static final int TIMEZONE_ABBR_VK=772;
	public static final int TIMEZONE_HOUR_VK=773;
	public static final int TIMEZONE_MINUTE_VK=774;
	public static final int TIMEZONE_REGION_VK=775;
	public static final int TIME_VK=776;
	public static final int TRAILING_VK=777;
	public static final int TRANSLATE_VK=778;
	public static final int TREAT_VK=779;
	public static final int TRIGGER_NAME=780;
	public static final int TRIM_VK=781;
	public static final int TRUNCATE_VK=782;
	public static final int TYPE_BODY_ELEMENTS=783;
	public static final int TYPE_NAME=784;
	public static final int TYPE_VK=785;
	public static final int UNARY_MINUS=786;
	public static final int UNARY_PLUS=787;
	public static final int UNBOUNDED_VK=788;
	public static final int UNDER_VK=789;
	public static final int UNLIMITED_VK=790;
	public static final int UNPIVOT_IN_ELEMENT=791;
	public static final int UNPIVOT_VK=792;
	public static final int UNTIL_VK=794;
	public static final int UPDATED_VK=795;
	public static final int UPSERT_VK=796;
	public static final int UROWID_VK=797;
	public static final int USING_MODE=798;
	public static final int VALIDATE_VK=799;
	public static final int VALUES_BOUND=800;
	public static final int VALUE_VK=801;
	public static final int VARCHAR2_VK=802;
	public static final int VARCHAR_VK=803;
	public static final int VARIABLE_DECLARE=804;
	public static final int VARIABLE_NAME=805;
	public static final int VARR_ARRAY_DEF=806;
	public static final int VECTOR_EXPR=807;
	public static final int VERSIONS_VK=808;
	public static final int VERSION_VK=809;
	public static final int WAIT_VK=811;
	public static final int WARNING_VK=812;
	public static final int WELLFORMED_VK=813;
	public static final int WHENEVER_VK=814;
	public static final int WHILE_LOOP=815;
	public static final int WITHIN_VK=816;
	public static final int WORK_VK=817;
	public static final int WRITE_VK=818;
	public static final int XMLAGG_VK=819;
	public static final int XMLATTRIBUTES_VK=820;
	public static final int XMLCAST_VK=821;
	public static final int XMLCOLATTVAL_VK=822;
	public static final int XMLELEMENT_VK=823;
	public static final int XMLEXISTS_VK=824;
	public static final int XMLFOREST_VK=825;
	public static final int XMLNAMESPACES_VK=826;
	public static final int XMLPARSE_VK=827;
	public static final int XMLPI_VK=828;
	public static final int XMLQUERY_VK=829;
	public static final int XMLROOT_VK=830;
	public static final int XMLSERIALIZE_VK=831;
	public static final int XMLTABLE_VK=832;
	public static final int XML_ALIAS=833;
	public static final int XML_COLUMN=834;
	public static final int XML_COLUMN_NAME=835;
	public static final int XML_ELEMENT=836;
	public static final int XML_VK=837;
	public static final int YEAR_VK=838;
	public static final int YES_VK=839;
	public static final int YMINTERVAL_UNCONSTRAINED_VK=840;
	public static final int PGSQL_PERFORM=841;

	// delegates
	public TreeParser[] getDelegates() {
		return new TreeParser[] {};
	}

	// delegators


	public PLSQLPrinter(TreeNodeStream input) {
		this(input, new RecognizerSharedState());
	}
	public PLSQLPrinter(TreeNodeStream input, RecognizerSharedState state) {
		super(input, state);
	}

	protected StringTemplateGroup templateLib =
	  new StringTemplateGroup("PLSQLPrinterTemplates", AngleBracketTemplateLexer.class);

	public void setTemplateLib(StringTemplateGroup templateLib) {
	  this.templateLib = templateLib;
	}
	public StringTemplateGroup getTemplateLib() {
	  return templateLib;
	}
	/** allows convenient multi-value initialization:
	 *  "new STAttrMap().put(...).put(...)"
	 */
	@SuppressWarnings("serial")
	public static class STAttrMap extends HashMap<String, Object> {
		public STAttrMap put(String attrName, Object value) {
			super.put(attrName, value);
			return this;
		}
	}
	@Override public String[] getTokenNames() { return PLSQLPrinter.tokenNames; }
	@Override public String getGrammarFileName() { return "PLSQLPrinter.g"; }



	  static String[] correctTokenNames = getCorrectTokenNames();

	  static String[] getCorrectTokenNames() {
	    // This is workaround for bug in antlr3 (at least in 3.5.2)
	    java.lang.reflect.Field[] fields = PLSQLPrinter.class.getDeclaredFields();
	    java.util.Map<Integer, String> tokenNamesMap = new java.util.HashMap<Integer, String>();
	    int maxTokenValue = 0;
	    for (java.lang.reflect.Field field: fields) {
	      int mod = field.getModifiers();
	      if (java.lang.reflect.Modifier.isStatic(mod) && java.lang.reflect.Modifier.isFinal(mod) && field.getType() == int.class) {
	        String name = field.getName();
	        int value;
	        try {
	          value = field.getInt(null);
	        } catch (Exception e) {
	          throw new RuntimeException(e);
	        }
	        tokenNamesMap.put(value, name);
	        maxTokenValue = Math.max(maxTokenValue, value);
	      }
	    }
	    String[] result = new String[maxTokenValue + 1];
	    for (int i = 0; i < maxTokenValue; ++i) {
	      if (tokenNamesMap.containsKey(i)) {
	        result[i] = tokenNamesMap.get(i);
	      } else {
	        result[i] = "<none>";
	      }
	    }
	    return result;
	  }
	  
	  
	  public void reportError(RecognitionException e) {
	    // if we've already reported an error and have not matched a token
	    // yet successfully, don't report any errors.
	    if ( state.errorRecovery ) {
	      //System.err.print("[SPURIOUS] ");
	      return;
	    }
	    state.syntaxErrors++; // don't count spurious
	    state.errorRecovery = true;

	    displayRecognitionError(correctTokenNames, e);
	  }



	public static class compilation_unit_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "compilation_unit"
	// PLSQLPrinter.g:78:1: compilation_unit : ^( COMPILATION_UNIT (u+= unit_statement )* ) -> template(statements=$u) <<\n<statements:{v|<v>}; separator=\"\\n\\n\">\n>>;
	public final PLSQLPrinter.compilation_unit_return compilation_unit() throws RecognitionException {
		PLSQLPrinter.compilation_unit_return retval = new PLSQLPrinter.compilation_unit_return();
		retval.start = input.LT(1);

		List<Object> list_u=null;
		RuleReturnScope u = null;
		try {
			// PLSQLPrinter.g:79:5: ( ^( COMPILATION_UNIT (u+= unit_statement )* ) -> template(statements=$u) <<\n<statements:{v|<v>}; separator=\"\\n\\n\">\n>>)
			// PLSQLPrinter.g:79:10: ^( COMPILATION_UNIT (u+= unit_statement )* )
			{
			match(input,COMPILATION_UNIT,FOLLOW_COMPILATION_UNIT_in_compilation_unit81); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:79:30: (u+= unit_statement )*
				loop1:
				while (true) {
					int alt1=2;
					int LA1_0 = input.LA(1);
					if ( (LA1_0==ALTER_FUNCTION||(LA1_0 >= ALTER_PACKAGE && LA1_0 <= ALTER_TYPE)||(LA1_0 >= CREATE_FUNCTION && LA1_0 <= CREATE_TYPE_SPEC)||(LA1_0 >= DROP_FUNCTION && LA1_0 <= DROP_TYPE)) ) {
						alt1=1;
					}

					switch (alt1) {
					case 1 :
						// PLSQLPrinter.g:79:30: u+= unit_statement
						{
						pushFollow(FOLLOW_unit_statement_in_compilation_unit85);
						u=unit_statement();
						state._fsp--;

						if (list_u==null) list_u=new ArrayList<Object>();
						list_u.add(u.getTemplate());
						}
						break;

					default :
						break loop1;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 80:5: -> template(statements=$u) <<\n<statements:{v|<v>}; separator=\"\\n\\n\">\n>>
			{
				retval.st = new StringTemplate(templateLib, "\n<statements:{v|<v>}; separator=\"\\n\\n\">\n",new STAttrMap().put("statements", list_u));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compilation_unit"


	public static class sql_script_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sql_script"
	// PLSQLPrinter.g:86:1: sql_script : ^( SQL_SCRIPT (u+= unit_statement |u+= sql_plus_command )* ) -> template(statements=$u) <<\n<statements; separator=\"\\n\\n\">\n>>;
	public final PLSQLPrinter.sql_script_return sql_script() throws RecognitionException {
		PLSQLPrinter.sql_script_return retval = new PLSQLPrinter.sql_script_return();
		retval.start = input.LT(1);

		List<Object> list_u=null;
		RuleReturnScope u = null;
		try {
			// PLSQLPrinter.g:87:5: ( ^( SQL_SCRIPT (u+= unit_statement |u+= sql_plus_command )* ) -> template(statements=$u) <<\n<statements; separator=\"\\n\\n\">\n>>)
			// PLSQLPrinter.g:87:10: ^( SQL_SCRIPT (u+= unit_statement |u+= sql_plus_command )* )
			{
			match(input,SQL_SCRIPT,FOLLOW_SQL_SCRIPT_in_sql_script124); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:87:23: (u+= unit_statement |u+= sql_plus_command )*
				loop2:
				while (true) {
					int alt2=3;
					int LA2_0 = input.LA(1);
					if ( (LA2_0==ALTER_FUNCTION||(LA2_0 >= ALTER_PACKAGE && LA2_0 <= ALTER_TYPE)||(LA2_0 >= CREATE_FUNCTION && LA2_0 <= CREATE_TYPE_SPEC)||(LA2_0 >= DROP_FUNCTION && LA2_0 <= DROP_TYPE)) ) {
						alt2=1;
					}
					else if ( (LA2_0==PROMPT||LA2_0==EXIT_VK||LA2_0==SET_VK||LA2_0==WHENEVER_VK) ) {
						alt2=2;
					}

					switch (alt2) {
					case 1 :
						// PLSQLPrinter.g:87:24: u+= unit_statement
						{
						pushFollow(FOLLOW_unit_statement_in_sql_script129);
						u=unit_statement();
						state._fsp--;

						if (list_u==null) list_u=new ArrayList<Object>();
						list_u.add(u.getTemplate());
						}
						break;
					case 2 :
						// PLSQLPrinter.g:87:42: u+= sql_plus_command
						{
						pushFollow(FOLLOW_sql_plus_command_in_sql_script133);
						u=sql_plus_command();
						state._fsp--;

						if (list_u==null) list_u=new ArrayList<Object>();
						list_u.add(u.getTemplate());
						}
						break;

					default :
						break loop2;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 88:5: -> template(statements=$u) <<\n<statements; separator=\"\\n\\n\">\n>>
			{
				retval.st = new StringTemplate(templateLib, "\n<statements; separator=\"\\n\\n\">\n",new STAttrMap().put("statements", list_u));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sql_script"


	public static class sql_plus_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sql_plus_command"
	// PLSQLPrinter.g:95:1: sql_plus_command : ( whenever_command | exit_command | prompt_command | set_command );
	public final PLSQLPrinter.sql_plus_command_return sql_plus_command() throws RecognitionException {
		PLSQLPrinter.sql_plus_command_return retval = new PLSQLPrinter.sql_plus_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:96:5: ( whenever_command | exit_command | prompt_command | set_command )
			int alt3=4;
			switch ( input.LA(1) ) {
			case WHENEVER_VK:
				{
				alt3=1;
				}
				break;
			case EXIT_VK:
				{
				alt3=2;
				}
				break;
			case PROMPT:
				{
				alt3=3;
				}
				break;
			case SET_VK:
				{
				alt3=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 3, 0, input);
				throw nvae;
			}
			switch (alt3) {
				case 1 :
					// PLSQLPrinter.g:96:9: whenever_command
					{
					pushFollow(FOLLOW_whenever_command_in_sql_plus_command177);
					whenever_command();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:97:9: exit_command
					{
					pushFollow(FOLLOW_exit_command_in_sql_plus_command187);
					exit_command();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:98:9: prompt_command
					{
					pushFollow(FOLLOW_prompt_command_in_sql_plus_command197);
					prompt_command();
					state._fsp--;

					}
					break;
				case 4 :
					// PLSQLPrinter.g:99:9: set_command
					{
					pushFollow(FOLLOW_set_command_in_sql_plus_command207);
					set_command();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sql_plus_command"


	public static class whenever_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "whenever_command"
	// PLSQLPrinter.g:102:1: whenever_command : ^( WHENEVER_VK ( SQLERROR_VK | OSERROR_VK ) ( EXIT_VK ( SUCCESS_VK | FAILURE_VK | WARNING_VK ) ( COMMIT_VK | ROLLBACK_VK ) | CONTINUE_VK ( COMMIT_VK | ROLLBACK_VK | NONE_VK ) ) ) ;
	public final PLSQLPrinter.whenever_command_return whenever_command() throws RecognitionException {
		PLSQLPrinter.whenever_command_return retval = new PLSQLPrinter.whenever_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:103:5: ( ^( WHENEVER_VK ( SQLERROR_VK | OSERROR_VK ) ( EXIT_VK ( SUCCESS_VK | FAILURE_VK | WARNING_VK ) ( COMMIT_VK | ROLLBACK_VK ) | CONTINUE_VK ( COMMIT_VK | ROLLBACK_VK | NONE_VK ) ) ) )
			// PLSQLPrinter.g:103:9: ^( WHENEVER_VK ( SQLERROR_VK | OSERROR_VK ) ( EXIT_VK ( SUCCESS_VK | FAILURE_VK | WARNING_VK ) ( COMMIT_VK | ROLLBACK_VK ) | CONTINUE_VK ( COMMIT_VK | ROLLBACK_VK | NONE_VK ) ) )
			{
			match(input,WHENEVER_VK,FOLLOW_WHENEVER_VK_in_whenever_command227); 
			match(input, Token.DOWN, null); 
			if ( input.LA(1)==OSERROR_VK||input.LA(1)==SQLERROR_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// PLSQLPrinter.g:105:11: ( EXIT_VK ( SUCCESS_VK | FAILURE_VK | WARNING_VK ) ( COMMIT_VK | ROLLBACK_VK ) | CONTINUE_VK ( COMMIT_VK | ROLLBACK_VK | NONE_VK ) )
			int alt4=2;
			int LA4_0 = input.LA(1);
			if ( (LA4_0==EXIT_VK) ) {
				alt4=1;
			}
			else if ( (LA4_0==CONTINUE_VK) ) {
				alt4=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 4, 0, input);
				throw nvae;
			}

			switch (alt4) {
				case 1 :
					// PLSQLPrinter.g:106:13: EXIT_VK ( SUCCESS_VK | FAILURE_VK | WARNING_VK ) ( COMMIT_VK | ROLLBACK_VK )
					{
					match(input,EXIT_VK,FOLLOW_EXIT_VK_in_whenever_command269); 
					if ( input.LA(1)==FAILURE_VK||input.LA(1)==SUCCESS_VK||input.LA(1)==WARNING_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					if ( input.LA(1)==COMMIT_VK||input.LA(1)==ROLLBACK_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;
				case 2 :
					// PLSQLPrinter.g:109:15: CONTINUE_VK ( COMMIT_VK | ROLLBACK_VK | NONE_VK )
					{
					match(input,CONTINUE_VK,FOLLOW_CONTINUE_VK_in_whenever_command323); 
					if ( input.LA(1)==COMMIT_VK||input.LA(1)==NONE_VK||input.LA(1)==ROLLBACK_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "whenever_command"


	public static class set_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "set_command"
	// PLSQLPrinter.g:114:1: set_command : ^( SET_VK REGULAR_ID ( CHAR_STRING | SQL92_RESERVED_ON | OFF_VK | EXACT_NUM_LIT | REGULAR_ID ) ) ;
	public final PLSQLPrinter.set_command_return set_command() throws RecognitionException {
		PLSQLPrinter.set_command_return retval = new PLSQLPrinter.set_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:115:5: ( ^( SET_VK REGULAR_ID ( CHAR_STRING | SQL92_RESERVED_ON | OFF_VK | EXACT_NUM_LIT | REGULAR_ID ) ) )
			// PLSQLPrinter.g:115:10: ^( SET_VK REGULAR_ID ( CHAR_STRING | SQL92_RESERVED_ON | OFF_VK | EXACT_NUM_LIT | REGULAR_ID ) )
			{
			match(input,SET_VK,FOLLOW_SET_VK_in_set_command374); 
			match(input, Token.DOWN, null); 
			match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_set_command388); 
			if ( input.LA(1)==CHAR_STRING||input.LA(1)==EXACT_NUM_LIT||input.LA(1)==REGULAR_ID||input.LA(1)==SQL92_RESERVED_ON||input.LA(1)==OFF_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_command"


	public static class exit_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exit_command"
	// PLSQLPrinter.g:121:1: exit_command : EXIT_VK ;
	public final PLSQLPrinter.exit_command_return exit_command() throws RecognitionException {
		PLSQLPrinter.exit_command_return retval = new PLSQLPrinter.exit_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:122:5: ( EXIT_VK )
			// PLSQLPrinter.g:122:10: EXIT_VK
			{
			match(input,EXIT_VK,FOLLOW_EXIT_VK_in_exit_command444); 
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exit_command"


	public static class prompt_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "prompt_command"
	// PLSQLPrinter.g:125:1: prompt_command : PROMPT ;
	public final PLSQLPrinter.prompt_command_return prompt_command() throws RecognitionException {
		PLSQLPrinter.prompt_command_return retval = new PLSQLPrinter.prompt_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:126:5: ( PROMPT )
			// PLSQLPrinter.g:126:10: PROMPT
			{
			match(input,PROMPT,FOLLOW_PROMPT_in_prompt_command465); 
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "prompt_command"


	public static class unit_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unit_statement"
	// PLSQLPrinter.g:129:1: unit_statement : ( alter_function -> { $alter_function.st }| alter_package -> { $alter_package.st}| alter_procedure -> { $alter_procedure.st}| alter_sequence -> { $alter_sequence.st}| alter_trigger -> { $alter_trigger.st}| alter_type -> { $alter_type.st}| create_function_body -> { $create_function_body.st; }| create_procedure_body -> { $create_procedure_body.st}| create_package -> { $create_package.st}| create_sequence -> { $create_sequence.st}| create_trigger -> { $create_trigger.st}| create_type -> { $create_type.st}| drop_function -> { $drop_function.st}| drop_package -> { $drop_package.st}| drop_procedure -> { $drop_procedure.st}| drop_sequence -> { $drop_sequence.st}| drop_trigger -> { $drop_trigger.st}| drop_type -> { $drop_type.st});
	public final PLSQLPrinter.unit_statement_return unit_statement() throws RecognitionException {
		PLSQLPrinter.unit_statement_return retval = new PLSQLPrinter.unit_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope alter_function1 =null;
		TreeRuleReturnScope alter_package2 =null;
		TreeRuleReturnScope alter_procedure3 =null;
		TreeRuleReturnScope alter_sequence4 =null;
		TreeRuleReturnScope alter_trigger5 =null;
		TreeRuleReturnScope alter_type6 =null;
		TreeRuleReturnScope create_function_body7 =null;
		TreeRuleReturnScope create_procedure_body8 =null;
		TreeRuleReturnScope create_package9 =null;
		TreeRuleReturnScope create_sequence10 =null;
		TreeRuleReturnScope create_trigger11 =null;
		TreeRuleReturnScope create_type12 =null;
		TreeRuleReturnScope drop_function13 =null;
		TreeRuleReturnScope drop_package14 =null;
		TreeRuleReturnScope drop_procedure15 =null;
		TreeRuleReturnScope drop_sequence16 =null;
		TreeRuleReturnScope drop_trigger17 =null;
		TreeRuleReturnScope drop_type18 =null;

		try {
			// PLSQLPrinter.g:130:5: ( alter_function -> { $alter_function.st }| alter_package -> { $alter_package.st}| alter_procedure -> { $alter_procedure.st}| alter_sequence -> { $alter_sequence.st}| alter_trigger -> { $alter_trigger.st}| alter_type -> { $alter_type.st}| create_function_body -> { $create_function_body.st; }| create_procedure_body -> { $create_procedure_body.st}| create_package -> { $create_package.st}| create_sequence -> { $create_sequence.st}| create_trigger -> { $create_trigger.st}| create_type -> { $create_type.st}| drop_function -> { $drop_function.st}| drop_package -> { $drop_package.st}| drop_procedure -> { $drop_procedure.st}| drop_sequence -> { $drop_sequence.st}| drop_trigger -> { $drop_trigger.st}| drop_type -> { $drop_type.st})
			int alt5=18;
			switch ( input.LA(1) ) {
			case ALTER_FUNCTION:
				{
				alt5=1;
				}
				break;
			case ALTER_PACKAGE:
				{
				alt5=2;
				}
				break;
			case ALTER_PROCEDURE:
				{
				alt5=3;
				}
				break;
			case ALTER_SEQUENCE:
				{
				alt5=4;
				}
				break;
			case ALTER_TRIGGER:
				{
				alt5=5;
				}
				break;
			case ALTER_TYPE:
				{
				alt5=6;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt5=7;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt5=8;
				}
				break;
			case CREATE_PACKAGE_BODY:
			case CREATE_PACKAGE_SPEC:
				{
				alt5=9;
				}
				break;
			case CREATE_SEQUENCE:
				{
				alt5=10;
				}
				break;
			case CREATE_TRIGGER:
				{
				alt5=11;
				}
				break;
			case CREATE_TYPE_BODY:
			case CREATE_TYPE_SPEC:
				{
				alt5=12;
				}
				break;
			case DROP_FUNCTION:
				{
				alt5=13;
				}
				break;
			case DROP_PACKAGE:
				{
				alt5=14;
				}
				break;
			case DROP_PROCEDURE:
				{
				alt5=15;
				}
				break;
			case DROP_SEQUENCE:
				{
				alt5=16;
				}
				break;
			case DROP_TRIGGER:
				{
				alt5=17;
				}
				break;
			case DROP_TYPE:
				{
				alt5=18;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 5, 0, input);
				throw nvae;
			}
			switch (alt5) {
				case 1 :
					// PLSQLPrinter.g:130:10: alter_function
					{
					pushFollow(FOLLOW_alter_function_in_unit_statement485);
					alter_function1=alter_function();
					state._fsp--;

					// TEMPLATE REWRITE
					// 130:25: -> { $alter_function.st }
					{
						retval.st =  (alter_function1!=null?((StringTemplate)alter_function1.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:131:10: alter_package
					{
					pushFollow(FOLLOW_alter_package_in_unit_statement500);
					alter_package2=alter_package();
					state._fsp--;

					// TEMPLATE REWRITE
					// 131:24: -> { $alter_package.st}
					{
						retval.st =  (alter_package2!=null?((StringTemplate)alter_package2.getTemplate()):null);
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:132:10: alter_procedure
					{
					pushFollow(FOLLOW_alter_procedure_in_unit_statement515);
					alter_procedure3=alter_procedure();
					state._fsp--;

					// TEMPLATE REWRITE
					// 132:26: -> { $alter_procedure.st}
					{
						retval.st =  (alter_procedure3!=null?((StringTemplate)alter_procedure3.getTemplate()):null);
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:133:10: alter_sequence
					{
					pushFollow(FOLLOW_alter_sequence_in_unit_statement530);
					alter_sequence4=alter_sequence();
					state._fsp--;

					// TEMPLATE REWRITE
					// 133:25: -> { $alter_sequence.st}
					{
						retval.st =  (alter_sequence4!=null?((StringTemplate)alter_sequence4.getTemplate()):null);
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:134:10: alter_trigger
					{
					pushFollow(FOLLOW_alter_trigger_in_unit_statement545);
					alter_trigger5=alter_trigger();
					state._fsp--;

					// TEMPLATE REWRITE
					// 134:24: -> { $alter_trigger.st}
					{
						retval.st =  (alter_trigger5!=null?((StringTemplate)alter_trigger5.getTemplate()):null);
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:135:10: alter_type
					{
					pushFollow(FOLLOW_alter_type_in_unit_statement560);
					alter_type6=alter_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 135:21: -> { $alter_type.st}
					{
						retval.st =  (alter_type6!=null?((StringTemplate)alter_type6.getTemplate()):null);
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:136:10: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_unit_statement575);
					create_function_body7=create_function_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 136:31: -> { $create_function_body.st; }
					{
						retval.st =  (create_function_body7!=null?((StringTemplate)create_function_body7.getTemplate()):null); ;
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:137:10: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_unit_statement590);
					create_procedure_body8=create_procedure_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 137:32: -> { $create_procedure_body.st}
					{
						retval.st =  (create_procedure_body8!=null?((StringTemplate)create_procedure_body8.getTemplate()):null);
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:138:10: create_package
					{
					pushFollow(FOLLOW_create_package_in_unit_statement605);
					create_package9=create_package();
					state._fsp--;

					// TEMPLATE REWRITE
					// 138:25: -> { $create_package.st}
					{
						retval.st =  (create_package9!=null?((StringTemplate)create_package9.getTemplate()):null);
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:139:10: create_sequence
					{
					pushFollow(FOLLOW_create_sequence_in_unit_statement620);
					create_sequence10=create_sequence();
					state._fsp--;

					// TEMPLATE REWRITE
					// 139:26: -> { $create_sequence.st}
					{
						retval.st =  (create_sequence10!=null?((StringTemplate)create_sequence10.getTemplate()):null);
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:140:10: create_trigger
					{
					pushFollow(FOLLOW_create_trigger_in_unit_statement635);
					create_trigger11=create_trigger();
					state._fsp--;

					// TEMPLATE REWRITE
					// 140:25: -> { $create_trigger.st}
					{
						retval.st =  (create_trigger11!=null?((StringTemplate)create_trigger11.getTemplate()):null);
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:141:10: create_type
					{
					pushFollow(FOLLOW_create_type_in_unit_statement650);
					create_type12=create_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 141:22: -> { $create_type.st}
					{
						retval.st =  (create_type12!=null?((StringTemplate)create_type12.getTemplate()):null);
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:142:10: drop_function
					{
					pushFollow(FOLLOW_drop_function_in_unit_statement665);
					drop_function13=drop_function();
					state._fsp--;

					// TEMPLATE REWRITE
					// 142:24: -> { $drop_function.st}
					{
						retval.st =  (drop_function13!=null?((StringTemplate)drop_function13.getTemplate()):null);
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:143:10: drop_package
					{
					pushFollow(FOLLOW_drop_package_in_unit_statement680);
					drop_package14=drop_package();
					state._fsp--;

					// TEMPLATE REWRITE
					// 143:23: -> { $drop_package.st}
					{
						retval.st =  (drop_package14!=null?((StringTemplate)drop_package14.getTemplate()):null);
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:144:10: drop_procedure
					{
					pushFollow(FOLLOW_drop_procedure_in_unit_statement695);
					drop_procedure15=drop_procedure();
					state._fsp--;

					// TEMPLATE REWRITE
					// 144:25: -> { $drop_procedure.st}
					{
						retval.st =  (drop_procedure15!=null?((StringTemplate)drop_procedure15.getTemplate()):null);
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:145:10: drop_sequence
					{
					pushFollow(FOLLOW_drop_sequence_in_unit_statement710);
					drop_sequence16=drop_sequence();
					state._fsp--;

					// TEMPLATE REWRITE
					// 145:24: -> { $drop_sequence.st}
					{
						retval.st =  (drop_sequence16!=null?((StringTemplate)drop_sequence16.getTemplate()):null);
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:146:10: drop_trigger
					{
					pushFollow(FOLLOW_drop_trigger_in_unit_statement725);
					drop_trigger17=drop_trigger();
					state._fsp--;

					// TEMPLATE REWRITE
					// 146:23: -> { $drop_trigger.st}
					{
						retval.st =  (drop_trigger17!=null?((StringTemplate)drop_trigger17.getTemplate()):null);
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:147:10: drop_type
					{
					pushFollow(FOLLOW_drop_type_in_unit_statement740);
					drop_type18=drop_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 147:20: -> { $drop_type.st}
					{
						retval.st =  (drop_type18!=null?((StringTemplate)drop_type18.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unit_statement"


	public static class drop_function_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_function"
	// PLSQLPrinter.g:154:1: drop_function : ^( DROP_FUNCTION function_name ) -> template( \"not implemented: drop_function\";
	public final PLSQLPrinter.drop_function_return drop_function() throws RecognitionException {
		PLSQLPrinter.drop_function_return retval = new PLSQLPrinter.drop_function_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:155:5: ( ^( DROP_FUNCTION function_name ) -> template( \"not implemented: drop_function\")
			// PLSQLPrinter.g:155:10: ^( DROP_FUNCTION function_name )
			{
			match(input,DROP_FUNCTION,FOLLOW_DROP_FUNCTION_in_drop_function769); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_name_in_drop_function771);
			function_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 156:5: -> template( \"not implemented: drop_function\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_function");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_function"


	public static class alter_function_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_function"
	// PLSQLPrinter.g:159:1: alter_function : ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_function\";
	public final PLSQLPrinter.alter_function_return alter_function() throws RecognitionException {
		PLSQLPrinter.alter_function_return retval = new PLSQLPrinter.alter_function_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:160:5: ( ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_function\")
			// PLSQLPrinter.g:160:10: ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
			{
			match(input,ALTER_FUNCTION,FOLLOW_ALTER_FUNCTION_in_alter_function807); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_name_in_alter_function809);
			function_name();
			state._fsp--;

			// PLSQLPrinter.g:160:41: ( DEBUG_VK )?
			int alt6=2;
			int LA6_0 = input.LA(1);
			if ( (LA6_0==DEBUG_VK) ) {
				alt6=1;
			}
			switch (alt6) {
				case 1 :
					// PLSQLPrinter.g:160:41: DEBUG_VK
					{
					match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_function811); 
					}
					break;

			}

			// PLSQLPrinter.g:160:51: ( REUSE_VK )?
			int alt7=2;
			int LA7_0 = input.LA(1);
			if ( (LA7_0==REUSE_VK) ) {
				alt7=1;
			}
			switch (alt7) {
				case 1 :
					// PLSQLPrinter.g:160:51: REUSE_VK
					{
					match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_function814); 
					}
					break;

			}

			// PLSQLPrinter.g:160:61: ( compiler_parameters_clause )*
			loop8:
			while (true) {
				int alt8=2;
				int LA8_0 = input.LA(1);
				if ( (LA8_0==COMPILER_PARAMETER) ) {
					alt8=1;
				}

				switch (alt8) {
				case 1 :
					// PLSQLPrinter.g:160:61: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_function817);
					compiler_parameters_clause();
					state._fsp--;

					}
					break;

				default :
					break loop8;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 161:5: -> template( \"not implemented: alter_function\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_function");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_function"


	public static class create_function_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_function_body"
	// PLSQLPrinter.g:164:1: create_function_body : ^( CREATE_FUNCTION ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? ^( FUNCTION_NAME (name+= ID )+ ) ret= type_spec ^( PARAMETERS (args+= parameter )* ) (ac+= invoker_rights_clause )* (ac+= parallel_enable_clause )* (ac+= result_cache_clause )* ( DETERMINISTIC_VK )* ( PIPELINED_VK )? ( ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name ) -> template( \"not implemented: create_function_body[USING_MODE]\"| ^( CALL_MODE call_spec ) -> template( \"not implemented: create_function_body[CALL_MODE]\"| ^( BODY_MODE block ) -> create_function_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st)) ) ;
	public final PLSQLPrinter.create_function_body_return create_function_body() throws RecognitionException {
		PLSQLPrinter.create_function_body_return retval = new PLSQLPrinter.create_function_body_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_CREATE19=null;
		CommonTree REPLACE_VK20=null;
		CommonTree PIPELINED_VK21=null;
		CommonTree name=null;
		List<Object> list_name=null;
		List<Object> list_args=null;
		List<Object> list_ac=null;
		TreeRuleReturnScope ret =null;
		TreeRuleReturnScope block22 =null;
		RuleReturnScope args = null;
		RuleReturnScope ac = null;
		try {
			// PLSQLPrinter.g:165:5: ( ^( CREATE_FUNCTION ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? ^( FUNCTION_NAME (name+= ID )+ ) ret= type_spec ^( PARAMETERS (args+= parameter )* ) (ac+= invoker_rights_clause )* (ac+= parallel_enable_clause )* (ac+= result_cache_clause )* ( DETERMINISTIC_VK )* ( PIPELINED_VK )? ( ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name ) -> template( \"not implemented: create_function_body[USING_MODE]\"| ^( CALL_MODE call_spec ) -> template( \"not implemented: create_function_body[CALL_MODE]\"| ^( BODY_MODE block ) -> create_function_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st)) ) )
			// PLSQLPrinter.g:165:10: ^( CREATE_FUNCTION ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? ^( FUNCTION_NAME (name+= ID )+ ) ret= type_spec ^( PARAMETERS (args+= parameter )* ) (ac+= invoker_rights_clause )* (ac+= parallel_enable_clause )* (ac+= result_cache_clause )* ( DETERMINISTIC_VK )* ( PIPELINED_VK )? ( ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name ) -> template( \"not implemented: create_function_body[USING_MODE]\"| ^( CALL_MODE call_spec ) -> template( \"not implemented: create_function_body[CALL_MODE]\"| ^( BODY_MODE block ) -> create_function_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st)) )
			{
			match(input,CREATE_FUNCTION,FOLLOW_CREATE_FUNCTION_in_create_function_body854); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:165:28: ( SQL92_RESERVED_CREATE )?
			int alt9=2;
			int LA9_0 = input.LA(1);
			if ( (LA9_0==SQL92_RESERVED_CREATE) ) {
				alt9=1;
			}
			switch (alt9) {
				case 1 :
					// PLSQLPrinter.g:165:28: SQL92_RESERVED_CREATE
					{
					SQL92_RESERVED_CREATE19=(CommonTree)match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_create_function_body856); 
					}
					break;

			}

			// PLSQLPrinter.g:165:51: ( REPLACE_VK )?
			int alt10=2;
			int LA10_0 = input.LA(1);
			if ( (LA10_0==REPLACE_VK) ) {
				alt10=1;
			}
			switch (alt10) {
				case 1 :
					// PLSQLPrinter.g:165:51: REPLACE_VK
					{
					REPLACE_VK20=(CommonTree)match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_function_body859); 
					}
					break;

			}

			match(input,FUNCTION_NAME,FOLLOW_FUNCTION_NAME_in_create_function_body863); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:165:83: (name+= ID )+
			int cnt11=0;
			loop11:
			while (true) {
				int alt11=2;
				int LA11_0 = input.LA(1);
				if ( (LA11_0==ID) ) {
					alt11=1;
				}

				switch (alt11) {
				case 1 :
					// PLSQLPrinter.g:165:83: name+= ID
					{
					name=(CommonTree)match(input,ID,FOLLOW_ID_in_create_function_body867); 
					if (list_name==null) list_name=new ArrayList<Object>();
					list_name.add(name);
					}
					break;

				default :
					if ( cnt11 >= 1 ) break loop11;
					EarlyExitException eee = new EarlyExitException(11, input);
					throw eee;
				}
				cnt11++;
			}

			match(input, Token.UP, null); 

			pushFollow(FOLLOW_type_spec_in_create_function_body873);
			ret=type_spec();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_create_function_body876); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:165:121: (args+= parameter )*
				loop12:
				while (true) {
					int alt12=2;
					int LA12_0 = input.LA(1);
					if ( (LA12_0==PARAMETER) ) {
						alt12=1;
					}

					switch (alt12) {
					case 1 :
						// PLSQLPrinter.g:165:121: args+= parameter
						{
						pushFollow(FOLLOW_parameter_in_create_function_body880);
						args=parameter();
						state._fsp--;

						if (list_args==null) list_args=new ArrayList<Object>();
						list_args.add(args.getTemplate());
						}
						break;

					default :
						break loop12;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:166:15: (ac+= invoker_rights_clause )*
			loop13:
			while (true) {
				int alt13=2;
				int LA13_0 = input.LA(1);
				if ( (LA13_0==AUTHID_VK) ) {
					alt13=1;
				}

				switch (alt13) {
				case 1 :
					// PLSQLPrinter.g:166:15: ac+= invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_create_function_body898);
					ac=invoker_rights_clause();
					state._fsp--;

					if (list_ac==null) list_ac=new ArrayList<Object>();
					list_ac.add(ac.getTemplate());
					}
					break;

				default :
					break loop13;
				}
			}

			// PLSQLPrinter.g:166:42: (ac+= parallel_enable_clause )*
			loop14:
			while (true) {
				int alt14=2;
				int LA14_0 = input.LA(1);
				if ( (LA14_0==PARALLEL_ENABLE_VK) ) {
					alt14=1;
				}

				switch (alt14) {
				case 1 :
					// PLSQLPrinter.g:166:42: ac+= parallel_enable_clause
					{
					pushFollow(FOLLOW_parallel_enable_clause_in_create_function_body903);
					ac=parallel_enable_clause();
					state._fsp--;

					if (list_ac==null) list_ac=new ArrayList<Object>();
					list_ac.add(ac.getTemplate());
					}
					break;

				default :
					break loop14;
				}
			}

			// PLSQLPrinter.g:166:70: (ac+= result_cache_clause )*
			loop15:
			while (true) {
				int alt15=2;
				int LA15_0 = input.LA(1);
				if ( (LA15_0==RESULT_CACHE_VK) ) {
					alt15=1;
				}

				switch (alt15) {
				case 1 :
					// PLSQLPrinter.g:166:70: ac+= result_cache_clause
					{
					pushFollow(FOLLOW_result_cache_clause_in_create_function_body908);
					ac=result_cache_clause();
					state._fsp--;

					if (list_ac==null) list_ac=new ArrayList<Object>();
					list_ac.add(ac.getTemplate());
					}
					break;

				default :
					break loop15;
				}
			}

			// PLSQLPrinter.g:166:93: ( DETERMINISTIC_VK )*
			loop16:
			while (true) {
				int alt16=2;
				int LA16_0 = input.LA(1);
				if ( (LA16_0==DETERMINISTIC_VK) ) {
					alt16=1;
				}

				switch (alt16) {
				case 1 :
					// PLSQLPrinter.g:166:93: DETERMINISTIC_VK
					{
					match(input,DETERMINISTIC_VK,FOLLOW_DETERMINISTIC_VK_in_create_function_body911); 
					}
					break;

				default :
					break loop16;
				}
			}

			// PLSQLPrinter.g:166:111: ( PIPELINED_VK )?
			int alt17=2;
			int LA17_0 = input.LA(1);
			if ( (LA17_0==PIPELINED_VK) ) {
				alt17=1;
			}
			switch (alt17) {
				case 1 :
					// PLSQLPrinter.g:166:111: PIPELINED_VK
					{
					PIPELINED_VK21=(CommonTree)match(input,PIPELINED_VK,FOLLOW_PIPELINED_VK_in_create_function_body914); 
					}
					break;

			}

			// PLSQLPrinter.g:167:13: ( ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name ) -> template( \"not implemented: create_function_body[USING_MODE]\"| ^( CALL_MODE call_spec ) -> template( \"not implemented: create_function_body[CALL_MODE]\"| ^( BODY_MODE block ) -> create_function_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st))
			int alt19=3;
			switch ( input.LA(1) ) {
			case USING_MODE:
				{
				alt19=1;
				}
				break;
			case CALL_MODE:
				{
				alt19=2;
				}
				break;
			case BODY_MODE:
				{
				alt19=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 19, 0, input);
				throw nvae;
			}
			switch (alt19) {
				case 1 :
					// PLSQLPrinter.g:167:18: ^( USING_MODE ( AGGREGATE_VK )? implementation_type_name )
					{
					match(input,USING_MODE,FOLLOW_USING_MODE_in_create_function_body935); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:167:31: ( AGGREGATE_VK )?
					int alt18=2;
					int LA18_0 = input.LA(1);
					if ( (LA18_0==AGGREGATE_VK) ) {
						alt18=1;
					}
					switch (alt18) {
						case 1 :
							// PLSQLPrinter.g:167:31: AGGREGATE_VK
							{
							match(input,AGGREGATE_VK,FOLLOW_AGGREGATE_VK_in_create_function_body937); 
							}
							break;

					}

					pushFollow(FOLLOW_implementation_type_name_in_create_function_body940);
					implementation_type_name();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 168:5: -> template( \"not implemented: create_function_body[USING_MODE]\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: create_function_body[USING_MODE]");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:169:18: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_create_function_body975); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_create_function_body977);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 170:5: -> template( \"not implemented: create_function_body[CALL_MODE]\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: create_function_body[CALL_MODE]");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:171:18: ^( BODY_MODE block )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_create_function_body1012); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_create_function_body1014);
					block22=block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 172:18: -> create_function_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname_parts=$namearguments=$argsreturn_type=$ret.stadd_clauses=$acis_pipelined=$PIPELINED_VK != nullblock=$block.st)
					{
						retval.st = templateLib.getInstanceOf("create_function_body",new STAttrMap().put("is_create", SQL92_RESERVED_CREATE19 != null).put("is_replace", REPLACE_VK20 != null).put("name_parts", list_name).put("arguments", list_args).put("return_type", (ret!=null?((StringTemplate)ret.getTemplate()):null)).put("add_clauses", list_ac).put("is_pipelined", PIPELINED_VK21 != null).put("block", (block22!=null?((StringTemplate)block22.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_function_body"


	public static class parallel_enable_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parallel_enable_clause"
	// PLSQLPrinter.g:181:1: parallel_enable_clause : ^( PARALLEL_ENABLE_VK ( partition_by_clause )? ) -> template( \"not implemented: parallel_enable_clause\";
	public final PLSQLPrinter.parallel_enable_clause_return parallel_enable_clause() throws RecognitionException {
		PLSQLPrinter.parallel_enable_clause_return retval = new PLSQLPrinter.parallel_enable_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:182:5: ( ^( PARALLEL_ENABLE_VK ( partition_by_clause )? ) -> template( \"not implemented: parallel_enable_clause\")
			// PLSQLPrinter.g:182:10: ^( PARALLEL_ENABLE_VK ( partition_by_clause )? )
			{
			match(input,PARALLEL_ENABLE_VK,FOLLOW_PARALLEL_ENABLE_VK_in_parallel_enable_clause1185); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:182:31: ( partition_by_clause )?
				int alt20=2;
				int LA20_0 = input.LA(1);
				if ( (LA20_0==PARTITION_VK) ) {
					alt20=1;
				}
				switch (alt20) {
					case 1 :
						// PLSQLPrinter.g:182:31: partition_by_clause
						{
						pushFollow(FOLLOW_partition_by_clause_in_parallel_enable_clause1187);
						partition_by_clause();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 183:5: -> template( \"not implemented: parallel_enable_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: parallel_enable_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parallel_enable_clause"


	public static class partition_by_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "partition_by_clause"
	// PLSQLPrinter.g:186:1: partition_by_clause : ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? ) -> template( \"not implemented: partition_by_clause\";
	public final PLSQLPrinter.partition_by_clause_return partition_by_clause() throws RecognitionException {
		PLSQLPrinter.partition_by_clause_return retval = new PLSQLPrinter.partition_by_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:187:5: ( ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? ) -> template( \"not implemented: partition_by_clause\")
			// PLSQLPrinter.g:187:10: ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_partition_by_clause1224); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_partition_by_clause1226);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:188:13: ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) )
			int alt23=3;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ANY:
				{
				alt23=1;
				}
				break;
			case HASH_VK:
				{
				alt23=2;
				}
				break;
			case RANGE_VK:
				{
				alt23=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 23, 0, input);
				throw nvae;
			}
			switch (alt23) {
				case 1 :
					// PLSQLPrinter.g:188:18: SQL92_RESERVED_ANY
					{
					match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_partition_by_clause1246); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:189:18: ^( HASH_VK ^( COLUMNS ( column_name )+ ) )
					{
					match(input,HASH_VK,FOLLOW_HASH_VK_in_partition_by_clause1266); 
					match(input, Token.DOWN, null); 
					match(input,COLUMNS,FOLLOW_COLUMNS_in_partition_by_clause1269); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:189:38: ( column_name )+
					int cnt21=0;
					loop21:
					while (true) {
						int alt21=2;
						int LA21_0 = input.LA(1);
						if ( (LA21_0==COLUMN_NAME) ) {
							alt21=1;
						}

						switch (alt21) {
						case 1 :
							// PLSQLPrinter.g:189:38: column_name
							{
							pushFollow(FOLLOW_column_name_in_partition_by_clause1271);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt21 >= 1 ) break loop21;
							EarlyExitException eee = new EarlyExitException(21, input);
							throw eee;
						}
						cnt21++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:190:18: ^( RANGE_VK ^( COLUMNS ( column_name )+ ) )
					{
					match(input,RANGE_VK,FOLLOW_RANGE_VK_in_partition_by_clause1294); 
					match(input, Token.DOWN, null); 
					match(input,COLUMNS,FOLLOW_COLUMNS_in_partition_by_clause1297); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:190:39: ( column_name )+
					int cnt22=0;
					loop22:
					while (true) {
						int alt22=2;
						int LA22_0 = input.LA(1);
						if ( (LA22_0==COLUMN_NAME) ) {
							alt22=1;
						}

						switch (alt22) {
						case 1 :
							// PLSQLPrinter.g:190:39: column_name
							{
							pushFollow(FOLLOW_column_name_in_partition_by_clause1299);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt22 >= 1 ) break loop22;
							EarlyExitException eee = new EarlyExitException(22, input);
							throw eee;
						}
						cnt22++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;

			}

			// PLSQLPrinter.g:192:13: ( streaming_clause )?
			int alt24=2;
			int LA24_0 = input.LA(1);
			if ( (LA24_0==STREAMING_CLAUSE) ) {
				alt24=1;
			}
			switch (alt24) {
				case 1 :
					// PLSQLPrinter.g:192:13: streaming_clause
					{
					pushFollow(FOLLOW_streaming_clause_in_partition_by_clause1331);
					streaming_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 194:5: -> template( \"not implemented: partition_by_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: partition_by_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_by_clause"


	public static class result_cache_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "result_cache_clause"
	// PLSQLPrinter.g:197:1: result_cache_clause : ^( RESULT_CACHE_VK ( relies_on_part )? ) -> template( \"not implemented: result_cache_clause\";
	public final PLSQLPrinter.result_cache_clause_return result_cache_clause() throws RecognitionException {
		PLSQLPrinter.result_cache_clause_return retval = new PLSQLPrinter.result_cache_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:198:5: ( ^( RESULT_CACHE_VK ( relies_on_part )? ) -> template( \"not implemented: result_cache_clause\")
			// PLSQLPrinter.g:198:10: ^( RESULT_CACHE_VK ( relies_on_part )? )
			{
			match(input,RESULT_CACHE_VK,FOLLOW_RESULT_CACHE_VK_in_result_cache_clause1377); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:198:28: ( relies_on_part )?
				int alt25=2;
				int LA25_0 = input.LA(1);
				if ( (LA25_0==RELIES_ON_VK) ) {
					alt25=1;
				}
				switch (alt25) {
					case 1 :
						// PLSQLPrinter.g:198:28: relies_on_part
						{
						pushFollow(FOLLOW_relies_on_part_in_result_cache_clause1379);
						relies_on_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 199:5: -> template( \"not implemented: result_cache_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: result_cache_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "result_cache_clause"


	public static class relies_on_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "relies_on_part"
	// PLSQLPrinter.g:202:1: relies_on_part : ^( RELIES_ON_VK ( tableview_name )+ ) -> template( \"not implemented: relies_on_part\";
	public final PLSQLPrinter.relies_on_part_return relies_on_part() throws RecognitionException {
		PLSQLPrinter.relies_on_part_return retval = new PLSQLPrinter.relies_on_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:203:5: ( ^( RELIES_ON_VK ( tableview_name )+ ) -> template( \"not implemented: relies_on_part\")
			// PLSQLPrinter.g:203:10: ^( RELIES_ON_VK ( tableview_name )+ )
			{
			match(input,RELIES_ON_VK,FOLLOW_RELIES_ON_VK_in_relies_on_part1416); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:203:25: ( tableview_name )+
			int cnt26=0;
			loop26:
			while (true) {
				int alt26=2;
				int LA26_0 = input.LA(1);
				if ( (LA26_0==TABLEVIEW_NAME) ) {
					alt26=1;
				}

				switch (alt26) {
				case 1 :
					// PLSQLPrinter.g:203:25: tableview_name
					{
					pushFollow(FOLLOW_tableview_name_in_relies_on_part1418);
					tableview_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt26 >= 1 ) break loop26;
					EarlyExitException eee = new EarlyExitException(26, input);
					throw eee;
				}
				cnt26++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 204:5: -> template( \"not implemented: relies_on_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: relies_on_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "relies_on_part"


	public static class streaming_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "streaming_clause"
	// PLSQLPrinter.g:207:1: streaming_clause : ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) ) -> template( \"not implemented: streaming_clause\";
	public final PLSQLPrinter.streaming_clause_return streaming_clause() throws RecognitionException {
		PLSQLPrinter.streaming_clause_return retval = new PLSQLPrinter.streaming_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:208:5: ( ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) ) -> template( \"not implemented: streaming_clause\")
			// PLSQLPrinter.g:208:10: ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) )
			{
			match(input,STREAMING_CLAUSE,FOLLOW_STREAMING_CLAUSE_in_streaming_clause1455); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:208:29: ( SQL92_RESERVED_ORDER | CLUSTER_VK )
			int alt27=2;
			int LA27_0 = input.LA(1);
			if ( (LA27_0==SQL92_RESERVED_ORDER) ) {
				alt27=1;
			}
			else if ( (LA27_0==CLUSTER_VK) ) {
				alt27=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 27, 0, input);
				throw nvae;
			}

			switch (alt27) {
				case 1 :
					// PLSQLPrinter.g:208:30: SQL92_RESERVED_ORDER
					{
					match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_streaming_clause1458); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:208:51: CLUSTER_VK
					{
					match(input,CLUSTER_VK,FOLLOW_CLUSTER_VK_in_streaming_clause1460); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_streaming_clause1463);
			expression();
			state._fsp--;

			match(input,COLUMNS,FOLLOW_COLUMNS_in_streaming_clause1466); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:208:84: ( column_name )+
			int cnt28=0;
			loop28:
			while (true) {
				int alt28=2;
				int LA28_0 = input.LA(1);
				if ( (LA28_0==COLUMN_NAME) ) {
					alt28=1;
				}

				switch (alt28) {
				case 1 :
					// PLSQLPrinter.g:208:84: column_name
					{
					pushFollow(FOLLOW_column_name_in_streaming_clause1468);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt28 >= 1 ) break loop28;
					EarlyExitException eee = new EarlyExitException(28, input);
					throw eee;
				}
				cnt28++;
			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 209:5: -> template( \"not implemented: streaming_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: streaming_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "streaming_clause"


	public static class drop_package_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_package"
	// PLSQLPrinter.g:216:1: drop_package : ^( DROP_PACKAGE package_name ( BODY_VK )? ) -> template( \"not implemented: drop_package\";
	public final PLSQLPrinter.drop_package_return drop_package() throws RecognitionException {
		PLSQLPrinter.drop_package_return retval = new PLSQLPrinter.drop_package_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:217:5: ( ^( DROP_PACKAGE package_name ( BODY_VK )? ) -> template( \"not implemented: drop_package\")
			// PLSQLPrinter.g:217:10: ^( DROP_PACKAGE package_name ( BODY_VK )? )
			{
			match(input,DROP_PACKAGE,FOLLOW_DROP_PACKAGE_in_drop_package1511); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_package_name_in_drop_package1513);
			package_name();
			state._fsp--;

			// PLSQLPrinter.g:217:38: ( BODY_VK )?
			int alt29=2;
			int LA29_0 = input.LA(1);
			if ( (LA29_0==BODY_VK) ) {
				alt29=1;
			}
			switch (alt29) {
				case 1 :
					// PLSQLPrinter.g:217:38: BODY_VK
					{
					match(input,BODY_VK,FOLLOW_BODY_VK_in_drop_package1515); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 218:5: -> template( \"not implemented: drop_package\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_package");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_package"


	public static class alter_package_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_package"
	// PLSQLPrinter.g:221:1: alter_package : ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_package\";
	public final PLSQLPrinter.alter_package_return alter_package() throws RecognitionException {
		PLSQLPrinter.alter_package_return retval = new PLSQLPrinter.alter_package_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:222:5: ( ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_package\")
			// PLSQLPrinter.g:222:10: ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* )
			{
			match(input,ALTER_PACKAGE,FOLLOW_ALTER_PACKAGE_in_alter_package1552); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_package_name_in_alter_package1554);
			package_name();
			state._fsp--;

			// PLSQLPrinter.g:222:39: ( DEBUG_VK )?
			int alt30=2;
			int LA30_0 = input.LA(1);
			if ( (LA30_0==DEBUG_VK) ) {
				alt30=1;
			}
			switch (alt30) {
				case 1 :
					// PLSQLPrinter.g:222:39: DEBUG_VK
					{
					match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_package1556); 
					}
					break;

			}

			// PLSQLPrinter.g:222:49: ( REUSE_VK )?
			int alt31=2;
			int LA31_0 = input.LA(1);
			if ( (LA31_0==REUSE_VK) ) {
				alt31=1;
			}
			switch (alt31) {
				case 1 :
					// PLSQLPrinter.g:222:49: REUSE_VK
					{
					match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_package1559); 
					}
					break;

			}

			// PLSQLPrinter.g:223:17: ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )?
			int alt32=4;
			switch ( input.LA(1) ) {
				case PACKAGE_VK:
					{
					alt32=1;
					}
					break;
				case BODY_VK:
					{
					alt32=2;
					}
					break;
				case SPECIFICATION_VK:
					{
					alt32=3;
					}
					break;
			}
			switch (alt32) {
				case 1 :
					// PLSQLPrinter.g:223:18: PACKAGE_VK
					{
					match(input,PACKAGE_VK,FOLLOW_PACKAGE_VK_in_alter_package1580); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:223:29: BODY_VK
					{
					match(input,BODY_VK,FOLLOW_BODY_VK_in_alter_package1582); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:223:37: SPECIFICATION_VK
					{
					match(input,SPECIFICATION_VK,FOLLOW_SPECIFICATION_VK_in_alter_package1584); 
					}
					break;

			}

			// PLSQLPrinter.g:223:56: ( compiler_parameters_clause )*
			loop33:
			while (true) {
				int alt33=2;
				int LA33_0 = input.LA(1);
				if ( (LA33_0==COMPILER_PARAMETER) ) {
					alt33=1;
				}

				switch (alt33) {
				case 1 :
					// PLSQLPrinter.g:223:56: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_package1588);
					compiler_parameters_clause();
					state._fsp--;

					}
					break;

				default :
					break loop33;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 224:5: -> template( \"not implemented: alter_package\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_package");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_package"


	public static class create_package_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_package"
	// PLSQLPrinter.g:227:1: create_package : ( ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? package_name ( invoker_rights_clause )? (items+= package_obj_spec )* ) -> create_package_spec(is_replace=$REPLACE_VK != nullname=$package_name.stinvoker_rights_clause=$invoker_rights_clause.stitems=$items)| ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? package_name (items+= package_obj_body )* ( seq_of_statements )? ( exception_clause )? ) -> create_package_body(is_replace=$REPLACE_VK != nullname=$package_name.stitems=$itemsinit_section_seq_of_statements=$seq_of_statements.stinit_section_exception_clause=$exception_clause.st));
	public final PLSQLPrinter.create_package_return create_package() throws RecognitionException {
		PLSQLPrinter.create_package_return retval = new PLSQLPrinter.create_package_return();
		retval.start = input.LT(1);

		CommonTree REPLACE_VK23=null;
		CommonTree REPLACE_VK26=null;
		List<Object> list_items=null;
		TreeRuleReturnScope package_name24 =null;
		TreeRuleReturnScope invoker_rights_clause25 =null;
		TreeRuleReturnScope package_name27 =null;
		TreeRuleReturnScope seq_of_statements28 =null;
		TreeRuleReturnScope exception_clause29 =null;
		RuleReturnScope items = null;
		try {
			// PLSQLPrinter.g:228:5: ( ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? package_name ( invoker_rights_clause )? (items+= package_obj_spec )* ) -> create_package_spec(is_replace=$REPLACE_VK != nullname=$package_name.stinvoker_rights_clause=$invoker_rights_clause.stitems=$items)| ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? package_name (items+= package_obj_body )* ( seq_of_statements )? ( exception_clause )? ) -> create_package_body(is_replace=$REPLACE_VK != nullname=$package_name.stitems=$itemsinit_section_seq_of_statements=$seq_of_statements.stinit_section_exception_clause=$exception_clause.st))
			int alt41=2;
			int LA41_0 = input.LA(1);
			if ( (LA41_0==CREATE_PACKAGE_SPEC) ) {
				alt41=1;
			}
			else if ( (LA41_0==CREATE_PACKAGE_BODY) ) {
				alt41=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 41, 0, input);
				throw nvae;
			}

			switch (alt41) {
				case 1 :
					// PLSQLPrinter.g:228:10: ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? package_name ( invoker_rights_clause )? (items+= package_obj_spec )* )
					{
					match(input,CREATE_PACKAGE_SPEC,FOLLOW_CREATE_PACKAGE_SPEC_in_create_package1625); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:228:32: ( REPLACE_VK )?
					int alt34=2;
					int LA34_0 = input.LA(1);
					if ( (LA34_0==REPLACE_VK) ) {
						alt34=1;
					}
					switch (alt34) {
						case 1 :
							// PLSQLPrinter.g:228:32: REPLACE_VK
							{
							REPLACE_VK23=(CommonTree)match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_package1627); 
							}
							break;

					}

					pushFollow(FOLLOW_package_name_in_create_package1630);
					package_name24=package_name();
					state._fsp--;

					// PLSQLPrinter.g:228:57: ( invoker_rights_clause )?
					int alt35=2;
					int LA35_0 = input.LA(1);
					if ( (LA35_0==AUTHID_VK) ) {
						alt35=1;
					}
					switch (alt35) {
						case 1 :
							// PLSQLPrinter.g:228:57: invoker_rights_clause
							{
							pushFollow(FOLLOW_invoker_rights_clause_in_create_package1632);
							invoker_rights_clause25=invoker_rights_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:228:85: (items+= package_obj_spec )*
					loop36:
					while (true) {
						int alt36=2;
						int LA36_0 = input.LA(1);
						if ( (LA36_0==CURSOR_DECLARE||LA36_0==EXCEPTION_DECLARE||LA36_0==FUNCTION_SPEC||LA36_0==PRAGMA_DECLARE||LA36_0==PROCEDURE_SPEC||(LA36_0 >= RECORD_TYPE_DECLARE_FIELDS && LA36_0 <= RECORD_VAR_DECLARE)||LA36_0==SUBTYPE_DECLARE||(LA36_0 >= TABLE_TYPE_DECLARE && LA36_0 <= TABLE_VAR_DECLARE)||LA36_0==VARIABLE_DECLARE) ) {
							alt36=1;
						}

						switch (alt36) {
						case 1 :
							// PLSQLPrinter.g:228:85: items+= package_obj_spec
							{
							pushFollow(FOLLOW_package_obj_spec_in_create_package1637);
							items=package_obj_spec();
							state._fsp--;

							if (list_items==null) list_items=new ArrayList<Object>();
							list_items.add(items.getTemplate());
							}
							break;

						default :
							break loop36;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 229:5: -> create_package_spec(is_replace=$REPLACE_VK != nullname=$package_name.stinvoker_rights_clause=$invoker_rights_clause.stitems=$items)
					{
						retval.st = templateLib.getInstanceOf("create_package_spec",new STAttrMap().put("is_replace", REPLACE_VK23 != null).put("name", (package_name24!=null?((StringTemplate)package_name24.getTemplate()):null)).put("invoker_rights_clause", (invoker_rights_clause25!=null?((StringTemplate)invoker_rights_clause25.getTemplate()):null)).put("items", list_items));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:232:10: ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? package_name (items+= package_obj_body )* ( seq_of_statements )? ( exception_clause )? )
					{
					match(input,CREATE_PACKAGE_BODY,FOLLOW_CREATE_PACKAGE_BODY_in_create_package1705); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:232:32: ( REPLACE_VK )?
					int alt37=2;
					int LA37_0 = input.LA(1);
					if ( (LA37_0==REPLACE_VK) ) {
						alt37=1;
					}
					switch (alt37) {
						case 1 :
							// PLSQLPrinter.g:232:32: REPLACE_VK
							{
							REPLACE_VK26=(CommonTree)match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_package1707); 
							}
							break;

					}

					pushFollow(FOLLOW_package_name_in_create_package1710);
					package_name27=package_name();
					state._fsp--;

					// PLSQLPrinter.g:232:62: (items+= package_obj_body )*
					loop38:
					while (true) {
						int alt38=2;
						int LA38_0 = input.LA(1);
						if ( (LA38_0==CREATE_FUNCTION||LA38_0==CREATE_PROCEDURE||(LA38_0 >= CREATE_TYPE_BODY && LA38_0 <= CREATE_TYPE_SPEC)||LA38_0==CURSOR_DECLARE||LA38_0==EXCEPTION_DECLARE||LA38_0==FUNCTION_SPEC||LA38_0==PROCEDURE_SPEC||(LA38_0 >= RECORD_TYPE_DECLARE_FIELDS && LA38_0 <= RECORD_VAR_DECLARE)||LA38_0==SUBTYPE_DECLARE||(LA38_0 >= TABLE_TYPE_DECLARE && LA38_0 <= TABLE_VAR_DECLARE)||LA38_0==VARIABLE_DECLARE) ) {
							alt38=1;
						}

						switch (alt38) {
						case 1 :
							// PLSQLPrinter.g:232:62: items+= package_obj_body
							{
							pushFollow(FOLLOW_package_obj_body_in_create_package1714);
							items=package_obj_body();
							state._fsp--;

							if (list_items==null) list_items=new ArrayList<Object>();
							list_items.add(items.getTemplate());
							}
							break;

						default :
							break loop38;
						}
					}

					// PLSQLPrinter.g:232:82: ( seq_of_statements )?
					int alt39=2;
					int LA39_0 = input.LA(1);
					if ( (LA39_0==STATEMENTS) ) {
						alt39=1;
					}
					switch (alt39) {
						case 1 :
							// PLSQLPrinter.g:232:82: seq_of_statements
							{
							pushFollow(FOLLOW_seq_of_statements_in_create_package1717);
							seq_of_statements28=seq_of_statements();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:232:101: ( exception_clause )?
					int alt40=2;
					int LA40_0 = input.LA(1);
					if ( (LA40_0==SQL92_RESERVED_EXCEPTION) ) {
						alt40=1;
					}
					switch (alt40) {
						case 1 :
							// PLSQLPrinter.g:232:101: exception_clause
							{
							pushFollow(FOLLOW_exception_clause_in_create_package1720);
							exception_clause29=exception_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 233:5: -> create_package_body(is_replace=$REPLACE_VK != nullname=$package_name.stitems=$itemsinit_section_seq_of_statements=$seq_of_statements.stinit_section_exception_clause=$exception_clause.st)
					{
						retval.st = templateLib.getInstanceOf("create_package_body",new STAttrMap().put("is_replace", REPLACE_VK26 != null).put("name", (package_name27!=null?((StringTemplate)package_name27.getTemplate()):null)).put("items", list_items).put("init_section_seq_of_statements", (seq_of_statements28!=null?((StringTemplate)seq_of_statements28.getTemplate()):null)).put("init_section_exception_clause", (exception_clause29!=null?((StringTemplate)exception_clause29.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_package"


	public static class package_obj_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "package_obj_spec"
	// PLSQLPrinter.g:241:1: package_obj_spec : ( variable_declaration -> { $variable_declaration.st}| subtype_declaration -> { $subtype_declaration.st}| cursor_declaration -> { $cursor_declaration.st}| exception_declaration -> { $exception_declaration.st}| record_declaration -> { $record_declaration.st}| table_declaration -> { $table_declaration.st}| procedure_spec -> { $procedure_spec.st}| function_spec -> { $function_spec.st}| pragma_declaration -> { $pragma_declaration.st});
	public final PLSQLPrinter.package_obj_spec_return package_obj_spec() throws RecognitionException {
		PLSQLPrinter.package_obj_spec_return retval = new PLSQLPrinter.package_obj_spec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope variable_declaration30 =null;
		TreeRuleReturnScope subtype_declaration31 =null;
		TreeRuleReturnScope cursor_declaration32 =null;
		TreeRuleReturnScope exception_declaration33 =null;
		TreeRuleReturnScope record_declaration34 =null;
		TreeRuleReturnScope table_declaration35 =null;
		TreeRuleReturnScope procedure_spec36 =null;
		TreeRuleReturnScope function_spec37 =null;
		TreeRuleReturnScope pragma_declaration38 =null;

		try {
			// PLSQLPrinter.g:242:5: ( variable_declaration -> { $variable_declaration.st}| subtype_declaration -> { $subtype_declaration.st}| cursor_declaration -> { $cursor_declaration.st}| exception_declaration -> { $exception_declaration.st}| record_declaration -> { $record_declaration.st}| table_declaration -> { $table_declaration.st}| procedure_spec -> { $procedure_spec.st}| function_spec -> { $function_spec.st}| pragma_declaration -> { $pragma_declaration.st})
			int alt42=9;
			switch ( input.LA(1) ) {
			case VARIABLE_DECLARE:
				{
				alt42=1;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt42=2;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt42=3;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt42=4;
				}
				break;
			case RECORD_TYPE_DECLARE_FIELDS:
			case RECORD_TYPE_DECLARE_REFCURSOR:
			case RECORD_VAR_DECLARE:
				{
				alt42=5;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt42=6;
				}
				break;
			case PROCEDURE_SPEC:
				{
				alt42=7;
				}
				break;
			case FUNCTION_SPEC:
				{
				alt42=8;
				}
				break;
			case PRAGMA_DECLARE:
				{
				alt42=9;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 42, 0, input);
				throw nvae;
			}
			switch (alt42) {
				case 1 :
					// PLSQLPrinter.g:242:10: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_package_obj_spec1813);
					variable_declaration30=variable_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 242:31: -> { $variable_declaration.st}
					{
						retval.st =  (variable_declaration30!=null?((StringTemplate)variable_declaration30.getTemplate()):null);
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:243:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_package_obj_spec1829);
					subtype_declaration31=subtype_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 243:31: -> { $subtype_declaration.st}
					{
						retval.st =  (subtype_declaration31!=null?((StringTemplate)subtype_declaration31.getTemplate()):null);
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:244:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_package_obj_spec1845);
					cursor_declaration32=cursor_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 244:30: -> { $cursor_declaration.st}
					{
						retval.st =  (cursor_declaration32!=null?((StringTemplate)cursor_declaration32.getTemplate()):null);
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:245:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_package_obj_spec1861);
					exception_declaration33=exception_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 245:33: -> { $exception_declaration.st}
					{
						retval.st =  (exception_declaration33!=null?((StringTemplate)exception_declaration33.getTemplate()):null);
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:246:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_package_obj_spec1877);
					record_declaration34=record_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 246:30: -> { $record_declaration.st}
					{
						retval.st =  (record_declaration34!=null?((StringTemplate)record_declaration34.getTemplate()):null);
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:247:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_package_obj_spec1893);
					table_declaration35=table_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 247:29: -> { $table_declaration.st}
					{
						retval.st =  (table_declaration35!=null?((StringTemplate)table_declaration35.getTemplate()):null);
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:248:11: procedure_spec
					{
					pushFollow(FOLLOW_procedure_spec_in_package_obj_spec1909);
					procedure_spec36=procedure_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 248:26: -> { $procedure_spec.st}
					{
						retval.st =  (procedure_spec36!=null?((StringTemplate)procedure_spec36.getTemplate()):null);
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:249:11: function_spec
					{
					pushFollow(FOLLOW_function_spec_in_package_obj_spec1925);
					function_spec37=function_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 249:25: -> { $function_spec.st}
					{
						retval.st =  (function_spec37!=null?((StringTemplate)function_spec37.getTemplate()):null);
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:250:11: pragma_declaration
					{
					pushFollow(FOLLOW_pragma_declaration_in_package_obj_spec1941);
					pragma_declaration38=pragma_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 250:30: -> { $pragma_declaration.st}
					{
						retval.st =  (pragma_declaration38!=null?((StringTemplate)pragma_declaration38.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_obj_spec"


	public static class procedure_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "procedure_spec"
	// PLSQLPrinter.g:253:1: procedure_spec : ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( ^( CALL_MODE call_spec ) )? ) -> procedure_spec(name=$procedure_name.starguments=$arguments);
	public final PLSQLPrinter.procedure_spec_return procedure_spec() throws RecognitionException {
		PLSQLPrinter.procedure_spec_return retval = new PLSQLPrinter.procedure_spec_return();
		retval.start = input.LT(1);

		List<Object> list_arguments=null;
		TreeRuleReturnScope procedure_name39 =null;
		RuleReturnScope arguments = null;
		try {
			// PLSQLPrinter.g:254:5: ( ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( ^( CALL_MODE call_spec ) )? ) -> procedure_spec(name=$procedure_name.starguments=$arguments))
			// PLSQLPrinter.g:254:11: ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( ^( CALL_MODE call_spec ) )? )
			{
			match(input,PROCEDURE_SPEC,FOLLOW_PROCEDURE_SPEC_in_procedure_spec1967); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_procedure_name_in_procedure_spec1969);
			procedure_name39=procedure_name();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_procedure_spec1972); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:254:65: (arguments+= parameter )*
				loop43:
				while (true) {
					int alt43=2;
					int LA43_0 = input.LA(1);
					if ( (LA43_0==PARAMETER) ) {
						alt43=1;
					}

					switch (alt43) {
					case 1 :
						// PLSQLPrinter.g:254:65: arguments+= parameter
						{
						pushFollow(FOLLOW_parameter_in_procedure_spec1976);
						arguments=parameter();
						state._fsp--;

						if (list_arguments==null) list_arguments=new ArrayList<Object>();
						list_arguments.add(arguments.getTemplate());
						}
						break;

					default :
						break loop43;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:255:13: ( ^( CALL_MODE call_spec ) )?
			int alt44=2;
			int LA44_0 = input.LA(1);
			if ( (LA44_0==CALL_MODE) ) {
				alt44=1;
			}
			switch (alt44) {
				case 1 :
					// PLSQLPrinter.g:255:14: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_procedure_spec1994); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_procedure_spec1996);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 257:5: -> procedure_spec(name=$procedure_name.starguments=$arguments)
			{
				retval.st = templateLib.getInstanceOf("procedure_spec",new STAttrMap().put("name", (procedure_name39!=null?((StringTemplate)procedure_name39.getTemplate()):null)).put("arguments", list_arguments));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "procedure_spec"


	public static class function_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "function_spec"
	// PLSQLPrinter.g:260:1: function_spec : ^( FUNCTION_SPEC function_name type_spec ^( PARAMETERS (arguments+= parameter )* ) ( PIPELINED_VK )? ( RESULT_CACHE_VK )? ( DETERMINISTIC_VK )? ) -> function_spec(name=$function_name.starguments=$argumentsreturn_type=$type_spec.stis_pipelined=$PIPELINED_VK != nullis_result_cache=$RESULT_CACHE_VK != nullis_deterministic=$DETERMINISTIC_VK != null);
	public final PLSQLPrinter.function_spec_return function_spec() throws RecognitionException {
		PLSQLPrinter.function_spec_return retval = new PLSQLPrinter.function_spec_return();
		retval.start = input.LT(1);

		CommonTree PIPELINED_VK42=null;
		CommonTree RESULT_CACHE_VK43=null;
		CommonTree DETERMINISTIC_VK44=null;
		List<Object> list_arguments=null;
		TreeRuleReturnScope function_name40 =null;
		TreeRuleReturnScope type_spec41 =null;
		RuleReturnScope arguments = null;
		try {
			// PLSQLPrinter.g:261:5: ( ^( FUNCTION_SPEC function_name type_spec ^( PARAMETERS (arguments+= parameter )* ) ( PIPELINED_VK )? ( RESULT_CACHE_VK )? ( DETERMINISTIC_VK )? ) -> function_spec(name=$function_name.starguments=$argumentsreturn_type=$type_spec.stis_pipelined=$PIPELINED_VK != nullis_result_cache=$RESULT_CACHE_VK != nullis_deterministic=$DETERMINISTIC_VK != null))
			// PLSQLPrinter.g:261:10: ^( FUNCTION_SPEC function_name type_spec ^( PARAMETERS (arguments+= parameter )* ) ( PIPELINED_VK )? ( RESULT_CACHE_VK )? ( DETERMINISTIC_VK )? )
			{
			match(input,FUNCTION_SPEC,FOLLOW_FUNCTION_SPEC_in_function_spec2046); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_name_in_function_spec2048);
			function_name40=function_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_function_spec2050);
			type_spec41=type_spec();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_function_spec2053); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:261:72: (arguments+= parameter )*
				loop45:
				while (true) {
					int alt45=2;
					int LA45_0 = input.LA(1);
					if ( (LA45_0==PARAMETER) ) {
						alt45=1;
					}

					switch (alt45) {
					case 1 :
						// PLSQLPrinter.g:261:72: arguments+= parameter
						{
						pushFollow(FOLLOW_parameter_in_function_spec2057);
						arguments=parameter();
						state._fsp--;

						if (list_arguments==null) list_arguments=new ArrayList<Object>();
						list_arguments.add(arguments.getTemplate());
						}
						break;

					default :
						break loop45;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:262:13: ( PIPELINED_VK )?
			int alt46=2;
			int LA46_0 = input.LA(1);
			if ( (LA46_0==PIPELINED_VK) ) {
				alt46=1;
			}
			switch (alt46) {
				case 1 :
					// PLSQLPrinter.g:262:13: PIPELINED_VK
					{
					PIPELINED_VK42=(CommonTree)match(input,PIPELINED_VK,FOLLOW_PIPELINED_VK_in_function_spec2073); 
					}
					break;

			}

			// PLSQLPrinter.g:262:27: ( RESULT_CACHE_VK )?
			int alt47=2;
			int LA47_0 = input.LA(1);
			if ( (LA47_0==RESULT_CACHE_VK) ) {
				alt47=1;
			}
			switch (alt47) {
				case 1 :
					// PLSQLPrinter.g:262:27: RESULT_CACHE_VK
					{
					RESULT_CACHE_VK43=(CommonTree)match(input,RESULT_CACHE_VK,FOLLOW_RESULT_CACHE_VK_in_function_spec2076); 
					}
					break;

			}

			// PLSQLPrinter.g:262:44: ( DETERMINISTIC_VK )?
			int alt48=2;
			int LA48_0 = input.LA(1);
			if ( (LA48_0==DETERMINISTIC_VK) ) {
				alt48=1;
			}
			switch (alt48) {
				case 1 :
					// PLSQLPrinter.g:262:44: DETERMINISTIC_VK
					{
					DETERMINISTIC_VK44=(CommonTree)match(input,DETERMINISTIC_VK,FOLLOW_DETERMINISTIC_VK_in_function_spec2079); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 264:5: -> function_spec(name=$function_name.starguments=$argumentsreturn_type=$type_spec.stis_pipelined=$PIPELINED_VK != nullis_result_cache=$RESULT_CACHE_VK != nullis_deterministic=$DETERMINISTIC_VK != null)
			{
				retval.st = templateLib.getInstanceOf("function_spec",new STAttrMap().put("name", (function_name40!=null?((StringTemplate)function_name40.getTemplate()):null)).put("arguments", list_arguments).put("return_type", (type_spec41!=null?((StringTemplate)type_spec41.getTemplate()):null)).put("is_pipelined", PIPELINED_VK42 != null).put("is_result_cache", RESULT_CACHE_VK43 != null).put("is_deterministic", DETERMINISTIC_VK44 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_spec"


	public static class package_obj_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "package_obj_body"
	// PLSQLPrinter.g:269:1: package_obj_body : ( procedure_spec -> { $procedure_spec.st}| function_spec -> { $function_spec.st}| variable_declaration -> {$variable_declaration.st}| subtype_declaration -> {$subtype_declaration.st}| cursor_declaration -> {$cursor_declaration.st}| exception_declaration -> {$exception_declaration.st}| record_declaration -> {$record_declaration.st}| table_declaration -> {$table_declaration.st}| create_procedure_body -> {$create_procedure_body.st}| create_function_body -> {$create_function_body.st}| create_type -> {$create_type.st});
	public final PLSQLPrinter.package_obj_body_return package_obj_body() throws RecognitionException {
		PLSQLPrinter.package_obj_body_return retval = new PLSQLPrinter.package_obj_body_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope procedure_spec45 =null;
		TreeRuleReturnScope function_spec46 =null;
		TreeRuleReturnScope variable_declaration47 =null;
		TreeRuleReturnScope subtype_declaration48 =null;
		TreeRuleReturnScope cursor_declaration49 =null;
		TreeRuleReturnScope exception_declaration50 =null;
		TreeRuleReturnScope record_declaration51 =null;
		TreeRuleReturnScope table_declaration52 =null;
		TreeRuleReturnScope create_procedure_body53 =null;
		TreeRuleReturnScope create_function_body54 =null;
		TreeRuleReturnScope create_type55 =null;

		try {
			// PLSQLPrinter.g:270:5: ( procedure_spec -> { $procedure_spec.st}| function_spec -> { $function_spec.st}| variable_declaration -> {$variable_declaration.st}| subtype_declaration -> {$subtype_declaration.st}| cursor_declaration -> {$cursor_declaration.st}| exception_declaration -> {$exception_declaration.st}| record_declaration -> {$record_declaration.st}| table_declaration -> {$table_declaration.st}| create_procedure_body -> {$create_procedure_body.st}| create_function_body -> {$create_function_body.st}| create_type -> {$create_type.st})
			int alt49=11;
			switch ( input.LA(1) ) {
			case PROCEDURE_SPEC:
				{
				alt49=1;
				}
				break;
			case FUNCTION_SPEC:
				{
				alt49=2;
				}
				break;
			case VARIABLE_DECLARE:
				{
				alt49=3;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt49=4;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt49=5;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt49=6;
				}
				break;
			case RECORD_TYPE_DECLARE_FIELDS:
			case RECORD_TYPE_DECLARE_REFCURSOR:
			case RECORD_VAR_DECLARE:
				{
				alt49=7;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt49=8;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt49=9;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt49=10;
				}
				break;
			case CREATE_TYPE_BODY:
			case CREATE_TYPE_SPEC:
				{
				alt49=11;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 49, 0, input);
				throw nvae;
			}
			switch (alt49) {
				case 1 :
					// PLSQLPrinter.g:270:11: procedure_spec
					{
					pushFollow(FOLLOW_procedure_spec_in_package_obj_body2174);
					procedure_spec45=procedure_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 270:26: -> { $procedure_spec.st}
					{
						retval.st =  (procedure_spec45!=null?((StringTemplate)procedure_spec45.getTemplate()):null);
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:271:11: function_spec
					{
					pushFollow(FOLLOW_function_spec_in_package_obj_body2190);
					function_spec46=function_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 271:25: -> { $function_spec.st}
					{
						retval.st =  (function_spec46!=null?((StringTemplate)function_spec46.getTemplate()):null);
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:272:11: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_package_obj_body2206);
					variable_declaration47=variable_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 272:32: -> {$variable_declaration.st}
					{
						retval.st = (variable_declaration47!=null?((StringTemplate)variable_declaration47.getTemplate()):null);
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:273:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_package_obj_body2222);
					subtype_declaration48=subtype_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 273:31: -> {$subtype_declaration.st}
					{
						retval.st = (subtype_declaration48!=null?((StringTemplate)subtype_declaration48.getTemplate()):null);
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:274:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_package_obj_body2238);
					cursor_declaration49=cursor_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 274:30: -> {$cursor_declaration.st}
					{
						retval.st = (cursor_declaration49!=null?((StringTemplate)cursor_declaration49.getTemplate()):null);
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:275:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_package_obj_body2254);
					exception_declaration50=exception_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 275:33: -> {$exception_declaration.st}
					{
						retval.st = (exception_declaration50!=null?((StringTemplate)exception_declaration50.getTemplate()):null);
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:276:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_package_obj_body2270);
					record_declaration51=record_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 276:30: -> {$record_declaration.st}
					{
						retval.st = (record_declaration51!=null?((StringTemplate)record_declaration51.getTemplate()):null);
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:277:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_package_obj_body2286);
					table_declaration52=table_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 277:29: -> {$table_declaration.st}
					{
						retval.st = (table_declaration52!=null?((StringTemplate)table_declaration52.getTemplate()):null);
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:278:11: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_package_obj_body2302);
					create_procedure_body53=create_procedure_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 278:33: -> {$create_procedure_body.st}
					{
						retval.st = (create_procedure_body53!=null?((StringTemplate)create_procedure_body53.getTemplate()):null);
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:279:11: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_package_obj_body2318);
					create_function_body54=create_function_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 279:32: -> {$create_function_body.st}
					{
						retval.st = (create_function_body54!=null?((StringTemplate)create_function_body54.getTemplate()):null);
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:280:11: create_type
					{
					pushFollow(FOLLOW_create_type_in_package_obj_body2334);
					create_type55=create_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 280:23: -> {$create_type.st}
					{
						retval.st = (create_type55!=null?((StringTemplate)create_type55.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_obj_body"


	public static class drop_procedure_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_procedure"
	// PLSQLPrinter.g:289:1: drop_procedure : ^( DROP_PROCEDURE procedure_name ) -> template( \"not implemented: drop_procedure\";
	public final PLSQLPrinter.drop_procedure_return drop_procedure() throws RecognitionException {
		PLSQLPrinter.drop_procedure_return retval = new PLSQLPrinter.drop_procedure_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:290:5: ( ^( DROP_PROCEDURE procedure_name ) -> template( \"not implemented: drop_procedure\")
			// PLSQLPrinter.g:290:10: ^( DROP_PROCEDURE procedure_name )
			{
			match(input,DROP_PROCEDURE,FOLLOW_DROP_PROCEDURE_in_drop_procedure2365); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_procedure_name_in_drop_procedure2367);
			procedure_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 291:5: -> template( \"not implemented: drop_procedure\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_procedure");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_procedure"


	public static class alter_procedure_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_procedure"
	// PLSQLPrinter.g:294:1: alter_procedure : ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_procedure\";
	public final PLSQLPrinter.alter_procedure_return alter_procedure() throws RecognitionException {
		PLSQLPrinter.alter_procedure_return retval = new PLSQLPrinter.alter_procedure_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:295:5: ( ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) -> template( \"not implemented: alter_procedure\")
			// PLSQLPrinter.g:295:10: ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
			{
			match(input,ALTER_PROCEDURE,FOLLOW_ALTER_PROCEDURE_in_alter_procedure2403); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_procedure_name_in_alter_procedure2405);
			procedure_name();
			state._fsp--;

			// PLSQLPrinter.g:295:43: ( DEBUG_VK )?
			int alt50=2;
			int LA50_0 = input.LA(1);
			if ( (LA50_0==DEBUG_VK) ) {
				alt50=1;
			}
			switch (alt50) {
				case 1 :
					// PLSQLPrinter.g:295:43: DEBUG_VK
					{
					match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_procedure2407); 
					}
					break;

			}

			// PLSQLPrinter.g:295:53: ( REUSE_VK )?
			int alt51=2;
			int LA51_0 = input.LA(1);
			if ( (LA51_0==REUSE_VK) ) {
				alt51=1;
			}
			switch (alt51) {
				case 1 :
					// PLSQLPrinter.g:295:53: REUSE_VK
					{
					match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_procedure2410); 
					}
					break;

			}

			// PLSQLPrinter.g:295:63: ( compiler_parameters_clause )*
			loop52:
			while (true) {
				int alt52=2;
				int LA52_0 = input.LA(1);
				if ( (LA52_0==COMPILER_PARAMETER) ) {
					alt52=1;
				}

				switch (alt52) {
				case 1 :
					// PLSQLPrinter.g:295:63: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_procedure2413);
					compiler_parameters_clause();
					state._fsp--;

					}
					break;

				default :
					break loop52;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 296:5: -> template( \"not implemented: alter_procedure\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_procedure");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_procedure"


	public static class create_procedure_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_procedure_body"
	// PLSQLPrinter.g:299:1: create_procedure_body : ^( CREATE_PROCEDURE ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( invoker_rights_clause )? create_procedure_body_impl ) -> create_procedure_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname=$procedure_name.starguments=$argumentsinvoker_rights_clause=$invoker_rights_clause.stimpl=$create_procedure_body_impl.st);
	public final PLSQLPrinter.create_procedure_body_return create_procedure_body() throws RecognitionException {
		PLSQLPrinter.create_procedure_body_return retval = new PLSQLPrinter.create_procedure_body_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_CREATE56=null;
		CommonTree REPLACE_VK57=null;
		List<Object> list_arguments=null;
		TreeRuleReturnScope procedure_name58 =null;
		TreeRuleReturnScope invoker_rights_clause59 =null;
		TreeRuleReturnScope create_procedure_body_impl60 =null;
		RuleReturnScope arguments = null;
		try {
			// PLSQLPrinter.g:300:5: ( ^( CREATE_PROCEDURE ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( invoker_rights_clause )? create_procedure_body_impl ) -> create_procedure_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname=$procedure_name.starguments=$argumentsinvoker_rights_clause=$invoker_rights_clause.stimpl=$create_procedure_body_impl.st))
			// PLSQLPrinter.g:300:10: ^( CREATE_PROCEDURE ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? procedure_name ^( PARAMETERS (arguments+= parameter )* ) ( invoker_rights_clause )? create_procedure_body_impl )
			{
			match(input,CREATE_PROCEDURE,FOLLOW_CREATE_PROCEDURE_in_create_procedure_body2450); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:300:29: ( SQL92_RESERVED_CREATE )?
			int alt53=2;
			int LA53_0 = input.LA(1);
			if ( (LA53_0==SQL92_RESERVED_CREATE) ) {
				alt53=1;
			}
			switch (alt53) {
				case 1 :
					// PLSQLPrinter.g:300:29: SQL92_RESERVED_CREATE
					{
					SQL92_RESERVED_CREATE56=(CommonTree)match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_create_procedure_body2452); 
					}
					break;

			}

			// PLSQLPrinter.g:300:52: ( REPLACE_VK )?
			int alt54=2;
			int LA54_0 = input.LA(1);
			if ( (LA54_0==REPLACE_VK) ) {
				alt54=1;
			}
			switch (alt54) {
				case 1 :
					// PLSQLPrinter.g:300:52: REPLACE_VK
					{
					REPLACE_VK57=(CommonTree)match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_procedure_body2455); 
					}
					break;

			}

			pushFollow(FOLLOW_procedure_name_in_create_procedure_body2458);
			procedure_name58=procedure_name();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_create_procedure_body2461); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:300:101: (arguments+= parameter )*
				loop55:
				while (true) {
					int alt55=2;
					int LA55_0 = input.LA(1);
					if ( (LA55_0==PARAMETER) ) {
						alt55=1;
					}

					switch (alt55) {
					case 1 :
						// PLSQLPrinter.g:300:101: arguments+= parameter
						{
						pushFollow(FOLLOW_parameter_in_create_procedure_body2465);
						arguments=parameter();
						state._fsp--;

						if (list_arguments==null) list_arguments=new ArrayList<Object>();
						list_arguments.add(arguments.getTemplate());
						}
						break;

					default :
						break loop55;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:300:115: ( invoker_rights_clause )?
			int alt56=2;
			int LA56_0 = input.LA(1);
			if ( (LA56_0==AUTHID_VK) ) {
				alt56=1;
			}
			switch (alt56) {
				case 1 :
					// PLSQLPrinter.g:300:115: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_create_procedure_body2469);
					invoker_rights_clause59=invoker_rights_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_create_procedure_body_impl_in_create_procedure_body2483);
			create_procedure_body_impl60=create_procedure_body_impl();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 303:5: -> create_procedure_body(is_create=$SQL92_RESERVED_CREATE != nullis_replace=$REPLACE_VK != nullname=$procedure_name.starguments=$argumentsinvoker_rights_clause=$invoker_rights_clause.stimpl=$create_procedure_body_impl.st)
			{
				retval.st = templateLib.getInstanceOf("create_procedure_body",new STAttrMap().put("is_create", SQL92_RESERVED_CREATE56 != null).put("is_replace", REPLACE_VK57 != null).put("name", (procedure_name58!=null?((StringTemplate)procedure_name58.getTemplate()):null)).put("arguments", list_arguments).put("invoker_rights_clause", (invoker_rights_clause59!=null?((StringTemplate)invoker_rights_clause59.getTemplate()):null)).put("impl", (create_procedure_body_impl60!=null?((StringTemplate)create_procedure_body_impl60.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_procedure_body"


	public static class create_procedure_body_impl_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_procedure_body_impl"
	// PLSQLPrinter.g:308:1: create_procedure_body_impl : ( EXTERNAL_VK -> create_procedure_body_impl_external(| ^( CALL_MODE call_spec ) -> { $call_spec.st }| ^( BODY_MODE block ) -> { $block.st });
	public final PLSQLPrinter.create_procedure_body_impl_return create_procedure_body_impl() throws RecognitionException {
		PLSQLPrinter.create_procedure_body_impl_return retval = new PLSQLPrinter.create_procedure_body_impl_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope call_spec61 =null;
		TreeRuleReturnScope block62 =null;

		try {
			// PLSQLPrinter.g:309:5: ( EXTERNAL_VK -> create_procedure_body_impl_external(| ^( CALL_MODE call_spec ) -> { $call_spec.st }| ^( BODY_MODE block ) -> { $block.st })
			int alt57=3;
			switch ( input.LA(1) ) {
			case EXTERNAL_VK:
				{
				alt57=1;
				}
				break;
			case CALL_MODE:
				{
				alt57=2;
				}
				break;
			case BODY_MODE:
				{
				alt57=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 57, 0, input);
				throw nvae;
			}
			switch (alt57) {
				case 1 :
					// PLSQLPrinter.g:309:9: EXTERNAL_VK
					{
					match(input,EXTERNAL_VK,FOLLOW_EXTERNAL_VK_in_create_procedure_body_impl2577); 
					// TEMPLATE REWRITE
					// 309:21: -> create_procedure_body_impl_external(
					{
						retval.st = templateLib.getInstanceOf("create_procedure_body_impl_external");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:310:14: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_create_procedure_body_impl2599); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_create_procedure_body_impl2601);
					call_spec61=call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 310:37: -> { $call_spec.st }
					{
						retval.st =  (call_spec61!=null?((StringTemplate)call_spec61.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:311:14: ^( BODY_MODE block )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_create_procedure_body_impl2622); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_create_procedure_body_impl2624);
					block62=block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 311:33: -> { $block.st }
					{
						retval.st =  (block62!=null?((StringTemplate)block62.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_procedure_body_impl"


	public static class drop_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_trigger"
	// PLSQLPrinter.g:318:1: drop_trigger : ^( DROP_TRIGGER trigger_name ) -> template( \"not implemented: drop_trigger\";
	public final PLSQLPrinter.drop_trigger_return drop_trigger() throws RecognitionException {
		PLSQLPrinter.drop_trigger_return retval = new PLSQLPrinter.drop_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:319:5: ( ^( DROP_TRIGGER trigger_name ) -> template( \"not implemented: drop_trigger\")
			// PLSQLPrinter.g:319:10: ^( DROP_TRIGGER trigger_name )
			{
			match(input,DROP_TRIGGER,FOLLOW_DROP_TRIGGER_in_drop_trigger2654); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_trigger_name_in_drop_trigger2656);
			trigger_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 320:5: -> template( \"not implemented: drop_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_trigger"


	public static class alter_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_trigger"
	// PLSQLPrinter.g:323:1: alter_trigger : ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) -> template( \"not implemented: alter_trigger\";
	public final PLSQLPrinter.alter_trigger_return alter_trigger() throws RecognitionException {
		PLSQLPrinter.alter_trigger_return retval = new PLSQLPrinter.alter_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:324:5: ( ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) -> template( \"not implemented: alter_trigger\")
			// PLSQLPrinter.g:324:10: ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
			{
			match(input,ALTER_TRIGGER,FOLLOW_ALTER_TRIGGER_in_alter_trigger2692); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_trigger_name_in_alter_trigger2694);
			trigger_name();
			state._fsp--;

			// PLSQLPrinter.g:325:13: ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
			int alt62=3;
			switch ( input.LA(1) ) {
			case DISABLE_VK:
			case ENABLE_VK:
				{
				alt62=1;
				}
				break;
			case RENAME_VK:
				{
				alt62=2;
				}
				break;
			case UP:
			case COMPILER_PARAMETER:
			case DEBUG_VK:
			case REUSE_VK:
				{
				alt62=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 62, 0, input);
				throw nvae;
			}
			switch (alt62) {
				case 1 :
					// PLSQLPrinter.g:325:18: ( ENABLE_VK | DISABLE_VK )
					{
					// PLSQLPrinter.g:325:18: ( ENABLE_VK | DISABLE_VK )
					int alt58=2;
					int LA58_0 = input.LA(1);
					if ( (LA58_0==ENABLE_VK) ) {
						alt58=1;
					}
					else if ( (LA58_0==DISABLE_VK) ) {
						alt58=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 58, 0, input);
						throw nvae;
					}

					switch (alt58) {
						case 1 :
							// PLSQLPrinter.g:325:19: ENABLE_VK
							{
							match(input,ENABLE_VK,FOLLOW_ENABLE_VK_in_alter_trigger2715); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:325:29: DISABLE_VK
							{
							match(input,DISABLE_VK,FOLLOW_DISABLE_VK_in_alter_trigger2717); 
							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:326:18: ^( RENAME_VK trigger_name )
					{
					match(input,RENAME_VK,FOLLOW_RENAME_VK_in_alter_trigger2738); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_trigger_name_in_alter_trigger2740);
					trigger_name();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:327:18: ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )*
					{
					// PLSQLPrinter.g:327:18: ( DEBUG_VK )?
					int alt59=2;
					int LA59_0 = input.LA(1);
					if ( (LA59_0==DEBUG_VK) ) {
						alt59=1;
					}
					switch (alt59) {
						case 1 :
							// PLSQLPrinter.g:327:18: DEBUG_VK
							{
							match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_trigger2760); 
							}
							break;

					}

					// PLSQLPrinter.g:327:28: ( REUSE_VK )?
					int alt60=2;
					int LA60_0 = input.LA(1);
					if ( (LA60_0==REUSE_VK) ) {
						alt60=1;
					}
					switch (alt60) {
						case 1 :
							// PLSQLPrinter.g:327:28: REUSE_VK
							{
							match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_trigger2763); 
							}
							break;

					}

					// PLSQLPrinter.g:327:38: ( compiler_parameters_clause )*
					loop61:
					while (true) {
						int alt61=2;
						int LA61_0 = input.LA(1);
						if ( (LA61_0==COMPILER_PARAMETER) ) {
							alt61=1;
						}

						switch (alt61) {
						case 1 :
							// PLSQLPrinter.g:327:38: compiler_parameters_clause
							{
							pushFollow(FOLLOW_compiler_parameters_clause_in_alter_trigger2766);
							compiler_parameters_clause();
							state._fsp--;

							}
							break;

						default :
							break loop61;
						}
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 330:5: -> template( \"not implemented: alter_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_trigger"


	public static class create_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_trigger"
	// PLSQLPrinter.g:333:1: create_trigger : ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body ) -> template( \"not implemented: create_trigger\";
	public final PLSQLPrinter.create_trigger_return create_trigger() throws RecognitionException {
		PLSQLPrinter.create_trigger_return retval = new PLSQLPrinter.create_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:334:5: ( ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body ) -> template( \"not implemented: create_trigger\")
			// PLSQLPrinter.g:334:10: ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body )
			{
			match(input,CREATE_TRIGGER,FOLLOW_CREATE_TRIGGER_in_create_trigger2826); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:334:27: ( REPLACE_VK )?
			int alt63=2;
			int LA63_0 = input.LA(1);
			if ( (LA63_0==REPLACE_VK) ) {
				alt63=1;
			}
			switch (alt63) {
				case 1 :
					// PLSQLPrinter.g:334:27: REPLACE_VK
					{
					match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_trigger2828); 
					}
					break;

			}

			pushFollow(FOLLOW_trigger_name_in_create_trigger2831);
			trigger_name();
			state._fsp--;

			// PLSQLPrinter.g:335:13: ( simple_dml_trigger )?
			int alt64=2;
			int LA64_0 = input.LA(1);
			if ( (LA64_0==SIMPLE_DML) ) {
				alt64=1;
			}
			switch (alt64) {
				case 1 :
					// PLSQLPrinter.g:335:13: simple_dml_trigger
					{
					pushFollow(FOLLOW_simple_dml_trigger_in_create_trigger2847);
					simple_dml_trigger();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:335:33: ( compound_dml_trigger )?
			int alt65=2;
			int LA65_0 = input.LA(1);
			if ( (LA65_0==COMPOUND_DML) ) {
				alt65=1;
			}
			switch (alt65) {
				case 1 :
					// PLSQLPrinter.g:335:33: compound_dml_trigger
					{
					pushFollow(FOLLOW_compound_dml_trigger_in_create_trigger2850);
					compound_dml_trigger();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:335:55: ( non_dml_trigger )?
			int alt66=2;
			int LA66_0 = input.LA(1);
			if ( (LA66_0==NON_DML) ) {
				alt66=1;
			}
			switch (alt66) {
				case 1 :
					// PLSQLPrinter.g:335:55: non_dml_trigger
					{
					pushFollow(FOLLOW_non_dml_trigger_in_create_trigger2853);
					non_dml_trigger();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:336:13: ( trigger_follows_clause )?
			int alt67=2;
			int LA67_0 = input.LA(1);
			if ( (LA67_0==FOLLOWS_VK) ) {
				alt67=1;
			}
			switch (alt67) {
				case 1 :
					// PLSQLPrinter.g:336:13: trigger_follows_clause
					{
					pushFollow(FOLLOW_trigger_follows_clause_in_create_trigger2868);
					trigger_follows_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:336:37: ( ENABLE_VK | DISABLE_VK )?
			int alt68=3;
			int LA68_0 = input.LA(1);
			if ( (LA68_0==ENABLE_VK) ) {
				alt68=1;
			}
			else if ( (LA68_0==DISABLE_VK) ) {
				alt68=2;
			}
			switch (alt68) {
				case 1 :
					// PLSQLPrinter.g:336:38: ENABLE_VK
					{
					match(input,ENABLE_VK,FOLLOW_ENABLE_VK_in_create_trigger2872); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:336:48: DISABLE_VK
					{
					match(input,DISABLE_VK,FOLLOW_DISABLE_VK_in_create_trigger2874); 
					}
					break;

			}

			// PLSQLPrinter.g:336:61: ( trigger_when_clause )?
			int alt69=2;
			int LA69_0 = input.LA(1);
			if ( (LA69_0==SQL92_RESERVED_WHEN) ) {
				alt69=1;
			}
			switch (alt69) {
				case 1 :
					// PLSQLPrinter.g:336:61: trigger_when_clause
					{
					pushFollow(FOLLOW_trigger_when_clause_in_create_trigger2878);
					trigger_when_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_trigger_body_in_create_trigger2881);
			trigger_body();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 337:5: -> template( \"not implemented: create_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: create_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_trigger"


	public static class trigger_follows_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_follows_clause"
	// PLSQLPrinter.g:340:1: trigger_follows_clause : ^( FOLLOWS_VK ( trigger_name )+ ) -> template( \"not implemented: trigger_follows_clause\";
	public final PLSQLPrinter.trigger_follows_clause_return trigger_follows_clause() throws RecognitionException {
		PLSQLPrinter.trigger_follows_clause_return retval = new PLSQLPrinter.trigger_follows_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:341:5: ( ^( FOLLOWS_VK ( trigger_name )+ ) -> template( \"not implemented: trigger_follows_clause\")
			// PLSQLPrinter.g:341:10: ^( FOLLOWS_VK ( trigger_name )+ )
			{
			match(input,FOLLOWS_VK,FOLLOW_FOLLOWS_VK_in_trigger_follows_clause2917); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:341:23: ( trigger_name )+
			int cnt70=0;
			loop70:
			while (true) {
				int alt70=2;
				int LA70_0 = input.LA(1);
				if ( (LA70_0==TRIGGER_NAME) ) {
					alt70=1;
				}

				switch (alt70) {
				case 1 :
					// PLSQLPrinter.g:341:23: trigger_name
					{
					pushFollow(FOLLOW_trigger_name_in_trigger_follows_clause2919);
					trigger_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt70 >= 1 ) break loop70;
					EarlyExitException eee = new EarlyExitException(70, input);
					throw eee;
				}
				cnt70++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 342:5: -> template( \"not implemented: trigger_follows_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: trigger_follows_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_follows_clause"


	public static class trigger_when_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_when_clause"
	// PLSQLPrinter.g:345:1: trigger_when_clause : ^( SQL92_RESERVED_WHEN expression ) -> template( \"not implemented: trigger_when_clause\";
	public final PLSQLPrinter.trigger_when_clause_return trigger_when_clause() throws RecognitionException {
		PLSQLPrinter.trigger_when_clause_return retval = new PLSQLPrinter.trigger_when_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:346:5: ( ^( SQL92_RESERVED_WHEN expression ) -> template( \"not implemented: trigger_when_clause\")
			// PLSQLPrinter.g:346:10: ^( SQL92_RESERVED_WHEN expression )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_trigger_when_clause2956); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_trigger_when_clause2958);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 347:5: -> template( \"not implemented: trigger_when_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: trigger_when_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_when_clause"


	public static class simple_dml_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "simple_dml_trigger"
	// PLSQLPrinter.g:351:1: simple_dml_trigger : ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause ) -> template( \"not implemented: simple_dml_trigger\";
	public final PLSQLPrinter.simple_dml_trigger_return simple_dml_trigger() throws RecognitionException {
		PLSQLPrinter.simple_dml_trigger_return retval = new PLSQLPrinter.simple_dml_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:352:5: ( ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause ) -> template( \"not implemented: simple_dml_trigger\")
			// PLSQLPrinter.g:352:10: ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause )
			{
			match(input,SIMPLE_DML,FOLLOW_SIMPLE_DML_in_simple_dml_trigger2995); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:352:23: ( BEFORE_VK | AFTER_VK | INSTEAD_VK )
			int alt71=3;
			switch ( input.LA(1) ) {
			case BEFORE_VK:
				{
				alt71=1;
				}
				break;
			case AFTER_VK:
				{
				alt71=2;
				}
				break;
			case INSTEAD_VK:
				{
				alt71=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 71, 0, input);
				throw nvae;
			}
			switch (alt71) {
				case 1 :
					// PLSQLPrinter.g:352:24: BEFORE_VK
					{
					match(input,BEFORE_VK,FOLLOW_BEFORE_VK_in_simple_dml_trigger2998); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:352:34: AFTER_VK
					{
					match(input,AFTER_VK,FOLLOW_AFTER_VK_in_simple_dml_trigger3000); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:352:43: INSTEAD_VK
					{
					match(input,INSTEAD_VK,FOLLOW_INSTEAD_VK_in_simple_dml_trigger3002); 
					}
					break;

			}

			// PLSQLPrinter.g:352:55: ( FOR_EACH_ROW )?
			int alt72=2;
			int LA72_0 = input.LA(1);
			if ( (LA72_0==FOR_EACH_ROW) ) {
				alt72=1;
			}
			switch (alt72) {
				case 1 :
					// PLSQLPrinter.g:352:55: FOR_EACH_ROW
					{
					match(input,FOR_EACH_ROW,FOLLOW_FOR_EACH_ROW_in_simple_dml_trigger3005); 
					}
					break;

			}

			// PLSQLPrinter.g:352:69: ( referencing_clause )?
			int alt73=2;
			int LA73_0 = input.LA(1);
			if ( (LA73_0==REFERENCING_VK) ) {
				alt73=1;
			}
			switch (alt73) {
				case 1 :
					// PLSQLPrinter.g:352:69: referencing_clause
					{
					pushFollow(FOLLOW_referencing_clause_in_simple_dml_trigger3008);
					referencing_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_event_clause_in_simple_dml_trigger3011);
			dml_event_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 353:5: -> template( \"not implemented: simple_dml_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: simple_dml_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "simple_dml_trigger"


	public static class compound_dml_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "compound_dml_trigger"
	// PLSQLPrinter.g:356:1: compound_dml_trigger : ^( COMPOUND_DML ( referencing_clause )? dml_event_clause ) -> template( \"not implemented: compound_dml_trigger\";
	public final PLSQLPrinter.compound_dml_trigger_return compound_dml_trigger() throws RecognitionException {
		PLSQLPrinter.compound_dml_trigger_return retval = new PLSQLPrinter.compound_dml_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:357:5: ( ^( COMPOUND_DML ( referencing_clause )? dml_event_clause ) -> template( \"not implemented: compound_dml_trigger\")
			// PLSQLPrinter.g:357:10: ^( COMPOUND_DML ( referencing_clause )? dml_event_clause )
			{
			match(input,COMPOUND_DML,FOLLOW_COMPOUND_DML_in_compound_dml_trigger3047); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:357:25: ( referencing_clause )?
			int alt74=2;
			int LA74_0 = input.LA(1);
			if ( (LA74_0==REFERENCING_VK) ) {
				alt74=1;
			}
			switch (alt74) {
				case 1 :
					// PLSQLPrinter.g:357:25: referencing_clause
					{
					pushFollow(FOLLOW_referencing_clause_in_compound_dml_trigger3049);
					referencing_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_event_clause_in_compound_dml_trigger3052);
			dml_event_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 358:5: -> template( \"not implemented: compound_dml_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: compound_dml_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compound_dml_trigger"


	public static class non_dml_trigger_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "non_dml_trigger"
	// PLSQLPrinter.g:361:1: non_dml_trigger : ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) ) -> template( \"not implemented: non_dml_trigger\";
	public final PLSQLPrinter.non_dml_trigger_return non_dml_trigger() throws RecognitionException {
		PLSQLPrinter.non_dml_trigger_return retval = new PLSQLPrinter.non_dml_trigger_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:362:5: ( ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) ) -> template( \"not implemented: non_dml_trigger\")
			// PLSQLPrinter.g:362:10: ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) )
			{
			match(input,NON_DML,FOLLOW_NON_DML_in_non_dml_trigger3088); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:362:20: ( BEFORE_VK | AFTER_VK )
			int alt75=2;
			int LA75_0 = input.LA(1);
			if ( (LA75_0==BEFORE_VK) ) {
				alt75=1;
			}
			else if ( (LA75_0==AFTER_VK) ) {
				alt75=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 75, 0, input);
				throw nvae;
			}

			switch (alt75) {
				case 1 :
					// PLSQLPrinter.g:362:21: BEFORE_VK
					{
					match(input,BEFORE_VK,FOLLOW_BEFORE_VK_in_non_dml_trigger3091); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:362:31: AFTER_VK
					{
					match(input,AFTER_VK,FOLLOW_AFTER_VK_in_non_dml_trigger3093); 
					}
					break;

			}

			// PLSQLPrinter.g:362:41: ( non_dml_event )+
			int cnt76=0;
			loop76:
			while (true) {
				int alt76=2;
				switch ( input.LA(1) ) {
				case DATABASE_VK:
					{
					int LA76_1 = input.LA(2);
					if ( (LA76_1==SQL92_RESERVED_ALTER||LA76_1==SQL92_RESERVED_CREATE||LA76_1==SQL92_RESERVED_DROP||LA76_1==SQL92_RESERVED_GRANT||LA76_1==SQL92_RESERVED_REVOKE||LA76_1==ANALYZE_VK||LA76_1==ASSOCIATE_VK||LA76_1==AUDIT_VK||LA76_1==COMMENT_VK||LA76_1==DATABASE_VK||(LA76_1 >= DB_ROLE_CHANGE_VK && LA76_1 <= DDL_VK)||LA76_1==DISASSOCIATE_VK||LA76_1==FOLLOWS_VK||(LA76_1 >= LOGOFF_VK && LA76_1 <= LOGON_VK)||LA76_1==NOAUDIT_VK||LA76_1==RENAME_VK||(LA76_1 >= SCHEMA_NAME && LA76_1 <= SCHEMA_VK)||LA76_1==SERVERERROR_VK||LA76_1==SHUTDOWN_VK||LA76_1==STARTUP_VK||LA76_1==SUSPEND_VK||LA76_1==TRUNCATE_VK) ) {
						alt76=1;
					}

					}
					break;
				case SCHEMA_VK:
					{
					int LA76_3 = input.LA(2);
					if ( (LA76_3==SQL92_RESERVED_ALTER||LA76_3==SQL92_RESERVED_CREATE||LA76_3==SQL92_RESERVED_DROP||LA76_3==SQL92_RESERVED_GRANT||LA76_3==SQL92_RESERVED_REVOKE||LA76_3==ANALYZE_VK||LA76_3==ASSOCIATE_VK||LA76_3==AUDIT_VK||LA76_3==COMMENT_VK||LA76_3==DATABASE_VK||(LA76_3 >= DB_ROLE_CHANGE_VK && LA76_3 <= DDL_VK)||LA76_3==DISASSOCIATE_VK||LA76_3==FOLLOWS_VK||(LA76_3 >= LOGOFF_VK && LA76_3 <= LOGON_VK)||LA76_3==NOAUDIT_VK||LA76_3==RENAME_VK||(LA76_3 >= SCHEMA_NAME && LA76_3 <= SCHEMA_VK)||LA76_3==SERVERERROR_VK||LA76_3==SHUTDOWN_VK||LA76_3==STARTUP_VK||LA76_3==SUSPEND_VK||LA76_3==TRUNCATE_VK) ) {
						alt76=1;
					}

					}
					break;
				case SQL92_RESERVED_ALTER:
				case SQL92_RESERVED_CREATE:
				case SQL92_RESERVED_DROP:
				case SQL92_RESERVED_GRANT:
				case SQL92_RESERVED_REVOKE:
				case ANALYZE_VK:
				case ASSOCIATE_VK:
				case AUDIT_VK:
				case COMMENT_VK:
				case DB_ROLE_CHANGE_VK:
				case DDL_VK:
				case DISASSOCIATE_VK:
				case FOLLOWS_VK:
				case LOGOFF_VK:
				case LOGON_VK:
				case NOAUDIT_VK:
				case RENAME_VK:
				case SERVERERROR_VK:
				case SHUTDOWN_VK:
				case STARTUP_VK:
				case SUSPEND_VK:
				case TRUNCATE_VK:
					{
					alt76=1;
					}
					break;
				}
				switch (alt76) {
				case 1 :
					// PLSQLPrinter.g:362:41: non_dml_event
					{
					pushFollow(FOLLOW_non_dml_event_in_non_dml_trigger3096);
					non_dml_event();
					state._fsp--;

					}
					break;

				default :
					if ( cnt76 >= 1 ) break loop76;
					EarlyExitException eee = new EarlyExitException(76, input);
					throw eee;
				}
				cnt76++;
			}

			// PLSQLPrinter.g:362:56: ( DATABASE_VK | ( schema_name )? SCHEMA_VK )
			int alt78=2;
			int LA78_0 = input.LA(1);
			if ( (LA78_0==DATABASE_VK) ) {
				alt78=1;
			}
			else if ( ((LA78_0 >= SCHEMA_NAME && LA78_0 <= SCHEMA_VK)) ) {
				alt78=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 78, 0, input);
				throw nvae;
			}

			switch (alt78) {
				case 1 :
					// PLSQLPrinter.g:362:57: DATABASE_VK
					{
					match(input,DATABASE_VK,FOLLOW_DATABASE_VK_in_non_dml_trigger3100); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:362:69: ( schema_name )? SCHEMA_VK
					{
					// PLSQLPrinter.g:362:69: ( schema_name )?
					int alt77=2;
					int LA77_0 = input.LA(1);
					if ( (LA77_0==SCHEMA_NAME) ) {
						alt77=1;
					}
					switch (alt77) {
						case 1 :
							// PLSQLPrinter.g:362:69: schema_name
							{
							pushFollow(FOLLOW_schema_name_in_non_dml_trigger3102);
							schema_name();
							state._fsp--;

							}
							break;

					}

					match(input,SCHEMA_VK,FOLLOW_SCHEMA_VK_in_non_dml_trigger3105); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 363:5: -> template( \"not implemented: non_dml_trigger\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: non_dml_trigger");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "non_dml_trigger"


	public static class trigger_body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_body"
	// PLSQLPrinter.g:366:1: trigger_body : ( ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ ) -> template( \"not implemented: trigger_body\"| ^( CALL_VK routine_name ( function_argument )? ) -> template( \"not implemented: trigger_body\"| ^( BODY_MODE block ) -> template( \"not implemented: trigger_body\");
	public final PLSQLPrinter.trigger_body_return trigger_body() throws RecognitionException {
		PLSQLPrinter.trigger_body_return retval = new PLSQLPrinter.trigger_body_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:367:5: ( ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ ) -> template( \"not implemented: trigger_body\"| ^( CALL_VK routine_name ( function_argument )? ) -> template( \"not implemented: trigger_body\"| ^( BODY_MODE block ) -> template( \"not implemented: trigger_body\")
			int alt82=3;
			switch ( input.LA(1) ) {
			case COMPOUND_VK:
				{
				alt82=1;
				}
				break;
			case CALL_VK:
				{
				alt82=2;
				}
				break;
			case BODY_MODE:
				{
				alt82=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 82, 0, input);
				throw nvae;
			}
			switch (alt82) {
				case 1 :
					// PLSQLPrinter.g:367:10: ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ )
					{
					match(input,COMPOUND_VK,FOLLOW_COMPOUND_VK_in_trigger_body3142); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_trigger_name_in_trigger_body3144);
					trigger_name();
					state._fsp--;

					// PLSQLPrinter.g:367:37: ( declare_spec )*
					loop79:
					while (true) {
						int alt79=2;
						int LA79_0 = input.LA(1);
						if ( (LA79_0==CREATE_FUNCTION||LA79_0==CREATE_PROCEDURE||(LA79_0 >= CREATE_TYPE_BODY && LA79_0 <= CREATE_TYPE_SPEC)||LA79_0==CURSOR_DECLARE||LA79_0==EXCEPTION_DECLARE||LA79_0==PRAGMA_DECLARE||(LA79_0 >= RECORD_TYPE_DECLARE_FIELDS && LA79_0 <= RECORD_VAR_DECLARE)||LA79_0==SUBTYPE_DECLARE||(LA79_0 >= TABLE_TYPE_DECLARE && LA79_0 <= TABLE_VAR_DECLARE)||LA79_0==VARIABLE_DECLARE) ) {
							alt79=1;
						}

						switch (alt79) {
						case 1 :
							// PLSQLPrinter.g:367:37: declare_spec
							{
							pushFollow(FOLLOW_declare_spec_in_trigger_body3146);
							declare_spec();
							state._fsp--;

							}
							break;

						default :
							break loop79;
						}
					}

					// PLSQLPrinter.g:367:51: ( timing_point_section )+
					int cnt80=0;
					loop80:
					while (true) {
						int alt80=2;
						int LA80_0 = input.LA(1);
						if ( ((LA80_0 >= AFTER_EACH_ROW && LA80_0 <= AFTER_STATEMENT)||(LA80_0 >= BEFORE_EACH_ROW && LA80_0 <= BEFORE_STATEMENT)) ) {
							alt80=1;
						}

						switch (alt80) {
						case 1 :
							// PLSQLPrinter.g:367:51: timing_point_section
							{
							pushFollow(FOLLOW_timing_point_section_in_trigger_body3149);
							timing_point_section();
							state._fsp--;

							}
							break;

						default :
							if ( cnt80 >= 1 ) break loop80;
							EarlyExitException eee = new EarlyExitException(80, input);
							throw eee;
						}
						cnt80++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 368:5: -> template( \"not implemented: trigger_body\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: trigger_body");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:369:10: ^( CALL_VK routine_name ( function_argument )? )
					{
					match(input,CALL_VK,FOLLOW_CALL_VK_in_trigger_body3177); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_routine_name_in_trigger_body3179);
					routine_name();
					state._fsp--;

					// PLSQLPrinter.g:369:33: ( function_argument )?
					int alt81=2;
					int LA81_0 = input.LA(1);
					if ( (LA81_0==ARGUMENTS) ) {
						alt81=1;
					}
					switch (alt81) {
						case 1 :
							// PLSQLPrinter.g:369:33: function_argument
							{
							pushFollow(FOLLOW_function_argument_in_trigger_body3181);
							function_argument();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 370:5: -> template( \"not implemented: trigger_body\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: trigger_body");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:371:10: ^( BODY_MODE block )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_trigger_body3210); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_trigger_body3212);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 372:5: -> template( \"not implemented: trigger_body\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: trigger_body");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_body"


	public static class timing_point_section_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "timing_point_section"
	// PLSQLPrinter.g:375:1: timing_point_section : ( ^( BEFORE_STATEMENT block ) -> template( \"not implemented: timing_point_section\"| ^( BEFORE_EACH_ROW block ) -> template( \"not implemented: timing_point_section\"| ^( AFTER_STATEMENT block ) -> template( \"not implemented: timing_point_section\"| ^( AFTER_EACH_ROW block ) -> template( \"not implemented: timing_point_section\");
	public final PLSQLPrinter.timing_point_section_return timing_point_section() throws RecognitionException {
		PLSQLPrinter.timing_point_section_return retval = new PLSQLPrinter.timing_point_section_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:376:5: ( ^( BEFORE_STATEMENT block ) -> template( \"not implemented: timing_point_section\"| ^( BEFORE_EACH_ROW block ) -> template( \"not implemented: timing_point_section\"| ^( AFTER_STATEMENT block ) -> template( \"not implemented: timing_point_section\"| ^( AFTER_EACH_ROW block ) -> template( \"not implemented: timing_point_section\")
			int alt83=4;
			switch ( input.LA(1) ) {
			case BEFORE_STATEMENT:
				{
				alt83=1;
				}
				break;
			case BEFORE_EACH_ROW:
				{
				alt83=2;
				}
				break;
			case AFTER_STATEMENT:
				{
				alt83=3;
				}
				break;
			case AFTER_EACH_ROW:
				{
				alt83=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 83, 0, input);
				throw nvae;
			}
			switch (alt83) {
				case 1 :
					// PLSQLPrinter.g:376:10: ^( BEFORE_STATEMENT block )
					{
					match(input,BEFORE_STATEMENT,FOLLOW_BEFORE_STATEMENT_in_timing_point_section3248); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section3250);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 377:5: -> template( \"not implemented: timing_point_section\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: timing_point_section");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:378:10: ^( BEFORE_EACH_ROW block )
					{
					match(input,BEFORE_EACH_ROW,FOLLOW_BEFORE_EACH_ROW_in_timing_point_section3277); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section3279);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 379:5: -> template( \"not implemented: timing_point_section\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: timing_point_section");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:380:10: ^( AFTER_STATEMENT block )
					{
					match(input,AFTER_STATEMENT,FOLLOW_AFTER_STATEMENT_in_timing_point_section3306); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section3308);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 381:5: -> template( \"not implemented: timing_point_section\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: timing_point_section");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:382:10: ^( AFTER_EACH_ROW block )
					{
					match(input,AFTER_EACH_ROW,FOLLOW_AFTER_EACH_ROW_in_timing_point_section3335); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section3337);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 383:5: -> template( \"not implemented: timing_point_section\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: timing_point_section");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "timing_point_section"


	public static class non_dml_event_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "non_dml_event"
	// PLSQLPrinter.g:386:1: non_dml_event : ( SQL92_RESERVED_ALTER -> template( \"not implemented: non_dml_event\"| ANALYZE_VK -> template( \"not implemented: non_dml_event\"| ASSOCIATE_VK STATISTICS_VK -> template( \"not implemented: non_dml_event\"| AUDIT_VK -> template( \"not implemented: non_dml_event\"| COMMENT_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_CREATE -> template( \"not implemented: non_dml_event\"| DISASSOCIATE_VK STATISTICS_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_DROP -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_GRANT -> template( \"not implemented: non_dml_event\"| NOAUDIT_VK -> template( \"not implemented: non_dml_event\"| RENAME_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_REVOKE -> template( \"not implemented: non_dml_event\"| TRUNCATE_VK -> template( \"not implemented: non_dml_event\"| DDL_VK -> template( \"not implemented: non_dml_event\"| STARTUP_VK -> template( \"not implemented: non_dml_event\"| SHUTDOWN_VK -> template( \"not implemented: non_dml_event\"| DB_ROLE_CHANGE_VK -> template( \"not implemented: non_dml_event\"| LOGON_VK -> template( \"not implemented: non_dml_event\"| LOGOFF_VK -> template( \"not implemented: non_dml_event\"| SERVERERROR_VK -> template( \"not implemented: non_dml_event\"| SUSPEND_VK -> template( \"not implemented: non_dml_event\"| DATABASE_VK -> template( \"not implemented: non_dml_event\"| SCHEMA_VK -> template( \"not implemented: non_dml_event\"| FOLLOWS_VK -> template( \"not implemented: non_dml_event\");
	public final PLSQLPrinter.non_dml_event_return non_dml_event() throws RecognitionException {
		PLSQLPrinter.non_dml_event_return retval = new PLSQLPrinter.non_dml_event_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:387:5: ( SQL92_RESERVED_ALTER -> template( \"not implemented: non_dml_event\"| ANALYZE_VK -> template( \"not implemented: non_dml_event\"| ASSOCIATE_VK STATISTICS_VK -> template( \"not implemented: non_dml_event\"| AUDIT_VK -> template( \"not implemented: non_dml_event\"| COMMENT_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_CREATE -> template( \"not implemented: non_dml_event\"| DISASSOCIATE_VK STATISTICS_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_DROP -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_GRANT -> template( \"not implemented: non_dml_event\"| NOAUDIT_VK -> template( \"not implemented: non_dml_event\"| RENAME_VK -> template( \"not implemented: non_dml_event\"| SQL92_RESERVED_REVOKE -> template( \"not implemented: non_dml_event\"| TRUNCATE_VK -> template( \"not implemented: non_dml_event\"| DDL_VK -> template( \"not implemented: non_dml_event\"| STARTUP_VK -> template( \"not implemented: non_dml_event\"| SHUTDOWN_VK -> template( \"not implemented: non_dml_event\"| DB_ROLE_CHANGE_VK -> template( \"not implemented: non_dml_event\"| LOGON_VK -> template( \"not implemented: non_dml_event\"| LOGOFF_VK -> template( \"not implemented: non_dml_event\"| SERVERERROR_VK -> template( \"not implemented: non_dml_event\"| SUSPEND_VK -> template( \"not implemented: non_dml_event\"| DATABASE_VK -> template( \"not implemented: non_dml_event\"| SCHEMA_VK -> template( \"not implemented: non_dml_event\"| FOLLOWS_VK -> template( \"not implemented: non_dml_event\")
			int alt84=24;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ALTER:
				{
				alt84=1;
				}
				break;
			case ANALYZE_VK:
				{
				alt84=2;
				}
				break;
			case ASSOCIATE_VK:
				{
				alt84=3;
				}
				break;
			case AUDIT_VK:
				{
				alt84=4;
				}
				break;
			case COMMENT_VK:
				{
				alt84=5;
				}
				break;
			case SQL92_RESERVED_CREATE:
				{
				alt84=6;
				}
				break;
			case DISASSOCIATE_VK:
				{
				alt84=7;
				}
				break;
			case SQL92_RESERVED_DROP:
				{
				alt84=8;
				}
				break;
			case SQL92_RESERVED_GRANT:
				{
				alt84=9;
				}
				break;
			case NOAUDIT_VK:
				{
				alt84=10;
				}
				break;
			case RENAME_VK:
				{
				alt84=11;
				}
				break;
			case SQL92_RESERVED_REVOKE:
				{
				alt84=12;
				}
				break;
			case TRUNCATE_VK:
				{
				alt84=13;
				}
				break;
			case DDL_VK:
				{
				alt84=14;
				}
				break;
			case STARTUP_VK:
				{
				alt84=15;
				}
				break;
			case SHUTDOWN_VK:
				{
				alt84=16;
				}
				break;
			case DB_ROLE_CHANGE_VK:
				{
				alt84=17;
				}
				break;
			case LOGON_VK:
				{
				alt84=18;
				}
				break;
			case LOGOFF_VK:
				{
				alt84=19;
				}
				break;
			case SERVERERROR_VK:
				{
				alt84=20;
				}
				break;
			case SUSPEND_VK:
				{
				alt84=21;
				}
				break;
			case DATABASE_VK:
				{
				alt84=22;
				}
				break;
			case SCHEMA_VK:
				{
				alt84=23;
				}
				break;
			case FOLLOWS_VK:
				{
				alt84=24;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 84, 0, input);
				throw nvae;
			}
			switch (alt84) {
				case 1 :
					// PLSQLPrinter.g:387:10: SQL92_RESERVED_ALTER
					{
					match(input,SQL92_RESERVED_ALTER,FOLLOW_SQL92_RESERVED_ALTER_in_non_dml_event3372); 
					// TEMPLATE REWRITE
					// 388:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:389:10: ANALYZE_VK
					{
					match(input,ANALYZE_VK,FOLLOW_ANALYZE_VK_in_non_dml_event3397); 
					// TEMPLATE REWRITE
					// 390:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:391:10: ASSOCIATE_VK STATISTICS_VK
					{
					match(input,ASSOCIATE_VK,FOLLOW_ASSOCIATE_VK_in_non_dml_event3422); 
					match(input,STATISTICS_VK,FOLLOW_STATISTICS_VK_in_non_dml_event3424); 
					// TEMPLATE REWRITE
					// 392:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:393:10: AUDIT_VK
					{
					match(input,AUDIT_VK,FOLLOW_AUDIT_VK_in_non_dml_event3449); 
					// TEMPLATE REWRITE
					// 394:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:395:10: COMMENT_VK
					{
					match(input,COMMENT_VK,FOLLOW_COMMENT_VK_in_non_dml_event3474); 
					// TEMPLATE REWRITE
					// 396:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:397:10: SQL92_RESERVED_CREATE
					{
					match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_non_dml_event3499); 
					// TEMPLATE REWRITE
					// 398:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:399:10: DISASSOCIATE_VK STATISTICS_VK
					{
					match(input,DISASSOCIATE_VK,FOLLOW_DISASSOCIATE_VK_in_non_dml_event3524); 
					match(input,STATISTICS_VK,FOLLOW_STATISTICS_VK_in_non_dml_event3526); 
					// TEMPLATE REWRITE
					// 400:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:401:10: SQL92_RESERVED_DROP
					{
					match(input,SQL92_RESERVED_DROP,FOLLOW_SQL92_RESERVED_DROP_in_non_dml_event3551); 
					// TEMPLATE REWRITE
					// 402:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:403:10: SQL92_RESERVED_GRANT
					{
					match(input,SQL92_RESERVED_GRANT,FOLLOW_SQL92_RESERVED_GRANT_in_non_dml_event3576); 
					// TEMPLATE REWRITE
					// 404:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:405:10: NOAUDIT_VK
					{
					match(input,NOAUDIT_VK,FOLLOW_NOAUDIT_VK_in_non_dml_event3601); 
					// TEMPLATE REWRITE
					// 406:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:407:10: RENAME_VK
					{
					match(input,RENAME_VK,FOLLOW_RENAME_VK_in_non_dml_event3626); 
					// TEMPLATE REWRITE
					// 408:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:409:10: SQL92_RESERVED_REVOKE
					{
					match(input,SQL92_RESERVED_REVOKE,FOLLOW_SQL92_RESERVED_REVOKE_in_non_dml_event3651); 
					// TEMPLATE REWRITE
					// 410:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:411:10: TRUNCATE_VK
					{
					match(input,TRUNCATE_VK,FOLLOW_TRUNCATE_VK_in_non_dml_event3676); 
					// TEMPLATE REWRITE
					// 412:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:413:10: DDL_VK
					{
					match(input,DDL_VK,FOLLOW_DDL_VK_in_non_dml_event3701); 
					// TEMPLATE REWRITE
					// 414:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:415:10: STARTUP_VK
					{
					match(input,STARTUP_VK,FOLLOW_STARTUP_VK_in_non_dml_event3726); 
					// TEMPLATE REWRITE
					// 416:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:417:10: SHUTDOWN_VK
					{
					match(input,SHUTDOWN_VK,FOLLOW_SHUTDOWN_VK_in_non_dml_event3751); 
					// TEMPLATE REWRITE
					// 418:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:419:10: DB_ROLE_CHANGE_VK
					{
					match(input,DB_ROLE_CHANGE_VK,FOLLOW_DB_ROLE_CHANGE_VK_in_non_dml_event3776); 
					// TEMPLATE REWRITE
					// 420:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:421:10: LOGON_VK
					{
					match(input,LOGON_VK,FOLLOW_LOGON_VK_in_non_dml_event3801); 
					// TEMPLATE REWRITE
					// 422:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 19 :
					// PLSQLPrinter.g:423:10: LOGOFF_VK
					{
					match(input,LOGOFF_VK,FOLLOW_LOGOFF_VK_in_non_dml_event3826); 
					// TEMPLATE REWRITE
					// 424:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 20 :
					// PLSQLPrinter.g:425:10: SERVERERROR_VK
					{
					match(input,SERVERERROR_VK,FOLLOW_SERVERERROR_VK_in_non_dml_event3851); 
					// TEMPLATE REWRITE
					// 426:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 21 :
					// PLSQLPrinter.g:427:10: SUSPEND_VK
					{
					match(input,SUSPEND_VK,FOLLOW_SUSPEND_VK_in_non_dml_event3876); 
					// TEMPLATE REWRITE
					// 428:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 22 :
					// PLSQLPrinter.g:429:10: DATABASE_VK
					{
					match(input,DATABASE_VK,FOLLOW_DATABASE_VK_in_non_dml_event3901); 
					// TEMPLATE REWRITE
					// 430:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 23 :
					// PLSQLPrinter.g:431:10: SCHEMA_VK
					{
					match(input,SCHEMA_VK,FOLLOW_SCHEMA_VK_in_non_dml_event3926); 
					// TEMPLATE REWRITE
					// 432:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;
				case 24 :
					// PLSQLPrinter.g:433:10: FOLLOWS_VK
					{
					match(input,FOLLOWS_VK,FOLLOW_FOLLOWS_VK_in_non_dml_event3951); 
					// TEMPLATE REWRITE
					// 434:5: -> template( \"not implemented: non_dml_event\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: non_dml_event");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "non_dml_event"


	public static class dml_event_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_event_clause"
	// PLSQLPrinter.g:437:1: dml_event_clause : ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) ) -> template( \"not implemented: dml_event_clause\";
	public final PLSQLPrinter.dml_event_clause_return dml_event_clause() throws RecognitionException {
		PLSQLPrinter.dml_event_clause_return retval = new PLSQLPrinter.dml_event_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:438:5: ( ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) ) -> template( \"not implemented: dml_event_clause\")
			// PLSQLPrinter.g:438:10: ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) )
			{
			match(input,DML_EVENT,FOLLOW_DML_EVENT_in_dml_event_clause3986); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:438:22: ( dml_event_element )+
			int cnt85=0;
			loop85:
			while (true) {
				int alt85=2;
				int LA85_0 = input.LA(1);
				if ( (LA85_0==DML_EVENT_ELEMENT) ) {
					alt85=1;
				}

				switch (alt85) {
				case 1 :
					// PLSQLPrinter.g:438:22: dml_event_element
					{
					pushFollow(FOLLOW_dml_event_element_in_dml_event_clause3988);
					dml_event_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt85 >= 1 ) break loop85;
					EarlyExitException eee = new EarlyExitException(85, input);
					throw eee;
				}
				cnt85++;
			}

			match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_dml_event_clause3992); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_dml_event_clause3994);
			tableview_name();
			state._fsp--;

			// PLSQLPrinter.g:438:76: ( dml_event_nested_clause )?
			int alt86=2;
			int LA86_0 = input.LA(1);
			if ( (LA86_0==NESTED_VK) ) {
				alt86=1;
			}
			switch (alt86) {
				case 1 :
					// PLSQLPrinter.g:438:76: dml_event_nested_clause
					{
					pushFollow(FOLLOW_dml_event_nested_clause_in_dml_event_clause3996);
					dml_event_nested_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 439:5: -> template( \"not implemented: dml_event_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dml_event_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_event_clause"


	public static class dml_event_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_event_element"
	// PLSQLPrinter.g:442:1: dml_event_element : ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) ) -> template( \"not implemented: dml_event_element\";
	public final PLSQLPrinter.dml_event_element_return dml_event_element() throws RecognitionException {
		PLSQLPrinter.dml_event_element_return retval = new PLSQLPrinter.dml_event_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:443:5: ( ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) ) -> template( \"not implemented: dml_event_element\")
			// PLSQLPrinter.g:443:10: ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) )
			{
			match(input,DML_EVENT_ELEMENT,FOLLOW_DML_EVENT_ELEMENT_in_dml_event_element4036); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:443:30: ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE )
			int alt87=3;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_DELETE:
				{
				alt87=1;
				}
				break;
			case SQL92_RESERVED_INSERT:
				{
				alt87=2;
				}
				break;
			case SQL92_RESERVED_UPDATE:
				{
				alt87=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 87, 0, input);
				throw nvae;
			}
			switch (alt87) {
				case 1 :
					// PLSQLPrinter.g:443:31: SQL92_RESERVED_DELETE
					{
					match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_dml_event_element4039); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:443:53: SQL92_RESERVED_INSERT
					{
					match(input,SQL92_RESERVED_INSERT,FOLLOW_SQL92_RESERVED_INSERT_in_dml_event_element4041); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:443:75: SQL92_RESERVED_UPDATE
					{
					match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_dml_event_element4043); 
					}
					break;

			}

			match(input,COLUMNS,FOLLOW_COLUMNS_in_dml_event_element4047); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:443:108: ( column_name )*
				loop88:
				while (true) {
					int alt88=2;
					int LA88_0 = input.LA(1);
					if ( (LA88_0==COLUMN_NAME) ) {
						alt88=1;
					}

					switch (alt88) {
					case 1 :
						// PLSQLPrinter.g:443:108: column_name
						{
						pushFollow(FOLLOW_column_name_in_dml_event_element4049);
						column_name();
						state._fsp--;

						}
						break;

					default :
						break loop88;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 444:5: -> template( \"not implemented: dml_event_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dml_event_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_event_element"


	public static class dml_event_nested_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_event_nested_clause"
	// PLSQLPrinter.g:447:1: dml_event_nested_clause : ^( NESTED_VK tableview_name ) -> template( \"not implemented: dml_event_nested_clause\";
	public final PLSQLPrinter.dml_event_nested_clause_return dml_event_nested_clause() throws RecognitionException {
		PLSQLPrinter.dml_event_nested_clause_return retval = new PLSQLPrinter.dml_event_nested_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:448:5: ( ^( NESTED_VK tableview_name ) -> template( \"not implemented: dml_event_nested_clause\")
			// PLSQLPrinter.g:448:10: ^( NESTED_VK tableview_name )
			{
			match(input,NESTED_VK,FOLLOW_NESTED_VK_in_dml_event_nested_clause4087); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_dml_event_nested_clause4089);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 449:5: -> template( \"not implemented: dml_event_nested_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dml_event_nested_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_event_nested_clause"


	public static class referencing_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "referencing_clause"
	// PLSQLPrinter.g:452:1: referencing_clause : ^( REFERENCING_VK ( referencing_element )+ ) -> template( \"not implemented: referencing_clause\";
	public final PLSQLPrinter.referencing_clause_return referencing_clause() throws RecognitionException {
		PLSQLPrinter.referencing_clause_return retval = new PLSQLPrinter.referencing_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:453:5: ( ^( REFERENCING_VK ( referencing_element )+ ) -> template( \"not implemented: referencing_clause\")
			// PLSQLPrinter.g:453:10: ^( REFERENCING_VK ( referencing_element )+ )
			{
			match(input,REFERENCING_VK,FOLLOW_REFERENCING_VK_in_referencing_clause4125); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:453:27: ( referencing_element )+
			int cnt89=0;
			loop89:
			while (true) {
				int alt89=2;
				int LA89_0 = input.LA(1);
				if ( (LA89_0==NEW_VK||LA89_0==OLD_VK||LA89_0==PARENT_VK) ) {
					alt89=1;
				}

				switch (alt89) {
				case 1 :
					// PLSQLPrinter.g:453:27: referencing_element
					{
					pushFollow(FOLLOW_referencing_element_in_referencing_clause4127);
					referencing_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt89 >= 1 ) break loop89;
					EarlyExitException eee = new EarlyExitException(89, input);
					throw eee;
				}
				cnt89++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 454:5: -> template( \"not implemented: referencing_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: referencing_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "referencing_clause"


	public static class referencing_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "referencing_element"
	// PLSQLPrinter.g:457:1: referencing_element : ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias ) -> template( \"not implemented: referencing_element\";
	public final PLSQLPrinter.referencing_element_return referencing_element() throws RecognitionException {
		PLSQLPrinter.referencing_element_return retval = new PLSQLPrinter.referencing_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:458:5: ( ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias ) -> template( \"not implemented: referencing_element\")
			// PLSQLPrinter.g:458:10: ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias )
			{
			// PLSQLPrinter.g:458:12: ( NEW_VK | OLD_VK | PARENT_VK )
			int alt90=3;
			switch ( input.LA(1) ) {
			case NEW_VK:
				{
				alt90=1;
				}
				break;
			case OLD_VK:
				{
				alt90=2;
				}
				break;
			case PARENT_VK:
				{
				alt90=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 90, 0, input);
				throw nvae;
			}
			switch (alt90) {
				case 1 :
					// PLSQLPrinter.g:458:13: NEW_VK
					{
					match(input,NEW_VK,FOLLOW_NEW_VK_in_referencing_element4165); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:458:20: OLD_VK
					{
					match(input,OLD_VK,FOLLOW_OLD_VK_in_referencing_element4167); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:458:27: PARENT_VK
					{
					match(input,PARENT_VK,FOLLOW_PARENT_VK_in_referencing_element4169); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_alias_in_referencing_element4172);
			alias();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 459:5: -> template( \"not implemented: referencing_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: referencing_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "referencing_element"


	public static class drop_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_type"
	// PLSQLPrinter.g:467:1: drop_type : ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? ) -> template( \"not implemented: drop_type\";
	public final PLSQLPrinter.drop_type_return drop_type() throws RecognitionException {
		PLSQLPrinter.drop_type_return retval = new PLSQLPrinter.drop_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:468:5: ( ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? ) -> template( \"not implemented: drop_type\")
			// PLSQLPrinter.g:468:10: ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? )
			{
			match(input,DROP_TYPE,FOLLOW_DROP_TYPE_in_drop_type4213); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_drop_type4215);
			type_name();
			state._fsp--;

			// PLSQLPrinter.g:468:32: ( BODY_VK )?
			int alt91=2;
			int LA91_0 = input.LA(1);
			if ( (LA91_0==BODY_VK) ) {
				alt91=1;
			}
			switch (alt91) {
				case 1 :
					// PLSQLPrinter.g:468:32: BODY_VK
					{
					match(input,BODY_VK,FOLLOW_BODY_VK_in_drop_type4217); 
					}
					break;

			}

			// PLSQLPrinter.g:468:41: ( FORCE_VK )?
			int alt92=2;
			int LA92_0 = input.LA(1);
			if ( (LA92_0==FORCE_VK) ) {
				alt92=1;
			}
			switch (alt92) {
				case 1 :
					// PLSQLPrinter.g:468:41: FORCE_VK
					{
					match(input,FORCE_VK,FOLLOW_FORCE_VK_in_drop_type4220); 
					}
					break;

			}

			// PLSQLPrinter.g:468:51: ( VALIDATE_VK )?
			int alt93=2;
			int LA93_0 = input.LA(1);
			if ( (LA93_0==VALIDATE_VK) ) {
				alt93=1;
			}
			switch (alt93) {
				case 1 :
					// PLSQLPrinter.g:468:51: VALIDATE_VK
					{
					match(input,VALIDATE_VK,FOLLOW_VALIDATE_VK_in_drop_type4223); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 469:5: -> template( \"not implemented: drop_type\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_type");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_type"


	public static class alter_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_type"
	// PLSQLPrinter.g:472:1: alter_type : ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? ) -> template( \"not implemented: alter_type\";
	public final PLSQLPrinter.alter_type_return alter_type() throws RecognitionException {
		PLSQLPrinter.alter_type_return retval = new PLSQLPrinter.alter_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:473:5: ( ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? ) -> template( \"not implemented: alter_type\")
			// PLSQLPrinter.g:473:10: ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? )
			{
			match(input,ALTER_TYPE,FOLLOW_ALTER_TYPE_in_alter_type4260); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_alter_type4262);
			type_name();
			state._fsp--;

			// PLSQLPrinter.g:474:13: ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
			int alt103=6;
			switch ( input.LA(1) ) {
			case REPLACE_VK:
				{
				alt103=1;
				}
				break;
			case ALTER_ATTRIBUTE:
				{
				alt103=2;
				}
				break;
			case ALTER_METHOD:
				{
				alt103=3;
				}
				break;
			case ALTER_COLLECTION:
				{
				alt103=4;
				}
				break;
			case MODIFIER:
				{
				alt103=5;
				}
				break;
			case COMPILE_VK:
				{
				alt103=6;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 103, 0, input);
				throw nvae;
			}
			switch (alt103) {
				case 1 :
					// PLSQLPrinter.g:474:18: ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? )
					{
					match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_alter_type4283); 
					match(input, Token.DOWN, null); 
					match(input,OBJECT_MEMBERS,FOLLOW_OBJECT_MEMBERS_in_alter_type4286); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:474:48: ( element_spec )+
					int cnt94=0;
					loop94:
					while (true) {
						int alt94=2;
						int LA94_0 = input.LA(1);
						if ( (LA94_0==ELEMENT_SPEC) ) {
							alt94=1;
						}

						switch (alt94) {
						case 1 :
							// PLSQLPrinter.g:474:48: element_spec
							{
							pushFollow(FOLLOW_element_spec_in_alter_type4288);
							element_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt94 >= 1 ) break loop94;
							EarlyExitException eee = new EarlyExitException(94, input);
							throw eee;
						}
						cnt94++;
					}

					match(input, Token.UP, null); 

					// PLSQLPrinter.g:474:63: ( invoker_rights_clause )?
					int alt95=2;
					int LA95_0 = input.LA(1);
					if ( (LA95_0==AUTHID_VK) ) {
						alt95=1;
					}
					switch (alt95) {
						case 1 :
							// PLSQLPrinter.g:474:63: invoker_rights_clause
							{
							pushFollow(FOLLOW_invoker_rights_clause_in_alter_type4292);
							invoker_rights_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:475:18: ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) )
					{
					match(input,ALTER_ATTRIBUTE,FOLLOW_ALTER_ATTRIBUTE_in_alter_type4314); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:475:36: ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP )
					int alt96=3;
					switch ( input.LA(1) ) {
					case ADD_VK:
						{
						alt96=1;
						}
						break;
					case MODIFY_VK:
						{
						alt96=2;
						}
						break;
					case SQL92_RESERVED_DROP:
						{
						alt96=3;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 96, 0, input);
						throw nvae;
					}
					switch (alt96) {
						case 1 :
							// PLSQLPrinter.g:475:37: ADD_VK
							{
							match(input,ADD_VK,FOLLOW_ADD_VK_in_alter_type4317); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:475:44: MODIFY_VK
							{
							match(input,MODIFY_VK,FOLLOW_MODIFY_VK_in_alter_type4319); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:475:54: SQL92_RESERVED_DROP
							{
							match(input,SQL92_RESERVED_DROP,FOLLOW_SQL92_RESERVED_DROP_in_alter_type4321); 
							}
							break;

					}

					match(input,ATTRIBUTES,FOLLOW_ATTRIBUTES_in_alter_type4325); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:475:88: ( attribute_definition )+
					int cnt97=0;
					loop97:
					while (true) {
						int alt97=2;
						int LA97_0 = input.LA(1);
						if ( (LA97_0==ATTRIBUTE) ) {
							alt97=1;
						}

						switch (alt97) {
						case 1 :
							// PLSQLPrinter.g:475:88: attribute_definition
							{
							pushFollow(FOLLOW_attribute_definition_in_alter_type4327);
							attribute_definition();
							state._fsp--;

							}
							break;

						default :
							if ( cnt97 >= 1 ) break loop97;
							EarlyExitException eee = new EarlyExitException(97, input);
							throw eee;
						}
						cnt97++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:476:18: ^( ALTER_METHOD ( alter_method_element )+ )
					{
					match(input,ALTER_METHOD,FOLLOW_ALTER_METHOD_in_alter_type4350); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:476:33: ( alter_method_element )+
					int cnt98=0;
					loop98:
					while (true) {
						int alt98=2;
						int LA98_0 = input.LA(1);
						if ( (LA98_0==ALTER_METHOD_ELEMENT) ) {
							alt98=1;
						}

						switch (alt98) {
						case 1 :
							// PLSQLPrinter.g:476:33: alter_method_element
							{
							pushFollow(FOLLOW_alter_method_element_in_alter_type4352);
							alter_method_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt98 >= 1 ) break loop98;
							EarlyExitException eee = new EarlyExitException(98, input);
							throw eee;
						}
						cnt98++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// PLSQLPrinter.g:477:18: alter_collection_clauses
					{
					pushFollow(FOLLOW_alter_collection_clauses_in_alter_type4373);
					alter_collection_clauses();
					state._fsp--;

					}
					break;
				case 5 :
					// PLSQLPrinter.g:478:18: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_alter_type4392);
					modifier_clause();
					state._fsp--;

					}
					break;
				case 6 :
					// PLSQLPrinter.g:479:18: ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
					{
					match(input,COMPILE_VK,FOLLOW_COMPILE_VK_in_alter_type4412); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:479:31: ( SPECIFICATION_VK | BODY_VK )?
						int alt99=3;
						int LA99_0 = input.LA(1);
						if ( (LA99_0==SPECIFICATION_VK) ) {
							alt99=1;
						}
						else if ( (LA99_0==BODY_VK) ) {
							alt99=2;
						}
						switch (alt99) {
							case 1 :
								// PLSQLPrinter.g:479:32: SPECIFICATION_VK
								{
								match(input,SPECIFICATION_VK,FOLLOW_SPECIFICATION_VK_in_alter_type4415); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:479:49: BODY_VK
								{
								match(input,BODY_VK,FOLLOW_BODY_VK_in_alter_type4417); 
								}
								break;

						}

						// PLSQLPrinter.g:479:59: ( DEBUG_VK )?
						int alt100=2;
						int LA100_0 = input.LA(1);
						if ( (LA100_0==DEBUG_VK) ) {
							alt100=1;
						}
						switch (alt100) {
							case 1 :
								// PLSQLPrinter.g:479:59: DEBUG_VK
								{
								match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_type4421); 
								}
								break;

						}

						// PLSQLPrinter.g:479:69: ( REUSE_VK )?
						int alt101=2;
						int LA101_0 = input.LA(1);
						if ( (LA101_0==REUSE_VK) ) {
							alt101=1;
						}
						switch (alt101) {
							case 1 :
								// PLSQLPrinter.g:479:69: REUSE_VK
								{
								match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_type4424); 
								}
								break;

						}

						// PLSQLPrinter.g:479:79: ( compiler_parameters_clause )*
						loop102:
						while (true) {
							int alt102=2;
							int LA102_0 = input.LA(1);
							if ( (LA102_0==COMPILER_PARAMETER) ) {
								alt102=1;
							}

							switch (alt102) {
							case 1 :
								// PLSQLPrinter.g:479:79: compiler_parameters_clause
								{
								pushFollow(FOLLOW_compiler_parameters_clause_in_alter_type4427);
								compiler_parameters_clause();
								state._fsp--;

								}
								break;

							default :
								break loop102;
							}
						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}

			// PLSQLPrinter.g:481:13: ( dependent_handling_clause )?
			int alt104=2;
			int LA104_0 = input.LA(1);
			if ( (LA104_0==DEPENDENT_HANDLING) ) {
				alt104=1;
			}
			switch (alt104) {
				case 1 :
					// PLSQLPrinter.g:481:13: dependent_handling_clause
					{
					pushFollow(FOLLOW_dependent_handling_clause_in_alter_type4458);
					dependent_handling_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 483:5: -> template( \"not implemented: alter_type\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_type");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_type"


	public static class alter_method_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_method_element"
	// PLSQLPrinter.g:488:1: alter_method_element : ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? ) -> template( \"not implemented: alter_method_element\";
	public final PLSQLPrinter.alter_method_element_return alter_method_element() throws RecognitionException {
		PLSQLPrinter.alter_method_element_return retval = new PLSQLPrinter.alter_method_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:489:5: ( ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? ) -> template( \"not implemented: alter_method_element\")
			// PLSQLPrinter.g:489:10: ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? )
			{
			match(input,ALTER_METHOD_ELEMENT,FOLLOW_ALTER_METHOD_ELEMENT_in_alter_method_element4506); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:489:33: ( ADD_VK | SQL92_RESERVED_DROP )
			int alt105=2;
			int LA105_0 = input.LA(1);
			if ( (LA105_0==ADD_VK) ) {
				alt105=1;
			}
			else if ( (LA105_0==SQL92_RESERVED_DROP) ) {
				alt105=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 105, 0, input);
				throw nvae;
			}

			switch (alt105) {
				case 1 :
					// PLSQLPrinter.g:489:34: ADD_VK
					{
					match(input,ADD_VK,FOLLOW_ADD_VK_in_alter_method_element4509); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:489:41: SQL92_RESERVED_DROP
					{
					match(input,SQL92_RESERVED_DROP,FOLLOW_SQL92_RESERVED_DROP_in_alter_method_element4511); 
					}
					break;

			}

			// PLSQLPrinter.g:489:62: ( map_order_function_spec )?
			int alt106=2;
			int LA106_0 = input.LA(1);
			if ( (LA106_0==SQL92_RESERVED_ORDER||LA106_0==MAP_VK) ) {
				alt106=1;
			}
			switch (alt106) {
				case 1 :
					// PLSQLPrinter.g:489:62: map_order_function_spec
					{
					pushFollow(FOLLOW_map_order_function_spec_in_alter_method_element4514);
					map_order_function_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:489:87: ( subprogram_spec )?
			int alt107=2;
			int LA107_0 = input.LA(1);
			if ( (LA107_0==MEMBER_VK||LA107_0==STATIC_VK) ) {
				alt107=1;
			}
			switch (alt107) {
				case 1 :
					// PLSQLPrinter.g:489:87: subprogram_spec
					{
					pushFollow(FOLLOW_subprogram_spec_in_alter_method_element4517);
					subprogram_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 490:5: -> template( \"not implemented: alter_method_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_method_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_method_element"


	public static class attribute_definition_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "attribute_definition"
	// PLSQLPrinter.g:493:1: attribute_definition : ^( ATTRIBUTE attribute_name ( type_spec )? ) -> template( \"not implemented: attribute_definition\";
	public final PLSQLPrinter.attribute_definition_return attribute_definition() throws RecognitionException {
		PLSQLPrinter.attribute_definition_return retval = new PLSQLPrinter.attribute_definition_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:494:5: ( ^( ATTRIBUTE attribute_name ( type_spec )? ) -> template( \"not implemented: attribute_definition\")
			// PLSQLPrinter.g:494:10: ^( ATTRIBUTE attribute_name ( type_spec )? )
			{
			match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_attribute_definition4554); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_attribute_name_in_attribute_definition4556);
			attribute_name();
			state._fsp--;

			// PLSQLPrinter.g:494:37: ( type_spec )?
			int alt108=2;
			int LA108_0 = input.LA(1);
			if ( (LA108_0==CUSTOM_TYPE||LA108_0==INTERVAL_DATATYPE||LA108_0==NATIVE_DATATYPE) ) {
				alt108=1;
			}
			switch (alt108) {
				case 1 :
					// PLSQLPrinter.g:494:37: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_attribute_definition4558);
					type_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 495:5: -> template( \"not implemented: attribute_definition\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: attribute_definition");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "attribute_definition"


	public static class alter_collection_clauses_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_collection_clauses"
	// PLSQLPrinter.g:498:1: alter_collection_clauses : ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) ) -> template( \"not implemented: alter_collection_clauses\";
	public final PLSQLPrinter.alter_collection_clauses_return alter_collection_clauses() throws RecognitionException {
		PLSQLPrinter.alter_collection_clauses_return retval = new PLSQLPrinter.alter_collection_clauses_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:499:5: ( ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) ) -> template( \"not implemented: alter_collection_clauses\")
			// PLSQLPrinter.g:499:10: ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) )
			{
			match(input,ALTER_COLLECTION,FOLLOW_ALTER_COLLECTION_in_alter_collection_clauses4595); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:500:13: ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) )
			int alt109=2;
			int LA109_0 = input.LA(1);
			if ( (LA109_0==TYPE_VK) ) {
				alt109=1;
			}
			else if ( (LA109_0==LIMIT_VK) ) {
				alt109=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 109, 0, input);
				throw nvae;
			}

			switch (alt109) {
				case 1 :
					// PLSQLPrinter.g:500:18: ^( TYPE_VK type_spec )
					{
					match(input,TYPE_VK,FOLLOW_TYPE_VK_in_alter_collection_clauses4616); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_type_spec_in_alter_collection_clauses4618);
					type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:501:18: ^( LIMIT_VK expression )
					{
					match(input,LIMIT_VK,FOLLOW_LIMIT_VK_in_alter_collection_clauses4639); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_alter_collection_clauses4641);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 504:5: -> template( \"not implemented: alter_collection_clauses\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_collection_clauses");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_collection_clauses"


	public static class dependent_handling_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dependent_handling_clause"
	// PLSQLPrinter.g:507:1: dependent_handling_clause : ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) ) -> template( \"not implemented: dependent_handling_clause\";
	public final PLSQLPrinter.dependent_handling_clause_return dependent_handling_clause() throws RecognitionException {
		PLSQLPrinter.dependent_handling_clause_return retval = new PLSQLPrinter.dependent_handling_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:508:5: ( ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) ) -> template( \"not implemented: dependent_handling_clause\")
			// PLSQLPrinter.g:508:10: ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) )
			{
			match(input,DEPENDENT_HANDLING,FOLLOW_DEPENDENT_HANDLING_in_dependent_handling_clause4702); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:509:13: ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) )
			int alt112=2;
			int LA112_0 = input.LA(1);
			if ( (LA112_0==INVALIDATE_VK) ) {
				alt112=1;
			}
			else if ( (LA112_0==CASCADE_VK) ) {
				alt112=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 112, 0, input);
				throw nvae;
			}

			switch (alt112) {
				case 1 :
					// PLSQLPrinter.g:509:18: INVALIDATE_VK
					{
					match(input,INVALIDATE_VK,FOLLOW_INVALIDATE_VK_in_dependent_handling_clause4722); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:510:18: ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? )
					{
					match(input,CASCADE_VK,FOLLOW_CASCADE_VK_in_dependent_handling_clause4742); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:511:21: ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )?
						int alt111=3;
						int LA111_0 = input.LA(1);
						if ( (LA111_0==CONVERT_VK) ) {
							alt111=1;
						}
						else if ( (LA111_0==SQL92_RESERVED_NOT||LA111_0==INCLUDING_VK) ) {
							alt111=2;
						}
						switch (alt111) {
							case 1 :
								// PLSQLPrinter.g:511:26: CONVERT_VK
								{
								match(input,CONVERT_VK,FOLLOW_CONVERT_VK_in_dependent_handling_clause4770); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:512:26: ( SQL92_RESERVED_NOT )? INCLUDING_VK
								{
								// PLSQLPrinter.g:512:26: ( SQL92_RESERVED_NOT )?
								int alt110=2;
								int LA110_0 = input.LA(1);
								if ( (LA110_0==SQL92_RESERVED_NOT) ) {
									alt110=1;
								}
								switch (alt110) {
									case 1 :
										// PLSQLPrinter.g:512:26: SQL92_RESERVED_NOT
										{
										match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_dependent_handling_clause4797); 
										}
										break;

								}

								match(input,INCLUDING_VK,FOLLOW_INCLUDING_VK_in_dependent_handling_clause4800); 
								}
								break;

						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 517:5: -> template( \"not implemented: dependent_handling_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dependent_handling_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dependent_handling_clause"


	public static class dependent_exceptions_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dependent_exceptions_part"
	// PLSQLPrinter.g:520:1: dependent_exceptions_part : ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name ) -> template( \"not implemented: dependent_exceptions_part\";
	public final PLSQLPrinter.dependent_exceptions_part_return dependent_exceptions_part() throws RecognitionException {
		PLSQLPrinter.dependent_exceptions_part_return retval = new PLSQLPrinter.dependent_exceptions_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:521:5: ( ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name ) -> template( \"not implemented: dependent_exceptions_part\")
			// PLSQLPrinter.g:521:10: ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name )
			{
			match(input,EXCEPTIONS_VK,FOLLOW_EXCEPTIONS_VK_in_dependent_exceptions_part4900); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:521:26: ( FORCE_VK )?
			int alt113=2;
			int LA113_0 = input.LA(1);
			if ( (LA113_0==FORCE_VK) ) {
				alt113=1;
			}
			switch (alt113) {
				case 1 :
					// PLSQLPrinter.g:521:26: FORCE_VK
					{
					match(input,FORCE_VK,FOLLOW_FORCE_VK_in_dependent_exceptions_part4902); 
					}
					break;

			}

			pushFollow(FOLLOW_tableview_name_in_dependent_exceptions_part4905);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 522:5: -> template( \"not implemented: dependent_exceptions_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: dependent_exceptions_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dependent_exceptions_part"


	public static class create_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_type"
	// PLSQLPrinter.g:527:1: create_type : ( ^( CREATE_TYPE_BODY ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) ) -> template( \"not implemented: create_type[CREATE_TYPE_BODY]\"| ^( CREATE_TYPE_SPEC ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? ) -> template( \"not implemented: create_type[CREATE_TYPE_SPEC]\");
	public final PLSQLPrinter.create_type_return create_type() throws RecognitionException {
		PLSQLPrinter.create_type_return retval = new PLSQLPrinter.create_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:528:5: ( ^( CREATE_TYPE_BODY ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) ) -> template( \"not implemented: create_type[CREATE_TYPE_BODY]\"| ^( CREATE_TYPE_SPEC ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? ) -> template( \"not implemented: create_type[CREATE_TYPE_SPEC]\")
			int alt121=2;
			int LA121_0 = input.LA(1);
			if ( (LA121_0==CREATE_TYPE_BODY) ) {
				alt121=1;
			}
			else if ( (LA121_0==CREATE_TYPE_SPEC) ) {
				alt121=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 121, 0, input);
				throw nvae;
			}

			switch (alt121) {
				case 1 :
					// PLSQLPrinter.g:528:10: ^( CREATE_TYPE_BODY ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) )
					{
					match(input,CREATE_TYPE_BODY,FOLLOW_CREATE_TYPE_BODY_in_create_type4943); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:528:29: ( SQL92_RESERVED_CREATE )?
					int alt114=2;
					int LA114_0 = input.LA(1);
					if ( (LA114_0==SQL92_RESERVED_CREATE) ) {
						alt114=1;
					}
					switch (alt114) {
						case 1 :
							// PLSQLPrinter.g:528:29: SQL92_RESERVED_CREATE
							{
							match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_create_type4945); 
							}
							break;

					}

					// PLSQLPrinter.g:528:52: ( REPLACE_VK )?
					int alt115=2;
					int LA115_0 = input.LA(1);
					if ( (LA115_0==REPLACE_VK) ) {
						alt115=1;
					}
					switch (alt115) {
						case 1 :
							// PLSQLPrinter.g:528:52: REPLACE_VK
							{
							match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_type4948); 
							}
							break;

					}

					pushFollow(FOLLOW_type_name_in_create_type4951);
					type_name();
					state._fsp--;

					match(input,TYPE_BODY_ELEMENTS,FOLLOW_TYPE_BODY_ELEMENTS_in_create_type4954); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:528:95: ( type_body_elements )+
					int cnt116=0;
					loop116:
					while (true) {
						int alt116=2;
						int LA116_0 = input.LA(1);
						if ( (LA116_0==SQL92_RESERVED_ORDER||LA116_0==MAP_VK||LA116_0==MEMBER_VK||LA116_0==STATIC_VK) ) {
							alt116=1;
						}

						switch (alt116) {
						case 1 :
							// PLSQLPrinter.g:528:95: type_body_elements
							{
							pushFollow(FOLLOW_type_body_elements_in_create_type4956);
							type_body_elements();
							state._fsp--;

							}
							break;

						default :
							if ( cnt116 >= 1 ) break loop116;
							EarlyExitException eee = new EarlyExitException(116, input);
							throw eee;
						}
						cnt116++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 529:5: -> template( \"not implemented: create_type[CREATE_TYPE_BODY]\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: create_type[CREATE_TYPE_BODY]");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:530:10: ^( CREATE_TYPE_SPEC ( SQL92_RESERVED_CREATE )? ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? )
					{
					match(input,CREATE_TYPE_SPEC,FOLLOW_CREATE_TYPE_SPEC_in_create_type4985); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:530:29: ( SQL92_RESERVED_CREATE )?
					int alt117=2;
					int LA117_0 = input.LA(1);
					if ( (LA117_0==SQL92_RESERVED_CREATE) ) {
						alt117=1;
					}
					switch (alt117) {
						case 1 :
							// PLSQLPrinter.g:530:29: SQL92_RESERVED_CREATE
							{
							match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_create_type4987); 
							}
							break;

					}

					// PLSQLPrinter.g:530:52: ( REPLACE_VK )?
					int alt118=2;
					int LA118_0 = input.LA(1);
					if ( (LA118_0==REPLACE_VK) ) {
						alt118=1;
					}
					switch (alt118) {
						case 1 :
							// PLSQLPrinter.g:530:52: REPLACE_VK
							{
							match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_type4990); 
							}
							break;

					}

					pushFollow(FOLLOW_type_name_in_create_type4993);
					type_name();
					state._fsp--;

					// PLSQLPrinter.g:530:74: ( CHAR_STRING )?
					int alt119=2;
					int LA119_0 = input.LA(1);
					if ( (LA119_0==CHAR_STRING) ) {
						alt119=1;
					}
					switch (alt119) {
						case 1 :
							// PLSQLPrinter.g:530:74: CHAR_STRING
							{
							match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_create_type4995); 
							}
							break;

					}

					// PLSQLPrinter.g:530:87: ( object_type_def )?
					int alt120=2;
					int LA120_0 = input.LA(1);
					if ( (LA120_0==OBJECT_TYPE_DEF) ) {
						alt120=1;
					}
					switch (alt120) {
						case 1 :
							// PLSQLPrinter.g:530:87: object_type_def
							{
							pushFollow(FOLLOW_object_type_def_in_create_type4998);
							object_type_def();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 531:5: -> template( \"not implemented: create_type[CREATE_TYPE_SPEC]\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: create_type[CREATE_TYPE_SPEC]");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_type"


	public static class object_type_def_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "object_type_def"
	// PLSQLPrinter.g:534:1: object_type_def : ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) ) -> template( \"not implemented: object_type_def\";
	public final PLSQLPrinter.object_type_def_return object_type_def() throws RecognitionException {
		PLSQLPrinter.object_type_def_return retval = new PLSQLPrinter.object_type_def_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:535:5: ( ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) ) -> template( \"not implemented: object_type_def\")
			// PLSQLPrinter.g:535:10: ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) )
			{
			match(input,OBJECT_TYPE_DEF,FOLLOW_OBJECT_TYPE_DEF_in_object_type_def5035); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:535:28: ( object_as_part | object_under_part )
			int alt122=2;
			int LA122_0 = input.LA(1);
			if ( (LA122_0==OBJECT_AS) ) {
				alt122=1;
			}
			else if ( (LA122_0==UNDER_VK) ) {
				alt122=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 122, 0, input);
				throw nvae;
			}

			switch (alt122) {
				case 1 :
					// PLSQLPrinter.g:535:29: object_as_part
					{
					pushFollow(FOLLOW_object_as_part_in_object_type_def5038);
					object_as_part();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:535:44: object_under_part
					{
					pushFollow(FOLLOW_object_under_part_in_object_type_def5040);
					object_under_part();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:535:63: ( invoker_rights_clause )?
			int alt123=2;
			int LA123_0 = input.LA(1);
			if ( (LA123_0==AUTHID_VK) ) {
				alt123=1;
			}
			switch (alt123) {
				case 1 :
					// PLSQLPrinter.g:535:63: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_object_type_def5043);
					invoker_rights_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:536:14: ( sqlj_object_type )?
			int alt124=2;
			int LA124_0 = input.LA(1);
			if ( (LA124_0==JAVA_VK) ) {
				alt124=1;
			}
			switch (alt124) {
				case 1 :
					// PLSQLPrinter.g:536:14: sqlj_object_type
					{
					pushFollow(FOLLOW_sqlj_object_type_in_object_type_def5059);
					sqlj_object_type();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:536:32: ( modifier_clause )*
			loop125:
			while (true) {
				int alt125=2;
				int LA125_0 = input.LA(1);
				if ( (LA125_0==MODIFIER) ) {
					alt125=1;
				}

				switch (alt125) {
				case 1 :
					// PLSQLPrinter.g:536:32: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_object_type_def5062);
					modifier_clause();
					state._fsp--;

					}
					break;

				default :
					break loop125;
				}
			}

			match(input,OBJECT_MEMBERS,FOLLOW_OBJECT_MEMBERS_in_object_type_def5066); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:536:66: ( element_spec )*
				loop126:
				while (true) {
					int alt126=2;
					int LA126_0 = input.LA(1);
					if ( (LA126_0==ELEMENT_SPEC) ) {
						alt126=1;
					}

					switch (alt126) {
					case 1 :
						// PLSQLPrinter.g:536:66: element_spec
						{
						pushFollow(FOLLOW_element_spec_in_object_type_def5068);
						element_spec();
						state._fsp--;

						}
						break;

					default :
						break loop126;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 537:5: -> template( \"not implemented: object_type_def\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: object_type_def");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_type_def"


	public static class object_as_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "object_as_part"
	// PLSQLPrinter.g:540:1: object_as_part : ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) ) -> template( \"not implemented: object_as_part\";
	public final PLSQLPrinter.object_as_part_return object_as_part() throws RecognitionException {
		PLSQLPrinter.object_as_part_return retval = new PLSQLPrinter.object_as_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:541:5: ( ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) ) -> template( \"not implemented: object_as_part\")
			// PLSQLPrinter.g:541:10: ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) )
			{
			match(input,OBJECT_AS,FOLLOW_OBJECT_AS_in_object_as_part5108); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:541:22: ( OBJECT_VK | varray_type_def | nested_table_type_def )
			int alt127=3;
			switch ( input.LA(1) ) {
			case OBJECT_VK:
				{
				alt127=1;
				}
				break;
			case SQL92_RESERVED_NULL:
			case VARR_ARRAY_DEF:
				{
				alt127=2;
				}
				break;
			case NESTED_TABLE_TYPE_DEF:
				{
				alt127=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 127, 0, input);
				throw nvae;
			}
			switch (alt127) {
				case 1 :
					// PLSQLPrinter.g:541:23: OBJECT_VK
					{
					match(input,OBJECT_VK,FOLLOW_OBJECT_VK_in_object_as_part5111); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:541:33: varray_type_def
					{
					pushFollow(FOLLOW_varray_type_def_in_object_as_part5113);
					varray_type_def();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:541:49: nested_table_type_def
					{
					pushFollow(FOLLOW_nested_table_type_def_in_object_as_part5115);
					nested_table_type_def();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 542:5: -> template( \"not implemented: object_as_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: object_as_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_as_part"


	public static class object_under_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "object_under_part"
	// PLSQLPrinter.g:545:1: object_under_part : ^( UNDER_VK type_spec ) -> template( \"not implemented: object_under_part\";
	public final PLSQLPrinter.object_under_part_return object_under_part() throws RecognitionException {
		PLSQLPrinter.object_under_part_return retval = new PLSQLPrinter.object_under_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:546:5: ( ^( UNDER_VK type_spec ) -> template( \"not implemented: object_under_part\")
			// PLSQLPrinter.g:546:10: ^( UNDER_VK type_spec )
			{
			match(input,UNDER_VK,FOLLOW_UNDER_VK_in_object_under_part5152); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_object_under_part5154);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 547:5: -> template( \"not implemented: object_under_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: object_under_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_under_part"


	public static class nested_table_type_def_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "nested_table_type_def"
	// PLSQLPrinter.g:550:1: nested_table_type_def : ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ( table_indexed_by_part )? ) -> nested_table_type_def(type_spec=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != nulltable_indexed_by_part=$table_indexed_by_part.st);
	public final PLSQLPrinter.nested_table_type_def_return nested_table_type_def() throws RecognitionException {
		PLSQLPrinter.nested_table_type_def_return retval = new PLSQLPrinter.nested_table_type_def_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL64=null;
		TreeRuleReturnScope type_spec63 =null;
		TreeRuleReturnScope table_indexed_by_part65 =null;

		try {
			// PLSQLPrinter.g:551:5: ( ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ( table_indexed_by_part )? ) -> nested_table_type_def(type_spec=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != nulltable_indexed_by_part=$table_indexed_by_part.st))
			// PLSQLPrinter.g:551:10: ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ( table_indexed_by_part )? )
			{
			match(input,NESTED_TABLE_TYPE_DEF,FOLLOW_NESTED_TABLE_TYPE_DEF_in_nested_table_type_def5190); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_nested_table_type_def5192);
			type_spec63=type_spec();
			state._fsp--;

			// PLSQLPrinter.g:551:44: ( SQL92_RESERVED_NULL )?
			int alt128=2;
			int LA128_0 = input.LA(1);
			if ( (LA128_0==SQL92_RESERVED_NULL) ) {
				alt128=1;
			}
			switch (alt128) {
				case 1 :
					// PLSQLPrinter.g:551:44: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL64=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_nested_table_type_def5194); 
					}
					break;

			}

			// PLSQLPrinter.g:551:65: ( table_indexed_by_part )?
			int alt129=2;
			int LA129_0 = input.LA(1);
			if ( (LA129_0==INDEXED_BY) ) {
				alt129=1;
			}
			switch (alt129) {
				case 1 :
					// PLSQLPrinter.g:551:65: table_indexed_by_part
					{
					pushFollow(FOLLOW_table_indexed_by_part_in_nested_table_type_def5197);
					table_indexed_by_part65=table_indexed_by_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 552:5: -> nested_table_type_def(type_spec=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != nulltable_indexed_by_part=$table_indexed_by_part.st)
			{
				retval.st = templateLib.getInstanceOf("nested_table_type_def",new STAttrMap().put("type_spec", (type_spec63!=null?((StringTemplate)type_spec63.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL64 != null).put("table_indexed_by_part", (table_indexed_by_part65!=null?((StringTemplate)table_indexed_by_part65.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "nested_table_type_def"


	public static class sqlj_object_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sqlj_object_type"
	// PLSQLPrinter.g:558:1: sqlj_object_type : ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) ) -> template( \"not implemented: sqlj_object_type\";
	public final PLSQLPrinter.sqlj_object_type_return sqlj_object_type() throws RecognitionException {
		PLSQLPrinter.sqlj_object_type_return retval = new PLSQLPrinter.sqlj_object_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:559:5: ( ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) ) -> template( \"not implemented: sqlj_object_type\")
			// PLSQLPrinter.g:559:10: ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) )
			{
			match(input,JAVA_VK,FOLLOW_JAVA_VK_in_sqlj_object_type5275); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_sqlj_object_type5277);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:559:31: ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK )
			int alt130=3;
			switch ( input.LA(1) ) {
			case SQLDATA_VK:
				{
				alt130=1;
				}
				break;
			case CUSTOMDATUM_VK:
				{
				alt130=2;
				}
				break;
			case ORADATA_VK:
				{
				alt130=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 130, 0, input);
				throw nvae;
			}
			switch (alt130) {
				case 1 :
					// PLSQLPrinter.g:559:32: SQLDATA_VK
					{
					match(input,SQLDATA_VK,FOLLOW_SQLDATA_VK_in_sqlj_object_type5280); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:559:43: CUSTOMDATUM_VK
					{
					match(input,CUSTOMDATUM_VK,FOLLOW_CUSTOMDATUM_VK_in_sqlj_object_type5282); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:559:58: ORADATA_VK
					{
					match(input,ORADATA_VK,FOLLOW_ORADATA_VK_in_sqlj_object_type5284); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 560:5: -> template( \"not implemented: sqlj_object_type\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: sqlj_object_type");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sqlj_object_type"


	public static class type_body_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_body_elements"
	// PLSQLPrinter.g:563:1: type_body_elements : ( map_order_func_declaration -> template( \"not implemented: type_body_elements\"| subprog_decl_in_type -> template( \"not implemented: type_body_elements\");
	public final PLSQLPrinter.type_body_elements_return type_body_elements() throws RecognitionException {
		PLSQLPrinter.type_body_elements_return retval = new PLSQLPrinter.type_body_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:564:5: ( map_order_func_declaration -> template( \"not implemented: type_body_elements\"| subprog_decl_in_type -> template( \"not implemented: type_body_elements\")
			int alt131=2;
			int LA131_0 = input.LA(1);
			if ( (LA131_0==SQL92_RESERVED_ORDER||LA131_0==MAP_VK) ) {
				alt131=1;
			}
			else if ( (LA131_0==MEMBER_VK||LA131_0==STATIC_VK) ) {
				alt131=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 131, 0, input);
				throw nvae;
			}

			switch (alt131) {
				case 1 :
					// PLSQLPrinter.g:564:10: map_order_func_declaration
					{
					pushFollow(FOLLOW_map_order_func_declaration_in_type_body_elements5320);
					map_order_func_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 565:5: -> template( \"not implemented: type_body_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: type_body_elements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:566:10: subprog_decl_in_type
					{
					pushFollow(FOLLOW_subprog_decl_in_type_in_type_body_elements5345);
					subprog_decl_in_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 567:5: -> template( \"not implemented: type_body_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: type_body_elements");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_body_elements"


	public static class map_order_func_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "map_order_func_declaration"
	// PLSQLPrinter.g:570:1: map_order_func_declaration : ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body ) -> template( \"not implemented: map_order_func_declaration\";
	public final PLSQLPrinter.map_order_func_declaration_return map_order_func_declaration() throws RecognitionException {
		PLSQLPrinter.map_order_func_declaration_return retval = new PLSQLPrinter.map_order_func_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:571:5: ( ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body ) -> template( \"not implemented: map_order_func_declaration\")
			// PLSQLPrinter.g:571:10: ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body )
			{
			// PLSQLPrinter.g:571:12: ( MAP_VK | SQL92_RESERVED_ORDER )
			int alt132=2;
			int LA132_0 = input.LA(1);
			if ( (LA132_0==MAP_VK) ) {
				alt132=1;
			}
			else if ( (LA132_0==SQL92_RESERVED_ORDER) ) {
				alt132=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 132, 0, input);
				throw nvae;
			}

			switch (alt132) {
				case 1 :
					// PLSQLPrinter.g:571:13: MAP_VK
					{
					match(input,MAP_VK,FOLLOW_MAP_VK_in_map_order_func_declaration5381); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:571:20: SQL92_RESERVED_ORDER
					{
					match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_map_order_func_declaration5383); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_create_function_body_in_map_order_func_declaration5386);
			create_function_body();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 572:5: -> template( \"not implemented: map_order_func_declaration\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: map_order_func_declaration");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "map_order_func_declaration"


	public static class subprog_decl_in_type_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subprog_decl_in_type"
	// PLSQLPrinter.g:575:1: subprog_decl_in_type : ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) ) -> template( \"not implemented: subprog_decl_in_type\";
	public final PLSQLPrinter.subprog_decl_in_type_return subprog_decl_in_type() throws RecognitionException {
		PLSQLPrinter.subprog_decl_in_type_return retval = new PLSQLPrinter.subprog_decl_in_type_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:576:5: ( ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) ) -> template( \"not implemented: subprog_decl_in_type\")
			// PLSQLPrinter.g:576:10: ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) )
			{
			// PLSQLPrinter.g:576:12: ( MEMBER_VK | STATIC_VK )
			int alt133=2;
			int LA133_0 = input.LA(1);
			if ( (LA133_0==MEMBER_VK) ) {
				alt133=1;
			}
			else if ( (LA133_0==STATIC_VK) ) {
				alt133=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 133, 0, input);
				throw nvae;
			}

			switch (alt133) {
				case 1 :
					// PLSQLPrinter.g:576:13: MEMBER_VK
					{
					match(input,MEMBER_VK,FOLLOW_MEMBER_VK_in_subprog_decl_in_type5423); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:576:23: STATIC_VK
					{
					match(input,STATIC_VK,FOLLOW_STATIC_VK_in_subprog_decl_in_type5425); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:577:13: ( create_procedure_body | create_function_body | constructor_declaration )
			int alt134=3;
			switch ( input.LA(1) ) {
			case CREATE_PROCEDURE:
				{
				alt134=1;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt134=2;
				}
				break;
			case CONSTRUCTOR_VK:
				{
				alt134=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 134, 0, input);
				throw nvae;
			}
			switch (alt134) {
				case 1 :
					// PLSQLPrinter.g:577:18: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_subprog_decl_in_type5445);
					create_procedure_body();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:578:18: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_subprog_decl_in_type5464);
					create_function_body();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:579:18: constructor_declaration
					{
					pushFollow(FOLLOW_constructor_declaration_in_subprog_decl_in_type5483);
					constructor_declaration();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 582:5: -> template( \"not implemented: subprog_decl_in_type\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: subprog_decl_in_type");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subprog_decl_in_type"


	public static class constructor_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constructor_declaration"
	// PLSQLPrinter.g:585:1: constructor_declaration : ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE block ) ) ) -> template( \"not implemented: constructor_declaration\";
	public final PLSQLPrinter.constructor_declaration_return constructor_declaration() throws RecognitionException {
		PLSQLPrinter.constructor_declaration_return retval = new PLSQLPrinter.constructor_declaration_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:586:5: ( ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE block ) ) ) -> template( \"not implemented: constructor_declaration\")
			// PLSQLPrinter.g:586:10: ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE block ) ) )
			{
			match(input,CONSTRUCTOR_VK,FOLLOW_CONSTRUCTOR_VK_in_constructor_declaration5542); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_constructor_declaration5544);
			type_spec();
			state._fsp--;

			// PLSQLPrinter.g:586:37: ( FINAL_VK )?
			int alt135=2;
			int LA135_0 = input.LA(1);
			if ( (LA135_0==FINAL_VK) ) {
				alt135=1;
			}
			switch (alt135) {
				case 1 :
					// PLSQLPrinter.g:586:37: FINAL_VK
					{
					match(input,FINAL_VK,FOLLOW_FINAL_VK_in_constructor_declaration5546); 
					}
					break;

			}

			// PLSQLPrinter.g:586:47: ( INSTANTIABLE_VK )?
			int alt136=2;
			int LA136_0 = input.LA(1);
			if ( (LA136_0==INSTANTIABLE_VK) ) {
				alt136=1;
			}
			switch (alt136) {
				case 1 :
					// PLSQLPrinter.g:586:47: INSTANTIABLE_VK
					{
					match(input,INSTANTIABLE_VK,FOLLOW_INSTANTIABLE_VK_in_constructor_declaration5549); 
					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_constructor_declaration5553); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:586:77: ( type_elements_parameter )*
				loop137:
				while (true) {
					int alt137=2;
					int LA137_0 = input.LA(1);
					if ( (LA137_0==PARAMETER) ) {
						alt137=1;
					}

					switch (alt137) {
					case 1 :
						// PLSQLPrinter.g:586:77: type_elements_parameter
						{
						pushFollow(FOLLOW_type_elements_parameter_in_constructor_declaration5555);
						type_elements_parameter();
						state._fsp--;

						}
						break;

					default :
						break loop137;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:587:13: ( ^( CALL_MODE call_spec ) | ^( BODY_MODE block ) )
			int alt138=2;
			int LA138_0 = input.LA(1);
			if ( (LA138_0==CALL_MODE) ) {
				alt138=1;
			}
			else if ( (LA138_0==BODY_MODE) ) {
				alt138=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 138, 0, input);
				throw nvae;
			}

			switch (alt138) {
				case 1 :
					// PLSQLPrinter.g:587:18: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_constructor_declaration5578); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_constructor_declaration5580);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:588:18: ^( BODY_MODE block )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_constructor_declaration5601); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_constructor_declaration5603);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 591:5: -> template( \"not implemented: constructor_declaration\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: constructor_declaration");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constructor_declaration"


	public static class modifier_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "modifier_clause"
	// PLSQLPrinter.g:598:1: modifier_clause : ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) ) -> template( \"not implemented: modifier_clause\";
	public final PLSQLPrinter.modifier_clause_return modifier_clause() throws RecognitionException {
		PLSQLPrinter.modifier_clause_return retval = new PLSQLPrinter.modifier_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:599:5: ( ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) ) -> template( \"not implemented: modifier_clause\")
			// PLSQLPrinter.g:599:10: ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) )
			{
			match(input,MODIFIER,FOLLOW_MODIFIER_in_modifier_clause5667); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:599:21: ( SQL92_RESERVED_NOT )?
			int alt139=2;
			int LA139_0 = input.LA(1);
			if ( (LA139_0==SQL92_RESERVED_NOT) ) {
				alt139=1;
			}
			switch (alt139) {
				case 1 :
					// PLSQLPrinter.g:599:21: SQL92_RESERVED_NOT
					{
					match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_modifier_clause5669); 
					}
					break;

			}

			// PLSQLPrinter.g:599:41: ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK )
			int alt140=3;
			switch ( input.LA(1) ) {
			case INSTANTIABLE_VK:
				{
				alt140=1;
				}
				break;
			case FINAL_VK:
				{
				alt140=2;
				}
				break;
			case OVERRIDING_VK:
				{
				alt140=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 140, 0, input);
				throw nvae;
			}
			switch (alt140) {
				case 1 :
					// PLSQLPrinter.g:599:42: INSTANTIABLE_VK
					{
					match(input,INSTANTIABLE_VK,FOLLOW_INSTANTIABLE_VK_in_modifier_clause5673); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:599:58: FINAL_VK
					{
					match(input,FINAL_VK,FOLLOW_FINAL_VK_in_modifier_clause5675); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:599:67: OVERRIDING_VK
					{
					match(input,OVERRIDING_VK,FOLLOW_OVERRIDING_VK_in_modifier_clause5677); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 600:5: -> template( \"not implemented: modifier_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: modifier_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "modifier_clause"


	public static class sqlj_object_type_attr_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sqlj_object_type_attr"
	// PLSQLPrinter.g:603:1: sqlj_object_type_attr : ^( EXTERNAL_VK expression ) -> template( \"not implemented: sqlj_object_type_attr\";
	public final PLSQLPrinter.sqlj_object_type_attr_return sqlj_object_type_attr() throws RecognitionException {
		PLSQLPrinter.sqlj_object_type_attr_return retval = new PLSQLPrinter.sqlj_object_type_attr_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:604:5: ( ^( EXTERNAL_VK expression ) -> template( \"not implemented: sqlj_object_type_attr\")
			// PLSQLPrinter.g:604:10: ^( EXTERNAL_VK expression )
			{
			match(input,EXTERNAL_VK,FOLLOW_EXTERNAL_VK_in_sqlj_object_type_attr5714); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_sqlj_object_type_attr5716);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 605:5: -> template( \"not implemented: sqlj_object_type_attr\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: sqlj_object_type_attr");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sqlj_object_type_attr"


	public static class element_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "element_spec"
	// PLSQLPrinter.g:608:1: element_spec : ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? ) -> template( \"not implemented: element_spec\";
	public final PLSQLPrinter.element_spec_return element_spec() throws RecognitionException {
		PLSQLPrinter.element_spec_return retval = new PLSQLPrinter.element_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:609:5: ( ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? ) -> template( \"not implemented: element_spec\")
			// PLSQLPrinter.g:609:10: ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? )
			{
			match(input,ELEMENT_SPEC,FOLLOW_ELEMENT_SPEC_in_element_spec5752); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:609:25: ( element_spec_options )+
			int cnt141=0;
			loop141:
			while (true) {
				int alt141=2;
				int LA141_0 = input.LA(1);
				if ( (LA141_0==SQL92_RESERVED_ORDER||LA141_0==CONSTRUCTOR_SPEC||LA141_0==FIELD_SPEC||LA141_0==MAP_VK||LA141_0==MEMBER_VK||LA141_0==STATIC_VK) ) {
					alt141=1;
				}

				switch (alt141) {
				case 1 :
					// PLSQLPrinter.g:609:25: element_spec_options
					{
					pushFollow(FOLLOW_element_spec_options_in_element_spec5754);
					element_spec_options();
					state._fsp--;

					}
					break;

				default :
					if ( cnt141 >= 1 ) break loop141;
					EarlyExitException eee = new EarlyExitException(141, input);
					throw eee;
				}
				cnt141++;
			}

			// PLSQLPrinter.g:609:47: ( modifier_clause )?
			int alt142=2;
			int LA142_0 = input.LA(1);
			if ( (LA142_0==MODIFIER) ) {
				alt142=1;
			}
			switch (alt142) {
				case 1 :
					// PLSQLPrinter.g:609:47: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_element_spec5757);
					modifier_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:609:64: ( pragma_clause )?
			int alt143=2;
			int LA143_0 = input.LA(1);
			if ( (LA143_0==PRAGMA_VK) ) {
				alt143=1;
			}
			switch (alt143) {
				case 1 :
					// PLSQLPrinter.g:609:64: pragma_clause
					{
					pushFollow(FOLLOW_pragma_clause_in_element_spec5760);
					pragma_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 610:5: -> template( \"not implemented: element_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: element_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "element_spec"


	public static class element_spec_options_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "element_spec_options"
	// PLSQLPrinter.g:613:1: element_spec_options : ( subprogram_spec -> template( \"not implemented: element_spec_options\"| constructor_spec -> template( \"not implemented: element_spec_options\"| map_order_function_spec -> template( \"not implemented: element_spec_options\"| ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) -> template( \"not implemented: element_spec_options\");
	public final PLSQLPrinter.element_spec_options_return element_spec_options() throws RecognitionException {
		PLSQLPrinter.element_spec_options_return retval = new PLSQLPrinter.element_spec_options_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:614:5: ( subprogram_spec -> template( \"not implemented: element_spec_options\"| constructor_spec -> template( \"not implemented: element_spec_options\"| map_order_function_spec -> template( \"not implemented: element_spec_options\"| ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) -> template( \"not implemented: element_spec_options\")
			int alt145=4;
			switch ( input.LA(1) ) {
			case MEMBER_VK:
			case STATIC_VK:
				{
				alt145=1;
				}
				break;
			case CONSTRUCTOR_SPEC:
				{
				alt145=2;
				}
				break;
			case SQL92_RESERVED_ORDER:
			case MAP_VK:
				{
				alt145=3;
				}
				break;
			case FIELD_SPEC:
				{
				alt145=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 145, 0, input);
				throw nvae;
			}
			switch (alt145) {
				case 1 :
					// PLSQLPrinter.g:614:10: subprogram_spec
					{
					pushFollow(FOLLOW_subprogram_spec_in_element_spec_options5796);
					subprogram_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 615:5: -> template( \"not implemented: element_spec_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: element_spec_options");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:616:10: constructor_spec
					{
					pushFollow(FOLLOW_constructor_spec_in_element_spec_options5821);
					constructor_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 617:5: -> template( \"not implemented: element_spec_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: element_spec_options");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:618:10: map_order_function_spec
					{
					pushFollow(FOLLOW_map_order_function_spec_in_element_spec_options5846);
					map_order_function_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 619:5: -> template( \"not implemented: element_spec_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: element_spec_options");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:620:10: ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? )
					{
					match(input,FIELD_SPEC,FOLLOW_FIELD_SPEC_in_element_spec_options5872); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_id_in_element_spec_options5874);
					id();
					state._fsp--;

					pushFollow(FOLLOW_type_spec_in_element_spec_options5876);
					type_spec();
					state._fsp--;

					// PLSQLPrinter.g:620:36: ( sqlj_object_type_attr )?
					int alt144=2;
					int LA144_0 = input.LA(1);
					if ( (LA144_0==EXTERNAL_VK) ) {
						alt144=1;
					}
					switch (alt144) {
						case 1 :
							// PLSQLPrinter.g:620:36: sqlj_object_type_attr
							{
							pushFollow(FOLLOW_sqlj_object_type_attr_in_element_spec_options5878);
							sqlj_object_type_attr();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 621:5: -> template( \"not implemented: element_spec_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: element_spec_options");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "element_spec_options"


	public static class subprogram_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subprogram_spec"
	// PLSQLPrinter.g:624:1: subprogram_spec : ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) ) -> template( \"not implemented: subprogram_spec\";
	public final PLSQLPrinter.subprogram_spec_return subprogram_spec() throws RecognitionException {
		PLSQLPrinter.subprogram_spec_return retval = new PLSQLPrinter.subprogram_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:625:5: ( ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) ) -> template( \"not implemented: subprogram_spec\")
			// PLSQLPrinter.g:625:10: ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) )
			{
			// PLSQLPrinter.g:625:12: ( MEMBER_VK | STATIC_VK )
			int alt146=2;
			int LA146_0 = input.LA(1);
			if ( (LA146_0==MEMBER_VK) ) {
				alt146=1;
			}
			else if ( (LA146_0==STATIC_VK) ) {
				alt146=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 146, 0, input);
				throw nvae;
			}

			switch (alt146) {
				case 1 :
					// PLSQLPrinter.g:625:13: MEMBER_VK
					{
					match(input,MEMBER_VK,FOLLOW_MEMBER_VK_in_subprogram_spec5916); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:625:23: STATIC_VK
					{
					match(input,STATIC_VK,FOLLOW_STATIC_VK_in_subprogram_spec5918); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:626:13: ( procedure_spec | function_spec )
			int alt147=2;
			int LA147_0 = input.LA(1);
			if ( (LA147_0==PROCEDURE_SPEC) ) {
				alt147=1;
			}
			else if ( (LA147_0==FUNCTION_SPEC) ) {
				alt147=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 147, 0, input);
				throw nvae;
			}

			switch (alt147) {
				case 1 :
					// PLSQLPrinter.g:626:18: procedure_spec
					{
					pushFollow(FOLLOW_procedure_spec_in_subprogram_spec5938);
					procedure_spec();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:627:18: function_spec
					{
					pushFollow(FOLLOW_function_spec_in_subprogram_spec5957);
					function_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 630:5: -> template( \"not implemented: subprogram_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: subprogram_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subprogram_spec"


	public static class constructor_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constructor_spec"
	// PLSQLPrinter.g:633:1: constructor_spec : ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? ) -> template( \"not implemented: constructor_spec\";
	public final PLSQLPrinter.constructor_spec_return constructor_spec() throws RecognitionException {
		PLSQLPrinter.constructor_spec_return retval = new PLSQLPrinter.constructor_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:634:5: ( ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? ) -> template( \"not implemented: constructor_spec\")
			// PLSQLPrinter.g:634:10: ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? )
			{
			match(input,CONSTRUCTOR_SPEC,FOLLOW_CONSTRUCTOR_SPEC_in_constructor_spec6016); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_constructor_spec6018);
			type_spec();
			state._fsp--;

			// PLSQLPrinter.g:634:39: ( FINAL_VK )?
			int alt148=2;
			int LA148_0 = input.LA(1);
			if ( (LA148_0==FINAL_VK) ) {
				alt148=1;
			}
			switch (alt148) {
				case 1 :
					// PLSQLPrinter.g:634:39: FINAL_VK
					{
					match(input,FINAL_VK,FOLLOW_FINAL_VK_in_constructor_spec6020); 
					}
					break;

			}

			// PLSQLPrinter.g:634:49: ( INSTANTIABLE_VK )?
			int alt149=2;
			int LA149_0 = input.LA(1);
			if ( (LA149_0==INSTANTIABLE_VK) ) {
				alt149=1;
			}
			switch (alt149) {
				case 1 :
					// PLSQLPrinter.g:634:49: INSTANTIABLE_VK
					{
					match(input,INSTANTIABLE_VK,FOLLOW_INSTANTIABLE_VK_in_constructor_spec6023); 
					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_constructor_spec6027); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:634:79: ( type_elements_parameter )*
				loop150:
				while (true) {
					int alt150=2;
					int LA150_0 = input.LA(1);
					if ( (LA150_0==PARAMETER) ) {
						alt150=1;
					}

					switch (alt150) {
					case 1 :
						// PLSQLPrinter.g:634:79: type_elements_parameter
						{
						pushFollow(FOLLOW_type_elements_parameter_in_constructor_spec6029);
						type_elements_parameter();
						state._fsp--;

						}
						break;

					default :
						break loop150;
					}
				}

				match(input, Token.UP, null); 
			}

			// PLSQLPrinter.g:634:105: ( constructor_call_mode )?
			int alt151=2;
			int LA151_0 = input.LA(1);
			if ( (LA151_0==CALL_MODE) ) {
				alt151=1;
			}
			switch (alt151) {
				case 1 :
					// PLSQLPrinter.g:634:105: constructor_call_mode
					{
					pushFollow(FOLLOW_constructor_call_mode_in_constructor_spec6033);
					constructor_call_mode();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 635:5: -> template( \"not implemented: constructor_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: constructor_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constructor_spec"


	public static class constructor_call_mode_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constructor_call_mode"
	// PLSQLPrinter.g:638:1: constructor_call_mode : ^( CALL_MODE call_spec ) -> template( \"not implemented: constructor_call_mode\";
	public final PLSQLPrinter.constructor_call_mode_return constructor_call_mode() throws RecognitionException {
		PLSQLPrinter.constructor_call_mode_return retval = new PLSQLPrinter.constructor_call_mode_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:639:5: ( ^( CALL_MODE call_spec ) -> template( \"not implemented: constructor_call_mode\")
			// PLSQLPrinter.g:639:10: ^( CALL_MODE call_spec )
			{
			match(input,CALL_MODE,FOLLOW_CALL_MODE_in_constructor_call_mode6070); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_call_spec_in_constructor_call_mode6072);
			call_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 640:5: -> template( \"not implemented: constructor_call_mode\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: constructor_call_mode");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constructor_call_mode"


	public static class map_order_function_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "map_order_function_spec"
	// PLSQLPrinter.g:643:1: map_order_function_spec : ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec ) -> template( \"not implemented: map_order_function_spec\";
	public final PLSQLPrinter.map_order_function_spec_return map_order_function_spec() throws RecognitionException {
		PLSQLPrinter.map_order_function_spec_return retval = new PLSQLPrinter.map_order_function_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:644:5: ( ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec ) -> template( \"not implemented: map_order_function_spec\")
			// PLSQLPrinter.g:644:10: ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec )
			{
			// PLSQLPrinter.g:644:12: ( MAP_VK | SQL92_RESERVED_ORDER )
			int alt152=2;
			int LA152_0 = input.LA(1);
			if ( (LA152_0==MAP_VK) ) {
				alt152=1;
			}
			else if ( (LA152_0==SQL92_RESERVED_ORDER) ) {
				alt152=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 152, 0, input);
				throw nvae;
			}

			switch (alt152) {
				case 1 :
					// PLSQLPrinter.g:644:13: MAP_VK
					{
					match(input,MAP_VK,FOLLOW_MAP_VK_in_map_order_function_spec6109); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:644:20: SQL92_RESERVED_ORDER
					{
					match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_map_order_function_spec6111); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_spec_in_map_order_function_spec6114);
			function_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 645:5: -> template( \"not implemented: map_order_function_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: map_order_function_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "map_order_function_spec"


	public static class pragma_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_clause"
	// PLSQLPrinter.g:648:1: pragma_clause : ^( PRAGMA_VK ( pragma_elements )+ ) -> template( \"not implemented: pragma_clause\";
	public final PLSQLPrinter.pragma_clause_return pragma_clause() throws RecognitionException {
		PLSQLPrinter.pragma_clause_return retval = new PLSQLPrinter.pragma_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:649:5: ( ^( PRAGMA_VK ( pragma_elements )+ ) -> template( \"not implemented: pragma_clause\")
			// PLSQLPrinter.g:649:10: ^( PRAGMA_VK ( pragma_elements )+ )
			{
			match(input,PRAGMA_VK,FOLLOW_PRAGMA_VK_in_pragma_clause6150); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:649:22: ( pragma_elements )+
			int cnt153=0;
			loop153:
			while (true) {
				int alt153=2;
				int LA153_0 = input.LA(1);
				if ( (LA153_0==SQL92_RESERVED_DEFAULT||LA153_0==CHAR_SET_NAME||LA153_0==ID) ) {
					alt153=1;
				}

				switch (alt153) {
				case 1 :
					// PLSQLPrinter.g:649:22: pragma_elements
					{
					pushFollow(FOLLOW_pragma_elements_in_pragma_clause6152);
					pragma_elements();
					state._fsp--;

					}
					break;

				default :
					if ( cnt153 >= 1 ) break loop153;
					EarlyExitException eee = new EarlyExitException(153, input);
					throw eee;
				}
				cnt153++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 650:5: -> template( \"not implemented: pragma_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pragma_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_clause"


	public static class pragma_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_elements"
	// PLSQLPrinter.g:653:1: pragma_elements : ( id -> template( \"not implemented: pragma_elements\"| SQL92_RESERVED_DEFAULT -> template( \"not implemented: pragma_elements\");
	public final PLSQLPrinter.pragma_elements_return pragma_elements() throws RecognitionException {
		PLSQLPrinter.pragma_elements_return retval = new PLSQLPrinter.pragma_elements_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:654:5: ( id -> template( \"not implemented: pragma_elements\"| SQL92_RESERVED_DEFAULT -> template( \"not implemented: pragma_elements\")
			int alt154=2;
			int LA154_0 = input.LA(1);
			if ( (LA154_0==CHAR_SET_NAME||LA154_0==ID) ) {
				alt154=1;
			}
			else if ( (LA154_0==SQL92_RESERVED_DEFAULT) ) {
				alt154=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 154, 0, input);
				throw nvae;
			}

			switch (alt154) {
				case 1 :
					// PLSQLPrinter.g:654:10: id
					{
					pushFollow(FOLLOW_id_in_pragma_elements6188);
					id();
					state._fsp--;

					// TEMPLATE REWRITE
					// 655:5: -> template( \"not implemented: pragma_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: pragma_elements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:656:10: SQL92_RESERVED_DEFAULT
					{
					match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_elements6213); 
					// TEMPLATE REWRITE
					// 657:5: -> template( \"not implemented: pragma_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: pragma_elements");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_elements"


	public static class type_elements_parameter_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_elements_parameter"
	// PLSQLPrinter.g:660:1: type_elements_parameter : ^( PARAMETER parameter_name type_spec ) -> template( \"not implemented: type_elements_parameter\";
	public final PLSQLPrinter.type_elements_parameter_return type_elements_parameter() throws RecognitionException {
		PLSQLPrinter.type_elements_parameter_return retval = new PLSQLPrinter.type_elements_parameter_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:661:5: ( ^( PARAMETER parameter_name type_spec ) -> template( \"not implemented: type_elements_parameter\")
			// PLSQLPrinter.g:661:10: ^( PARAMETER parameter_name type_spec )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_type_elements_parameter6248); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_type_elements_parameter6250);
			parameter_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_type_elements_parameter6252);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 662:5: -> template( \"not implemented: type_elements_parameter\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: type_elements_parameter");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_elements_parameter"


	public static class drop_sequence_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "drop_sequence"
	// PLSQLPrinter.g:671:1: drop_sequence : ^( DROP_SEQUENCE sequence_name ) -> template( \"not implemented: drop_sequence\";
	public final PLSQLPrinter.drop_sequence_return drop_sequence() throws RecognitionException {
		PLSQLPrinter.drop_sequence_return retval = new PLSQLPrinter.drop_sequence_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:672:5: ( ^( DROP_SEQUENCE sequence_name ) -> template( \"not implemented: drop_sequence\")
			// PLSQLPrinter.g:672:9: ^( DROP_SEQUENCE sequence_name )
			{
			match(input,DROP_SEQUENCE,FOLLOW_DROP_SEQUENCE_in_drop_sequence6293); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_sequence_name_in_drop_sequence6295);
			sequence_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 673:5: -> template( \"not implemented: drop_sequence\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: drop_sequence");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_sequence"


	public static class alter_sequence_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alter_sequence"
	// PLSQLPrinter.g:676:1: alter_sequence : ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ ) -> template( \"not implemented: alter_sequence\";
	public final PLSQLPrinter.alter_sequence_return alter_sequence() throws RecognitionException {
		PLSQLPrinter.alter_sequence_return retval = new PLSQLPrinter.alter_sequence_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:677:5: ( ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ ) -> template( \"not implemented: alter_sequence\")
			// PLSQLPrinter.g:677:10: ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ )
			{
			match(input,ALTER_SEQUENCE,FOLLOW_ALTER_SEQUENCE_in_alter_sequence6331); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_sequence_name_in_alter_sequence6333);
			sequence_name();
			state._fsp--;

			// PLSQLPrinter.g:677:41: ( sequence_spec )+
			int cnt155=0;
			loop155:
			while (true) {
				int alt155=2;
				int LA155_0 = input.LA(1);
				if ( (LA155_0==PLSQL_RESERVED_START||LA155_0==SQL92_RESERVED_ORDER||LA155_0==CACHE_VK||LA155_0==CYCLE_VK||LA155_0==INCREMENT_VK||LA155_0==MAXVALUE_VK||LA155_0==MINVALUE_VK||LA155_0==NOCACHE_VK||LA155_0==NOCYCLE_VK||(LA155_0 >= NOMAXVALUE_VK && LA155_0 <= NOMINVALUE_VK)||LA155_0==NOORDER_VK) ) {
					alt155=1;
				}

				switch (alt155) {
				case 1 :
					// PLSQLPrinter.g:677:41: sequence_spec
					{
					pushFollow(FOLLOW_sequence_spec_in_alter_sequence6335);
					sequence_spec();
					state._fsp--;

					}
					break;

				default :
					if ( cnt155 >= 1 ) break loop155;
					EarlyExitException eee = new EarlyExitException(155, input);
					throw eee;
				}
				cnt155++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 678:5: -> template( \"not implemented: alter_sequence\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: alter_sequence");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_sequence"


	public static class create_sequence_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "create_sequence"
	// PLSQLPrinter.g:681:1: create_sequence : ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* ) -> template( \"not implemented: create_sequence\";
	public final PLSQLPrinter.create_sequence_return create_sequence() throws RecognitionException {
		PLSQLPrinter.create_sequence_return retval = new PLSQLPrinter.create_sequence_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:682:5: ( ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* ) -> template( \"not implemented: create_sequence\")
			// PLSQLPrinter.g:682:10: ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* )
			{
			match(input,CREATE_SEQUENCE,FOLLOW_CREATE_SEQUENCE_in_create_sequence6372); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_sequence_name_in_create_sequence6374);
			sequence_name();
			state._fsp--;

			// PLSQLPrinter.g:682:42: ( sequence_spec )*
			loop156:
			while (true) {
				int alt156=2;
				int LA156_0 = input.LA(1);
				if ( (LA156_0==PLSQL_RESERVED_START||LA156_0==SQL92_RESERVED_ORDER||LA156_0==CACHE_VK||LA156_0==CYCLE_VK||LA156_0==INCREMENT_VK||LA156_0==MAXVALUE_VK||LA156_0==MINVALUE_VK||LA156_0==NOCACHE_VK||LA156_0==NOCYCLE_VK||(LA156_0 >= NOMAXVALUE_VK && LA156_0 <= NOMINVALUE_VK)||LA156_0==NOORDER_VK) ) {
					alt156=1;
				}

				switch (alt156) {
				case 1 :
					// PLSQLPrinter.g:682:42: sequence_spec
					{
					pushFollow(FOLLOW_sequence_spec_in_create_sequence6376);
					sequence_spec();
					state._fsp--;

					}
					break;

				default :
					break loop156;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 683:5: -> template( \"not implemented: create_sequence\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: create_sequence");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_sequence"


	public static class sequence_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sequence_spec"
	// PLSQLPrinter.g:688:1: sequence_spec : ( ^( PLSQL_RESERVED_START UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( INCREMENT_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( MAXVALUE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( MINVALUE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( CACHE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| NOMAXVALUE_VK -> template( \"not implemented: sequence_spec\"| NOMINVALUE_VK -> template( \"not implemented: sequence_spec\"| CYCLE_VK -> template( \"not implemented: sequence_spec\"| NOCYCLE_VK -> template( \"not implemented: sequence_spec\"| NOCACHE_VK -> template( \"not implemented: sequence_spec\"| SQL92_RESERVED_ORDER -> template( \"not implemented: sequence_spec\"| NOORDER_VK -> template( \"not implemented: sequence_spec\");
	public final PLSQLPrinter.sequence_spec_return sequence_spec() throws RecognitionException {
		PLSQLPrinter.sequence_spec_return retval = new PLSQLPrinter.sequence_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:689:5: ( ^( PLSQL_RESERVED_START UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( INCREMENT_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( MAXVALUE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( MINVALUE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| ^( CACHE_VK UNSIGNED_INTEGER ) -> template( \"not implemented: sequence_spec\"| NOMAXVALUE_VK -> template( \"not implemented: sequence_spec\"| NOMINVALUE_VK -> template( \"not implemented: sequence_spec\"| CYCLE_VK -> template( \"not implemented: sequence_spec\"| NOCYCLE_VK -> template( \"not implemented: sequence_spec\"| NOCACHE_VK -> template( \"not implemented: sequence_spec\"| SQL92_RESERVED_ORDER -> template( \"not implemented: sequence_spec\"| NOORDER_VK -> template( \"not implemented: sequence_spec\")
			int alt157=12;
			switch ( input.LA(1) ) {
			case PLSQL_RESERVED_START:
				{
				alt157=1;
				}
				break;
			case INCREMENT_VK:
				{
				alt157=2;
				}
				break;
			case MAXVALUE_VK:
				{
				alt157=3;
				}
				break;
			case MINVALUE_VK:
				{
				alt157=4;
				}
				break;
			case CACHE_VK:
				{
				alt157=5;
				}
				break;
			case NOMAXVALUE_VK:
				{
				alt157=6;
				}
				break;
			case NOMINVALUE_VK:
				{
				alt157=7;
				}
				break;
			case CYCLE_VK:
				{
				alt157=8;
				}
				break;
			case NOCYCLE_VK:
				{
				alt157=9;
				}
				break;
			case NOCACHE_VK:
				{
				alt157=10;
				}
				break;
			case SQL92_RESERVED_ORDER:
				{
				alt157=11;
				}
				break;
			case NOORDER_VK:
				{
				alt157=12;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 157, 0, input);
				throw nvae;
			}
			switch (alt157) {
				case 1 :
					// PLSQLPrinter.g:689:10: ^( PLSQL_RESERVED_START UNSIGNED_INTEGER )
					{
					match(input,PLSQL_RESERVED_START,FOLLOW_PLSQL_RESERVED_START_in_sequence_spec6415); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6417); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 690:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:691:10: ^( INCREMENT_VK UNSIGNED_INTEGER )
					{
					match(input,INCREMENT_VK,FOLLOW_INCREMENT_VK_in_sequence_spec6444); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6446); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 692:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:693:10: ^( MAXVALUE_VK UNSIGNED_INTEGER )
					{
					match(input,MAXVALUE_VK,FOLLOW_MAXVALUE_VK_in_sequence_spec6473); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6475); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 694:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:695:10: ^( MINVALUE_VK UNSIGNED_INTEGER )
					{
					match(input,MINVALUE_VK,FOLLOW_MINVALUE_VK_in_sequence_spec6502); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6504); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 696:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:697:10: ^( CACHE_VK UNSIGNED_INTEGER )
					{
					match(input,CACHE_VK,FOLLOW_CACHE_VK_in_sequence_spec6531); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6533); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 698:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:699:10: NOMAXVALUE_VK
					{
					match(input,NOMAXVALUE_VK,FOLLOW_NOMAXVALUE_VK_in_sequence_spec6559); 
					// TEMPLATE REWRITE
					// 700:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:701:10: NOMINVALUE_VK
					{
					match(input,NOMINVALUE_VK,FOLLOW_NOMINVALUE_VK_in_sequence_spec6584); 
					// TEMPLATE REWRITE
					// 702:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:703:10: CYCLE_VK
					{
					match(input,CYCLE_VK,FOLLOW_CYCLE_VK_in_sequence_spec6609); 
					// TEMPLATE REWRITE
					// 704:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:705:10: NOCYCLE_VK
					{
					match(input,NOCYCLE_VK,FOLLOW_NOCYCLE_VK_in_sequence_spec6634); 
					// TEMPLATE REWRITE
					// 706:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:707:10: NOCACHE_VK
					{
					match(input,NOCACHE_VK,FOLLOW_NOCACHE_VK_in_sequence_spec6659); 
					// TEMPLATE REWRITE
					// 708:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:709:10: SQL92_RESERVED_ORDER
					{
					match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_sequence_spec6684); 
					// TEMPLATE REWRITE
					// 710:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:711:10: NOORDER_VK
					{
					match(input,NOORDER_VK,FOLLOW_NOORDER_VK_in_sequence_spec6709); 
					// TEMPLATE REWRITE
					// 712:5: -> template( \"not implemented: sequence_spec\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: sequence_spec");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sequence_spec"


	public static class invoker_rights_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "invoker_rights_clause"
	// PLSQLPrinter.g:721:1: invoker_rights_clause : ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) ) -> template( \"not implemented: invoker_rights_clause\";
	public final PLSQLPrinter.invoker_rights_clause_return invoker_rights_clause() throws RecognitionException {
		PLSQLPrinter.invoker_rights_clause_return retval = new PLSQLPrinter.invoker_rights_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:722:5: ( ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) ) -> template( \"not implemented: invoker_rights_clause\")
			// PLSQLPrinter.g:722:10: ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) )
			{
			match(input,AUTHID_VK,FOLLOW_AUTHID_VK_in_invoker_rights_clause6750); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:722:22: ( CURRENT_USER_VK | DEFINER_VK )
			int alt158=2;
			int LA158_0 = input.LA(1);
			if ( (LA158_0==CURRENT_USER_VK) ) {
				alt158=1;
			}
			else if ( (LA158_0==DEFINER_VK) ) {
				alt158=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 158, 0, input);
				throw nvae;
			}

			switch (alt158) {
				case 1 :
					// PLSQLPrinter.g:722:23: CURRENT_USER_VK
					{
					match(input,CURRENT_USER_VK,FOLLOW_CURRENT_USER_VK_in_invoker_rights_clause6753); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:722:39: DEFINER_VK
					{
					match(input,DEFINER_VK,FOLLOW_DEFINER_VK_in_invoker_rights_clause6755); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 723:5: -> template( \"not implemented: invoker_rights_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: invoker_rights_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "invoker_rights_clause"


	public static class compiler_parameters_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "compiler_parameters_clause"
	// PLSQLPrinter.g:726:1: compiler_parameters_clause : ^( COMPILER_PARAMETER ^( ASSIGN id expression ) ) -> template( \"not implemented: compiler_parameters_clause\";
	public final PLSQLPrinter.compiler_parameters_clause_return compiler_parameters_clause() throws RecognitionException {
		PLSQLPrinter.compiler_parameters_clause_return retval = new PLSQLPrinter.compiler_parameters_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:727:5: ( ^( COMPILER_PARAMETER ^( ASSIGN id expression ) ) -> template( \"not implemented: compiler_parameters_clause\")
			// PLSQLPrinter.g:727:10: ^( COMPILER_PARAMETER ^( ASSIGN id expression ) )
			{
			match(input,COMPILER_PARAMETER,FOLLOW_COMPILER_PARAMETER_in_compiler_parameters_clause6792); 
			match(input, Token.DOWN, null); 
			match(input,ASSIGN,FOLLOW_ASSIGN_in_compiler_parameters_clause6795); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_id_in_compiler_parameters_clause6797);
			id();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_compiler_parameters_clause6799);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 728:5: -> template( \"not implemented: compiler_parameters_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: compiler_parameters_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compiler_parameters_clause"


	public static class call_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "call_spec"
	// PLSQLPrinter.g:731:1: call_spec : ^( LANGUAGE_VK (declaration= java_spec |declaration= c_spec ) ) -> call_spec(declaration=$declaration.st);
	public final PLSQLPrinter.call_spec_return call_spec() throws RecognitionException {
		PLSQLPrinter.call_spec_return retval = new PLSQLPrinter.call_spec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope declaration =null;

		try {
			// PLSQLPrinter.g:732:5: ( ^( LANGUAGE_VK (declaration= java_spec |declaration= c_spec ) ) -> call_spec(declaration=$declaration.st))
			// PLSQLPrinter.g:732:10: ^( LANGUAGE_VK (declaration= java_spec |declaration= c_spec ) )
			{
			match(input,LANGUAGE_VK,FOLLOW_LANGUAGE_VK_in_call_spec6836); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:732:24: (declaration= java_spec |declaration= c_spec )
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==JAVA_VK) ) {
				alt159=1;
			}
			else if ( (LA159_0==C_VK) ) {
				alt159=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 159, 0, input);
				throw nvae;
			}

			switch (alt159) {
				case 1 :
					// PLSQLPrinter.g:732:26: declaration= java_spec
					{
					pushFollow(FOLLOW_java_spec_in_call_spec6842);
					declaration=java_spec();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:732:50: declaration= c_spec
					{
					pushFollow(FOLLOW_c_spec_in_call_spec6848);
					declaration=c_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 733:5: -> call_spec(declaration=$declaration.st)
			{
				retval.st = templateLib.getInstanceOf("call_spec",new STAttrMap().put("declaration", (declaration!=null?((StringTemplate)declaration.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "call_spec"


	public static class java_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "java_spec"
	// PLSQLPrinter.g:738:1: java_spec : ^( JAVA_VK CHAR_STRING ) -> call_spec_java(name=$CHAR_STRING.text);
	public final PLSQLPrinter.java_spec_return java_spec() throws RecognitionException {
		PLSQLPrinter.java_spec_return retval = new PLSQLPrinter.java_spec_return();
		retval.start = input.LT(1);

		CommonTree CHAR_STRING66=null;

		try {
			// PLSQLPrinter.g:739:5: ( ^( JAVA_VK CHAR_STRING ) -> call_spec_java(name=$CHAR_STRING.text))
			// PLSQLPrinter.g:739:10: ^( JAVA_VK CHAR_STRING )
			{
			match(input,JAVA_VK,FOLLOW_JAVA_VK_in_java_spec6889); 
			match(input, Token.DOWN, null); 
			CHAR_STRING66=(CommonTree)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_java_spec6891); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 740:5: -> call_spec_java(name=$CHAR_STRING.text)
			{
				retval.st = templateLib.getInstanceOf("call_spec_java",new STAttrMap().put("name", (CHAR_STRING66!=null?CHAR_STRING66.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "java_spec"


	public static class c_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "c_spec"
	// PLSQLPrinter.g:743:1: c_spec : ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? ) -> template( \"not implemented: c_spec\";
	public final PLSQLPrinter.c_spec_return c_spec() throws RecognitionException {
		PLSQLPrinter.c_spec_return retval = new PLSQLPrinter.c_spec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:744:5: ( ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? ) -> template( \"not implemented: c_spec\")
			// PLSQLPrinter.g:744:10: ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? )
			{
			match(input,C_VK,FOLLOW_C_VK_in_c_spec6928); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:744:17: ( CHAR_STRING )?
			int alt160=2;
			int LA160_0 = input.LA(1);
			if ( (LA160_0==CHAR_STRING) ) {
				alt160=1;
			}
			switch (alt160) {
				case 1 :
					// PLSQLPrinter.g:744:17: CHAR_STRING
					{
					match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_c_spec6930); 
					}
					break;

			}

			// PLSQLPrinter.g:744:30: ( CONTEXT_VK )?
			int alt161=2;
			int LA161_0 = input.LA(1);
			if ( (LA161_0==CONTEXT_VK) ) {
				alt161=1;
			}
			switch (alt161) {
				case 1 :
					// PLSQLPrinter.g:744:30: CONTEXT_VK
					{
					match(input,CONTEXT_VK,FOLLOW_CONTEXT_VK_in_c_spec6933); 
					}
					break;

			}

			match(input,LIBRARY_VK,FOLLOW_LIBRARY_VK_in_c_spec6937); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_id_in_c_spec6939);
			id();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:744:59: ( c_agent_in_clause )?
			int alt162=2;
			int LA162_0 = input.LA(1);
			if ( (LA162_0==AGENT_VK) ) {
				alt162=1;
			}
			switch (alt162) {
				case 1 :
					// PLSQLPrinter.g:744:59: c_agent_in_clause
					{
					pushFollow(FOLLOW_c_agent_in_clause_in_c_spec6942);
					c_agent_in_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:744:78: ( c_parameters_clause )?
			int alt163=2;
			int LA163_0 = input.LA(1);
			if ( (LA163_0==PARAMETERS_VK) ) {
				alt163=1;
			}
			switch (alt163) {
				case 1 :
					// PLSQLPrinter.g:744:78: c_parameters_clause
					{
					pushFollow(FOLLOW_c_parameters_clause_in_c_spec6945);
					c_parameters_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 745:5: -> template( \"not implemented: c_spec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: c_spec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "c_spec"


	public static class c_agent_in_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "c_agent_in_clause"
	// PLSQLPrinter.g:748:1: c_agent_in_clause : ^( AGENT_VK ( expression )+ ) -> template( \"not implemented: c_agent_in_clause\";
	public final PLSQLPrinter.c_agent_in_clause_return c_agent_in_clause() throws RecognitionException {
		PLSQLPrinter.c_agent_in_clause_return retval = new PLSQLPrinter.c_agent_in_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:749:5: ( ^( AGENT_VK ( expression )+ ) -> template( \"not implemented: c_agent_in_clause\")
			// PLSQLPrinter.g:749:10: ^( AGENT_VK ( expression )+ )
			{
			match(input,AGENT_VK,FOLLOW_AGENT_VK_in_c_agent_in_clause6982); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:749:21: ( expression )+
			int cnt164=0;
			loop164:
			while (true) {
				int alt164=2;
				int LA164_0 = input.LA(1);
				if ( (LA164_0==EXPR||LA164_0==LOGIC_EXPR) ) {
					alt164=1;
				}

				switch (alt164) {
				case 1 :
					// PLSQLPrinter.g:749:21: expression
					{
					pushFollow(FOLLOW_expression_in_c_agent_in_clause6984);
					expression();
					state._fsp--;

					}
					break;

				default :
					if ( cnt164 >= 1 ) break loop164;
					EarlyExitException eee = new EarlyExitException(164, input);
					throw eee;
				}
				cnt164++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 750:5: -> template( \"not implemented: c_agent_in_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: c_agent_in_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "c_agent_in_clause"


	public static class c_parameters_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "c_parameters_clause"
	// PLSQLPrinter.g:753:1: c_parameters_clause : ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) ) -> template( \"not implemented: c_parameters_clause\";
	public final PLSQLPrinter.c_parameters_clause_return c_parameters_clause() throws RecognitionException {
		PLSQLPrinter.c_parameters_clause_return retval = new PLSQLPrinter.c_parameters_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:754:5: ( ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) ) -> template( \"not implemented: c_parameters_clause\")
			// PLSQLPrinter.g:754:10: ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) )
			{
			match(input,PARAMETERS_VK,FOLLOW_PARAMETERS_VK_in_c_parameters_clause7021); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:754:26: ( THREE_DOTS | ( expression )+ )
			int alt166=2;
			int LA166_0 = input.LA(1);
			if ( (LA166_0==THREE_DOTS) ) {
				alt166=1;
			}
			else if ( (LA166_0==EXPR||LA166_0==LOGIC_EXPR) ) {
				alt166=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 166, 0, input);
				throw nvae;
			}

			switch (alt166) {
				case 1 :
					// PLSQLPrinter.g:754:27: THREE_DOTS
					{
					match(input,THREE_DOTS,FOLLOW_THREE_DOTS_in_c_parameters_clause7024); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:754:38: ( expression )+
					{
					// PLSQLPrinter.g:754:38: ( expression )+
					int cnt165=0;
					loop165:
					while (true) {
						int alt165=2;
						int LA165_0 = input.LA(1);
						if ( (LA165_0==EXPR||LA165_0==LOGIC_EXPR) ) {
							alt165=1;
						}

						switch (alt165) {
						case 1 :
							// PLSQLPrinter.g:754:38: expression
							{
							pushFollow(FOLLOW_expression_in_c_parameters_clause7026);
							expression();
							state._fsp--;

							}
							break;

						default :
							if ( cnt165 >= 1 ) break loop165;
							EarlyExitException eee = new EarlyExitException(165, input);
							throw eee;
						}
						cnt165++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 755:5: -> template( \"not implemented: c_parameters_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: c_parameters_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "c_parameters_clause"


	public static class parameter_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parameter"
	// PLSQLPrinter.g:760:1: parameter : ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? ) -> parameter(name=$parameter_name.stis_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullis_inout=$INOUT_VK != nullis_nocopy=falsetype=$type_spec.stdefault_value_part=$default_value_part.st);
	public final PLSQLPrinter.parameter_return parameter() throws RecognitionException {
		PLSQLPrinter.parameter_return retval = new PLSQLPrinter.parameter_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_IN68=null;
		CommonTree OUT_VK69=null;
		CommonTree INOUT_VK70=null;
		TreeRuleReturnScope parameter_name67 =null;
		TreeRuleReturnScope type_spec71 =null;
		TreeRuleReturnScope default_value_part72 =null;

		try {
			// PLSQLPrinter.g:761:5: ( ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? ) -> parameter(name=$parameter_name.stis_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullis_inout=$INOUT_VK != nullis_nocopy=falsetype=$type_spec.stdefault_value_part=$default_value_part.st))
			// PLSQLPrinter.g:761:10: ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_parameter7066); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_parameter7068);
			parameter_name67=parameter_name();
			state._fsp--;

			// PLSQLPrinter.g:761:37: ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )*
			loop167:
			while (true) {
				int alt167=4;
				switch ( input.LA(1) ) {
				case SQL92_RESERVED_IN:
					{
					alt167=1;
					}
					break;
				case OUT_VK:
					{
					alt167=2;
					}
					break;
				case INOUT_VK:
					{
					alt167=3;
					}
					break;
				}
				switch (alt167) {
				case 1 :
					// PLSQLPrinter.g:761:38: SQL92_RESERVED_IN
					{
					SQL92_RESERVED_IN68=(CommonTree)match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_parameter7071); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:761:56: OUT_VK
					{
					OUT_VK69=(CommonTree)match(input,OUT_VK,FOLLOW_OUT_VK_in_parameter7073); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:761:63: INOUT_VK
					{
					INOUT_VK70=(CommonTree)match(input,INOUT_VK,FOLLOW_INOUT_VK_in_parameter7075); 
					}
					break;

				default :
					break loop167;
				}
			}

			// PLSQLPrinter.g:761:74: ( type_spec )?
			int alt168=2;
			int LA168_0 = input.LA(1);
			if ( (LA168_0==CUSTOM_TYPE||LA168_0==INTERVAL_DATATYPE||LA168_0==NATIVE_DATATYPE) ) {
				alt168=1;
			}
			switch (alt168) {
				case 1 :
					// PLSQLPrinter.g:761:74: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_parameter7079);
					type_spec71=type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:761:85: ( default_value_part )?
			int alt169=2;
			int LA169_0 = input.LA(1);
			if ( (LA169_0==DEFAULT_VALUE) ) {
				alt169=1;
			}
			switch (alt169) {
				case 1 :
					// PLSQLPrinter.g:761:85: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_parameter7082);
					default_value_part72=default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 762:5: -> parameter(name=$parameter_name.stis_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullis_inout=$INOUT_VK != nullis_nocopy=falsetype=$type_spec.stdefault_value_part=$default_value_part.st)
			{
				retval.st = templateLib.getInstanceOf("parameter",new STAttrMap().put("name", (parameter_name67!=null?((StringTemplate)parameter_name67.getTemplate()):null)).put("is_in", SQL92_RESERVED_IN68 != null).put("is_out", OUT_VK69 != null).put("is_inout", INOUT_VK70 != null).put("is_nocopy", false).put("type", (type_spec71!=null?((StringTemplate)type_spec71.getTemplate()):null)).put("default_value_part", (default_value_part72!=null?((StringTemplate)default_value_part72.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter"


	public static class default_value_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "default_value_part"
	// PLSQLPrinter.g:767:1: default_value_part : ^( DEFAULT_VALUE expression ) -> default_value_part(expression=$expression.st);
	public final PLSQLPrinter.default_value_part_return default_value_part() throws RecognitionException {
		PLSQLPrinter.default_value_part_return retval = new PLSQLPrinter.default_value_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression73 =null;

		try {
			// PLSQLPrinter.g:768:5: ( ^( DEFAULT_VALUE expression ) -> default_value_part(expression=$expression.st))
			// PLSQLPrinter.g:768:10: ^( DEFAULT_VALUE expression )
			{
			match(input,DEFAULT_VALUE,FOLLOW_DEFAULT_VALUE_in_default_value_part7172); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_default_value_part7174);
			expression73=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 769:5: -> default_value_part(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("default_value_part",new STAttrMap().put("expression", (expression73!=null?((StringTemplate)expression73.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "default_value_part"


	public static class declare_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "declare_spec"
	// PLSQLPrinter.g:778:1: declare_spec : ( variable_declaration -> { $variable_declaration.st }| subtype_declaration -> { $subtype_declaration.st }| cursor_declaration -> { $cursor_declaration.st }| exception_declaration -> { $exception_declaration.st }| pragma_declaration -> { $pragma_declaration.st }| record_declaration -> { $record_declaration.st }| table_declaration -> { $table_declaration.st }| create_procedure_body -> { $create_procedure_body.st }| create_function_body -> { $create_function_body.st }| create_type -> { $create_type.st });
	public final PLSQLPrinter.declare_spec_return declare_spec() throws RecognitionException {
		PLSQLPrinter.declare_spec_return retval = new PLSQLPrinter.declare_spec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope variable_declaration74 =null;
		TreeRuleReturnScope subtype_declaration75 =null;
		TreeRuleReturnScope cursor_declaration76 =null;
		TreeRuleReturnScope exception_declaration77 =null;
		TreeRuleReturnScope pragma_declaration78 =null;
		TreeRuleReturnScope record_declaration79 =null;
		TreeRuleReturnScope table_declaration80 =null;
		TreeRuleReturnScope create_procedure_body81 =null;
		TreeRuleReturnScope create_function_body82 =null;
		TreeRuleReturnScope create_type83 =null;

		try {
			// PLSQLPrinter.g:779:5: ( variable_declaration -> { $variable_declaration.st }| subtype_declaration -> { $subtype_declaration.st }| cursor_declaration -> { $cursor_declaration.st }| exception_declaration -> { $exception_declaration.st }| pragma_declaration -> { $pragma_declaration.st }| record_declaration -> { $record_declaration.st }| table_declaration -> { $table_declaration.st }| create_procedure_body -> { $create_procedure_body.st }| create_function_body -> { $create_function_body.st }| create_type -> { $create_type.st })
			int alt170=10;
			switch ( input.LA(1) ) {
			case VARIABLE_DECLARE:
				{
				alt170=1;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt170=2;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt170=3;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt170=4;
				}
				break;
			case PRAGMA_DECLARE:
				{
				alt170=5;
				}
				break;
			case RECORD_TYPE_DECLARE_FIELDS:
			case RECORD_TYPE_DECLARE_REFCURSOR:
			case RECORD_VAR_DECLARE:
				{
				alt170=6;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt170=7;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt170=8;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt170=9;
				}
				break;
			case CREATE_TYPE_BODY:
			case CREATE_TYPE_SPEC:
				{
				alt170=10;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 170, 0, input);
				throw nvae;
			}
			switch (alt170) {
				case 1 :
					// PLSQLPrinter.g:779:10: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_declare_spec7216);
					variable_declaration74=variable_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 779:31: -> { $variable_declaration.st }
					{
						retval.st =  (variable_declaration74!=null?((StringTemplate)variable_declaration74.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:780:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_declare_spec7232);
					subtype_declaration75=subtype_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 780:31: -> { $subtype_declaration.st }
					{
						retval.st =  (subtype_declaration75!=null?((StringTemplate)subtype_declaration75.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:781:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_declare_spec7248);
					cursor_declaration76=cursor_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 781:30: -> { $cursor_declaration.st }
					{
						retval.st =  (cursor_declaration76!=null?((StringTemplate)cursor_declaration76.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:782:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_declare_spec7264);
					exception_declaration77=exception_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 782:33: -> { $exception_declaration.st }
					{
						retval.st =  (exception_declaration77!=null?((StringTemplate)exception_declaration77.getTemplate()):null) ;
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:783:11: pragma_declaration
					{
					pushFollow(FOLLOW_pragma_declaration_in_declare_spec7280);
					pragma_declaration78=pragma_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 783:30: -> { $pragma_declaration.st }
					{
						retval.st =  (pragma_declaration78!=null?((StringTemplate)pragma_declaration78.getTemplate()):null) ;
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:784:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_declare_spec7296);
					record_declaration79=record_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 784:30: -> { $record_declaration.st }
					{
						retval.st =  (record_declaration79!=null?((StringTemplate)record_declaration79.getTemplate()):null) ;
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:785:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_declare_spec7312);
					table_declaration80=table_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 785:29: -> { $table_declaration.st }
					{
						retval.st =  (table_declaration80!=null?((StringTemplate)table_declaration80.getTemplate()):null) ;
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:786:11: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_declare_spec7328);
					create_procedure_body81=create_procedure_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 786:33: -> { $create_procedure_body.st }
					{
						retval.st =  (create_procedure_body81!=null?((StringTemplate)create_procedure_body81.getTemplate()):null) ;
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:787:11: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_declare_spec7344);
					create_function_body82=create_function_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 787:32: -> { $create_function_body.st }
					{
						retval.st =  (create_function_body82!=null?((StringTemplate)create_function_body82.getTemplate()):null) ;
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:788:11: create_type
					{
					pushFollow(FOLLOW_create_type_in_declare_spec7360);
					create_type83=create_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 788:23: -> { $create_type.st }
					{
						retval.st =  (create_type83!=null?((StringTemplate)create_type83.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "declare_spec"


	public static class variable_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "variable_declaration"
	// PLSQLPrinter.g:792:1: variable_declaration : ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> variable_declaration(name=$variable_name.sttype=$type_spec.stis_constant=$CONSTANT_VK != nullis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st);
	public final PLSQLPrinter.variable_declaration_return variable_declaration() throws RecognitionException {
		PLSQLPrinter.variable_declaration_return retval = new PLSQLPrinter.variable_declaration_return();
		retval.start = input.LT(1);

		CommonTree CONSTANT_VK86=null;
		CommonTree SQL92_RESERVED_NULL87=null;
		TreeRuleReturnScope variable_name84 =null;
		TreeRuleReturnScope type_spec85 =null;
		TreeRuleReturnScope default_value_part88 =null;

		try {
			// PLSQLPrinter.g:793:5: ( ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> variable_declaration(name=$variable_name.sttype=$type_spec.stis_constant=$CONSTANT_VK != nullis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st))
			// PLSQLPrinter.g:793:10: ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? )
			{
			match(input,VARIABLE_DECLARE,FOLLOW_VARIABLE_DECLARE_in_variable_declaration7386); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_variable_name_in_variable_declaration7388);
			variable_name84=variable_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_variable_declaration7390);
			type_spec85=type_spec();
			state._fsp--;

			// PLSQLPrinter.g:793:53: ( CONSTANT_VK )?
			int alt171=2;
			int LA171_0 = input.LA(1);
			if ( (LA171_0==CONSTANT_VK) ) {
				alt171=1;
			}
			switch (alt171) {
				case 1 :
					// PLSQLPrinter.g:793:53: CONSTANT_VK
					{
					CONSTANT_VK86=(CommonTree)match(input,CONSTANT_VK,FOLLOW_CONSTANT_VK_in_variable_declaration7392); 
					}
					break;

			}

			// PLSQLPrinter.g:793:66: ( SQL92_RESERVED_NULL )?
			int alt172=2;
			int LA172_0 = input.LA(1);
			if ( (LA172_0==SQL92_RESERVED_NULL) ) {
				alt172=1;
			}
			switch (alt172) {
				case 1 :
					// PLSQLPrinter.g:793:66: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL87=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_variable_declaration7395); 
					}
					break;

			}

			// PLSQLPrinter.g:793:87: ( default_value_part )?
			int alt173=2;
			int LA173_0 = input.LA(1);
			if ( (LA173_0==DEFAULT_VALUE) ) {
				alt173=1;
			}
			switch (alt173) {
				case 1 :
					// PLSQLPrinter.g:793:87: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_variable_declaration7398);
					default_value_part88=default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 794:5: -> variable_declaration(name=$variable_name.sttype=$type_spec.stis_constant=$CONSTANT_VK != nullis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st)
			{
				retval.st = templateLib.getInstanceOf("variable_declaration",new STAttrMap().put("name", (variable_name84!=null?((StringTemplate)variable_name84.getTemplate()):null)).put("type", (type_spec85!=null?((StringTemplate)type_spec85.getTemplate()):null)).put("is_constant", CONSTANT_VK86 != null).put("is_not_null", SQL92_RESERVED_NULL87 != null).put("default_value_part", (default_value_part88!=null?((StringTemplate)default_value_part88.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "variable_declaration"


	public static class subtype_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subtype_declaration"
	// PLSQLPrinter.g:799:1: subtype_declaration : ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? ) -> subtype_declaration(name=$type_name.sttype_spec=$type_spec.strange=$subtype_range.stis_not_null=$SQL92_RESERVED_NULL != null);
	public final PLSQLPrinter.subtype_declaration_return subtype_declaration() throws RecognitionException {
		PLSQLPrinter.subtype_declaration_return retval = new PLSQLPrinter.subtype_declaration_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL92=null;
		TreeRuleReturnScope type_name89 =null;
		TreeRuleReturnScope type_spec90 =null;
		TreeRuleReturnScope subtype_range91 =null;

		try {
			// PLSQLPrinter.g:800:5: ( ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? ) -> subtype_declaration(name=$type_name.sttype_spec=$type_spec.strange=$subtype_range.stis_not_null=$SQL92_RESERVED_NULL != null))
			// PLSQLPrinter.g:800:10: ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? )
			{
			match(input,SUBTYPE_DECLARE,FOLLOW_SUBTYPE_DECLARE_in_subtype_declaration7483); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_subtype_declaration7485);
			type_name89=type_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_subtype_declaration7487);
			type_spec90=type_spec();
			state._fsp--;

			// PLSQLPrinter.g:800:48: ( SQL92_RESERVED_NULL )?
			int alt174=2;
			int LA174_0 = input.LA(1);
			if ( (LA174_0==SQL92_RESERVED_NULL) ) {
				alt174=1;
			}
			switch (alt174) {
				case 1 :
					// PLSQLPrinter.g:800:48: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL92=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_subtype_declaration7489); 
					}
					break;

			}

			// PLSQLPrinter.g:800:69: ( subtype_range )?
			int alt175=2;
			int LA175_0 = input.LA(1);
			if ( (LA175_0==RANGE_VK) ) {
				alt175=1;
			}
			switch (alt175) {
				case 1 :
					// PLSQLPrinter.g:800:69: subtype_range
					{
					pushFollow(FOLLOW_subtype_range_in_subtype_declaration7492);
					subtype_range91=subtype_range();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 801:5: -> subtype_declaration(name=$type_name.sttype_spec=$type_spec.strange=$subtype_range.stis_not_null=$SQL92_RESERVED_NULL != null)
			{
				retval.st = templateLib.getInstanceOf("subtype_declaration",new STAttrMap().put("name", (type_name89!=null?((StringTemplate)type_name89.getTemplate()):null)).put("type_spec", (type_spec90!=null?((StringTemplate)type_spec90.getTemplate()):null)).put("range", (subtype_range91!=null?((StringTemplate)subtype_range91.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL92 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subtype_declaration"


	public static class subtype_range_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subtype_range"
	// PLSQLPrinter.g:806:1: subtype_range : ^( RANGE_VK e1= expression e2= expression ) -> subtype_range(low_bound=$e1.sthigh_bound=$e2.st);
	public final PLSQLPrinter.subtype_range_return subtype_range() throws RecognitionException {
		PLSQLPrinter.subtype_range_return retval = new PLSQLPrinter.subtype_range_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope e1 =null;
		TreeRuleReturnScope e2 =null;

		try {
			// PLSQLPrinter.g:807:5: ( ^( RANGE_VK e1= expression e2= expression ) -> subtype_range(low_bound=$e1.sthigh_bound=$e2.st))
			// PLSQLPrinter.g:807:10: ^( RANGE_VK e1= expression e2= expression )
			{
			match(input,RANGE_VK,FOLLOW_RANGE_VK_in_subtype_range7570); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_subtype_range7574);
			e1=expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_subtype_range7578);
			e2=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 808:5: -> subtype_range(low_bound=$e1.sthigh_bound=$e2.st)
			{
				retval.st = templateLib.getInstanceOf("subtype_range",new STAttrMap().put("low_bound", (e1!=null?((StringTemplate)e1.getTemplate()):null)).put("high_bound", (e2!=null?((StringTemplate)e2.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subtype_range"


	public static class cursor_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_declaration"
	// PLSQLPrinter.g:812:1: cursor_declaration : ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS (parameters+= parameter_spec )* ) ) -> cursor_declaration(cursor_name=$cursor_name.stparameters=$parameterstype_spec=$type_spec.stselect_statement=$select_statement.st);
	public final PLSQLPrinter.cursor_declaration_return cursor_declaration() throws RecognitionException {
		PLSQLPrinter.cursor_declaration_return retval = new PLSQLPrinter.cursor_declaration_return();
		retval.start = input.LT(1);

		List<Object> list_parameters=null;
		TreeRuleReturnScope cursor_name93 =null;
		TreeRuleReturnScope type_spec94 =null;
		TreeRuleReturnScope select_statement95 =null;
		RuleReturnScope parameters = null;
		try {
			// PLSQLPrinter.g:813:5: ( ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS (parameters+= parameter_spec )* ) ) -> cursor_declaration(cursor_name=$cursor_name.stparameters=$parameterstype_spec=$type_spec.stselect_statement=$select_statement.st))
			// PLSQLPrinter.g:813:10: ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS (parameters+= parameter_spec )* ) )
			{
			match(input,CURSOR_DECLARE,FOLLOW_CURSOR_DECLARE_in_cursor_declaration7621); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_cursor_declaration7623);
			cursor_name93=cursor_name();
			state._fsp--;

			// PLSQLPrinter.g:813:39: ( type_spec )?
			int alt176=2;
			int LA176_0 = input.LA(1);
			if ( (LA176_0==CUSTOM_TYPE||LA176_0==INTERVAL_DATATYPE||LA176_0==NATIVE_DATATYPE) ) {
				alt176=1;
			}
			switch (alt176) {
				case 1 :
					// PLSQLPrinter.g:813:39: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_cursor_declaration7625);
					type_spec94=type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:813:50: ( select_statement )?
			int alt177=2;
			int LA177_0 = input.LA(1);
			if ( (LA177_0==SELECT_STATEMENT) ) {
				alt177=1;
			}
			switch (alt177) {
				case 1 :
					// PLSQLPrinter.g:813:50: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_cursor_declaration7628);
					select_statement95=select_statement();
					state._fsp--;

					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_cursor_declaration7632); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:813:91: (parameters+= parameter_spec )*
				loop178:
				while (true) {
					int alt178=2;
					int LA178_0 = input.LA(1);
					if ( (LA178_0==PARAMETER) ) {
						alt178=1;
					}

					switch (alt178) {
					case 1 :
						// PLSQLPrinter.g:813:91: parameters+= parameter_spec
						{
						pushFollow(FOLLOW_parameter_spec_in_cursor_declaration7636);
						parameters=parameter_spec();
						state._fsp--;

						if (list_parameters==null) list_parameters=new ArrayList<Object>();
						list_parameters.add(parameters.getTemplate());
						}
						break;

					default :
						break loop178;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 814:5: -> cursor_declaration(cursor_name=$cursor_name.stparameters=$parameterstype_spec=$type_spec.stselect_statement=$select_statement.st)
			{
				retval.st = templateLib.getInstanceOf("cursor_declaration",new STAttrMap().put("cursor_name", (cursor_name93!=null?((StringTemplate)cursor_name93.getTemplate()):null)).put("parameters", list_parameters).put("type_spec", (type_spec94!=null?((StringTemplate)type_spec94.getTemplate()):null)).put("select_statement", (select_statement95!=null?((StringTemplate)select_statement95.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_declaration"


	public static class parameter_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parameter_spec"
	// PLSQLPrinter.g:819:1: parameter_spec : ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) -> parameter_spec(parameter_name=$parameter_name.sttype_spec=$type_spec.stdefault_value_part=$default_value_part.st);
	public final PLSQLPrinter.parameter_spec_return parameter_spec() throws RecognitionException {
		PLSQLPrinter.parameter_spec_return retval = new PLSQLPrinter.parameter_spec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope parameter_name96 =null;
		TreeRuleReturnScope type_spec97 =null;
		TreeRuleReturnScope default_value_part98 =null;

		try {
			// PLSQLPrinter.g:820:5: ( ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) -> parameter_spec(parameter_name=$parameter_name.sttype_spec=$type_spec.stdefault_value_part=$default_value_part.st))
			// PLSQLPrinter.g:820:10: ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_parameter_spec7712); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_parameter_spec7714);
			parameter_name96=parameter_name();
			state._fsp--;

			// PLSQLPrinter.g:820:37: ( type_spec )?
			int alt179=2;
			int LA179_0 = input.LA(1);
			if ( (LA179_0==CUSTOM_TYPE||LA179_0==INTERVAL_DATATYPE||LA179_0==NATIVE_DATATYPE) ) {
				alt179=1;
			}
			switch (alt179) {
				case 1 :
					// PLSQLPrinter.g:820:37: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_parameter_spec7716);
					type_spec97=type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:820:48: ( default_value_part )?
			int alt180=2;
			int LA180_0 = input.LA(1);
			if ( (LA180_0==DEFAULT_VALUE) ) {
				alt180=1;
			}
			switch (alt180) {
				case 1 :
					// PLSQLPrinter.g:820:48: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_parameter_spec7719);
					default_value_part98=default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 821:5: -> parameter_spec(parameter_name=$parameter_name.sttype_spec=$type_spec.stdefault_value_part=$default_value_part.st)
			{
				retval.st = templateLib.getInstanceOf("parameter_spec",new STAttrMap().put("parameter_name", (parameter_name96!=null?((StringTemplate)parameter_name96.getTemplate()):null)).put("type_spec", (type_spec97!=null?((StringTemplate)type_spec97.getTemplate()):null)).put("default_value_part", (default_value_part98!=null?((StringTemplate)default_value_part98.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter_spec"


	public static class exception_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_declaration"
	// PLSQLPrinter.g:826:1: exception_declaration : ^( EXCEPTION_DECLARE exception_name ) -> exception_declaration(name=$exception_name.st);
	public final PLSQLPrinter.exception_declaration_return exception_declaration() throws RecognitionException {
		PLSQLPrinter.exception_declaration_return retval = new PLSQLPrinter.exception_declaration_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope exception_name99 =null;

		try {
			// PLSQLPrinter.g:827:5: ( ^( EXCEPTION_DECLARE exception_name ) -> exception_declaration(name=$exception_name.st))
			// PLSQLPrinter.g:827:10: ^( EXCEPTION_DECLARE exception_name )
			{
			match(input,EXCEPTION_DECLARE,FOLLOW_EXCEPTION_DECLARE_in_exception_declaration7789); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_exception_name_in_exception_declaration7791);
			exception_name99=exception_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 828:5: -> exception_declaration(name=$exception_name.st)
			{
				retval.st = templateLib.getInstanceOf("exception_declaration",new STAttrMap().put("name", (exception_name99!=null?((StringTemplate)exception_name99.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_declaration"


	public static class pragma_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_declaration"
	// PLSQLPrinter.g:831:1: pragma_declaration : ^( PRAGMA_DECLARE pragma_declaration_impl ) -> pragma_declaration(impl=$pragma_declaration_impl.st);
	public final PLSQLPrinter.pragma_declaration_return pragma_declaration() throws RecognitionException {
		PLSQLPrinter.pragma_declaration_return retval = new PLSQLPrinter.pragma_declaration_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope pragma_declaration_impl100 =null;

		try {
			// PLSQLPrinter.g:832:5: ( ^( PRAGMA_DECLARE pragma_declaration_impl ) -> pragma_declaration(impl=$pragma_declaration_impl.st))
			// PLSQLPrinter.g:832:10: ^( PRAGMA_DECLARE pragma_declaration_impl )
			{
			match(input,PRAGMA_DECLARE,FOLLOW_PRAGMA_DECLARE_in_pragma_declaration7841); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_pragma_declaration_impl_in_pragma_declaration7843);
			pragma_declaration_impl100=pragma_declaration_impl();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 833:5: -> pragma_declaration(impl=$pragma_declaration_impl.st)
			{
				retval.st = templateLib.getInstanceOf("pragma_declaration",new STAttrMap().put("impl", (pragma_declaration_impl100!=null?((StringTemplate)pragma_declaration_impl100.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_declaration"


	public static class pragma_declaration_impl_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_declaration_impl"
	// PLSQLPrinter.g:836:1: pragma_declaration_impl : ( SERIALLY_REUSABLE_VK -> pragma_declaration_impl_serially_reusable(| AUTONOMOUS_TRANSACTION_VK -> pragma_declaration_impl_serially_autonomous_transaction(| ^( EXCEPTION_INIT_VK exception_name constant ) -> pragma_declaration_impl_serially_exception_init(name=$exception_name.stnumeric=$constant.st)| ^( INLINE_VK id expression ) -> pragma_declaration_impl_serially_inline(id=$id.stexpression=$expression.st)| ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT |firstId= id ) (rest+= id )+ ) -> pragma_declaration_impl_serially_restrict_references(arg1=firstStrestArgs=$rest));
	public final PLSQLPrinter.pragma_declaration_impl_return pragma_declaration_impl() throws RecognitionException {
		PLSQLPrinter.pragma_declaration_impl_return retval = new PLSQLPrinter.pragma_declaration_impl_return();
		retval.start = input.LT(1);

		List<Object> list_rest=null;
		TreeRuleReturnScope firstId =null;
		TreeRuleReturnScope exception_name101 =null;
		TreeRuleReturnScope constant102 =null;
		TreeRuleReturnScope id103 =null;
		TreeRuleReturnScope expression104 =null;
		RuleReturnScope rest = null;
		 StringTemplate firstSt = null; 
		try {
			// PLSQLPrinter.g:838:5: ( SERIALLY_REUSABLE_VK -> pragma_declaration_impl_serially_reusable(| AUTONOMOUS_TRANSACTION_VK -> pragma_declaration_impl_serially_autonomous_transaction(| ^( EXCEPTION_INIT_VK exception_name constant ) -> pragma_declaration_impl_serially_exception_init(name=$exception_name.stnumeric=$constant.st)| ^( INLINE_VK id expression ) -> pragma_declaration_impl_serially_inline(id=$id.stexpression=$expression.st)| ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT |firstId= id ) (rest+= id )+ ) -> pragma_declaration_impl_serially_restrict_references(arg1=firstStrestArgs=$rest))
			int alt183=5;
			switch ( input.LA(1) ) {
			case SERIALLY_REUSABLE_VK:
				{
				alt183=1;
				}
				break;
			case AUTONOMOUS_TRANSACTION_VK:
				{
				alt183=2;
				}
				break;
			case EXCEPTION_INIT_VK:
				{
				alt183=3;
				}
				break;
			case INLINE_VK:
				{
				alt183=4;
				}
				break;
			case RESTRICT_REFERENCES_VK:
				{
				alt183=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 183, 0, input);
				throw nvae;
			}
			switch (alt183) {
				case 1 :
					// PLSQLPrinter.g:838:10: SERIALLY_REUSABLE_VK
					{
					match(input,SERIALLY_REUSABLE_VK,FOLLOW_SERIALLY_REUSABLE_VK_in_pragma_declaration_impl7888); 
					// TEMPLATE REWRITE
					// 838:31: -> pragma_declaration_impl_serially_reusable(
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_reusable");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:839:16: AUTONOMOUS_TRANSACTION_VK
					{
					match(input,AUTONOMOUS_TRANSACTION_VK,FOLLOW_AUTONOMOUS_TRANSACTION_VK_in_pragma_declaration_impl7911); 
					// TEMPLATE REWRITE
					// 839:42: -> pragma_declaration_impl_serially_autonomous_transaction(
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_autonomous_transaction");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:840:15: ^( EXCEPTION_INIT_VK exception_name constant )
					{
					match(input,EXCEPTION_INIT_VK,FOLLOW_EXCEPTION_INIT_VK_in_pragma_declaration_impl7934); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_exception_name_in_pragma_declaration_impl7936);
					exception_name101=exception_name();
					state._fsp--;

					pushFollow(FOLLOW_constant_in_pragma_declaration_impl7938);
					constant102=constant();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 841:10: -> pragma_declaration_impl_serially_exception_init(name=$exception_name.stnumeric=$constant.st)
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_exception_init",new STAttrMap().put("name", (exception_name101!=null?((StringTemplate)exception_name101.getTemplate()):null)).put("numeric", (constant102!=null?((StringTemplate)constant102.getTemplate()):null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:842:15: ^( INLINE_VK id expression )
					{
					match(input,INLINE_VK,FOLLOW_INLINE_VK_in_pragma_declaration_impl7981); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_id_in_pragma_declaration_impl7983);
					id103=id();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_pragma_declaration_impl7985);
					expression104=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 843:10: -> pragma_declaration_impl_serially_inline(id=$id.stexpression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_inline",new STAttrMap().put("id", (id103!=null?((StringTemplate)id103.getTemplate()):null)).put("expression", (expression104!=null?((StringTemplate)expression104.getTemplate()):null)));
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:844:15: ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT |firstId= id ) (rest+= id )+ )
					{
					match(input,RESTRICT_REFERENCES_VK,FOLLOW_RESTRICT_REFERENCES_VK_in_pragma_declaration_impl8028); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:845:17: ( SQL92_RESERVED_DEFAULT |firstId= id )
					int alt181=2;
					int LA181_0 = input.LA(1);
					if ( (LA181_0==SQL92_RESERVED_DEFAULT) ) {
						alt181=1;
					}
					else if ( (LA181_0==CHAR_SET_NAME||LA181_0==ID) ) {
						alt181=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 181, 0, input);
						throw nvae;
					}

					switch (alt181) {
						case 1 :
							// PLSQLPrinter.g:846:19: SQL92_RESERVED_DEFAULT
							{
							match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_declaration_impl8066); 
							 firstSt = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "default")); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:847:21: firstId= id
							{
							pushFollow(FOLLOW_id_in_pragma_declaration_impl8092);
							firstId=id();
							state._fsp--;

							 firstSt = (firstId!=null?((StringTemplate)firstId.getTemplate()):null); 
							}
							break;

					}

					// PLSQLPrinter.g:849:21: (rest+= id )+
					int cnt182=0;
					loop182:
					while (true) {
						int alt182=2;
						int LA182_0 = input.LA(1);
						if ( (LA182_0==CHAR_SET_NAME||LA182_0==ID) ) {
							alt182=1;
						}

						switch (alt182) {
						case 1 :
							// PLSQLPrinter.g:849:21: rest+= id
							{
							pushFollow(FOLLOW_id_in_pragma_declaration_impl8132);
							rest=id();
							state._fsp--;

							if (list_rest==null) list_rest=new ArrayList<Object>();
							list_rest.add(rest.getTemplate());
							}
							break;

						default :
							if ( cnt182 >= 1 ) break loop182;
							EarlyExitException eee = new EarlyExitException(182, input);
							throw eee;
						}
						cnt182++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 851:10: -> pragma_declaration_impl_serially_restrict_references(arg1=firstStrestArgs=$rest)
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_restrict_references",new STAttrMap().put("arg1", firstSt).put("restArgs", list_rest));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_declaration_impl"


	public static class record_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_declaration"
	// PLSQLPrinter.g:855:1: record_declaration : ( record_type_dec -> { $record_type_dec.st }| record_var_dec -> { $record_var_dec.st });
	public final PLSQLPrinter.record_declaration_return record_declaration() throws RecognitionException {
		PLSQLPrinter.record_declaration_return retval = new PLSQLPrinter.record_declaration_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope record_type_dec105 =null;
		TreeRuleReturnScope record_var_dec106 =null;

		try {
			// PLSQLPrinter.g:856:5: ( record_type_dec -> { $record_type_dec.st }| record_var_dec -> { $record_var_dec.st })
			int alt184=2;
			int LA184_0 = input.LA(1);
			if ( ((LA184_0 >= RECORD_TYPE_DECLARE_FIELDS && LA184_0 <= RECORD_TYPE_DECLARE_REFCURSOR)) ) {
				alt184=1;
			}
			else if ( (LA184_0==RECORD_VAR_DECLARE) ) {
				alt184=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 184, 0, input);
				throw nvae;
			}

			switch (alt184) {
				case 1 :
					// PLSQLPrinter.g:856:10: record_type_dec
					{
					pushFollow(FOLLOW_record_type_dec_in_record_declaration8198);
					record_type_dec105=record_type_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 856:26: -> { $record_type_dec.st }
					{
						retval.st =  (record_type_dec105!=null?((StringTemplate)record_type_dec105.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:857:10: record_var_dec
					{
					pushFollow(FOLLOW_record_var_dec_in_record_declaration8213);
					record_var_dec106=record_var_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 857:25: -> { $record_var_dec.st }
					{
						retval.st =  (record_var_dec106!=null?((StringTemplate)record_var_dec106.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_declaration"


	public static class record_type_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_type_dec"
	// PLSQLPrinter.g:863:1: record_type_dec : ( record_type_dec_record -> { $record_type_dec_record.st }| record_type_dec_refcursor -> { $record_type_dec_refcursor.st });
	public final PLSQLPrinter.record_type_dec_return record_type_dec() throws RecognitionException {
		PLSQLPrinter.record_type_dec_return retval = new PLSQLPrinter.record_type_dec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope record_type_dec_record107 =null;
		TreeRuleReturnScope record_type_dec_refcursor108 =null;

		try {
			// PLSQLPrinter.g:864:5: ( record_type_dec_record -> { $record_type_dec_record.st }| record_type_dec_refcursor -> { $record_type_dec_refcursor.st })
			int alt185=2;
			int LA185_0 = input.LA(1);
			if ( (LA185_0==RECORD_TYPE_DECLARE_FIELDS) ) {
				alt185=1;
			}
			else if ( (LA185_0==RECORD_TYPE_DECLARE_REFCURSOR) ) {
				alt185=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 185, 0, input);
				throw nvae;
			}

			switch (alt185) {
				case 1 :
					// PLSQLPrinter.g:864:10: record_type_dec_record
					{
					pushFollow(FOLLOW_record_type_dec_record_in_record_type_dec8240);
					record_type_dec_record107=record_type_dec_record();
					state._fsp--;

					// TEMPLATE REWRITE
					// 864:33: -> { $record_type_dec_record.st }
					{
						retval.st =  (record_type_dec_record107!=null?((StringTemplate)record_type_dec_record107.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:865:10: record_type_dec_refcursor
					{
					pushFollow(FOLLOW_record_type_dec_refcursor_in_record_type_dec8255);
					record_type_dec_refcursor108=record_type_dec_refcursor();
					state._fsp--;

					// TEMPLATE REWRITE
					// 865:36: -> { $record_type_dec_refcursor.st }
					{
						retval.st =  (record_type_dec_refcursor108!=null?((StringTemplate)record_type_dec_refcursor108.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_type_dec"


	public static class record_type_dec_record_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_type_dec_record"
	// PLSQLPrinter.g:868:1: record_type_dec_record : ^( RECORD_TYPE_DECLARE_FIELDS type_name (fields+= field_spec )+ ) -> record_type_dec_record(name=$type_name.stfield_specs=$fields);
	public final PLSQLPrinter.record_type_dec_record_return record_type_dec_record() throws RecognitionException {
		PLSQLPrinter.record_type_dec_record_return retval = new PLSQLPrinter.record_type_dec_record_return();
		retval.start = input.LT(1);

		List<Object> list_fields=null;
		TreeRuleReturnScope type_name109 =null;
		RuleReturnScope fields = null;
		try {
			// PLSQLPrinter.g:869:5: ( ^( RECORD_TYPE_DECLARE_FIELDS type_name (fields+= field_spec )+ ) -> record_type_dec_record(name=$type_name.stfield_specs=$fields))
			// PLSQLPrinter.g:869:10: ^( RECORD_TYPE_DECLARE_FIELDS type_name (fields+= field_spec )+ )
			{
			match(input,RECORD_TYPE_DECLARE_FIELDS,FOLLOW_RECORD_TYPE_DECLARE_FIELDS_in_record_type_dec_record8284); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_record_type_dec_record8286);
			type_name109=type_name();
			state._fsp--;

			// PLSQLPrinter.g:869:55: (fields+= field_spec )+
			int cnt186=0;
			loop186:
			while (true) {
				int alt186=2;
				int LA186_0 = input.LA(1);
				if ( (LA186_0==FIELD_SPEC) ) {
					alt186=1;
				}

				switch (alt186) {
				case 1 :
					// PLSQLPrinter.g:869:55: fields+= field_spec
					{
					pushFollow(FOLLOW_field_spec_in_record_type_dec_record8290);
					fields=field_spec();
					state._fsp--;

					if (list_fields==null) list_fields=new ArrayList<Object>();
					list_fields.add(fields.getTemplate());
					}
					break;

				default :
					if ( cnt186 >= 1 ) break loop186;
					EarlyExitException eee = new EarlyExitException(186, input);
					throw eee;
				}
				cnt186++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 870:5: -> record_type_dec_record(name=$type_name.stfield_specs=$fields)
			{
				retval.st = templateLib.getInstanceOf("record_type_dec_record",new STAttrMap().put("name", (type_name109!=null?((StringTemplate)type_name109.getTemplate()):null)).put("field_specs", list_fields));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_type_dec_record"


	public static class record_type_dec_refcursor_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_type_dec_refcursor"
	// PLSQLPrinter.g:873:1: record_type_dec_refcursor : ^( RECORD_TYPE_DECLARE_REFCURSOR type_name ( type_spec )? ) -> record_type_dec_refcursor(name=$type_name.sttype_spec=$type_spec.st);
	public final PLSQLPrinter.record_type_dec_refcursor_return record_type_dec_refcursor() throws RecognitionException {
		PLSQLPrinter.record_type_dec_refcursor_return retval = new PLSQLPrinter.record_type_dec_refcursor_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope type_name110 =null;
		TreeRuleReturnScope type_spec111 =null;

		try {
			// PLSQLPrinter.g:874:5: ( ^( RECORD_TYPE_DECLARE_REFCURSOR type_name ( type_spec )? ) -> record_type_dec_refcursor(name=$type_name.sttype_spec=$type_spec.st))
			// PLSQLPrinter.g:874:10: ^( RECORD_TYPE_DECLARE_REFCURSOR type_name ( type_spec )? )
			{
			match(input,RECORD_TYPE_DECLARE_REFCURSOR,FOLLOW_RECORD_TYPE_DECLARE_REFCURSOR_in_record_type_dec_refcursor8337); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_record_type_dec_refcursor8339);
			type_name110=type_name();
			state._fsp--;

			// PLSQLPrinter.g:874:52: ( type_spec )?
			int alt187=2;
			int LA187_0 = input.LA(1);
			if ( (LA187_0==CUSTOM_TYPE||LA187_0==INTERVAL_DATATYPE||LA187_0==NATIVE_DATATYPE) ) {
				alt187=1;
			}
			switch (alt187) {
				case 1 :
					// PLSQLPrinter.g:874:52: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_record_type_dec_refcursor8341);
					type_spec111=type_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 875:5: -> record_type_dec_refcursor(name=$type_name.sttype_spec=$type_spec.st)
			{
				retval.st = templateLib.getInstanceOf("record_type_dec_refcursor",new STAttrMap().put("name", (type_name110!=null?((StringTemplate)type_name110.getTemplate()):null)).put("type_spec", (type_spec111!=null?((StringTemplate)type_spec111.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_type_dec_refcursor"


	public static class field_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "field_spec"
	// PLSQLPrinter.g:878:1: field_spec : ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> field_spec(name=$column_name.sttype_spec=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st);
	public final PLSQLPrinter.field_spec_return field_spec() throws RecognitionException {
		PLSQLPrinter.field_spec_return retval = new PLSQLPrinter.field_spec_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL114=null;
		TreeRuleReturnScope column_name112 =null;
		TreeRuleReturnScope type_spec113 =null;
		TreeRuleReturnScope default_value_part115 =null;

		try {
			// PLSQLPrinter.g:879:5: ( ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> field_spec(name=$column_name.sttype_spec=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st))
			// PLSQLPrinter.g:879:10: ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? )
			{
			match(input,FIELD_SPEC,FOLLOW_FIELD_SPEC_in_field_spec8384); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_column_name_in_field_spec8386);
			column_name112=column_name();
			state._fsp--;

			// PLSQLPrinter.g:879:35: ( type_spec )?
			int alt188=2;
			int LA188_0 = input.LA(1);
			if ( (LA188_0==CUSTOM_TYPE||LA188_0==INTERVAL_DATATYPE||LA188_0==NATIVE_DATATYPE) ) {
				alt188=1;
			}
			switch (alt188) {
				case 1 :
					// PLSQLPrinter.g:879:35: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_field_spec8388);
					type_spec113=type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:879:46: ( SQL92_RESERVED_NULL )?
			int alt189=2;
			int LA189_0 = input.LA(1);
			if ( (LA189_0==SQL92_RESERVED_NULL) ) {
				alt189=1;
			}
			switch (alt189) {
				case 1 :
					// PLSQLPrinter.g:879:46: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL114=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_field_spec8391); 
					}
					break;

			}

			// PLSQLPrinter.g:879:67: ( default_value_part )?
			int alt190=2;
			int LA190_0 = input.LA(1);
			if ( (LA190_0==DEFAULT_VALUE) ) {
				alt190=1;
			}
			switch (alt190) {
				case 1 :
					// PLSQLPrinter.g:879:67: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_field_spec8394);
					default_value_part115=default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 880:5: -> field_spec(name=$column_name.sttype_spec=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st)
			{
				retval.st = templateLib.getInstanceOf("field_spec",new STAttrMap().put("name", (column_name112!=null?((StringTemplate)column_name112.getTemplate()):null)).put("type_spec", (type_spec113!=null?((StringTemplate)type_spec113.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL114 != null).put("default_value_part", (default_value_part115!=null?((StringTemplate)default_value_part115.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "field_spec"


	public static class record_var_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_var_dec"
	// PLSQLPrinter.g:885:1: record_var_dec : ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) ) -> template( \"not implemented: record_var_dec\";
	public final PLSQLPrinter.record_var_dec_return record_var_dec() throws RecognitionException {
		PLSQLPrinter.record_var_dec_return retval = new PLSQLPrinter.record_var_dec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:886:5: ( ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) ) -> template( \"not implemented: record_var_dec\")
			// PLSQLPrinter.g:886:10: ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) )
			{
			match(input,RECORD_VAR_DECLARE,FOLLOW_RECORD_VAR_DECLARE_in_record_var_dec8467); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_record_name_in_record_var_dec8469);
			record_name();
			state._fsp--;

			pushFollow(FOLLOW_type_name_in_record_var_dec8471);
			type_name();
			state._fsp--;

			// PLSQLPrinter.g:886:53: ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )
			int alt191=2;
			int LA191_0 = input.LA(1);
			if ( (LA191_0==PERCENT_ROWTYPE_VK) ) {
				alt191=1;
			}
			else if ( (LA191_0==PERCENT_TYPE_VK) ) {
				alt191=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 191, 0, input);
				throw nvae;
			}

			switch (alt191) {
				case 1 :
					// PLSQLPrinter.g:886:54: PERCENT_ROWTYPE_VK
					{
					match(input,PERCENT_ROWTYPE_VK,FOLLOW_PERCENT_ROWTYPE_VK_in_record_var_dec8474); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:886:73: PERCENT_TYPE_VK
					{
					match(input,PERCENT_TYPE_VK,FOLLOW_PERCENT_TYPE_VK_in_record_var_dec8476); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 887:5: -> template( \"not implemented: record_var_dec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: record_var_dec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_var_dec"


	public static class table_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_declaration"
	// PLSQLPrinter.g:892:1: table_declaration : ( table_type_dec -> { $table_type_dec.st }| table_var_dec -> { $table_var_dec.st });
	public final PLSQLPrinter.table_declaration_return table_declaration() throws RecognitionException {
		PLSQLPrinter.table_declaration_return retval = new PLSQLPrinter.table_declaration_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope table_type_dec116 =null;
		TreeRuleReturnScope table_var_dec117 =null;

		try {
			// PLSQLPrinter.g:893:5: ( table_type_dec -> { $table_type_dec.st }| table_var_dec -> { $table_var_dec.st })
			int alt192=2;
			int LA192_0 = input.LA(1);
			if ( (LA192_0==TABLE_TYPE_DECLARE) ) {
				alt192=1;
			}
			else if ( (LA192_0==TABLE_VAR_DECLARE) ) {
				alt192=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 192, 0, input);
				throw nvae;
			}

			switch (alt192) {
				case 1 :
					// PLSQLPrinter.g:893:10: table_type_dec
					{
					pushFollow(FOLLOW_table_type_dec_in_table_declaration8514);
					table_type_dec116=table_type_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 893:25: -> { $table_type_dec.st }
					{
						retval.st =  (table_type_dec116!=null?((StringTemplate)table_type_dec116.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:894:10: table_var_dec
					{
					pushFollow(FOLLOW_table_var_dec_in_table_declaration8529);
					table_var_dec117=table_var_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 894:24: -> { $table_var_dec.st }
					{
						retval.st =  (table_var_dec117!=null?((StringTemplate)table_var_dec117.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_declaration"


	public static class table_type_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_type_dec"
	// PLSQLPrinter.g:897:1: table_type_dec : ^( TABLE_TYPE_DECLARE type_name table_type_dec_impl ) -> table_type_dec(name=$type_name.stimpl=$table_type_dec_impl.st);
	public final PLSQLPrinter.table_type_dec_return table_type_dec() throws RecognitionException {
		PLSQLPrinter.table_type_dec_return retval = new PLSQLPrinter.table_type_dec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope type_name118 =null;
		TreeRuleReturnScope table_type_dec_impl119 =null;

		try {
			// PLSQLPrinter.g:898:5: ( ^( TABLE_TYPE_DECLARE type_name table_type_dec_impl ) -> table_type_dec(name=$type_name.stimpl=$table_type_dec_impl.st))
			// PLSQLPrinter.g:898:10: ^( TABLE_TYPE_DECLARE type_name table_type_dec_impl )
			{
			match(input,TABLE_TYPE_DECLARE,FOLLOW_TABLE_TYPE_DECLARE_in_table_type_dec8554); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_table_type_dec8556);
			type_name118=type_name();
			state._fsp--;

			pushFollow(FOLLOW_table_type_dec_impl_in_table_type_dec8558);
			table_type_dec_impl119=table_type_dec_impl();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 899:5: -> table_type_dec(name=$type_name.stimpl=$table_type_dec_impl.st)
			{
				retval.st = templateLib.getInstanceOf("table_type_dec",new STAttrMap().put("name", (type_name118!=null?((StringTemplate)type_name118.getTemplate()):null)).put("impl", (table_type_dec_impl119!=null?((StringTemplate)table_type_dec_impl119.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_type_dec"


	public static class table_type_dec_impl_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_type_dec_impl"
	// PLSQLPrinter.g:902:1: table_type_dec_impl : ( table_type_dec_table_of -> { $table_type_dec_table_of.st }| varray_type_def -> { $varray_type_def.st });
	public final PLSQLPrinter.table_type_dec_impl_return table_type_dec_impl() throws RecognitionException {
		PLSQLPrinter.table_type_dec_impl_return retval = new PLSQLPrinter.table_type_dec_impl_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope table_type_dec_table_of120 =null;
		TreeRuleReturnScope varray_type_def121 =null;

		try {
			// PLSQLPrinter.g:903:5: ( table_type_dec_table_of -> { $table_type_dec_table_of.st }| varray_type_def -> { $varray_type_def.st })
			int alt193=2;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_NULL:
				{
				int LA193_1 = input.LA(2);
				if ( (LA193_1==SQL92_RESERVED_TABLE) ) {
					alt193=1;
				}
				else if ( (LA193_1==VARR_ARRAY_DEF) ) {
					alt193=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 193, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_TABLE:
				{
				alt193=1;
				}
				break;
			case VARR_ARRAY_DEF:
				{
				alt193=2;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 193, 0, input);
				throw nvae;
			}
			switch (alt193) {
				case 1 :
					// PLSQLPrinter.g:903:11: table_type_dec_table_of
					{
					pushFollow(FOLLOW_table_type_dec_table_of_in_table_type_dec_impl8604);
					table_type_dec_table_of120=table_type_dec_table_of();
					state._fsp--;

					// TEMPLATE REWRITE
					// 903:35: -> { $table_type_dec_table_of.st }
					{
						retval.st =  (table_type_dec_table_of120!=null?((StringTemplate)table_type_dec_table_of120.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:904:11: varray_type_def
					{
					pushFollow(FOLLOW_varray_type_def_in_table_type_dec_impl8620);
					varray_type_def121=varray_type_def();
					state._fsp--;

					// TEMPLATE REWRITE
					// 904:27: -> { $varray_type_def.st }
					{
						retval.st =  (varray_type_def121!=null?((StringTemplate)varray_type_def121.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_type_dec_impl"


	public static class table_type_dec_table_of_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_type_dec_table_of"
	// PLSQLPrinter.g:907:1: table_type_dec_table_of : ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) -> table_type_dec_table_of(type_spec=$type_spec.sttable_indexed_by_part=$table_indexed_by_part.stis_not_null=$SQL92_RESERVED_NULL != null);
	public final PLSQLPrinter.table_type_dec_table_of_return table_type_dec_table_of() throws RecognitionException {
		PLSQLPrinter.table_type_dec_table_of_return retval = new PLSQLPrinter.table_type_dec_table_of_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL124=null;
		TreeRuleReturnScope type_spec122 =null;
		TreeRuleReturnScope table_indexed_by_part123 =null;

		try {
			// PLSQLPrinter.g:908:5: ( ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) -> table_type_dec_table_of(type_spec=$type_spec.sttable_indexed_by_part=$table_indexed_by_part.stis_not_null=$SQL92_RESERVED_NULL != null))
			// PLSQLPrinter.g:908:10: ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? )
			{
			// PLSQLPrinter.g:908:10: ( SQL92_RESERVED_NULL )?
			int alt194=2;
			int LA194_0 = input.LA(1);
			if ( (LA194_0==SQL92_RESERVED_NULL) ) {
				alt194=1;
			}
			switch (alt194) {
				case 1 :
					// PLSQLPrinter.g:908:10: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL124=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_table_type_dec_table_of8648); 
					}
					break;

			}

			match(input,SQL92_RESERVED_TABLE,FOLLOW_SQL92_RESERVED_TABLE_in_table_type_dec_table_of8652); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_table_type_dec_table_of8654);
			type_spec122=type_spec();
			state._fsp--;

			// PLSQLPrinter.g:908:64: ( table_indexed_by_part )?
			int alt195=2;
			int LA195_0 = input.LA(1);
			if ( (LA195_0==INDEXED_BY) ) {
				alt195=1;
			}
			switch (alt195) {
				case 1 :
					// PLSQLPrinter.g:908:64: table_indexed_by_part
					{
					pushFollow(FOLLOW_table_indexed_by_part_in_table_type_dec_table_of8656);
					table_indexed_by_part123=table_indexed_by_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 909:5: -> table_type_dec_table_of(type_spec=$type_spec.sttable_indexed_by_part=$table_indexed_by_part.stis_not_null=$SQL92_RESERVED_NULL != null)
			{
				retval.st = templateLib.getInstanceOf("table_type_dec_table_of",new STAttrMap().put("type_spec", (type_spec122!=null?((StringTemplate)type_spec122.getTemplate()):null)).put("table_indexed_by_part", (table_indexed_by_part123!=null?((StringTemplate)table_indexed_by_part123.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL124 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_type_dec_table_of"


	public static class table_indexed_by_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_indexed_by_part"
	// PLSQLPrinter.g:913:1: table_indexed_by_part : ^( INDEXED_BY type_spec ) -> table_indexed_by_part(type_spec=$type_spec.st);
	public final PLSQLPrinter.table_indexed_by_part_return table_indexed_by_part() throws RecognitionException {
		PLSQLPrinter.table_indexed_by_part_return retval = new PLSQLPrinter.table_indexed_by_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope type_spec125 =null;

		try {
			// PLSQLPrinter.g:914:5: ( ^( INDEXED_BY type_spec ) -> table_indexed_by_part(type_spec=$type_spec.st))
			// PLSQLPrinter.g:914:10: ^( INDEXED_BY type_spec )
			{
			match(input,INDEXED_BY,FOLLOW_INDEXED_BY_in_table_indexed_by_part8717); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_table_indexed_by_part8719);
			type_spec125=type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 915:5: -> table_indexed_by_part(type_spec=$type_spec.st)
			{
				retval.st = templateLib.getInstanceOf("table_indexed_by_part",new STAttrMap().put("type_spec", (type_spec125!=null?((StringTemplate)type_spec125.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_indexed_by_part"


	public static class varray_type_def_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "varray_type_def"
	// PLSQLPrinter.g:918:1: varray_type_def : ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec ) -> varray_type_def(limit_expression=$expression.stelement_type=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != null);
	public final PLSQLPrinter.varray_type_def_return varray_type_def() throws RecognitionException {
		PLSQLPrinter.varray_type_def_return retval = new PLSQLPrinter.varray_type_def_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL128=null;
		TreeRuleReturnScope expression126 =null;
		TreeRuleReturnScope type_spec127 =null;

		try {
			// PLSQLPrinter.g:919:5: ( ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec ) -> varray_type_def(limit_expression=$expression.stelement_type=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != null))
			// PLSQLPrinter.g:919:10: ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec )
			{
			// PLSQLPrinter.g:919:10: ( SQL92_RESERVED_NULL )?
			int alt196=2;
			int LA196_0 = input.LA(1);
			if ( (LA196_0==SQL92_RESERVED_NULL) ) {
				alt196=1;
			}
			switch (alt196) {
				case 1 :
					// PLSQLPrinter.g:919:10: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL128=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_varray_type_def8755); 
					}
					break;

			}

			match(input,VARR_ARRAY_DEF,FOLLOW_VARR_ARRAY_DEF_in_varray_type_def8759); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_varray_type_def8761);
			expression126=expression();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_varray_type_def8763);
			type_spec127=type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 920:5: -> varray_type_def(limit_expression=$expression.stelement_type=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != null)
			{
				retval.st = templateLib.getInstanceOf("varray_type_def",new STAttrMap().put("limit_expression", (expression126!=null?((StringTemplate)expression126.getTemplate()):null)).put("element_type", (type_spec127!=null?((StringTemplate)type_spec127.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL128 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "varray_type_def"


	public static class table_var_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_var_dec"
	// PLSQLPrinter.g:923:1: table_var_dec : ^( TABLE_VAR_DECLARE table_var_name type_spec ) -> template( \"not implemented: table_var_dec\";
	public final PLSQLPrinter.table_var_dec_return table_var_dec() throws RecognitionException {
		PLSQLPrinter.table_var_dec_return retval = new PLSQLPrinter.table_var_dec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:924:5: ( ^( TABLE_VAR_DECLARE table_var_name type_spec ) -> template( \"not implemented: table_var_dec\")
			// PLSQLPrinter.g:924:10: ^( TABLE_VAR_DECLARE table_var_name type_spec )
			{
			match(input,TABLE_VAR_DECLARE,FOLLOW_TABLE_VAR_DECLARE_in_table_var_dec8810); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_table_var_name_in_table_var_dec8812);
			table_var_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_table_var_dec8814);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 925:5: -> template( \"not implemented: table_var_dec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: table_var_dec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_var_dec"


	public static class seq_of_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "seq_of_statements"
	// PLSQLPrinter.g:932:1: seq_of_statements : ^( STATEMENTS (statements+= statement |statements+= labeled_statement )+ ) -> seq_of_statements(statements=$statements);
	public final PLSQLPrinter.seq_of_statements_return seq_of_statements() throws RecognitionException {
		PLSQLPrinter.seq_of_statements_return retval = new PLSQLPrinter.seq_of_statements_return();
		retval.start = input.LT(1);

		List<Object> list_statements=null;
		RuleReturnScope statements = null;
		try {
			// PLSQLPrinter.g:933:5: ( ^( STATEMENTS (statements+= statement |statements+= labeled_statement )+ ) -> seq_of_statements(statements=$statements))
			// PLSQLPrinter.g:933:11: ^( STATEMENTS (statements+= statement |statements+= labeled_statement )+ )
			{
			match(input,STATEMENTS,FOLLOW_STATEMENTS_in_seq_of_statements8855); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:933:24: (statements+= statement |statements+= labeled_statement )+
			int cnt197=0;
			loop197:
			while (true) {
				int alt197=3;
				int LA197_0 = input.LA(1);
				if ( (LA197_0==PLSQL_RESERVED_IF||LA197_0==PLSQL_RESERVED_LOCK||LA197_0==SQL92_RESERVED_DELETE||LA197_0==SQL92_RESERVED_FETCH||LA197_0==SQL92_RESERVED_GOTO||LA197_0==SQL92_RESERVED_INSERT||LA197_0==SQL92_RESERVED_NULL||LA197_0==SQL92_RESERVED_UPDATE||LA197_0==ASSIGN||LA197_0==BLOCK||LA197_0==BODY||LA197_0==CASCATED_ELEMENT||LA197_0==CLOSE_VK||LA197_0==COMMIT_VK||LA197_0==CONTINUE_VK||(LA197_0 >= EXECUTE_VK && LA197_0 <= EXIT_VK)||LA197_0==FORALL_VK||LA197_0==FOR_LOOP||LA197_0==LOOP_VK||LA197_0==MERGE_VK||(LA197_0 >= OPEN_FOR && LA197_0 <= OPEN_VK)||LA197_0==PIPE_ROW||LA197_0==RAISE_VK||LA197_0==RETURN_VK||LA197_0==ROLLBACK_VK||LA197_0==SAVEPOINT_VK||LA197_0==SEARCHED_CASE||LA197_0==SELECT_STATEMENT||LA197_0==SET_CONSTRAINT||LA197_0==SET_TRANSACTION||LA197_0==SIMPLE_CASE||LA197_0==WHILE_LOOP||LA197_0==PGSQL_PERFORM) ) {
					alt197=1;
				}
				else if ( (LA197_0==LABEL_DECLARE) ) {
					alt197=2;
				}

				switch (alt197) {
				case 1 :
					// PLSQLPrinter.g:933:25: statements+= statement
					{
					pushFollow(FOLLOW_statement_in_seq_of_statements8860);
					statements=statement();
					state._fsp--;

					if (list_statements==null) list_statements=new ArrayList<Object>();
					list_statements.add(statements.getTemplate());
					}
					break;
				case 2 :
					// PLSQLPrinter.g:933:47: statements+= labeled_statement
					{
					pushFollow(FOLLOW_labeled_statement_in_seq_of_statements8864);
					statements=labeled_statement();
					state._fsp--;

					if (list_statements==null) list_statements=new ArrayList<Object>();
					list_statements.add(statements.getTemplate());
					}
					break;

				default :
					if ( cnt197 >= 1 ) break loop197;
					EarlyExitException eee = new EarlyExitException(197, input);
					throw eee;
				}
				cnt197++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 934:5: -> seq_of_statements(statements=$statements)
			{
				retval.st = templateLib.getInstanceOf("seq_of_statements",new STAttrMap().put("statements", list_statements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "seq_of_statements"


	public static class labeled_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "labeled_statement"
	// PLSQLPrinter.g:937:1: labeled_statement : ^( LABEL_DECLARE label_name statement ) -> labeled_statement(name=$label_name.ststatement=$statement.st);
	public final PLSQLPrinter.labeled_statement_return labeled_statement() throws RecognitionException {
		PLSQLPrinter.labeled_statement_return retval = new PLSQLPrinter.labeled_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name129 =null;
		TreeRuleReturnScope statement130 =null;

		try {
			// PLSQLPrinter.g:938:5: ( ^( LABEL_DECLARE label_name statement ) -> labeled_statement(name=$label_name.ststatement=$statement.st))
			// PLSQLPrinter.g:938:10: ^( LABEL_DECLARE label_name statement )
			{
			match(input,LABEL_DECLARE,FOLLOW_LABEL_DECLARE_in_labeled_statement8905); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_label_name_in_labeled_statement8907);
			label_name129=label_name();
			state._fsp--;

			pushFollow(FOLLOW_statement_in_labeled_statement8909);
			statement130=statement();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 938:48: -> labeled_statement(name=$label_name.ststatement=$statement.st)
			{
				retval.st = templateLib.getInstanceOf("labeled_statement",new STAttrMap().put("name", (label_name129!=null?((StringTemplate)label_name129.getTemplate()):null)).put("statement", (statement130!=null?((StringTemplate)statement130.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "labeled_statement"


	public static class statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "statement"
	// PLSQLPrinter.g:941:1: statement : ( assignment_statement -> { $assignment_statement.st }| continue_statement -> { $continue_statement.st }| exit_statement -> { $exit_statement.st }| goto_statement -> { $goto_statement.st }| if_statement -> { $if_statement.st }| loop_statement -> { $loop_statement.st }| forall_statement -> { $forall_statement.st }| null_statement -> { $null_statement.st }| raise_statement -> { $raise_statement.st }| return_statement -> { $return_statement.st }| pipe_row_statement -> { $pipe_row_statement.st }| case_statement -> { $case_statement.st }| sql_statement -> { $sql_statement.st }| perform_statement -> { $perform_statement.st }| general_element -> { $general_element.st }| body -> { $body.st }| block -> { $block.st });
	public final PLSQLPrinter.statement_return statement() throws RecognitionException {
		PLSQLPrinter.statement_return retval = new PLSQLPrinter.statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope assignment_statement131 =null;
		TreeRuleReturnScope continue_statement132 =null;
		TreeRuleReturnScope exit_statement133 =null;
		TreeRuleReturnScope goto_statement134 =null;
		TreeRuleReturnScope if_statement135 =null;
		TreeRuleReturnScope loop_statement136 =null;
		TreeRuleReturnScope forall_statement137 =null;
		TreeRuleReturnScope null_statement138 =null;
		TreeRuleReturnScope raise_statement139 =null;
		TreeRuleReturnScope return_statement140 =null;
		TreeRuleReturnScope pipe_row_statement141 =null;
		TreeRuleReturnScope case_statement142 =null;
		TreeRuleReturnScope sql_statement143 =null;
		TreeRuleReturnScope perform_statement144 =null;
		TreeRuleReturnScope general_element145 =null;
		TreeRuleReturnScope body146 =null;
		TreeRuleReturnScope block147 =null;

		try {
			// PLSQLPrinter.g:942:5: ( assignment_statement -> { $assignment_statement.st }| continue_statement -> { $continue_statement.st }| exit_statement -> { $exit_statement.st }| goto_statement -> { $goto_statement.st }| if_statement -> { $if_statement.st }| loop_statement -> { $loop_statement.st }| forall_statement -> { $forall_statement.st }| null_statement -> { $null_statement.st }| raise_statement -> { $raise_statement.st }| return_statement -> { $return_statement.st }| pipe_row_statement -> { $pipe_row_statement.st }| case_statement -> { $case_statement.st }| sql_statement -> { $sql_statement.st }| perform_statement -> { $perform_statement.st }| general_element -> { $general_element.st }| body -> { $body.st }| block -> { $block.st })
			int alt198=17;
			switch ( input.LA(1) ) {
			case ASSIGN:
				{
				alt198=1;
				}
				break;
			case CONTINUE_VK:
				{
				alt198=2;
				}
				break;
			case EXIT_VK:
				{
				alt198=3;
				}
				break;
			case SQL92_RESERVED_GOTO:
				{
				alt198=4;
				}
				break;
			case PLSQL_RESERVED_IF:
				{
				alt198=5;
				}
				break;
			case FOR_LOOP:
			case LOOP_VK:
			case WHILE_LOOP:
				{
				alt198=6;
				}
				break;
			case FORALL_VK:
				{
				alt198=7;
				}
				break;
			case SQL92_RESERVED_NULL:
				{
				alt198=8;
				}
				break;
			case RAISE_VK:
				{
				alt198=9;
				}
				break;
			case RETURN_VK:
				{
				alt198=10;
				}
				break;
			case PIPE_ROW:
				{
				alt198=11;
				}
				break;
			case SEARCHED_CASE:
			case SIMPLE_CASE:
				{
				alt198=12;
				}
				break;
			case PLSQL_RESERVED_LOCK:
			case SQL92_RESERVED_DELETE:
			case SQL92_RESERVED_FETCH:
			case SQL92_RESERVED_INSERT:
			case SQL92_RESERVED_UPDATE:
			case CLOSE_VK:
			case COMMIT_VK:
			case EXECUTE_VK:
			case MERGE_VK:
			case OPEN_FOR:
			case OPEN_VK:
			case ROLLBACK_VK:
			case SAVEPOINT_VK:
			case SELECT_STATEMENT:
			case SET_CONSTRAINT:
			case SET_TRANSACTION:
				{
				alt198=13;
				}
				break;
			case PGSQL_PERFORM:
				{
				alt198=14;
				}
				break;
			case CASCATED_ELEMENT:
				{
				alt198=15;
				}
				break;
			case BODY:
				{
				alt198=16;
				}
				break;
			case BLOCK:
				{
				alt198=17;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 198, 0, input);
				throw nvae;
			}
			switch (alt198) {
				case 1 :
					// PLSQLPrinter.g:942:10: assignment_statement
					{
					pushFollow(FOLLOW_assignment_statement_in_statement8944);
					assignment_statement131=assignment_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 942:31: -> { $assignment_statement.st }
					{
						retval.st =  (assignment_statement131!=null?((StringTemplate)assignment_statement131.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:943:10: continue_statement
					{
					pushFollow(FOLLOW_continue_statement_in_statement8959);
					continue_statement132=continue_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 943:29: -> { $continue_statement.st }
					{
						retval.st =  (continue_statement132!=null?((StringTemplate)continue_statement132.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:944:10: exit_statement
					{
					pushFollow(FOLLOW_exit_statement_in_statement8974);
					exit_statement133=exit_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 944:25: -> { $exit_statement.st }
					{
						retval.st =  (exit_statement133!=null?((StringTemplate)exit_statement133.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:945:10: goto_statement
					{
					pushFollow(FOLLOW_goto_statement_in_statement8989);
					goto_statement134=goto_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 945:25: -> { $goto_statement.st }
					{
						retval.st =  (goto_statement134!=null?((StringTemplate)goto_statement134.getTemplate()):null) ;
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:946:10: if_statement
					{
					pushFollow(FOLLOW_if_statement_in_statement9004);
					if_statement135=if_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 946:23: -> { $if_statement.st }
					{
						retval.st =  (if_statement135!=null?((StringTemplate)if_statement135.getTemplate()):null) ;
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:947:10: loop_statement
					{
					pushFollow(FOLLOW_loop_statement_in_statement9019);
					loop_statement136=loop_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 947:25: -> { $loop_statement.st }
					{
						retval.st =  (loop_statement136!=null?((StringTemplate)loop_statement136.getTemplate()):null) ;
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:948:10: forall_statement
					{
					pushFollow(FOLLOW_forall_statement_in_statement9034);
					forall_statement137=forall_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 948:27: -> { $forall_statement.st }
					{
						retval.st =  (forall_statement137!=null?((StringTemplate)forall_statement137.getTemplate()):null) ;
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:949:10: null_statement
					{
					pushFollow(FOLLOW_null_statement_in_statement9049);
					null_statement138=null_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 949:25: -> { $null_statement.st }
					{
						retval.st =  (null_statement138!=null?((StringTemplate)null_statement138.getTemplate()):null) ;
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:950:10: raise_statement
					{
					pushFollow(FOLLOW_raise_statement_in_statement9064);
					raise_statement139=raise_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 950:26: -> { $raise_statement.st }
					{
						retval.st =  (raise_statement139!=null?((StringTemplate)raise_statement139.getTemplate()):null) ;
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:951:10: return_statement
					{
					pushFollow(FOLLOW_return_statement_in_statement9079);
					return_statement140=return_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 951:27: -> { $return_statement.st }
					{
						retval.st =  (return_statement140!=null?((StringTemplate)return_statement140.getTemplate()):null) ;
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:952:10: pipe_row_statement
					{
					pushFollow(FOLLOW_pipe_row_statement_in_statement9094);
					pipe_row_statement141=pipe_row_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 952:29: -> { $pipe_row_statement.st }
					{
						retval.st =  (pipe_row_statement141!=null?((StringTemplate)pipe_row_statement141.getTemplate()):null) ;
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:953:10: case_statement
					{
					pushFollow(FOLLOW_case_statement_in_statement9109);
					case_statement142=case_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 953:25: -> { $case_statement.st }
					{
						retval.st =  (case_statement142!=null?((StringTemplate)case_statement142.getTemplate()):null) ;
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:954:10: sql_statement
					{
					pushFollow(FOLLOW_sql_statement_in_statement9124);
					sql_statement143=sql_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 954:24: -> { $sql_statement.st }
					{
						retval.st =  (sql_statement143!=null?((StringTemplate)sql_statement143.getTemplate()):null) ;
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:955:10: perform_statement
					{
					pushFollow(FOLLOW_perform_statement_in_statement9139);
					perform_statement144=perform_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 955:28: -> { $perform_statement.st }
					{
						retval.st =  (perform_statement144!=null?((StringTemplate)perform_statement144.getTemplate()):null) ;
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:956:10: general_element
					{
					pushFollow(FOLLOW_general_element_in_statement9154);
					general_element145=general_element();
					state._fsp--;

					// TEMPLATE REWRITE
					// 956:26: -> { $general_element.st }
					{
						retval.st =  (general_element145!=null?((StringTemplate)general_element145.getTemplate()):null) ;
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:957:10: body
					{
					pushFollow(FOLLOW_body_in_statement9169);
					body146=body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 957:15: -> { $body.st }
					{
						retval.st =  (body146!=null?((StringTemplate)body146.getTemplate()):null) ;
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:958:10: block
					{
					pushFollow(FOLLOW_block_in_statement9184);
					block147=block();
					state._fsp--;

					// TEMPLATE REWRITE
					// 958:16: -> { $block.st }
					{
						retval.st =  (block147!=null?((StringTemplate)block147.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class assignment_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "assignment_statement"
	// PLSQLPrinter.g:961:1: assignment_statement : ^( ASSIGN (dst= general_element |dst= hosted_variable_name ) expression ) -> assignment_statement(dst=$dst.stexpression=$expression.st);
	public final PLSQLPrinter.assignment_statement_return assignment_statement() throws RecognitionException {
		PLSQLPrinter.assignment_statement_return retval = new PLSQLPrinter.assignment_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope dst =null;
		TreeRuleReturnScope expression148 =null;

		try {
			// PLSQLPrinter.g:962:5: ( ^( ASSIGN (dst= general_element |dst= hosted_variable_name ) expression ) -> assignment_statement(dst=$dst.stexpression=$expression.st))
			// PLSQLPrinter.g:962:11: ^( ASSIGN (dst= general_element |dst= hosted_variable_name ) expression )
			{
			match(input,ASSIGN,FOLLOW_ASSIGN_in_assignment_statement9210); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:962:20: (dst= general_element |dst= hosted_variable_name )
			int alt199=2;
			int LA199_0 = input.LA(1);
			if ( (LA199_0==CASCATED_ELEMENT) ) {
				alt199=1;
			}
			else if ( (LA199_0==HOSTED_VARIABLE_NAME) ) {
				alt199=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 199, 0, input);
				throw nvae;
			}

			switch (alt199) {
				case 1 :
					// PLSQLPrinter.g:962:21: dst= general_element
					{
					pushFollow(FOLLOW_general_element_in_assignment_statement9215);
					dst=general_element();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:962:41: dst= hosted_variable_name
					{
					pushFollow(FOLLOW_hosted_variable_name_in_assignment_statement9219);
					dst=hosted_variable_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_expression_in_assignment_statement9222);
			expression148=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 963:5: -> assignment_statement(dst=$dst.stexpression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("assignment_statement",new STAttrMap().put("dst", (dst!=null?((StringTemplate)dst.getTemplate()):null)).put("expression", (expression148!=null?((StringTemplate)expression148.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "assignment_statement"


	public static class continue_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "continue_statement"
	// PLSQLPrinter.g:966:1: continue_statement : ^( CONTINUE_VK ( label_name )? ( general_when )? ) -> continue_statement(label_name=$label_name.stcondition=$general_when.st);
	public final PLSQLPrinter.continue_statement_return continue_statement() throws RecognitionException {
		PLSQLPrinter.continue_statement_return retval = new PLSQLPrinter.continue_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name149 =null;
		TreeRuleReturnScope general_when150 =null;

		try {
			// PLSQLPrinter.g:967:5: ( ^( CONTINUE_VK ( label_name )? ( general_when )? ) -> continue_statement(label_name=$label_name.stcondition=$general_when.st))
			// PLSQLPrinter.g:967:10: ^( CONTINUE_VK ( label_name )? ( general_when )? )
			{
			match(input,CONTINUE_VK,FOLLOW_CONTINUE_VK_in_continue_statement9264); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:967:24: ( label_name )?
				int alt200=2;
				int LA200_0 = input.LA(1);
				if ( (LA200_0==LABEL_NAME) ) {
					alt200=1;
				}
				switch (alt200) {
					case 1 :
						// PLSQLPrinter.g:967:24: label_name
						{
						pushFollow(FOLLOW_label_name_in_continue_statement9266);
						label_name149=label_name();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:967:36: ( general_when )?
				int alt201=2;
				int LA201_0 = input.LA(1);
				if ( (LA201_0==SQL92_RESERVED_WHEN) ) {
					alt201=1;
				}
				switch (alt201) {
					case 1 :
						// PLSQLPrinter.g:967:36: general_when
						{
						pushFollow(FOLLOW_general_when_in_continue_statement9269);
						general_when150=general_when();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 968:5: -> continue_statement(label_name=$label_name.stcondition=$general_when.st)
			{
				retval.st = templateLib.getInstanceOf("continue_statement",new STAttrMap().put("label_name", (label_name149!=null?((StringTemplate)label_name149.getTemplate()):null)).put("condition", (general_when150!=null?((StringTemplate)general_when150.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "continue_statement"


	public static class general_when_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_when"
	// PLSQLPrinter.g:971:1: general_when : ^( SQL92_RESERVED_WHEN expression ) -> general_when(expression=$expression.st);
	public final PLSQLPrinter.general_when_return general_when() throws RecognitionException {
		PLSQLPrinter.general_when_return retval = new PLSQLPrinter.general_when_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression151 =null;

		try {
			// PLSQLPrinter.g:972:5: ( ^( SQL92_RESERVED_WHEN expression ) -> general_when(expression=$expression.st))
			// PLSQLPrinter.g:972:10: ^( SQL92_RESERVED_WHEN expression )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_general_when9312); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_general_when9314);
			expression151=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 973:5: -> general_when(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("general_when",new STAttrMap().put("expression", (expression151!=null?((StringTemplate)expression151.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_when"


	public static class exit_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exit_statement"
	// PLSQLPrinter.g:976:1: exit_statement : ^( EXIT_VK ( label_name )? ( general_when )? ) -> exit_statement(label_name=$label_name.stcondition=$general_when.st);
	public final PLSQLPrinter.exit_statement_return exit_statement() throws RecognitionException {
		PLSQLPrinter.exit_statement_return retval = new PLSQLPrinter.exit_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name152 =null;
		TreeRuleReturnScope general_when153 =null;

		try {
			// PLSQLPrinter.g:977:5: ( ^( EXIT_VK ( label_name )? ( general_when )? ) -> exit_statement(label_name=$label_name.stcondition=$general_when.st))
			// PLSQLPrinter.g:977:10: ^( EXIT_VK ( label_name )? ( general_when )? )
			{
			match(input,EXIT_VK,FOLLOW_EXIT_VK_in_exit_statement9351); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:977:20: ( label_name )?
				int alt202=2;
				int LA202_0 = input.LA(1);
				if ( (LA202_0==LABEL_NAME) ) {
					alt202=1;
				}
				switch (alt202) {
					case 1 :
						// PLSQLPrinter.g:977:20: label_name
						{
						pushFollow(FOLLOW_label_name_in_exit_statement9353);
						label_name152=label_name();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:977:32: ( general_when )?
				int alt203=2;
				int LA203_0 = input.LA(1);
				if ( (LA203_0==SQL92_RESERVED_WHEN) ) {
					alt203=1;
				}
				switch (alt203) {
					case 1 :
						// PLSQLPrinter.g:977:32: general_when
						{
						pushFollow(FOLLOW_general_when_in_exit_statement9356);
						general_when153=general_when();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 978:5: -> exit_statement(label_name=$label_name.stcondition=$general_when.st)
			{
				retval.st = templateLib.getInstanceOf("exit_statement",new STAttrMap().put("label_name", (label_name152!=null?((StringTemplate)label_name152.getTemplate()):null)).put("condition", (general_when153!=null?((StringTemplate)general_when153.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exit_statement"


	public static class goto_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "goto_statement"
	// PLSQLPrinter.g:981:1: goto_statement : ^( SQL92_RESERVED_GOTO label_name ) -> goto_statement(label_name=$label_name.st);
	public final PLSQLPrinter.goto_statement_return goto_statement() throws RecognitionException {
		PLSQLPrinter.goto_statement_return retval = new PLSQLPrinter.goto_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name154 =null;

		try {
			// PLSQLPrinter.g:982:5: ( ^( SQL92_RESERVED_GOTO label_name ) -> goto_statement(label_name=$label_name.st))
			// PLSQLPrinter.g:982:10: ^( SQL92_RESERVED_GOTO label_name )
			{
			match(input,SQL92_RESERVED_GOTO,FOLLOW_SQL92_RESERVED_GOTO_in_goto_statement9399); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_label_name_in_goto_statement9401);
			label_name154=label_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 983:5: -> goto_statement(label_name=$label_name.st)
			{
				retval.st = templateLib.getInstanceOf("goto_statement",new STAttrMap().put("label_name", (label_name154!=null?((StringTemplate)label_name154.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "goto_statement"


	public static class if_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "if_statement"
	// PLSQLPrinter.g:986:1: if_statement : ^( PLSQL_RESERVED_IF expression seq_of_statements (elsif_parts+= elsif_part )* ( else_part )? ) -> if_statement(condition=$expression.stthen_seq_of_statements=$seq_of_statements.stelsif_parts=$elsif_partselse_part=$else_part.st);
	public final PLSQLPrinter.if_statement_return if_statement() throws RecognitionException {
		PLSQLPrinter.if_statement_return retval = new PLSQLPrinter.if_statement_return();
		retval.start = input.LT(1);

		List<Object> list_elsif_parts=null;
		TreeRuleReturnScope expression155 =null;
		TreeRuleReturnScope seq_of_statements156 =null;
		TreeRuleReturnScope else_part157 =null;
		RuleReturnScope elsif_parts = null;
		try {
			// PLSQLPrinter.g:987:5: ( ^( PLSQL_RESERVED_IF expression seq_of_statements (elsif_parts+= elsif_part )* ( else_part )? ) -> if_statement(condition=$expression.stthen_seq_of_statements=$seq_of_statements.stelsif_parts=$elsif_partselse_part=$else_part.st))
			// PLSQLPrinter.g:987:10: ^( PLSQL_RESERVED_IF expression seq_of_statements (elsif_parts+= elsif_part )* ( else_part )? )
			{
			match(input,PLSQL_RESERVED_IF,FOLLOW_PLSQL_RESERVED_IF_in_if_statement9438); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_if_statement9440);
			expression155=expression();
			state._fsp--;

			pushFollow(FOLLOW_seq_of_statements_in_if_statement9442);
			seq_of_statements156=seq_of_statements();
			state._fsp--;

			// PLSQLPrinter.g:987:70: (elsif_parts+= elsif_part )*
			loop204:
			while (true) {
				int alt204=2;
				int LA204_0 = input.LA(1);
				if ( (LA204_0==PLSQL_NON_RESERVED_ELSIF) ) {
					alt204=1;
				}

				switch (alt204) {
				case 1 :
					// PLSQLPrinter.g:987:70: elsif_parts+= elsif_part
					{
					pushFollow(FOLLOW_elsif_part_in_if_statement9446);
					elsif_parts=elsif_part();
					state._fsp--;

					if (list_elsif_parts==null) list_elsif_parts=new ArrayList<Object>();
					list_elsif_parts.add(elsif_parts.getTemplate());
					}
					break;

				default :
					break loop204;
				}
			}

			// PLSQLPrinter.g:987:84: ( else_part )?
			int alt205=2;
			int LA205_0 = input.LA(1);
			if ( (LA205_0==SQL92_RESERVED_ELSE) ) {
				alt205=1;
			}
			switch (alt205) {
				case 1 :
					// PLSQLPrinter.g:987:84: else_part
					{
					pushFollow(FOLLOW_else_part_in_if_statement9449);
					else_part157=else_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 988:5: -> if_statement(condition=$expression.stthen_seq_of_statements=$seq_of_statements.stelsif_parts=$elsif_partselse_part=$else_part.st)
			{
				retval.st = templateLib.getInstanceOf("if_statement",new STAttrMap().put("condition", (expression155!=null?((StringTemplate)expression155.getTemplate()):null)).put("then_seq_of_statements", (seq_of_statements156!=null?((StringTemplate)seq_of_statements156.getTemplate()):null)).put("elsif_parts", list_elsif_parts).put("else_part", (else_part157!=null?((StringTemplate)else_part157.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "if_statement"


	public static class elsif_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "elsif_part"
	// PLSQLPrinter.g:993:1: elsif_part : ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements ) -> elsif_part(condition=$expression.stseq_of_statements=$seq_of_statements.st);
	public final PLSQLPrinter.elsif_part_return elsif_part() throws RecognitionException {
		PLSQLPrinter.elsif_part_return retval = new PLSQLPrinter.elsif_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression158 =null;
		TreeRuleReturnScope seq_of_statements159 =null;

		try {
			// PLSQLPrinter.g:994:5: ( ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements ) -> elsif_part(condition=$expression.stseq_of_statements=$seq_of_statements.st))
			// PLSQLPrinter.g:994:10: ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements )
			{
			match(input,PLSQL_NON_RESERVED_ELSIF,FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_part9523); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_elsif_part9525);
			expression158=expression();
			state._fsp--;

			pushFollow(FOLLOW_seq_of_statements_in_elsif_part9527);
			seq_of_statements159=seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 995:5: -> elsif_part(condition=$expression.stseq_of_statements=$seq_of_statements.st)
			{
				retval.st = templateLib.getInstanceOf("elsif_part",new STAttrMap().put("condition", (expression158!=null?((StringTemplate)expression158.getTemplate()):null)).put("seq_of_statements", (seq_of_statements159!=null?((StringTemplate)seq_of_statements159.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "elsif_part"


	public static class else_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "else_part"
	// PLSQLPrinter.g:998:1: else_part : ^( SQL92_RESERVED_ELSE seq_of_statements ) -> else_part(seq_of_statements=$seq_of_statements.st);
	public final PLSQLPrinter.else_part_return else_part() throws RecognitionException {
		PLSQLPrinter.else_part_return retval = new PLSQLPrinter.else_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope seq_of_statements160 =null;

		try {
			// PLSQLPrinter.g:999:5: ( ^( SQL92_RESERVED_ELSE seq_of_statements ) -> else_part(seq_of_statements=$seq_of_statements.st))
			// PLSQLPrinter.g:999:10: ^( SQL92_RESERVED_ELSE seq_of_statements )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_else_part9569); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_seq_of_statements_in_else_part9571);
			seq_of_statements160=seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1000:5: -> else_part(seq_of_statements=$seq_of_statements.st)
			{
				retval.st = templateLib.getInstanceOf("else_part",new STAttrMap().put("seq_of_statements", (seq_of_statements160!=null?((StringTemplate)seq_of_statements160.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "else_part"


	public static class loop_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "loop_statement"
	// PLSQLPrinter.g:1003:1: loop_statement : ( ^( WHILE_LOOP expression seq_of_statements ) -> while_loop(condition=$expression.stseq_of_statements=$seq_of_statements.st)| ^( FOR_LOOP cursor_loop_param seq_of_statements ) -> for_loop(loopDefinition=$cursor_loop_param.ststatements=$seq_of_statements.st)| ^( LOOP_VK seq_of_statements ) -> loop(seq_of_statements=$seq_of_statements.st));
	public final PLSQLPrinter.loop_statement_return loop_statement() throws RecognitionException {
		PLSQLPrinter.loop_statement_return retval = new PLSQLPrinter.loop_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression161 =null;
		TreeRuleReturnScope seq_of_statements162 =null;
		TreeRuleReturnScope cursor_loop_param163 =null;
		TreeRuleReturnScope seq_of_statements164 =null;
		TreeRuleReturnScope seq_of_statements165 =null;

		try {
			// PLSQLPrinter.g:1004:5: ( ^( WHILE_LOOP expression seq_of_statements ) -> while_loop(condition=$expression.stseq_of_statements=$seq_of_statements.st)| ^( FOR_LOOP cursor_loop_param seq_of_statements ) -> for_loop(loopDefinition=$cursor_loop_param.ststatements=$seq_of_statements.st)| ^( LOOP_VK seq_of_statements ) -> loop(seq_of_statements=$seq_of_statements.st))
			int alt206=3;
			switch ( input.LA(1) ) {
			case WHILE_LOOP:
				{
				alt206=1;
				}
				break;
			case FOR_LOOP:
				{
				alt206=2;
				}
				break;
			case LOOP_VK:
				{
				alt206=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 206, 0, input);
				throw nvae;
			}
			switch (alt206) {
				case 1 :
					// PLSQLPrinter.g:1004:10: ^( WHILE_LOOP expression seq_of_statements )
					{
					match(input,WHILE_LOOP,FOLLOW_WHILE_LOOP_in_loop_statement9608); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_loop_statement9610);
					expression161=expression();
					state._fsp--;

					pushFollow(FOLLOW_seq_of_statements_in_loop_statement9612);
					seq_of_statements162=seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1005:5: -> while_loop(condition=$expression.stseq_of_statements=$seq_of_statements.st)
					{
						retval.st = templateLib.getInstanceOf("while_loop",new STAttrMap().put("condition", (expression161!=null?((StringTemplate)expression161.getTemplate()):null)).put("seq_of_statements", (seq_of_statements162!=null?((StringTemplate)seq_of_statements162.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1006:10: ^( FOR_LOOP cursor_loop_param seq_of_statements )
					{
					match(input,FOR_LOOP,FOLLOW_FOR_LOOP_in_loop_statement9645); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_cursor_loop_param_in_loop_statement9647);
					cursor_loop_param163=cursor_loop_param();
					state._fsp--;

					pushFollow(FOLLOW_seq_of_statements_in_loop_statement9649);
					seq_of_statements164=seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1007:5: -> for_loop(loopDefinition=$cursor_loop_param.ststatements=$seq_of_statements.st)
					{
						retval.st = templateLib.getInstanceOf("for_loop",new STAttrMap().put("loopDefinition", (cursor_loop_param163!=null?((StringTemplate)cursor_loop_param163.getTemplate()):null)).put("statements", (seq_of_statements164!=null?((StringTemplate)seq_of_statements164.getTemplate()):null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1008:10: ^( LOOP_VK seq_of_statements )
					{
					match(input,LOOP_VK,FOLLOW_LOOP_VK_in_loop_statement9682); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_seq_of_statements_in_loop_statement9684);
					seq_of_statements165=seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1009:5: -> loop(seq_of_statements=$seq_of_statements.st)
					{
						retval.st = templateLib.getInstanceOf("loop",new STAttrMap().put("seq_of_statements", (seq_of_statements165!=null?((StringTemplate)seq_of_statements165.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "loop_statement"


	public static class cursor_loop_param_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_loop_param"
	// PLSQLPrinter.g:1014:1: cursor_loop_param : ( ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND b1= expression b2= expression ) ) -> loopDefinition_bounds(indexVar=$index_name.stisReverse=$REVERSE_VK != nulllowerBound=$b1.stupperBound=$b2.st)| ^( CURSOR_BASED_FOR record_name general_element ) -> loopDefinition_cursor(indexVar=$record_name.stcursor=$general_element.st)| ^( SELECT_BASED_FOR record_name select_statement ) -> loopDefinition_select(indexVar=$record_name.stselect_statement=$select_statement.st));
	public final PLSQLPrinter.cursor_loop_param_return cursor_loop_param() throws RecognitionException {
		PLSQLPrinter.cursor_loop_param_return retval = new PLSQLPrinter.cursor_loop_param_return();
		retval.start = input.LT(1);

		CommonTree REVERSE_VK167=null;
		TreeRuleReturnScope b1 =null;
		TreeRuleReturnScope b2 =null;
		TreeRuleReturnScope index_name166 =null;
		TreeRuleReturnScope record_name168 =null;
		TreeRuleReturnScope general_element169 =null;
		TreeRuleReturnScope record_name170 =null;
		TreeRuleReturnScope select_statement171 =null;

		try {
			// PLSQLPrinter.g:1015:5: ( ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND b1= expression b2= expression ) ) -> loopDefinition_bounds(indexVar=$index_name.stisReverse=$REVERSE_VK != nulllowerBound=$b1.stupperBound=$b2.st)| ^( CURSOR_BASED_FOR record_name general_element ) -> loopDefinition_cursor(indexVar=$record_name.stcursor=$general_element.st)| ^( SELECT_BASED_FOR record_name select_statement ) -> loopDefinition_select(indexVar=$record_name.stselect_statement=$select_statement.st))
			int alt208=3;
			switch ( input.LA(1) ) {
			case INDEXED_FOR:
				{
				alt208=1;
				}
				break;
			case CURSOR_BASED_FOR:
				{
				alt208=2;
				}
				break;
			case SELECT_BASED_FOR:
				{
				alt208=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 208, 0, input);
				throw nvae;
			}
			switch (alt208) {
				case 1 :
					// PLSQLPrinter.g:1015:10: ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND b1= expression b2= expression ) )
					{
					match(input,INDEXED_FOR,FOLLOW_INDEXED_FOR_in_cursor_loop_param9723); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_index_name_in_cursor_loop_param9725);
					index_name166=index_name();
					state._fsp--;

					// PLSQLPrinter.g:1015:35: ( REVERSE_VK )?
					int alt207=2;
					int LA207_0 = input.LA(1);
					if ( (LA207_0==REVERSE_VK) ) {
						alt207=1;
					}
					switch (alt207) {
						case 1 :
							// PLSQLPrinter.g:1015:35: REVERSE_VK
							{
							REVERSE_VK167=(CommonTree)match(input,REVERSE_VK,FOLLOW_REVERSE_VK_in_cursor_loop_param9727); 
							}
							break;

					}

					match(input,SIMPLE_BOUND,FOLLOW_SIMPLE_BOUND_in_cursor_loop_param9731); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_cursor_loop_param9735);
					b1=expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_cursor_loop_param9739);
					b2=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1016:5: -> loopDefinition_bounds(indexVar=$index_name.stisReverse=$REVERSE_VK != nulllowerBound=$b1.stupperBound=$b2.st)
					{
						retval.st = templateLib.getInstanceOf("loopDefinition_bounds",new STAttrMap().put("indexVar", (index_name166!=null?((StringTemplate)index_name166.getTemplate()):null)).put("isReverse", REVERSE_VK167 != null).put("lowerBound", (b1!=null?((StringTemplate)b1.getTemplate()):null)).put("upperBound", (b2!=null?((StringTemplate)b2.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1017:10: ^( CURSOR_BASED_FOR record_name general_element )
					{
					match(input,CURSOR_BASED_FOR,FOLLOW_CURSOR_BASED_FOR_in_cursor_loop_param9783); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_record_name_in_cursor_loop_param9785);
					record_name168=record_name();
					state._fsp--;

					pushFollow(FOLLOW_general_element_in_cursor_loop_param9787);
					general_element169=general_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1018:5: -> loopDefinition_cursor(indexVar=$record_name.stcursor=$general_element.st)
					{
						retval.st = templateLib.getInstanceOf("loopDefinition_cursor",new STAttrMap().put("indexVar", (record_name168!=null?((StringTemplate)record_name168.getTemplate()):null)).put("cursor", (general_element169!=null?((StringTemplate)general_element169.getTemplate()):null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1019:10: ^( SELECT_BASED_FOR record_name select_statement )
					{
					match(input,SELECT_BASED_FOR,FOLLOW_SELECT_BASED_FOR_in_cursor_loop_param9820); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_record_name_in_cursor_loop_param9822);
					record_name170=record_name();
					state._fsp--;

					pushFollow(FOLLOW_select_statement_in_cursor_loop_param9824);
					select_statement171=select_statement();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1020:5: -> loopDefinition_select(indexVar=$record_name.stselect_statement=$select_statement.st)
					{
						retval.st = templateLib.getInstanceOf("loopDefinition_select",new STAttrMap().put("indexVar", (record_name170!=null?((StringTemplate)record_name170.getTemplate()):null)).put("select_statement", (select_statement171!=null?((StringTemplate)select_statement171.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_loop_param"


	public static class forall_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "forall_statement"
	// PLSQLPrinter.g:1025:1: forall_statement : ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? ) -> template( \"not implemented: forall_statement\";
	public final PLSQLPrinter.forall_statement_return forall_statement() throws RecognitionException {
		PLSQLPrinter.forall_statement_return retval = new PLSQLPrinter.forall_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1026:5: ( ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? ) -> template( \"not implemented: forall_statement\")
			// PLSQLPrinter.g:1026:10: ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? )
			{
			match(input,FORALL_VK,FOLLOW_FORALL_VK_in_forall_statement9868); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_index_name_in_forall_statement9870);
			index_name();
			state._fsp--;

			pushFollow(FOLLOW_bounds_clause_in_forall_statement9872);
			bounds_clause();
			state._fsp--;

			pushFollow(FOLLOW_sql_statement_in_forall_statement9874);
			sql_statement();
			state._fsp--;

			// PLSQLPrinter.g:1026:61: ( EXCEPTIONS_VK )?
			int alt209=2;
			int LA209_0 = input.LA(1);
			if ( (LA209_0==EXCEPTIONS_VK) ) {
				alt209=1;
			}
			switch (alt209) {
				case 1 :
					// PLSQLPrinter.g:1026:61: EXCEPTIONS_VK
					{
					match(input,EXCEPTIONS_VK,FOLLOW_EXCEPTIONS_VK_in_forall_statement9876); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1027:5: -> template( \"not implemented: forall_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: forall_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "forall_statement"


	public static class bounds_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "bounds_clause"
	// PLSQLPrinter.g:1030:1: bounds_clause : ( ^( SIMPLE_BOUND expression expression ) -> template( \"not implemented: bounds_clause\"| ^( INDICES_BOUND collection_name ( between_bound )? ) -> template( \"not implemented: bounds_clause\"| ^( VALUES_BOUND index_name ) -> template( \"not implemented: bounds_clause\");
	public final PLSQLPrinter.bounds_clause_return bounds_clause() throws RecognitionException {
		PLSQLPrinter.bounds_clause_return retval = new PLSQLPrinter.bounds_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1031:5: ( ^( SIMPLE_BOUND expression expression ) -> template( \"not implemented: bounds_clause\"| ^( INDICES_BOUND collection_name ( between_bound )? ) -> template( \"not implemented: bounds_clause\"| ^( VALUES_BOUND index_name ) -> template( \"not implemented: bounds_clause\")
			int alt211=3;
			switch ( input.LA(1) ) {
			case SIMPLE_BOUND:
				{
				alt211=1;
				}
				break;
			case INDICES_BOUND:
				{
				alt211=2;
				}
				break;
			case VALUES_BOUND:
				{
				alt211=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 211, 0, input);
				throw nvae;
			}
			switch (alt211) {
				case 1 :
					// PLSQLPrinter.g:1031:10: ^( SIMPLE_BOUND expression expression )
					{
					match(input,SIMPLE_BOUND,FOLLOW_SIMPLE_BOUND_in_bounds_clause9913); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_bounds_clause9915);
					expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_bounds_clause9917);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1032:5: -> template( \"not implemented: bounds_clause\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: bounds_clause");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1033:10: ^( INDICES_BOUND collection_name ( between_bound )? )
					{
					match(input,INDICES_BOUND,FOLLOW_INDICES_BOUND_in_bounds_clause9944); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_collection_name_in_bounds_clause9946);
					collection_name();
					state._fsp--;

					// PLSQLPrinter.g:1033:42: ( between_bound )?
					int alt210=2;
					int LA210_0 = input.LA(1);
					if ( (LA210_0==SQL92_RESERVED_BETWEEN) ) {
						alt210=1;
					}
					switch (alt210) {
						case 1 :
							// PLSQLPrinter.g:1033:42: between_bound
							{
							pushFollow(FOLLOW_between_bound_in_bounds_clause9948);
							between_bound();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1034:5: -> template( \"not implemented: bounds_clause\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: bounds_clause");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1035:10: ^( VALUES_BOUND index_name )
					{
					match(input,VALUES_BOUND,FOLLOW_VALUES_BOUND_in_bounds_clause9976); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_index_name_in_bounds_clause9978);
					index_name();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1036:5: -> template( \"not implemented: bounds_clause\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: bounds_clause");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bounds_clause"


	public static class between_bound_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "between_bound"
	// PLSQLPrinter.g:1039:1: between_bound : ^( SQL92_RESERVED_BETWEEN expression expression ) -> template( \"not implemented: between_bound\";
	public final PLSQLPrinter.between_bound_return between_bound() throws RecognitionException {
		PLSQLPrinter.between_bound_return retval = new PLSQLPrinter.between_bound_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1040:5: ( ^( SQL92_RESERVED_BETWEEN expression expression ) -> template( \"not implemented: between_bound\")
			// PLSQLPrinter.g:1040:10: ^( SQL92_RESERVED_BETWEEN expression expression )
			{
			match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_between_bound10015); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_between_bound10017);
			expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_between_bound10019);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1041:5: -> template( \"not implemented: between_bound\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: between_bound");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "between_bound"


	public static class null_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "null_statement"
	// PLSQLPrinter.g:1044:1: null_statement : SQL92_RESERVED_NULL -> null_statement(;
	public final PLSQLPrinter.null_statement_return null_statement() throws RecognitionException {
		PLSQLPrinter.null_statement_return retval = new PLSQLPrinter.null_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1045:5: ( SQL92_RESERVED_NULL -> null_statement()
			// PLSQLPrinter.g:1045:10: SQL92_RESERVED_NULL
			{
			match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_null_statement10054); 
			// TEMPLATE REWRITE
			// 1046:5: -> null_statement(
			{
				retval.st = templateLib.getInstanceOf("null_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "null_statement"


	public static class raise_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "raise_statement"
	// PLSQLPrinter.g:1049:1: raise_statement : ^( RAISE_VK ( exception_name )? ) -> raise_statement(name=$exception_name.st);
	public final PLSQLPrinter.raise_statement_return raise_statement() throws RecognitionException {
		PLSQLPrinter.raise_statement_return retval = new PLSQLPrinter.raise_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope exception_name172 =null;

		try {
			// PLSQLPrinter.g:1050:5: ( ^( RAISE_VK ( exception_name )? ) -> raise_statement(name=$exception_name.st))
			// PLSQLPrinter.g:1050:10: ^( RAISE_VK ( exception_name )? )
			{
			match(input,RAISE_VK,FOLLOW_RAISE_VK_in_raise_statement10087); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1050:21: ( exception_name )?
				int alt212=2;
				int LA212_0 = input.LA(1);
				if ( (LA212_0==EXCEPTION_NAME) ) {
					alt212=1;
				}
				switch (alt212) {
					case 1 :
						// PLSQLPrinter.g:1050:21: exception_name
						{
						pushFollow(FOLLOW_exception_name_in_raise_statement10089);
						exception_name172=exception_name();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1051:5: -> raise_statement(name=$exception_name.st)
			{
				retval.st = templateLib.getInstanceOf("raise_statement",new STAttrMap().put("name", (exception_name172!=null?((StringTemplate)exception_name172.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "raise_statement"


	public static class return_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "return_statement"
	// PLSQLPrinter.g:1054:1: return_statement : ^( RETURN_VK ( expression )? ) -> return_statement(expression=$expression.st);
	public final PLSQLPrinter.return_statement_return return_statement() throws RecognitionException {
		PLSQLPrinter.return_statement_return retval = new PLSQLPrinter.return_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression173 =null;

		try {
			// PLSQLPrinter.g:1055:5: ( ^( RETURN_VK ( expression )? ) -> return_statement(expression=$expression.st))
			// PLSQLPrinter.g:1055:10: ^( RETURN_VK ( expression )? )
			{
			match(input,RETURN_VK,FOLLOW_RETURN_VK_in_return_statement10127); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1055:22: ( expression )?
				int alt213=2;
				int LA213_0 = input.LA(1);
				if ( (LA213_0==EXPR||LA213_0==LOGIC_EXPR) ) {
					alt213=1;
				}
				switch (alt213) {
					case 1 :
						// PLSQLPrinter.g:1055:22: expression
						{
						pushFollow(FOLLOW_expression_in_return_statement10129);
						expression173=expression();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1055:35: -> return_statement(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("return_statement",new STAttrMap().put("expression", (expression173!=null?((StringTemplate)expression173.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "return_statement"


	public static class body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "body"
	// PLSQLPrinter.g:1058:1: body : ^( BODY ( label_name )? seq_of_statements ( exception_clause )? ) -> body(bodyLabel=$label_name.ststatements=$seq_of_statements.stexception_clause=$exception_clause.st);
	public final PLSQLPrinter.body_return body() throws RecognitionException {
		PLSQLPrinter.body_return retval = new PLSQLPrinter.body_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name174 =null;
		TreeRuleReturnScope seq_of_statements175 =null;
		TreeRuleReturnScope exception_clause176 =null;

		try {
			// PLSQLPrinter.g:1059:5: ( ^( BODY ( label_name )? seq_of_statements ( exception_clause )? ) -> body(bodyLabel=$label_name.ststatements=$seq_of_statements.stexception_clause=$exception_clause.st))
			// PLSQLPrinter.g:1059:10: ^( BODY ( label_name )? seq_of_statements ( exception_clause )? )
			{
			match(input,BODY,FOLLOW_BODY_in_body10161); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1059:17: ( label_name )?
			int alt214=2;
			int LA214_0 = input.LA(1);
			if ( (LA214_0==LABEL_NAME) ) {
				alt214=1;
			}
			switch (alt214) {
				case 1 :
					// PLSQLPrinter.g:1059:17: label_name
					{
					pushFollow(FOLLOW_label_name_in_body10163);
					label_name174=label_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_seq_of_statements_in_body10166);
			seq_of_statements175=seq_of_statements();
			state._fsp--;

			// PLSQLPrinter.g:1059:47: ( exception_clause )?
			int alt215=2;
			int LA215_0 = input.LA(1);
			if ( (LA215_0==SQL92_RESERVED_EXCEPTION) ) {
				alt215=1;
			}
			switch (alt215) {
				case 1 :
					// PLSQLPrinter.g:1059:47: exception_clause
					{
					pushFollow(FOLLOW_exception_clause_in_body10168);
					exception_clause176=exception_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1060:5: -> body(bodyLabel=$label_name.ststatements=$seq_of_statements.stexception_clause=$exception_clause.st)
			{
				retval.st = templateLib.getInstanceOf("body",new STAttrMap().put("bodyLabel", (label_name174!=null?((StringTemplate)label_name174.getTemplate()):null)).put("statements", (seq_of_statements175!=null?((StringTemplate)seq_of_statements175.getTemplate()):null)).put("exception_clause", (exception_clause176!=null?((StringTemplate)exception_clause176.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "body"


	public static class exception_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_clause"
	// PLSQLPrinter.g:1065:1: exception_clause : ^( SQL92_RESERVED_EXCEPTION (handlers+= exception_handler )+ ) -> exception_clause(exception_handlers=$handlers);
	public final PLSQLPrinter.exception_clause_return exception_clause() throws RecognitionException {
		PLSQLPrinter.exception_clause_return retval = new PLSQLPrinter.exception_clause_return();
		retval.start = input.LT(1);

		List<Object> list_handlers=null;
		RuleReturnScope handlers = null;
		try {
			// PLSQLPrinter.g:1066:5: ( ^( SQL92_RESERVED_EXCEPTION (handlers+= exception_handler )+ ) -> exception_clause(exception_handlers=$handlers))
			// PLSQLPrinter.g:1066:10: ^( SQL92_RESERVED_EXCEPTION (handlers+= exception_handler )+ )
			{
			match(input,SQL92_RESERVED_EXCEPTION,FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_clause10219); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1066:45: (handlers+= exception_handler )+
			int cnt216=0;
			loop216:
			while (true) {
				int alt216=2;
				int LA216_0 = input.LA(1);
				if ( (LA216_0==SQL92_RESERVED_WHEN) ) {
					alt216=1;
				}

				switch (alt216) {
				case 1 :
					// PLSQLPrinter.g:1066:45: handlers+= exception_handler
					{
					pushFollow(FOLLOW_exception_handler_in_exception_clause10223);
					handlers=exception_handler();
					state._fsp--;

					if (list_handlers==null) list_handlers=new ArrayList<Object>();
					list_handlers.add(handlers.getTemplate());
					}
					break;

				default :
					if ( cnt216 >= 1 ) break loop216;
					EarlyExitException eee = new EarlyExitException(216, input);
					throw eee;
				}
				cnt216++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1067:5: -> exception_clause(exception_handlers=$handlers)
			{
				retval.st = templateLib.getInstanceOf("exception_clause",new STAttrMap().put("exception_handlers", list_handlers));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_clause"


	public static class exception_handler_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_handler"
	// PLSQLPrinter.g:1070:1: exception_handler : ^( SQL92_RESERVED_WHEN (names+= exception_name )+ seq_of_statements ) -> exception_handler(exception_names=$namesseq_of_statements=$seq_of_statements.st);
	public final PLSQLPrinter.exception_handler_return exception_handler() throws RecognitionException {
		PLSQLPrinter.exception_handler_return retval = new PLSQLPrinter.exception_handler_return();
		retval.start = input.LT(1);

		List<Object> list_names=null;
		TreeRuleReturnScope seq_of_statements177 =null;
		RuleReturnScope names = null;
		try {
			// PLSQLPrinter.g:1071:5: ( ^( SQL92_RESERVED_WHEN (names+= exception_name )+ seq_of_statements ) -> exception_handler(exception_names=$namesseq_of_statements=$seq_of_statements.st))
			// PLSQLPrinter.g:1071:10: ^( SQL92_RESERVED_WHEN (names+= exception_name )+ seq_of_statements )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_exception_handler10261); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1071:37: (names+= exception_name )+
			int cnt217=0;
			loop217:
			while (true) {
				int alt217=2;
				int LA217_0 = input.LA(1);
				if ( (LA217_0==EXCEPTION_NAME) ) {
					alt217=1;
				}

				switch (alt217) {
				case 1 :
					// PLSQLPrinter.g:1071:37: names+= exception_name
					{
					pushFollow(FOLLOW_exception_name_in_exception_handler10265);
					names=exception_name();
					state._fsp--;

					if (list_names==null) list_names=new ArrayList<Object>();
					list_names.add(names.getTemplate());
					}
					break;

				default :
					if ( cnt217 >= 1 ) break loop217;
					EarlyExitException eee = new EarlyExitException(217, input);
					throw eee;
				}
				cnt217++;
			}

			pushFollow(FOLLOW_seq_of_statements_in_exception_handler10268);
			seq_of_statements177=seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1072:5: -> exception_handler(exception_names=$namesseq_of_statements=$seq_of_statements.st)
			{
				retval.st = templateLib.getInstanceOf("exception_handler",new STAttrMap().put("exception_names", list_names).put("seq_of_statements", (seq_of_statements177!=null?((StringTemplate)seq_of_statements177.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_handler"


	public static class block_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "block"
	// PLSQLPrinter.g:1077:1: block : ^( BLOCK (specs+= declare_spec )* body ) -> block(declare_spec=$specsbody=$body.st);
	public final PLSQLPrinter.block_return block() throws RecognitionException {
		PLSQLPrinter.block_return retval = new PLSQLPrinter.block_return();
		retval.start = input.LT(1);

		List<Object> list_specs=null;
		TreeRuleReturnScope body178 =null;
		RuleReturnScope specs = null;
		try {
			// PLSQLPrinter.g:1078:5: ( ^( BLOCK (specs+= declare_spec )* body ) -> block(declare_spec=$specsbody=$body.st))
			// PLSQLPrinter.g:1078:10: ^( BLOCK (specs+= declare_spec )* body )
			{
			match(input,BLOCK,FOLLOW_BLOCK_in_block10312); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1078:23: (specs+= declare_spec )*
			loop218:
			while (true) {
				int alt218=2;
				int LA218_0 = input.LA(1);
				if ( (LA218_0==CREATE_FUNCTION||LA218_0==CREATE_PROCEDURE||(LA218_0 >= CREATE_TYPE_BODY && LA218_0 <= CREATE_TYPE_SPEC)||LA218_0==CURSOR_DECLARE||LA218_0==EXCEPTION_DECLARE||LA218_0==PRAGMA_DECLARE||(LA218_0 >= RECORD_TYPE_DECLARE_FIELDS && LA218_0 <= RECORD_VAR_DECLARE)||LA218_0==SUBTYPE_DECLARE||(LA218_0 >= TABLE_TYPE_DECLARE && LA218_0 <= TABLE_VAR_DECLARE)||LA218_0==VARIABLE_DECLARE) ) {
					alt218=1;
				}

				switch (alt218) {
				case 1 :
					// PLSQLPrinter.g:1078:23: specs+= declare_spec
					{
					pushFollow(FOLLOW_declare_spec_in_block10316);
					specs=declare_spec();
					state._fsp--;

					if (list_specs==null) list_specs=new ArrayList<Object>();
					list_specs.add(specs.getTemplate());
					}
					break;

				default :
					break loop218;
				}
			}

			pushFollow(FOLLOW_body_in_block10319);
			body178=body();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1079:5: -> block(declare_spec=$specsbody=$body.st)
			{
				retval.st = templateLib.getInstanceOf("block",new STAttrMap().put("declare_spec", list_specs).put("body", (body178!=null?((StringTemplate)body178.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "block"


	public static class perform_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "perform_statement"
	// PLSQLPrinter.g:1084:1: perform_statement : ^( PGSQL_PERFORM (inner= general_element |inner= data_manipulation_language_statements ) ) -> perform_statement(inner=$inner.st);
	public final PLSQLPrinter.perform_statement_return perform_statement() throws RecognitionException {
		PLSQLPrinter.perform_statement_return retval = new PLSQLPrinter.perform_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope inner =null;

		try {
			// PLSQLPrinter.g:1085:5: ( ^( PGSQL_PERFORM (inner= general_element |inner= data_manipulation_language_statements ) ) -> perform_statement(inner=$inner.st))
			// PLSQLPrinter.g:1085:9: ^( PGSQL_PERFORM (inner= general_element |inner= data_manipulation_language_statements ) )
			{
			match(input,PGSQL_PERFORM,FOLLOW_PGSQL_PERFORM_in_perform_statement10362); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1085:25: (inner= general_element |inner= data_manipulation_language_statements )
			int alt219=2;
			int LA219_0 = input.LA(1);
			if ( (LA219_0==CASCATED_ELEMENT) ) {
				alt219=1;
			}
			else if ( (LA219_0==PLSQL_RESERVED_LOCK||LA219_0==SQL92_RESERVED_DELETE||LA219_0==SQL92_RESERVED_INSERT||LA219_0==SQL92_RESERVED_UPDATE||LA219_0==MERGE_VK||LA219_0==SELECT_STATEMENT) ) {
				alt219=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 219, 0, input);
				throw nvae;
			}

			switch (alt219) {
				case 1 :
					// PLSQLPrinter.g:1085:26: inner= general_element
					{
					pushFollow(FOLLOW_general_element_in_perform_statement10367);
					inner=general_element();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1085:48: inner= data_manipulation_language_statements
					{
					pushFollow(FOLLOW_data_manipulation_language_statements_in_perform_statement10371);
					inner=data_manipulation_language_statements();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1086:5: -> perform_statement(inner=$inner.st)
			{
				retval.st = templateLib.getInstanceOf("perform_statement",new STAttrMap().put("inner", (inner!=null?((StringTemplate)inner.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "perform_statement"


	public static class sql_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sql_statement"
	// PLSQLPrinter.g:1091:1: sql_statement : ( execute_immediate -> { $execute_immediate.st }| data_manipulation_language_statements -> { $data_manipulation_language_statements.st }| cursor_manipulation_statements -> { $cursor_manipulation_statements.st }| transaction_control_statements -> { $transaction_control_statements.st });
	public final PLSQLPrinter.sql_statement_return sql_statement() throws RecognitionException {
		PLSQLPrinter.sql_statement_return retval = new PLSQLPrinter.sql_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope execute_immediate179 =null;
		TreeRuleReturnScope data_manipulation_language_statements180 =null;
		TreeRuleReturnScope cursor_manipulation_statements181 =null;
		TreeRuleReturnScope transaction_control_statements182 =null;

		try {
			// PLSQLPrinter.g:1092:5: ( execute_immediate -> { $execute_immediate.st }| data_manipulation_language_statements -> { $data_manipulation_language_statements.st }| cursor_manipulation_statements -> { $cursor_manipulation_statements.st }| transaction_control_statements -> { $transaction_control_statements.st })
			int alt220=4;
			switch ( input.LA(1) ) {
			case EXECUTE_VK:
				{
				alt220=1;
				}
				break;
			case PLSQL_RESERVED_LOCK:
			case SQL92_RESERVED_DELETE:
			case SQL92_RESERVED_INSERT:
			case SQL92_RESERVED_UPDATE:
			case MERGE_VK:
			case SELECT_STATEMENT:
				{
				alt220=2;
				}
				break;
			case SQL92_RESERVED_FETCH:
			case CLOSE_VK:
			case OPEN_FOR:
			case OPEN_VK:
				{
				alt220=3;
				}
				break;
			case COMMIT_VK:
			case ROLLBACK_VK:
			case SAVEPOINT_VK:
			case SET_CONSTRAINT:
			case SET_TRANSACTION:
				{
				alt220=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 220, 0, input);
				throw nvae;
			}
			switch (alt220) {
				case 1 :
					// PLSQLPrinter.g:1092:10: execute_immediate
					{
					pushFollow(FOLLOW_execute_immediate_in_sql_statement10405);
					execute_immediate179=execute_immediate();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1092:28: -> { $execute_immediate.st }
					{
						retval.st =  (execute_immediate179!=null?((StringTemplate)execute_immediate179.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1093:10: data_manipulation_language_statements
					{
					pushFollow(FOLLOW_data_manipulation_language_statements_in_sql_statement10420);
					data_manipulation_language_statements180=data_manipulation_language_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1093:48: -> { $data_manipulation_language_statements.st }
					{
						retval.st =  (data_manipulation_language_statements180!=null?((StringTemplate)data_manipulation_language_statements180.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1094:10: cursor_manipulation_statements
					{
					pushFollow(FOLLOW_cursor_manipulation_statements_in_sql_statement10435);
					cursor_manipulation_statements181=cursor_manipulation_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1094:41: -> { $cursor_manipulation_statements.st }
					{
						retval.st =  (cursor_manipulation_statements181!=null?((StringTemplate)cursor_manipulation_statements181.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1095:10: transaction_control_statements
					{
					pushFollow(FOLLOW_transaction_control_statements_in_sql_statement10450);
					transaction_control_statements182=transaction_control_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1095:41: -> { $transaction_control_statements.st }
					{
						retval.st =  (transaction_control_statements182!=null?((StringTemplate)transaction_control_statements182.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sql_statement"


	public static class execute_immediate_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "execute_immediate"
	// PLSQLPrinter.g:1098:1: execute_immediate : ^( EXECUTE_VK expression (into= into_clause (using= using_clause )? |using= using_clause (dynamic_returning= dynamic_returning_clause )? |dynamic_returning= dynamic_returning_clause )? ) -> execute_immediate_statement(expression=$expression.stinto_clause=$into.stusing_clause=$using.stdynamic_returning_clause=$dynamic_returning.st);
	public final PLSQLPrinter.execute_immediate_return execute_immediate() throws RecognitionException {
		PLSQLPrinter.execute_immediate_return retval = new PLSQLPrinter.execute_immediate_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope into =null;
		TreeRuleReturnScope using =null;
		TreeRuleReturnScope dynamic_returning =null;
		TreeRuleReturnScope expression183 =null;

		try {
			// PLSQLPrinter.g:1099:5: ( ^( EXECUTE_VK expression (into= into_clause (using= using_clause )? |using= using_clause (dynamic_returning= dynamic_returning_clause )? |dynamic_returning= dynamic_returning_clause )? ) -> execute_immediate_statement(expression=$expression.stinto_clause=$into.stusing_clause=$using.stdynamic_returning_clause=$dynamic_returning.st))
			// PLSQLPrinter.g:1099:10: ^( EXECUTE_VK expression (into= into_clause (using= using_clause )? |using= using_clause (dynamic_returning= dynamic_returning_clause )? |dynamic_returning= dynamic_returning_clause )? )
			{
			match(input,EXECUTE_VK,FOLLOW_EXECUTE_VK_in_execute_immediate10475); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_execute_immediate10477);
			expression183=expression();
			state._fsp--;

			// PLSQLPrinter.g:1100:11: (into= into_clause (using= using_clause )? |using= using_clause (dynamic_returning= dynamic_returning_clause )? |dynamic_returning= dynamic_returning_clause )?
			int alt223=4;
			switch ( input.LA(1) ) {
				case SQL92_RESERVED_INTO:
				case BULK_VK:
					{
					alt223=1;
					}
					break;
				case PLSQL_NON_RESERVED_USING:
					{
					alt223=2;
					}
					break;
				case DYNAMIC_RETURN:
					{
					alt223=3;
					}
					break;
			}
			switch (alt223) {
				case 1 :
					// PLSQLPrinter.g:1100:16: into= into_clause (using= using_clause )?
					{
					pushFollow(FOLLOW_into_clause_in_execute_immediate10496);
					into=into_clause();
					state._fsp--;

					// PLSQLPrinter.g:1100:38: (using= using_clause )?
					int alt221=2;
					int LA221_0 = input.LA(1);
					if ( (LA221_0==PLSQL_NON_RESERVED_USING) ) {
						alt221=1;
					}
					switch (alt221) {
						case 1 :
							// PLSQLPrinter.g:1100:38: using= using_clause
							{
							pushFollow(FOLLOW_using_clause_in_execute_immediate10500);
							using=using_clause();
							state._fsp--;

							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1101:16: using= using_clause (dynamic_returning= dynamic_returning_clause )?
					{
					pushFollow(FOLLOW_using_clause_in_execute_immediate10520);
					using=using_clause();
					state._fsp--;

					// PLSQLPrinter.g:1101:52: (dynamic_returning= dynamic_returning_clause )?
					int alt222=2;
					int LA222_0 = input.LA(1);
					if ( (LA222_0==DYNAMIC_RETURN) ) {
						alt222=1;
					}
					switch (alt222) {
						case 1 :
							// PLSQLPrinter.g:1101:52: dynamic_returning= dynamic_returning_clause
							{
							pushFollow(FOLLOW_dynamic_returning_clause_in_execute_immediate10524);
							dynamic_returning=dynamic_returning_clause();
							state._fsp--;

							}
							break;

					}

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1102:16: dynamic_returning= dynamic_returning_clause
					{
					pushFollow(FOLLOW_dynamic_returning_clause_in_execute_immediate10544);
					dynamic_returning=dynamic_returning_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1105:5: -> execute_immediate_statement(expression=$expression.stinto_clause=$into.stusing_clause=$using.stdynamic_returning_clause=$dynamic_returning.st)
			{
				retval.st = templateLib.getInstanceOf("execute_immediate_statement",new STAttrMap().put("expression", (expression183!=null?((StringTemplate)expression183.getTemplate()):null)).put("into_clause", (into!=null?((StringTemplate)into.getTemplate()):null)).put("using_clause", (using!=null?((StringTemplate)using.getTemplate()):null)).put("dynamic_returning_clause", (dynamic_returning!=null?((StringTemplate)dynamic_returning.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "execute_immediate"


	public static class dynamic_returning_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dynamic_returning_clause"
	// PLSQLPrinter.g:1111:1: dynamic_returning_clause : ^( DYNAMIC_RETURN into_clause ) -> dynamic_returning_clause(into_clause=$into_clause.st);
	public final PLSQLPrinter.dynamic_returning_clause_return dynamic_returning_clause() throws RecognitionException {
		PLSQLPrinter.dynamic_returning_clause_return retval = new PLSQLPrinter.dynamic_returning_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope into_clause184 =null;

		try {
			// PLSQLPrinter.g:1112:5: ( ^( DYNAMIC_RETURN into_clause ) -> dynamic_returning_clause(into_clause=$into_clause.st))
			// PLSQLPrinter.g:1112:10: ^( DYNAMIC_RETURN into_clause )
			{
			match(input,DYNAMIC_RETURN,FOLLOW_DYNAMIC_RETURN_in_dynamic_returning_clause10640); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_into_clause_in_dynamic_returning_clause10642);
			into_clause184=into_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1113:5: -> dynamic_returning_clause(into_clause=$into_clause.st)
			{
				retval.st = templateLib.getInstanceOf("dynamic_returning_clause",new STAttrMap().put("into_clause", (into_clause184!=null?((StringTemplate)into_clause184.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dynamic_returning_clause"


	public static class data_manipulation_language_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "data_manipulation_language_statements"
	// PLSQLPrinter.g:1120:1: data_manipulation_language_statements : ( merge_statement -> { $merge_statement.st }| lock_table_statement -> { $lock_table_statement.st }| select_statement -> { $select_statement.st }| update_statement -> { $update_statement.st }| delete_statement -> { $delete_statement.st }| insert_statement -> { $insert_statement.st });
	public final PLSQLPrinter.data_manipulation_language_statements_return data_manipulation_language_statements() throws RecognitionException {
		PLSQLPrinter.data_manipulation_language_statements_return retval = new PLSQLPrinter.data_manipulation_language_statements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope merge_statement185 =null;
		TreeRuleReturnScope lock_table_statement186 =null;
		TreeRuleReturnScope select_statement187 =null;
		TreeRuleReturnScope update_statement188 =null;
		TreeRuleReturnScope delete_statement189 =null;
		TreeRuleReturnScope insert_statement190 =null;

		try {
			// PLSQLPrinter.g:1121:5: ( merge_statement -> { $merge_statement.st }| lock_table_statement -> { $lock_table_statement.st }| select_statement -> { $select_statement.st }| update_statement -> { $update_statement.st }| delete_statement -> { $delete_statement.st }| insert_statement -> { $insert_statement.st })
			int alt224=6;
			switch ( input.LA(1) ) {
			case MERGE_VK:
				{
				alt224=1;
				}
				break;
			case PLSQL_RESERVED_LOCK:
				{
				alt224=2;
				}
				break;
			case SELECT_STATEMENT:
				{
				alt224=3;
				}
				break;
			case SQL92_RESERVED_UPDATE:
				{
				alt224=4;
				}
				break;
			case SQL92_RESERVED_DELETE:
				{
				alt224=5;
				}
				break;
			case SQL92_RESERVED_INSERT:
				{
				alt224=6;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 224, 0, input);
				throw nvae;
			}
			switch (alt224) {
				case 1 :
					// PLSQLPrinter.g:1121:10: merge_statement
					{
					pushFollow(FOLLOW_merge_statement_in_data_manipulation_language_statements10682);
					merge_statement185=merge_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1121:26: -> { $merge_statement.st }
					{
						retval.st =  (merge_statement185!=null?((StringTemplate)merge_statement185.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1122:10: lock_table_statement
					{
					pushFollow(FOLLOW_lock_table_statement_in_data_manipulation_language_statements10697);
					lock_table_statement186=lock_table_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1122:31: -> { $lock_table_statement.st }
					{
						retval.st =  (lock_table_statement186!=null?((StringTemplate)lock_table_statement186.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1123:10: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_data_manipulation_language_statements10712);
					select_statement187=select_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1123:27: -> { $select_statement.st }
					{
						retval.st =  (select_statement187!=null?((StringTemplate)select_statement187.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1124:10: update_statement
					{
					pushFollow(FOLLOW_update_statement_in_data_manipulation_language_statements10727);
					update_statement188=update_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1124:27: -> { $update_statement.st }
					{
						retval.st =  (update_statement188!=null?((StringTemplate)update_statement188.getTemplate()):null) ;
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1125:10: delete_statement
					{
					pushFollow(FOLLOW_delete_statement_in_data_manipulation_language_statements10742);
					delete_statement189=delete_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1125:27: -> { $delete_statement.st }
					{
						retval.st =  (delete_statement189!=null?((StringTemplate)delete_statement189.getTemplate()):null) ;
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:1126:10: insert_statement
					{
					pushFollow(FOLLOW_insert_statement_in_data_manipulation_language_statements10757);
					insert_statement190=insert_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1126:27: -> { $insert_statement.st }
					{
						retval.st =  (insert_statement190!=null?((StringTemplate)insert_statement190.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "data_manipulation_language_statements"


	public static class select_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "select_statement"
	// PLSQLPrinter.g:1129:1: select_statement : ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( order_by_clause )? ( for_update_clause )? ) -> select_statement(subquery_factoring_clause=$subquery_factoring_clause.stsubquery=$subquery.storder_by_clause=$order_by_clause.stfor_update_clause=$for_update_clause.st);
	public final PLSQLPrinter.select_statement_return select_statement() throws RecognitionException {
		PLSQLPrinter.select_statement_return retval = new PLSQLPrinter.select_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope subquery_factoring_clause191 =null;
		TreeRuleReturnScope subquery192 =null;
		TreeRuleReturnScope order_by_clause193 =null;
		TreeRuleReturnScope for_update_clause194 =null;

		try {
			// PLSQLPrinter.g:1130:5: ( ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( order_by_clause )? ( for_update_clause )? ) -> select_statement(subquery_factoring_clause=$subquery_factoring_clause.stsubquery=$subquery.storder_by_clause=$order_by_clause.stfor_update_clause=$for_update_clause.st))
			// PLSQLPrinter.g:1130:10: ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( order_by_clause )? ( for_update_clause )? )
			{
			match(input,SELECT_STATEMENT,FOLLOW_SELECT_STATEMENT_in_select_statement10782); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1130:29: ( subquery_factoring_clause )?
			int alt225=2;
			int LA225_0 = input.LA(1);
			if ( (LA225_0==SQL92_RESERVED_WITH) ) {
				alt225=1;
			}
			switch (alt225) {
				case 1 :
					// PLSQLPrinter.g:1130:29: subquery_factoring_clause
					{
					pushFollow(FOLLOW_subquery_factoring_clause_in_select_statement10784);
					subquery_factoring_clause191=subquery_factoring_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_subquery_in_select_statement10787);
			subquery192=subquery();
			state._fsp--;

			// PLSQLPrinter.g:1130:65: ( order_by_clause )?
			int alt226=2;
			int LA226_0 = input.LA(1);
			if ( (LA226_0==SQL92_RESERVED_ORDER) ) {
				alt226=1;
			}
			switch (alt226) {
				case 1 :
					// PLSQLPrinter.g:1130:65: order_by_clause
					{
					pushFollow(FOLLOW_order_by_clause_in_select_statement10789);
					order_by_clause193=order_by_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1130:82: ( for_update_clause )?
			int alt227=2;
			int LA227_0 = input.LA(1);
			if ( (LA227_0==SQL92_RESERVED_FOR) ) {
				alt227=1;
			}
			switch (alt227) {
				case 1 :
					// PLSQLPrinter.g:1130:82: for_update_clause
					{
					pushFollow(FOLLOW_for_update_clause_in_select_statement10792);
					for_update_clause194=for_update_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1131:5: -> select_statement(subquery_factoring_clause=$subquery_factoring_clause.stsubquery=$subquery.storder_by_clause=$order_by_clause.stfor_update_clause=$for_update_clause.st)
			{
				retval.st = templateLib.getInstanceOf("select_statement",new STAttrMap().put("subquery_factoring_clause", (subquery_factoring_clause191!=null?((StringTemplate)subquery_factoring_clause191.getTemplate()):null)).put("subquery", (subquery192!=null?((StringTemplate)subquery192.getTemplate()):null)).put("order_by_clause", (order_by_clause193!=null?((StringTemplate)order_by_clause193.getTemplate()):null)).put("for_update_clause", (for_update_clause194!=null?((StringTemplate)for_update_clause194.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "select_statement"


	public static class subquery_factoring_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_factoring_clause"
	// PLSQLPrinter.g:1139:1: subquery_factoring_clause : ^( SQL92_RESERVED_WITH ( RECURSIVE_VK )? (factoring_elements+= factoring_element )+ ) -> subquery_factoring_clause(is_recursive=$RECURSIVE_VK != nullfactoring_elements=$factoring_elements);
	public final PLSQLPrinter.subquery_factoring_clause_return subquery_factoring_clause() throws RecognitionException {
		PLSQLPrinter.subquery_factoring_clause_return retval = new PLSQLPrinter.subquery_factoring_clause_return();
		retval.start = input.LT(1);

		CommonTree RECURSIVE_VK195=null;
		List<Object> list_factoring_elements=null;
		RuleReturnScope factoring_elements = null;
		try {
			// PLSQLPrinter.g:1140:5: ( ^( SQL92_RESERVED_WITH ( RECURSIVE_VK )? (factoring_elements+= factoring_element )+ ) -> subquery_factoring_clause(is_recursive=$RECURSIVE_VK != nullfactoring_elements=$factoring_elements))
			// PLSQLPrinter.g:1140:10: ^( SQL92_RESERVED_WITH ( RECURSIVE_VK )? (factoring_elements+= factoring_element )+ )
			{
			match(input,SQL92_RESERVED_WITH,FOLLOW_SQL92_RESERVED_WITH_in_subquery_factoring_clause10895); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1140:32: ( RECURSIVE_VK )?
			int alt228=2;
			int LA228_0 = input.LA(1);
			if ( (LA228_0==RECURSIVE_VK) ) {
				alt228=1;
			}
			switch (alt228) {
				case 1 :
					// PLSQLPrinter.g:1140:32: RECURSIVE_VK
					{
					RECURSIVE_VK195=(CommonTree)match(input,RECURSIVE_VK,FOLLOW_RECURSIVE_VK_in_subquery_factoring_clause10897); 
					}
					break;

			}

			// PLSQLPrinter.g:1140:64: (factoring_elements+= factoring_element )+
			int cnt229=0;
			loop229:
			while (true) {
				int alt229=2;
				int LA229_0 = input.LA(1);
				if ( (LA229_0==FACTORING) ) {
					alt229=1;
				}

				switch (alt229) {
				case 1 :
					// PLSQLPrinter.g:1140:64: factoring_elements+= factoring_element
					{
					pushFollow(FOLLOW_factoring_element_in_subquery_factoring_clause10902);
					factoring_elements=factoring_element();
					state._fsp--;

					if (list_factoring_elements==null) list_factoring_elements=new ArrayList<Object>();
					list_factoring_elements.add(factoring_elements.getTemplate());
					}
					break;

				default :
					if ( cnt229 >= 1 ) break loop229;
					EarlyExitException eee = new EarlyExitException(229, input);
					throw eee;
				}
				cnt229++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1141:5: -> subquery_factoring_clause(is_recursive=$RECURSIVE_VK != nullfactoring_elements=$factoring_elements)
			{
				retval.st = templateLib.getInstanceOf("subquery_factoring_clause",new STAttrMap().put("is_recursive", RECURSIVE_VK195 != null).put("factoring_elements", list_factoring_elements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_factoring_clause"


	public static class factoring_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "factoring_element"
	// PLSQLPrinter.g:1144:1: factoring_element : ^( FACTORING query_name (column_names+= column_name )* subquery ( order_by_clause )? ) -> factoring_element(query_name=$query_name.stcolumn_names=$column_namessubquery=$subquery.storder_by_clause=$order_by_clause.st);
	public final PLSQLPrinter.factoring_element_return factoring_element() throws RecognitionException {
		PLSQLPrinter.factoring_element_return retval = new PLSQLPrinter.factoring_element_return();
		retval.start = input.LT(1);

		List<Object> list_column_names=null;
		TreeRuleReturnScope query_name196 =null;
		TreeRuleReturnScope subquery197 =null;
		TreeRuleReturnScope order_by_clause198 =null;
		RuleReturnScope column_names = null;
		try {
			// PLSQLPrinter.g:1145:5: ( ^( FACTORING query_name (column_names+= column_name )* subquery ( order_by_clause )? ) -> factoring_element(query_name=$query_name.stcolumn_names=$column_namessubquery=$subquery.storder_by_clause=$order_by_clause.st))
			// PLSQLPrinter.g:1145:10: ^( FACTORING query_name (column_names+= column_name )* subquery ( order_by_clause )? )
			{
			match(input,FACTORING,FOLLOW_FACTORING_in_factoring_element10945); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_query_name_in_factoring_element10947);
			query_name196=query_name();
			state._fsp--;

			// PLSQLPrinter.g:1145:45: (column_names+= column_name )*
			loop230:
			while (true) {
				int alt230=2;
				int LA230_0 = input.LA(1);
				if ( (LA230_0==COLUMN_NAME) ) {
					alt230=1;
				}

				switch (alt230) {
				case 1 :
					// PLSQLPrinter.g:1145:45: column_names+= column_name
					{
					pushFollow(FOLLOW_column_name_in_factoring_element10951);
					column_names=column_name();
					state._fsp--;

					if (list_column_names==null) list_column_names=new ArrayList<Object>();
					list_column_names.add(column_names.getTemplate());
					}
					break;

				default :
					break loop230;
				}
			}

			pushFollow(FOLLOW_subquery_in_factoring_element10954);
			subquery197=subquery();
			state._fsp--;

			// PLSQLPrinter.g:1145:69: ( order_by_clause )?
			int alt231=2;
			int LA231_0 = input.LA(1);
			if ( (LA231_0==SQL92_RESERVED_ORDER) ) {
				alt231=1;
			}
			switch (alt231) {
				case 1 :
					// PLSQLPrinter.g:1145:69: order_by_clause
					{
					pushFollow(FOLLOW_order_by_clause_in_factoring_element10956);
					order_by_clause198=order_by_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1146:5: -> factoring_element(query_name=$query_name.stcolumn_names=$column_namessubquery=$subquery.storder_by_clause=$order_by_clause.st)
			{
				retval.st = templateLib.getInstanceOf("factoring_element",new STAttrMap().put("query_name", (query_name196!=null?((StringTemplate)query_name196.getTemplate()):null)).put("column_names", list_column_names).put("subquery", (subquery197!=null?((StringTemplate)subquery197.getTemplate()):null)).put("order_by_clause", (order_by_clause198!=null?((StringTemplate)order_by_clause198.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factoring_element"


	public static class subquery_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery"
	// PLSQLPrinter.g:1151:1: subquery : ^( SUBQUERY subquery_basic_elements (parts+= subquery_operation_part )* ) -> subquery(subquery_basic_elements=$subquery_basic_elements.stsubquery_operation_parts=$parts);
	public final PLSQLPrinter.subquery_return subquery() throws RecognitionException {
		PLSQLPrinter.subquery_return retval = new PLSQLPrinter.subquery_return();
		retval.start = input.LT(1);

		List<Object> list_parts=null;
		TreeRuleReturnScope subquery_basic_elements199 =null;
		RuleReturnScope parts = null;
		try {
			// PLSQLPrinter.g:1152:5: ( ^( SUBQUERY subquery_basic_elements (parts+= subquery_operation_part )* ) -> subquery(subquery_basic_elements=$subquery_basic_elements.stsubquery_operation_parts=$parts))
			// PLSQLPrinter.g:1152:10: ^( SUBQUERY subquery_basic_elements (parts+= subquery_operation_part )* )
			{
			match(input,SUBQUERY,FOLLOW_SUBQUERY_in_subquery11036); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_subquery_basic_elements_in_subquery11038);
			subquery_basic_elements199=subquery_basic_elements();
			state._fsp--;

			// PLSQLPrinter.g:1152:50: (parts+= subquery_operation_part )*
			loop232:
			while (true) {
				int alt232=2;
				int LA232_0 = input.LA(1);
				if ( (LA232_0==PLSQL_RESERVED_MINUS||LA232_0==SQL92_RESERVED_INTERSECT||LA232_0==SQL92_RESERVED_UNION) ) {
					alt232=1;
				}

				switch (alt232) {
				case 1 :
					// PLSQLPrinter.g:1152:50: parts+= subquery_operation_part
					{
					pushFollow(FOLLOW_subquery_operation_part_in_subquery11042);
					parts=subquery_operation_part();
					state._fsp--;

					if (list_parts==null) list_parts=new ArrayList<Object>();
					list_parts.add(parts.getTemplate());
					}
					break;

				default :
					break loop232;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1153:5: -> subquery(subquery_basic_elements=$subquery_basic_elements.stsubquery_operation_parts=$parts)
			{
				retval.st = templateLib.getInstanceOf("subquery",new STAttrMap().put("subquery_basic_elements", (subquery_basic_elements199!=null?((StringTemplate)subquery_basic_elements199.getTemplate()):null)).put("subquery_operation_parts", list_parts));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery"


	public static class subquery_operation_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_operation_part"
	// PLSQLPrinter.g:1156:1: subquery_operation_part : ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements ) -> subquery_operation_part(operator=opis_all=$SQL92_RESERVED_ALL != nullsubquery_basic_elements=$subquery_basic_elements.st);
	public final PLSQLPrinter.subquery_operation_part_return subquery_operation_part() throws RecognitionException {
		PLSQLPrinter.subquery_operation_part_return retval = new PLSQLPrinter.subquery_operation_part_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_ALL200=null;
		TreeRuleReturnScope subquery_basic_elements201 =null;

		 String op = null; 
		try {
			// PLSQLPrinter.g:1158:5: ( ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements ) -> subquery_operation_part(operator=opis_all=$SQL92_RESERVED_ALL != nullsubquery_basic_elements=$subquery_basic_elements.st))
			// PLSQLPrinter.g:1158:10: ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements )
			{
			// PLSQLPrinter.g:1159:13: ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS )
			int alt233=3;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_UNION:
				{
				alt233=1;
				}
				break;
			case SQL92_RESERVED_INTERSECT:
				{
				alt233=2;
				}
				break;
			case PLSQL_RESERVED_MINUS:
				{
				alt233=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 233, 0, input);
				throw nvae;
			}
			switch (alt233) {
				case 1 :
					// PLSQLPrinter.g:1160:15: SQL92_RESERVED_UNION
					{
					match(input,SQL92_RESERVED_UNION,FOLLOW_SQL92_RESERVED_UNION_in_subquery_operation_part11119); 
					 op = "union"; 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1161:16: SQL92_RESERVED_INTERSECT
					{
					match(input,SQL92_RESERVED_INTERSECT,FOLLOW_SQL92_RESERVED_INTERSECT_in_subquery_operation_part11138); 
					 op = "intersect"; 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:1162:16: PLSQL_RESERVED_MINUS
					{
					match(input,PLSQL_RESERVED_MINUS,FOLLOW_PLSQL_RESERVED_MINUS_in_subquery_operation_part11157); 
					 op = "minus"; 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1164:13: ( SQL92_RESERVED_ALL )?
			int alt234=2;
			int LA234_0 = input.LA(1);
			if ( (LA234_0==SQL92_RESERVED_ALL) ) {
				alt234=1;
			}
			switch (alt234) {
				case 1 :
					// PLSQLPrinter.g:1164:13: SQL92_RESERVED_ALL
					{
					SQL92_RESERVED_ALL200=(CommonTree)match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_subquery_operation_part11187); 
					}
					break;

			}

			pushFollow(FOLLOW_subquery_basic_elements_in_subquery_operation_part11190);
			subquery_basic_elements201=subquery_basic_elements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1166:5: -> subquery_operation_part(operator=opis_all=$SQL92_RESERVED_ALL != nullsubquery_basic_elements=$subquery_basic_elements.st)
			{
				retval.st = templateLib.getInstanceOf("subquery_operation_part",new STAttrMap().put("operator", op).put("is_all", SQL92_RESERVED_ALL200 != null).put("subquery_basic_elements", (subquery_basic_elements201!=null?((StringTemplate)subquery_basic_elements201.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_operation_part"


	public static class subquery_basic_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_basic_elements"
	// PLSQLPrinter.g:1169:1: subquery_basic_elements : ( query_block -> { $query_block.st }| subquery -> in_parens(val=$subquery.st));
	public final PLSQLPrinter.subquery_basic_elements_return subquery_basic_elements() throws RecognitionException {
		PLSQLPrinter.subquery_basic_elements_return retval = new PLSQLPrinter.subquery_basic_elements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope query_block202 =null;
		TreeRuleReturnScope subquery203 =null;

		try {
			// PLSQLPrinter.g:1170:5: ( query_block -> { $query_block.st }| subquery -> in_parens(val=$subquery.st))
			int alt235=2;
			int LA235_0 = input.LA(1);
			if ( (LA235_0==SQL92_RESERVED_SELECT) ) {
				alt235=1;
			}
			else if ( (LA235_0==SUBQUERY) ) {
				alt235=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 235, 0, input);
				throw nvae;
			}

			switch (alt235) {
				case 1 :
					// PLSQLPrinter.g:1170:10: query_block
					{
					pushFollow(FOLLOW_query_block_in_subquery_basic_elements11247);
					query_block202=query_block();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1170:22: -> { $query_block.st }
					{
						retval.st =  (query_block202!=null?((StringTemplate)query_block202.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1171:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_subquery_basic_elements11262);
					subquery203=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1172:5: -> in_parens(val=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (subquery203!=null?((StringTemplate)subquery203.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_basic_elements"


	public static class query_block_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_block"
	// PLSQLPrinter.g:1175:1: query_block : ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) -> query_block(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullselected_elements=$selectedinto_clause=$into_clause.stfrom_clause=$from_clause.stwhere_clause=$where_clause.sthierarchical_query_clause=$hierarchical_query_clause.stgroup_by_clause=$group_by_clause.stmodel_clause=$model_clause.st);
	public final PLSQLPrinter.query_block_return query_block() throws RecognitionException {
		PLSQLPrinter.query_block_return retval = new PLSQLPrinter.query_block_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_DISTINCT204=null;
		CommonTree SQL92_RESERVED_UNIQUE205=null;
		CommonTree SQL92_RESERVED_ALL206=null;
		CommonTree ASTERISK207=null;
		List<Object> list_selected=null;
		TreeRuleReturnScope into_clause208 =null;
		TreeRuleReturnScope from_clause209 =null;
		TreeRuleReturnScope where_clause210 =null;
		TreeRuleReturnScope hierarchical_query_clause211 =null;
		TreeRuleReturnScope group_by_clause212 =null;
		TreeRuleReturnScope model_clause213 =null;
		RuleReturnScope selected = null;
		try {
			// PLSQLPrinter.g:1176:5: ( ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) -> query_block(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullselected_elements=$selectedinto_clause=$into_clause.stfrom_clause=$from_clause.stwhere_clause=$where_clause.sthierarchical_query_clause=$hierarchical_query_clause.stgroup_by_clause=$group_by_clause.stmodel_clause=$model_clause.st))
			// PLSQLPrinter.g:1176:10: ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
			{
			match(input,SQL92_RESERVED_SELECT,FOLLOW_SQL92_RESERVED_SELECT_in_query_block11298); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_from_clause_in_query_block11313);
			from_clause209=from_clause();
			state._fsp--;

			// PLSQLPrinter.g:1178:13: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )?
			int alt236=4;
			switch ( input.LA(1) ) {
				case SQL92_RESERVED_DISTINCT:
					{
					alt236=1;
					}
					break;
				case SQL92_RESERVED_UNIQUE:
					{
					alt236=2;
					}
					break;
				case SQL92_RESERVED_ALL:
					{
					alt236=3;
					}
					break;
			}
			switch (alt236) {
				case 1 :
					// PLSQLPrinter.g:1178:14: SQL92_RESERVED_DISTINCT
					{
					SQL92_RESERVED_DISTINCT204=(CommonTree)match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_query_block11329); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1178:38: SQL92_RESERVED_UNIQUE
					{
					SQL92_RESERVED_UNIQUE205=(CommonTree)match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_query_block11331); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:1178:60: SQL92_RESERVED_ALL
					{
					SQL92_RESERVED_ALL206=(CommonTree)match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_query_block11333); 
					}
					break;

			}

			// PLSQLPrinter.g:1179:13: ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) )
			int alt238=2;
			int LA238_0 = input.LA(1);
			if ( (LA238_0==ASTERISK) ) {
				alt238=1;
			}
			else if ( (LA238_0==SELECT_LIST) ) {
				alt238=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 238, 0, input);
				throw nvae;
			}

			switch (alt238) {
				case 1 :
					// PLSQLPrinter.g:1179:18: ASTERISK
					{
					ASTERISK207=(CommonTree)match(input,ASTERISK,FOLLOW_ASTERISK_in_query_block11355); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1180:18: ^( SELECT_LIST (selected+= selected_element )+ )
					{
					match(input,SELECT_LIST,FOLLOW_SELECT_LIST_in_query_block11375); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1180:40: (selected+= selected_element )+
					int cnt237=0;
					loop237:
					while (true) {
						int alt237=2;
						int LA237_0 = input.LA(1);
						if ( (LA237_0==SELECT_ITEM) ) {
							alt237=1;
						}

						switch (alt237) {
						case 1 :
							// PLSQLPrinter.g:1180:40: selected+= selected_element
							{
							pushFollow(FOLLOW_selected_element_in_query_block11379);
							selected=selected_element();
							state._fsp--;

							if (list_selected==null) list_selected=new ArrayList<Object>();
							list_selected.add(selected.getTemplate());
							}
							break;

						default :
							if ( cnt237 >= 1 ) break loop237;
							EarlyExitException eee = new EarlyExitException(237, input);
							throw eee;
						}
						cnt237++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}

			// PLSQLPrinter.g:1182:13: ( into_clause )?
			int alt239=2;
			int LA239_0 = input.LA(1);
			if ( (LA239_0==SQL92_RESERVED_INTO||LA239_0==BULK_VK) ) {
				alt239=1;
			}
			switch (alt239) {
				case 1 :
					// PLSQLPrinter.g:1182:13: into_clause
					{
					pushFollow(FOLLOW_into_clause_in_query_block11409);
					into_clause208=into_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1182:26: ( where_clause )?
			int alt240=2;
			int LA240_0 = input.LA(1);
			if ( (LA240_0==SQL92_RESERVED_WHERE) ) {
				alt240=1;
			}
			switch (alt240) {
				case 1 :
					// PLSQLPrinter.g:1182:26: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_query_block11412);
					where_clause210=where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1182:40: ( hierarchical_query_clause )?
			int alt241=2;
			int LA241_0 = input.LA(1);
			if ( (LA241_0==HIERARCHICAL) ) {
				alt241=1;
			}
			switch (alt241) {
				case 1 :
					// PLSQLPrinter.g:1182:40: hierarchical_query_clause
					{
					pushFollow(FOLLOW_hierarchical_query_clause_in_query_block11415);
					hierarchical_query_clause211=hierarchical_query_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1183:13: ( group_by_clause )?
			int alt242=2;
			int LA242_0 = input.LA(1);
			if ( (LA242_0==SQL92_RESERVED_GROUP) ) {
				alt242=1;
			}
			switch (alt242) {
				case 1 :
					// PLSQLPrinter.g:1183:13: group_by_clause
					{
					pushFollow(FOLLOW_group_by_clause_in_query_block11431);
					group_by_clause212=group_by_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1183:30: ( model_clause )?
			int alt243=2;
			int LA243_0 = input.LA(1);
			if ( (LA243_0==PLSQL_NON_RESERVED_MODEL) ) {
				alt243=1;
			}
			switch (alt243) {
				case 1 :
					// PLSQLPrinter.g:1183:30: model_clause
					{
					pushFollow(FOLLOW_model_clause_in_query_block11434);
					model_clause213=model_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1185:5: -> query_block(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullselected_elements=$selectedinto_clause=$into_clause.stfrom_clause=$from_clause.stwhere_clause=$where_clause.sthierarchical_query_clause=$hierarchical_query_clause.stgroup_by_clause=$group_by_clause.stmodel_clause=$model_clause.st)
			{
				retval.st = templateLib.getInstanceOf("query_block",new STAttrMap().put("is_distinct", SQL92_RESERVED_DISTINCT204 != null).put("is_unique", SQL92_RESERVED_UNIQUE205 != null).put("is_all", SQL92_RESERVED_ALL206 != null).put("is_asterisk", ASTERISK207 != null).put("selected_elements", list_selected).put("into_clause", (into_clause208!=null?((StringTemplate)into_clause208.getTemplate()):null)).put("from_clause", (from_clause209!=null?((StringTemplate)from_clause209.getTemplate()):null)).put("where_clause", (where_clause210!=null?((StringTemplate)where_clause210.getTemplate()):null)).put("hierarchical_query_clause", (hierarchical_query_clause211!=null?((StringTemplate)hierarchical_query_clause211.getTemplate()):null)).put("group_by_clause", (group_by_clause212!=null?((StringTemplate)group_by_clause212.getTemplate()):null)).put("model_clause", (model_clause213!=null?((StringTemplate)model_clause213.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_block"


	public static class selected_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "selected_element"
	// PLSQLPrinter.g:1200:1: selected_element : ^( SELECT_ITEM expression ( alias )? ) -> selected_element(expression=$expression.stalias=$alias.st);
	public final PLSQLPrinter.selected_element_return selected_element() throws RecognitionException {
		PLSQLPrinter.selected_element_return retval = new PLSQLPrinter.selected_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression214 =null;
		TreeRuleReturnScope alias215 =null;

		try {
			// PLSQLPrinter.g:1201:5: ( ^( SELECT_ITEM expression ( alias )? ) -> selected_element(expression=$expression.stalias=$alias.st))
			// PLSQLPrinter.g:1201:10: ^( SELECT_ITEM expression ( alias )? )
			{
			match(input,SELECT_ITEM,FOLLOW_SELECT_ITEM_in_selected_element11663); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_selected_element11665);
			expression214=expression();
			state._fsp--;

			// PLSQLPrinter.g:1201:35: ( alias )?
			int alt244=2;
			int LA244_0 = input.LA(1);
			if ( (LA244_0==COLUMN_ALIAS||LA244_0==TABLE_ALIAS) ) {
				alt244=1;
			}
			switch (alt244) {
				case 1 :
					// PLSQLPrinter.g:1201:35: alias
					{
					pushFollow(FOLLOW_alias_in_selected_element11667);
					alias215=alias();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1202:5: -> selected_element(expression=$expression.stalias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("selected_element",new STAttrMap().put("expression", (expression214!=null?((StringTemplate)expression214.getTemplate()):null)).put("alias", (alias215!=null?((StringTemplate)alias215.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selected_element"


	public static class from_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "from_clause"
	// PLSQLPrinter.g:1205:1: from_clause : ^( SQL92_RESERVED_FROM (refs+= table_ref )+ ) -> from_clause(table_refs=$refs);
	public final PLSQLPrinter.from_clause_return from_clause() throws RecognitionException {
		PLSQLPrinter.from_clause_return retval = new PLSQLPrinter.from_clause_return();
		retval.start = input.LT(1);

		List<Object> list_refs=null;
		RuleReturnScope refs = null;
		try {
			// PLSQLPrinter.g:1206:5: ( ^( SQL92_RESERVED_FROM (refs+= table_ref )+ ) -> from_clause(table_refs=$refs))
			// PLSQLPrinter.g:1206:10: ^( SQL92_RESERVED_FROM (refs+= table_ref )+ )
			{
			match(input,SQL92_RESERVED_FROM,FOLLOW_SQL92_RESERVED_FROM_in_from_clause11710); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1206:36: (refs+= table_ref )+
			int cnt245=0;
			loop245:
			while (true) {
				int alt245=2;
				int LA245_0 = input.LA(1);
				if ( (LA245_0==TABLE_REF) ) {
					alt245=1;
				}

				switch (alt245) {
				case 1 :
					// PLSQLPrinter.g:1206:36: refs+= table_ref
					{
					pushFollow(FOLLOW_table_ref_in_from_clause11714);
					refs=table_ref();
					state._fsp--;

					if (list_refs==null) list_refs=new ArrayList<Object>();
					list_refs.add(refs.getTemplate());
					}
					break;

				default :
					if ( cnt245 >= 1 ) break loop245;
					EarlyExitException eee = new EarlyExitException(245, input);
					throw eee;
				}
				cnt245++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1207:5: -> from_clause(table_refs=$refs)
			{
				retval.st = templateLib.getInstanceOf("from_clause",new STAttrMap().put("table_refs", list_refs));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "from_clause"


	public static class table_ref_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_ref"
	// PLSQLPrinter.g:1210:1: table_ref : ^( TABLE_REF table_ref_aux (joins+= join_clause )* ) -> table_ref(table_ref_aux=$table_ref_aux.stjoin_clauses=$joins);
	public final PLSQLPrinter.table_ref_return table_ref() throws RecognitionException {
		PLSQLPrinter.table_ref_return retval = new PLSQLPrinter.table_ref_return();
		retval.start = input.LT(1);

		List<Object> list_joins=null;
		TreeRuleReturnScope table_ref_aux216 =null;
		RuleReturnScope joins = null;
		try {
			// PLSQLPrinter.g:1211:5: ( ^( TABLE_REF table_ref_aux (joins+= join_clause )* ) -> table_ref(table_ref_aux=$table_ref_aux.stjoin_clauses=$joins))
			// PLSQLPrinter.g:1211:10: ^( TABLE_REF table_ref_aux (joins+= join_clause )* )
			{
			match(input,TABLE_REF,FOLLOW_TABLE_REF_in_table_ref11752); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_table_ref_aux_in_table_ref11754);
			table_ref_aux216=table_ref_aux();
			state._fsp--;

			// PLSQLPrinter.g:1211:41: (joins+= join_clause )*
			loop246:
			while (true) {
				int alt246=2;
				int LA246_0 = input.LA(1);
				if ( (LA246_0==JOIN_DEF) ) {
					alt246=1;
				}

				switch (alt246) {
				case 1 :
					// PLSQLPrinter.g:1211:41: joins+= join_clause
					{
					pushFollow(FOLLOW_join_clause_in_table_ref11758);
					joins=join_clause();
					state._fsp--;

					if (list_joins==null) list_joins=new ArrayList<Object>();
					list_joins.add(joins.getTemplate());
					}
					break;

				default :
					break loop246;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1212:5: -> table_ref(table_ref_aux=$table_ref_aux.stjoin_clauses=$joins)
			{
				retval.st = templateLib.getInstanceOf("table_ref",new STAttrMap().put("table_ref_aux", (table_ref_aux216!=null?((StringTemplate)table_ref_aux216.getTemplate()):null)).put("join_clauses", list_joins));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_ref"


	public static class table_ref_aux_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_ref_aux"
	// PLSQLPrinter.g:1215:1: table_ref_aux : ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK | pivot_clause | unpivot_clause )? ( flashback_query_clause )* ) -> table_ref_aux(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.stpivot_clause=$pivot_clause.stunpivot_clause=$unpivot_clause.stflashback_query_clause=$flashback_query_clause.stalias=$alias.st);
	public final PLSQLPrinter.table_ref_aux_return table_ref_aux() throws RecognitionException {
		PLSQLPrinter.table_ref_aux_return retval = new PLSQLPrinter.table_ref_aux_return();
		retval.start = input.LT(1);

		CommonTree ONLY_VK217=null;
		TreeRuleReturnScope dml_table_expression_clause218 =null;
		TreeRuleReturnScope pivot_clause219 =null;
		TreeRuleReturnScope unpivot_clause220 =null;
		TreeRuleReturnScope flashback_query_clause221 =null;
		TreeRuleReturnScope alias222 =null;

		try {
			// PLSQLPrinter.g:1216:5: ( ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK | pivot_clause | unpivot_clause )? ( flashback_query_clause )* ) -> table_ref_aux(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.stpivot_clause=$pivot_clause.stunpivot_clause=$unpivot_clause.stflashback_query_clause=$flashback_query_clause.stalias=$alias.st))
			// PLSQLPrinter.g:1216:10: ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK | pivot_clause | unpivot_clause )? ( flashback_query_clause )* )
			{
			match(input,TABLE_REF_ELEMENT,FOLLOW_TABLE_REF_ELEMENT_in_table_ref_aux11801); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1216:30: ( alias )?
			int alt247=2;
			int LA247_0 = input.LA(1);
			if ( (LA247_0==COLUMN_ALIAS||LA247_0==TABLE_ALIAS) ) {
				alt247=1;
			}
			switch (alt247) {
				case 1 :
					// PLSQLPrinter.g:1216:30: alias
					{
					pushFollow(FOLLOW_alias_in_table_ref_aux11803);
					alias222=alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_table_expression_clause_in_table_ref_aux11806);
			dml_table_expression_clause218=dml_table_expression_clause();
			state._fsp--;

			// PLSQLPrinter.g:1216:65: ( ONLY_VK | pivot_clause | unpivot_clause )?
			int alt248=4;
			switch ( input.LA(1) ) {
				case ONLY_VK:
					{
					alt248=1;
					}
					break;
				case PIVOT_VK:
					{
					alt248=2;
					}
					break;
				case UNPIVOT_VK:
					{
					alt248=3;
					}
					break;
			}
			switch (alt248) {
				case 1 :
					// PLSQLPrinter.g:1216:66: ONLY_VK
					{
					ONLY_VK217=(CommonTree)match(input,ONLY_VK,FOLLOW_ONLY_VK_in_table_ref_aux11809); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1216:74: pivot_clause
					{
					pushFollow(FOLLOW_pivot_clause_in_table_ref_aux11811);
					pivot_clause219=pivot_clause();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1216:87: unpivot_clause
					{
					pushFollow(FOLLOW_unpivot_clause_in_table_ref_aux11813);
					unpivot_clause220=unpivot_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1216:104: ( flashback_query_clause )*
			loop249:
			while (true) {
				int alt249=2;
				int LA249_0 = input.LA(1);
				if ( (LA249_0==SQL92_RESERVED_AS||LA249_0==VERSIONS_VK) ) {
					alt249=1;
				}

				switch (alt249) {
				case 1 :
					// PLSQLPrinter.g:1216:104: flashback_query_clause
					{
					pushFollow(FOLLOW_flashback_query_clause_in_table_ref_aux11817);
					flashback_query_clause221=flashback_query_clause();
					state._fsp--;

					}
					break;

				default :
					break loop249;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1217:5: -> table_ref_aux(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.stpivot_clause=$pivot_clause.stunpivot_clause=$unpivot_clause.stflashback_query_clause=$flashback_query_clause.stalias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("table_ref_aux",new STAttrMap().put("is_only", ONLY_VK217 != null).put("dml_table_expression_clause", (dml_table_expression_clause218!=null?((StringTemplate)dml_table_expression_clause218.getTemplate()):null)).put("pivot_clause", (pivot_clause219!=null?((StringTemplate)pivot_clause219.getTemplate()):null)).put("unpivot_clause", (unpivot_clause220!=null?((StringTemplate)unpivot_clause220.getTemplate()):null)).put("flashback_query_clause", (flashback_query_clause221!=null?((StringTemplate)flashback_query_clause221.getTemplate()):null)).put("alias", (alias222!=null?((StringTemplate)alias222.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_ref_aux"


	public static class join_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "join_clause"
	// PLSQLPrinter.g:1223:1: join_clause : ^( JOIN_DEF (qpc1= query_partition_clause )? ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )? ) -> join_clause(qpc1=$qpc1.stis_cross=$CROSS_VK != nullis_natural=$NATURAL_VK != nullis_inner=$INNER_VK != nullis_left=$LEFT_VK != nullis_right=$RIGHT_VK != nullis_full=$FULL_VK != nulltable_ref_aux=$table_ref_aux.stqpc2=$qpc2.stjoin_on_part=$join_on_part.stjoin_using_part=$join_using_part.st);
	public final PLSQLPrinter.join_clause_return join_clause() throws RecognitionException {
		PLSQLPrinter.join_clause_return retval = new PLSQLPrinter.join_clause_return();
		retval.start = input.LT(1);

		CommonTree CROSS_VK223=null;
		CommonTree NATURAL_VK224=null;
		CommonTree INNER_VK225=null;
		CommonTree LEFT_VK226=null;
		CommonTree RIGHT_VK227=null;
		CommonTree FULL_VK228=null;
		TreeRuleReturnScope qpc1 =null;
		TreeRuleReturnScope qpc2 =null;
		TreeRuleReturnScope table_ref_aux229 =null;
		TreeRuleReturnScope join_on_part230 =null;
		TreeRuleReturnScope join_using_part231 =null;

		try {
			// PLSQLPrinter.g:1224:5: ( ^( JOIN_DEF (qpc1= query_partition_clause )? ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )? ) -> join_clause(qpc1=$qpc1.stis_cross=$CROSS_VK != nullis_natural=$NATURAL_VK != nullis_inner=$INNER_VK != nullis_left=$LEFT_VK != nullis_right=$RIGHT_VK != nullis_full=$FULL_VK != nulltable_ref_aux=$table_ref_aux.stqpc2=$qpc2.stjoin_on_part=$join_on_part.stjoin_using_part=$join_using_part.st))
			// PLSQLPrinter.g:1224:10: ^( JOIN_DEF (qpc1= query_partition_clause )? ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )? )
			{
			match(input,JOIN_DEF,FOLLOW_JOIN_DEF_in_join_clause11914); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1225:17: (qpc1= query_partition_clause )?
			int alt250=2;
			int LA250_0 = input.LA(1);
			if ( (LA250_0==PARTITION_VK) ) {
				alt250=1;
			}
			switch (alt250) {
				case 1 :
					// PLSQLPrinter.g:1225:17: qpc1= query_partition_clause
					{
					pushFollow(FOLLOW_query_partition_clause_in_join_clause11930);
					qpc1=query_partition_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1226:13: ( CROSS_VK | NATURAL_VK )?
			int alt251=3;
			int LA251_0 = input.LA(1);
			if ( (LA251_0==CROSS_VK) ) {
				alt251=1;
			}
			else if ( (LA251_0==NATURAL_VK) ) {
				alt251=2;
			}
			switch (alt251) {
				case 1 :
					// PLSQLPrinter.g:1226:14: CROSS_VK
					{
					CROSS_VK223=(CommonTree)match(input,CROSS_VK,FOLLOW_CROSS_VK_in_join_clause11946); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1226:23: NATURAL_VK
					{
					NATURAL_VK224=(CommonTree)match(input,NATURAL_VK,FOLLOW_NATURAL_VK_in_join_clause11948); 
					}
					break;

			}

			// PLSQLPrinter.g:1226:36: ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )?
			int alt252=5;
			switch ( input.LA(1) ) {
				case INNER_VK:
					{
					alt252=1;
					}
					break;
				case FULL_VK:
					{
					alt252=2;
					}
					break;
				case LEFT_VK:
					{
					alt252=3;
					}
					break;
				case RIGHT_VK:
					{
					alt252=4;
					}
					break;
			}
			switch (alt252) {
				case 1 :
					// PLSQLPrinter.g:1226:37: INNER_VK
					{
					INNER_VK225=(CommonTree)match(input,INNER_VK,FOLLOW_INNER_VK_in_join_clause11953); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1226:46: FULL_VK
					{
					FULL_VK228=(CommonTree)match(input,FULL_VK,FOLLOW_FULL_VK_in_join_clause11955); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:1226:54: LEFT_VK
					{
					LEFT_VK226=(CommonTree)match(input,LEFT_VK,FOLLOW_LEFT_VK_in_join_clause11957); 
					}
					break;
				case 4 :
					// PLSQLPrinter.g:1226:62: RIGHT_VK
					{
					RIGHT_VK227=(CommonTree)match(input,RIGHT_VK,FOLLOW_RIGHT_VK_in_join_clause11959); 
					}
					break;

			}

			pushFollow(FOLLOW_table_ref_aux_in_join_clause11963);
			table_ref_aux229=table_ref_aux();
			state._fsp--;

			// PLSQLPrinter.g:1227:17: (qpc2= query_partition_clause )?
			int alt253=2;
			int LA253_0 = input.LA(1);
			if ( (LA253_0==PARTITION_VK) ) {
				alt253=1;
			}
			switch (alt253) {
				case 1 :
					// PLSQLPrinter.g:1227:17: qpc2= query_partition_clause
					{
					pushFollow(FOLLOW_query_partition_clause_in_join_clause11979);
					qpc2=query_partition_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1228:13: ( join_on_part | join_using_part )?
			int alt254=3;
			int LA254_0 = input.LA(1);
			if ( (LA254_0==SQL92_RESERVED_ON) ) {
				alt254=1;
			}
			else if ( (LA254_0==PLSQL_NON_RESERVED_USING) ) {
				alt254=2;
			}
			switch (alt254) {
				case 1 :
					// PLSQLPrinter.g:1228:14: join_on_part
					{
					pushFollow(FOLLOW_join_on_part_in_join_clause11995);
					join_on_part230=join_on_part();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1228:27: join_using_part
					{
					pushFollow(FOLLOW_join_using_part_in_join_clause11997);
					join_using_part231=join_using_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1229:5: -> join_clause(qpc1=$qpc1.stis_cross=$CROSS_VK != nullis_natural=$NATURAL_VK != nullis_inner=$INNER_VK != nullis_left=$LEFT_VK != nullis_right=$RIGHT_VK != nullis_full=$FULL_VK != nulltable_ref_aux=$table_ref_aux.stqpc2=$qpc2.stjoin_on_part=$join_on_part.stjoin_using_part=$join_using_part.st)
			{
				retval.st = templateLib.getInstanceOf("join_clause",new STAttrMap().put("qpc1", (qpc1!=null?((StringTemplate)qpc1.getTemplate()):null)).put("is_cross", CROSS_VK223 != null).put("is_natural", NATURAL_VK224 != null).put("is_inner", INNER_VK225 != null).put("is_left", LEFT_VK226 != null).put("is_right", RIGHT_VK227 != null).put("is_full", FULL_VK228 != null).put("table_ref_aux", (table_ref_aux229!=null?((StringTemplate)table_ref_aux229.getTemplate()):null)).put("qpc2", (qpc2!=null?((StringTemplate)qpc2.getTemplate()):null)).put("join_on_part", (join_on_part230!=null?((StringTemplate)join_on_part230.getTemplate()):null)).put("join_using_part", (join_using_part231!=null?((StringTemplate)join_using_part231.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_clause"


	public static class join_on_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "join_on_part"
	// PLSQLPrinter.g:1235:1: join_on_part : ^( SQL92_RESERVED_ON expression ) -> join_on_part(expression=$expression.st);
	public final PLSQLPrinter.join_on_part_return join_on_part() throws RecognitionException {
		PLSQLPrinter.join_on_part_return retval = new PLSQLPrinter.join_on_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression232 =null;

		try {
			// PLSQLPrinter.g:1236:5: ( ^( SQL92_RESERVED_ON expression ) -> join_on_part(expression=$expression.st))
			// PLSQLPrinter.g:1236:10: ^( SQL92_RESERVED_ON expression )
			{
			match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_join_on_part12123); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_join_on_part12125);
			expression232=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1237:5: -> join_on_part(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("join_on_part",new STAttrMap().put("expression", (expression232!=null?((StringTemplate)expression232.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_on_part"


	public static class join_using_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "join_using_part"
	// PLSQLPrinter.g:1240:1: join_using_part : ^( PLSQL_NON_RESERVED_USING ( column_name )+ ) -> template( \"not implemented: join_using_part\";
	public final PLSQLPrinter.join_using_part_return join_using_part() throws RecognitionException {
		PLSQLPrinter.join_using_part_return retval = new PLSQLPrinter.join_using_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1241:5: ( ^( PLSQL_NON_RESERVED_USING ( column_name )+ ) -> template( \"not implemented: join_using_part\")
			// PLSQLPrinter.g:1241:10: ^( PLSQL_NON_RESERVED_USING ( column_name )+ )
			{
			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_join_using_part12162); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1241:37: ( column_name )+
			int cnt255=0;
			loop255:
			while (true) {
				int alt255=2;
				int LA255_0 = input.LA(1);
				if ( (LA255_0==COLUMN_NAME) ) {
					alt255=1;
				}

				switch (alt255) {
				case 1 :
					// PLSQLPrinter.g:1241:37: column_name
					{
					pushFollow(FOLLOW_column_name_in_join_using_part12164);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt255 >= 1 ) break loop255;
					EarlyExitException eee = new EarlyExitException(255, input);
					throw eee;
				}
				cnt255++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1242:5: -> template( \"not implemented: join_using_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: join_using_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_using_part"


	public static class query_partition_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_partition_clause"
	// PLSQLPrinter.g:1245:1: query_partition_clause : ^( PARTITION_VK query_partition_clause_impl ) -> query_partition_clause(impl=$query_partition_clause_impl.st);
	public final PLSQLPrinter.query_partition_clause_return query_partition_clause() throws RecognitionException {
		PLSQLPrinter.query_partition_clause_return retval = new PLSQLPrinter.query_partition_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope query_partition_clause_impl233 =null;

		try {
			// PLSQLPrinter.g:1246:5: ( ^( PARTITION_VK query_partition_clause_impl ) -> query_partition_clause(impl=$query_partition_clause_impl.st))
			// PLSQLPrinter.g:1246:10: ^( PARTITION_VK query_partition_clause_impl )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_query_partition_clause12201); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_query_partition_clause_impl_in_query_partition_clause12203);
			query_partition_clause_impl233=query_partition_clause_impl();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1247:5: -> query_partition_clause(impl=$query_partition_clause_impl.st)
			{
				retval.st = templateLib.getInstanceOf("query_partition_clause",new STAttrMap().put("impl", (query_partition_clause_impl233!=null?((StringTemplate)query_partition_clause_impl233.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_partition_clause"


	public static class query_partition_clause_impl_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_partition_clause_impl"
	// PLSQLPrinter.g:1250:1: query_partition_clause_impl : ( subquery -> in_parens(val=$subquery.st)| expression_list -> { $expression_list.st }| ^( QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS (expressions+= expression )+ ) -> query_partition_clause_impl_expressions(expressions=$expressions));
	public final PLSQLPrinter.query_partition_clause_impl_return query_partition_clause_impl() throws RecognitionException {
		PLSQLPrinter.query_partition_clause_impl_return retval = new PLSQLPrinter.query_partition_clause_impl_return();
		retval.start = input.LT(1);

		List<Object> list_expressions=null;
		TreeRuleReturnScope subquery234 =null;
		TreeRuleReturnScope expression_list235 =null;
		RuleReturnScope expressions = null;
		try {
			// PLSQLPrinter.g:1251:5: ( subquery -> in_parens(val=$subquery.st)| expression_list -> { $expression_list.st }| ^( QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS (expressions+= expression )+ ) -> query_partition_clause_impl_expressions(expressions=$expressions))
			int alt257=3;
			switch ( input.LA(1) ) {
			case SUBQUERY:
				{
				alt257=1;
				}
				break;
			case EXPR_LIST:
				{
				alt257=2;
				}
				break;
			case QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS:
				{
				alt257=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 257, 0, input);
				throw nvae;
			}
			switch (alt257) {
				case 1 :
					// PLSQLPrinter.g:1251:9: subquery
					{
					pushFollow(FOLLOW_subquery_in_query_partition_clause_impl12242);
					subquery234=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1251:18: -> in_parens(val=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (subquery234!=null?((StringTemplate)subquery234.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1252:11: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_query_partition_clause_impl12263);
					expression_list235=expression_list();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1252:27: -> { $expression_list.st }
					{
						retval.st =  (expression_list235!=null?((StringTemplate)expression_list235.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1253:11: ^( QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS (expressions+= expression )+ )
					{
					match(input,QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS,FOLLOW_QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS_in_query_partition_clause_impl12280); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1253:64: (expressions+= expression )+
					int cnt256=0;
					loop256:
					while (true) {
						int alt256=2;
						int LA256_0 = input.LA(1);
						if ( (LA256_0==EXPR||LA256_0==LOGIC_EXPR) ) {
							alt256=1;
						}

						switch (alt256) {
						case 1 :
							// PLSQLPrinter.g:1253:64: expressions+= expression
							{
							pushFollow(FOLLOW_expression_in_query_partition_clause_impl12284);
							expressions=expression();
							state._fsp--;

							if (list_expressions==null) list_expressions=new ArrayList<Object>();
							list_expressions.add(expressions.getTemplate());
							}
							break;

						default :
							if ( cnt256 >= 1 ) break loop256;
							EarlyExitException eee = new EarlyExitException(256, input);
							throw eee;
						}
						cnt256++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1254:11: -> query_partition_clause_impl_expressions(expressions=$expressions)
					{
						retval.st = templateLib.getInstanceOf("query_partition_clause_impl_expressions",new STAttrMap().put("expressions", list_expressions));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_partition_clause_impl"


	public static class flashback_query_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "flashback_query_clause"
	// PLSQLPrinter.g:1257:1: flashback_query_clause : ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression ) -> template( \"not implemented: flashback_query_clause\";
	public final PLSQLPrinter.flashback_query_clause_return flashback_query_clause() throws RecognitionException {
		PLSQLPrinter.flashback_query_clause_return retval = new PLSQLPrinter.flashback_query_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1258:5: ( ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression ) -> template( \"not implemented: flashback_query_clause\")
			// PLSQLPrinter.g:1258:10: ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression )
			{
			// PLSQLPrinter.g:1258:12: ( VERSIONS_VK | SQL92_RESERVED_AS )
			int alt258=2;
			int LA258_0 = input.LA(1);
			if ( (LA258_0==VERSIONS_VK) ) {
				alt258=1;
			}
			else if ( (LA258_0==SQL92_RESERVED_AS) ) {
				alt258=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 258, 0, input);
				throw nvae;
			}

			switch (alt258) {
				case 1 :
					// PLSQLPrinter.g:1258:13: VERSIONS_VK
					{
					match(input,VERSIONS_VK,FOLLOW_VERSIONS_VK_in_flashback_query_clause12327); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1258:25: SQL92_RESERVED_AS
					{
					match(input,SQL92_RESERVED_AS,FOLLOW_SQL92_RESERVED_AS_in_flashback_query_clause12329); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1258:44: ( SCN_VK | TIMESTAMP_VK )?
			int alt259=3;
			int LA259_0 = input.LA(1);
			if ( (LA259_0==SCN_VK) ) {
				alt259=1;
			}
			else if ( (LA259_0==TIMESTAMP_VK) ) {
				alt259=2;
			}
			switch (alt259) {
				case 1 :
					// PLSQLPrinter.g:1258:45: SCN_VK
					{
					match(input,SCN_VK,FOLLOW_SCN_VK_in_flashback_query_clause12333); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1258:52: TIMESTAMP_VK
					{
					match(input,TIMESTAMP_VK,FOLLOW_TIMESTAMP_VK_in_flashback_query_clause12335); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_flashback_query_clause12339);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1259:5: -> template( \"not implemented: flashback_query_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: flashback_query_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "flashback_query_clause"


	public static class pivot_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_clause"
	// PLSQLPrinter.g:1262:1: pivot_clause : ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) -> template( \"not implemented: pivot_clause\";
	public final PLSQLPrinter.pivot_clause_return pivot_clause() throws RecognitionException {
		PLSQLPrinter.pivot_clause_return retval = new PLSQLPrinter.pivot_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1263:5: ( ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) -> template( \"not implemented: pivot_clause\")
			// PLSQLPrinter.g:1263:10: ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause )
			{
			match(input,PIVOT_VK,FOLLOW_PIVOT_VK_in_pivot_clause12376); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1263:21: ( XML_VK )?
			int alt260=2;
			int LA260_0 = input.LA(1);
			if ( (LA260_0==XML_VK) ) {
				alt260=1;
			}
			switch (alt260) {
				case 1 :
					// PLSQLPrinter.g:1263:21: XML_VK
					{
					match(input,XML_VK,FOLLOW_XML_VK_in_pivot_clause12378); 
					}
					break;

			}

			// PLSQLPrinter.g:1263:29: ( pivot_element )+
			int cnt261=0;
			loop261:
			while (true) {
				int alt261=2;
				int LA261_0 = input.LA(1);
				if ( (LA261_0==PIVOT_ELEMENT) ) {
					alt261=1;
				}

				switch (alt261) {
				case 1 :
					// PLSQLPrinter.g:1263:29: pivot_element
					{
					pushFollow(FOLLOW_pivot_element_in_pivot_clause12381);
					pivot_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt261 >= 1 ) break loop261;
					EarlyExitException eee = new EarlyExitException(261, input);
					throw eee;
				}
				cnt261++;
			}

			pushFollow(FOLLOW_pivot_for_clause_in_pivot_clause12384);
			pivot_for_clause();
			state._fsp--;

			pushFollow(FOLLOW_pivot_in_clause_in_pivot_clause12386);
			pivot_in_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1264:5: -> template( \"not implemented: pivot_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_clause"


	public static class pivot_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_element"
	// PLSQLPrinter.g:1267:1: pivot_element : ^( PIVOT_ELEMENT ( alias )? expression ) -> template( \"not implemented: pivot_element\";
	public final PLSQLPrinter.pivot_element_return pivot_element() throws RecognitionException {
		PLSQLPrinter.pivot_element_return retval = new PLSQLPrinter.pivot_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1268:5: ( ^( PIVOT_ELEMENT ( alias )? expression ) -> template( \"not implemented: pivot_element\")
			// PLSQLPrinter.g:1268:10: ^( PIVOT_ELEMENT ( alias )? expression )
			{
			match(input,PIVOT_ELEMENT,FOLLOW_PIVOT_ELEMENT_in_pivot_element12422); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1268:26: ( alias )?
			int alt262=2;
			int LA262_0 = input.LA(1);
			if ( (LA262_0==COLUMN_ALIAS||LA262_0==TABLE_ALIAS) ) {
				alt262=1;
			}
			switch (alt262) {
				case 1 :
					// PLSQLPrinter.g:1268:26: alias
					{
					pushFollow(FOLLOW_alias_in_pivot_element12424);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_expression_in_pivot_element12427);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1269:5: -> template( \"not implemented: pivot_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_element"


	public static class pivot_for_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_for_clause"
	// PLSQLPrinter.g:1272:1: pivot_for_clause : ^( SQL92_RESERVED_FOR ( column_name )+ ) -> template( \"not implemented: pivot_for_clause\";
	public final PLSQLPrinter.pivot_for_clause_return pivot_for_clause() throws RecognitionException {
		PLSQLPrinter.pivot_for_clause_return retval = new PLSQLPrinter.pivot_for_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1273:5: ( ^( SQL92_RESERVED_FOR ( column_name )+ ) -> template( \"not implemented: pivot_for_clause\")
			// PLSQLPrinter.g:1273:10: ^( SQL92_RESERVED_FOR ( column_name )+ )
			{
			match(input,SQL92_RESERVED_FOR,FOLLOW_SQL92_RESERVED_FOR_in_pivot_for_clause12463); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1273:31: ( column_name )+
			int cnt263=0;
			loop263:
			while (true) {
				int alt263=2;
				int LA263_0 = input.LA(1);
				if ( (LA263_0==COLUMN_NAME) ) {
					alt263=1;
				}

				switch (alt263) {
				case 1 :
					// PLSQLPrinter.g:1273:31: column_name
					{
					pushFollow(FOLLOW_column_name_in_pivot_for_clause12465);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt263 >= 1 ) break loop263;
					EarlyExitException eee = new EarlyExitException(263, input);
					throw eee;
				}
				cnt263++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1274:5: -> template( \"not implemented: pivot_for_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_for_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_for_clause"


	public static class pivot_in_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_in_clause"
	// PLSQLPrinter.g:1277:1: pivot_in_clause : ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ) -> template( \"not implemented: pivot_in_clause\";
	public final PLSQLPrinter.pivot_in_clause_return pivot_in_clause() throws RecognitionException {
		PLSQLPrinter.pivot_in_clause_return retval = new PLSQLPrinter.pivot_in_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1278:5: ( ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ) -> template( \"not implemented: pivot_in_clause\")
			// PLSQLPrinter.g:1278:10: ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) )
			{
			match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_pivot_in_clause12502); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1279:9: ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) )
			int alt266=3;
			switch ( input.LA(1) ) {
			case SUBQUERY:
				{
				alt266=1;
				}
				break;
			case ANY_MODE:
				{
				alt266=2;
				}
				break;
			case ELEMENTS_MODE:
				{
				alt266=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 266, 0, input);
				throw nvae;
			}
			switch (alt266) {
				case 1 :
					// PLSQLPrinter.g:1279:14: subquery
					{
					pushFollow(FOLLOW_subquery_in_pivot_in_clause12518);
					subquery();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1280:14: ^( ANY_MODE ( SQL92_RESERVED_ANY )+ )
					{
					match(input,ANY_MODE,FOLLOW_ANY_MODE_in_pivot_in_clause12534); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1280:25: ( SQL92_RESERVED_ANY )+
					int cnt264=0;
					loop264:
					while (true) {
						int alt264=2;
						int LA264_0 = input.LA(1);
						if ( (LA264_0==SQL92_RESERVED_ANY) ) {
							alt264=1;
						}

						switch (alt264) {
						case 1 :
							// PLSQLPrinter.g:1280:25: SQL92_RESERVED_ANY
							{
							match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_pivot_in_clause12536); 
							}
							break;

						default :
							if ( cnt264 >= 1 ) break loop264;
							EarlyExitException eee = new EarlyExitException(264, input);
							throw eee;
						}
						cnt264++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:1281:14: ^( ELEMENTS_MODE ( pivot_in_clause_element )+ )
					{
					match(input,ELEMENTS_MODE,FOLLOW_ELEMENTS_MODE_in_pivot_in_clause12554); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1281:30: ( pivot_in_clause_element )+
					int cnt265=0;
					loop265:
					while (true) {
						int alt265=2;
						int LA265_0 = input.LA(1);
						if ( (LA265_0==PIVOT_IN_ELEMENT) ) {
							alt265=1;
						}

						switch (alt265) {
						case 1 :
							// PLSQLPrinter.g:1281:30: pivot_in_clause_element
							{
							pushFollow(FOLLOW_pivot_in_clause_element_in_pivot_in_clause12556);
							pivot_in_clause_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt265 >= 1 ) break loop265;
							EarlyExitException eee = new EarlyExitException(265, input);
							throw eee;
						}
						cnt265++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1284:5: -> template( \"not implemented: pivot_in_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_in_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_in_clause"


	public static class pivot_in_clause_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_in_clause_element"
	// PLSQLPrinter.g:1287:1: pivot_in_clause_element : ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) ) -> template( \"not implemented: pivot_in_clause_element\";
	public final PLSQLPrinter.pivot_in_clause_element_return pivot_in_clause_element() throws RecognitionException {
		PLSQLPrinter.pivot_in_clause_element_return retval = new PLSQLPrinter.pivot_in_clause_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1288:5: ( ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) ) -> template( \"not implemented: pivot_in_clause_element\")
			// PLSQLPrinter.g:1288:10: ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) )
			{
			match(input,PIVOT_IN_ELEMENT,FOLLOW_PIVOT_IN_ELEMENT_in_pivot_in_clause_element12613); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1288:29: ( alias )?
			int alt267=2;
			int LA267_0 = input.LA(1);
			if ( (LA267_0==COLUMN_ALIAS||LA267_0==TABLE_ALIAS) ) {
				alt267=1;
			}
			switch (alt267) {
				case 1 :
					// PLSQLPrinter.g:1288:29: alias
					{
					pushFollow(FOLLOW_alias_in_pivot_in_clause_element12615);
					alias();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1288:36: ( expression | expression_list )
			int alt268=2;
			int LA268_0 = input.LA(1);
			if ( (LA268_0==EXPR||LA268_0==LOGIC_EXPR) ) {
				alt268=1;
			}
			else if ( (LA268_0==EXPR_LIST) ) {
				alt268=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 268, 0, input);
				throw nvae;
			}

			switch (alt268) {
				case 1 :
					// PLSQLPrinter.g:1288:37: expression
					{
					pushFollow(FOLLOW_expression_in_pivot_in_clause_element12619);
					expression();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1288:48: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_pivot_in_clause_element12621);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1289:5: -> template( \"not implemented: pivot_in_clause_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_in_clause_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_in_clause_element"


	public static class unpivot_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unpivot_clause"
	// PLSQLPrinter.g:1292:1: unpivot_clause : ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause ) -> template( \"not implemented: unpivot_clause\";
	public final PLSQLPrinter.unpivot_clause_return unpivot_clause() throws RecognitionException {
		PLSQLPrinter.unpivot_clause_return retval = new PLSQLPrinter.unpivot_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1293:5: ( ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause ) -> template( \"not implemented: unpivot_clause\")
			// PLSQLPrinter.g:1293:10: ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause )
			{
			match(input,UNPIVOT_VK,FOLLOW_UNPIVOT_VK_in_unpivot_clause12658); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1293:23: ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )?
			int alt271=2;
			int LA271_0 = input.LA(1);
			if ( (LA271_0==EXCLUDE_VK||LA271_0==INCLUDE_VK) ) {
				alt271=1;
			}
			switch (alt271) {
				case 1 :
					// PLSQLPrinter.g:1293:24: ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )?
					{
					// PLSQLPrinter.g:1293:24: ( INCLUDE_VK | EXCLUDE_VK )
					int alt269=2;
					int LA269_0 = input.LA(1);
					if ( (LA269_0==INCLUDE_VK) ) {
						alt269=1;
					}
					else if ( (LA269_0==EXCLUDE_VK) ) {
						alt269=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 269, 0, input);
						throw nvae;
					}

					switch (alt269) {
						case 1 :
							// PLSQLPrinter.g:1293:25: INCLUDE_VK
							{
							match(input,INCLUDE_VK,FOLLOW_INCLUDE_VK_in_unpivot_clause12662); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1293:36: EXCLUDE_VK
							{
							match(input,EXCLUDE_VK,FOLLOW_EXCLUDE_VK_in_unpivot_clause12664); 
							}
							break;

					}

					// PLSQLPrinter.g:1293:48: ( NULLS_VK )?
					int alt270=2;
					int LA270_0 = input.LA(1);
					if ( (LA270_0==NULLS_VK) ) {
						alt270=1;
					}
					switch (alt270) {
						case 1 :
							// PLSQLPrinter.g:1293:48: NULLS_VK
							{
							match(input,NULLS_VK,FOLLOW_NULLS_VK_in_unpivot_clause12667); 
							}
							break;

					}

					}
					break;

			}

			// PLSQLPrinter.g:1293:60: ( column_name )+
			int cnt272=0;
			loop272:
			while (true) {
				int alt272=2;
				int LA272_0 = input.LA(1);
				if ( (LA272_0==COLUMN_NAME) ) {
					alt272=1;
				}

				switch (alt272) {
				case 1 :
					// PLSQLPrinter.g:1293:60: column_name
					{
					pushFollow(FOLLOW_column_name_in_unpivot_clause12672);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt272 >= 1 ) break loop272;
					EarlyExitException eee = new EarlyExitException(272, input);
					throw eee;
				}
				cnt272++;
			}

			pushFollow(FOLLOW_pivot_for_clause_in_unpivot_clause12675);
			pivot_for_clause();
			state._fsp--;

			pushFollow(FOLLOW_unpivot_in_clause_in_unpivot_clause12677);
			unpivot_in_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1294:5: -> template( \"not implemented: unpivot_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: unpivot_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unpivot_clause"


	public static class unpivot_in_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unpivot_in_clause"
	// PLSQLPrinter.g:1297:1: unpivot_in_clause : ^( SQL92_RESERVED_IN ( unpivot_in_element )+ ) -> template( \"not implemented: unpivot_in_clause\";
	public final PLSQLPrinter.unpivot_in_clause_return unpivot_in_clause() throws RecognitionException {
		PLSQLPrinter.unpivot_in_clause_return retval = new PLSQLPrinter.unpivot_in_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1298:5: ( ^( SQL92_RESERVED_IN ( unpivot_in_element )+ ) -> template( \"not implemented: unpivot_in_clause\")
			// PLSQLPrinter.g:1298:10: ^( SQL92_RESERVED_IN ( unpivot_in_element )+ )
			{
			match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_unpivot_in_clause12713); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1298:30: ( unpivot_in_element )+
			int cnt273=0;
			loop273:
			while (true) {
				int alt273=2;
				int LA273_0 = input.LA(1);
				if ( (LA273_0==UNPIVOT_IN_ELEMENT) ) {
					alt273=1;
				}

				switch (alt273) {
				case 1 :
					// PLSQLPrinter.g:1298:30: unpivot_in_element
					{
					pushFollow(FOLLOW_unpivot_in_element_in_unpivot_in_clause12715);
					unpivot_in_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt273 >= 1 ) break loop273;
					EarlyExitException eee = new EarlyExitException(273, input);
					throw eee;
				}
				cnt273++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1299:5: -> template( \"not implemented: unpivot_in_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: unpivot_in_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unpivot_in_clause"


	public static class unpivot_in_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unpivot_in_element"
	// PLSQLPrinter.g:1302:1: unpivot_in_element : ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) ) -> template( \"not implemented: unpivot_in_element\";
	public final PLSQLPrinter.unpivot_in_element_return unpivot_in_element() throws RecognitionException {
		PLSQLPrinter.unpivot_in_element_return retval = new PLSQLPrinter.unpivot_in_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1303:5: ( ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) ) -> template( \"not implemented: unpivot_in_element\")
			// PLSQLPrinter.g:1303:10: ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) )
			{
			match(input,UNPIVOT_IN_ELEMENT,FOLLOW_UNPIVOT_IN_ELEMENT_in_unpivot_in_element12752); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1303:31: ( column_name )+
			int cnt274=0;
			loop274:
			while (true) {
				int alt274=2;
				int LA274_0 = input.LA(1);
				if ( (LA274_0==COLUMN_NAME) ) {
					alt274=1;
				}

				switch (alt274) {
				case 1 :
					// PLSQLPrinter.g:1303:31: column_name
					{
					pushFollow(FOLLOW_column_name_in_unpivot_in_element12754);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt274 >= 1 ) break loop274;
					EarlyExitException eee = new EarlyExitException(274, input);
					throw eee;
				}
				cnt274++;
			}

			match(input,PIVOT_ALIAS,FOLLOW_PIVOT_ALIAS_in_unpivot_in_element12758); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1303:58: ( expression | expression_list )
			int alt275=2;
			int LA275_0 = input.LA(1);
			if ( (LA275_0==EXPR||LA275_0==LOGIC_EXPR) ) {
				alt275=1;
			}
			else if ( (LA275_0==EXPR_LIST) ) {
				alt275=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 275, 0, input);
				throw nvae;
			}

			switch (alt275) {
				case 1 :
					// PLSQLPrinter.g:1303:59: expression
					{
					pushFollow(FOLLOW_expression_in_unpivot_in_element12761);
					expression();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1303:70: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_unpivot_in_element12763);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1304:5: -> template( \"not implemented: unpivot_in_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: unpivot_in_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unpivot_in_element"


	public static class hierarchical_query_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "hierarchical_query_clause"
	// PLSQLPrinter.g:1307:1: hierarchical_query_clause : ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) ) -> hierarchical_query_clause(is_nocycle=$NOCYCLE_VK != nullcondition=$expression.ststart_part=$start_part.st);
	public final PLSQLPrinter.hierarchical_query_clause_return hierarchical_query_clause() throws RecognitionException {
		PLSQLPrinter.hierarchical_query_clause_return retval = new PLSQLPrinter.hierarchical_query_clause_return();
		retval.start = input.LT(1);

		CommonTree NOCYCLE_VK236=null;
		TreeRuleReturnScope expression237 =null;
		TreeRuleReturnScope start_part238 =null;

		try {
			// PLSQLPrinter.g:1308:5: ( ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) ) -> hierarchical_query_clause(is_nocycle=$NOCYCLE_VK != nullcondition=$expression.ststart_part=$start_part.st))
			// PLSQLPrinter.g:1308:10: ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) )
			{
			match(input,HIERARCHICAL,FOLLOW_HIERARCHICAL_in_hierarchical_query_clause12801); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1308:25: ( start_part )?
			int alt276=2;
			int LA276_0 = input.LA(1);
			if ( (LA276_0==PLSQL_RESERVED_START) ) {
				alt276=1;
			}
			switch (alt276) {
				case 1 :
					// PLSQLPrinter.g:1308:25: start_part
					{
					pushFollow(FOLLOW_start_part_in_hierarchical_query_clause12803);
					start_part238=start_part();
					state._fsp--;

					}
					break;

			}

			match(input,SQL92_RESERVED_CONNECT,FOLLOW_SQL92_RESERVED_CONNECT_in_hierarchical_query_clause12807); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1308:62: ( NOCYCLE_VK )?
			int alt277=2;
			int LA277_0 = input.LA(1);
			if ( (LA277_0==NOCYCLE_VK) ) {
				alt277=1;
			}
			switch (alt277) {
				case 1 :
					// PLSQLPrinter.g:1308:62: NOCYCLE_VK
					{
					NOCYCLE_VK236=(CommonTree)match(input,NOCYCLE_VK,FOLLOW_NOCYCLE_VK_in_hierarchical_query_clause12809); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_hierarchical_query_clause12812);
			expression237=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1309:5: -> hierarchical_query_clause(is_nocycle=$NOCYCLE_VK != nullcondition=$expression.ststart_part=$start_part.st)
			{
				retval.st = templateLib.getInstanceOf("hierarchical_query_clause",new STAttrMap().put("is_nocycle", NOCYCLE_VK236 != null).put("condition", (expression237!=null?((StringTemplate)expression237.getTemplate()):null)).put("start_part", (start_part238!=null?((StringTemplate)start_part238.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "hierarchical_query_clause"


	public static class start_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "start_part"
	// PLSQLPrinter.g:1312:1: start_part : ^( PLSQL_RESERVED_START expression ) -> start_part(condition=$expression.st);
	public final PLSQLPrinter.start_part_return start_part() throws RecognitionException {
		PLSQLPrinter.start_part_return retval = new PLSQLPrinter.start_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression239 =null;

		try {
			// PLSQLPrinter.g:1313:5: ( ^( PLSQL_RESERVED_START expression ) -> start_part(condition=$expression.st))
			// PLSQLPrinter.g:1313:10: ^( PLSQL_RESERVED_START expression )
			{
			match(input,PLSQL_RESERVED_START,FOLLOW_PLSQL_RESERVED_START_in_start_part12860); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_start_part12862);
			expression239=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1314:5: -> start_part(condition=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("start_part",new STAttrMap().put("condition", (expression239!=null?((StringTemplate)expression239.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "start_part"


	public static class group_by_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "group_by_clause"
	// PLSQLPrinter.g:1317:1: group_by_clause : ^( SQL92_RESERVED_GROUP (elements+= group_by_element )+ ( having_clause )? ) -> group_by_clause(group_by_elements=$elementshaving_clause=$having_clause.st);
	public final PLSQLPrinter.group_by_clause_return group_by_clause() throws RecognitionException {
		PLSQLPrinter.group_by_clause_return retval = new PLSQLPrinter.group_by_clause_return();
		retval.start = input.LT(1);

		List<Object> list_elements=null;
		TreeRuleReturnScope having_clause240 =null;
		RuleReturnScope elements = null;
		try {
			// PLSQLPrinter.g:1318:5: ( ^( SQL92_RESERVED_GROUP (elements+= group_by_element )+ ( having_clause )? ) -> group_by_clause(group_by_elements=$elementshaving_clause=$having_clause.st))
			// PLSQLPrinter.g:1318:10: ^( SQL92_RESERVED_GROUP (elements+= group_by_element )+ ( having_clause )? )
			{
			match(input,SQL92_RESERVED_GROUP,FOLLOW_SQL92_RESERVED_GROUP_in_group_by_clause12899); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1318:41: (elements+= group_by_element )+
			int cnt278=0;
			loop278:
			while (true) {
				int alt278=2;
				int LA278_0 = input.LA(1);
				if ( (LA278_0==GROUP_BY_ELEMENT) ) {
					alt278=1;
				}

				switch (alt278) {
				case 1 :
					// PLSQLPrinter.g:1318:41: elements+= group_by_element
					{
					pushFollow(FOLLOW_group_by_element_in_group_by_clause12903);
					elements=group_by_element();
					state._fsp--;

					if (list_elements==null) list_elements=new ArrayList<Object>();
					list_elements.add(elements.getTemplate());
					}
					break;

				default :
					if ( cnt278 >= 1 ) break loop278;
					EarlyExitException eee = new EarlyExitException(278, input);
					throw eee;
				}
				cnt278++;
			}

			// PLSQLPrinter.g:1318:61: ( having_clause )?
			int alt279=2;
			int LA279_0 = input.LA(1);
			if ( (LA279_0==SQL92_RESERVED_HAVING) ) {
				alt279=1;
			}
			switch (alt279) {
				case 1 :
					// PLSQLPrinter.g:1318:61: having_clause
					{
					pushFollow(FOLLOW_having_clause_in_group_by_clause12906);
					having_clause240=having_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1319:5: -> group_by_clause(group_by_elements=$elementshaving_clause=$having_clause.st)
			{
				retval.st = templateLib.getInstanceOf("group_by_clause",new STAttrMap().put("group_by_elements", list_elements).put("having_clause", (having_clause240!=null?((StringTemplate)having_clause240.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_by_clause"


	public static class group_by_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "group_by_element"
	// PLSQLPrinter.g:1322:1: group_by_element : ^( GROUP_BY_ELEMENT group_by_elements ) -> {$group_by_elements.st};
	public final PLSQLPrinter.group_by_element_return group_by_element() throws RecognitionException {
		PLSQLPrinter.group_by_element_return retval = new PLSQLPrinter.group_by_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope group_by_elements241 =null;

		try {
			// PLSQLPrinter.g:1323:5: ( ^( GROUP_BY_ELEMENT group_by_elements ) -> {$group_by_elements.st})
			// PLSQLPrinter.g:1323:10: ^( GROUP_BY_ELEMENT group_by_elements )
			{
			match(input,GROUP_BY_ELEMENT,FOLLOW_GROUP_BY_ELEMENT_in_group_by_element12949); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_group_by_elements_in_group_by_element12951);
			group_by_elements241=group_by_elements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1323:48: -> {$group_by_elements.st}
			{
				retval.st = (group_by_elements241!=null?((StringTemplate)group_by_elements241.getTemplate()):null);
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_by_element"


	public static class group_by_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "group_by_elements"
	// PLSQLPrinter.g:1326:1: group_by_elements : ( ^( GROUPING_VK ( groupin_set )+ ) -> template( \"not implemented: group_by_elements\"| grouping_element -> {$grouping_element.st});
	public final PLSQLPrinter.group_by_elements_return group_by_elements() throws RecognitionException {
		PLSQLPrinter.group_by_elements_return retval = new PLSQLPrinter.group_by_elements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope grouping_element242 =null;

		try {
			// PLSQLPrinter.g:1327:5: ( ^( GROUPING_VK ( groupin_set )+ ) -> template( \"not implemented: group_by_elements\"| grouping_element -> {$grouping_element.st})
			int alt281=2;
			int LA281_0 = input.LA(1);
			if ( (LA281_0==GROUPING_VK) ) {
				alt281=1;
			}
			else if ( (LA281_0==CUBE_VK||(LA281_0 >= EXPR && LA281_0 <= EXPR_LIST)||LA281_0==LOGIC_EXPR||LA281_0==ROLLUP_VK) ) {
				alt281=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 281, 0, input);
				throw nvae;
			}

			switch (alt281) {
				case 1 :
					// PLSQLPrinter.g:1327:10: ^( GROUPING_VK ( groupin_set )+ )
					{
					match(input,GROUPING_VK,FOLLOW_GROUPING_VK_in_group_by_elements12977); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1327:24: ( groupin_set )+
					int cnt280=0;
					loop280:
					while (true) {
						int alt280=2;
						int LA280_0 = input.LA(1);
						if ( (LA280_0==GROUPIN_SET) ) {
							alt280=1;
						}

						switch (alt280) {
						case 1 :
							// PLSQLPrinter.g:1327:24: groupin_set
							{
							pushFollow(FOLLOW_groupin_set_in_group_by_elements12979);
							groupin_set();
							state._fsp--;

							}
							break;

						default :
							if ( cnt280 >= 1 ) break loop280;
							EarlyExitException eee = new EarlyExitException(280, input);
							throw eee;
						}
						cnt280++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1328:5: -> template( \"not implemented: group_by_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: group_by_elements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1329:10: grouping_element
					{
					pushFollow(FOLLOW_grouping_element_in_group_by_elements13006);
					grouping_element242=grouping_element();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1329:27: -> {$grouping_element.st}
					{
						retval.st = (grouping_element242!=null?((StringTemplate)grouping_element242.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_by_elements"


	public static class groupin_set_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "groupin_set"
	// PLSQLPrinter.g:1332:1: groupin_set : ^( GROUPIN_SET grouping_element ) -> template( \"not implemented: groupin_set\";
	public final PLSQLPrinter.groupin_set_return groupin_set() throws RecognitionException {
		PLSQLPrinter.groupin_set_return retval = new PLSQLPrinter.groupin_set_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1333:5: ( ^( GROUPIN_SET grouping_element ) -> template( \"not implemented: groupin_set\")
			// PLSQLPrinter.g:1333:10: ^( GROUPIN_SET grouping_element )
			{
			match(input,GROUPIN_SET,FOLLOW_GROUPIN_SET_in_groupin_set13031); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_grouping_element_in_groupin_set13033);
			grouping_element();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1334:5: -> template( \"not implemented: groupin_set\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: groupin_set");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "groupin_set"


	public static class grouping_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "grouping_element"
	// PLSQLPrinter.g:1337:1: grouping_element : ( ^( ROLLUP_VK (elements+= grouping_element )+ ) -> rollup_grouping_element(elements=$elements)| ^( CUBE_VK (elements+= grouping_element )+ ) -> cube_grouping_element(elements=$elements)| expression_list -> {$expression_list.st}| expression -> {$expression.st});
	public final PLSQLPrinter.grouping_element_return grouping_element() throws RecognitionException {
		PLSQLPrinter.grouping_element_return retval = new PLSQLPrinter.grouping_element_return();
		retval.start = input.LT(1);

		List<Object> list_elements=null;
		TreeRuleReturnScope expression_list243 =null;
		TreeRuleReturnScope expression244 =null;
		RuleReturnScope elements = null;
		try {
			// PLSQLPrinter.g:1338:5: ( ^( ROLLUP_VK (elements+= grouping_element )+ ) -> rollup_grouping_element(elements=$elements)| ^( CUBE_VK (elements+= grouping_element )+ ) -> cube_grouping_element(elements=$elements)| expression_list -> {$expression_list.st}| expression -> {$expression.st})
			int alt284=4;
			switch ( input.LA(1) ) {
			case ROLLUP_VK:
				{
				alt284=1;
				}
				break;
			case CUBE_VK:
				{
				alt284=2;
				}
				break;
			case EXPR_LIST:
				{
				alt284=3;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt284=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 284, 0, input);
				throw nvae;
			}
			switch (alt284) {
				case 1 :
					// PLSQLPrinter.g:1338:10: ^( ROLLUP_VK (elements+= grouping_element )+ )
					{
					match(input,ROLLUP_VK,FOLLOW_ROLLUP_VK_in_grouping_element13069); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1338:30: (elements+= grouping_element )+
					int cnt282=0;
					loop282:
					while (true) {
						int alt282=2;
						int LA282_0 = input.LA(1);
						if ( (LA282_0==CUBE_VK||(LA282_0 >= EXPR && LA282_0 <= EXPR_LIST)||LA282_0==LOGIC_EXPR||LA282_0==ROLLUP_VK) ) {
							alt282=1;
						}

						switch (alt282) {
						case 1 :
							// PLSQLPrinter.g:1338:30: elements+= grouping_element
							{
							pushFollow(FOLLOW_grouping_element_in_grouping_element13073);
							elements=grouping_element();
							state._fsp--;

							if (list_elements==null) list_elements=new ArrayList<Object>();
							list_elements.add(elements.getTemplate());
							}
							break;

						default :
							if ( cnt282 >= 1 ) break loop282;
							EarlyExitException eee = new EarlyExitException(282, input);
							throw eee;
						}
						cnt282++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1339:5: -> rollup_grouping_element(elements=$elements)
					{
						retval.st = templateLib.getInstanceOf("rollup_grouping_element",new STAttrMap().put("elements", list_elements));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1340:10: ^( CUBE_VK (elements+= grouping_element )+ )
					{
					match(input,CUBE_VK,FOLLOW_CUBE_VK_in_grouping_element13102); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1340:28: (elements+= grouping_element )+
					int cnt283=0;
					loop283:
					while (true) {
						int alt283=2;
						int LA283_0 = input.LA(1);
						if ( (LA283_0==CUBE_VK||(LA283_0 >= EXPR && LA283_0 <= EXPR_LIST)||LA283_0==LOGIC_EXPR||LA283_0==ROLLUP_VK) ) {
							alt283=1;
						}

						switch (alt283) {
						case 1 :
							// PLSQLPrinter.g:1340:28: elements+= grouping_element
							{
							pushFollow(FOLLOW_grouping_element_in_grouping_element13106);
							elements=grouping_element();
							state._fsp--;

							if (list_elements==null) list_elements=new ArrayList<Object>();
							list_elements.add(elements.getTemplate());
							}
							break;

						default :
							if ( cnt283 >= 1 ) break loop283;
							EarlyExitException eee = new EarlyExitException(283, input);
							throw eee;
						}
						cnt283++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1341:5: -> cube_grouping_element(elements=$elements)
					{
						retval.st = templateLib.getInstanceOf("cube_grouping_element",new STAttrMap().put("elements", list_elements));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1342:10: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_grouping_element13134);
					expression_list243=expression_list();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1342:26: -> {$expression_list.st}
					{
						retval.st = (expression_list243!=null?((StringTemplate)expression_list243.getTemplate()):null);
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1343:10: expression
					{
					pushFollow(FOLLOW_expression_in_grouping_element13149);
					expression244=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1343:21: -> {$expression.st}
					{
						retval.st = (expression244!=null?((StringTemplate)expression244.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grouping_element"


	public static class having_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "having_clause"
	// PLSQLPrinter.g:1346:1: having_clause : ^( SQL92_RESERVED_HAVING expression ) -> having_clause(condition=$expression.st);
	public final PLSQLPrinter.having_clause_return having_clause() throws RecognitionException {
		PLSQLPrinter.having_clause_return retval = new PLSQLPrinter.having_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression245 =null;

		try {
			// PLSQLPrinter.g:1347:5: ( ^( SQL92_RESERVED_HAVING expression ) -> having_clause(condition=$expression.st))
			// PLSQLPrinter.g:1347:10: ^( SQL92_RESERVED_HAVING expression )
			{
			match(input,SQL92_RESERVED_HAVING,FOLLOW_SQL92_RESERVED_HAVING_in_having_clause13174); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_having_clause13176);
			expression245=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1348:5: -> having_clause(condition=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("having_clause",new STAttrMap().put("condition", (expression245!=null?((StringTemplate)expression245.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "having_clause"


	public static class model_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_clause"
	// PLSQLPrinter.g:1351:1: model_clause : ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) -> template( \"not implemented: model_clause\";
	public final PLSQLPrinter.model_clause_return model_clause() throws RecognitionException {
		PLSQLPrinter.model_clause_return retval = new PLSQLPrinter.model_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1352:5: ( ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) -> template( \"not implemented: model_clause\")
			// PLSQLPrinter.g:1352:10: ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* )
			{
			match(input,PLSQL_NON_RESERVED_MODEL,FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_clause13213); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_main_model_in_model_clause13215);
			main_model();
			state._fsp--;

			// PLSQLPrinter.g:1352:48: ( cell_reference_options )*
			loop285:
			while (true) {
				int alt285=2;
				int LA285_0 = input.LA(1);
				if ( (LA285_0==SQL92_RESERVED_UNIQUE||LA285_0==IGNORE_VK||LA285_0==KEEP_VK) ) {
					alt285=1;
				}

				switch (alt285) {
				case 1 :
					// PLSQLPrinter.g:1352:48: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_model_clause13217);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop285;
				}
			}

			// PLSQLPrinter.g:1352:72: ( return_rows_clause )?
			int alt286=2;
			int LA286_0 = input.LA(1);
			if ( (LA286_0==RETURN_VK) ) {
				alt286=1;
			}
			switch (alt286) {
				case 1 :
					// PLSQLPrinter.g:1352:72: return_rows_clause
					{
					pushFollow(FOLLOW_return_rows_clause_in_model_clause13220);
					return_rows_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1352:92: ( reference_model )*
			loop287:
			while (true) {
				int alt287=2;
				int LA287_0 = input.LA(1);
				if ( (LA287_0==REFERENCE_VK) ) {
					alt287=1;
				}

				switch (alt287) {
				case 1 :
					// PLSQLPrinter.g:1352:92: reference_model
					{
					pushFollow(FOLLOW_reference_model_in_model_clause13223);
					reference_model();
					state._fsp--;

					}
					break;

				default :
					break loop287;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1353:5: -> template( \"not implemented: model_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_clause"


	public static class cell_reference_options_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cell_reference_options"
	// PLSQLPrinter.g:1356:1: cell_reference_options : ( ^( ( IGNORE_VK | KEEP_VK ) NAV_VK ) | ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) ) -> template( \"not implemented: cell_reference_options\");
	public final PLSQLPrinter.cell_reference_options_return cell_reference_options() throws RecognitionException {
		PLSQLPrinter.cell_reference_options_return retval = new PLSQLPrinter.cell_reference_options_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1357:5: ( ^( ( IGNORE_VK | KEEP_VK ) NAV_VK ) | ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) ) -> template( \"not implemented: cell_reference_options\")
			int alt289=2;
			int LA289_0 = input.LA(1);
			if ( (LA289_0==IGNORE_VK||LA289_0==KEEP_VK) ) {
				alt289=1;
			}
			else if ( (LA289_0==SQL92_RESERVED_UNIQUE) ) {
				alt289=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 289, 0, input);
				throw nvae;
			}

			switch (alt289) {
				case 1 :
					// PLSQLPrinter.g:1357:10: ^( ( IGNORE_VK | KEEP_VK ) NAV_VK )
					{
					if ( input.LA(1)==IGNORE_VK||input.LA(1)==KEEP_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					match(input,NAV_VK,FOLLOW_NAV_VK_in_cell_reference_options13266); 
					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1358:10: ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) )
					{
					match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_cell_reference_options13279); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1358:34: ( DIMENSION_VK | SINGLE_VK )
					int alt288=2;
					int LA288_0 = input.LA(1);
					if ( (LA288_0==DIMENSION_VK) ) {
						alt288=1;
					}
					else if ( (LA288_0==SINGLE_VK) ) {
						alt288=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 288, 0, input);
						throw nvae;
					}

					switch (alt288) {
						case 1 :
							// PLSQLPrinter.g:1358:35: DIMENSION_VK
							{
							match(input,DIMENSION_VK,FOLLOW_DIMENSION_VK_in_cell_reference_options13282); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1358:48: SINGLE_VK
							{
							match(input,SINGLE_VK,FOLLOW_SINGLE_VK_in_cell_reference_options13284); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1359:5: -> template( \"not implemented: cell_reference_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: cell_reference_options");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cell_reference_options"


	public static class return_rows_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "return_rows_clause"
	// PLSQLPrinter.g:1362:1: return_rows_clause : ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) ) -> template( \"not implemented: return_rows_clause\";
	public final PLSQLPrinter.return_rows_clause_return return_rows_clause() throws RecognitionException {
		PLSQLPrinter.return_rows_clause_return retval = new PLSQLPrinter.return_rows_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1363:5: ( ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) ) -> template( \"not implemented: return_rows_clause\")
			// PLSQLPrinter.g:1363:10: ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) )
			{
			match(input,RETURN_VK,FOLLOW_RETURN_VK_in_return_rows_clause13321); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1363:22: ( UPDATED_VK | SQL92_RESERVED_ALL )
			int alt290=2;
			int LA290_0 = input.LA(1);
			if ( (LA290_0==UPDATED_VK) ) {
				alt290=1;
			}
			else if ( (LA290_0==SQL92_RESERVED_ALL) ) {
				alt290=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 290, 0, input);
				throw nvae;
			}

			switch (alt290) {
				case 1 :
					// PLSQLPrinter.g:1363:23: UPDATED_VK
					{
					match(input,UPDATED_VK,FOLLOW_UPDATED_VK_in_return_rows_clause13324); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1363:34: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_return_rows_clause13326); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1364:5: -> template( \"not implemented: return_rows_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: return_rows_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "return_rows_clause"


	public static class reference_model_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "reference_model"
	// PLSQLPrinter.g:1367:1: reference_model : ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* ) -> template( \"not implemented: reference_model\";
	public final PLSQLPrinter.reference_model_return reference_model() throws RecognitionException {
		PLSQLPrinter.reference_model_return retval = new PLSQLPrinter.reference_model_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1368:5: ( ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* ) -> template( \"not implemented: reference_model\")
			// PLSQLPrinter.g:1368:10: ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* )
			{
			match(input,REFERENCE_VK,FOLLOW_REFERENCE_VK_in_reference_model13363); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_reference_model_name_in_reference_model13365);
			reference_model_name();
			state._fsp--;

			pushFollow(FOLLOW_subquery_in_reference_model13367);
			subquery();
			state._fsp--;

			pushFollow(FOLLOW_model_column_clauses_in_reference_model13369);
			model_column_clauses();
			state._fsp--;

			// PLSQLPrinter.g:1368:76: ( cell_reference_options )*
			loop291:
			while (true) {
				int alt291=2;
				int LA291_0 = input.LA(1);
				if ( (LA291_0==SQL92_RESERVED_UNIQUE||LA291_0==IGNORE_VK||LA291_0==KEEP_VK) ) {
					alt291=1;
				}

				switch (alt291) {
				case 1 :
					// PLSQLPrinter.g:1368:76: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_reference_model13371);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop291;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1369:5: -> template( \"not implemented: reference_model\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: reference_model");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reference_model"


	public static class main_model_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "main_model"
	// PLSQLPrinter.g:1372:1: main_model : ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) -> template( \"not implemented: main_model\";
	public final PLSQLPrinter.main_model_return main_model() throws RecognitionException {
		PLSQLPrinter.main_model_return retval = new PLSQLPrinter.main_model_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1373:5: ( ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) -> template( \"not implemented: main_model\")
			// PLSQLPrinter.g:1373:10: ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* )
			{
			match(input,MAIN_MODEL,FOLLOW_MAIN_MODEL_in_main_model13408); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1373:23: ( main_model_name )?
			int alt292=2;
			int LA292_0 = input.LA(1);
			if ( (LA292_0==MAIN_MODEL_NAME) ) {
				alt292=1;
			}
			switch (alt292) {
				case 1 :
					// PLSQLPrinter.g:1373:23: main_model_name
					{
					pushFollow(FOLLOW_main_model_name_in_main_model13410);
					main_model_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_model_column_clauses_in_main_model13413);
			model_column_clauses();
			state._fsp--;

			pushFollow(FOLLOW_model_rules_clause_in_main_model13415);
			model_rules_clause();
			state._fsp--;

			// PLSQLPrinter.g:1373:80: ( cell_reference_options )*
			loop293:
			while (true) {
				int alt293=2;
				int LA293_0 = input.LA(1);
				if ( (LA293_0==SQL92_RESERVED_UNIQUE||LA293_0==IGNORE_VK||LA293_0==KEEP_VK) ) {
					alt293=1;
				}

				switch (alt293) {
				case 1 :
					// PLSQLPrinter.g:1373:80: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_main_model13417);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop293;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1374:5: -> template( \"not implemented: main_model\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: main_model");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "main_model"


	public static class model_column_clauses_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column_clauses"
	// PLSQLPrinter.g:1377:1: model_column_clauses : ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? ) -> template( \"not implemented: model_column_clauses\";
	public final PLSQLPrinter.model_column_clauses_return model_column_clauses() throws RecognitionException {
		PLSQLPrinter.model_column_clauses_return retval = new PLSQLPrinter.model_column_clauses_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1378:5: ( ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? ) -> template( \"not implemented: model_column_clauses\")
			// PLSQLPrinter.g:1378:10: ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? )
			{
			match(input,MODEL_COLUMN,FOLLOW_MODEL_COLUMN_in_model_column_clauses13454); 
			match(input, Token.DOWN, null); 
			match(input,DIMENSION_VK,FOLLOW_DIMENSION_VK_in_model_column_clauses13457); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_clauses13459);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input,MEASURES_VK,FOLLOW_MEASURES_VK_in_model_column_clauses13463); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_clauses13465);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1378:92: ( model_column_partition_part )?
			int alt294=2;
			int LA294_0 = input.LA(1);
			if ( (LA294_0==PARTITION_VK) ) {
				alt294=1;
			}
			switch (alt294) {
				case 1 :
					// PLSQLPrinter.g:1378:92: model_column_partition_part
					{
					pushFollow(FOLLOW_model_column_partition_part_in_model_column_clauses13468);
					model_column_partition_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1379:5: -> template( \"not implemented: model_column_clauses\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column_clauses");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column_clauses"


	public static class model_column_partition_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column_partition_part"
	// PLSQLPrinter.g:1382:1: model_column_partition_part : ^( PARTITION_VK model_column_list ) -> template( \"not implemented: model_column_partition_part\";
	public final PLSQLPrinter.model_column_partition_part_return model_column_partition_part() throws RecognitionException {
		PLSQLPrinter.model_column_partition_part_return retval = new PLSQLPrinter.model_column_partition_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1383:5: ( ^( PARTITION_VK model_column_list ) -> template( \"not implemented: model_column_partition_part\")
			// PLSQLPrinter.g:1383:10: ^( PARTITION_VK model_column_list )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_model_column_partition_part13505); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_partition_part13507);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1384:5: -> template( \"not implemented: model_column_partition_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column_partition_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column_partition_part"


	public static class model_column_list_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column_list"
	// PLSQLPrinter.g:1387:1: model_column_list : ^( MODEL_COLUMNS ( model_column )+ ) -> template( \"not implemented: model_column_list\";
	public final PLSQLPrinter.model_column_list_return model_column_list() throws RecognitionException {
		PLSQLPrinter.model_column_list_return retval = new PLSQLPrinter.model_column_list_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1388:5: ( ^( MODEL_COLUMNS ( model_column )+ ) -> template( \"not implemented: model_column_list\")
			// PLSQLPrinter.g:1388:10: ^( MODEL_COLUMNS ( model_column )+ )
			{
			match(input,MODEL_COLUMNS,FOLLOW_MODEL_COLUMNS_in_model_column_list13543); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1388:26: ( model_column )+
			int cnt295=0;
			loop295:
			while (true) {
				int alt295=2;
				int LA295_0 = input.LA(1);
				if ( (LA295_0==MODEL_COLUMN) ) {
					alt295=1;
				}

				switch (alt295) {
				case 1 :
					// PLSQLPrinter.g:1388:26: model_column
					{
					pushFollow(FOLLOW_model_column_in_model_column_list13545);
					model_column();
					state._fsp--;

					}
					break;

				default :
					if ( cnt295 >= 1 ) break loop295;
					EarlyExitException eee = new EarlyExitException(295, input);
					throw eee;
				}
				cnt295++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1389:5: -> template( \"not implemented: model_column_list\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column_list");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column_list"


	public static class model_column_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column"
	// PLSQLPrinter.g:1392:1: model_column : ^( MODEL_COLUMN ( alias )? expression ) -> template( \"not implemented: model_column\";
	public final PLSQLPrinter.model_column_return model_column() throws RecognitionException {
		PLSQLPrinter.model_column_return retval = new PLSQLPrinter.model_column_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1393:5: ( ^( MODEL_COLUMN ( alias )? expression ) -> template( \"not implemented: model_column\")
			// PLSQLPrinter.g:1393:10: ^( MODEL_COLUMN ( alias )? expression )
			{
			match(input,MODEL_COLUMN,FOLLOW_MODEL_COLUMN_in_model_column13582); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1393:25: ( alias )?
			int alt296=2;
			int LA296_0 = input.LA(1);
			if ( (LA296_0==COLUMN_ALIAS||LA296_0==TABLE_ALIAS) ) {
				alt296=1;
			}
			switch (alt296) {
				case 1 :
					// PLSQLPrinter.g:1393:25: alias
					{
					pushFollow(FOLLOW_alias_in_model_column13584);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_expression_in_model_column13587);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1394:5: -> template( \"not implemented: model_column\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column"


	public static class model_rules_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_rules_clause"
	// PLSQLPrinter.g:1397:1: model_rules_clause : ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) -> template( \"not implemented: model_rules_clause\";
	public final PLSQLPrinter.model_rules_clause_return model_rules_clause() throws RecognitionException {
		PLSQLPrinter.model_rules_clause_return retval = new PLSQLPrinter.model_rules_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1398:5: ( ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) -> template( \"not implemented: model_rules_clause\")
			// PLSQLPrinter.g:1398:10: ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? )
			{
			match(input,MODEL_RULES,FOLLOW_MODEL_RULES_in_model_rules_clause13624); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1398:24: ( model_rules_element )+
			int cnt297=0;
			loop297:
			while (true) {
				int alt297=2;
				int LA297_0 = input.LA(1);
				if ( (LA297_0==MODEL_RULE) ) {
					alt297=1;
				}

				switch (alt297) {
				case 1 :
					// PLSQLPrinter.g:1398:24: model_rules_element
					{
					pushFollow(FOLLOW_model_rules_element_in_model_rules_clause13626);
					model_rules_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt297 >= 1 ) break loop297;
					EarlyExitException eee = new EarlyExitException(297, input);
					throw eee;
				}
				cnt297++;
			}

			// PLSQLPrinter.g:1398:45: ( model_rules_part )?
			int alt298=2;
			int LA298_0 = input.LA(1);
			if ( (LA298_0==RULES_VK) ) {
				alt298=1;
			}
			switch (alt298) {
				case 1 :
					// PLSQLPrinter.g:1398:45: model_rules_part
					{
					pushFollow(FOLLOW_model_rules_part_in_model_rules_clause13629);
					model_rules_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1399:5: -> template( \"not implemented: model_rules_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_rules_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_rules_clause"


	public static class model_rules_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_rules_part"
	// PLSQLPrinter.g:1402:1: model_rules_part : ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? ) -> template( \"not implemented: model_rules_part\";
	public final PLSQLPrinter.model_rules_part_return model_rules_part() throws RecognitionException {
		PLSQLPrinter.model_rules_part_return retval = new PLSQLPrinter.model_rules_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1403:5: ( ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? ) -> template( \"not implemented: model_rules_part\")
			// PLSQLPrinter.g:1403:10: ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? )
			{
			match(input,RULES_VK,FOLLOW_RULES_VK_in_model_rules_part13666); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1404:13: ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )?
				int alt300=3;
				int LA300_0 = input.LA(1);
				if ( (LA300_0==SQL92_RESERVED_UPDATE) ) {
					alt300=1;
				}
				else if ( (LA300_0==UPSERT_VK) ) {
					alt300=2;
				}
				switch (alt300) {
					case 1 :
						// PLSQLPrinter.g:1404:14: SQL92_RESERVED_UPDATE
						{
						match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_part13682); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1404:36: UPSERT_VK ( SQL92_RESERVED_ALL )?
						{
						match(input,UPSERT_VK,FOLLOW_UPSERT_VK_in_model_rules_part13684); 
						// PLSQLPrinter.g:1404:46: ( SQL92_RESERVED_ALL )?
						int alt299=2;
						int LA299_0 = input.LA(1);
						if ( (LA299_0==SQL92_RESERVED_ALL) ) {
							alt299=1;
						}
						switch (alt299) {
							case 1 :
								// PLSQLPrinter.g:1404:46: SQL92_RESERVED_ALL
								{
								match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_model_rules_part13686); 
								}
								break;

						}

						}
						break;

				}

				// PLSQLPrinter.g:1405:13: ( AUTOMATIC_VK | SEQUENTIAL_VK )?
				int alt301=3;
				int LA301_0 = input.LA(1);
				if ( (LA301_0==AUTOMATIC_VK) ) {
					alt301=1;
				}
				else if ( (LA301_0==SEQUENTIAL_VK) ) {
					alt301=2;
				}
				switch (alt301) {
					case 1 :
						// PLSQLPrinter.g:1405:14: AUTOMATIC_VK
						{
						match(input,AUTOMATIC_VK,FOLLOW_AUTOMATIC_VK_in_model_rules_part13705); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1405:27: SEQUENTIAL_VK
						{
						match(input,SEQUENTIAL_VK,FOLLOW_SEQUENTIAL_VK_in_model_rules_part13707); 
						}
						break;

				}

				// PLSQLPrinter.g:1406:13: ( model_iterate_clause )?
				int alt302=2;
				int LA302_0 = input.LA(1);
				if ( (LA302_0==ITERATE_VK) ) {
					alt302=1;
				}
				switch (alt302) {
					case 1 :
						// PLSQLPrinter.g:1406:13: model_iterate_clause
						{
						pushFollow(FOLLOW_model_iterate_clause_in_model_rules_part13724);
						model_iterate_clause();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1408:5: -> template( \"not implemented: model_rules_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_rules_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_rules_part"


	public static class model_rules_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_rules_element"
	// PLSQLPrinter.g:1411:1: model_rules_element : ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? ) -> template( \"not implemented: model_rules_element\";
	public final PLSQLPrinter.model_rules_element_return model_rules_element() throws RecognitionException {
		PLSQLPrinter.model_rules_element_return retval = new PLSQLPrinter.model_rules_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1412:5: ( ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? ) -> template( \"not implemented: model_rules_element\")
			// PLSQLPrinter.g:1412:10: ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? )
			{
			match(input,MODEL_RULE,FOLLOW_MODEL_RULE_in_model_rules_element13770); 
			match(input, Token.DOWN, null); 
			match(input,ASSIGN,FOLLOW_ASSIGN_in_model_rules_element13786); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_expression_in_model_rules_element13788);
			model_expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_model_rules_element13790);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1414:13: ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )?
			int alt304=3;
			int LA304_0 = input.LA(1);
			if ( (LA304_0==SQL92_RESERVED_UPDATE) ) {
				alt304=1;
			}
			else if ( (LA304_0==UPSERT_VK) ) {
				alt304=2;
			}
			switch (alt304) {
				case 1 :
					// PLSQLPrinter.g:1414:14: SQL92_RESERVED_UPDATE
					{
					match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_element13807); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1414:36: UPSERT_VK ( SQL92_RESERVED_ALL )?
					{
					match(input,UPSERT_VK,FOLLOW_UPSERT_VK_in_model_rules_element13809); 
					// PLSQLPrinter.g:1414:46: ( SQL92_RESERVED_ALL )?
					int alt303=2;
					int LA303_0 = input.LA(1);
					if ( (LA303_0==SQL92_RESERVED_ALL) ) {
						alt303=1;
					}
					switch (alt303) {
						case 1 :
							// PLSQLPrinter.g:1414:46: SQL92_RESERVED_ALL
							{
							match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_model_rules_element13811); 
							}
							break;

					}

					}
					break;

			}

			// PLSQLPrinter.g:1415:13: ( order_by_clause )?
			int alt305=2;
			int LA305_0 = input.LA(1);
			if ( (LA305_0==SQL92_RESERVED_ORDER) ) {
				alt305=1;
			}
			switch (alt305) {
				case 1 :
					// PLSQLPrinter.g:1415:13: order_by_clause
					{
					pushFollow(FOLLOW_order_by_clause_in_model_rules_element13829);
					order_by_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1417:5: -> template( \"not implemented: model_rules_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_rules_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_rules_element"


	public static class model_iterate_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_iterate_clause"
	// PLSQLPrinter.g:1420:1: model_iterate_clause : ^( ITERATE_VK expression ( until_part )? ) -> template( \"not implemented: model_iterate_clause\";
	public final PLSQLPrinter.model_iterate_clause_return model_iterate_clause() throws RecognitionException {
		PLSQLPrinter.model_iterate_clause_return retval = new PLSQLPrinter.model_iterate_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1421:5: ( ^( ITERATE_VK expression ( until_part )? ) -> template( \"not implemented: model_iterate_clause\")
			// PLSQLPrinter.g:1421:10: ^( ITERATE_VK expression ( until_part )? )
			{
			match(input,ITERATE_VK,FOLLOW_ITERATE_VK_in_model_iterate_clause13875); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_model_iterate_clause13877);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1421:34: ( until_part )?
			int alt306=2;
			int LA306_0 = input.LA(1);
			if ( (LA306_0==UNTIL_VK) ) {
				alt306=1;
			}
			switch (alt306) {
				case 1 :
					// PLSQLPrinter.g:1421:34: until_part
					{
					pushFollow(FOLLOW_until_part_in_model_iterate_clause13879);
					until_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1422:5: -> template( \"not implemented: model_iterate_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_iterate_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_iterate_clause"


	public static class until_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "until_part"
	// PLSQLPrinter.g:1425:1: until_part : ^( UNTIL_VK expression ) -> template( \"not implemented: until_part\";
	public final PLSQLPrinter.until_part_return until_part() throws RecognitionException {
		PLSQLPrinter.until_part_return retval = new PLSQLPrinter.until_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1426:5: ( ^( UNTIL_VK expression ) -> template( \"not implemented: until_part\")
			// PLSQLPrinter.g:1426:10: ^( UNTIL_VK expression )
			{
			match(input,UNTIL_VK,FOLLOW_UNTIL_VK_in_until_part13916); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_until_part13918);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1427:5: -> template( \"not implemented: until_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: until_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "until_part"


	public static class order_by_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "order_by_clause"
	// PLSQLPrinter.g:1430:1: order_by_clause : ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS (elements+= order_by_elements )+ ) ) -> order_by_clause(is_siblings=$SIBLINGS_VK != nullelements=$elements);
	public final PLSQLPrinter.order_by_clause_return order_by_clause() throws RecognitionException {
		PLSQLPrinter.order_by_clause_return retval = new PLSQLPrinter.order_by_clause_return();
		retval.start = input.LT(1);

		CommonTree SIBLINGS_VK246=null;
		List<Object> list_elements=null;
		RuleReturnScope elements = null;
		try {
			// PLSQLPrinter.g:1431:5: ( ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS (elements+= order_by_elements )+ ) ) -> order_by_clause(is_siblings=$SIBLINGS_VK != nullelements=$elements))
			// PLSQLPrinter.g:1431:10: ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS (elements+= order_by_elements )+ ) )
			{
			match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_order_by_clause13954); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1431:33: ( SIBLINGS_VK )?
			int alt307=2;
			int LA307_0 = input.LA(1);
			if ( (LA307_0==SIBLINGS_VK) ) {
				alt307=1;
			}
			switch (alt307) {
				case 1 :
					// PLSQLPrinter.g:1431:33: SIBLINGS_VK
					{
					SIBLINGS_VK246=(CommonTree)match(input,SIBLINGS_VK,FOLLOW_SIBLINGS_VK_in_order_by_clause13956); 
					}
					break;

			}

			match(input,ORDER_BY_ELEMENTS,FOLLOW_ORDER_BY_ELEMENTS_in_order_by_clause13960); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1431:74: (elements+= order_by_elements )+
			int cnt308=0;
			loop308:
			while (true) {
				int alt308=2;
				int LA308_0 = input.LA(1);
				if ( (LA308_0==ORDER_BY_ELEMENT) ) {
					alt308=1;
				}

				switch (alt308) {
				case 1 :
					// PLSQLPrinter.g:1431:74: elements+= order_by_elements
					{
					pushFollow(FOLLOW_order_by_elements_in_order_by_clause13964);
					elements=order_by_elements();
					state._fsp--;

					if (list_elements==null) list_elements=new ArrayList<Object>();
					list_elements.add(elements.getTemplate());
					}
					break;

				default :
					if ( cnt308 >= 1 ) break loop308;
					EarlyExitException eee = new EarlyExitException(308, input);
					throw eee;
				}
				cnt308++;
			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1432:5: -> order_by_clause(is_siblings=$SIBLINGS_VK != nullelements=$elements)
			{
				retval.st = templateLib.getInstanceOf("order_by_clause",new STAttrMap().put("is_siblings", SIBLINGS_VK246 != null).put("elements", list_elements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "order_by_clause"


	public static class order_by_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "order_by_elements"
	// PLSQLPrinter.g:1435:1: order_by_elements : ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? ) -> order_by_elements(expression=$expression.stis_asc=$SQL92_RESERVED_ASC != nullis_desc=$SQL92_RESERVED_DESC != nullis_nulls_first=$FIRST_VK != nullis_nulls_last=$LAST_VK != null);
	public final PLSQLPrinter.order_by_elements_return order_by_elements() throws RecognitionException {
		PLSQLPrinter.order_by_elements_return retval = new PLSQLPrinter.order_by_elements_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_ASC248=null;
		CommonTree SQL92_RESERVED_DESC249=null;
		CommonTree FIRST_VK250=null;
		CommonTree LAST_VK251=null;
		TreeRuleReturnScope expression247 =null;

		try {
			// PLSQLPrinter.g:1436:5: ( ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? ) -> order_by_elements(expression=$expression.stis_asc=$SQL92_RESERVED_ASC != nullis_desc=$SQL92_RESERVED_DESC != nullis_nulls_first=$FIRST_VK != nullis_nulls_last=$LAST_VK != null))
			// PLSQLPrinter.g:1436:10: ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? )
			{
			match(input,ORDER_BY_ELEMENT,FOLLOW_ORDER_BY_ELEMENT_in_order_by_elements14008); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_order_by_elements14010);
			expression247=expression();
			state._fsp--;

			// PLSQLPrinter.g:1436:40: ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )?
			int alt309=3;
			int LA309_0 = input.LA(1);
			if ( (LA309_0==SQL92_RESERVED_ASC) ) {
				alt309=1;
			}
			else if ( (LA309_0==SQL92_RESERVED_DESC) ) {
				alt309=2;
			}
			switch (alt309) {
				case 1 :
					// PLSQLPrinter.g:1436:41: SQL92_RESERVED_ASC
					{
					SQL92_RESERVED_ASC248=(CommonTree)match(input,SQL92_RESERVED_ASC,FOLLOW_SQL92_RESERVED_ASC_in_order_by_elements14013); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1436:60: SQL92_RESERVED_DESC
					{
					SQL92_RESERVED_DESC249=(CommonTree)match(input,SQL92_RESERVED_DESC,FOLLOW_SQL92_RESERVED_DESC_in_order_by_elements14015); 
					}
					break;

			}

			// PLSQLPrinter.g:1436:82: ( NULLS_VK ( FIRST_VK | LAST_VK ) )?
			int alt311=2;
			int LA311_0 = input.LA(1);
			if ( (LA311_0==NULLS_VK) ) {
				alt311=1;
			}
			switch (alt311) {
				case 1 :
					// PLSQLPrinter.g:1436:83: NULLS_VK ( FIRST_VK | LAST_VK )
					{
					match(input,NULLS_VK,FOLLOW_NULLS_VK_in_order_by_elements14020); 
					// PLSQLPrinter.g:1436:92: ( FIRST_VK | LAST_VK )
					int alt310=2;
					int LA310_0 = input.LA(1);
					if ( (LA310_0==FIRST_VK) ) {
						alt310=1;
					}
					else if ( (LA310_0==LAST_VK) ) {
						alt310=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 310, 0, input);
						throw nvae;
					}

					switch (alt310) {
						case 1 :
							// PLSQLPrinter.g:1436:93: FIRST_VK
							{
							FIRST_VK250=(CommonTree)match(input,FIRST_VK,FOLLOW_FIRST_VK_in_order_by_elements14023); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1436:102: LAST_VK
							{
							LAST_VK251=(CommonTree)match(input,LAST_VK,FOLLOW_LAST_VK_in_order_by_elements14025); 
							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1437:5: -> order_by_elements(expression=$expression.stis_asc=$SQL92_RESERVED_ASC != nullis_desc=$SQL92_RESERVED_DESC != nullis_nulls_first=$FIRST_VK != nullis_nulls_last=$LAST_VK != null)
			{
				retval.st = templateLib.getInstanceOf("order_by_elements",new STAttrMap().put("expression", (expression247!=null?((StringTemplate)expression247.getTemplate()):null)).put("is_asc", SQL92_RESERVED_ASC248 != null).put("is_desc", SQL92_RESERVED_DESC249 != null).put("is_nulls_first", FIRST_VK250 != null).put("is_nulls_last", LAST_VK251 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "order_by_elements"


	public static class for_update_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_update_clause"
	// PLSQLPrinter.g:1442:1: for_update_clause : ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? ) -> for_update_clause(for_update_of_part=$for_update_of_part.stfor_update_options=$for_update_options.st);
	public final PLSQLPrinter.for_update_clause_return for_update_clause() throws RecognitionException {
		PLSQLPrinter.for_update_clause_return retval = new PLSQLPrinter.for_update_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope for_update_of_part252 =null;
		TreeRuleReturnScope for_update_options253 =null;

		try {
			// PLSQLPrinter.g:1443:5: ( ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? ) -> for_update_clause(for_update_of_part=$for_update_of_part.stfor_update_options=$for_update_options.st))
			// PLSQLPrinter.g:1443:10: ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? )
			{
			match(input,SQL92_RESERVED_FOR,FOLLOW_SQL92_RESERVED_FOR_in_for_update_clause14106); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1443:31: ( for_update_of_part )?
				int alt312=2;
				int LA312_0 = input.LA(1);
				if ( (LA312_0==SQL92_RESERVED_OF) ) {
					alt312=1;
				}
				switch (alt312) {
					case 1 :
						// PLSQLPrinter.g:1443:31: for_update_of_part
						{
						pushFollow(FOLLOW_for_update_of_part_in_for_update_clause14108);
						for_update_of_part252=for_update_of_part();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1443:51: ( for_update_options )?
				int alt313=2;
				int LA313_0 = input.LA(1);
				if ( (LA313_0==PLSQL_RESERVED_NOWAIT||LA313_0==SKIP_VK||LA313_0==WAIT_VK) ) {
					alt313=1;
				}
				switch (alt313) {
					case 1 :
						// PLSQLPrinter.g:1443:51: for_update_options
						{
						pushFollow(FOLLOW_for_update_options_in_for_update_clause14111);
						for_update_options253=for_update_options();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1444:5: -> for_update_clause(for_update_of_part=$for_update_of_part.stfor_update_options=$for_update_options.st)
			{
				retval.st = templateLib.getInstanceOf("for_update_clause",new STAttrMap().put("for_update_of_part", (for_update_of_part252!=null?((StringTemplate)for_update_of_part252.getTemplate()):null)).put("for_update_options", (for_update_options253!=null?((StringTemplate)for_update_options253.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_update_clause"


	public static class for_update_of_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_update_of_part"
	// PLSQLPrinter.g:1447:1: for_update_of_part : ^( SQL92_RESERVED_OF (column_names+= column_name )+ ) -> for_update_of_part(column_names=$column_names);
	public final PLSQLPrinter.for_update_of_part_return for_update_of_part() throws RecognitionException {
		PLSQLPrinter.for_update_of_part_return retval = new PLSQLPrinter.for_update_of_part_return();
		retval.start = input.LT(1);

		List<Object> list_column_names=null;
		RuleReturnScope column_names = null;
		try {
			// PLSQLPrinter.g:1448:5: ( ^( SQL92_RESERVED_OF (column_names+= column_name )+ ) -> for_update_of_part(column_names=$column_names))
			// PLSQLPrinter.g:1448:10: ^( SQL92_RESERVED_OF (column_names+= column_name )+ )
			{
			match(input,SQL92_RESERVED_OF,FOLLOW_SQL92_RESERVED_OF_in_for_update_of_part14154); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1448:42: (column_names+= column_name )+
			int cnt314=0;
			loop314:
			while (true) {
				int alt314=2;
				int LA314_0 = input.LA(1);
				if ( (LA314_0==COLUMN_NAME) ) {
					alt314=1;
				}

				switch (alt314) {
				case 1 :
					// PLSQLPrinter.g:1448:42: column_names+= column_name
					{
					pushFollow(FOLLOW_column_name_in_for_update_of_part14158);
					column_names=column_name();
					state._fsp--;

					if (list_column_names==null) list_column_names=new ArrayList<Object>();
					list_column_names.add(column_names.getTemplate());
					}
					break;

				default :
					if ( cnt314 >= 1 ) break loop314;
					EarlyExitException eee = new EarlyExitException(314, input);
					throw eee;
				}
				cnt314++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1449:5: -> for_update_of_part(column_names=$column_names)
			{
				retval.st = templateLib.getInstanceOf("for_update_of_part",new STAttrMap().put("column_names", list_column_names));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_update_of_part"


	public static class for_update_options_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_update_options"
	// PLSQLPrinter.g:1452:1: for_update_options : ( SKIP_VK -> for_update_options_skip_locked(| PLSQL_RESERVED_NOWAIT -> for_update_options_nowait(| ^( WAIT_VK expression ) -> for_update_options_wait(expression=$expression.st));
	public final PLSQLPrinter.for_update_options_return for_update_options() throws RecognitionException {
		PLSQLPrinter.for_update_options_return retval = new PLSQLPrinter.for_update_options_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression254 =null;

		try {
			// PLSQLPrinter.g:1453:5: ( SKIP_VK -> for_update_options_skip_locked(| PLSQL_RESERVED_NOWAIT -> for_update_options_nowait(| ^( WAIT_VK expression ) -> for_update_options_wait(expression=$expression.st))
			int alt315=3;
			switch ( input.LA(1) ) {
			case SKIP_VK:
				{
				alt315=1;
				}
				break;
			case PLSQL_RESERVED_NOWAIT:
				{
				alt315=2;
				}
				break;
			case WAIT_VK:
				{
				alt315=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 315, 0, input);
				throw nvae;
			}
			switch (alt315) {
				case 1 :
					// PLSQLPrinter.g:1453:10: SKIP_VK
					{
					match(input,SKIP_VK,FOLLOW_SKIP_VK_in_for_update_options14195); 
					// TEMPLATE REWRITE
					// 1453:18: -> for_update_options_skip_locked(
					{
						retval.st = templateLib.getInstanceOf("for_update_options_skip_locked");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1454:10: PLSQL_RESERVED_NOWAIT
					{
					match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_for_update_options14212); 
					// TEMPLATE REWRITE
					// 1454:32: -> for_update_options_nowait(
					{
						retval.st = templateLib.getInstanceOf("for_update_options_nowait");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1455:10: ^( WAIT_VK expression )
					{
					match(input,WAIT_VK,FOLLOW_WAIT_VK_in_for_update_options14230); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_update_options14232);
					expression254=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1455:32: -> for_update_options_wait(expression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("for_update_options_wait",new STAttrMap().put("expression", (expression254!=null?((StringTemplate)expression254.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_update_options"


	public static class update_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "update_statement"
	// PLSQLPrinter.g:1460:1: update_statement : ^( SQL92_RESERVED_UPDATE general_table_ref ^( SET_VK (update_elements+= update_set_elements )+ ) ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> update_statement(general_table_ref=$general_table_ref.stupdate_set_elements=$update_elementswhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st);
	public final PLSQLPrinter.update_statement_return update_statement() throws RecognitionException {
		PLSQLPrinter.update_statement_return retval = new PLSQLPrinter.update_statement_return();
		retval.start = input.LT(1);

		List<Object> list_update_elements=null;
		TreeRuleReturnScope general_table_ref255 =null;
		TreeRuleReturnScope where_clause256 =null;
		TreeRuleReturnScope static_returning_clause257 =null;
		TreeRuleReturnScope error_logging_clause258 =null;
		RuleReturnScope update_elements = null;
		try {
			// PLSQLPrinter.g:1461:5: ( ^( SQL92_RESERVED_UPDATE general_table_ref ^( SET_VK (update_elements+= update_set_elements )+ ) ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> update_statement(general_table_ref=$general_table_ref.stupdate_set_elements=$update_elementswhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st))
			// PLSQLPrinter.g:1461:10: ^( SQL92_RESERVED_UPDATE general_table_ref ^( SET_VK (update_elements+= update_set_elements )+ ) ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
			{
			match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_update_statement14265); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_update_statement14267);
			general_table_ref255=general_table_ref();
			state._fsp--;

			match(input,SET_VK,FOLLOW_SET_VK_in_update_statement14282); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1462:37: (update_elements+= update_set_elements )+
			int cnt316=0;
			loop316:
			while (true) {
				int alt316=2;
				int LA316_0 = input.LA(1);
				if ( (LA316_0==ASSIGN||LA316_0==VALUE_VK) ) {
					alt316=1;
				}

				switch (alt316) {
				case 1 :
					// PLSQLPrinter.g:1462:37: update_elements+= update_set_elements
					{
					pushFollow(FOLLOW_update_set_elements_in_update_statement14286);
					update_elements=update_set_elements();
					state._fsp--;

					if (list_update_elements==null) list_update_elements=new ArrayList<Object>();
					list_update_elements.add(update_elements.getTemplate());
					}
					break;

				default :
					if ( cnt316 >= 1 ) break loop316;
					EarlyExitException eee = new EarlyExitException(316, input);
					throw eee;
				}
				cnt316++;
			}

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1463:13: ( where_clause )?
			int alt317=2;
			int LA317_0 = input.LA(1);
			if ( (LA317_0==SQL92_RESERVED_WHERE) ) {
				alt317=1;
			}
			switch (alt317) {
				case 1 :
					// PLSQLPrinter.g:1463:13: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_update_statement14302);
					where_clause256=where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1463:27: ( static_returning_clause )?
			int alt318=2;
			int LA318_0 = input.LA(1);
			if ( (LA318_0==STATIC_RETURNING) ) {
				alt318=1;
			}
			switch (alt318) {
				case 1 :
					// PLSQLPrinter.g:1463:27: static_returning_clause
					{
					pushFollow(FOLLOW_static_returning_clause_in_update_statement14305);
					static_returning_clause257=static_returning_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1463:52: ( error_logging_clause )?
			int alt319=2;
			int LA319_0 = input.LA(1);
			if ( (LA319_0==LOG_VK) ) {
				alt319=1;
			}
			switch (alt319) {
				case 1 :
					// PLSQLPrinter.g:1463:52: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_update_statement14308);
					error_logging_clause258=error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1465:5: -> update_statement(general_table_ref=$general_table_ref.stupdate_set_elements=$update_elementswhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st)
			{
				retval.st = templateLib.getInstanceOf("update_statement",new STAttrMap().put("general_table_ref", (general_table_ref255!=null?((StringTemplate)general_table_ref255.getTemplate()):null)).put("update_set_elements", list_update_elements).put("where_clause", (where_clause256!=null?((StringTemplate)where_clause256.getTemplate()):null)).put("static_returning_clause", (static_returning_clause257!=null?((StringTemplate)static_returning_clause257.getTemplate()):null)).put("error_logging_clause", (error_logging_clause258!=null?((StringTemplate)error_logging_clause258.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "update_statement"


	public static class update_set_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "update_set_elements"
	// PLSQLPrinter.g:1473:1: update_set_elements : ( ^( ASSIGN column_name expression ) -> update_set_element_column_expr(column_name=$column_name.stexpression=$expression.st)| ^( ASSIGN (names+= column_name )+ subquery ) -> update_set_element_columns_subquery(column_names=$namessubquery=$subquery.st)| ^( VALUE_VK ( char_set_name )? ID expression ) -> update_set_element_column_value(column_name=$ID.textexpression=$expression.st));
	public final PLSQLPrinter.update_set_elements_return update_set_elements() throws RecognitionException {
		PLSQLPrinter.update_set_elements_return retval = new PLSQLPrinter.update_set_elements_return();
		retval.start = input.LT(1);

		CommonTree ID262=null;
		List<Object> list_names=null;
		TreeRuleReturnScope column_name259 =null;
		TreeRuleReturnScope expression260 =null;
		TreeRuleReturnScope subquery261 =null;
		TreeRuleReturnScope expression263 =null;
		RuleReturnScope names = null;
		try {
			// PLSQLPrinter.g:1474:5: ( ^( ASSIGN column_name expression ) -> update_set_element_column_expr(column_name=$column_name.stexpression=$expression.st)| ^( ASSIGN (names+= column_name )+ subquery ) -> update_set_element_columns_subquery(column_names=$namessubquery=$subquery.st)| ^( VALUE_VK ( char_set_name )? ID expression ) -> update_set_element_column_value(column_name=$ID.textexpression=$expression.st))
			int alt322=3;
			alt322 = dfa322.predict(input);
			switch (alt322) {
				case 1 :
					// PLSQLPrinter.g:1474:10: ^( ASSIGN column_name expression )
					{
					match(input,ASSIGN,FOLLOW_ASSIGN_in_update_set_elements14414); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_column_name_in_update_set_elements14416);
					column_name259=column_name();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_update_set_elements14418);
					expression260=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1475:5: -> update_set_element_column_expr(column_name=$column_name.stexpression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("update_set_element_column_expr",new STAttrMap().put("column_name", (column_name259!=null?((StringTemplate)column_name259.getTemplate()):null)).put("expression", (expression260!=null?((StringTemplate)expression260.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1476:10: ^( ASSIGN (names+= column_name )+ subquery )
					{
					match(input,ASSIGN,FOLLOW_ASSIGN_in_update_set_elements14451); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1476:24: (names+= column_name )+
					int cnt320=0;
					loop320:
					while (true) {
						int alt320=2;
						int LA320_0 = input.LA(1);
						if ( (LA320_0==COLUMN_NAME) ) {
							alt320=1;
						}

						switch (alt320) {
						case 1 :
							// PLSQLPrinter.g:1476:24: names+= column_name
							{
							pushFollow(FOLLOW_column_name_in_update_set_elements14455);
							names=column_name();
							state._fsp--;

							if (list_names==null) list_names=new ArrayList<Object>();
							list_names.add(names.getTemplate());
							}
							break;

						default :
							if ( cnt320 >= 1 ) break loop320;
							EarlyExitException eee = new EarlyExitException(320, input);
							throw eee;
						}
						cnt320++;
					}

					pushFollow(FOLLOW_subquery_in_update_set_elements14458);
					subquery261=subquery();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1477:5: -> update_set_element_columns_subquery(column_names=$namessubquery=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("update_set_element_columns_subquery",new STAttrMap().put("column_names", list_names).put("subquery", (subquery261!=null?((StringTemplate)subquery261.getTemplate()):null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1478:10: ^( VALUE_VK ( char_set_name )? ID expression )
					{
					match(input,VALUE_VK,FOLLOW_VALUE_VK_in_update_set_elements14491); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1478:21: ( char_set_name )?
					int alt321=2;
					int LA321_0 = input.LA(1);
					if ( (LA321_0==CHAR_SET_NAME) ) {
						alt321=1;
					}
					switch (alt321) {
						case 1 :
							// PLSQLPrinter.g:1478:21: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_update_set_elements14493);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					ID262=(CommonTree)match(input,ID,FOLLOW_ID_in_update_set_elements14496); 
					pushFollow(FOLLOW_expression_in_update_set_elements14498);
					expression263=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1479:5: -> update_set_element_column_value(column_name=$ID.textexpression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("update_set_element_column_value",new STAttrMap().put("column_name", (ID262!=null?ID262.getText():null)).put("expression", (expression263!=null?((StringTemplate)expression263.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "update_set_elements"


	public static class delete_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "delete_statement"
	// PLSQLPrinter.g:1484:1: delete_statement : ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> delete_statement(general_table_ref=$general_table_ref.stwhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st);
	public final PLSQLPrinter.delete_statement_return delete_statement() throws RecognitionException {
		PLSQLPrinter.delete_statement_return retval = new PLSQLPrinter.delete_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope general_table_ref264 =null;
		TreeRuleReturnScope where_clause265 =null;
		TreeRuleReturnScope static_returning_clause266 =null;
		TreeRuleReturnScope error_logging_clause267 =null;

		try {
			// PLSQLPrinter.g:1485:5: ( ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> delete_statement(general_table_ref=$general_table_ref.stwhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st))
			// PLSQLPrinter.g:1485:10: ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
			{
			match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_delete_statement14542); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_delete_statement14544);
			general_table_ref264=general_table_ref();
			state._fsp--;

			// PLSQLPrinter.g:1486:13: ( where_clause )?
			int alt323=2;
			int LA323_0 = input.LA(1);
			if ( (LA323_0==SQL92_RESERVED_WHERE) ) {
				alt323=1;
			}
			switch (alt323) {
				case 1 :
					// PLSQLPrinter.g:1486:13: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_delete_statement14558);
					where_clause265=where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1486:27: ( static_returning_clause )?
			int alt324=2;
			int LA324_0 = input.LA(1);
			if ( (LA324_0==STATIC_RETURNING) ) {
				alt324=1;
			}
			switch (alt324) {
				case 1 :
					// PLSQLPrinter.g:1486:27: static_returning_clause
					{
					pushFollow(FOLLOW_static_returning_clause_in_delete_statement14561);
					static_returning_clause266=static_returning_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1486:52: ( error_logging_clause )?
			int alt325=2;
			int LA325_0 = input.LA(1);
			if ( (LA325_0==LOG_VK) ) {
				alt325=1;
			}
			switch (alt325) {
				case 1 :
					// PLSQLPrinter.g:1486:52: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_delete_statement14564);
					error_logging_clause267=error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1487:5: -> delete_statement(general_table_ref=$general_table_ref.stwhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st)
			{
				retval.st = templateLib.getInstanceOf("delete_statement",new STAttrMap().put("general_table_ref", (general_table_ref264!=null?((StringTemplate)general_table_ref264.getTemplate()):null)).put("where_clause", (where_clause265!=null?((StringTemplate)where_clause265.getTemplate()):null)).put("static_returning_clause", (static_returning_clause266!=null?((StringTemplate)static_returning_clause266.getTemplate()):null)).put("error_logging_clause", (error_logging_clause267!=null?((StringTemplate)error_logging_clause267.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "delete_statement"


	public static class insert_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "insert_statement"
	// PLSQLPrinter.g:1492:1: insert_statement : ^( SQL92_RESERVED_INSERT ( single_table_insert -> { $single_table_insert.st }| multi_table_insert -> { $multi_table_insert.st }) ) ;
	public final PLSQLPrinter.insert_statement_return insert_statement() throws RecognitionException {
		PLSQLPrinter.insert_statement_return retval = new PLSQLPrinter.insert_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope single_table_insert268 =null;
		TreeRuleReturnScope multi_table_insert269 =null;

		try {
			// PLSQLPrinter.g:1493:5: ( ^( SQL92_RESERVED_INSERT ( single_table_insert -> { $single_table_insert.st }| multi_table_insert -> { $multi_table_insert.st }) ) )
			// PLSQLPrinter.g:1493:10: ^( SQL92_RESERVED_INSERT ( single_table_insert -> { $single_table_insert.st }| multi_table_insert -> { $multi_table_insert.st }) )
			{
			match(input,SQL92_RESERVED_INSERT,FOLLOW_SQL92_RESERVED_INSERT_in_insert_statement14642); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1494:13: ( single_table_insert -> { $single_table_insert.st }| multi_table_insert -> { $multi_table_insert.st })
			int alt326=2;
			int LA326_0 = input.LA(1);
			if ( (LA326_0==SINGLE_TABLE_MODE) ) {
				alt326=1;
			}
			else if ( (LA326_0==MULTI_TABLE_MODE) ) {
				alt326=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 326, 0, input);
				throw nvae;
			}

			switch (alt326) {
				case 1 :
					// PLSQLPrinter.g:1495:15: single_table_insert
					{
					pushFollow(FOLLOW_single_table_insert_in_insert_statement14672);
					single_table_insert268=single_table_insert();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1495:35: -> { $single_table_insert.st }
					{
						retval.st =  (single_table_insert268!=null?((StringTemplate)single_table_insert268.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1496:20: multi_table_insert
					{
					pushFollow(FOLLOW_multi_table_insert_in_insert_statement14697);
					multi_table_insert269=multi_table_insert();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1496:39: -> { $multi_table_insert.st }
					{
						retval.st =  (multi_table_insert269!=null?((StringTemplate)multi_table_insert269.getTemplate()):null) ;
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_statement"


	public static class single_table_insert_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "single_table_insert"
	// PLSQLPrinter.g:1503:1: single_table_insert : ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? ) -> single_table_insert(insert_into_clause=$insert_into_clause.stvalues_clause=$values_clause.ststatic_returning_clause=$static_returning_clause.stselect_statement=$select_statement.sterror_logging_clause=$error_logging_clause.st);
	public final PLSQLPrinter.single_table_insert_return single_table_insert() throws RecognitionException {
		PLSQLPrinter.single_table_insert_return retval = new PLSQLPrinter.single_table_insert_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope insert_into_clause270 =null;
		TreeRuleReturnScope values_clause271 =null;
		TreeRuleReturnScope static_returning_clause272 =null;
		TreeRuleReturnScope select_statement273 =null;
		TreeRuleReturnScope error_logging_clause274 =null;

		try {
			// PLSQLPrinter.g:1504:5: ( ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? ) -> single_table_insert(insert_into_clause=$insert_into_clause.stvalues_clause=$values_clause.ststatic_returning_clause=$static_returning_clause.stselect_statement=$select_statement.sterror_logging_clause=$error_logging_clause.st))
			// PLSQLPrinter.g:1504:10: ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? )
			{
			match(input,SINGLE_TABLE_MODE,FOLLOW_SINGLE_TABLE_MODE_in_single_table_insert14750); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_insert_into_clause_in_single_table_insert14752);
			insert_into_clause270=insert_into_clause();
			state._fsp--;

			// PLSQLPrinter.g:1504:49: ( values_clause ( static_returning_clause )? | select_statement )
			int alt328=2;
			int LA328_0 = input.LA(1);
			if ( (LA328_0==SQL92_RESERVED_VALUES) ) {
				alt328=1;
			}
			else if ( (LA328_0==SELECT_STATEMENT) ) {
				alt328=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 328, 0, input);
				throw nvae;
			}

			switch (alt328) {
				case 1 :
					// PLSQLPrinter.g:1504:50: values_clause ( static_returning_clause )?
					{
					pushFollow(FOLLOW_values_clause_in_single_table_insert14755);
					values_clause271=values_clause();
					state._fsp--;

					// PLSQLPrinter.g:1504:64: ( static_returning_clause )?
					int alt327=2;
					int LA327_0 = input.LA(1);
					if ( (LA327_0==STATIC_RETURNING) ) {
						alt327=1;
					}
					switch (alt327) {
						case 1 :
							// PLSQLPrinter.g:1504:64: static_returning_clause
							{
							pushFollow(FOLLOW_static_returning_clause_in_single_table_insert14757);
							static_returning_clause272=static_returning_clause();
							state._fsp--;

							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1504:90: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_single_table_insert14761);
					select_statement273=select_statement();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1504:108: ( error_logging_clause )?
			int alt329=2;
			int LA329_0 = input.LA(1);
			if ( (LA329_0==LOG_VK) ) {
				alt329=1;
			}
			switch (alt329) {
				case 1 :
					// PLSQLPrinter.g:1504:108: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_single_table_insert14764);
					error_logging_clause274=error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1505:5: -> single_table_insert(insert_into_clause=$insert_into_clause.stvalues_clause=$values_clause.ststatic_returning_clause=$static_returning_clause.stselect_statement=$select_statement.sterror_logging_clause=$error_logging_clause.st)
			{
				retval.st = templateLib.getInstanceOf("single_table_insert",new STAttrMap().put("insert_into_clause", (insert_into_clause270!=null?((StringTemplate)insert_into_clause270.getTemplate()):null)).put("values_clause", (values_clause271!=null?((StringTemplate)values_clause271.getTemplate()):null)).put("static_returning_clause", (static_returning_clause272!=null?((StringTemplate)static_returning_clause272.getTemplate()):null)).put("select_statement", (select_statement273!=null?((StringTemplate)select_statement273.getTemplate()):null)).put("error_logging_clause", (error_logging_clause274!=null?((StringTemplate)error_logging_clause274.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "single_table_insert"


	public static class multi_table_insert_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "multi_table_insert"
	// PLSQLPrinter.g:1511:1: multi_table_insert : ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) ) -> template( \"not implemented: multi_table_insert\";
	public final PLSQLPrinter.multi_table_insert_return multi_table_insert() throws RecognitionException {
		PLSQLPrinter.multi_table_insert_return retval = new PLSQLPrinter.multi_table_insert_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1512:5: ( ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) ) -> template( \"not implemented: multi_table_insert\")
			// PLSQLPrinter.g:1512:10: ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) )
			{
			match(input,MULTI_TABLE_MODE,FOLLOW_MULTI_TABLE_MODE_in_multi_table_insert14859); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_select_statement_in_multi_table_insert14861);
			select_statement();
			state._fsp--;

			// PLSQLPrinter.g:1512:46: ( conditional_insert_clause | ( multi_table_element )+ )
			int alt331=2;
			int LA331_0 = input.LA(1);
			if ( (LA331_0==CONDITIONAL_INSERT) ) {
				alt331=1;
			}
			else if ( (LA331_0==TABLE_ELEMENT) ) {
				alt331=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 331, 0, input);
				throw nvae;
			}

			switch (alt331) {
				case 1 :
					// PLSQLPrinter.g:1512:47: conditional_insert_clause
					{
					pushFollow(FOLLOW_conditional_insert_clause_in_multi_table_insert14864);
					conditional_insert_clause();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1512:73: ( multi_table_element )+
					{
					// PLSQLPrinter.g:1512:73: ( multi_table_element )+
					int cnt330=0;
					loop330:
					while (true) {
						int alt330=2;
						int LA330_0 = input.LA(1);
						if ( (LA330_0==TABLE_ELEMENT) ) {
							alt330=1;
						}

						switch (alt330) {
						case 1 :
							// PLSQLPrinter.g:1512:73: multi_table_element
							{
							pushFollow(FOLLOW_multi_table_element_in_multi_table_insert14866);
							multi_table_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt330 >= 1 ) break loop330;
							EarlyExitException eee = new EarlyExitException(330, input);
							throw eee;
						}
						cnt330++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1513:5: -> template( \"not implemented: multi_table_insert\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: multi_table_insert");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "multi_table_insert"


	public static class multi_table_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "multi_table_element"
	// PLSQLPrinter.g:1516:1: multi_table_element : ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) -> template( \"not implemented: multi_table_element\";
	public final PLSQLPrinter.multi_table_element_return multi_table_element() throws RecognitionException {
		PLSQLPrinter.multi_table_element_return retval = new PLSQLPrinter.multi_table_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1517:5: ( ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) -> template( \"not implemented: multi_table_element\")
			// PLSQLPrinter.g:1517:10: ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? )
			{
			match(input,TABLE_ELEMENT,FOLLOW_TABLE_ELEMENT_in_multi_table_element14904); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_insert_into_clause_in_multi_table_element14906);
			insert_into_clause();
			state._fsp--;

			// PLSQLPrinter.g:1517:45: ( values_clause )?
			int alt332=2;
			int LA332_0 = input.LA(1);
			if ( (LA332_0==SQL92_RESERVED_VALUES) ) {
				alt332=1;
			}
			switch (alt332) {
				case 1 :
					// PLSQLPrinter.g:1517:45: values_clause
					{
					pushFollow(FOLLOW_values_clause_in_multi_table_element14908);
					values_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1517:60: ( error_logging_clause )?
			int alt333=2;
			int LA333_0 = input.LA(1);
			if ( (LA333_0==LOG_VK) ) {
				alt333=1;
			}
			switch (alt333) {
				case 1 :
					// PLSQLPrinter.g:1517:60: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_multi_table_element14911);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1518:5: -> template( \"not implemented: multi_table_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: multi_table_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "multi_table_element"


	public static class conditional_insert_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "conditional_insert_clause"
	// PLSQLPrinter.g:1521:1: conditional_insert_clause : ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) -> template( \"not implemented: conditional_insert_clause\";
	public final PLSQLPrinter.conditional_insert_clause_return conditional_insert_clause() throws RecognitionException {
		PLSQLPrinter.conditional_insert_clause_return retval = new PLSQLPrinter.conditional_insert_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1522:5: ( ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) -> template( \"not implemented: conditional_insert_clause\")
			// PLSQLPrinter.g:1522:10: ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? )
			{
			match(input,CONDITIONAL_INSERT,FOLLOW_CONDITIONAL_INSERT_in_conditional_insert_clause14948); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1522:31: ( SQL92_RESERVED_ALL | FIRST_VK )?
			int alt334=3;
			int LA334_0 = input.LA(1);
			if ( (LA334_0==SQL92_RESERVED_ALL) ) {
				alt334=1;
			}
			else if ( (LA334_0==FIRST_VK) ) {
				alt334=2;
			}
			switch (alt334) {
				case 1 :
					// PLSQLPrinter.g:1522:32: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_conditional_insert_clause14951); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1522:51: FIRST_VK
					{
					match(input,FIRST_VK,FOLLOW_FIRST_VK_in_conditional_insert_clause14953); 
					}
					break;

			}

			// PLSQLPrinter.g:1522:62: ( conditional_insert_when_part )+
			int cnt335=0;
			loop335:
			while (true) {
				int alt335=2;
				int LA335_0 = input.LA(1);
				if ( (LA335_0==SQL92_RESERVED_WHEN) ) {
					alt335=1;
				}

				switch (alt335) {
				case 1 :
					// PLSQLPrinter.g:1522:62: conditional_insert_when_part
					{
					pushFollow(FOLLOW_conditional_insert_when_part_in_conditional_insert_clause14957);
					conditional_insert_when_part();
					state._fsp--;

					}
					break;

				default :
					if ( cnt335 >= 1 ) break loop335;
					EarlyExitException eee = new EarlyExitException(335, input);
					throw eee;
				}
				cnt335++;
			}

			// PLSQLPrinter.g:1522:92: ( conditional_insert_else_part )?
			int alt336=2;
			int LA336_0 = input.LA(1);
			if ( (LA336_0==SQL92_RESERVED_ELSE) ) {
				alt336=1;
			}
			switch (alt336) {
				case 1 :
					// PLSQLPrinter.g:1522:92: conditional_insert_else_part
					{
					pushFollow(FOLLOW_conditional_insert_else_part_in_conditional_insert_clause14960);
					conditional_insert_else_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1523:5: -> template( \"not implemented: conditional_insert_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: conditional_insert_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "conditional_insert_clause"


	public static class conditional_insert_when_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "conditional_insert_when_part"
	// PLSQLPrinter.g:1526:1: conditional_insert_when_part : ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_when_part\";
	public final PLSQLPrinter.conditional_insert_when_part_return conditional_insert_when_part() throws RecognitionException {
		PLSQLPrinter.conditional_insert_when_part_return retval = new PLSQLPrinter.conditional_insert_when_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1527:5: ( ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_when_part\")
			// PLSQLPrinter.g:1527:10: ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_conditional_insert_when_part14998); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_conditional_insert_when_part15000);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1527:43: ( multi_table_element )+
			int cnt337=0;
			loop337:
			while (true) {
				int alt337=2;
				int LA337_0 = input.LA(1);
				if ( (LA337_0==TABLE_ELEMENT) ) {
					alt337=1;
				}

				switch (alt337) {
				case 1 :
					// PLSQLPrinter.g:1527:43: multi_table_element
					{
					pushFollow(FOLLOW_multi_table_element_in_conditional_insert_when_part15002);
					multi_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt337 >= 1 ) break loop337;
					EarlyExitException eee = new EarlyExitException(337, input);
					throw eee;
				}
				cnt337++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1528:5: -> template( \"not implemented: conditional_insert_when_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: conditional_insert_when_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "conditional_insert_when_part"


	public static class conditional_insert_else_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "conditional_insert_else_part"
	// PLSQLPrinter.g:1531:1: conditional_insert_else_part : ^( SQL92_RESERVED_ELSE ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_else_part\";
	public final PLSQLPrinter.conditional_insert_else_part_return conditional_insert_else_part() throws RecognitionException {
		PLSQLPrinter.conditional_insert_else_part_return retval = new PLSQLPrinter.conditional_insert_else_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1532:5: ( ^( SQL92_RESERVED_ELSE ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_else_part\")
			// PLSQLPrinter.g:1532:10: ^( SQL92_RESERVED_ELSE ( multi_table_element )+ )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_conditional_insert_else_part15039); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1532:32: ( multi_table_element )+
			int cnt338=0;
			loop338:
			while (true) {
				int alt338=2;
				int LA338_0 = input.LA(1);
				if ( (LA338_0==TABLE_ELEMENT) ) {
					alt338=1;
				}

				switch (alt338) {
				case 1 :
					// PLSQLPrinter.g:1532:32: multi_table_element
					{
					pushFollow(FOLLOW_multi_table_element_in_conditional_insert_else_part15041);
					multi_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt338 >= 1 ) break loop338;
					EarlyExitException eee = new EarlyExitException(338, input);
					throw eee;
				}
				cnt338++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1533:5: -> template( \"not implemented: conditional_insert_else_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: conditional_insert_else_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "conditional_insert_else_part"


	public static class insert_into_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "insert_into_clause"
	// PLSQLPrinter.g:1536:1: insert_into_clause : ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS (columns+= column_name )* ) ) -> insert_into_clause(general_table_ref=$general_table_ref.stcolumns=$columns);
	public final PLSQLPrinter.insert_into_clause_return insert_into_clause() throws RecognitionException {
		PLSQLPrinter.insert_into_clause_return retval = new PLSQLPrinter.insert_into_clause_return();
		retval.start = input.LT(1);

		List<Object> list_columns=null;
		TreeRuleReturnScope general_table_ref275 =null;
		RuleReturnScope columns = null;
		try {
			// PLSQLPrinter.g:1537:5: ( ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS (columns+= column_name )* ) ) -> insert_into_clause(general_table_ref=$general_table_ref.stcolumns=$columns))
			// PLSQLPrinter.g:1537:10: ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS (columns+= column_name )* ) )
			{
			match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_insert_into_clause15078); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_insert_into_clause15080);
			general_table_ref275=general_table_ref();
			state._fsp--;

			match(input,COLUMNS,FOLLOW_COLUMNS_in_insert_into_clause15083); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1537:67: (columns+= column_name )*
				loop339:
				while (true) {
					int alt339=2;
					int LA339_0 = input.LA(1);
					if ( (LA339_0==COLUMN_NAME) ) {
						alt339=1;
					}

					switch (alt339) {
					case 1 :
						// PLSQLPrinter.g:1537:67: columns+= column_name
						{
						pushFollow(FOLLOW_column_name_in_insert_into_clause15087);
						columns=column_name();
						state._fsp--;

						if (list_columns==null) list_columns=new ArrayList<Object>();
						list_columns.add(columns.getTemplate());
						}
						break;

					default :
						break loop339;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1538:5: -> insert_into_clause(general_table_ref=$general_table_ref.stcolumns=$columns)
			{
				retval.st = templateLib.getInstanceOf("insert_into_clause",new STAttrMap().put("general_table_ref", (general_table_ref275!=null?((StringTemplate)general_table_ref275.getTemplate()):null)).put("columns", list_columns));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_into_clause"


	public static class values_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "values_clause"
	// PLSQLPrinter.g:1541:1: values_clause : ^( SQL92_RESERVED_VALUES (r= expression_list |r= expression ) ) -> values_clause(expression_or_expression_list=$r.st);
	public final PLSQLPrinter.values_clause_return values_clause() throws RecognitionException {
		PLSQLPrinter.values_clause_return retval = new PLSQLPrinter.values_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope r =null;

		try {
			// PLSQLPrinter.g:1542:5: ( ^( SQL92_RESERVED_VALUES (r= expression_list |r= expression ) ) -> values_clause(expression_or_expression_list=$r.st))
			// PLSQLPrinter.g:1542:10: ^( SQL92_RESERVED_VALUES (r= expression_list |r= expression ) )
			{
			match(input,SQL92_RESERVED_VALUES,FOLLOW_SQL92_RESERVED_VALUES_in_values_clause15131); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1542:34: (r= expression_list |r= expression )
			int alt340=2;
			int LA340_0 = input.LA(1);
			if ( (LA340_0==EXPR_LIST) ) {
				alt340=1;
			}
			else if ( (LA340_0==EXPR||LA340_0==LOGIC_EXPR) ) {
				alt340=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 340, 0, input);
				throw nvae;
			}

			switch (alt340) {
				case 1 :
					// PLSQLPrinter.g:1542:35: r= expression_list
					{
					pushFollow(FOLLOW_expression_list_in_values_clause15136);
					r=expression_list();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1542:53: r= expression
					{
					pushFollow(FOLLOW_expression_in_values_clause15140);
					r=expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1543:5: -> values_clause(expression_or_expression_list=$r.st)
			{
				retval.st = templateLib.getInstanceOf("values_clause",new STAttrMap().put("expression_or_expression_list", (r!=null?((StringTemplate)r.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "values_clause"


	public static class merge_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_statement"
	// PLSQLPrinter.g:1547:1: merge_statement : ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) -> merge_statement(table_name=$tableview_name.sttable_alias=$alias.stselected_tableview=$selected_tableview.stcondition=$expression.stmerge_update_clause=$merge_update_clause.stmerge_insert_clause=$merge_insert_clause.sterror_logging_clause=$error_logging_clause.st);
	public final PLSQLPrinter.merge_statement_return merge_statement() throws RecognitionException {
		PLSQLPrinter.merge_statement_return retval = new PLSQLPrinter.merge_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope tableview_name276 =null;
		TreeRuleReturnScope alias277 =null;
		TreeRuleReturnScope selected_tableview278 =null;
		TreeRuleReturnScope expression279 =null;
		TreeRuleReturnScope merge_update_clause280 =null;
		TreeRuleReturnScope merge_insert_clause281 =null;
		TreeRuleReturnScope error_logging_clause282 =null;

		try {
			// PLSQLPrinter.g:1548:5: ( ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) -> merge_statement(table_name=$tableview_name.sttable_alias=$alias.stselected_tableview=$selected_tableview.stcondition=$expression.stmerge_update_clause=$merge_update_clause.stmerge_insert_clause=$merge_insert_clause.sterror_logging_clause=$error_logging_clause.st))
			// PLSQLPrinter.g:1548:10: ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? )
			{
			match(input,MERGE_VK,FOLLOW_MERGE_VK_in_merge_statement15179); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1548:21: ( alias )?
			int alt341=2;
			int LA341_0 = input.LA(1);
			if ( (LA341_0==COLUMN_ALIAS||LA341_0==TABLE_ALIAS) ) {
				alt341=1;
			}
			switch (alt341) {
				case 1 :
					// PLSQLPrinter.g:1548:21: alias
					{
					pushFollow(FOLLOW_alias_in_merge_statement15181);
					alias277=alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_tableview_name_in_merge_statement15184);
			tableview_name276=tableview_name();
			state._fsp--;

			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_merge_statement15200); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_selected_tableview_in_merge_statement15202);
			selected_tableview278=selected_tableview();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_merge_statement15204);
			expression279=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1550:14: ( merge_update_clause )?
			int alt342=2;
			int LA342_0 = input.LA(1);
			if ( (LA342_0==MERGE_UPDATE) ) {
				alt342=1;
			}
			switch (alt342) {
				case 1 :
					// PLSQLPrinter.g:1550:14: merge_update_clause
					{
					pushFollow(FOLLOW_merge_update_clause_in_merge_statement15220);
					merge_update_clause280=merge_update_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1550:35: ( merge_insert_clause )?
			int alt343=2;
			int LA343_0 = input.LA(1);
			if ( (LA343_0==MERGE_INSERT) ) {
				alt343=1;
			}
			switch (alt343) {
				case 1 :
					// PLSQLPrinter.g:1550:35: merge_insert_clause
					{
					pushFollow(FOLLOW_merge_insert_clause_in_merge_statement15223);
					merge_insert_clause281=merge_insert_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1550:56: ( error_logging_clause )?
			int alt344=2;
			int LA344_0 = input.LA(1);
			if ( (LA344_0==LOG_VK) ) {
				alt344=1;
			}
			switch (alt344) {
				case 1 :
					// PLSQLPrinter.g:1550:56: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_merge_statement15226);
					error_logging_clause282=error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1551:5: -> merge_statement(table_name=$tableview_name.sttable_alias=$alias.stselected_tableview=$selected_tableview.stcondition=$expression.stmerge_update_clause=$merge_update_clause.stmerge_insert_clause=$merge_insert_clause.sterror_logging_clause=$error_logging_clause.st)
			{
				retval.st = templateLib.getInstanceOf("merge_statement",new STAttrMap().put("table_name", (tableview_name276!=null?((StringTemplate)tableview_name276.getTemplate()):null)).put("table_alias", (alias277!=null?((StringTemplate)alias277.getTemplate()):null)).put("selected_tableview", (selected_tableview278!=null?((StringTemplate)selected_tableview278.getTemplate()):null)).put("condition", (expression279!=null?((StringTemplate)expression279.getTemplate()):null)).put("merge_update_clause", (merge_update_clause280!=null?((StringTemplate)merge_update_clause280.getTemplate()):null)).put("merge_insert_clause", (merge_insert_clause281!=null?((StringTemplate)merge_insert_clause281.getTemplate()):null)).put("error_logging_clause", (error_logging_clause282!=null?((StringTemplate)error_logging_clause282.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_statement"


	public static class merge_update_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_update_clause"
	// PLSQLPrinter.g:1559:1: merge_update_clause : ^( MERGE_UPDATE (merge_elements+= merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) -> merge_update_clause(merge_elements=$merge_elementswhere_clause=$where_clause.stmerge_update_delete_part=$merge_update_delete_part.st);
	public final PLSQLPrinter.merge_update_clause_return merge_update_clause() throws RecognitionException {
		PLSQLPrinter.merge_update_clause_return retval = new PLSQLPrinter.merge_update_clause_return();
		retval.start = input.LT(1);

		List<Object> list_merge_elements=null;
		TreeRuleReturnScope where_clause283 =null;
		TreeRuleReturnScope merge_update_delete_part284 =null;
		RuleReturnScope merge_elements = null;
		try {
			// PLSQLPrinter.g:1560:5: ( ^( MERGE_UPDATE (merge_elements+= merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) -> merge_update_clause(merge_elements=$merge_elementswhere_clause=$where_clause.stmerge_update_delete_part=$merge_update_delete_part.st))
			// PLSQLPrinter.g:1560:10: ^( MERGE_UPDATE (merge_elements+= merge_element )+ ( where_clause )? ( merge_update_delete_part )? )
			{
			match(input,MERGE_UPDATE,FOLLOW_MERGE_UPDATE_in_merge_update_clause15327); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1560:39: (merge_elements+= merge_element )+
			int cnt345=0;
			loop345:
			while (true) {
				int alt345=2;
				int LA345_0 = input.LA(1);
				if ( (LA345_0==ASSIGN) ) {
					alt345=1;
				}

				switch (alt345) {
				case 1 :
					// PLSQLPrinter.g:1560:39: merge_elements+= merge_element
					{
					pushFollow(FOLLOW_merge_element_in_merge_update_clause15331);
					merge_elements=merge_element();
					state._fsp--;

					if (list_merge_elements==null) list_merge_elements=new ArrayList<Object>();
					list_merge_elements.add(merge_elements.getTemplate());
					}
					break;

				default :
					if ( cnt345 >= 1 ) break loop345;
					EarlyExitException eee = new EarlyExitException(345, input);
					throw eee;
				}
				cnt345++;
			}

			// PLSQLPrinter.g:1560:56: ( where_clause )?
			int alt346=2;
			int LA346_0 = input.LA(1);
			if ( (LA346_0==SQL92_RESERVED_WHERE) ) {
				alt346=1;
			}
			switch (alt346) {
				case 1 :
					// PLSQLPrinter.g:1560:56: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_merge_update_clause15334);
					where_clause283=where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1560:70: ( merge_update_delete_part )?
			int alt347=2;
			int LA347_0 = input.LA(1);
			if ( (LA347_0==SQL92_RESERVED_DELETE) ) {
				alt347=1;
			}
			switch (alt347) {
				case 1 :
					// PLSQLPrinter.g:1560:70: merge_update_delete_part
					{
					pushFollow(FOLLOW_merge_update_delete_part_in_merge_update_clause15337);
					merge_update_delete_part284=merge_update_delete_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1561:5: -> merge_update_clause(merge_elements=$merge_elementswhere_clause=$where_clause.stmerge_update_delete_part=$merge_update_delete_part.st)
			{
				retval.st = templateLib.getInstanceOf("merge_update_clause",new STAttrMap().put("merge_elements", list_merge_elements).put("where_clause", (where_clause283!=null?((StringTemplate)where_clause283.getTemplate()):null)).put("merge_update_delete_part", (merge_update_delete_part284!=null?((StringTemplate)merge_update_delete_part284.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_update_clause"


	public static class merge_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_element"
	// PLSQLPrinter.g:1566:1: merge_element : ^( ASSIGN column_name expression ) -> merge_element(column_name=$column_name.stexpression=$expression.st);
	public final PLSQLPrinter.merge_element_return merge_element() throws RecognitionException {
		PLSQLPrinter.merge_element_return retval = new PLSQLPrinter.merge_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope column_name285 =null;
		TreeRuleReturnScope expression286 =null;

		try {
			// PLSQLPrinter.g:1567:5: ( ^( ASSIGN column_name expression ) -> merge_element(column_name=$column_name.stexpression=$expression.st))
			// PLSQLPrinter.g:1567:10: ^( ASSIGN column_name expression )
			{
			match(input,ASSIGN,FOLLOW_ASSIGN_in_merge_element15406); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_column_name_in_merge_element15408);
			column_name285=column_name();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_merge_element15410);
			expression286=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1568:5: -> merge_element(column_name=$column_name.stexpression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("merge_element",new STAttrMap().put("column_name", (column_name285!=null?((StringTemplate)column_name285.getTemplate()):null)).put("expression", (expression286!=null?((StringTemplate)expression286.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_element"


	public static class merge_update_delete_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_update_delete_part"
	// PLSQLPrinter.g:1571:1: merge_update_delete_part : ^( SQL92_RESERVED_DELETE where_clause ) -> merge_update_delete_part(where_clause=$where_clause.st);
	public final PLSQLPrinter.merge_update_delete_part_return merge_update_delete_part() throws RecognitionException {
		PLSQLPrinter.merge_update_delete_part_return retval = new PLSQLPrinter.merge_update_delete_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope where_clause287 =null;

		try {
			// PLSQLPrinter.g:1572:5: ( ^( SQL92_RESERVED_DELETE where_clause ) -> merge_update_delete_part(where_clause=$where_clause.st))
			// PLSQLPrinter.g:1572:10: ^( SQL92_RESERVED_DELETE where_clause )
			{
			match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_merge_update_delete_part15452); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_where_clause_in_merge_update_delete_part15454);
			where_clause287=where_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1573:5: -> merge_update_delete_part(where_clause=$where_clause.st)
			{
				retval.st = templateLib.getInstanceOf("merge_update_delete_part",new STAttrMap().put("where_clause", (where_clause287!=null?((StringTemplate)where_clause287.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_update_delete_part"


	public static class merge_insert_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_insert_clause"
	// PLSQLPrinter.g:1576:1: merge_insert_clause : ^( MERGE_INSERT ^( COLUMNS (columns+= column_name )* ) expression_list ( where_clause )? ) -> merge_insert_clause(columns=$columnsexpression_list=$expression_list.stwhere_clause=$where_clause.st);
	public final PLSQLPrinter.merge_insert_clause_return merge_insert_clause() throws RecognitionException {
		PLSQLPrinter.merge_insert_clause_return retval = new PLSQLPrinter.merge_insert_clause_return();
		retval.start = input.LT(1);

		List<Object> list_columns=null;
		TreeRuleReturnScope expression_list288 =null;
		TreeRuleReturnScope where_clause289 =null;
		RuleReturnScope columns = null;
		try {
			// PLSQLPrinter.g:1577:5: ( ^( MERGE_INSERT ^( COLUMNS (columns+= column_name )* ) expression_list ( where_clause )? ) -> merge_insert_clause(columns=$columnsexpression_list=$expression_list.stwhere_clause=$where_clause.st))
			// PLSQLPrinter.g:1577:10: ^( MERGE_INSERT ^( COLUMNS (columns+= column_name )* ) expression_list ( where_clause )? )
			{
			match(input,MERGE_INSERT,FOLLOW_MERGE_INSERT_in_merge_insert_clause15491); 
			match(input, Token.DOWN, null); 
			match(input,COLUMNS,FOLLOW_COLUMNS_in_merge_insert_clause15494); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1577:42: (columns+= column_name )*
				loop348:
				while (true) {
					int alt348=2;
					int LA348_0 = input.LA(1);
					if ( (LA348_0==COLUMN_NAME) ) {
						alt348=1;
					}

					switch (alt348) {
					case 1 :
						// PLSQLPrinter.g:1577:42: columns+= column_name
						{
						pushFollow(FOLLOW_column_name_in_merge_insert_clause15498);
						columns=column_name();
						state._fsp--;

						if (list_columns==null) list_columns=new ArrayList<Object>();
						list_columns.add(columns.getTemplate());
						}
						break;

					default :
						break loop348;
					}
				}

				match(input, Token.UP, null); 
			}

			pushFollow(FOLLOW_expression_list_in_merge_insert_clause15502);
			expression_list288=expression_list();
			state._fsp--;

			// PLSQLPrinter.g:1577:74: ( where_clause )?
			int alt349=2;
			int LA349_0 = input.LA(1);
			if ( (LA349_0==SQL92_RESERVED_WHERE) ) {
				alt349=1;
			}
			switch (alt349) {
				case 1 :
					// PLSQLPrinter.g:1577:74: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_merge_insert_clause15504);
					where_clause289=where_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1578:5: -> merge_insert_clause(columns=$columnsexpression_list=$expression_list.stwhere_clause=$where_clause.st)
			{
				retval.st = templateLib.getInstanceOf("merge_insert_clause",new STAttrMap().put("columns", list_columns).put("expression_list", (expression_list288!=null?((StringTemplate)expression_list288.getTemplate()):null)).put("where_clause", (where_clause289!=null?((StringTemplate)where_clause289.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_insert_clause"


	public static class selected_tableview_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "selected_tableview"
	// PLSQLPrinter.g:1581:1: selected_tableview : ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name -> selected_tableview_table(name=$tableview_name.stalias=$alias.st)| select_statement -> selected_tableview_select_statement(select_statement=$select_statement.stalias=$alias.st)) ) ;
	public final PLSQLPrinter.selected_tableview_return selected_tableview() throws RecognitionException {
		PLSQLPrinter.selected_tableview_return retval = new PLSQLPrinter.selected_tableview_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope tableview_name290 =null;
		TreeRuleReturnScope alias291 =null;
		TreeRuleReturnScope select_statement292 =null;

		try {
			// PLSQLPrinter.g:1582:5: ( ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name -> selected_tableview_table(name=$tableview_name.stalias=$alias.st)| select_statement -> selected_tableview_select_statement(select_statement=$select_statement.stalias=$alias.st)) ) )
			// PLSQLPrinter.g:1582:10: ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name -> selected_tableview_table(name=$tableview_name.stalias=$alias.st)| select_statement -> selected_tableview_select_statement(select_statement=$select_statement.stalias=$alias.st)) )
			{
			match(input,SELECTED_TABLEVIEW,FOLLOW_SELECTED_TABLEVIEW_in_selected_tableview15553); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1583:13: ( alias )?
			int alt350=2;
			int LA350_0 = input.LA(1);
			if ( (LA350_0==COLUMN_ALIAS||LA350_0==TABLE_ALIAS) ) {
				alt350=1;
			}
			switch (alt350) {
				case 1 :
					// PLSQLPrinter.g:1583:13: alias
					{
					pushFollow(FOLLOW_alias_in_selected_tableview15567);
					alias291=alias();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1584:13: ( tableview_name -> selected_tableview_table(name=$tableview_name.stalias=$alias.st)| select_statement -> selected_tableview_select_statement(select_statement=$select_statement.stalias=$alias.st))
			int alt351=2;
			int LA351_0 = input.LA(1);
			if ( (LA351_0==TABLEVIEW_NAME) ) {
				alt351=1;
			}
			else if ( (LA351_0==SELECT_STATEMENT) ) {
				alt351=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 351, 0, input);
				throw nvae;
			}

			switch (alt351) {
				case 1 :
					// PLSQLPrinter.g:1585:15: tableview_name
					{
					pushFollow(FOLLOW_tableview_name_in_selected_tableview15598);
					tableview_name290=tableview_name();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1586:17: -> selected_tableview_table(name=$tableview_name.stalias=$alias.st)
					{
						retval.st = templateLib.getInstanceOf("selected_tableview_table",new STAttrMap().put("name", (tableview_name290!=null?((StringTemplate)tableview_name290.getTemplate()):null)).put("alias", (alias291!=null?((StringTemplate)alias291.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1587:17: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_selected_tableview15646);
					select_statement292=select_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1588:17: -> selected_tableview_select_statement(select_statement=$select_statement.stalias=$alias.st)
					{
						retval.st = templateLib.getInstanceOf("selected_tableview_select_statement",new STAttrMap().put("select_statement", (select_statement292!=null?((StringTemplate)select_statement292.getTemplate()):null)).put("alias", (alias291!=null?((StringTemplate)alias291.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selected_tableview"


	public static class lock_table_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "lock_table_statement"
	// PLSQLPrinter.g:1595:1: lock_table_statement : ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) -> template( \"not implemented: lock_table_statement\";
	public final PLSQLPrinter.lock_table_statement_return lock_table_statement() throws RecognitionException {
		PLSQLPrinter.lock_table_statement_return retval = new PLSQLPrinter.lock_table_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1596:5: ( ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) -> template( \"not implemented: lock_table_statement\")
			// PLSQLPrinter.g:1596:10: ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? )
			{
			match(input,PLSQL_RESERVED_LOCK,FOLLOW_PLSQL_RESERVED_LOCK_in_lock_table_statement15725); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1596:32: ( lock_table_element )+
			int cnt352=0;
			loop352:
			while (true) {
				int alt352=2;
				int LA352_0 = input.LA(1);
				if ( (LA352_0==LOCK_TABLE_ELEMENT) ) {
					alt352=1;
				}

				switch (alt352) {
				case 1 :
					// PLSQLPrinter.g:1596:32: lock_table_element
					{
					pushFollow(FOLLOW_lock_table_element_in_lock_table_statement15727);
					lock_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt352 >= 1 ) break loop352;
					EarlyExitException eee = new EarlyExitException(352, input);
					throw eee;
				}
				cnt352++;
			}

			pushFollow(FOLLOW_lock_mode_in_lock_table_statement15730);
			lock_mode();
			state._fsp--;

			// PLSQLPrinter.g:1596:62: ( wait_nowait_part )?
			int alt353=2;
			int LA353_0 = input.LA(1);
			if ( (LA353_0==PLSQL_RESERVED_NOWAIT||LA353_0==WAIT_VK) ) {
				alt353=1;
			}
			switch (alt353) {
				case 1 :
					// PLSQLPrinter.g:1596:62: wait_nowait_part
					{
					pushFollow(FOLLOW_wait_nowait_part_in_lock_table_statement15732);
					wait_nowait_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1597:5: -> template( \"not implemented: lock_table_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: lock_table_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_table_statement"


	public static class wait_nowait_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "wait_nowait_part"
	// PLSQLPrinter.g:1600:1: wait_nowait_part : ( ^( WAIT_VK expression ) -> template( \"not implemented: wait_nowait_part\"| PLSQL_RESERVED_NOWAIT -> template( \"not implemented: wait_nowait_part\");
	public final PLSQLPrinter.wait_nowait_part_return wait_nowait_part() throws RecognitionException {
		PLSQLPrinter.wait_nowait_part_return retval = new PLSQLPrinter.wait_nowait_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1601:5: ( ^( WAIT_VK expression ) -> template( \"not implemented: wait_nowait_part\"| PLSQL_RESERVED_NOWAIT -> template( \"not implemented: wait_nowait_part\")
			int alt354=2;
			int LA354_0 = input.LA(1);
			if ( (LA354_0==WAIT_VK) ) {
				alt354=1;
			}
			else if ( (LA354_0==PLSQL_RESERVED_NOWAIT) ) {
				alt354=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 354, 0, input);
				throw nvae;
			}

			switch (alt354) {
				case 1 :
					// PLSQLPrinter.g:1601:10: ^( WAIT_VK expression )
					{
					match(input,WAIT_VK,FOLLOW_WAIT_VK_in_wait_nowait_part15769); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_wait_nowait_part15771);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1602:5: -> template( \"not implemented: wait_nowait_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: wait_nowait_part");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1603:10: PLSQL_RESERVED_NOWAIT
					{
					match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_wait_nowait_part15797); 
					// TEMPLATE REWRITE
					// 1604:5: -> template( \"not implemented: wait_nowait_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: wait_nowait_part");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "wait_nowait_part"


	public static class lock_table_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "lock_table_element"
	// PLSQLPrinter.g:1609:1: lock_table_element : ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) -> template( \"not implemented: lock_table_element\";
	public final PLSQLPrinter.lock_table_element_return lock_table_element() throws RecognitionException {
		PLSQLPrinter.lock_table_element_return retval = new PLSQLPrinter.lock_table_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1610:5: ( ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) -> template( \"not implemented: lock_table_element\")
			// PLSQLPrinter.g:1610:10: ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? )
			{
			match(input,LOCK_TABLE_ELEMENT,FOLLOW_LOCK_TABLE_ELEMENT_in_lock_table_element15834); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_lock_table_element15836);
			tableview_name();
			state._fsp--;

			// PLSQLPrinter.g:1610:46: ( partition_extension_clause )?
			int alt355=2;
			int LA355_0 = input.LA(1);
			if ( (LA355_0==PARTITION_VK||LA355_0==SUBPARTITION_VK) ) {
				alt355=1;
			}
			switch (alt355) {
				case 1 :
					// PLSQLPrinter.g:1610:46: partition_extension_clause
					{
					pushFollow(FOLLOW_partition_extension_clause_in_lock_table_element15838);
					partition_extension_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1611:5: -> template( \"not implemented: lock_table_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: lock_table_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_table_element"


	public static class lock_mode_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "lock_mode"
	// PLSQLPrinter.g:1614:1: lock_mode : ( ROW_VK PLSQL_RESERVED_SHARE -> template( \"not implemented: lock_mode\"| ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )? -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\");
	public final PLSQLPrinter.lock_mode_return lock_mode() throws RecognitionException {
		PLSQLPrinter.lock_mode_return retval = new PLSQLPrinter.lock_mode_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1615:5: ( ROW_VK PLSQL_RESERVED_SHARE -> template( \"not implemented: lock_mode\"| ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )? -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\")
			int alt357=5;
			switch ( input.LA(1) ) {
			case ROW_VK:
				{
				int LA357_1 = input.LA(2);
				if ( (LA357_1==PLSQL_RESERVED_SHARE) ) {
					alt357=1;
				}
				else if ( (LA357_1==PLSQL_RESERVED_EXCLUSIVE) ) {
					alt357=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 357, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PLSQL_RESERVED_SHARE:
				{
				int LA357_2 = input.LA(2);
				if ( (LA357_2==ROW_VK) ) {
					alt357=4;
				}
				else if ( (LA357_2==UP||LA357_2==PLSQL_RESERVED_NOWAIT||LA357_2==SQL92_RESERVED_UPDATE||LA357_2==WAIT_VK) ) {
					alt357=3;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 357, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PLSQL_RESERVED_EXCLUSIVE:
				{
				alt357=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 357, 0, input);
				throw nvae;
			}
			switch (alt357) {
				case 1 :
					// PLSQLPrinter.g:1615:10: ROW_VK PLSQL_RESERVED_SHARE
					{
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode15874); 
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode15876); 
					// TEMPLATE REWRITE
					// 1616:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1617:10: ROW_VK PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode15901); 
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode15903); 
					// TEMPLATE REWRITE
					// 1618:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1619:10: PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )?
					{
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode15928); 
					// PLSQLPrinter.g:1619:31: ( SQL92_RESERVED_UPDATE )?
					int alt356=2;
					int LA356_0 = input.LA(1);
					if ( (LA356_0==SQL92_RESERVED_UPDATE) ) {
						alt356=1;
					}
					switch (alt356) {
						case 1 :
							// PLSQLPrinter.g:1619:31: SQL92_RESERVED_UPDATE
							{
							match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_lock_mode15930); 
							}
							break;

					}

					// TEMPLATE REWRITE
					// 1620:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1621:10: PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode15956); 
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode15958); 
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode15960); 
					// TEMPLATE REWRITE
					// 1622:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1623:10: PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode15985); 
					// TEMPLATE REWRITE
					// 1624:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_mode"


	public static class general_table_ref_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_table_ref"
	// PLSQLPrinter.g:1630:1: general_table_ref : ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? ) -> general_table_ref(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.sttable_alias=$alias.st);
	public final PLSQLPrinter.general_table_ref_return general_table_ref() throws RecognitionException {
		PLSQLPrinter.general_table_ref_return retval = new PLSQLPrinter.general_table_ref_return();
		retval.start = input.LT(1);

		CommonTree ONLY_VK293=null;
		TreeRuleReturnScope dml_table_expression_clause294 =null;
		TreeRuleReturnScope alias295 =null;

		try {
			// PLSQLPrinter.g:1631:5: ( ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? ) -> general_table_ref(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.sttable_alias=$alias.st))
			// PLSQLPrinter.g:1631:10: ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? )
			{
			match(input,TABLE_REF,FOLLOW_TABLE_REF_in_general_table_ref16023); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1631:22: ( alias )?
			int alt358=2;
			int LA358_0 = input.LA(1);
			if ( (LA358_0==COLUMN_ALIAS||LA358_0==TABLE_ALIAS) ) {
				alt358=1;
			}
			switch (alt358) {
				case 1 :
					// PLSQLPrinter.g:1631:22: alias
					{
					pushFollow(FOLLOW_alias_in_general_table_ref16025);
					alias295=alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_table_expression_clause_in_general_table_ref16028);
			dml_table_expression_clause294=dml_table_expression_clause();
			state._fsp--;

			// PLSQLPrinter.g:1631:57: ( ONLY_VK )?
			int alt359=2;
			int LA359_0 = input.LA(1);
			if ( (LA359_0==ONLY_VK) ) {
				alt359=1;
			}
			switch (alt359) {
				case 1 :
					// PLSQLPrinter.g:1631:57: ONLY_VK
					{
					ONLY_VK293=(CommonTree)match(input,ONLY_VK,FOLLOW_ONLY_VK_in_general_table_ref16030); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1632:5: -> general_table_ref(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.sttable_alias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("general_table_ref",new STAttrMap().put("is_only", ONLY_VK293 != null).put("dml_table_expression_clause", (dml_table_expression_clause294!=null?((StringTemplate)dml_table_expression_clause294.getTemplate()):null)).put("table_alias", (alias295!=null?((StringTemplate)alias295.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_table_ref"


	public static class static_returning_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "static_returning_clause"
	// PLSQLPrinter.g:1638:1: static_returning_clause : ^( STATIC_RETURNING (expressions+= expression )+ into_clause ) -> static_returning_clause(expressions=$expressionsinto_clause=$into_clause.st);
	public final PLSQLPrinter.static_returning_clause_return static_returning_clause() throws RecognitionException {
		PLSQLPrinter.static_returning_clause_return retval = new PLSQLPrinter.static_returning_clause_return();
		retval.start = input.LT(1);

		List<Object> list_expressions=null;
		TreeRuleReturnScope into_clause296 =null;
		RuleReturnScope expressions = null;
		try {
			// PLSQLPrinter.g:1639:5: ( ^( STATIC_RETURNING (expressions+= expression )+ into_clause ) -> static_returning_clause(expressions=$expressionsinto_clause=$into_clause.st))
			// PLSQLPrinter.g:1639:10: ^( STATIC_RETURNING (expressions+= expression )+ into_clause )
			{
			match(input,STATIC_RETURNING,FOLLOW_STATIC_RETURNING_in_static_returning_clause16115); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1639:40: (expressions+= expression )+
			int cnt360=0;
			loop360:
			while (true) {
				int alt360=2;
				int LA360_0 = input.LA(1);
				if ( (LA360_0==EXPR||LA360_0==LOGIC_EXPR) ) {
					alt360=1;
				}

				switch (alt360) {
				case 1 :
					// PLSQLPrinter.g:1639:40: expressions+= expression
					{
					pushFollow(FOLLOW_expression_in_static_returning_clause16119);
					expressions=expression();
					state._fsp--;

					if (list_expressions==null) list_expressions=new ArrayList<Object>();
					list_expressions.add(expressions.getTemplate());
					}
					break;

				default :
					if ( cnt360 >= 1 ) break loop360;
					EarlyExitException eee = new EarlyExitException(360, input);
					throw eee;
				}
				cnt360++;
			}

			pushFollow(FOLLOW_into_clause_in_static_returning_clause16122);
			into_clause296=into_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1640:5: -> static_returning_clause(expressions=$expressionsinto_clause=$into_clause.st)
			{
				retval.st = templateLib.getInstanceOf("static_returning_clause",new STAttrMap().put("expressions", list_expressions).put("into_clause", (into_clause296!=null?((StringTemplate)into_clause296.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "static_returning_clause"


	public static class error_logging_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "error_logging_clause"
	// PLSQLPrinter.g:1643:1: error_logging_clause : ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? ) -> template( \"not implemented: error_logging_clause\";
	public final PLSQLPrinter.error_logging_clause_return error_logging_clause() throws RecognitionException {
		PLSQLPrinter.error_logging_clause_return retval = new PLSQLPrinter.error_logging_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1644:5: ( ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? ) -> template( \"not implemented: error_logging_clause\")
			// PLSQLPrinter.g:1644:10: ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? )
			{
			match(input,LOG_VK,FOLLOW_LOG_VK_in_error_logging_clause16164); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1644:19: ( error_logging_into_part )?
				int alt361=2;
				int LA361_0 = input.LA(1);
				if ( (LA361_0==SQL92_RESERVED_INTO) ) {
					alt361=1;
				}
				switch (alt361) {
					case 1 :
						// PLSQLPrinter.g:1644:19: error_logging_into_part
						{
						pushFollow(FOLLOW_error_logging_into_part_in_error_logging_clause16166);
						error_logging_into_part();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1644:44: ( expression )?
				int alt362=2;
				int LA362_0 = input.LA(1);
				if ( (LA362_0==EXPR||LA362_0==LOGIC_EXPR) ) {
					alt362=1;
				}
				switch (alt362) {
					case 1 :
						// PLSQLPrinter.g:1644:44: expression
						{
						pushFollow(FOLLOW_expression_in_error_logging_clause16169);
						expression();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1644:56: ( error_logging_reject_part )?
				int alt363=2;
				int LA363_0 = input.LA(1);
				if ( (LA363_0==REJECT_VK) ) {
					alt363=1;
				}
				switch (alt363) {
					case 1 :
						// PLSQLPrinter.g:1644:56: error_logging_reject_part
						{
						pushFollow(FOLLOW_error_logging_reject_part_in_error_logging_clause16172);
						error_logging_reject_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1645:5: -> template( \"not implemented: error_logging_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: error_logging_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "error_logging_clause"


	public static class error_logging_into_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "error_logging_into_part"
	// PLSQLPrinter.g:1648:1: error_logging_into_part : ^( SQL92_RESERVED_INTO tableview_name ) -> template( \"not implemented: error_logging_into_part\";
	public final PLSQLPrinter.error_logging_into_part_return error_logging_into_part() throws RecognitionException {
		PLSQLPrinter.error_logging_into_part_return retval = new PLSQLPrinter.error_logging_into_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1649:5: ( ^( SQL92_RESERVED_INTO tableview_name ) -> template( \"not implemented: error_logging_into_part\")
			// PLSQLPrinter.g:1649:10: ^( SQL92_RESERVED_INTO tableview_name )
			{
			match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_error_logging_into_part16209); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_error_logging_into_part16211);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1650:5: -> template( \"not implemented: error_logging_into_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: error_logging_into_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "error_logging_into_part"


	public static class error_logging_reject_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "error_logging_reject_part"
	// PLSQLPrinter.g:1653:1: error_logging_reject_part : ^( REJECT_VK ( UNLIMITED_VK | expression ) ) -> template( \"not implemented: error_logging_reject_part\";
	public final PLSQLPrinter.error_logging_reject_part_return error_logging_reject_part() throws RecognitionException {
		PLSQLPrinter.error_logging_reject_part_return retval = new PLSQLPrinter.error_logging_reject_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1654:5: ( ^( REJECT_VK ( UNLIMITED_VK | expression ) ) -> template( \"not implemented: error_logging_reject_part\")
			// PLSQLPrinter.g:1654:10: ^( REJECT_VK ( UNLIMITED_VK | expression ) )
			{
			match(input,REJECT_VK,FOLLOW_REJECT_VK_in_error_logging_reject_part16247); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1654:22: ( UNLIMITED_VK | expression )
			int alt364=2;
			int LA364_0 = input.LA(1);
			if ( (LA364_0==UNLIMITED_VK) ) {
				alt364=1;
			}
			else if ( (LA364_0==EXPR||LA364_0==LOGIC_EXPR) ) {
				alt364=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 364, 0, input);
				throw nvae;
			}

			switch (alt364) {
				case 1 :
					// PLSQLPrinter.g:1654:23: UNLIMITED_VK
					{
					match(input,UNLIMITED_VK,FOLLOW_UNLIMITED_VK_in_error_logging_reject_part16250); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1654:36: expression
					{
					pushFollow(FOLLOW_expression_in_error_logging_reject_part16252);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1655:5: -> template( \"not implemented: error_logging_reject_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: error_logging_reject_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "error_logging_reject_part"


	public static class dml_table_expression_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_table_expression_clause"
	// PLSQLPrinter.g:1658:1: dml_table_expression_clause : ( ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE table_collection_expression ) -> { $table_collection_expression.st }| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> dml_table_expression_clause_select(select_statement=$select_statement.stsubquery_restriction_clause=$subquery_restriction_clause.st)| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st }) ) | table_ref -> in_parens(val=$table_ref.st));
	public final PLSQLPrinter.dml_table_expression_clause_return dml_table_expression_clause() throws RecognitionException {
		PLSQLPrinter.dml_table_expression_clause_return retval = new PLSQLPrinter.dml_table_expression_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope table_collection_expression297 =null;
		TreeRuleReturnScope select_statement298 =null;
		TreeRuleReturnScope subquery_restriction_clause299 =null;
		TreeRuleReturnScope tableview_name300 =null;
		TreeRuleReturnScope sample_clause301 =null;
		TreeRuleReturnScope general_element302 =null;
		TreeRuleReturnScope standard_function303 =null;
		TreeRuleReturnScope table_ref304 =null;

		try {
			// PLSQLPrinter.g:1659:5: ( ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE table_collection_expression ) -> { $table_collection_expression.st }| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> dml_table_expression_clause_select(select_statement=$select_statement.stsubquery_restriction_clause=$subquery_restriction_clause.st)| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st }) ) | table_ref -> in_parens(val=$table_ref.st))
			int alt368=2;
			int LA368_0 = input.LA(1);
			if ( (LA368_0==TABLE_EXPRESSION) ) {
				alt368=1;
			}
			else if ( (LA368_0==TABLE_REF) ) {
				alt368=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 368, 0, input);
				throw nvae;
			}

			switch (alt368) {
				case 1 :
					// PLSQLPrinter.g:1659:10: ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE table_collection_expression ) -> { $table_collection_expression.st }| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> dml_table_expression_clause_select(select_statement=$select_statement.stsubquery_restriction_clause=$subquery_restriction_clause.st)| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st }) )
					{
					match(input,TABLE_EXPRESSION,FOLLOW_TABLE_EXPRESSION_in_dml_table_expression_clause16289); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1660:9: ( ^( COLLECTION_MODE table_collection_expression ) -> { $table_collection_expression.st }| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> dml_table_expression_clause_select(select_statement=$select_statement.stsubquery_restriction_clause=$subquery_restriction_clause.st)| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st })
					int alt367=5;
					switch ( input.LA(1) ) {
					case COLLECTION_MODE:
						{
						alt367=1;
						}
						break;
					case SELECT_MODE:
						{
						alt367=2;
						}
						break;
					case DIRECT_MODE:
						{
						alt367=3;
						}
						break;
					case CASCATED_ELEMENT:
						{
						alt367=4;
						}
						break;
					case CAST_VK:
					case CHR_VK:
					case COLLECT_VK:
					case COUNT_VK:
					case DECOMPOSE_VK:
					case EXTRACT_VK:
					case FIRST_VALUE_VK:
					case FUNCTION_ENABLING_OVER:
					case FUNCTION_ENABLING_USING:
					case FUNCTION_ENABLING_WITHIN_OR_OVER:
					case LAST_VALUE_VK:
					case PREDICTION_FUNCTION:
					case TRANSLATE_VK:
					case TREAT_VK:
					case TRIM_VK:
					case XMLAGG_VK:
					case XMLCAST_VK:
					case XMLCOLATTVAL_VK:
					case XMLELEMENT_VK:
					case XMLEXISTS_VK:
					case XMLFOREST_VK:
					case XMLPARSE_VK:
					case XMLPI_VK:
					case XMLQUERY_VK:
					case XMLROOT_VK:
					case XMLSERIALIZE_VK:
					case XMLTABLE_VK:
						{
						alt367=5;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 367, 0, input);
						throw nvae;
					}
					switch (alt367) {
						case 1 :
							// PLSQLPrinter.g:1660:14: ^( COLLECTION_MODE table_collection_expression )
							{
							match(input,COLLECTION_MODE,FOLLOW_COLLECTION_MODE_in_dml_table_expression_clause16306); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_table_collection_expression_in_dml_table_expression_clause16308);
							table_collection_expression297=table_collection_expression();
							state._fsp--;

							match(input, Token.UP, null); 

							// TEMPLATE REWRITE
							// 1660:61: -> { $table_collection_expression.st }
							{
								retval.st =  (table_collection_expression297!=null?((StringTemplate)table_collection_expression297.getTemplate()):null) ;
							}



							}
							break;
						case 2 :
							// PLSQLPrinter.g:1661:14: ^( SELECT_MODE select_statement ( subquery_restriction_clause )? )
							{
							match(input,SELECT_MODE,FOLLOW_SELECT_MODE_in_dml_table_expression_clause16329); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_select_statement_in_dml_table_expression_clause16331);
							select_statement298=select_statement();
							state._fsp--;

							// PLSQLPrinter.g:1661:45: ( subquery_restriction_clause )?
							int alt365=2;
							int LA365_0 = input.LA(1);
							if ( (LA365_0==SQL92_RESERVED_WITH) ) {
								alt365=1;
							}
							switch (alt365) {
								case 1 :
									// PLSQLPrinter.g:1661:45: subquery_restriction_clause
									{
									pushFollow(FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause16333);
									subquery_restriction_clause299=subquery_restriction_clause();
									state._fsp--;

									}
									break;

							}

							match(input, Token.UP, null); 

							// TEMPLATE REWRITE
							// 1662:15: -> dml_table_expression_clause_select(select_statement=$select_statement.stsubquery_restriction_clause=$subquery_restriction_clause.st)
							{
								retval.st = templateLib.getInstanceOf("dml_table_expression_clause_select",new STAttrMap().put("select_statement", (select_statement298!=null?((StringTemplate)select_statement298.getTemplate()):null)).put("subquery_restriction_clause", (subquery_restriction_clause299!=null?((StringTemplate)subquery_restriction_clause299.getTemplate()):null)));
							}



							}
							break;
						case 3 :
							// PLSQLPrinter.g:1665:14: ^( DIRECT_MODE tableview_name ( sample_clause )? )
							{
							match(input,DIRECT_MODE,FOLLOW_DIRECT_MODE_in_dml_table_expression_clause16422); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_tableview_name_in_dml_table_expression_clause16424);
							tableview_name300=tableview_name();
							state._fsp--;

							// PLSQLPrinter.g:1665:43: ( sample_clause )?
							int alt366=2;
							int LA366_0 = input.LA(1);
							if ( (LA366_0==SAMPLE_VK) ) {
								alt366=1;
							}
							switch (alt366) {
								case 1 :
									// PLSQLPrinter.g:1665:43: sample_clause
									{
									pushFollow(FOLLOW_sample_clause_in_dml_table_expression_clause16426);
									sample_clause301=sample_clause();
									state._fsp--;

									}
									break;

							}

							match(input, Token.UP, null); 

							// TEMPLATE REWRITE
							// 1666:15: -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)
							{
								retval.st = templateLib.getInstanceOf("dml_table_expression_clause_direct",new STAttrMap().put("table_or_view_name", (tableview_name300!=null?((StringTemplate)tableview_name300.getTemplate()):null)).put("sample_clause", (sample_clause301!=null?((StringTemplate)sample_clause301.getTemplate()):null)));
							}



							}
							break;
						case 4 :
							// PLSQLPrinter.g:1667:14: general_element
							{
							pushFollow(FOLLOW_general_element_in_dml_table_expression_clause16471);
							general_element302=general_element();
							state._fsp--;

							// TEMPLATE REWRITE
							// 1667:30: -> { $general_element.st }
							{
								retval.st =  (general_element302!=null?((StringTemplate)general_element302.getTemplate()):null) ;
							}



							}
							break;
						case 5 :
							// PLSQLPrinter.g:1668:14: standard_function
							{
							pushFollow(FOLLOW_standard_function_in_dml_table_expression_clause16490);
							standard_function303=standard_function();
							state._fsp--;

							// TEMPLATE REWRITE
							// 1668:32: -> { $standard_function.st }
							{
								retval.st =  (standard_function303!=null?((StringTemplate)standard_function303.getTemplate()):null) ;
							}



							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1671:14: table_ref
					{
					pushFollow(FOLLOW_table_ref_in_dml_table_expression_clause16529);
					table_ref304=table_ref();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1671:24: -> in_parens(val=$table_ref.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (table_ref304!=null?((StringTemplate)table_ref304.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_table_expression_clause"


	public static class table_collection_expression_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_collection_expression"
	// PLSQLPrinter.g:1674:1: table_collection_expression : ( expression -> table_collection_expression(expression_or_subquery=$expression.stis_outer_join=false)| subquery -> table_collection_expression(expression_or_subquery=$subquery.stis_outer_join=false)| ^( OUTER_JOIN_SIGN expression ) -> table_collection_expression(expression_or_subquery=$expression.stis_outer_join=true)| ^( OUTER_JOIN_SIGN subquery ) -> table_collection_expression(expression_or_subquery=$subquery.stis_outer_join=true));
	public final PLSQLPrinter.table_collection_expression_return table_collection_expression() throws RecognitionException {
		PLSQLPrinter.table_collection_expression_return retval = new PLSQLPrinter.table_collection_expression_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression305 =null;
		TreeRuleReturnScope subquery306 =null;
		TreeRuleReturnScope expression307 =null;
		TreeRuleReturnScope subquery308 =null;

		try {
			// PLSQLPrinter.g:1675:5: ( expression -> table_collection_expression(expression_or_subquery=$expression.stis_outer_join=false)| subquery -> table_collection_expression(expression_or_subquery=$subquery.stis_outer_join=false)| ^( OUTER_JOIN_SIGN expression ) -> table_collection_expression(expression_or_subquery=$expression.stis_outer_join=true)| ^( OUTER_JOIN_SIGN subquery ) -> table_collection_expression(expression_or_subquery=$subquery.stis_outer_join=true))
			int alt369=4;
			switch ( input.LA(1) ) {
			case EXPR:
			case LOGIC_EXPR:
				{
				alt369=1;
				}
				break;
			case SUBQUERY:
				{
				alt369=2;
				}
				break;
			case OUTER_JOIN_SIGN:
				{
				int LA369_3 = input.LA(2);
				if ( (LA369_3==DOWN) ) {
					int LA369_4 = input.LA(3);
					if ( (LA369_4==EXPR||LA369_4==LOGIC_EXPR) ) {
						alt369=3;
					}
					else if ( (LA369_4==SUBQUERY) ) {
						alt369=4;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 369, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 369, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 369, 0, input);
				throw nvae;
			}
			switch (alt369) {
				case 1 :
					// PLSQLPrinter.g:1675:9: expression
					{
					pushFollow(FOLLOW_expression_in_table_collection_expression16557);
					expression305=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1676:5: -> table_collection_expression(expression_or_subquery=$expression.stis_outer_join=false)
					{
						retval.st = templateLib.getInstanceOf("table_collection_expression",new STAttrMap().put("expression_or_subquery", (expression305!=null?((StringTemplate)expression305.getTemplate()):null)).put("is_outer_join", false));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1677:9: subquery
					{
					pushFollow(FOLLOW_subquery_in_table_collection_expression16586);
					subquery306=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1678:5: -> table_collection_expression(expression_or_subquery=$subquery.stis_outer_join=false)
					{
						retval.st = templateLib.getInstanceOf("table_collection_expression",new STAttrMap().put("expression_or_subquery", (subquery306!=null?((StringTemplate)subquery306.getTemplate()):null)).put("is_outer_join", false));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1679:9: ^( OUTER_JOIN_SIGN expression )
					{
					match(input,OUTER_JOIN_SIGN,FOLLOW_OUTER_JOIN_SIGN_in_table_collection_expression16616); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_table_collection_expression16618);
					expression307=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1680:5: -> table_collection_expression(expression_or_subquery=$expression.stis_outer_join=true)
					{
						retval.st = templateLib.getInstanceOf("table_collection_expression",new STAttrMap().put("expression_or_subquery", (expression307!=null?((StringTemplate)expression307.getTemplate()):null)).put("is_outer_join", true));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1681:9: ^( OUTER_JOIN_SIGN subquery )
					{
					match(input,OUTER_JOIN_SIGN,FOLLOW_OUTER_JOIN_SIGN_in_table_collection_expression16649); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_subquery_in_table_collection_expression16651);
					subquery308=subquery();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1682:5: -> table_collection_expression(expression_or_subquery=$subquery.stis_outer_join=true)
					{
						retval.st = templateLib.getInstanceOf("table_collection_expression",new STAttrMap().put("expression_or_subquery", (subquery308!=null?((StringTemplate)subquery308.getTemplate()):null)).put("is_outer_join", true));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_collection_expression"


	public static class subquery_restriction_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_restriction_clause"
	// PLSQLPrinter.g:1685:1: subquery_restriction_clause : ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) ) -> template( \"not implemented: subquery_restriction_clause\";
	public final PLSQLPrinter.subquery_restriction_clause_return subquery_restriction_clause() throws RecognitionException {
		PLSQLPrinter.subquery_restriction_clause_return retval = new PLSQLPrinter.subquery_restriction_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1686:5: ( ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) ) -> template( \"not implemented: subquery_restriction_clause\")
			// PLSQLPrinter.g:1686:10: ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) )
			{
			match(input,SQL92_RESERVED_WITH,FOLLOW_SQL92_RESERVED_WITH_in_subquery_restriction_clause16692); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1686:32: ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? )
			int alt371=2;
			int LA371_0 = input.LA(1);
			if ( (LA371_0==READ_VK) ) {
				alt371=1;
			}
			else if ( (LA371_0==SQL92_RESERVED_CHECK) ) {
				alt371=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 371, 0, input);
				throw nvae;
			}

			switch (alt371) {
				case 1 :
					// PLSQLPrinter.g:1686:33: READ_VK
					{
					match(input,READ_VK,FOLLOW_READ_VK_in_subquery_restriction_clause16695); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1686:41: SQL92_RESERVED_CHECK ( constraint_name )?
					{
					match(input,SQL92_RESERVED_CHECK,FOLLOW_SQL92_RESERVED_CHECK_in_subquery_restriction_clause16697); 
					// PLSQLPrinter.g:1686:62: ( constraint_name )?
					int alt370=2;
					int LA370_0 = input.LA(1);
					if ( (LA370_0==CONSTRAINT_NAME) ) {
						alt370=1;
					}
					switch (alt370) {
						case 1 :
							// PLSQLPrinter.g:1686:62: constraint_name
							{
							pushFollow(FOLLOW_constraint_name_in_subquery_restriction_clause16699);
							constraint_name();
							state._fsp--;

							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1687:5: -> template( \"not implemented: subquery_restriction_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: subquery_restriction_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_restriction_clause"


	public static class sample_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sample_clause"
	// PLSQLPrinter.g:1690:1: sample_clause : ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? ) -> template( \"not implemented: sample_clause\";
	public final PLSQLPrinter.sample_clause_return sample_clause() throws RecognitionException {
		PLSQLPrinter.sample_clause_return retval = new PLSQLPrinter.sample_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1691:5: ( ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? ) -> template( \"not implemented: sample_clause\")
			// PLSQLPrinter.g:1691:10: ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? )
			{
			match(input,SAMPLE_VK,FOLLOW_SAMPLE_VK_in_sample_clause16737); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1691:22: ( BLOCK_VK )?
			int alt372=2;
			int LA372_0 = input.LA(1);
			if ( (LA372_0==BLOCK_VK) ) {
				alt372=1;
			}
			switch (alt372) {
				case 1 :
					// PLSQLPrinter.g:1691:22: BLOCK_VK
					{
					match(input,BLOCK_VK,FOLLOW_BLOCK_VK_in_sample_clause16739); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_sample_clause16742);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1691:43: ( seed_part )?
			int alt373=2;
			int LA373_0 = input.LA(1);
			if ( (LA373_0==SEED_VK) ) {
				alt373=1;
			}
			switch (alt373) {
				case 1 :
					// PLSQLPrinter.g:1691:43: seed_part
					{
					pushFollow(FOLLOW_seed_part_in_sample_clause16744);
					seed_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1692:5: -> template( \"not implemented: sample_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: sample_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sample_clause"


	public static class seed_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "seed_part"
	// PLSQLPrinter.g:1695:1: seed_part : ^( SEED_VK expression ) -> template( \"not implemented: seed_part\";
	public final PLSQLPrinter.seed_part_return seed_part() throws RecognitionException {
		PLSQLPrinter.seed_part_return retval = new PLSQLPrinter.seed_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1696:5: ( ^( SEED_VK expression ) -> template( \"not implemented: seed_part\")
			// PLSQLPrinter.g:1696:10: ^( SEED_VK expression )
			{
			match(input,SEED_VK,FOLLOW_SEED_VK_in_seed_part16782); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_seed_part16784);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1697:5: -> template( \"not implemented: seed_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: seed_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "seed_part"


	public static class cursor_manipulation_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_manipulation_statements"
	// PLSQLPrinter.g:1706:1: cursor_manipulation_statements : ( close_statement -> { $close_statement.st }| open_statement -> { $open_statement.st }| fetch_statement -> { $fetch_statement.st }| open_for_statement -> { $open_for_statement.st });
	public final PLSQLPrinter.cursor_manipulation_statements_return cursor_manipulation_statements() throws RecognitionException {
		PLSQLPrinter.cursor_manipulation_statements_return retval = new PLSQLPrinter.cursor_manipulation_statements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope close_statement309 =null;
		TreeRuleReturnScope open_statement310 =null;
		TreeRuleReturnScope fetch_statement311 =null;
		TreeRuleReturnScope open_for_statement312 =null;

		try {
			// PLSQLPrinter.g:1707:5: ( close_statement -> { $close_statement.st }| open_statement -> { $open_statement.st }| fetch_statement -> { $fetch_statement.st }| open_for_statement -> { $open_for_statement.st })
			int alt374=4;
			switch ( input.LA(1) ) {
			case CLOSE_VK:
				{
				alt374=1;
				}
				break;
			case OPEN_VK:
				{
				alt374=2;
				}
				break;
			case SQL92_RESERVED_FETCH:
				{
				alt374=3;
				}
				break;
			case OPEN_FOR:
				{
				alt374=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 374, 0, input);
				throw nvae;
			}
			switch (alt374) {
				case 1 :
					// PLSQLPrinter.g:1707:10: close_statement
					{
					pushFollow(FOLLOW_close_statement_in_cursor_manipulation_statements16825);
					close_statement309=close_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1707:26: -> { $close_statement.st }
					{
						retval.st =  (close_statement309!=null?((StringTemplate)close_statement309.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1708:10: open_statement
					{
					pushFollow(FOLLOW_open_statement_in_cursor_manipulation_statements16840);
					open_statement310=open_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1708:25: -> { $open_statement.st }
					{
						retval.st =  (open_statement310!=null?((StringTemplate)open_statement310.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1709:10: fetch_statement
					{
					pushFollow(FOLLOW_fetch_statement_in_cursor_manipulation_statements16855);
					fetch_statement311=fetch_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1709:26: -> { $fetch_statement.st }
					{
						retval.st =  (fetch_statement311!=null?((StringTemplate)fetch_statement311.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1710:10: open_for_statement
					{
					pushFollow(FOLLOW_open_for_statement_in_cursor_manipulation_statements16870);
					open_for_statement312=open_for_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1710:29: -> { $open_for_statement.st }
					{
						retval.st =  (open_for_statement312!=null?((StringTemplate)open_for_statement312.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_manipulation_statements"


	public static class close_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "close_statement"
	// PLSQLPrinter.g:1713:1: close_statement : ^( CLOSE_VK cursor_name ) -> close_statement(cursor_name=$cursor_name.st);
	public final PLSQLPrinter.close_statement_return close_statement() throws RecognitionException {
		PLSQLPrinter.close_statement_return retval = new PLSQLPrinter.close_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope cursor_name313 =null;

		try {
			// PLSQLPrinter.g:1714:5: ( ^( CLOSE_VK cursor_name ) -> close_statement(cursor_name=$cursor_name.st))
			// PLSQLPrinter.g:1714:11: ^( CLOSE_VK cursor_name )
			{
			match(input,CLOSE_VK,FOLLOW_CLOSE_VK_in_close_statement16896); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_close_statement16898);
			cursor_name313=cursor_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1715:5: -> close_statement(cursor_name=$cursor_name.st)
			{
				retval.st = templateLib.getInstanceOf("close_statement",new STAttrMap().put("cursor_name", (cursor_name313!=null?((StringTemplate)cursor_name313.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "close_statement"


	public static class open_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "open_statement"
	// PLSQLPrinter.g:1718:1: open_statement : ^( OPEN_VK cursor_name ( expression_list )? ) -> open_statement(cursor_name=$cursor_name.stexpression_list=$expression_list.st);
	public final PLSQLPrinter.open_statement_return open_statement() throws RecognitionException {
		PLSQLPrinter.open_statement_return retval = new PLSQLPrinter.open_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope cursor_name314 =null;
		TreeRuleReturnScope expression_list315 =null;

		try {
			// PLSQLPrinter.g:1719:5: ( ^( OPEN_VK cursor_name ( expression_list )? ) -> open_statement(cursor_name=$cursor_name.stexpression_list=$expression_list.st))
			// PLSQLPrinter.g:1719:10: ^( OPEN_VK cursor_name ( expression_list )? )
			{
			match(input,OPEN_VK,FOLLOW_OPEN_VK_in_open_statement16936); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_open_statement16938);
			cursor_name314=cursor_name();
			state._fsp--;

			// PLSQLPrinter.g:1719:32: ( expression_list )?
			int alt375=2;
			int LA375_0 = input.LA(1);
			if ( (LA375_0==EXPR_LIST) ) {
				alt375=1;
			}
			switch (alt375) {
				case 1 :
					// PLSQLPrinter.g:1719:32: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_open_statement16940);
					expression_list315=expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1720:5: -> open_statement(cursor_name=$cursor_name.stexpression_list=$expression_list.st)
			{
				retval.st = templateLib.getInstanceOf("open_statement",new STAttrMap().put("cursor_name", (cursor_name314!=null?((StringTemplate)cursor_name314.getTemplate()):null)).put("expression_list", (expression_list315!=null?((StringTemplate)expression_list315.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "open_statement"


	public static class fetch_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "fetch_statement"
	// PLSQLPrinter.g:1723:1: fetch_statement : ^( SQL92_RESERVED_FETCH cursor_name into_clause ) -> fetch_statement(cursor_name=$cursor_name.stinto_clause=$into_clause.st);
	public final PLSQLPrinter.fetch_statement_return fetch_statement() throws RecognitionException {
		PLSQLPrinter.fetch_statement_return retval = new PLSQLPrinter.fetch_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope cursor_name316 =null;
		TreeRuleReturnScope into_clause317 =null;

		try {
			// PLSQLPrinter.g:1724:5: ( ^( SQL92_RESERVED_FETCH cursor_name into_clause ) -> fetch_statement(cursor_name=$cursor_name.stinto_clause=$into_clause.st))
			// PLSQLPrinter.g:1724:10: ^( SQL92_RESERVED_FETCH cursor_name into_clause )
			{
			match(input,SQL92_RESERVED_FETCH,FOLLOW_SQL92_RESERVED_FETCH_in_fetch_statement16983); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_fetch_statement16985);
			cursor_name316=cursor_name();
			state._fsp--;

			pushFollow(FOLLOW_into_clause_in_fetch_statement16987);
			into_clause317=into_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1725:5: -> fetch_statement(cursor_name=$cursor_name.stinto_clause=$into_clause.st)
			{
				retval.st = templateLib.getInstanceOf("fetch_statement",new STAttrMap().put("cursor_name", (cursor_name316!=null?((StringTemplate)cursor_name316.getTemplate()):null)).put("into_clause", (into_clause317!=null?((StringTemplate)into_clause317.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fetch_statement"


	public static class open_for_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "open_for_statement"
	// PLSQLPrinter.g:1728:1: open_for_statement : ^( OPEN_FOR variable_name (e_or_s= expression |e_or_s= select_statement ) ( using_clause )? ) -> open_for_statement(cursor_name=$variable_name.stexpression_or_select_statement=$e_or_s.stusing_clause=$using_clause.st);
	public final PLSQLPrinter.open_for_statement_return open_for_statement() throws RecognitionException {
		PLSQLPrinter.open_for_statement_return retval = new PLSQLPrinter.open_for_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope e_or_s =null;
		TreeRuleReturnScope variable_name318 =null;
		TreeRuleReturnScope using_clause319 =null;

		try {
			// PLSQLPrinter.g:1729:5: ( ^( OPEN_FOR variable_name (e_or_s= expression |e_or_s= select_statement ) ( using_clause )? ) -> open_for_statement(cursor_name=$variable_name.stexpression_or_select_statement=$e_or_s.stusing_clause=$using_clause.st))
			// PLSQLPrinter.g:1729:10: ^( OPEN_FOR variable_name (e_or_s= expression |e_or_s= select_statement ) ( using_clause )? )
			{
			match(input,OPEN_FOR,FOLLOW_OPEN_FOR_in_open_for_statement17029); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_variable_name_in_open_for_statement17031);
			variable_name318=variable_name();
			state._fsp--;

			// PLSQLPrinter.g:1729:35: (e_or_s= expression |e_or_s= select_statement )
			int alt376=2;
			int LA376_0 = input.LA(1);
			if ( (LA376_0==EXPR||LA376_0==LOGIC_EXPR) ) {
				alt376=1;
			}
			else if ( (LA376_0==SELECT_STATEMENT) ) {
				alt376=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 376, 0, input);
				throw nvae;
			}

			switch (alt376) {
				case 1 :
					// PLSQLPrinter.g:1729:36: e_or_s= expression
					{
					pushFollow(FOLLOW_expression_in_open_for_statement17036);
					e_or_s=expression();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1729:54: e_or_s= select_statement
					{
					pushFollow(FOLLOW_select_statement_in_open_for_statement17040);
					e_or_s=select_statement();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1729:79: ( using_clause )?
			int alt377=2;
			int LA377_0 = input.LA(1);
			if ( (LA377_0==PLSQL_NON_RESERVED_USING) ) {
				alt377=1;
			}
			switch (alt377) {
				case 1 :
					// PLSQLPrinter.g:1729:79: using_clause
					{
					pushFollow(FOLLOW_using_clause_in_open_for_statement17043);
					using_clause319=using_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1730:5: -> open_for_statement(cursor_name=$variable_name.stexpression_or_select_statement=$e_or_s.stusing_clause=$using_clause.st)
			{
				retval.st = templateLib.getInstanceOf("open_for_statement",new STAttrMap().put("cursor_name", (variable_name318!=null?((StringTemplate)variable_name318.getTemplate()):null)).put("expression_or_select_statement", (e_or_s!=null?((StringTemplate)e_or_s.getTemplate()):null)).put("using_clause", (using_clause319!=null?((StringTemplate)using_clause319.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "open_for_statement"


	public static class transaction_control_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "transaction_control_statements"
	// PLSQLPrinter.g:1737:1: transaction_control_statements : ( set_transaction_command -> { $set_transaction_command.st }| set_constraint_command -> { $set_constraint_command.st }| commit_statement -> { $commit_statement.st }| rollback_statement -> { $rollback_statement.st }| savepoint_statement -> { $savepoint_statement.st });
	public final PLSQLPrinter.transaction_control_statements_return transaction_control_statements() throws RecognitionException {
		PLSQLPrinter.transaction_control_statements_return retval = new PLSQLPrinter.transaction_control_statements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope set_transaction_command320 =null;
		TreeRuleReturnScope set_constraint_command321 =null;
		TreeRuleReturnScope commit_statement322 =null;
		TreeRuleReturnScope rollback_statement323 =null;
		TreeRuleReturnScope savepoint_statement324 =null;

		try {
			// PLSQLPrinter.g:1738:5: ( set_transaction_command -> { $set_transaction_command.st }| set_constraint_command -> { $set_constraint_command.st }| commit_statement -> { $commit_statement.st }| rollback_statement -> { $rollback_statement.st }| savepoint_statement -> { $savepoint_statement.st })
			int alt378=5;
			switch ( input.LA(1) ) {
			case SET_TRANSACTION:
				{
				alt378=1;
				}
				break;
			case SET_CONSTRAINT:
				{
				alt378=2;
				}
				break;
			case COMMIT_VK:
				{
				alt378=3;
				}
				break;
			case ROLLBACK_VK:
				{
				alt378=4;
				}
				break;
			case SAVEPOINT_VK:
				{
				alt378=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 378, 0, input);
				throw nvae;
			}
			switch (alt378) {
				case 1 :
					// PLSQLPrinter.g:1738:10: set_transaction_command
					{
					pushFollow(FOLLOW_set_transaction_command_in_transaction_control_statements17094);
					set_transaction_command320=set_transaction_command();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1738:34: -> { $set_transaction_command.st }
					{
						retval.st =  (set_transaction_command320!=null?((StringTemplate)set_transaction_command320.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1739:10: set_constraint_command
					{
					pushFollow(FOLLOW_set_constraint_command_in_transaction_control_statements17109);
					set_constraint_command321=set_constraint_command();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1739:33: -> { $set_constraint_command.st }
					{
						retval.st =  (set_constraint_command321!=null?((StringTemplate)set_constraint_command321.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1740:10: commit_statement
					{
					pushFollow(FOLLOW_commit_statement_in_transaction_control_statements17124);
					commit_statement322=commit_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1740:27: -> { $commit_statement.st }
					{
						retval.st =  (commit_statement322!=null?((StringTemplate)commit_statement322.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1741:10: rollback_statement
					{
					pushFollow(FOLLOW_rollback_statement_in_transaction_control_statements17139);
					rollback_statement323=rollback_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1741:29: -> { $rollback_statement.st }
					{
						retval.st =  (rollback_statement323!=null?((StringTemplate)rollback_statement323.getTemplate()):null) ;
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1742:10: savepoint_statement
					{
					pushFollow(FOLLOW_savepoint_statement_in_transaction_control_statements17154);
					savepoint_statement324=savepoint_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1742:30: -> { $savepoint_statement.st }
					{
						retval.st =  (savepoint_statement324!=null?((StringTemplate)savepoint_statement324.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "transaction_control_statements"


	public static class set_transaction_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "set_transaction_command"
	// PLSQLPrinter.g:1745:1: set_transaction_command : ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? ) -> template( \"not implemented: set_transaction_command\";
	public final PLSQLPrinter.set_transaction_command_return set_transaction_command() throws RecognitionException {
		PLSQLPrinter.set_transaction_command_return retval = new PLSQLPrinter.set_transaction_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1746:5: ( ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? ) -> template( \"not implemented: set_transaction_command\")
			// PLSQLPrinter.g:1746:10: ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? )
			{
			match(input,SET_TRANSACTION,FOLLOW_SET_TRANSACTION_in_set_transaction_command17179); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1746:28: ( CHAR_STRING )?
				int alt379=2;
				int LA379_0 = input.LA(1);
				if ( (LA379_0==CHAR_STRING) ) {
					alt379=1;
				}
				switch (alt379) {
					case 1 :
						// PLSQLPrinter.g:1746:28: CHAR_STRING
						{
						match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_set_transaction_command17181); 
						}
						break;

				}

				// PLSQLPrinter.g:1747:13: ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )?
				int alt382=4;
				switch ( input.LA(1) ) {
					case READ_VK:
						{
						alt382=1;
						}
						break;
					case ISOLATION_VK:
						{
						alt382=2;
						}
						break;
					case ROLLBACK_VK:
						{
						alt382=3;
						}
						break;
				}
				switch (alt382) {
					case 1 :
						// PLSQLPrinter.g:1747:18: ^( READ_VK ( ONLY_VK | WRITE_VK ) )
						{
						match(input,READ_VK,FOLLOW_READ_VK_in_set_transaction_command17202); 
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:1747:28: ( ONLY_VK | WRITE_VK )
						int alt380=2;
						int LA380_0 = input.LA(1);
						if ( (LA380_0==ONLY_VK) ) {
							alt380=1;
						}
						else if ( (LA380_0==WRITE_VK) ) {
							alt380=2;
						}

						else {
							NoViableAltException nvae =
								new NoViableAltException("", 380, 0, input);
							throw nvae;
						}

						switch (alt380) {
							case 1 :
								// PLSQLPrinter.g:1747:29: ONLY_VK
								{
								match(input,ONLY_VK,FOLLOW_ONLY_VK_in_set_transaction_command17205); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:1747:37: WRITE_VK
								{
								match(input,WRITE_VK,FOLLOW_WRITE_VK_in_set_transaction_command17207); 
								}
								break;

						}

						match(input, Token.UP, null); 

						}
						break;
					case 2 :
						// PLSQLPrinter.g:1748:18: ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) )
						{
						match(input,ISOLATION_VK,FOLLOW_ISOLATION_VK_in_set_transaction_command17229); 
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:1748:33: ( SERIALIZABLE_VK | COMMITTED_VK )
						int alt381=2;
						int LA381_0 = input.LA(1);
						if ( (LA381_0==SERIALIZABLE_VK) ) {
							alt381=1;
						}
						else if ( (LA381_0==COMMITTED_VK) ) {
							alt381=2;
						}

						else {
							NoViableAltException nvae =
								new NoViableAltException("", 381, 0, input);
							throw nvae;
						}

						switch (alt381) {
							case 1 :
								// PLSQLPrinter.g:1748:34: SERIALIZABLE_VK
								{
								match(input,SERIALIZABLE_VK,FOLLOW_SERIALIZABLE_VK_in_set_transaction_command17232); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:1748:50: COMMITTED_VK
								{
								match(input,COMMITTED_VK,FOLLOW_COMMITTED_VK_in_set_transaction_command17234); 
								}
								break;

						}

						match(input, Token.UP, null); 

						}
						break;
					case 3 :
						// PLSQLPrinter.g:1749:18: ^( ROLLBACK_VK rollback_segment_name )
						{
						match(input,ROLLBACK_VK,FOLLOW_ROLLBACK_VK_in_set_transaction_command17256); 
						match(input, Token.DOWN, null); 
						pushFollow(FOLLOW_rollback_segment_name_in_set_transaction_command17258);
						rollback_segment_name();
						state._fsp--;

						match(input, Token.UP, null); 

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1752:5: -> template( \"not implemented: set_transaction_command\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: set_transaction_command");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_transaction_command"


	public static class set_constraint_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "set_constraint_command"
	// PLSQLPrinter.g:1755:1: set_constraint_command : ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) ) -> template( \"not implemented: set_constraint_command\";
	public final PLSQLPrinter.set_constraint_command_return set_constraint_command() throws RecognitionException {
		PLSQLPrinter.set_constraint_command_return retval = new PLSQLPrinter.set_constraint_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1756:5: ( ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) ) -> template( \"not implemented: set_constraint_command\")
			// PLSQLPrinter.g:1756:10: ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) )
			{
			match(input,SET_CONSTRAINT,FOLLOW_SET_CONSTRAINT_in_set_constraint_command17319); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1756:27: ( SQL92_RESERVED_ALL | ( constraint_name )+ )
			int alt384=2;
			int LA384_0 = input.LA(1);
			if ( (LA384_0==SQL92_RESERVED_ALL) ) {
				alt384=1;
			}
			else if ( (LA384_0==CONSTRAINT_NAME) ) {
				alt384=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 384, 0, input);
				throw nvae;
			}

			switch (alt384) {
				case 1 :
					// PLSQLPrinter.g:1756:28: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_set_constraint_command17322); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1756:47: ( constraint_name )+
					{
					// PLSQLPrinter.g:1756:47: ( constraint_name )+
					int cnt383=0;
					loop383:
					while (true) {
						int alt383=2;
						int LA383_0 = input.LA(1);
						if ( (LA383_0==CONSTRAINT_NAME) ) {
							alt383=1;
						}

						switch (alt383) {
						case 1 :
							// PLSQLPrinter.g:1756:47: constraint_name
							{
							pushFollow(FOLLOW_constraint_name_in_set_constraint_command17324);
							constraint_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt383 >= 1 ) break loop383;
							EarlyExitException eee = new EarlyExitException(383, input);
							throw eee;
						}
						cnt383++;
					}

					}
					break;

			}

			// PLSQLPrinter.g:1756:65: ( IMMEDIATE_VK | DEFERRED_VK )
			int alt385=2;
			int LA385_0 = input.LA(1);
			if ( (LA385_0==IMMEDIATE_VK) ) {
				alt385=1;
			}
			else if ( (LA385_0==DEFERRED_VK) ) {
				alt385=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 385, 0, input);
				throw nvae;
			}

			switch (alt385) {
				case 1 :
					// PLSQLPrinter.g:1756:66: IMMEDIATE_VK
					{
					match(input,IMMEDIATE_VK,FOLLOW_IMMEDIATE_VK_in_set_constraint_command17329); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1756:79: DEFERRED_VK
					{
					match(input,DEFERRED_VK,FOLLOW_DEFERRED_VK_in_set_constraint_command17331); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1757:5: -> template( \"not implemented: set_constraint_command\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: set_constraint_command");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_constraint_command"


	public static class commit_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "commit_statement"
	// PLSQLPrinter.g:1760:1: commit_statement : ^( COMMIT_VK ( WORK_VK )? (additional= commit_comment |additional= commit_force )? ) -> commit_statement(is_work=$WORK_VK != nulladditional=$additional.st);
	public final PLSQLPrinter.commit_statement_return commit_statement() throws RecognitionException {
		PLSQLPrinter.commit_statement_return retval = new PLSQLPrinter.commit_statement_return();
		retval.start = input.LT(1);

		CommonTree WORK_VK325=null;
		TreeRuleReturnScope additional =null;

		try {
			// PLSQLPrinter.g:1761:5: ( ^( COMMIT_VK ( WORK_VK )? (additional= commit_comment |additional= commit_force )? ) -> commit_statement(is_work=$WORK_VK != nulladditional=$additional.st))
			// PLSQLPrinter.g:1761:11: ^( COMMIT_VK ( WORK_VK )? (additional= commit_comment |additional= commit_force )? )
			{
			match(input,COMMIT_VK,FOLLOW_COMMIT_VK_in_commit_statement17369); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1761:23: ( WORK_VK )?
				int alt386=2;
				int LA386_0 = input.LA(1);
				if ( (LA386_0==WORK_VK) ) {
					alt386=1;
				}
				switch (alt386) {
					case 1 :
						// PLSQLPrinter.g:1761:23: WORK_VK
						{
						WORK_VK325=(CommonTree)match(input,WORK_VK,FOLLOW_WORK_VK_in_commit_statement17371); 
						}
						break;

				}

				// PLSQLPrinter.g:1762:13: (additional= commit_comment |additional= commit_force )?
				int alt387=3;
				int LA387_0 = input.LA(1);
				if ( (LA387_0==COMMENT_VK) ) {
					alt387=1;
				}
				else if ( (LA387_0==FORCE_VK) ) {
					alt387=2;
				}
				switch (alt387) {
					case 1 :
						// PLSQLPrinter.g:1763:15: additional= commit_comment
						{
						pushFollow(FOLLOW_commit_comment_in_commit_statement17404);
						additional=commit_comment();
						state._fsp--;

						}
						break;
					case 2 :
						// PLSQLPrinter.g:1764:17: additional= commit_force
						{
						pushFollow(FOLLOW_commit_force_in_commit_statement17424);
						additional=commit_force();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1768:5: -> commit_statement(is_work=$WORK_VK != nulladditional=$additional.st)
			{
				retval.st = templateLib.getInstanceOf("commit_statement",new STAttrMap().put("is_work", WORK_VK325 != null).put("additional", (additional!=null?((StringTemplate)additional.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commit_statement"


	public static class commit_comment_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "commit_comment"
	// PLSQLPrinter.g:1771:1: commit_comment : ^( COMMENT_VK comment_expr= expression ) ( write_clause )? -> commit_comment(comment_expr=$expression.stwrite_clause=$write_clause.st);
	public final PLSQLPrinter.commit_comment_return commit_comment() throws RecognitionException {
		PLSQLPrinter.commit_comment_return retval = new PLSQLPrinter.commit_comment_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope comment_expr =null;
		TreeRuleReturnScope write_clause326 =null;

		try {
			// PLSQLPrinter.g:1772:5: ( ^( COMMENT_VK comment_expr= expression ) ( write_clause )? -> commit_comment(comment_expr=$expression.stwrite_clause=$write_clause.st))
			// PLSQLPrinter.g:1772:9: ^( COMMENT_VK comment_expr= expression ) ( write_clause )?
			{
			match(input,COMMENT_VK,FOLLOW_COMMENT_VK_in_commit_comment17515); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_commit_comment17519);
			comment_expr=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1772:47: ( write_clause )?
			int alt388=2;
			int LA388_0 = input.LA(1);
			if ( (LA388_0==WRITE_VK) ) {
				alt388=1;
			}
			switch (alt388) {
				case 1 :
					// PLSQLPrinter.g:1772:47: write_clause
					{
					pushFollow(FOLLOW_write_clause_in_commit_comment17522);
					write_clause326=write_clause();
					state._fsp--;

					}
					break;

			}

			// TEMPLATE REWRITE
			// 1773:5: -> commit_comment(comment_expr=$expression.stwrite_clause=$write_clause.st)
			{
				retval.st = templateLib.getInstanceOf("commit_comment",new STAttrMap().put("comment_expr", (comment_expr!=null?((StringTemplate)comment_expr.getTemplate()):null)).put("write_clause", (write_clause326!=null?((StringTemplate)write_clause326.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commit_comment"


	public static class commit_force_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "commit_force"
	// PLSQLPrinter.g:1776:1: commit_force : ^( FORCE_VK ( CORRUPT_XID_VK expr1= expression -> commit_statement_force_2(expression=$expr1.st)| CORRUPT_XID_ALL_VK -> commit_statement_force_3(|expr1= expression (expr2= expression )? -> commit_statement_force_1(expr1=$expr1.stexpr2=$expr2.st)) ) ;
	public final PLSQLPrinter.commit_force_return commit_force() throws RecognitionException {
		PLSQLPrinter.commit_force_return retval = new PLSQLPrinter.commit_force_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expr1 =null;
		TreeRuleReturnScope expr2 =null;

		try {
			// PLSQLPrinter.g:1777:5: ( ^( FORCE_VK ( CORRUPT_XID_VK expr1= expression -> commit_statement_force_2(expression=$expr1.st)| CORRUPT_XID_ALL_VK -> commit_statement_force_3(|expr1= expression (expr2= expression )? -> commit_statement_force_1(expr1=$expr1.stexpr2=$expr2.st)) ) )
			// PLSQLPrinter.g:1777:9: ^( FORCE_VK ( CORRUPT_XID_VK expr1= expression -> commit_statement_force_2(expression=$expr1.st)| CORRUPT_XID_ALL_VK -> commit_statement_force_3(|expr1= expression (expr2= expression )? -> commit_statement_force_1(expr1=$expr1.stexpr2=$expr2.st)) )
			{
			match(input,FORCE_VK,FOLLOW_FORCE_VK_in_commit_force17566); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1778:11: ( CORRUPT_XID_VK expr1= expression -> commit_statement_force_2(expression=$expr1.st)| CORRUPT_XID_ALL_VK -> commit_statement_force_3(|expr1= expression (expr2= expression )? -> commit_statement_force_1(expr1=$expr1.stexpr2=$expr2.st))
			int alt390=3;
			switch ( input.LA(1) ) {
			case CORRUPT_XID_VK:
				{
				alt390=1;
				}
				break;
			case CORRUPT_XID_ALL_VK:
				{
				alt390=2;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt390=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 390, 0, input);
				throw nvae;
			}
			switch (alt390) {
				case 1 :
					// PLSQLPrinter.g:1779:13: CORRUPT_XID_VK expr1= expression
					{
					match(input,CORRUPT_XID_VK,FOLLOW_CORRUPT_XID_VK_in_commit_force17592); 
					pushFollow(FOLLOW_expression_in_commit_force17596);
					expr1=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1779:45: -> commit_statement_force_2(expression=$expr1.st)
					{
						retval.st = templateLib.getInstanceOf("commit_statement_force_2",new STAttrMap().put("expression", (expr1!=null?((StringTemplate)expr1.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1780:15: CORRUPT_XID_ALL_VK
					{
					match(input,CORRUPT_XID_ALL_VK,FOLLOW_CORRUPT_XID_ALL_VK_in_commit_force17621); 
					// TEMPLATE REWRITE
					// 1780:34: -> commit_statement_force_3(
					{
						retval.st = templateLib.getInstanceOf("commit_statement_force_3");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1781:15: expr1= expression (expr2= expression )?
					{
					pushFollow(FOLLOW_expression_in_commit_force17645);
					expr1=expression();
					state._fsp--;

					// PLSQLPrinter.g:1781:37: (expr2= expression )?
					int alt389=2;
					int LA389_0 = input.LA(1);
					if ( (LA389_0==EXPR||LA389_0==LOGIC_EXPR) ) {
						alt389=1;
					}
					switch (alt389) {
						case 1 :
							// PLSQLPrinter.g:1781:37: expr2= expression
							{
							pushFollow(FOLLOW_expression_in_commit_force17649);
							expr2=expression();
							state._fsp--;

							}
							break;

					}

					// TEMPLATE REWRITE
					// 1781:50: -> commit_statement_force_1(expr1=$expr1.stexpr2=$expr2.st)
					{
						retval.st = templateLib.getInstanceOf("commit_statement_force_1",new STAttrMap().put("expr1", (expr1!=null?((StringTemplate)expr1.getTemplate()):null)).put("expr2", (expr2!=null?((StringTemplate)expr2.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commit_force"


	public static class write_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "write_clause"
	// PLSQLPrinter.g:1786:1: write_clause : ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? ) -> commit_statement_write_clause(is_wait=$WAIT_VK != nullis_nowait=$PLSQL_RESERVED_NOWAIT != nullis_immediate=$IMMEDIATE_VK != nullis_batch=$BATCH_VK != null);
	public final PLSQLPrinter.write_clause_return write_clause() throws RecognitionException {
		PLSQLPrinter.write_clause_return retval = new PLSQLPrinter.write_clause_return();
		retval.start = input.LT(1);

		CommonTree WAIT_VK327=null;
		CommonTree PLSQL_RESERVED_NOWAIT328=null;
		CommonTree IMMEDIATE_VK329=null;
		CommonTree BATCH_VK330=null;

		try {
			// PLSQLPrinter.g:1787:5: ( ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? ) -> commit_statement_write_clause(is_wait=$WAIT_VK != nullis_nowait=$PLSQL_RESERVED_NOWAIT != nullis_immediate=$IMMEDIATE_VK != nullis_batch=$BATCH_VK != null))
			// PLSQLPrinter.g:1787:10: ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? )
			{
			match(input,WRITE_VK,FOLLOW_WRITE_VK_in_write_clause17707); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1787:21: ( WAIT_VK | PLSQL_RESERVED_NOWAIT )?
				int alt391=3;
				int LA391_0 = input.LA(1);
				if ( (LA391_0==WAIT_VK) ) {
					alt391=1;
				}
				else if ( (LA391_0==PLSQL_RESERVED_NOWAIT) ) {
					alt391=2;
				}
				switch (alt391) {
					case 1 :
						// PLSQLPrinter.g:1787:22: WAIT_VK
						{
						WAIT_VK327=(CommonTree)match(input,WAIT_VK,FOLLOW_WAIT_VK_in_write_clause17710); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1787:30: PLSQL_RESERVED_NOWAIT
						{
						PLSQL_RESERVED_NOWAIT328=(CommonTree)match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_write_clause17712); 
						}
						break;

				}

				// PLSQLPrinter.g:1787:54: ( IMMEDIATE_VK | BATCH_VK )?
				int alt392=3;
				int LA392_0 = input.LA(1);
				if ( (LA392_0==IMMEDIATE_VK) ) {
					alt392=1;
				}
				else if ( (LA392_0==BATCH_VK) ) {
					alt392=2;
				}
				switch (alt392) {
					case 1 :
						// PLSQLPrinter.g:1787:55: IMMEDIATE_VK
						{
						IMMEDIATE_VK329=(CommonTree)match(input,IMMEDIATE_VK,FOLLOW_IMMEDIATE_VK_in_write_clause17717); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1787:68: BATCH_VK
						{
						BATCH_VK330=(CommonTree)match(input,BATCH_VK,FOLLOW_BATCH_VK_in_write_clause17719); 
						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1788:5: -> commit_statement_write_clause(is_wait=$WAIT_VK != nullis_nowait=$PLSQL_RESERVED_NOWAIT != nullis_immediate=$IMMEDIATE_VK != nullis_batch=$BATCH_VK != null)
			{
				retval.st = templateLib.getInstanceOf("commit_statement_write_clause",new STAttrMap().put("is_wait", WAIT_VK327 != null).put("is_nowait", PLSQL_RESERVED_NOWAIT328 != null).put("is_immediate", IMMEDIATE_VK329 != null).put("is_batch", BATCH_VK330 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "write_clause"


	public static class rollback_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "rollback_statement"
	// PLSQLPrinter.g:1793:1: rollback_statement : ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? ) -> rollback_statement(is_work=$WORK_VK != nullis_to_savepoint=$SQL92_RESERVED_TO != nullsavepoint_name=$savepoint_name.stis_force=$FORCE_VK !=nullforce_string=$CHAR_STRING.text);
	public final PLSQLPrinter.rollback_statement_return rollback_statement() throws RecognitionException {
		PLSQLPrinter.rollback_statement_return retval = new PLSQLPrinter.rollback_statement_return();
		retval.start = input.LT(1);

		CommonTree WORK_VK331=null;
		CommonTree SQL92_RESERVED_TO332=null;
		CommonTree FORCE_VK334=null;
		CommonTree CHAR_STRING335=null;
		TreeRuleReturnScope savepoint_name333 =null;

		try {
			// PLSQLPrinter.g:1794:5: ( ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? ) -> rollback_statement(is_work=$WORK_VK != nullis_to_savepoint=$SQL92_RESERVED_TO != nullsavepoint_name=$savepoint_name.stis_force=$FORCE_VK !=nullforce_string=$CHAR_STRING.text))
			// PLSQLPrinter.g:1794:11: ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? )
			{
			match(input,ROLLBACK_VK,FOLLOW_ROLLBACK_VK_in_rollback_statement17795); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1794:25: ( WORK_VK )?
				int alt393=2;
				int LA393_0 = input.LA(1);
				if ( (LA393_0==WORK_VK) ) {
					alt393=1;
				}
				switch (alt393) {
					case 1 :
						// PLSQLPrinter.g:1794:25: WORK_VK
						{
						WORK_VK331=(CommonTree)match(input,WORK_VK,FOLLOW_WORK_VK_in_rollback_statement17797); 
						}
						break;

				}

				// PLSQLPrinter.g:1795:15: ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )?
				int alt394=3;
				int LA394_0 = input.LA(1);
				if ( (LA394_0==SQL92_RESERVED_TO) ) {
					alt394=1;
				}
				else if ( (LA394_0==FORCE_VK) ) {
					alt394=2;
				}
				switch (alt394) {
					case 1 :
						// PLSQLPrinter.g:1795:20: ^( SQL92_RESERVED_TO savepoint_name )
						{
						SQL92_RESERVED_TO332=(CommonTree)match(input,SQL92_RESERVED_TO,FOLLOW_SQL92_RESERVED_TO_in_rollback_statement17821); 
						match(input, Token.DOWN, null); 
						pushFollow(FOLLOW_savepoint_name_in_rollback_statement17823);
						savepoint_name333=savepoint_name();
						state._fsp--;

						match(input, Token.UP, null); 

						}
						break;
					case 2 :
						// PLSQLPrinter.g:1796:20: ^( FORCE_VK CHAR_STRING )
						{
						FORCE_VK334=(CommonTree)match(input,FORCE_VK,FOLLOW_FORCE_VK_in_rollback_statement17846); 
						match(input, Token.DOWN, null); 
						CHAR_STRING335=(CommonTree)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_rollback_statement17848); 
						match(input, Token.UP, null); 

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1799:9: -> rollback_statement(is_work=$WORK_VK != nullis_to_savepoint=$SQL92_RESERVED_TO != nullsavepoint_name=$savepoint_name.stis_force=$FORCE_VK !=nullforce_string=$CHAR_STRING.text)
			{
				retval.st = templateLib.getInstanceOf("rollback_statement",new STAttrMap().put("is_work", WORK_VK331 != null).put("is_to_savepoint", SQL92_RESERVED_TO332 != null).put("savepoint_name", (savepoint_name333!=null?((StringTemplate)savepoint_name333.getTemplate()):null)).put("is_force", FORCE_VK334 !=null).put("force_string", (CHAR_STRING335!=null?CHAR_STRING335.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rollback_statement"


	public static class savepoint_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "savepoint_statement"
	// PLSQLPrinter.g:1804:1: savepoint_statement : ^( SAVEPOINT_VK savepoint_name ) -> savepoint_statement(name=$savepoint_name.st);
	public final PLSQLPrinter.savepoint_statement_return savepoint_statement() throws RecognitionException {
		PLSQLPrinter.savepoint_statement_return retval = new PLSQLPrinter.savepoint_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope savepoint_name336 =null;

		try {
			// PLSQLPrinter.g:1805:5: ( ^( SAVEPOINT_VK savepoint_name ) -> savepoint_statement(name=$savepoint_name.st))
			// PLSQLPrinter.g:1805:10: ^( SAVEPOINT_VK savepoint_name )
			{
			match(input,SAVEPOINT_VK,FOLLOW_SAVEPOINT_VK_in_savepoint_statement17963); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_savepoint_name_in_savepoint_statement17965);
			savepoint_name336=savepoint_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1806:5: -> savepoint_statement(name=$savepoint_name.st)
			{
				retval.st = templateLib.getInstanceOf("savepoint_statement",new STAttrMap().put("name", (savepoint_name336!=null?((StringTemplate)savepoint_name336.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "savepoint_statement"


	public static class pipe_row_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pipe_row_statement"
	// PLSQLPrinter.g:1809:1: pipe_row_statement : ^( PIPE_ROW expression ) -> pipe_row_statement(expression=$expression.st);
	public final PLSQLPrinter.pipe_row_statement_return pipe_row_statement() throws RecognitionException {
		PLSQLPrinter.pipe_row_statement_return retval = new PLSQLPrinter.pipe_row_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression337 =null;

		try {
			// PLSQLPrinter.g:1810:5: ( ^( PIPE_ROW expression ) -> pipe_row_statement(expression=$expression.st))
			// PLSQLPrinter.g:1810:10: ^( PIPE_ROW expression )
			{
			match(input,PIPE_ROW,FOLLOW_PIPE_ROW_in_pipe_row_statement18007); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_pipe_row_statement18009);
			expression337=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1811:5: -> pipe_row_statement(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("pipe_row_statement",new STAttrMap().put("expression", (expression337!=null?((StringTemplate)expression337.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pipe_row_statement"


	public static class expression_list_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "expression_list"
	// PLSQLPrinter.g:1818:1: expression_list : ^( EXPR_LIST (expressions+= expression )* ) -> expression_list(expressions=$expressions);
	public final PLSQLPrinter.expression_list_return expression_list() throws RecognitionException {
		PLSQLPrinter.expression_list_return retval = new PLSQLPrinter.expression_list_return();
		retval.start = input.LT(1);

		List<Object> list_expressions=null;
		RuleReturnScope expressions = null;
		try {
			// PLSQLPrinter.g:1819:5: ( ^( EXPR_LIST (expressions+= expression )* ) -> expression_list(expressions=$expressions))
			// PLSQLPrinter.g:1819:10: ^( EXPR_LIST (expressions+= expression )* )
			{
			match(input,EXPR_LIST,FOLLOW_EXPR_LIST_in_expression_list18050); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1819:33: (expressions+= expression )*
				loop395:
				while (true) {
					int alt395=2;
					int LA395_0 = input.LA(1);
					if ( (LA395_0==EXPR||LA395_0==LOGIC_EXPR) ) {
						alt395=1;
					}

					switch (alt395) {
					case 1 :
						// PLSQLPrinter.g:1819:33: expressions+= expression
						{
						pushFollow(FOLLOW_expression_in_expression_list18054);
						expressions=expression();
						state._fsp--;

						if (list_expressions==null) list_expressions=new ArrayList<Object>();
						list_expressions.add(expressions.getTemplate());
						}
						break;

					default :
						break loop395;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1820:5: -> expression_list(expressions=$expressions)
			{
				retval.st = templateLib.getInstanceOf("expression_list",new STAttrMap().put("expressions", list_expressions));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression_list"


	public static class expression_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "expression"
	// PLSQLPrinter.g:1823:1: expression : ( ^( LOGIC_EXPR expression_element ) -> {$expression_element.st}| ^( EXPR expression_element ) -> {$expression_element.st});
	public final PLSQLPrinter.expression_return expression() throws RecognitionException {
		PLSQLPrinter.expression_return retval = new PLSQLPrinter.expression_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression_element338 =null;
		TreeRuleReturnScope expression_element339 =null;

		try {
			// PLSQLPrinter.g:1824:5: ( ^( LOGIC_EXPR expression_element ) -> {$expression_element.st}| ^( EXPR expression_element ) -> {$expression_element.st})
			int alt396=2;
			int LA396_0 = input.LA(1);
			if ( (LA396_0==LOGIC_EXPR) ) {
				alt396=1;
			}
			else if ( (LA396_0==EXPR) ) {
				alt396=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 396, 0, input);
				throw nvae;
			}

			switch (alt396) {
				case 1 :
					// PLSQLPrinter.g:1824:10: ^( LOGIC_EXPR expression_element )
					{
					match(input,LOGIC_EXPR,FOLLOW_LOGIC_EXPR_in_expression18092); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression18094);
					expression_element338=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1824:43: -> {$expression_element.st}
					{
						retval.st = (expression_element338!=null?((StringTemplate)expression_element338.getTemplate()):null);
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1825:10: ^( EXPR expression_element )
					{
					match(input,EXPR,FOLLOW_EXPR_in_expression18111); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression18113);
					expression_element339=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1825:38: -> {$expression_element.st}
					{
						retval.st = (expression_element339!=null?((StringTemplate)expression_element339.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression"


	public static class expression_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "expression_element"
	// PLSQLPrinter.g:1828:1: expression_element : ( ^( ( SQL92_RESERVED_OR | SQL92_RESERVED_AND | EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP | CONCATENATION_OP | PLUS_SIGN | MINUS_SIGN | ASTERISK | SOLIDUS | PERCENT | MOD_VK | DIV_VK ) arg1= expression_element arg2= expression_element ) -> expression_element_generic_binop(op=oparg1=$arg1.starg2=$arg2.st)| ^( SQL92_RESERVED_NOT expr= expression_element ) -> expression_element_not(expr=$expr.st)| ^( ( IS_NOT_NULL | IS_NULL | IS_NOT_NAN | IS_NAN | IS_NOT_PRESENT | IS_PRESENT | IS_NOT_INFINITE | IS_INFINITE | IS_NOT_A_SET | IS_A_SET | IS_NOT_EMPTY | IS_EMPTY ) arg= expression_element ) -> expression_element_generic_suffix_unary_op(op=oparg=$arg.st)| ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^( IS_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( NOT_IN expr= expression_element in_elements ) -> expression_element_not_in(expr=$expr.stin_elements=$in_elements.st)| ^( SQL92_RESERVED_IN expr= expression_element in_elements ) -> expression_element_in(expr=$expr.stin_elements=$in_elements.st)| ^( NOT_BETWEEN expr= expression_element expr_low= expression_element expr_high= expression_element ) -> expression_element_between(expr=$expr.stis_not=trueexpr_low=$expr_low.stexpr_high=$expr_high.st)| ^( SQL92_RESERVED_BETWEEN expr= expression_element expr_low= expression_element expr_high= expression_element ) -> expression_element_between(expr=$expr.stis_not=falseexpr_low=$expr_low.stexpr_high=$expr_high.st)| ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK | NOT_LIKE ) text= expression_element pattern= expression_element (escape= expression_element )? ) -> expression_element_like(text=$text.stlike_op=oppattern=$pattern.stescape_char=$escape.st)| ^( PIPE_VK expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( UNARY_PLUS arg= expression_element ) -> expression_element_generic_prefix_unary_op(op=\"+\"is_spaced=falsearg=$arg.st)| ^( UNARY_MINUS arg= expression_element ) -> expression_element_generic_prefix_unary_op(op=\"-\"is_spaced=falsearg=$arg.st)| ^( SQL92_RESERVED_PRIOR arg= expression_element ) -> expression_element_prior(expr=$arg.st)| ^( NEW_VK expression ) -> template( \"not implemented: expression_element\"| ^( SQL92_RESERVED_DISTINCT expression_element ) -> template( \"not implemented: expression_element\"| ^( STANDARD_FUNCTION standard_function ) -> { $standard_function.st }| ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) (s_or_e= subquery |s_or_e= expression ) ) -> expression_element_quantified_expr(subquery_or_expression=$s_or_e.stis_some=$SOME_VK != nullis_any=$SQL92_RESERVED_ANY != nullis_all=$SQL92_RESERVED_ALL != nullis_exists=$SQL92_RESERVED_EXISTS != null)| ^( VECTOR_EXPR ( expression_element )+ ) -> template( \"not implemented: expression_element\"| ^( DATETIME_OP expression_element datetime_element ) -> template( \"not implemented: expression_element\"| model_expression -> template( \"not implemented: expression_element\"| ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? ) -> template( \"not implemented: expression_element\"| ^( DOT_ASTERISK tableview_name ) -> expression_element_dot_star(tableview_name=$tableview_name.st)| ^( ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK ) cursor_name ) -> expression_element_cursor_op(op=opcursor_name=$cursor_name.st)| ^( OUTER_JOIN_SIGN expr= expression_element ) -> expression_element_outer_join_sign(expr=$expr.st)| case_statement -> { $case_statement.st }| constant -> { $constant.st }| general_element -> { $general_element.st }| hosted_variable_name -> { $hosted_variable_name.st }| subquery -> in_parens(val=$subquery.st));
	public final PLSQLPrinter.expression_element_return expression_element() throws RecognitionException {
		PLSQLPrinter.expression_element_return retval = new PLSQLPrinter.expression_element_return();
		retval.start = input.LT(1);

		CommonTree SOME_VK343=null;
		CommonTree SQL92_RESERVED_ANY344=null;
		CommonTree SQL92_RESERVED_ALL345=null;
		CommonTree SQL92_RESERVED_EXISTS346=null;
		TreeRuleReturnScope arg1 =null;
		TreeRuleReturnScope arg2 =null;
		TreeRuleReturnScope expr =null;
		TreeRuleReturnScope arg =null;
		TreeRuleReturnScope expr_low =null;
		TreeRuleReturnScope expr_high =null;
		TreeRuleReturnScope text =null;
		TreeRuleReturnScope pattern =null;
		TreeRuleReturnScope escape =null;
		TreeRuleReturnScope s_or_e =null;
		TreeRuleReturnScope in_elements340 =null;
		TreeRuleReturnScope in_elements341 =null;
		TreeRuleReturnScope standard_function342 =null;
		TreeRuleReturnScope tableview_name347 =null;
		TreeRuleReturnScope cursor_name348 =null;
		TreeRuleReturnScope case_statement349 =null;
		TreeRuleReturnScope constant350 =null;
		TreeRuleReturnScope general_element351 =null;
		TreeRuleReturnScope hosted_variable_name352 =null;
		TreeRuleReturnScope subquery353 =null;

		 String op = null; 
		try {
			// PLSQLPrinter.g:1830:5: ( ^( ( SQL92_RESERVED_OR | SQL92_RESERVED_AND | EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP | CONCATENATION_OP | PLUS_SIGN | MINUS_SIGN | ASTERISK | SOLIDUS | PERCENT | MOD_VK | DIV_VK ) arg1= expression_element arg2= expression_element ) -> expression_element_generic_binop(op=oparg1=$arg1.starg2=$arg2.st)| ^( SQL92_RESERVED_NOT expr= expression_element ) -> expression_element_not(expr=$expr.st)| ^( ( IS_NOT_NULL | IS_NULL | IS_NOT_NAN | IS_NAN | IS_NOT_PRESENT | IS_PRESENT | IS_NOT_INFINITE | IS_INFINITE | IS_NOT_A_SET | IS_A_SET | IS_NOT_EMPTY | IS_EMPTY ) arg= expression_element ) -> expression_element_generic_suffix_unary_op(op=oparg=$arg.st)| ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^( IS_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( NOT_IN expr= expression_element in_elements ) -> expression_element_not_in(expr=$expr.stin_elements=$in_elements.st)| ^( SQL92_RESERVED_IN expr= expression_element in_elements ) -> expression_element_in(expr=$expr.stin_elements=$in_elements.st)| ^( NOT_BETWEEN expr= expression_element expr_low= expression_element expr_high= expression_element ) -> expression_element_between(expr=$expr.stis_not=trueexpr_low=$expr_low.stexpr_high=$expr_high.st)| ^( SQL92_RESERVED_BETWEEN expr= expression_element expr_low= expression_element expr_high= expression_element ) -> expression_element_between(expr=$expr.stis_not=falseexpr_low=$expr_low.stexpr_high=$expr_high.st)| ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK | NOT_LIKE ) text= expression_element pattern= expression_element (escape= expression_element )? ) -> expression_element_like(text=$text.stlike_op=oppattern=$pattern.stescape_char=$escape.st)| ^( PIPE_VK expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^( UNARY_PLUS arg= expression_element ) -> expression_element_generic_prefix_unary_op(op=\"+\"is_spaced=falsearg=$arg.st)| ^( UNARY_MINUS arg= expression_element ) -> expression_element_generic_prefix_unary_op(op=\"-\"is_spaced=falsearg=$arg.st)| ^( SQL92_RESERVED_PRIOR arg= expression_element ) -> expression_element_prior(expr=$arg.st)| ^( NEW_VK expression ) -> template( \"not implemented: expression_element\"| ^( SQL92_RESERVED_DISTINCT expression_element ) -> template( \"not implemented: expression_element\"| ^( STANDARD_FUNCTION standard_function ) -> { $standard_function.st }| ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) (s_or_e= subquery |s_or_e= expression ) ) -> expression_element_quantified_expr(subquery_or_expression=$s_or_e.stis_some=$SOME_VK != nullis_any=$SQL92_RESERVED_ANY != nullis_all=$SQL92_RESERVED_ALL != nullis_exists=$SQL92_RESERVED_EXISTS != null)| ^( VECTOR_EXPR ( expression_element )+ ) -> template( \"not implemented: expression_element\"| ^( DATETIME_OP expression_element datetime_element ) -> template( \"not implemented: expression_element\"| model_expression -> template( \"not implemented: expression_element\"| ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? ) -> template( \"not implemented: expression_element\"| ^( DOT_ASTERISK tableview_name ) -> expression_element_dot_star(tableview_name=$tableview_name.st)| ^( ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK ) cursor_name ) -> expression_element_cursor_op(op=opcursor_name=$cursor_name.st)| ^( OUTER_JOIN_SIGN expr= expression_element ) -> expression_element_outer_join_sign(expr=$expr.st)| case_statement -> { $case_statement.st }| constant -> { $constant.st }| general_element -> { $general_element.st }| hosted_variable_name -> { $hosted_variable_name.st }| subquery -> in_parens(val=$subquery.st))
			int alt410=31;
			switch ( input.LA(1) ) {
			case ASTERISK:
			case CONCATENATION_OP:
			case EQUALS_OP:
			case GREATER_THAN_OP:
			case GREATER_THAN_OR_EQUALS_OP:
			case LESS_THAN_OP:
			case LESS_THAN_OR_EQUALS_OP:
			case MINUS_SIGN:
			case NOT_EQUAL_OP:
			case PERCENT:
			case PLUS_SIGN:
			case SOLIDUS:
			case SQL92_RESERVED_AND:
			case SQL92_RESERVED_OR:
			case DIV_VK:
			case MOD_VK:
				{
				alt410=1;
				}
				break;
			case SQL92_RESERVED_NOT:
				{
				alt410=2;
				}
				break;
			case IS_A_SET:
			case IS_EMPTY:
			case IS_INFINITE:
			case IS_NAN:
			case IS_NOT_A_SET:
			case IS_NOT_EMPTY:
			case IS_NOT_INFINITE:
			case IS_NOT_NAN:
			case IS_NOT_NULL:
			case IS_NOT_PRESENT:
			case IS_NULL:
			case IS_PRESENT:
				{
				alt410=3;
				}
				break;
			case IS_NOT_OF_TYPE:
				{
				alt410=4;
				}
				break;
			case IS_OF_TYPE:
				{
				alt410=5;
				}
				break;
			case MEMBER_VK:
			case SUBMULTISET_VK:
				{
				alt410=6;
				}
				break;
			case NOT_IN:
				{
				alt410=7;
				}
				break;
			case SQL92_RESERVED_IN:
				{
				alt410=8;
				}
				break;
			case NOT_BETWEEN:
				{
				alt410=9;
				}
				break;
			case SQL92_RESERVED_BETWEEN:
				{
				alt410=10;
				}
				break;
			case SQL92_RESERVED_LIKE:
			case LIKE2_VK:
			case LIKE4_VK:
			case LIKEC_VK:
			case NOT_LIKE:
				{
				alt410=11;
				}
				break;
			case PIPE_VK:
				{
				alt410=12;
				}
				break;
			case UNARY_PLUS:
				{
				alt410=13;
				}
				break;
			case UNARY_MINUS:
				{
				alt410=14;
				}
				break;
			case SQL92_RESERVED_PRIOR:
				{
				alt410=15;
				}
				break;
			case NEW_VK:
				{
				alt410=16;
				}
				break;
			case SQL92_RESERVED_DISTINCT:
				{
				alt410=17;
				}
				break;
			case STANDARD_FUNCTION:
				{
				alt410=18;
				}
				break;
			case SQL92_RESERVED_ALL:
			case SQL92_RESERVED_ANY:
			case SQL92_RESERVED_EXISTS:
			case SOME_VK:
				{
				alt410=19;
				}
				break;
			case VECTOR_EXPR:
				{
				alt410=20;
				}
				break;
			case DATETIME_OP:
				{
				alt410=21;
				}
				break;
			case MODEL_EXPRESSION:
				{
				alt410=22;
				}
				break;
			case KEEP_VK:
				{
				alt410=23;
				}
				break;
			case DOT_ASTERISK:
				{
				alt410=24;
				}
				break;
			case PERCENT_FOUND_VK:
			case PERCENT_ISOPEN_VK:
			case PERCENT_NOTFOUND_VK:
			case PERCENT_ROWCOUNT_VK:
				{
				alt410=25;
				}
				break;
			case OUTER_JOIN_SIGN:
				{
				alt410=26;
				}
				break;
			case SEARCHED_CASE:
			case SIMPLE_CASE:
				{
				alt410=27;
				}
				break;
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case EXACT_NUM_LIT:
			case SQL92_RESERVED_DEFAULT:
			case SQL92_RESERVED_FALSE:
			case SQL92_RESERVED_NULL:
			case SQL92_RESERVED_TRUE:
			case UNSIGNED_INTEGER:
			case CONSTANT_NEGATED:
			case DBTIMEZONE_VK:
			case MAXVALUE_VK:
			case MINVALUE_VK:
			case SESSIONTIMEZONE_VK:
				{
				alt410=28;
				}
				break;
			case CASCATED_ELEMENT:
				{
				alt410=29;
				}
				break;
			case HOSTED_VARIABLE_NAME:
				{
				alt410=30;
				}
				break;
			case SUBQUERY:
				{
				alt410=31;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 410, 0, input);
				throw nvae;
			}
			switch (alt410) {
				case 1 :
					// PLSQLPrinter.g:1830:10: ^( ( SQL92_RESERVED_OR | SQL92_RESERVED_AND | EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP | CONCATENATION_OP | PLUS_SIGN | MINUS_SIGN | ASTERISK | SOLIDUS | PERCENT | MOD_VK | DIV_VK ) arg1= expression_element arg2= expression_element )
					{
					// PLSQLPrinter.g:1831:11: ( SQL92_RESERVED_OR | SQL92_RESERVED_AND | EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP | CONCATENATION_OP | PLUS_SIGN | MINUS_SIGN | ASTERISK | SOLIDUS | PERCENT | MOD_VK | DIV_VK )
					int alt397=16;
					switch ( input.LA(1) ) {
					case SQL92_RESERVED_OR:
						{
						alt397=1;
						}
						break;
					case SQL92_RESERVED_AND:
						{
						alt397=2;
						}
						break;
					case EQUALS_OP:
						{
						alt397=3;
						}
						break;
					case NOT_EQUAL_OP:
						{
						alt397=4;
						}
						break;
					case LESS_THAN_OP:
						{
						alt397=5;
						}
						break;
					case GREATER_THAN_OP:
						{
						alt397=6;
						}
						break;
					case LESS_THAN_OR_EQUALS_OP:
						{
						alt397=7;
						}
						break;
					case GREATER_THAN_OR_EQUALS_OP:
						{
						alt397=8;
						}
						break;
					case CONCATENATION_OP:
						{
						alt397=9;
						}
						break;
					case PLUS_SIGN:
						{
						alt397=10;
						}
						break;
					case MINUS_SIGN:
						{
						alt397=11;
						}
						break;
					case ASTERISK:
						{
						alt397=12;
						}
						break;
					case SOLIDUS:
						{
						alt397=13;
						}
						break;
					case PERCENT:
						{
						alt397=14;
						}
						break;
					case MOD_VK:
						{
						alt397=15;
						}
						break;
					case DIV_VK:
						{
						alt397=16;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 397, 0, input);
						throw nvae;
					}
					switch (alt397) {
						case 1 :
							// PLSQLPrinter.g:1832:13: SQL92_RESERVED_OR
							{
							match(input,SQL92_RESERVED_OR,FOLLOW_SQL92_RESERVED_OR_in_expression_element18170); 
							 op = "or"; 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1833:15: SQL92_RESERVED_AND
							{
							match(input,SQL92_RESERVED_AND,FOLLOW_SQL92_RESERVED_AND_in_expression_element18188); 
							 op = "and"; 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1834:15: EQUALS_OP
							{
							match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_expression_element18206); 
							 op = "="; 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1835:15: NOT_EQUAL_OP
							{
							match(input,NOT_EQUAL_OP,FOLLOW_NOT_EQUAL_OP_in_expression_element18224); 
							 op = "<>"; 
							}
							break;
						case 5 :
							// PLSQLPrinter.g:1836:15: LESS_THAN_OP
							{
							match(input,LESS_THAN_OP,FOLLOW_LESS_THAN_OP_in_expression_element18242); 
							 op = "<"; 
							}
							break;
						case 6 :
							// PLSQLPrinter.g:1837:15: GREATER_THAN_OP
							{
							match(input,GREATER_THAN_OP,FOLLOW_GREATER_THAN_OP_in_expression_element18260); 
							 op = ">"; 
							}
							break;
						case 7 :
							// PLSQLPrinter.g:1838:15: LESS_THAN_OR_EQUALS_OP
							{
							match(input,LESS_THAN_OR_EQUALS_OP,FOLLOW_LESS_THAN_OR_EQUALS_OP_in_expression_element18278); 
							 op = "<="; 
							}
							break;
						case 8 :
							// PLSQLPrinter.g:1839:15: GREATER_THAN_OR_EQUALS_OP
							{
							match(input,GREATER_THAN_OR_EQUALS_OP,FOLLOW_GREATER_THAN_OR_EQUALS_OP_in_expression_element18296); 
							 op = ">="; 
							}
							break;
						case 9 :
							// PLSQLPrinter.g:1840:15: CONCATENATION_OP
							{
							match(input,CONCATENATION_OP,FOLLOW_CONCATENATION_OP_in_expression_element18314); 
							 op = "||"; 
							}
							break;
						case 10 :
							// PLSQLPrinter.g:1841:15: PLUS_SIGN
							{
							match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_expression_element18332); 
							 op = "+"; 
							}
							break;
						case 11 :
							// PLSQLPrinter.g:1842:15: MINUS_SIGN
							{
							match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_expression_element18350); 
							 op = "-"; 
							}
							break;
						case 12 :
							// PLSQLPrinter.g:1843:15: ASTERISK
							{
							match(input,ASTERISK,FOLLOW_ASTERISK_in_expression_element18368); 
							 op = "*"; 
							}
							break;
						case 13 :
							// PLSQLPrinter.g:1844:15: SOLIDUS
							{
							match(input,SOLIDUS,FOLLOW_SOLIDUS_in_expression_element18386); 
							 op = "/"; 
							}
							break;
						case 14 :
							// PLSQLPrinter.g:1845:15: PERCENT
							{
							match(input,PERCENT,FOLLOW_PERCENT_in_expression_element18404); 
							 op = "%"; 
							}
							break;
						case 15 :
							// PLSQLPrinter.g:1846:15: MOD_VK
							{
							match(input,MOD_VK,FOLLOW_MOD_VK_in_expression_element18422); 
							 op = "mod"; 
							}
							break;
						case 16 :
							// PLSQLPrinter.g:1847:15: DIV_VK
							{
							match(input,DIV_VK,FOLLOW_DIV_VK_in_expression_element18440); 
							 op = "div"; 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18468);
					arg1=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element18472);
					arg2=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1851:5: -> expression_element_generic_binop(op=oparg1=$arg1.starg2=$arg2.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_generic_binop",new STAttrMap().put("op", op).put("arg1", (arg1!=null?((StringTemplate)arg1.getTemplate()):null)).put("arg2", (arg2!=null?((StringTemplate)arg2.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1852:10: ^( SQL92_RESERVED_NOT expr= expression_element )
					{
					match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_expression_element18520); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18524);
					expr=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1853:5: -> expression_element_not(expr=$expr.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_not",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1854:10: ^( ( IS_NOT_NULL | IS_NULL | IS_NOT_NAN | IS_NAN | IS_NOT_PRESENT | IS_PRESENT | IS_NOT_INFINITE | IS_INFINITE | IS_NOT_A_SET | IS_A_SET | IS_NOT_EMPTY | IS_EMPTY ) arg= expression_element )
					{
					// PLSQLPrinter.g:1855:13: ( IS_NOT_NULL | IS_NULL | IS_NOT_NAN | IS_NAN | IS_NOT_PRESENT | IS_PRESENT | IS_NOT_INFINITE | IS_INFINITE | IS_NOT_A_SET | IS_A_SET | IS_NOT_EMPTY | IS_EMPTY )
					int alt398=12;
					switch ( input.LA(1) ) {
					case IS_NOT_NULL:
						{
						alt398=1;
						}
						break;
					case IS_NULL:
						{
						alt398=2;
						}
						break;
					case IS_NOT_NAN:
						{
						alt398=3;
						}
						break;
					case IS_NAN:
						{
						alt398=4;
						}
						break;
					case IS_NOT_PRESENT:
						{
						alt398=5;
						}
						break;
					case IS_PRESENT:
						{
						alt398=6;
						}
						break;
					case IS_NOT_INFINITE:
						{
						alt398=7;
						}
						break;
					case IS_INFINITE:
						{
						alt398=8;
						}
						break;
					case IS_NOT_A_SET:
						{
						alt398=9;
						}
						break;
					case IS_A_SET:
						{
						alt398=10;
						}
						break;
					case IS_NOT_EMPTY:
						{
						alt398=11;
						}
						break;
					case IS_EMPTY:
						{
						alt398=12;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 398, 0, input);
						throw nvae;
					}
					switch (alt398) {
						case 1 :
							// PLSQLPrinter.g:1856:15: IS_NOT_NULL
							{
							match(input,IS_NOT_NULL,FOLLOW_IS_NOT_NULL_in_expression_element18581); 
							 op = "is not null"; 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1857:17: IS_NULL
							{
							match(input,IS_NULL,FOLLOW_IS_NULL_in_expression_element18601); 
							 op = "is null"; 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1858:17: IS_NOT_NAN
							{
							match(input,IS_NOT_NAN,FOLLOW_IS_NOT_NAN_in_expression_element18621); 
							 op = "is not nan"; 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1859:17: IS_NAN
							{
							match(input,IS_NAN,FOLLOW_IS_NAN_in_expression_element18641); 
							 op = "is nan"; 
							}
							break;
						case 5 :
							// PLSQLPrinter.g:1860:17: IS_NOT_PRESENT
							{
							match(input,IS_NOT_PRESENT,FOLLOW_IS_NOT_PRESENT_in_expression_element18661); 
							 op = "is not present"; 
							}
							break;
						case 6 :
							// PLSQLPrinter.g:1861:17: IS_PRESENT
							{
							match(input,IS_PRESENT,FOLLOW_IS_PRESENT_in_expression_element18681); 
							 op = "is present"; 
							}
							break;
						case 7 :
							// PLSQLPrinter.g:1862:17: IS_NOT_INFINITE
							{
							match(input,IS_NOT_INFINITE,FOLLOW_IS_NOT_INFINITE_in_expression_element18701); 
							 op = "is not infinite"; 
							}
							break;
						case 8 :
							// PLSQLPrinter.g:1863:17: IS_INFINITE
							{
							match(input,IS_INFINITE,FOLLOW_IS_INFINITE_in_expression_element18721); 
							 op = "is infinite"; 
							}
							break;
						case 9 :
							// PLSQLPrinter.g:1864:17: IS_NOT_A_SET
							{
							match(input,IS_NOT_A_SET,FOLLOW_IS_NOT_A_SET_in_expression_element18741); 
							 op = "is not a set"; 
							}
							break;
						case 10 :
							// PLSQLPrinter.g:1865:17: IS_A_SET
							{
							match(input,IS_A_SET,FOLLOW_IS_A_SET_in_expression_element18761); 
							 op = "is a set"; 
							}
							break;
						case 11 :
							// PLSQLPrinter.g:1866:17: IS_NOT_EMPTY
							{
							match(input,IS_NOT_EMPTY,FOLLOW_IS_NOT_EMPTY_in_expression_element18781); 
							 op = "is not empty"; 
							}
							break;
						case 12 :
							// PLSQLPrinter.g:1867:17: IS_EMPTY
							{
							match(input,IS_EMPTY,FOLLOW_IS_EMPTY_in_expression_element18801); 
							 op = "is empty"; 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18833);
					arg=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1871:5: -> expression_element_generic_suffix_unary_op(op=oparg=$arg.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_generic_suffix_unary_op",new STAttrMap().put("op", op).put("arg", (arg!=null?((StringTemplate)arg.getTemplate()):null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1872:10: ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ )
					{
					match(input,IS_NOT_OF_TYPE,FOLLOW_IS_NOT_OF_TYPE_in_expression_element18877); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18879);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1872:46: ( type_spec )+
					int cnt399=0;
					loop399:
					while (true) {
						int alt399=2;
						int LA399_0 = input.LA(1);
						if ( (LA399_0==CUSTOM_TYPE||LA399_0==INTERVAL_DATATYPE||LA399_0==NATIVE_DATATYPE) ) {
							alt399=1;
						}

						switch (alt399) {
						case 1 :
							// PLSQLPrinter.g:1872:46: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_expression_element18881);
							type_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt399 >= 1 ) break loop399;
							EarlyExitException eee = new EarlyExitException(399, input);
							throw eee;
						}
						cnt399++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1873:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1874:10: ^( IS_OF_TYPE expression_element ( type_spec )+ )
					{
					match(input,IS_OF_TYPE,FOLLOW_IS_OF_TYPE_in_expression_element18909); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18911);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1874:42: ( type_spec )+
					int cnt400=0;
					loop400:
					while (true) {
						int alt400=2;
						int LA400_0 = input.LA(1);
						if ( (LA400_0==CUSTOM_TYPE||LA400_0==INTERVAL_DATATYPE||LA400_0==NATIVE_DATATYPE) ) {
							alt400=1;
						}

						switch (alt400) {
						case 1 :
							// PLSQLPrinter.g:1874:42: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_expression_element18913);
							type_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt400 >= 1 ) break loop400;
							EarlyExitException eee = new EarlyExitException(400, input);
							throw eee;
						}
						cnt400++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1875:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:1877:10: ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element )
					{
					// PLSQLPrinter.g:1877:12: ( MEMBER_VK | SUBMULTISET_VK )
					int alt401=2;
					int LA401_0 = input.LA(1);
					if ( (LA401_0==MEMBER_VK) ) {
						alt401=1;
					}
					else if ( (LA401_0==SUBMULTISET_VK) ) {
						alt401=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 401, 0, input);
						throw nvae;
					}

					switch (alt401) {
						case 1 :
							// PLSQLPrinter.g:1877:13: MEMBER_VK
							{
							match(input,MEMBER_VK,FOLLOW_MEMBER_VK_in_expression_element18943); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1877:23: SUBMULTISET_VK
							{
							match(input,SUBMULTISET_VK,FOLLOW_SUBMULTISET_VK_in_expression_element18945); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18948);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element18950);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1878:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:1880:10: ^( NOT_IN expr= expression_element in_elements )
					{
					match(input,NOT_IN,FOLLOW_NOT_IN_in_expression_element18978); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element18982);
					expr=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_in_elements_in_expression_element18984);
					in_elements340=in_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1881:5: -> expression_element_not_in(expr=$expr.stin_elements=$in_elements.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_not_in",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("in_elements", (in_elements340!=null?((StringTemplate)in_elements340.getTemplate()):null)));
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:1882:10: ^( SQL92_RESERVED_IN expr= expression_element in_elements )
					{
					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_expression_element19017); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element19021);
					expr=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_in_elements_in_expression_element19023);
					in_elements341=in_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1883:5: -> expression_element_in(expr=$expr.stin_elements=$in_elements.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_in",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("in_elements", (in_elements341!=null?((StringTemplate)in_elements341.getTemplate()):null)));
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:1884:10: ^( NOT_BETWEEN expr= expression_element expr_low= expression_element expr_high= expression_element )
					{
					match(input,NOT_BETWEEN,FOLLOW_NOT_BETWEEN_in_expression_element19056); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element19060);
					expr=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element19064);
					expr_low=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element19068);
					expr_high=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1885:5: -> expression_element_between(expr=$expr.stis_not=trueexpr_low=$expr_low.stexpr_high=$expr_high.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_between",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("is_not", true).put("expr_low", (expr_low!=null?((StringTemplate)expr_low.getTemplate()):null)).put("expr_high", (expr_high!=null?((StringTemplate)expr_high.getTemplate()):null)));
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:1886:10: ^( SQL92_RESERVED_BETWEEN expr= expression_element expr_low= expression_element expr_high= expression_element )
					{
					match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_expression_element19111); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element19115);
					expr=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element19119);
					expr_low=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element19123);
					expr_high=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1887:5: -> expression_element_between(expr=$expr.stis_not=falseexpr_low=$expr_low.stexpr_high=$expr_high.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_between",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("is_not", false).put("expr_low", (expr_low!=null?((StringTemplate)expr_low.getTemplate()):null)).put("expr_high", (expr_high!=null?((StringTemplate)expr_high.getTemplate()):null)));
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:1888:10: ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK | NOT_LIKE ) text= expression_element pattern= expression_element (escape= expression_element )? )
					{
					// PLSQLPrinter.g:1889:13: ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK | NOT_LIKE )
					int alt402=5;
					switch ( input.LA(1) ) {
					case SQL92_RESERVED_LIKE:
						{
						alt402=1;
						}
						break;
					case LIKEC_VK:
						{
						alt402=2;
						}
						break;
					case LIKE2_VK:
						{
						alt402=3;
						}
						break;
					case LIKE4_VK:
						{
						alt402=4;
						}
						break;
					case NOT_LIKE:
						{
						alt402=5;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 402, 0, input);
						throw nvae;
					}
					switch (alt402) {
						case 1 :
							// PLSQLPrinter.g:1890:15: SQL92_RESERVED_LIKE
							{
							match(input,SQL92_RESERVED_LIKE,FOLLOW_SQL92_RESERVED_LIKE_in_expression_element19195); 
							 op = "like"; 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1891:17: LIKEC_VK
							{
							match(input,LIKEC_VK,FOLLOW_LIKEC_VK_in_expression_element19215); 
							 op = "likec"; 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1892:17: LIKE2_VK
							{
							match(input,LIKE2_VK,FOLLOW_LIKE2_VK_in_expression_element19235); 
							 op = "like2"; 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1893:17: LIKE4_VK
							{
							match(input,LIKE4_VK,FOLLOW_LIKE4_VK_in_expression_element19255); 
							 op = "like4"; 
							}
							break;
						case 5 :
							// PLSQLPrinter.g:1894:17: NOT_LIKE
							{
							match(input,NOT_LIKE,FOLLOW_NOT_LIKE_in_expression_element19275); 
							 op = "not like"; 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element19307);
					text=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element19323);
					pattern=expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1898:19: (escape= expression_element )?
					int alt403=2;
					int LA403_0 = input.LA(1);
					if ( (LA403_0==APPROXIMATE_NUM_LIT||LA403_0==ASTERISK||LA403_0==CHAR_STRING||LA403_0==CONCATENATION_OP||(LA403_0 >= EQUALS_OP && LA403_0 <= EXACT_NUM_LIT)||(LA403_0 >= GREATER_THAN_OP && LA403_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA403_0 >= LESS_THAN_OP && LA403_0 <= LESS_THAN_OR_EQUALS_OP)||LA403_0==MINUS_SIGN||LA403_0==NOT_EQUAL_OP||LA403_0==PERCENT||LA403_0==PLUS_SIGN||LA403_0==SOLIDUS||LA403_0==SQL92_RESERVED_ALL||(LA403_0 >= SQL92_RESERVED_AND && LA403_0 <= SQL92_RESERVED_ANY)||LA403_0==SQL92_RESERVED_BETWEEN||LA403_0==SQL92_RESERVED_DEFAULT||LA403_0==SQL92_RESERVED_DISTINCT||(LA403_0 >= SQL92_RESERVED_EXISTS && LA403_0 <= SQL92_RESERVED_FALSE)||LA403_0==SQL92_RESERVED_IN||(LA403_0 >= SQL92_RESERVED_LIKE && LA403_0 <= SQL92_RESERVED_NULL)||LA403_0==SQL92_RESERVED_OR||LA403_0==SQL92_RESERVED_PRIOR||LA403_0==SQL92_RESERVED_TRUE||LA403_0==UNSIGNED_INTEGER||LA403_0==CASCATED_ELEMENT||LA403_0==CONSTANT_NEGATED||LA403_0==DATETIME_OP||LA403_0==DBTIMEZONE_VK||LA403_0==DIV_VK||LA403_0==DOT_ASTERISK||LA403_0==HOSTED_VARIABLE_NAME||(LA403_0 >= IS_A_SET && LA403_0 <= IS_PRESENT)||LA403_0==KEEP_VK||(LA403_0 >= LIKE2_VK && LA403_0 <= LIKEC_VK)||LA403_0==MAXVALUE_VK||LA403_0==MEMBER_VK||LA403_0==MINVALUE_VK||LA403_0==MODEL_EXPRESSION||LA403_0==MOD_VK||LA403_0==NEW_VK||LA403_0==NOT_BETWEEN||(LA403_0 >= NOT_IN && LA403_0 <= NOT_LIKE)||LA403_0==OUTER_JOIN_SIGN||(LA403_0 >= PERCENT_FOUND_VK && LA403_0 <= PERCENT_ROWCOUNT_VK)||LA403_0==PIPE_VK||LA403_0==SEARCHED_CASE||LA403_0==SESSIONTIMEZONE_VK||LA403_0==SIMPLE_CASE||LA403_0==SOME_VK||LA403_0==STANDARD_FUNCTION||LA403_0==SUBMULTISET_VK||LA403_0==SUBQUERY||(LA403_0 >= UNARY_MINUS && LA403_0 <= UNARY_PLUS)||LA403_0==VECTOR_EXPR) ) {
						alt403=1;
					}
					switch (alt403) {
						case 1 :
							// PLSQLPrinter.g:1898:19: escape= expression_element
							{
							pushFollow(FOLLOW_expression_element_in_expression_element19339);
							escape=expression_element();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1900:5: -> expression_element_like(text=$text.stlike_op=oppattern=$pattern.stescape_char=$escape.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_like",new STAttrMap().put("text", (text!=null?((StringTemplate)text.getTemplate()):null)).put("like_op", op).put("pattern", (pattern!=null?((StringTemplate)pattern.getTemplate()):null)).put("escape_char", (escape!=null?((StringTemplate)escape.getTemplate()):null)));
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:1902:10: ^( PIPE_VK expression_element expression_element )
					{
					match(input,PIPE_VK,FOLLOW_PIPE_VK_in_expression_element19399); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element19401);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element19403);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1903:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:1905:10: ^( UNARY_PLUS arg= expression_element )
					{
					match(input,UNARY_PLUS,FOLLOW_UNARY_PLUS_in_expression_element19431); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element19435);
					arg=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1906:5: -> expression_element_generic_prefix_unary_op(op=\"+\"is_spaced=falsearg=$arg.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_generic_prefix_unary_op",new STAttrMap().put("op", "+").put("is_spaced", false).put("arg", (arg!=null?((StringTemplate)arg.getTemplate()):null)));
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:1907:10: ^( UNARY_MINUS arg= expression_element )
					{
					match(input,UNARY_MINUS,FOLLOW_UNARY_MINUS_in_expression_element19473); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element19477);
					arg=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1908:5: -> expression_element_generic_prefix_unary_op(op=\"-\"is_spaced=falsearg=$arg.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_generic_prefix_unary_op",new STAttrMap().put("op", "-").put("is_spaced", false).put("arg", (arg!=null?((StringTemplate)arg.getTemplate()):null)));
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:1909:10: ^( SQL92_RESERVED_PRIOR arg= expression_element )
					{
					match(input,SQL92_RESERVED_PRIOR,FOLLOW_SQL92_RESERVED_PRIOR_in_expression_element19515); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element19519);
					arg=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1910:5: -> expression_element_prior(expr=$arg.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_prior",new STAttrMap().put("expr", (arg!=null?((StringTemplate)arg.getTemplate()):null)));
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:1911:10: ^( NEW_VK expression )
					{
					match(input,NEW_VK,FOLLOW_NEW_VK_in_expression_element19547); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_expression_element19549);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1912:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:1913:10: ^( SQL92_RESERVED_DISTINCT expression_element )
					{
					match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_expression_element19576); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element19578);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1914:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:1915:10: ^( STANDARD_FUNCTION standard_function )
					{
					match(input,STANDARD_FUNCTION,FOLLOW_STANDARD_FUNCTION_in_expression_element19605); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_standard_function_in_expression_element19607);
					standard_function342=standard_function();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1915:49: -> { $standard_function.st }
					{
						retval.st =  (standard_function342!=null?((StringTemplate)standard_function342.getTemplate()):null) ;
					}



					}
					break;
				case 19 :
					// PLSQLPrinter.g:1916:10: ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) (s_or_e= subquery |s_or_e= expression ) )
					{
					// PLSQLPrinter.g:1916:12: ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY )
					int alt404=4;
					switch ( input.LA(1) ) {
					case SOME_VK:
						{
						alt404=1;
						}
						break;
					case SQL92_RESERVED_EXISTS:
						{
						alt404=2;
						}
						break;
					case SQL92_RESERVED_ALL:
						{
						alt404=3;
						}
						break;
					case SQL92_RESERVED_ANY:
						{
						alt404=4;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 404, 0, input);
						throw nvae;
					}
					switch (alt404) {
						case 1 :
							// PLSQLPrinter.g:1916:13: SOME_VK
							{
							SOME_VK343=(CommonTree)match(input,SOME_VK,FOLLOW_SOME_VK_in_expression_element19625); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1916:21: SQL92_RESERVED_EXISTS
							{
							SQL92_RESERVED_EXISTS346=(CommonTree)match(input,SQL92_RESERVED_EXISTS,FOLLOW_SQL92_RESERVED_EXISTS_in_expression_element19627); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1916:43: SQL92_RESERVED_ALL
							{
							SQL92_RESERVED_ALL345=(CommonTree)match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_expression_element19629); 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1916:62: SQL92_RESERVED_ANY
							{
							SQL92_RESERVED_ANY344=(CommonTree)match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_expression_element19631); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1916:82: (s_or_e= subquery |s_or_e= expression )
					int alt405=2;
					int LA405_0 = input.LA(1);
					if ( (LA405_0==SUBQUERY) ) {
						alt405=1;
					}
					else if ( (LA405_0==EXPR||LA405_0==LOGIC_EXPR) ) {
						alt405=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 405, 0, input);
						throw nvae;
					}

					switch (alt405) {
						case 1 :
							// PLSQLPrinter.g:1916:83: s_or_e= subquery
							{
							pushFollow(FOLLOW_subquery_in_expression_element19637);
							s_or_e=subquery();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1916:99: s_or_e= expression
							{
							pushFollow(FOLLOW_expression_in_expression_element19641);
							s_or_e=expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1917:5: -> expression_element_quantified_expr(subquery_or_expression=$s_or_e.stis_some=$SOME_VK != nullis_any=$SQL92_RESERVED_ANY != nullis_all=$SQL92_RESERVED_ALL != nullis_exists=$SQL92_RESERVED_EXISTS != null)
					{
						retval.st = templateLib.getInstanceOf("expression_element_quantified_expr",new STAttrMap().put("subquery_or_expression", (s_or_e!=null?((StringTemplate)s_or_e.getTemplate()):null)).put("is_some", SOME_VK343 != null).put("is_any", SQL92_RESERVED_ANY344 != null).put("is_all", SQL92_RESERVED_ALL345 != null).put("is_exists", SQL92_RESERVED_EXISTS346 != null));
					}



					}
					break;
				case 20 :
					// PLSQLPrinter.g:1920:10: ^( VECTOR_EXPR ( expression_element )+ )
					{
					match(input,VECTOR_EXPR,FOLLOW_VECTOR_EXPR_in_expression_element19711); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1920:24: ( expression_element )+
					int cnt406=0;
					loop406:
					while (true) {
						int alt406=2;
						int LA406_0 = input.LA(1);
						if ( (LA406_0==APPROXIMATE_NUM_LIT||LA406_0==ASTERISK||LA406_0==CHAR_STRING||LA406_0==CONCATENATION_OP||(LA406_0 >= EQUALS_OP && LA406_0 <= EXACT_NUM_LIT)||(LA406_0 >= GREATER_THAN_OP && LA406_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA406_0 >= LESS_THAN_OP && LA406_0 <= LESS_THAN_OR_EQUALS_OP)||LA406_0==MINUS_SIGN||LA406_0==NOT_EQUAL_OP||LA406_0==PERCENT||LA406_0==PLUS_SIGN||LA406_0==SOLIDUS||LA406_0==SQL92_RESERVED_ALL||(LA406_0 >= SQL92_RESERVED_AND && LA406_0 <= SQL92_RESERVED_ANY)||LA406_0==SQL92_RESERVED_BETWEEN||LA406_0==SQL92_RESERVED_DEFAULT||LA406_0==SQL92_RESERVED_DISTINCT||(LA406_0 >= SQL92_RESERVED_EXISTS && LA406_0 <= SQL92_RESERVED_FALSE)||LA406_0==SQL92_RESERVED_IN||(LA406_0 >= SQL92_RESERVED_LIKE && LA406_0 <= SQL92_RESERVED_NULL)||LA406_0==SQL92_RESERVED_OR||LA406_0==SQL92_RESERVED_PRIOR||LA406_0==SQL92_RESERVED_TRUE||LA406_0==UNSIGNED_INTEGER||LA406_0==CASCATED_ELEMENT||LA406_0==CONSTANT_NEGATED||LA406_0==DATETIME_OP||LA406_0==DBTIMEZONE_VK||LA406_0==DIV_VK||LA406_0==DOT_ASTERISK||LA406_0==HOSTED_VARIABLE_NAME||(LA406_0 >= IS_A_SET && LA406_0 <= IS_PRESENT)||LA406_0==KEEP_VK||(LA406_0 >= LIKE2_VK && LA406_0 <= LIKEC_VK)||LA406_0==MAXVALUE_VK||LA406_0==MEMBER_VK||LA406_0==MINVALUE_VK||LA406_0==MODEL_EXPRESSION||LA406_0==MOD_VK||LA406_0==NEW_VK||LA406_0==NOT_BETWEEN||(LA406_0 >= NOT_IN && LA406_0 <= NOT_LIKE)||LA406_0==OUTER_JOIN_SIGN||(LA406_0 >= PERCENT_FOUND_VK && LA406_0 <= PERCENT_ROWCOUNT_VK)||LA406_0==PIPE_VK||LA406_0==SEARCHED_CASE||LA406_0==SESSIONTIMEZONE_VK||LA406_0==SIMPLE_CASE||LA406_0==SOME_VK||LA406_0==STANDARD_FUNCTION||LA406_0==SUBMULTISET_VK||LA406_0==SUBQUERY||(LA406_0 >= UNARY_MINUS && LA406_0 <= UNARY_PLUS)||LA406_0==VECTOR_EXPR) ) {
							alt406=1;
						}

						switch (alt406) {
						case 1 :
							// PLSQLPrinter.g:1920:24: expression_element
							{
							pushFollow(FOLLOW_expression_element_in_expression_element19713);
							expression_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt406 >= 1 ) break loop406;
							EarlyExitException eee = new EarlyExitException(406, input);
							throw eee;
						}
						cnt406++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1921:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 21 :
					// PLSQLPrinter.g:1923:10: ^( DATETIME_OP expression_element datetime_element )
					{
					match(input,DATETIME_OP,FOLLOW_DATETIME_OP_in_expression_element19742); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element19744);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_datetime_element_in_expression_element19746);
					datetime_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1924:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 22 :
					// PLSQLPrinter.g:1925:10: model_expression
					{
					pushFollow(FOLLOW_model_expression_in_expression_element19772);
					model_expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1926:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 23 :
					// PLSQLPrinter.g:1927:10: ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? )
					{
					match(input,KEEP_VK,FOLLOW_KEEP_VK_in_expression_element19798); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element19800);
					expression_element();
					state._fsp--;

					match(input,DENSE_RANK_VK,FOLLOW_DENSE_RANK_VK_in_expression_element19802); 
					// PLSQLPrinter.g:1927:53: ( FIRST_VK | LAST_VK )
					int alt407=2;
					int LA407_0 = input.LA(1);
					if ( (LA407_0==FIRST_VK) ) {
						alt407=1;
					}
					else if ( (LA407_0==LAST_VK) ) {
						alt407=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 407, 0, input);
						throw nvae;
					}

					switch (alt407) {
						case 1 :
							// PLSQLPrinter.g:1927:54: FIRST_VK
							{
							match(input,FIRST_VK,FOLLOW_FIRST_VK_in_expression_element19805); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1927:63: LAST_VK
							{
							match(input,LAST_VK,FOLLOW_LAST_VK_in_expression_element19807); 
							}
							break;

					}

					pushFollow(FOLLOW_order_by_clause_in_expression_element19810);
					order_by_clause();
					state._fsp--;

					// PLSQLPrinter.g:1927:88: ( over_clause )?
					int alt408=2;
					int LA408_0 = input.LA(1);
					if ( (LA408_0==OVER_VK) ) {
						alt408=1;
					}
					switch (alt408) {
						case 1 :
							// PLSQLPrinter.g:1927:88: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_expression_element19812);
							over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1928:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 24 :
					// PLSQLPrinter.g:1930:10: ^( DOT_ASTERISK tableview_name )
					{
					match(input,DOT_ASTERISK,FOLLOW_DOT_ASTERISK_in_expression_element19841); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_tableview_name_in_expression_element19843);
					tableview_name347=tableview_name();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1931:5: -> expression_element_dot_star(tableview_name=$tableview_name.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_dot_star",new STAttrMap().put("tableview_name", (tableview_name347!=null?((StringTemplate)tableview_name347.getTemplate()):null)));
					}



					}
					break;
				case 25 :
					// PLSQLPrinter.g:1932:10: ^( ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK ) cursor_name )
					{
					// PLSQLPrinter.g:1933:13: ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK )
					int alt409=4;
					switch ( input.LA(1) ) {
					case PERCENT_FOUND_VK:
						{
						alt409=1;
						}
						break;
					case PERCENT_NOTFOUND_VK:
						{
						alt409=2;
						}
						break;
					case PERCENT_ROWCOUNT_VK:
						{
						alt409=3;
						}
						break;
					case PERCENT_ISOPEN_VK:
						{
						alt409=4;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 409, 0, input);
						throw nvae;
					}
					switch (alt409) {
						case 1 :
							// PLSQLPrinter.g:1934:15: PERCENT_FOUND_VK
							{
							match(input,PERCENT_FOUND_VK,FOLLOW_PERCENT_FOUND_VK_in_expression_element19900); 
							 op = "%FOUND"; 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1935:16: PERCENT_NOTFOUND_VK
							{
							match(input,PERCENT_NOTFOUND_VK,FOLLOW_PERCENT_NOTFOUND_VK_in_expression_element19919); 
							 op = "%NOTFOUND"; 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1936:16: PERCENT_ROWCOUNT_VK
							{
							match(input,PERCENT_ROWCOUNT_VK,FOLLOW_PERCENT_ROWCOUNT_VK_in_expression_element19938); 
							 op = "%ROWCOUNT"; 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1937:16: PERCENT_ISOPEN_VK
							{
							match(input,PERCENT_ISOPEN_VK,FOLLOW_PERCENT_ISOPEN_VK_in_expression_element19957); 
							 op = "%ISOPEN"; 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_cursor_name_in_expression_element19987);
					cursor_name348=cursor_name();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1941:5: -> expression_element_cursor_op(op=opcursor_name=$cursor_name.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_cursor_op",new STAttrMap().put("op", op).put("cursor_name", (cursor_name348!=null?((StringTemplate)cursor_name348.getTemplate()):null)));
					}



					}
					break;
				case 26 :
					// PLSQLPrinter.g:1942:10: ^( OUTER_JOIN_SIGN expr= expression_element )
					{
					match(input,OUTER_JOIN_SIGN,FOLLOW_OUTER_JOIN_SIGN_in_expression_element20031); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element20035);
					expr=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1943:5: -> expression_element_outer_join_sign(expr=$expr.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_outer_join_sign",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)));
					}



					}
					break;
				case 27 :
					// PLSQLPrinter.g:1945:10: case_statement
					{
					pushFollow(FOLLOW_case_statement_in_expression_element20063);
					case_statement349=case_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1945:25: -> { $case_statement.st }
					{
						retval.st =  (case_statement349!=null?((StringTemplate)case_statement349.getTemplate()):null) ;
					}



					}
					break;
				case 28 :
					// PLSQLPrinter.g:1946:10: constant
					{
					pushFollow(FOLLOW_constant_in_expression_element20078);
					constant350=constant();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1946:19: -> { $constant.st }
					{
						retval.st =  (constant350!=null?((StringTemplate)constant350.getTemplate()):null) ;
					}



					}
					break;
				case 29 :
					// PLSQLPrinter.g:1947:10: general_element
					{
					pushFollow(FOLLOW_general_element_in_expression_element20093);
					general_element351=general_element();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1947:26: -> { $general_element.st }
					{
						retval.st =  (general_element351!=null?((StringTemplate)general_element351.getTemplate()):null) ;
					}



					}
					break;
				case 30 :
					// PLSQLPrinter.g:1948:10: hosted_variable_name
					{
					pushFollow(FOLLOW_hosted_variable_name_in_expression_element20108);
					hosted_variable_name352=hosted_variable_name();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1948:31: -> { $hosted_variable_name.st }
					{
						retval.st =  (hosted_variable_name352!=null?((StringTemplate)hosted_variable_name352.getTemplate()):null) ;
					}



					}
					break;
				case 31 :
					// PLSQLPrinter.g:1949:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_expression_element20123);
					subquery353=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1949:19: -> in_parens(val=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (subquery353!=null?((StringTemplate)subquery353.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression_element"


	public static class in_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "in_elements"
	// PLSQLPrinter.g:1952:1: in_elements : ( subquery -> in_parens(val=$subquery.st)| expression -> { $expression.st }| expression_list -> { $expression_list.st });
	public final PLSQLPrinter.in_elements_return in_elements() throws RecognitionException {
		PLSQLPrinter.in_elements_return retval = new PLSQLPrinter.in_elements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope subquery354 =null;
		TreeRuleReturnScope expression355 =null;
		TreeRuleReturnScope expression_list356 =null;

		try {
			// PLSQLPrinter.g:1953:5: ( subquery -> in_parens(val=$subquery.st)| expression -> { $expression.st }| expression_list -> { $expression_list.st })
			int alt411=3;
			switch ( input.LA(1) ) {
			case SUBQUERY:
				{
				alt411=1;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt411=2;
				}
				break;
			case EXPR_LIST:
				{
				alt411=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 411, 0, input);
				throw nvae;
			}
			switch (alt411) {
				case 1 :
					// PLSQLPrinter.g:1953:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_in_elements20152);
					subquery354=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1953:19: -> in_parens(val=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (subquery354!=null?((StringTemplate)subquery354.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1954:10: expression
					{
					pushFollow(FOLLOW_expression_in_in_elements20172);
					expression355=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1954:21: -> { $expression.st }
					{
						retval.st =  (expression355!=null?((StringTemplate)expression355.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1955:10: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_in_elements20187);
					expression_list356=expression_list();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1955:26: -> { $expression_list.st }
					{
						retval.st =  (expression_list356!=null?((StringTemplate)expression_list356.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "in_elements"


	public static class datetime_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "datetime_element"
	// PLSQLPrinter.g:1958:1: datetime_element : ( ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) ) -> template( \"not implemented: datetime_element\"| ^( DAY_VK SECOND_VK ( expression )* ) -> template( \"not implemented: datetime_element\"| ^( YEAR_VK MONTH_VK expression ) -> template( \"not implemented: datetime_element\");
	public final PLSQLPrinter.datetime_element_return datetime_element() throws RecognitionException {
		PLSQLPrinter.datetime_element_return retval = new PLSQLPrinter.datetime_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1959:5: ( ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) ) -> template( \"not implemented: datetime_element\"| ^( DAY_VK SECOND_VK ( expression )* ) -> template( \"not implemented: datetime_element\"| ^( YEAR_VK MONTH_VK expression ) -> template( \"not implemented: datetime_element\")
			int alt414=3;
			switch ( input.LA(1) ) {
			case AT_VK:
				{
				alt414=1;
				}
				break;
			case DAY_VK:
				{
				alt414=2;
				}
				break;
			case YEAR_VK:
				{
				alt414=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 414, 0, input);
				throw nvae;
			}
			switch (alt414) {
				case 1 :
					// PLSQLPrinter.g:1959:10: ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) )
					{
					match(input,AT_VK,FOLLOW_AT_VK_in_datetime_element20212); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_datetime_element20214);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1959:37: ( LOCAL_VK | TIME_VK expression )
					int alt412=2;
					int LA412_0 = input.LA(1);
					if ( (LA412_0==LOCAL_VK) ) {
						alt412=1;
					}
					else if ( (LA412_0==TIME_VK) ) {
						alt412=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 412, 0, input);
						throw nvae;
					}

					switch (alt412) {
						case 1 :
							// PLSQLPrinter.g:1959:38: LOCAL_VK
							{
							match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_datetime_element20217); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1959:47: TIME_VK expression
							{
							match(input,TIME_VK,FOLLOW_TIME_VK_in_datetime_element20219); 
							pushFollow(FOLLOW_expression_in_datetime_element20221);
							expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1960:5: -> template( \"not implemented: datetime_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: datetime_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1961:10: ^( DAY_VK SECOND_VK ( expression )* )
					{
					match(input,DAY_VK,FOLLOW_DAY_VK_in_datetime_element20249); 
					match(input, Token.DOWN, null); 
					match(input,SECOND_VK,FOLLOW_SECOND_VK_in_datetime_element20251); 
					// PLSQLPrinter.g:1961:29: ( expression )*
					loop413:
					while (true) {
						int alt413=2;
						int LA413_0 = input.LA(1);
						if ( (LA413_0==EXPR||LA413_0==LOGIC_EXPR) ) {
							alt413=1;
						}

						switch (alt413) {
						case 1 :
							// PLSQLPrinter.g:1961:29: expression
							{
							pushFollow(FOLLOW_expression_in_datetime_element20253);
							expression();
							state._fsp--;

							}
							break;

						default :
							break loop413;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1962:5: -> template( \"not implemented: datetime_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: datetime_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1963:10: ^( YEAR_VK MONTH_VK expression )
					{
					match(input,YEAR_VK,FOLLOW_YEAR_VK_in_datetime_element20281); 
					match(input, Token.DOWN, null); 
					match(input,MONTH_VK,FOLLOW_MONTH_VK_in_datetime_element20283); 
					pushFollow(FOLLOW_expression_in_datetime_element20285);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1964:5: -> template( \"not implemented: datetime_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: datetime_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "datetime_element"


	public static class model_expression_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_expression"
	// PLSQLPrinter.g:1967:1: model_expression : ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ ) -> template( \"not implemented: model_expression\";
	public final PLSQLPrinter.model_expression_return model_expression() throws RecognitionException {
		PLSQLPrinter.model_expression_return retval = new PLSQLPrinter.model_expression_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1968:5: ( ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ ) -> template( \"not implemented: model_expression\")
			// PLSQLPrinter.g:1968:10: ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ )
			{
			match(input,MODEL_EXPRESSION,FOLLOW_MODEL_EXPRESSION_in_model_expression20321); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_element_in_model_expression20323);
			expression_element();
			state._fsp--;

			// PLSQLPrinter.g:1968:48: ( model_expression_element )+
			int cnt415=0;
			loop415:
			while (true) {
				int alt415=2;
				int LA415_0 = input.LA(1);
				if ( (LA415_0==SQL92_RESERVED_ANY||LA415_0==EXPR||(LA415_0 >= FOR_MULTI_COLUMN && LA415_0 <= FOR_SINGLE_COLUMN)||LA415_0==LOGIC_EXPR) ) {
					alt415=1;
				}

				switch (alt415) {
				case 1 :
					// PLSQLPrinter.g:1968:48: model_expression_element
					{
					pushFollow(FOLLOW_model_expression_element_in_model_expression20325);
					model_expression_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt415 >= 1 ) break loop415;
					EarlyExitException eee = new EarlyExitException(415, input);
					throw eee;
				}
				cnt415++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1969:5: -> template( \"not implemented: model_expression\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_expression");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_expression"


	public static class model_expression_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_expression_element"
	// PLSQLPrinter.g:1972:1: model_expression_element : ( SQL92_RESERVED_ANY -> template( \"not implemented: model_expression_element\"| expression -> template( \"not implemented: model_expression_element\"| ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? ) -> template( \"not implemented: model_expression_element\"| ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) ) -> template( \"not implemented: model_expression_element\");
	public final PLSQLPrinter.model_expression_element_return model_expression_element() throws RecognitionException {
		PLSQLPrinter.model_expression_element_return retval = new PLSQLPrinter.model_expression_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1973:5: ( SQL92_RESERVED_ANY -> template( \"not implemented: model_expression_element\"| expression -> template( \"not implemented: model_expression_element\"| ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? ) -> template( \"not implemented: model_expression_element\"| ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) ) -> template( \"not implemented: model_expression_element\")
			int alt420=4;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ANY:
				{
				alt420=1;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt420=2;
				}
				break;
			case FOR_SINGLE_COLUMN:
				{
				alt420=3;
				}
				break;
			case FOR_MULTI_COLUMN:
				{
				alt420=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 420, 0, input);
				throw nvae;
			}
			switch (alt420) {
				case 1 :
					// PLSQLPrinter.g:1973:10: SQL92_RESERVED_ANY
					{
					match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_model_expression_element20361); 
					// TEMPLATE REWRITE
					// 1974:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1975:10: expression
					{
					pushFollow(FOLLOW_expression_in_model_expression_element20386);
					expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1976:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1977:10: ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? )
					{
					match(input,FOR_SINGLE_COLUMN,FOLLOW_FOR_SINGLE_COLUMN_in_model_expression_element20412); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_column_name_in_model_expression_element20414);
					column_name();
					state._fsp--;

					pushFollow(FOLLOW_for_single_column_element_in_model_expression_element20416);
					for_single_column_element();
					state._fsp--;

					// PLSQLPrinter.g:1977:68: ( for_like_part )?
					int alt416=2;
					int LA416_0 = input.LA(1);
					if ( (LA416_0==SQL92_RESERVED_LIKE) ) {
						alt416=1;
					}
					switch (alt416) {
						case 1 :
							// PLSQLPrinter.g:1977:68: for_like_part
							{
							pushFollow(FOLLOW_for_like_part_in_model_expression_element20418);
							for_like_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1978:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1979:10: ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) )
					{
					match(input,FOR_MULTI_COLUMN,FOLLOW_FOR_MULTI_COLUMN_in_model_expression_element20446); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1979:29: ( column_name )+
					int cnt417=0;
					loop417:
					while (true) {
						int alt417=2;
						int LA417_0 = input.LA(1);
						if ( (LA417_0==COLUMN_NAME) ) {
							alt417=1;
						}

						switch (alt417) {
						case 1 :
							// PLSQLPrinter.g:1979:29: column_name
							{
							pushFollow(FOLLOW_column_name_in_model_expression_element20448);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt417 >= 1 ) break loop417;
							EarlyExitException eee = new EarlyExitException(417, input);
							throw eee;
						}
						cnt417++;
					}

					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_model_expression_element20452); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1979:62: ( subquery | ( expression_list )+ )
					int alt419=2;
					int LA419_0 = input.LA(1);
					if ( (LA419_0==SUBQUERY) ) {
						alt419=1;
					}
					else if ( (LA419_0==EXPR_LIST) ) {
						alt419=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 419, 0, input);
						throw nvae;
					}

					switch (alt419) {
						case 1 :
							// PLSQLPrinter.g:1979:63: subquery
							{
							pushFollow(FOLLOW_subquery_in_model_expression_element20455);
							subquery();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1979:72: ( expression_list )+
							{
							// PLSQLPrinter.g:1979:72: ( expression_list )+
							int cnt418=0;
							loop418:
							while (true) {
								int alt418=2;
								int LA418_0 = input.LA(1);
								if ( (LA418_0==EXPR_LIST) ) {
									alt418=1;
								}

								switch (alt418) {
								case 1 :
									// PLSQLPrinter.g:1979:72: expression_list
									{
									pushFollow(FOLLOW_expression_list_in_model_expression_element20457);
									expression_list();
									state._fsp--;

									}
									break;

								default :
									if ( cnt418 >= 1 ) break loop418;
									EarlyExitException eee = new EarlyExitException(418, input);
									throw eee;
								}
								cnt418++;
							}

							}
							break;

					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1980:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_expression_element"


	public static class for_single_column_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_single_column_element"
	// PLSQLPrinter.g:1983:1: for_single_column_element : ( ^( SQL92_RESERVED_IN expression_list ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_FROM expression ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_TO expression ) -> template( \"not implemented: for_single_column_element\"| ^( ( INCREMENT_VK | DECREMENT_VK ) expression ) -> template( \"not implemented: for_single_column_element\");
	public final PLSQLPrinter.for_single_column_element_return for_single_column_element() throws RecognitionException {
		PLSQLPrinter.for_single_column_element_return retval = new PLSQLPrinter.for_single_column_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1984:5: ( ^( SQL92_RESERVED_IN expression_list ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_FROM expression ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_TO expression ) -> template( \"not implemented: for_single_column_element\"| ^( ( INCREMENT_VK | DECREMENT_VK ) expression ) -> template( \"not implemented: for_single_column_element\")
			int alt422=4;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_IN:
				{
				alt422=1;
				}
				break;
			case SQL92_RESERVED_FROM:
				{
				alt422=2;
				}
				break;
			case SQL92_RESERVED_TO:
				{
				alt422=3;
				}
				break;
			case DECREMENT_VK:
			case INCREMENT_VK:
				{
				alt422=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 422, 0, input);
				throw nvae;
			}
			switch (alt422) {
				case 1 :
					// PLSQLPrinter.g:1984:10: ^( SQL92_RESERVED_IN expression_list )
					{
					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_for_single_column_element20496); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_list_in_for_single_column_element20498);
					expression_list();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1985:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1986:10: ^( SQL92_RESERVED_FROM expression )
					{
					match(input,SQL92_RESERVED_FROM,FOLLOW_SQL92_RESERVED_FROM_in_for_single_column_element20525); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element20527);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1987:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1988:10: ^( SQL92_RESERVED_TO expression )
					{
					match(input,SQL92_RESERVED_TO,FOLLOW_SQL92_RESERVED_TO_in_for_single_column_element20555); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element20557);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1989:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1990:10: ^( ( INCREMENT_VK | DECREMENT_VK ) expression )
					{
					// PLSQLPrinter.g:1990:12: ( INCREMENT_VK | DECREMENT_VK )
					int alt421=2;
					int LA421_0 = input.LA(1);
					if ( (LA421_0==INCREMENT_VK) ) {
						alt421=1;
					}
					else if ( (LA421_0==DECREMENT_VK) ) {
						alt421=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 421, 0, input);
						throw nvae;
					}

					switch (alt421) {
						case 1 :
							// PLSQLPrinter.g:1990:13: INCREMENT_VK
							{
							match(input,INCREMENT_VK,FOLLOW_INCREMENT_VK_in_for_single_column_element20586); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1990:26: DECREMENT_VK
							{
							match(input,DECREMENT_VK,FOLLOW_DECREMENT_VK_in_for_single_column_element20588); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element20591);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1991:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_single_column_element"


	public static class for_like_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_like_part"
	// PLSQLPrinter.g:1994:1: for_like_part : ^( SQL92_RESERVED_LIKE expression ) -> template( \"not implemented: for_like_part\";
	public final PLSQLPrinter.for_like_part_return for_like_part() throws RecognitionException {
		PLSQLPrinter.for_like_part_return retval = new PLSQLPrinter.for_like_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1995:5: ( ^( SQL92_RESERVED_LIKE expression ) -> template( \"not implemented: for_like_part\")
			// PLSQLPrinter.g:1995:10: ^( SQL92_RESERVED_LIKE expression )
			{
			match(input,SQL92_RESERVED_LIKE,FOLLOW_SQL92_RESERVED_LIKE_in_for_like_part20628); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_for_like_part20630);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1996:5: -> template( \"not implemented: for_like_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: for_like_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_like_part"


	public static class case_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "case_statement"
	// PLSQLPrinter.g:1999:1: case_statement : ( ^( SIMPLE_CASE expression (parts+= case_when_part )+ ( case_else_part )? ) -> case_statement_simple(expression=$expression.stcase_when_parts=$partscase_else_part=$case_else_part.st)| ^( SEARCHED_CASE (parts+= case_when_part )+ ( case_else_part )? ) -> case_statement_searched(case_when_parts=$partscase_else_part=$case_else_part.st));
	public final PLSQLPrinter.case_statement_return case_statement() throws RecognitionException {
		PLSQLPrinter.case_statement_return retval = new PLSQLPrinter.case_statement_return();
		retval.start = input.LT(1);

		List<Object> list_parts=null;
		TreeRuleReturnScope expression357 =null;
		TreeRuleReturnScope case_else_part358 =null;
		TreeRuleReturnScope case_else_part359 =null;
		RuleReturnScope parts = null;
		try {
			// PLSQLPrinter.g:2000:5: ( ^( SIMPLE_CASE expression (parts+= case_when_part )+ ( case_else_part )? ) -> case_statement_simple(expression=$expression.stcase_when_parts=$partscase_else_part=$case_else_part.st)| ^( SEARCHED_CASE (parts+= case_when_part )+ ( case_else_part )? ) -> case_statement_searched(case_when_parts=$partscase_else_part=$case_else_part.st))
			int alt427=2;
			int LA427_0 = input.LA(1);
			if ( (LA427_0==SIMPLE_CASE) ) {
				alt427=1;
			}
			else if ( (LA427_0==SEARCHED_CASE) ) {
				alt427=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 427, 0, input);
				throw nvae;
			}

			switch (alt427) {
				case 1 :
					// PLSQLPrinter.g:2000:10: ^( SIMPLE_CASE expression (parts+= case_when_part )+ ( case_else_part )? )
					{
					match(input,SIMPLE_CASE,FOLLOW_SIMPLE_CASE_in_case_statement20666); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_case_statement20668);
					expression357=expression();
					state._fsp--;

					// PLSQLPrinter.g:2000:40: (parts+= case_when_part )+
					int cnt423=0;
					loop423:
					while (true) {
						int alt423=2;
						int LA423_0 = input.LA(1);
						if ( (LA423_0==SQL92_RESERVED_WHEN) ) {
							alt423=1;
						}

						switch (alt423) {
						case 1 :
							// PLSQLPrinter.g:2000:40: parts+= case_when_part
							{
							pushFollow(FOLLOW_case_when_part_in_case_statement20672);
							parts=case_when_part();
							state._fsp--;

							if (list_parts==null) list_parts=new ArrayList<Object>();
							list_parts.add(parts.getTemplate());
							}
							break;

						default :
							if ( cnt423 >= 1 ) break loop423;
							EarlyExitException eee = new EarlyExitException(423, input);
							throw eee;
						}
						cnt423++;
					}

					// PLSQLPrinter.g:2000:58: ( case_else_part )?
					int alt424=2;
					int LA424_0 = input.LA(1);
					if ( (LA424_0==SQL92_RESERVED_ELSE) ) {
						alt424=1;
					}
					switch (alt424) {
						case 1 :
							// PLSQLPrinter.g:2000:58: case_else_part
							{
							pushFollow(FOLLOW_case_else_part_in_case_statement20675);
							case_else_part358=case_else_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2001:5: -> case_statement_simple(expression=$expression.stcase_when_parts=$partscase_else_part=$case_else_part.st)
					{
						retval.st = templateLib.getInstanceOf("case_statement_simple",new STAttrMap().put("expression", (expression357!=null?((StringTemplate)expression357.getTemplate()):null)).put("case_when_parts", list_parts).put("case_else_part", (case_else_part358!=null?((StringTemplate)case_else_part358.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2002:10: ^( SEARCHED_CASE (parts+= case_when_part )+ ( case_else_part )? )
					{
					match(input,SEARCHED_CASE,FOLLOW_SEARCHED_CASE_in_case_statement20716); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2002:31: (parts+= case_when_part )+
					int cnt425=0;
					loop425:
					while (true) {
						int alt425=2;
						int LA425_0 = input.LA(1);
						if ( (LA425_0==SQL92_RESERVED_WHEN) ) {
							alt425=1;
						}

						switch (alt425) {
						case 1 :
							// PLSQLPrinter.g:2002:31: parts+= case_when_part
							{
							pushFollow(FOLLOW_case_when_part_in_case_statement20720);
							parts=case_when_part();
							state._fsp--;

							if (list_parts==null) list_parts=new ArrayList<Object>();
							list_parts.add(parts.getTemplate());
							}
							break;

						default :
							if ( cnt425 >= 1 ) break loop425;
							EarlyExitException eee = new EarlyExitException(425, input);
							throw eee;
						}
						cnt425++;
					}

					// PLSQLPrinter.g:2002:49: ( case_else_part )?
					int alt426=2;
					int LA426_0 = input.LA(1);
					if ( (LA426_0==SQL92_RESERVED_ELSE) ) {
						alt426=1;
					}
					switch (alt426) {
						case 1 :
							// PLSQLPrinter.g:2002:49: case_else_part
							{
							pushFollow(FOLLOW_case_else_part_in_case_statement20723);
							case_else_part359=case_else_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2003:5: -> case_statement_searched(case_when_parts=$partscase_else_part=$case_else_part.st)
					{
						retval.st = templateLib.getInstanceOf("case_statement_searched",new STAttrMap().put("case_when_parts", list_parts).put("case_else_part", (case_else_part359!=null?((StringTemplate)case_else_part359.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_statement"


	public static class case_when_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "case_when_part"
	// PLSQLPrinter.g:2008:1: case_when_part : ^( SQL92_RESERVED_WHEN condition= expression ( seq_of_statements -> case_when_part_statements(condition=$condition.stseq_of_statements=$seq_of_statements.st)|then_expr= expression -> case_when_part_expression(condition=$condition.stexpression=$then_expr.st)) ) ;
	public final PLSQLPrinter.case_when_part_return case_when_part() throws RecognitionException {
		PLSQLPrinter.case_when_part_return retval = new PLSQLPrinter.case_when_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope condition =null;
		TreeRuleReturnScope then_expr =null;
		TreeRuleReturnScope seq_of_statements360 =null;

		try {
			// PLSQLPrinter.g:2009:5: ( ^( SQL92_RESERVED_WHEN condition= expression ( seq_of_statements -> case_when_part_statements(condition=$condition.stseq_of_statements=$seq_of_statements.st)|then_expr= expression -> case_when_part_expression(condition=$condition.stexpression=$then_expr.st)) ) )
			// PLSQLPrinter.g:2009:10: ^( SQL92_RESERVED_WHEN condition= expression ( seq_of_statements -> case_when_part_statements(condition=$condition.stseq_of_statements=$seq_of_statements.st)|then_expr= expression -> case_when_part_expression(condition=$condition.stexpression=$then_expr.st)) )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_case_when_part20769); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_case_when_part20773);
			condition=expression();
			state._fsp--;

			// PLSQLPrinter.g:2010:13: ( seq_of_statements -> case_when_part_statements(condition=$condition.stseq_of_statements=$seq_of_statements.st)|then_expr= expression -> case_when_part_expression(condition=$condition.stexpression=$then_expr.st))
			int alt428=2;
			int LA428_0 = input.LA(1);
			if ( (LA428_0==STATEMENTS) ) {
				alt428=1;
			}
			else if ( (LA428_0==EXPR||LA428_0==LOGIC_EXPR) ) {
				alt428=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 428, 0, input);
				throw nvae;
			}

			switch (alt428) {
				case 1 :
					// PLSQLPrinter.g:2011:15: seq_of_statements
					{
					pushFollow(FOLLOW_seq_of_statements_in_case_when_part20803);
					seq_of_statements360=seq_of_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 2011:33: -> case_when_part_statements(condition=$condition.stseq_of_statements=$seq_of_statements.st)
					{
						retval.st = templateLib.getInstanceOf("case_when_part_statements",new STAttrMap().put("condition", (condition!=null?((StringTemplate)condition.getTemplate()):null)).put("seq_of_statements", (seq_of_statements360!=null?((StringTemplate)seq_of_statements360.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2012:17: then_expr= expression
					{
					pushFollow(FOLLOW_expression_in_case_when_part20837);
					then_expr=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 2012:38: -> case_when_part_expression(condition=$condition.stexpression=$then_expr.st)
					{
						retval.st = templateLib.getInstanceOf("case_when_part_expression",new STAttrMap().put("condition", (condition!=null?((StringTemplate)condition.getTemplate()):null)).put("expression", (then_expr!=null?((StringTemplate)then_expr.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_when_part"


	public static class case_else_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "case_else_part"
	// PLSQLPrinter.g:2017:1: case_else_part : ^( SQL92_RESERVED_ELSE ( seq_of_statements -> case_else_part_statements(seq_of_statements=$seq_of_statements.st)| expression -> case_else_part_expression(expression=$expression.st)) ) ;
	public final PLSQLPrinter.case_else_part_return case_else_part() throws RecognitionException {
		PLSQLPrinter.case_else_part_return retval = new PLSQLPrinter.case_else_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope seq_of_statements361 =null;
		TreeRuleReturnScope expression362 =null;

		try {
			// PLSQLPrinter.g:2018:5: ( ^( SQL92_RESERVED_ELSE ( seq_of_statements -> case_else_part_statements(seq_of_statements=$seq_of_statements.st)| expression -> case_else_part_expression(expression=$expression.st)) ) )
			// PLSQLPrinter.g:2018:10: ^( SQL92_RESERVED_ELSE ( seq_of_statements -> case_else_part_statements(seq_of_statements=$seq_of_statements.st)| expression -> case_else_part_expression(expression=$expression.st)) )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_case_else_part20898); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2019:13: ( seq_of_statements -> case_else_part_statements(seq_of_statements=$seq_of_statements.st)| expression -> case_else_part_expression(expression=$expression.st))
			int alt429=2;
			int LA429_0 = input.LA(1);
			if ( (LA429_0==STATEMENTS) ) {
				alt429=1;
			}
			else if ( (LA429_0==EXPR||LA429_0==LOGIC_EXPR) ) {
				alt429=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 429, 0, input);
				throw nvae;
			}

			switch (alt429) {
				case 1 :
					// PLSQLPrinter.g:2020:15: seq_of_statements
					{
					pushFollow(FOLLOW_seq_of_statements_in_case_else_part20928);
					seq_of_statements361=seq_of_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 2020:33: -> case_else_part_statements(seq_of_statements=$seq_of_statements.st)
					{
						retval.st = templateLib.getInstanceOf("case_else_part_statements",new STAttrMap().put("seq_of_statements", (seq_of_statements361!=null?((StringTemplate)seq_of_statements361.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2021:17: expression
					{
					pushFollow(FOLLOW_expression_in_case_else_part20955);
					expression362=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 2021:28: -> case_else_part_expression(expression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("case_else_part_expression",new STAttrMap().put("expression", (expression362!=null?((StringTemplate)expression362.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_else_part"


	public static class standard_function_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "standard_function"
	// PLSQLPrinter.g:2027:1: standard_function : ( ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? ) -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)| ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( COUNT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | expression ) ( over_clause )? ) -> standard_function_count(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullexpression=$expression.stover_clause=$over_clause.st)| ^( XMLCAST_VK expression type_spec ) -> standard_function_xmlcast(expression=$expression.sttype_spec=$type_spec.st)| ^( CAST_VK (s_or_e= subquery |s_or_e= expression ) type_spec ) -> standard_function_cast(subquery_or_expression=$s_or_e.sttype_spec=$type_spec.st)| ^( CHR_VK expression NCHAR_CS_VK ) -> template( \"not implemented: standard_function\"| ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? ) -> template( \"not implemented: standard_function\"| ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause -> standard_function_enabling_within(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stwithin_clause=$within_clause.st)| over_clause -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)) ) | ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? ) -> template( \"not implemented: standard_function\"| ^( EXTRACT_VK extract_part expression ) -> standard_function_extract(part=$extract_part.stexpression=$expression.st)| ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause ) -> template( \"not implemented: standard_function\"| ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( TRANSLATE_VK expr= expression expr_from= expression expr_to= expression ) -> standard_function_translate(expr=$expr.stexpr_from=$expr_from.stexpr_to=$expr_to.st)| ^( TREAT_VK expression ( REF_VK )? type_spec ) -> template( \"not implemented: standard_function\"| ^( TRIM_VK text_expr= expression_element (trim_char_expr= expression_element ( LEADING_VK | TRAILING_VK | BOTH_VK )? )? ) -> standard_function_trim(text_expr=$text_expr.sttrim_char_expr=$trim_char_expr.sttrim_kind=trimKind)| ^( XMLAGG_VK expression ( order_by_clause )? ) -> xmlagg(expression=$expression.storder_by_clause=$order_by_clause.st)| ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ ) -> template( \"not implemented: standard_function\"| ^( XMLEXISTS_VK expression ( xml_passing_clause )? ) -> template( \"not implemented: standard_function\"| ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? ) -> xml_parse(is_document=$DOCUMENT_VK != nullis_content=$CONTENT_VK != nullexpression=$expression.stis_wellformed=$WELLFORMED_VK != null)| ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? ) -> template( \"not implemented: standard_function\"| ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? ) -> xmlroot(expression=$expression.stxml_param_version_part=$xml_param_version_part.stxmlroot_param_standalone_part=$xmlroot_param_standalone_part.st)| ^( XMLTABLE_VK ( xml_namespaces_clause )? expr= expression ( xml_passing_clause )? (xml_table_columns+= xml_table_column )* ) -> xmltable(xml_namespaces_clause=$xml_namespaces_clause.stxquery_expression=$expr.stxml_passing_clause=$xml_passing_clause.stxml_table_columns=$xml_table_columns)| ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? (value_exprs+= xmlelement_value_expr )* ) -> xmlelement(is_entity_escaping=$ENTITYESCAPING_VK != nullis_no_entity_escaping=$NOENTITYESCAPING_VK != nullis_name=$NAME_VK != nullis_evalname=$EVALNAME_VK != nullexpression=$expression.stxml_attributes_clause=$xml_attributes_clause.stvalue_expressions=$value_exprs)| ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? ) -> template( \"not implemented: standard_function\"| ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? ) -> template( \"not implemented: standard_function\");
	public final PLSQLPrinter.standard_function_return standard_function() throws RecognitionException {
		PLSQLPrinter.standard_function_return retval = new PLSQLPrinter.standard_function_return();
		retval.start = input.LT(1);

		CommonTree FUNCTION_ENABLING_OVER363=null;
		CommonTree SQL92_RESERVED_DISTINCT366=null;
		CommonTree SQL92_RESERVED_UNIQUE367=null;
		CommonTree SQL92_RESERVED_ALL368=null;
		CommonTree ASTERISK369=null;
		CommonTree FUNCTION_ENABLING_WITHIN_OR_OVER375=null;
		CommonTree DOCUMENT_VK383=null;
		CommonTree CONTENT_VK384=null;
		CommonTree WELLFORMED_VK386=null;
		CommonTree ENTITYESCAPING_VK392=null;
		CommonTree NOENTITYESCAPING_VK393=null;
		CommonTree NAME_VK394=null;
		CommonTree EVALNAME_VK395=null;
		List<Object> list_xml_table_columns=null;
		List<Object> list_value_exprs=null;
		TreeRuleReturnScope s_or_e =null;
		TreeRuleReturnScope expr =null;
		TreeRuleReturnScope expr_from =null;
		TreeRuleReturnScope expr_to =null;
		TreeRuleReturnScope text_expr =null;
		TreeRuleReturnScope trim_char_expr =null;
		TreeRuleReturnScope function_argument364 =null;
		TreeRuleReturnScope over_clause365 =null;
		TreeRuleReturnScope expression370 =null;
		TreeRuleReturnScope over_clause371 =null;
		TreeRuleReturnScope expression372 =null;
		TreeRuleReturnScope type_spec373 =null;
		TreeRuleReturnScope type_spec374 =null;
		TreeRuleReturnScope function_argument376 =null;
		TreeRuleReturnScope within_clause377 =null;
		TreeRuleReturnScope over_clause378 =null;
		TreeRuleReturnScope extract_part379 =null;
		TreeRuleReturnScope expression380 =null;
		TreeRuleReturnScope expression381 =null;
		TreeRuleReturnScope order_by_clause382 =null;
		TreeRuleReturnScope expression385 =null;
		TreeRuleReturnScope expression387 =null;
		TreeRuleReturnScope xml_param_version_part388 =null;
		TreeRuleReturnScope xmlroot_param_standalone_part389 =null;
		TreeRuleReturnScope xml_namespaces_clause390 =null;
		TreeRuleReturnScope xml_passing_clause391 =null;
		TreeRuleReturnScope expression396 =null;
		TreeRuleReturnScope xml_attributes_clause397 =null;
		RuleReturnScope xml_table_columns = null;
		RuleReturnScope value_exprs = null;
		 StringTemplate trimKind = null; 
		try {
			// PLSQLPrinter.g:2029:5: ( ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? ) -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)| ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( COUNT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | expression ) ( over_clause )? ) -> standard_function_count(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullexpression=$expression.stover_clause=$over_clause.st)| ^( XMLCAST_VK expression type_spec ) -> standard_function_xmlcast(expression=$expression.sttype_spec=$type_spec.st)| ^( CAST_VK (s_or_e= subquery |s_or_e= expression ) type_spec ) -> standard_function_cast(subquery_or_expression=$s_or_e.sttype_spec=$type_spec.st)| ^( CHR_VK expression NCHAR_CS_VK ) -> template( \"not implemented: standard_function\"| ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? ) -> template( \"not implemented: standard_function\"| ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause -> standard_function_enabling_within(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stwithin_clause=$within_clause.st)| over_clause -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)) ) | ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? ) -> template( \"not implemented: standard_function\"| ^( EXTRACT_VK extract_part expression ) -> standard_function_extract(part=$extract_part.stexpression=$expression.st)| ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause ) -> template( \"not implemented: standard_function\"| ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( TRANSLATE_VK expr= expression expr_from= expression expr_to= expression ) -> standard_function_translate(expr=$expr.stexpr_from=$expr_from.stexpr_to=$expr_to.st)| ^( TREAT_VK expression ( REF_VK )? type_spec ) -> template( \"not implemented: standard_function\"| ^( TRIM_VK text_expr= expression_element (trim_char_expr= expression_element ( LEADING_VK | TRAILING_VK | BOTH_VK )? )? ) -> standard_function_trim(text_expr=$text_expr.sttrim_char_expr=$trim_char_expr.sttrim_kind=trimKind)| ^( XMLAGG_VK expression ( order_by_clause )? ) -> xmlagg(expression=$expression.storder_by_clause=$order_by_clause.st)| ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ ) -> template( \"not implemented: standard_function\"| ^( XMLEXISTS_VK expression ( xml_passing_clause )? ) -> template( \"not implemented: standard_function\"| ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? ) -> xml_parse(is_document=$DOCUMENT_VK != nullis_content=$CONTENT_VK != nullexpression=$expression.stis_wellformed=$WELLFORMED_VK != null)| ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? ) -> template( \"not implemented: standard_function\"| ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? ) -> xmlroot(expression=$expression.stxml_param_version_part=$xml_param_version_part.stxmlroot_param_standalone_part=$xmlroot_param_standalone_part.st)| ^( XMLTABLE_VK ( xml_namespaces_clause )? expr= expression ( xml_passing_clause )? (xml_table_columns+= xml_table_column )* ) -> xmltable(xml_namespaces_clause=$xml_namespaces_clause.stxquery_expression=$expr.stxml_passing_clause=$xml_passing_clause.stxml_table_columns=$xml_table_columns)| ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? (value_exprs+= xmlelement_value_expr )* ) -> xmlelement(is_entity_escaping=$ENTITYESCAPING_VK != nullis_no_entity_escaping=$NOENTITYESCAPING_VK != nullis_name=$NAME_VK != nullis_evalname=$EVALNAME_VK != nullexpression=$expression.stxml_attributes_clause=$xml_attributes_clause.stvalue_expressions=$value_exprs)| ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? ) -> template( \"not implemented: standard_function\"| ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? ) -> template( \"not implemented: standard_function\")
			int alt474=25;
			switch ( input.LA(1) ) {
			case FUNCTION_ENABLING_OVER:
				{
				alt474=1;
				}
				break;
			case FUNCTION_ENABLING_USING:
				{
				alt474=2;
				}
				break;
			case COUNT_VK:
				{
				alt474=3;
				}
				break;
			case XMLCAST_VK:
				{
				alt474=4;
				}
				break;
			case CAST_VK:
				{
				alt474=5;
				}
				break;
			case CHR_VK:
				{
				alt474=6;
				}
				break;
			case COLLECT_VK:
				{
				alt474=7;
				}
				break;
			case FUNCTION_ENABLING_WITHIN_OR_OVER:
				{
				alt474=8;
				}
				break;
			case DECOMPOSE_VK:
				{
				alt474=9;
				}
				break;
			case EXTRACT_VK:
				{
				alt474=10;
				}
				break;
			case FIRST_VALUE_VK:
			case LAST_VALUE_VK:
				{
				alt474=11;
				}
				break;
			case PREDICTION_FUNCTION:
				{
				alt474=12;
				}
				break;
			case TRANSLATE_VK:
				{
				alt474=13;
				}
				break;
			case TREAT_VK:
				{
				alt474=14;
				}
				break;
			case TRIM_VK:
				{
				alt474=15;
				}
				break;
			case XMLAGG_VK:
				{
				alt474=16;
				}
				break;
			case XMLCOLATTVAL_VK:
			case XMLFOREST_VK:
				{
				alt474=17;
				}
				break;
			case XMLEXISTS_VK:
				{
				alt474=18;
				}
				break;
			case XMLPARSE_VK:
				{
				alt474=19;
				}
				break;
			case XMLQUERY_VK:
				{
				alt474=20;
				}
				break;
			case XMLROOT_VK:
				{
				alt474=21;
				}
				break;
			case XMLTABLE_VK:
				{
				alt474=22;
				}
				break;
			case XMLELEMENT_VK:
				{
				alt474=23;
				}
				break;
			case XMLPI_VK:
				{
				alt474=24;
				}
				break;
			case XMLSERIALIZE_VK:
				{
				alt474=25;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 474, 0, input);
				throw nvae;
			}
			switch (alt474) {
				case 1 :
					// PLSQLPrinter.g:2029:10: ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? )
					{
					FUNCTION_ENABLING_OVER363=(CommonTree)match(input,FUNCTION_ENABLING_OVER,FOLLOW_FUNCTION_ENABLING_OVER_in_standard_function21017); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function21019);
					function_argument364=function_argument();
					state._fsp--;

					// PLSQLPrinter.g:2029:53: ( over_clause )?
					int alt430=2;
					int LA430_0 = input.LA(1);
					if ( (LA430_0==OVER_VK) ) {
						alt430=1;
					}
					switch (alt430) {
						case 1 :
							// PLSQLPrinter.g:2029:53: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function21021);
							over_clause365=over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2030:5: -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)
					{
						retval.st = templateLib.getInstanceOf("standard_function_enabling_over",new STAttrMap().put("function_name", (FUNCTION_ENABLING_OVER363!=null?FUNCTION_ENABLING_OVER363.getText():null)).put("function_arguments", (function_argument364!=null?((StringTemplate)function_argument364.getTemplate()):null)).put("over_clause", (over_clause365!=null?((StringTemplate)over_clause365.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2032:10: ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? )
					{
					match(input,FUNCTION_ENABLING_USING,FOLLOW_FUNCTION_ENABLING_USING_in_standard_function21071); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function21073);
					function_argument();
					state._fsp--;

					// PLSQLPrinter.g:2032:54: ( using_clause )?
					int alt431=2;
					int LA431_0 = input.LA(1);
					if ( (LA431_0==PLSQL_NON_RESERVED_USING) ) {
						alt431=1;
					}
					switch (alt431) {
						case 1 :
							// PLSQLPrinter.g:2032:54: using_clause
							{
							pushFollow(FOLLOW_using_clause_in_standard_function21075);
							using_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2033:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:2034:10: ^( COUNT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | expression ) ( over_clause )? )
					{
					match(input,COUNT_VK,FOLLOW_COUNT_VK_in_standard_function21103); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2034:21: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )?
					int alt432=4;
					switch ( input.LA(1) ) {
						case SQL92_RESERVED_DISTINCT:
							{
							alt432=1;
							}
							break;
						case SQL92_RESERVED_UNIQUE:
							{
							alt432=2;
							}
							break;
						case SQL92_RESERVED_ALL:
							{
							alt432=3;
							}
							break;
					}
					switch (alt432) {
						case 1 :
							// PLSQLPrinter.g:2034:22: SQL92_RESERVED_DISTINCT
							{
							SQL92_RESERVED_DISTINCT366=(CommonTree)match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function21106); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2034:46: SQL92_RESERVED_UNIQUE
							{
							SQL92_RESERVED_UNIQUE367=(CommonTree)match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function21108); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:2034:68: SQL92_RESERVED_ALL
							{
							SQL92_RESERVED_ALL368=(CommonTree)match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_standard_function21110); 
							}
							break;

					}

					// PLSQLPrinter.g:2034:89: ( ASTERISK | expression )
					int alt433=2;
					int LA433_0 = input.LA(1);
					if ( (LA433_0==ASTERISK) ) {
						alt433=1;
					}
					else if ( (LA433_0==EXPR||LA433_0==LOGIC_EXPR) ) {
						alt433=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 433, 0, input);
						throw nvae;
					}

					switch (alt433) {
						case 1 :
							// PLSQLPrinter.g:2034:91: ASTERISK
							{
							ASTERISK369=(CommonTree)match(input,ASTERISK,FOLLOW_ASTERISK_in_standard_function21116); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2034:102: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function21120);
							expression370=expression();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2034:115: ( over_clause )?
					int alt434=2;
					int LA434_0 = input.LA(1);
					if ( (LA434_0==OVER_VK) ) {
						alt434=1;
					}
					switch (alt434) {
						case 1 :
							// PLSQLPrinter.g:2034:115: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function21124);
							over_clause371=over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2035:5: -> standard_function_count(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullexpression=$expression.stover_clause=$over_clause.st)
					{
						retval.st = templateLib.getInstanceOf("standard_function_count",new STAttrMap().put("is_distinct", SQL92_RESERVED_DISTINCT366 != null).put("is_unique", SQL92_RESERVED_UNIQUE367 != null).put("is_all", SQL92_RESERVED_ALL368 != null).put("is_asterisk", ASTERISK369 != null).put("expression", (expression370!=null?((StringTemplate)expression370.getTemplate()):null)).put("over_clause", (over_clause371!=null?((StringTemplate)over_clause371.getTemplate()):null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:2039:10: ^( XMLCAST_VK expression type_spec )
					{
					match(input,XMLCAST_VK,FOLLOW_XMLCAST_VK_in_standard_function21215); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function21217);
					expression372=expression();
					state._fsp--;

					pushFollow(FOLLOW_type_spec_in_standard_function21219);
					type_spec373=type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2040:5: -> standard_function_xmlcast(expression=$expression.sttype_spec=$type_spec.st)
					{
						retval.st = templateLib.getInstanceOf("standard_function_xmlcast",new STAttrMap().put("expression", (expression372!=null?((StringTemplate)expression372.getTemplate()):null)).put("type_spec", (type_spec373!=null?((StringTemplate)type_spec373.getTemplate()):null)));
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:2041:10: ^( CAST_VK (s_or_e= subquery |s_or_e= expression ) type_spec )
					{
					match(input,CAST_VK,FOLLOW_CAST_VK_in_standard_function21252); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2041:20: (s_or_e= subquery |s_or_e= expression )
					int alt435=2;
					int LA435_0 = input.LA(1);
					if ( (LA435_0==SUBQUERY) ) {
						alt435=1;
					}
					else if ( (LA435_0==EXPR||LA435_0==LOGIC_EXPR) ) {
						alt435=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 435, 0, input);
						throw nvae;
					}

					switch (alt435) {
						case 1 :
							// PLSQLPrinter.g:2041:21: s_or_e= subquery
							{
							pushFollow(FOLLOW_subquery_in_standard_function21257);
							s_or_e=subquery();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:2041:37: s_or_e= expression
							{
							pushFollow(FOLLOW_expression_in_standard_function21261);
							s_or_e=expression();
							state._fsp--;

							}
							break;

					}

					pushFollow(FOLLOW_type_spec_in_standard_function21264);
					type_spec374=type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2042:5: -> standard_function_cast(subquery_or_expression=$s_or_e.sttype_spec=$type_spec.st)
					{
						retval.st = templateLib.getInstanceOf("standard_function_cast",new STAttrMap().put("subquery_or_expression", (s_or_e!=null?((StringTemplate)s_or_e.getTemplate()):null)).put("type_spec", (type_spec374!=null?((StringTemplate)type_spec374.getTemplate()):null)));
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:2043:10: ^( CHR_VK expression NCHAR_CS_VK )
					{
					match(input,CHR_VK,FOLLOW_CHR_VK_in_standard_function21297); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function21299);
					expression();
					state._fsp--;

					match(input,NCHAR_CS_VK,FOLLOW_NCHAR_CS_VK_in_standard_function21301); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2044:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:2045:10: ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? )
					{
					match(input,COLLECT_VK,FOLLOW_COLLECT_VK_in_standard_function21328); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2045:23: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )?
					int alt436=3;
					int LA436_0 = input.LA(1);
					if ( (LA436_0==SQL92_RESERVED_DISTINCT) ) {
						alt436=1;
					}
					else if ( (LA436_0==SQL92_RESERVED_UNIQUE) ) {
						alt436=2;
					}
					switch (alt436) {
						case 1 :
							// PLSQLPrinter.g:2045:24: SQL92_RESERVED_DISTINCT
							{
							match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function21331); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2045:48: SQL92_RESERVED_UNIQUE
							{
							match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function21333); 
							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_standard_function21337);
					column_name();
					state._fsp--;

					// PLSQLPrinter.g:2045:84: ( collect_order_by_part )?
					int alt437=2;
					int LA437_0 = input.LA(1);
					if ( (LA437_0==SQL92_RESERVED_ORDER) ) {
						alt437=1;
					}
					switch (alt437) {
						case 1 :
							// PLSQLPrinter.g:2045:84: collect_order_by_part
							{
							pushFollow(FOLLOW_collect_order_by_part_in_standard_function21339);
							collect_order_by_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2046:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:2047:10: ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause -> standard_function_enabling_within(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stwithin_clause=$within_clause.st)| over_clause -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)) )
					{
					FUNCTION_ENABLING_WITHIN_OR_OVER375=(CommonTree)match(input,FUNCTION_ENABLING_WITHIN_OR_OVER,FOLLOW_FUNCTION_ENABLING_WITHIN_OR_OVER_in_standard_function21367); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function21381);
					function_argument376=function_argument();
					state._fsp--;

					// PLSQLPrinter.g:2049:13: ( within_clause -> standard_function_enabling_within(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stwithin_clause=$within_clause.st)| over_clause -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st))
					int alt438=2;
					int LA438_0 = input.LA(1);
					if ( (LA438_0==WITHIN_VK) ) {
						alt438=1;
					}
					else if ( (LA438_0==OVER_VK) ) {
						alt438=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 438, 0, input);
						throw nvae;
					}

					switch (alt438) {
						case 1 :
							// PLSQLPrinter.g:2050:15: within_clause
							{
							pushFollow(FOLLOW_within_clause_in_standard_function21411);
							within_clause377=within_clause();
							state._fsp--;

							// TEMPLATE REWRITE
							// 2051:15: -> standard_function_enabling_within(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stwithin_clause=$within_clause.st)
							{
								retval.st = templateLib.getInstanceOf("standard_function_enabling_within",new STAttrMap().put("function_name", (FUNCTION_ENABLING_WITHIN_OR_OVER375!=null?FUNCTION_ENABLING_WITHIN_OR_OVER375.getText():null)).put("function_arguments", (function_argument376!=null?((StringTemplate)function_argument376.getTemplate()):null)).put("within_clause", (within_clause377!=null?((StringTemplate)within_clause377.getTemplate()):null)));
							}



							}
							break;
						case 2 :
							// PLSQLPrinter.g:2054:17: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function21499);
							over_clause378=over_clause();
							state._fsp--;

							// TEMPLATE REWRITE
							// 2055:15: -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)
							{
								retval.st = templateLib.getInstanceOf("standard_function_enabling_over",new STAttrMap().put("function_name", (FUNCTION_ENABLING_WITHIN_OR_OVER375!=null?FUNCTION_ENABLING_WITHIN_OR_OVER375.getText():null)).put("function_arguments", (function_argument376!=null?((StringTemplate)function_argument376.getTemplate()):null)).put("over_clause", (over_clause378!=null?((StringTemplate)over_clause378.getTemplate()):null)));
							}



							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 9 :
					// PLSQLPrinter.g:2060:10: ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? )
					{
					match(input,DECOMPOSE_VK,FOLLOW_DECOMPOSE_VK_in_standard_function21608); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function21610);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:2060:36: ( CANONICAL_VK | COMPATIBILITY_VK )?
					int alt439=3;
					int LA439_0 = input.LA(1);
					if ( (LA439_0==CANONICAL_VK) ) {
						alt439=1;
					}
					else if ( (LA439_0==COMPATIBILITY_VK) ) {
						alt439=2;
					}
					switch (alt439) {
						case 1 :
							// PLSQLPrinter.g:2060:37: CANONICAL_VK
							{
							match(input,CANONICAL_VK,FOLLOW_CANONICAL_VK_in_standard_function21613); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2060:50: COMPATIBILITY_VK
							{
							match(input,COMPATIBILITY_VK,FOLLOW_COMPATIBILITY_VK_in_standard_function21615); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2061:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:2062:10: ^( EXTRACT_VK extract_part expression )
					{
					match(input,EXTRACT_VK,FOLLOW_EXTRACT_VK_in_standard_function21645); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_extract_part_in_standard_function21647);
					extract_part379=extract_part();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_standard_function21649);
					expression380=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2063:5: -> standard_function_extract(part=$extract_part.stexpression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("standard_function_extract",new STAttrMap().put("part", (extract_part379!=null?((StringTemplate)extract_part379.getTemplate()):null)).put("expression", (expression380!=null?((StringTemplate)expression380.getTemplate()):null)));
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:2064:10: ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause )
					{
					// PLSQLPrinter.g:2064:12: ( FIRST_VALUE_VK | LAST_VALUE_VK )
					int alt440=2;
					int LA440_0 = input.LA(1);
					if ( (LA440_0==FIRST_VALUE_VK) ) {
						alt440=1;
					}
					else if ( (LA440_0==LAST_VALUE_VK) ) {
						alt440=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 440, 0, input);
						throw nvae;
					}

					switch (alt440) {
						case 1 :
							// PLSQLPrinter.g:2064:13: FIRST_VALUE_VK
							{
							match(input,FIRST_VALUE_VK,FOLLOW_FIRST_VALUE_VK_in_standard_function21683); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2064:28: LAST_VALUE_VK
							{
							match(input,LAST_VALUE_VK,FOLLOW_LAST_VALUE_VK_in_standard_function21685); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function21688);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:2064:54: ( NULLS_VK )?
					int alt441=2;
					int LA441_0 = input.LA(1);
					if ( (LA441_0==NULLS_VK) ) {
						alt441=1;
					}
					switch (alt441) {
						case 1 :
							// PLSQLPrinter.g:2064:54: NULLS_VK
							{
							match(input,NULLS_VK,FOLLOW_NULLS_VK_in_standard_function21690); 
							}
							break;

					}

					pushFollow(FOLLOW_over_clause_in_standard_function21693);
					over_clause();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2065:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:2066:10: ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? )
					{
					match(input,PREDICTION_FUNCTION,FOLLOW_PREDICTION_FUNCTION_in_standard_function21721); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2066:32: ( expression )+
					int cnt442=0;
					loop442:
					while (true) {
						int alt442=2;
						int LA442_0 = input.LA(1);
						if ( (LA442_0==EXPR||LA442_0==LOGIC_EXPR) ) {
							alt442=1;
						}

						switch (alt442) {
						case 1 :
							// PLSQLPrinter.g:2066:32: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function21723);
							expression();
							state._fsp--;

							}
							break;

						default :
							if ( cnt442 >= 1 ) break loop442;
							EarlyExitException eee = new EarlyExitException(442, input);
							throw eee;
						}
						cnt442++;
					}

					// PLSQLPrinter.g:2066:44: ( cost_matrix_clause )?
					int alt443=2;
					int LA443_0 = input.LA(1);
					if ( (LA443_0==COST_VK) ) {
						alt443=1;
					}
					switch (alt443) {
						case 1 :
							// PLSQLPrinter.g:2066:44: cost_matrix_clause
							{
							pushFollow(FOLLOW_cost_matrix_clause_in_standard_function21726);
							cost_matrix_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2066:64: ( using_clause )?
					int alt444=2;
					int LA444_0 = input.LA(1);
					if ( (LA444_0==PLSQL_NON_RESERVED_USING) ) {
						alt444=1;
					}
					switch (alt444) {
						case 1 :
							// PLSQLPrinter.g:2066:64: using_clause
							{
							pushFollow(FOLLOW_using_clause_in_standard_function21729);
							using_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2067:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:2068:10: ^( TRANSLATE_VK expr= expression expr_from= expression expr_to= expression )
					{
					match(input,TRANSLATE_VK,FOLLOW_TRANSLATE_VK_in_standard_function21757); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function21763);
					expr=expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_standard_function21767);
					expr_from=expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_standard_function21771);
					expr_to=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2069:5: -> standard_function_translate(expr=$expr.stexpr_from=$expr_from.stexpr_to=$expr_to.st)
					{
						retval.st = templateLib.getInstanceOf("standard_function_translate",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("expr_from", (expr_from!=null?((StringTemplate)expr_from.getTemplate()):null)).put("expr_to", (expr_to!=null?((StringTemplate)expr_to.getTemplate()):null)));
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:2070:10: ^( TREAT_VK expression ( REF_VK )? type_spec )
					{
					match(input,TREAT_VK,FOLLOW_TREAT_VK_in_standard_function21809); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function21811);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:2070:32: ( REF_VK )?
					int alt445=2;
					int LA445_0 = input.LA(1);
					if ( (LA445_0==REF_VK) ) {
						alt445=1;
					}
					switch (alt445) {
						case 1 :
							// PLSQLPrinter.g:2070:32: REF_VK
							{
							match(input,REF_VK,FOLLOW_REF_VK_in_standard_function21813); 
							}
							break;

					}

					pushFollow(FOLLOW_type_spec_in_standard_function21816);
					type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2071:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:2072:10: ^( TRIM_VK text_expr= expression_element (trim_char_expr= expression_element ( LEADING_VK | TRAILING_VK | BOTH_VK )? )? )
					{
					match(input,TRIM_VK,FOLLOW_TRIM_VK_in_standard_function21843); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_standard_function21859);
					text_expr=expression_element();
					state._fsp--;

					// PLSQLPrinter.g:2074:13: (trim_char_expr= expression_element ( LEADING_VK | TRAILING_VK | BOTH_VK )? )?
					int alt447=2;
					int LA447_0 = input.LA(1);
					if ( (LA447_0==APPROXIMATE_NUM_LIT||LA447_0==ASTERISK||LA447_0==CHAR_STRING||LA447_0==CONCATENATION_OP||(LA447_0 >= EQUALS_OP && LA447_0 <= EXACT_NUM_LIT)||(LA447_0 >= GREATER_THAN_OP && LA447_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA447_0 >= LESS_THAN_OP && LA447_0 <= LESS_THAN_OR_EQUALS_OP)||LA447_0==MINUS_SIGN||LA447_0==NOT_EQUAL_OP||LA447_0==PERCENT||LA447_0==PLUS_SIGN||LA447_0==SOLIDUS||LA447_0==SQL92_RESERVED_ALL||(LA447_0 >= SQL92_RESERVED_AND && LA447_0 <= SQL92_RESERVED_ANY)||LA447_0==SQL92_RESERVED_BETWEEN||LA447_0==SQL92_RESERVED_DEFAULT||LA447_0==SQL92_RESERVED_DISTINCT||(LA447_0 >= SQL92_RESERVED_EXISTS && LA447_0 <= SQL92_RESERVED_FALSE)||LA447_0==SQL92_RESERVED_IN||(LA447_0 >= SQL92_RESERVED_LIKE && LA447_0 <= SQL92_RESERVED_NULL)||LA447_0==SQL92_RESERVED_OR||LA447_0==SQL92_RESERVED_PRIOR||LA447_0==SQL92_RESERVED_TRUE||LA447_0==UNSIGNED_INTEGER||LA447_0==CASCATED_ELEMENT||LA447_0==CONSTANT_NEGATED||LA447_0==DATETIME_OP||LA447_0==DBTIMEZONE_VK||LA447_0==DIV_VK||LA447_0==DOT_ASTERISK||LA447_0==HOSTED_VARIABLE_NAME||(LA447_0 >= IS_A_SET && LA447_0 <= IS_PRESENT)||LA447_0==KEEP_VK||(LA447_0 >= LIKE2_VK && LA447_0 <= LIKEC_VK)||LA447_0==MAXVALUE_VK||LA447_0==MEMBER_VK||LA447_0==MINVALUE_VK||LA447_0==MODEL_EXPRESSION||LA447_0==MOD_VK||LA447_0==NEW_VK||LA447_0==NOT_BETWEEN||(LA447_0 >= NOT_IN && LA447_0 <= NOT_LIKE)||LA447_0==OUTER_JOIN_SIGN||(LA447_0 >= PERCENT_FOUND_VK && LA447_0 <= PERCENT_ROWCOUNT_VK)||LA447_0==PIPE_VK||LA447_0==SEARCHED_CASE||LA447_0==SESSIONTIMEZONE_VK||LA447_0==SIMPLE_CASE||LA447_0==SOME_VK||LA447_0==STANDARD_FUNCTION||LA447_0==SUBMULTISET_VK||LA447_0==SUBQUERY||(LA447_0 >= UNARY_MINUS && LA447_0 <= UNARY_PLUS)||LA447_0==VECTOR_EXPR) ) {
						alt447=1;
					}
					switch (alt447) {
						case 1 :
							// PLSQLPrinter.g:2075:15: trim_char_expr= expression_element ( LEADING_VK | TRAILING_VK | BOTH_VK )?
							{
							pushFollow(FOLLOW_expression_element_in_standard_function21891);
							trim_char_expr=expression_element();
							state._fsp--;

							// PLSQLPrinter.g:2076:15: ( LEADING_VK | TRAILING_VK | BOTH_VK )?
							int alt446=4;
							switch ( input.LA(1) ) {
								case LEADING_VK:
									{
									alt446=1;
									}
									break;
								case TRAILING_VK:
									{
									alt446=2;
									}
									break;
								case BOTH_VK:
									{
									alt446=3;
									}
									break;
							}
							switch (alt446) {
								case 1 :
									// PLSQLPrinter.g:2077:17: LEADING_VK
									{
									match(input,LEADING_VK,FOLLOW_LEADING_VK_in_standard_function21925); 
									 trimKind = templateLib.getInstanceOf("trim_kind_leading"); 
									}
									break;
								case 2 :
									// PLSQLPrinter.g:2078:19: TRAILING_VK
									{
									match(input,TRAILING_VK,FOLLOW_TRAILING_VK_in_standard_function21947); 
									 trimKind = templateLib.getInstanceOf("trim_kind_trailing"); 
									}
									break;
								case 3 :
									// PLSQLPrinter.g:2079:19: BOTH_VK
									{
									match(input,BOTH_VK,FOLLOW_BOTH_VK_in_standard_function21969); 
									 trimKind = templateLib.getInstanceOf("trim_kind_both"); 
									}
									break;

							}

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2083:5: -> standard_function_trim(text_expr=$text_expr.sttrim_char_expr=$trim_char_expr.sttrim_kind=trimKind)
					{
						retval.st = templateLib.getInstanceOf("standard_function_trim",new STAttrMap().put("text_expr", (text_expr!=null?((StringTemplate)text_expr.getTemplate()):null)).put("trim_char_expr", (trim_char_expr!=null?((StringTemplate)trim_char_expr.getTemplate()):null)).put("trim_kind", trimKind));
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:2085:10: ^( XMLAGG_VK expression ( order_by_clause )? )
					{
					match(input,XMLAGG_VK,FOLLOW_XMLAGG_VK_in_standard_function22054); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function22056);
					expression381=expression();
					state._fsp--;

					// PLSQLPrinter.g:2085:33: ( order_by_clause )?
					int alt448=2;
					int LA448_0 = input.LA(1);
					if ( (LA448_0==SQL92_RESERVED_ORDER) ) {
						alt448=1;
					}
					switch (alt448) {
						case 1 :
							// PLSQLPrinter.g:2085:33: order_by_clause
							{
							pushFollow(FOLLOW_order_by_clause_in_standard_function22058);
							order_by_clause382=order_by_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2086:5: -> xmlagg(expression=$expression.storder_by_clause=$order_by_clause.st)
					{
						retval.st = templateLib.getInstanceOf("xmlagg",new STAttrMap().put("expression", (expression381!=null?((StringTemplate)expression381.getTemplate()):null)).put("order_by_clause", (order_by_clause382!=null?((StringTemplate)order_by_clause382.getTemplate()):null)));
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:2087:10: ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ )
					{
					// PLSQLPrinter.g:2087:12: ( XMLCOLATTVAL_VK | XMLFOREST_VK )
					int alt449=2;
					int LA449_0 = input.LA(1);
					if ( (LA449_0==XMLCOLATTVAL_VK) ) {
						alt449=1;
					}
					else if ( (LA449_0==XMLFOREST_VK) ) {
						alt449=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 449, 0, input);
						throw nvae;
					}

					switch (alt449) {
						case 1 :
							// PLSQLPrinter.g:2087:13: XMLCOLATTVAL_VK
							{
							match(input,XMLCOLATTVAL_VK,FOLLOW_XMLCOLATTVAL_VK_in_standard_function22093); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2087:29: XMLFOREST_VK
							{
							match(input,XMLFOREST_VK,FOLLOW_XMLFOREST_VK_in_standard_function22095); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2087:43: ( xml_multiuse_expression_element )+
					int cnt450=0;
					loop450:
					while (true) {
						int alt450=2;
						int LA450_0 = input.LA(1);
						if ( (LA450_0==XML_ELEMENT) ) {
							alt450=1;
						}

						switch (alt450) {
						case 1 :
							// PLSQLPrinter.g:2087:43: xml_multiuse_expression_element
							{
							pushFollow(FOLLOW_xml_multiuse_expression_element_in_standard_function22098);
							xml_multiuse_expression_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt450 >= 1 ) break loop450;
							EarlyExitException eee = new EarlyExitException(450, input);
							throw eee;
						}
						cnt450++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2088:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:2089:10: ^( XMLEXISTS_VK expression ( xml_passing_clause )? )
					{
					match(input,XMLEXISTS_VK,FOLLOW_XMLEXISTS_VK_in_standard_function22126); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function22128);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:2089:36: ( xml_passing_clause )?
					int alt451=2;
					int LA451_0 = input.LA(1);
					if ( (LA451_0==PASSING_VK) ) {
						alt451=1;
					}
					switch (alt451) {
						case 1 :
							// PLSQLPrinter.g:2089:36: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function22130);
							xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2090:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 19 :
					// PLSQLPrinter.g:2091:10: ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? )
					{
					match(input,XMLPARSE_VK,FOLLOW_XMLPARSE_VK_in_standard_function22158); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2091:24: ( DOCUMENT_VK | CONTENT_VK )
					int alt452=2;
					int LA452_0 = input.LA(1);
					if ( (LA452_0==DOCUMENT_VK) ) {
						alt452=1;
					}
					else if ( (LA452_0==CONTENT_VK) ) {
						alt452=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 452, 0, input);
						throw nvae;
					}

					switch (alt452) {
						case 1 :
							// PLSQLPrinter.g:2091:25: DOCUMENT_VK
							{
							DOCUMENT_VK383=(CommonTree)match(input,DOCUMENT_VK,FOLLOW_DOCUMENT_VK_in_standard_function22161); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2091:37: CONTENT_VK
							{
							CONTENT_VK384=(CommonTree)match(input,CONTENT_VK,FOLLOW_CONTENT_VK_in_standard_function22163); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function22166);
					expression385=expression();
					state._fsp--;

					// PLSQLPrinter.g:2091:60: ( WELLFORMED_VK )?
					int alt453=2;
					int LA453_0 = input.LA(1);
					if ( (LA453_0==WELLFORMED_VK) ) {
						alt453=1;
					}
					switch (alt453) {
						case 1 :
							// PLSQLPrinter.g:2091:60: WELLFORMED_VK
							{
							WELLFORMED_VK386=(CommonTree)match(input,WELLFORMED_VK,FOLLOW_WELLFORMED_VK_in_standard_function22168); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2092:5: -> xml_parse(is_document=$DOCUMENT_VK != nullis_content=$CONTENT_VK != nullexpression=$expression.stis_wellformed=$WELLFORMED_VK != null)
					{
						retval.st = templateLib.getInstanceOf("xml_parse",new STAttrMap().put("is_document", DOCUMENT_VK383 != null).put("is_content", CONTENT_VK384 != null).put("expression", (expression385!=null?((StringTemplate)expression385.getTemplate()):null)).put("is_wellformed", WELLFORMED_VK386 != null));
					}



					}
					break;
				case 20 :
					// PLSQLPrinter.g:2095:10: ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? )
					{
					match(input,XMLQUERY_VK,FOLLOW_XMLQUERY_VK_in_standard_function22233); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function22235);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:2095:35: ( xml_passing_clause )?
					int alt454=2;
					int LA454_0 = input.LA(1);
					if ( (LA454_0==PASSING_VK) ) {
						alt454=1;
					}
					switch (alt454) {
						case 1 :
							// PLSQLPrinter.g:2095:35: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function22237);
							xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2095:55: ( SQL92_RESERVED_NULL )?
					int alt455=2;
					int LA455_0 = input.LA(1);
					if ( (LA455_0==SQL92_RESERVED_NULL) ) {
						alt455=1;
					}
					switch (alt455) {
						case 1 :
							// PLSQLPrinter.g:2095:55: SQL92_RESERVED_NULL
							{
							match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_standard_function22240); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2096:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 21 :
					// PLSQLPrinter.g:2097:10: ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? )
					{
					match(input,XMLROOT_VK,FOLLOW_XMLROOT_VK_in_standard_function22268); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function22270);
					expression387=expression();
					state._fsp--;

					pushFollow(FOLLOW_xml_param_version_part_in_standard_function22272);
					xml_param_version_part388=xml_param_version_part();
					state._fsp--;

					// PLSQLPrinter.g:2097:57: ( xmlroot_param_standalone_part )?
					int alt456=2;
					int LA456_0 = input.LA(1);
					if ( (LA456_0==STANDALONE_VK) ) {
						alt456=1;
					}
					switch (alt456) {
						case 1 :
							// PLSQLPrinter.g:2097:57: xmlroot_param_standalone_part
							{
							pushFollow(FOLLOW_xmlroot_param_standalone_part_in_standard_function22274);
							xmlroot_param_standalone_part389=xmlroot_param_standalone_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2098:5: -> xmlroot(expression=$expression.stxml_param_version_part=$xml_param_version_part.stxmlroot_param_standalone_part=$xmlroot_param_standalone_part.st)
					{
						retval.st = templateLib.getInstanceOf("xmlroot",new STAttrMap().put("expression", (expression387!=null?((StringTemplate)expression387.getTemplate()):null)).put("xml_param_version_part", (xml_param_version_part388!=null?((StringTemplate)xml_param_version_part388.getTemplate()):null)).put("xmlroot_param_standalone_part", (xmlroot_param_standalone_part389!=null?((StringTemplate)xmlroot_param_standalone_part389.getTemplate()):null)));
					}



					}
					break;
				case 22 :
					// PLSQLPrinter.g:2101:10: ^( XMLTABLE_VK ( xml_namespaces_clause )? expr= expression ( xml_passing_clause )? (xml_table_columns+= xml_table_column )* )
					{
					match(input,XMLTABLE_VK,FOLLOW_XMLTABLE_VK_in_standard_function22334); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2101:24: ( xml_namespaces_clause )?
					int alt457=2;
					int LA457_0 = input.LA(1);
					if ( (LA457_0==XMLNAMESPACES_VK) ) {
						alt457=1;
					}
					switch (alt457) {
						case 1 :
							// PLSQLPrinter.g:2101:24: xml_namespaces_clause
							{
							pushFollow(FOLLOW_xml_namespaces_clause_in_standard_function22336);
							xml_namespaces_clause390=xml_namespaces_clause();
							state._fsp--;

							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function22341);
					expr=expression();
					state._fsp--;

					// PLSQLPrinter.g:2101:63: ( xml_passing_clause )?
					int alt458=2;
					int LA458_0 = input.LA(1);
					if ( (LA458_0==PASSING_VK) ) {
						alt458=1;
					}
					switch (alt458) {
						case 1 :
							// PLSQLPrinter.g:2101:63: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function22343);
							xml_passing_clause391=xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2101:100: (xml_table_columns+= xml_table_column )*
					loop459:
					while (true) {
						int alt459=2;
						int LA459_0 = input.LA(1);
						if ( (LA459_0==XML_COLUMN) ) {
							alt459=1;
						}

						switch (alt459) {
						case 1 :
							// PLSQLPrinter.g:2101:100: xml_table_columns+= xml_table_column
							{
							pushFollow(FOLLOW_xml_table_column_in_standard_function22348);
							xml_table_columns=xml_table_column();
							state._fsp--;

							if (list_xml_table_columns==null) list_xml_table_columns=new ArrayList<Object>();
							list_xml_table_columns.add(xml_table_columns.getTemplate());
							}
							break;

						default :
							break loop459;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2102:5: -> xmltable(xml_namespaces_clause=$xml_namespaces_clause.stxquery_expression=$expr.stxml_passing_clause=$xml_passing_clause.stxml_table_columns=$xml_table_columns)
					{
						retval.st = templateLib.getInstanceOf("xmltable",new STAttrMap().put("xml_namespaces_clause", (xml_namespaces_clause390!=null?((StringTemplate)xml_namespaces_clause390.getTemplate()):null)).put("xquery_expression", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("xml_passing_clause", (xml_passing_clause391!=null?((StringTemplate)xml_passing_clause391.getTemplate()):null)).put("xml_table_columns", list_xml_table_columns));
					}



					}
					break;
				case 23 :
					// PLSQLPrinter.g:2105:10: ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? (value_exprs+= xmlelement_value_expr )* )
					{
					match(input,XMLELEMENT_VK,FOLLOW_XMLELEMENT_VK_in_standard_function22413); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2106:13: ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )?
					int alt460=3;
					int LA460_0 = input.LA(1);
					if ( (LA460_0==ENTITYESCAPING_VK) ) {
						alt460=1;
					}
					else if ( (LA460_0==NOENTITYESCAPING_VK) ) {
						alt460=2;
					}
					switch (alt460) {
						case 1 :
							// PLSQLPrinter.g:2106:14: ENTITYESCAPING_VK
							{
							ENTITYESCAPING_VK392=(CommonTree)match(input,ENTITYESCAPING_VK,FOLLOW_ENTITYESCAPING_VK_in_standard_function22428); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2106:32: NOENTITYESCAPING_VK
							{
							NOENTITYESCAPING_VK393=(CommonTree)match(input,NOENTITYESCAPING_VK,FOLLOW_NOENTITYESCAPING_VK_in_standard_function22430); 
							}
							break;

					}

					// PLSQLPrinter.g:2107:13: ( NAME_VK | EVALNAME_VK )?
					int alt461=3;
					int LA461_0 = input.LA(1);
					if ( (LA461_0==NAME_VK) ) {
						alt461=1;
					}
					else if ( (LA461_0==EVALNAME_VK) ) {
						alt461=2;
					}
					switch (alt461) {
						case 1 :
							// PLSQLPrinter.g:2107:14: NAME_VK
							{
							NAME_VK394=(CommonTree)match(input,NAME_VK,FOLLOW_NAME_VK_in_standard_function22447); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2107:22: EVALNAME_VK
							{
							EVALNAME_VK395=(CommonTree)match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_standard_function22449); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function22453);
					expression396=expression();
					state._fsp--;

					// PLSQLPrinter.g:2108:13: ( xml_attributes_clause )?
					int alt462=2;
					int LA462_0 = input.LA(1);
					if ( (LA462_0==XMLATTRIBUTES_VK) ) {
						alt462=1;
					}
					switch (alt462) {
						case 1 :
							// PLSQLPrinter.g:2108:13: xml_attributes_clause
							{
							pushFollow(FOLLOW_xml_attributes_clause_in_standard_function22467);
							xml_attributes_clause397=xml_attributes_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2108:47: (value_exprs+= xmlelement_value_expr )*
					loop463:
					while (true) {
						int alt463=2;
						int LA463_0 = input.LA(1);
						if ( (LA463_0==EXPR||LA463_0==LOGIC_EXPR) ) {
							alt463=1;
						}

						switch (alt463) {
						case 1 :
							// PLSQLPrinter.g:2108:47: value_exprs+= xmlelement_value_expr
							{
							pushFollow(FOLLOW_xmlelement_value_expr_in_standard_function22472);
							value_exprs=xmlelement_value_expr();
							state._fsp--;

							if (list_value_exprs==null) list_value_exprs=new ArrayList<Object>();
							list_value_exprs.add(value_exprs.getTemplate());
							}
							break;

						default :
							break loop463;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2110:5: -> xmlelement(is_entity_escaping=$ENTITYESCAPING_VK != nullis_no_entity_escaping=$NOENTITYESCAPING_VK != nullis_name=$NAME_VK != nullis_evalname=$EVALNAME_VK != nullexpression=$expression.stxml_attributes_clause=$xml_attributes_clause.stvalue_expressions=$value_exprs)
					{
						retval.st = templateLib.getInstanceOf("xmlelement",new STAttrMap().put("is_entity_escaping", ENTITYESCAPING_VK392 != null).put("is_no_entity_escaping", NOENTITYESCAPING_VK393 != null).put("is_name", NAME_VK394 != null).put("is_evalname", EVALNAME_VK395 != null).put("expression", (expression396!=null?((StringTemplate)expression396.getTemplate()):null)).put("xml_attributes_clause", (xml_attributes_clause397!=null?((StringTemplate)xml_attributes_clause397.getTemplate()):null)).put("value_expressions", list_value_exprs));
					}



					}
					break;
				case 24 :
					// PLSQLPrinter.g:2114:10: ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? )
					{
					match(input,XMLPI_VK,FOLLOW_XMLPI_VK_in_standard_function22571); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2115:17: ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression )
					int alt465=2;
					int LA465_0 = input.LA(1);
					if ( (LA465_0==NAME_VK) ) {
						alt465=1;
					}
					else if ( (LA465_0==EVALNAME_VK) ) {
						alt465=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 465, 0, input);
						throw nvae;
					}

					switch (alt465) {
						case 1 :
							// PLSQLPrinter.g:2115:22: NAME_VK ( char_set_name )? ID
							{
							match(input,NAME_VK,FOLLOW_NAME_VK_in_standard_function22594); 
							// PLSQLPrinter.g:2115:30: ( char_set_name )?
							int alt464=2;
							int LA464_0 = input.LA(1);
							if ( (LA464_0==CHAR_SET_NAME) ) {
								alt464=1;
							}
							switch (alt464) {
								case 1 :
									// PLSQLPrinter.g:2115:30: char_set_name
									{
									pushFollow(FOLLOW_char_set_name_in_standard_function22596);
									char_set_name();
									state._fsp--;

									}
									break;

							}

							match(input,ID,FOLLOW_ID_in_standard_function22599); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2116:22: EVALNAME_VK expression
							{
							match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_standard_function22622); 
							pushFollow(FOLLOW_expression_in_standard_function22624);
							expression();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2118:17: ( expression )?
					int alt466=2;
					int LA466_0 = input.LA(1);
					if ( (LA466_0==EXPR||LA466_0==LOGIC_EXPR) ) {
						alt466=1;
					}
					switch (alt466) {
						case 1 :
							// PLSQLPrinter.g:2118:17: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function22660);
							expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2120:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 25 :
					// PLSQLPrinter.g:2121:10: ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? )
					{
					match(input,XMLSERIALIZE_VK,FOLLOW_XMLSERIALIZE_VK_in_standard_function22697); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2122:17: ( DOCUMENT_VK | CONTENT_VK )
					int alt467=2;
					int LA467_0 = input.LA(1);
					if ( (LA467_0==DOCUMENT_VK) ) {
						alt467=1;
					}
					else if ( (LA467_0==CONTENT_VK) ) {
						alt467=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 467, 0, input);
						throw nvae;
					}

					switch (alt467) {
						case 1 :
							// PLSQLPrinter.g:2122:18: DOCUMENT_VK
							{
							match(input,DOCUMENT_VK,FOLLOW_DOCUMENT_VK_in_standard_function22716); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2122:30: CONTENT_VK
							{
							match(input,CONTENT_VK,FOLLOW_CONTENT_VK_in_standard_function22718); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function22737);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:2123:28: ( type_spec )?
					int alt468=2;
					int LA468_0 = input.LA(1);
					if ( (LA468_0==CUSTOM_TYPE||LA468_0==INTERVAL_DATATYPE||LA468_0==NATIVE_DATATYPE) ) {
						alt468=1;
					}
					switch (alt468) {
						case 1 :
							// PLSQLPrinter.g:2123:28: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_standard_function22739);
							type_spec();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2124:17: ( xmlserialize_param_enconding_part )?
					int alt469=2;
					int LA469_0 = input.LA(1);
					if ( (LA469_0==ENCODING_VK) ) {
						alt469=1;
					}
					switch (alt469) {
						case 1 :
							// PLSQLPrinter.g:2124:17: xmlserialize_param_enconding_part
							{
							pushFollow(FOLLOW_xmlserialize_param_enconding_part_in_standard_function22758);
							xmlserialize_param_enconding_part();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2125:17: ( xml_param_version_part )?
					int alt470=2;
					int LA470_0 = input.LA(1);
					if ( (LA470_0==VERSION_VK) ) {
						alt470=1;
					}
					switch (alt470) {
						case 1 :
							// PLSQLPrinter.g:2125:17: xml_param_version_part
							{
							pushFollow(FOLLOW_xml_param_version_part_in_standard_function22777);
							xml_param_version_part();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2126:17: ( xmlserialize_param_ident_part )?
					int alt471=2;
					int LA471_0 = input.LA(1);
					if ( (LA471_0==INDENT_VK||LA471_0==NO_VK) ) {
						alt471=1;
					}
					switch (alt471) {
						case 1 :
							// PLSQLPrinter.g:2126:17: xmlserialize_param_ident_part
							{
							pushFollow(FOLLOW_xmlserialize_param_ident_part_in_standard_function22796);
							xmlserialize_param_ident_part();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2127:17: ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )?
					int alt473=2;
					int LA473_0 = input.LA(1);
					if ( (LA473_0==HIDE_VK||LA473_0==SHOW_VK) ) {
						alt473=1;
					}
					switch (alt473) {
						case 1 :
							// PLSQLPrinter.g:2127:18: ( HIDE_VK | SHOW_VK ) DEFAULTS_VK
							{
							// PLSQLPrinter.g:2127:18: ( HIDE_VK | SHOW_VK )
							int alt472=2;
							int LA472_0 = input.LA(1);
							if ( (LA472_0==HIDE_VK) ) {
								alt472=1;
							}
							else if ( (LA472_0==SHOW_VK) ) {
								alt472=2;
							}

							else {
								NoViableAltException nvae =
									new NoViableAltException("", 472, 0, input);
								throw nvae;
							}

							switch (alt472) {
								case 1 :
									// PLSQLPrinter.g:2127:19: HIDE_VK
									{
									match(input,HIDE_VK,FOLLOW_HIDE_VK_in_standard_function22817); 
									}
									break;
								case 2 :
									// PLSQLPrinter.g:2127:27: SHOW_VK
									{
									match(input,SHOW_VK,FOLLOW_SHOW_VK_in_standard_function22819); 
									}
									break;

							}

							match(input,DEFAULTS_VK,FOLLOW_DEFAULTS_VK_in_standard_function22822); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2129:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "standard_function"


	public static class extract_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "extract_part"
	// PLSQLPrinter.g:2132:1: extract_part : ( YEAR_VK -> string_literal(val=\"year\")| MONTH_VK -> string_literal(val=\"month\")| DAY_VK -> string_literal(val=\"day\")| HOUR_VK -> string_literal(val=\"hour\")| MINUTE_VK -> string_literal(val=\"minute\")| SECOND_VK -> string_literal(val=\"second\")| TIMEZONE_HOUR_VK -> string_literal(val=\"timezone_hour\")| TIMEZONE_MINUTE_VK -> string_literal(val=\"timezone_minute\")| TIMEZONE_ABBR_VK -> string_literal(val=\"timezone_abbr\")| TIMEZONE_REGION_VK -> string_literal(val=\"timezone_region\"));
	public final PLSQLPrinter.extract_part_return extract_part() throws RecognitionException {
		PLSQLPrinter.extract_part_return retval = new PLSQLPrinter.extract_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2133:5: ( YEAR_VK -> string_literal(val=\"year\")| MONTH_VK -> string_literal(val=\"month\")| DAY_VK -> string_literal(val=\"day\")| HOUR_VK -> string_literal(val=\"hour\")| MINUTE_VK -> string_literal(val=\"minute\")| SECOND_VK -> string_literal(val=\"second\")| TIMEZONE_HOUR_VK -> string_literal(val=\"timezone_hour\")| TIMEZONE_MINUTE_VK -> string_literal(val=\"timezone_minute\")| TIMEZONE_ABBR_VK -> string_literal(val=\"timezone_abbr\")| TIMEZONE_REGION_VK -> string_literal(val=\"timezone_region\"))
			int alt475=10;
			switch ( input.LA(1) ) {
			case YEAR_VK:
				{
				alt475=1;
				}
				break;
			case MONTH_VK:
				{
				alt475=2;
				}
				break;
			case DAY_VK:
				{
				alt475=3;
				}
				break;
			case HOUR_VK:
				{
				alt475=4;
				}
				break;
			case MINUTE_VK:
				{
				alt475=5;
				}
				break;
			case SECOND_VK:
				{
				alt475=6;
				}
				break;
			case TIMEZONE_HOUR_VK:
				{
				alt475=7;
				}
				break;
			case TIMEZONE_MINUTE_VK:
				{
				alt475=8;
				}
				break;
			case TIMEZONE_ABBR_VK:
				{
				alt475=9;
				}
				break;
			case TIMEZONE_REGION_VK:
				{
				alt475=10;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 475, 0, input);
				throw nvae;
			}
			switch (alt475) {
				case 1 :
					// PLSQLPrinter.g:2134:9: YEAR_VK
					{
					match(input,YEAR_VK,FOLLOW_YEAR_VK_in_extract_part22877); 
					// TEMPLATE REWRITE
					// 2134:17: -> string_literal(val=\"year\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "year"));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2135:11: MONTH_VK
					{
					match(input,MONTH_VK,FOLLOW_MONTH_VK_in_extract_part22898); 
					// TEMPLATE REWRITE
					// 2135:20: -> string_literal(val=\"month\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "month"));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:2136:11: DAY_VK
					{
					match(input,DAY_VK,FOLLOW_DAY_VK_in_extract_part22919); 
					// TEMPLATE REWRITE
					// 2136:18: -> string_literal(val=\"day\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "day"));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:2137:11: HOUR_VK
					{
					match(input,HOUR_VK,FOLLOW_HOUR_VK_in_extract_part22940); 
					// TEMPLATE REWRITE
					// 2137:19: -> string_literal(val=\"hour\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "hour"));
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:2138:11: MINUTE_VK
					{
					match(input,MINUTE_VK,FOLLOW_MINUTE_VK_in_extract_part22961); 
					// TEMPLATE REWRITE
					// 2138:21: -> string_literal(val=\"minute\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "minute"));
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:2139:11: SECOND_VK
					{
					match(input,SECOND_VK,FOLLOW_SECOND_VK_in_extract_part22982); 
					// TEMPLATE REWRITE
					// 2139:21: -> string_literal(val=\"second\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "second"));
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:2140:11: TIMEZONE_HOUR_VK
					{
					match(input,TIMEZONE_HOUR_VK,FOLLOW_TIMEZONE_HOUR_VK_in_extract_part23003); 
					// TEMPLATE REWRITE
					// 2140:28: -> string_literal(val=\"timezone_hour\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "timezone_hour"));
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:2141:11: TIMEZONE_MINUTE_VK
					{
					match(input,TIMEZONE_MINUTE_VK,FOLLOW_TIMEZONE_MINUTE_VK_in_extract_part23024); 
					// TEMPLATE REWRITE
					// 2141:30: -> string_literal(val=\"timezone_minute\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "timezone_minute"));
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:2142:11: TIMEZONE_ABBR_VK
					{
					match(input,TIMEZONE_ABBR_VK,FOLLOW_TIMEZONE_ABBR_VK_in_extract_part23045); 
					// TEMPLATE REWRITE
					// 2142:28: -> string_literal(val=\"timezone_abbr\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "timezone_abbr"));
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:2143:11: TIMEZONE_REGION_VK
					{
					match(input,TIMEZONE_REGION_VK,FOLLOW_TIMEZONE_REGION_VK_in_extract_part23066); 
					// TEMPLATE REWRITE
					// 2143:30: -> string_literal(val=\"timezone_region\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "timezone_region"));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "extract_part"


	public static class xmlelement_value_expr_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlelement_value_expr"
	// PLSQLPrinter.g:2146:1: xmlelement_value_expr : expression ( alias )? -> xmlelement_value_expr(expression=$expression.stalias=$alias.st);
	public final PLSQLPrinter.xmlelement_value_expr_return xmlelement_value_expr() throws RecognitionException {
		PLSQLPrinter.xmlelement_value_expr_return retval = new PLSQLPrinter.xmlelement_value_expr_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression398 =null;
		TreeRuleReturnScope alias399 =null;

		try {
			// PLSQLPrinter.g:2147:5: ( expression ( alias )? -> xmlelement_value_expr(expression=$expression.stalias=$alias.st))
			// PLSQLPrinter.g:2147:9: expression ( alias )?
			{
			pushFollow(FOLLOW_expression_in_xmlelement_value_expr23098);
			expression398=expression();
			state._fsp--;

			// PLSQLPrinter.g:2147:20: ( alias )?
			int alt476=2;
			int LA476_0 = input.LA(1);
			if ( (LA476_0==COLUMN_ALIAS||LA476_0==TABLE_ALIAS) ) {
				alt476=1;
			}
			switch (alt476) {
				case 1 :
					// PLSQLPrinter.g:2147:20: alias
					{
					pushFollow(FOLLOW_alias_in_xmlelement_value_expr23100);
					alias399=alias();
					state._fsp--;

					}
					break;

			}

			// TEMPLATE REWRITE
			// 2148:5: -> xmlelement_value_expr(expression=$expression.stalias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("xmlelement_value_expr",new STAttrMap().put("expression", (expression398!=null?((StringTemplate)expression398.getTemplate()):null)).put("alias", (alias399!=null?((StringTemplate)alias399.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlelement_value_expr"


	public static class over_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "over_clause"
	// PLSQLPrinter.g:2151:1: over_clause : ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? ) -> over_clause(query_partition_clause=$query_partition_clause.storder_by_clause=$order_by_clause.stwindowing_clause=$windowing_clause.st);
	public final PLSQLPrinter.over_clause_return over_clause() throws RecognitionException {
		PLSQLPrinter.over_clause_return retval = new PLSQLPrinter.over_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope query_partition_clause400 =null;
		TreeRuleReturnScope order_by_clause401 =null;
		TreeRuleReturnScope windowing_clause402 =null;

		try {
			// PLSQLPrinter.g:2152:5: ( ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? ) -> over_clause(query_partition_clause=$query_partition_clause.storder_by_clause=$order_by_clause.stwindowing_clause=$windowing_clause.st))
			// PLSQLPrinter.g:2152:10: ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? )
			{
			match(input,OVER_VK,FOLLOW_OVER_VK_in_over_clause23141); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:2152:20: ( query_partition_clause )?
				int alt477=2;
				int LA477_0 = input.LA(1);
				if ( (LA477_0==PARTITION_VK) ) {
					alt477=1;
				}
				switch (alt477) {
					case 1 :
						// PLSQLPrinter.g:2152:20: query_partition_clause
						{
						pushFollow(FOLLOW_query_partition_clause_in_over_clause23143);
						query_partition_clause400=query_partition_clause();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:2152:44: ( order_by_clause ( windowing_clause )? )?
				int alt479=2;
				int LA479_0 = input.LA(1);
				if ( (LA479_0==SQL92_RESERVED_ORDER) ) {
					alt479=1;
				}
				switch (alt479) {
					case 1 :
						// PLSQLPrinter.g:2152:45: order_by_clause ( windowing_clause )?
						{
						pushFollow(FOLLOW_order_by_clause_in_over_clause23147);
						order_by_clause401=order_by_clause();
						state._fsp--;

						// PLSQLPrinter.g:2152:61: ( windowing_clause )?
						int alt478=2;
						int LA478_0 = input.LA(1);
						if ( (LA478_0==RANGE_VK||LA478_0==ROWS_VK) ) {
							alt478=1;
						}
						switch (alt478) {
							case 1 :
								// PLSQLPrinter.g:2152:61: windowing_clause
								{
								pushFollow(FOLLOW_windowing_clause_in_over_clause23149);
								windowing_clause402=windowing_clause();
								state._fsp--;

								}
								break;

						}

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 2153:5: -> over_clause(query_partition_clause=$query_partition_clause.storder_by_clause=$order_by_clause.stwindowing_clause=$windowing_clause.st)
			{
				retval.st = templateLib.getInstanceOf("over_clause",new STAttrMap().put("query_partition_clause", (query_partition_clause400!=null?((StringTemplate)query_partition_clause400.getTemplate()):null)).put("order_by_clause", (order_by_clause401!=null?((StringTemplate)order_by_clause401.getTemplate()):null)).put("windowing_clause", (windowing_clause402!=null?((StringTemplate)windowing_clause402.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "over_clause"


	public static class windowing_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "windowing_clause"
	// PLSQLPrinter.g:2158:1: windowing_clause : ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN e1= windowing_elements e2= windowing_elements ) |e1= windowing_elements ) ) -> windowing_clause(is_rows=$ROWS_VK != nullis_range=$RANGE_VK != nullis_between=$SQL92_RESERVED_BETWEEN != nullwindowing_element_1=$e1.stwindowing_element_2=$e2.st);
	public final PLSQLPrinter.windowing_clause_return windowing_clause() throws RecognitionException {
		PLSQLPrinter.windowing_clause_return retval = new PLSQLPrinter.windowing_clause_return();
		retval.start = input.LT(1);

		CommonTree ROWS_VK403=null;
		CommonTree RANGE_VK404=null;
		CommonTree SQL92_RESERVED_BETWEEN405=null;
		TreeRuleReturnScope e1 =null;
		TreeRuleReturnScope e2 =null;

		try {
			// PLSQLPrinter.g:2159:5: ( ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN e1= windowing_elements e2= windowing_elements ) |e1= windowing_elements ) ) -> windowing_clause(is_rows=$ROWS_VK != nullis_range=$RANGE_VK != nullis_between=$SQL92_RESERVED_BETWEEN != nullwindowing_element_1=$e1.stwindowing_element_2=$e2.st))
			// PLSQLPrinter.g:2159:10: ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN e1= windowing_elements e2= windowing_elements ) |e1= windowing_elements ) )
			{
			// PLSQLPrinter.g:2159:12: ( ROWS_VK | RANGE_VK )
			int alt480=2;
			int LA480_0 = input.LA(1);
			if ( (LA480_0==ROWS_VK) ) {
				alt480=1;
			}
			else if ( (LA480_0==RANGE_VK) ) {
				alt480=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 480, 0, input);
				throw nvae;
			}

			switch (alt480) {
				case 1 :
					// PLSQLPrinter.g:2159:13: ROWS_VK
					{
					ROWS_VK403=(CommonTree)match(input,ROWS_VK,FOLLOW_ROWS_VK_in_windowing_clause23221); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2159:21: RANGE_VK
					{
					RANGE_VK404=(CommonTree)match(input,RANGE_VK,FOLLOW_RANGE_VK_in_windowing_clause23223); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2160:13: ( ^( SQL92_RESERVED_BETWEEN e1= windowing_elements e2= windowing_elements ) |e1= windowing_elements )
			int alt481=2;
			int LA481_0 = input.LA(1);
			if ( (LA481_0==SQL92_RESERVED_BETWEEN) ) {
				alt481=1;
			}
			else if ( (LA481_0==CURRENT_VK||LA481_0==FOLLOWING_VK||LA481_0==PRECEDING_VK||LA481_0==UNBOUNDED_VK) ) {
				alt481=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 481, 0, input);
				throw nvae;
			}

			switch (alt481) {
				case 1 :
					// PLSQLPrinter.g:2160:18: ^( SQL92_RESERVED_BETWEEN e1= windowing_elements e2= windowing_elements )
					{
					SQL92_RESERVED_BETWEEN405=(CommonTree)match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_windowing_clause23244); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_windowing_elements_in_windowing_clause23248);
					e1=windowing_elements();
					state._fsp--;

					pushFollow(FOLLOW_windowing_elements_in_windowing_clause23252);
					e2=windowing_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:2161:18: e1= windowing_elements
					{
					pushFollow(FOLLOW_windowing_elements_in_windowing_clause23274);
					e1=windowing_elements();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2164:5: -> windowing_clause(is_rows=$ROWS_VK != nullis_range=$RANGE_VK != nullis_between=$SQL92_RESERVED_BETWEEN != nullwindowing_element_1=$e1.stwindowing_element_2=$e2.st)
			{
				retval.st = templateLib.getInstanceOf("windowing_clause",new STAttrMap().put("is_rows", ROWS_VK403 != null).put("is_range", RANGE_VK404 != null).put("is_between", SQL92_RESERVED_BETWEEN405 != null).put("windowing_element_1", (e1!=null?((StringTemplate)e1.getTemplate()):null)).put("windowing_element_2", (e2!=null?((StringTemplate)e2.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "windowing_clause"


	public static class windowing_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "windowing_elements"
	// PLSQLPrinter.g:2169:1: windowing_elements : ( ^( UNBOUNDED_VK PRECEDING_VK ) -> windowing_elements_unbounded_preceding(| ^( CURRENT_VK ROW_VK ) -> windowing_elements_current_row(| ^( PRECEDING_VK expr= expression ) -> windowing_elements_rows_preceding(expression=$expr.st)| ^( FOLLOWING_VK expr= expression ) -> windowing_elements_rows_following(expression=$expr.st));
	public final PLSQLPrinter.windowing_elements_return windowing_elements() throws RecognitionException {
		PLSQLPrinter.windowing_elements_return retval = new PLSQLPrinter.windowing_elements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expr =null;

		try {
			// PLSQLPrinter.g:2170:5: ( ^( UNBOUNDED_VK PRECEDING_VK ) -> windowing_elements_unbounded_preceding(| ^( CURRENT_VK ROW_VK ) -> windowing_elements_current_row(| ^( PRECEDING_VK expr= expression ) -> windowing_elements_rows_preceding(expression=$expr.st)| ^( FOLLOWING_VK expr= expression ) -> windowing_elements_rows_following(expression=$expr.st))
			int alt482=4;
			switch ( input.LA(1) ) {
			case UNBOUNDED_VK:
				{
				alt482=1;
				}
				break;
			case CURRENT_VK:
				{
				alt482=2;
				}
				break;
			case PRECEDING_VK:
				{
				alt482=3;
				}
				break;
			case FOLLOWING_VK:
				{
				alt482=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 482, 0, input);
				throw nvae;
			}
			switch (alt482) {
				case 1 :
					// PLSQLPrinter.g:2170:10: ^( UNBOUNDED_VK PRECEDING_VK )
					{
					match(input,UNBOUNDED_VK,FOLLOW_UNBOUNDED_VK_in_windowing_elements23375); 
					match(input, Token.DOWN, null); 
					match(input,PRECEDING_VK,FOLLOW_PRECEDING_VK_in_windowing_elements23377); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2170:39: -> windowing_elements_unbounded_preceding(
					{
						retval.st = templateLib.getInstanceOf("windowing_elements_unbounded_preceding");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2171:10: ^( CURRENT_VK ROW_VK )
					{
					match(input,CURRENT_VK,FOLLOW_CURRENT_VK_in_windowing_elements23396); 
					match(input, Token.DOWN, null); 
					match(input,ROW_VK,FOLLOW_ROW_VK_in_windowing_elements23398); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2171:31: -> windowing_elements_current_row(
					{
						retval.st = templateLib.getInstanceOf("windowing_elements_current_row");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:2172:10: ^( PRECEDING_VK expr= expression )
					{
					match(input,PRECEDING_VK,FOLLOW_PRECEDING_VK_in_windowing_elements23417); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_windowing_elements23421);
					expr=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2172:42: -> windowing_elements_rows_preceding(expression=$expr.st)
					{
						retval.st = templateLib.getInstanceOf("windowing_elements_rows_preceding",new STAttrMap().put("expression", (expr!=null?((StringTemplate)expr.getTemplate()):null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:2173:10: ^( FOLLOWING_VK expr= expression )
					{
					match(input,FOLLOWING_VK,FOLLOW_FOLLOWING_VK_in_windowing_elements23443); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_windowing_elements23447);
					expr=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2173:42: -> windowing_elements_rows_following(expression=$expr.st)
					{
						retval.st = templateLib.getInstanceOf("windowing_elements_rows_following",new STAttrMap().put("expression", (expr!=null?((StringTemplate)expr.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "windowing_elements"


	public static class using_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "using_clause"
	// PLSQLPrinter.g:2176:1: using_clause : ^( PLSQL_NON_RESERVED_USING (using_elements+= using_element )+ ) -> using_clause(using_elements=$using_elements);
	public final PLSQLPrinter.using_clause_return using_clause() throws RecognitionException {
		PLSQLPrinter.using_clause_return retval = new PLSQLPrinter.using_clause_return();
		retval.start = input.LT(1);

		List<Object> list_using_elements=null;
		RuleReturnScope using_elements = null;
		try {
			// PLSQLPrinter.g:2177:5: ( ^( PLSQL_NON_RESERVED_USING (using_elements+= using_element )+ ) -> using_clause(using_elements=$using_elements))
			// PLSQLPrinter.g:2177:10: ^( PLSQL_NON_RESERVED_USING (using_elements+= using_element )+ )
			{
			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_using_clause23478); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2177:51: (using_elements+= using_element )+
			int cnt483=0;
			loop483:
			while (true) {
				int alt483=2;
				int LA483_0 = input.LA(1);
				if ( (LA483_0==ASTERISK||LA483_0==ELEMENT) ) {
					alt483=1;
				}

				switch (alt483) {
				case 1 :
					// PLSQLPrinter.g:2177:51: using_elements+= using_element
					{
					pushFollow(FOLLOW_using_element_in_using_clause23482);
					using_elements=using_element();
					state._fsp--;

					if (list_using_elements==null) list_using_elements=new ArrayList<Object>();
					list_using_elements.add(using_elements.getTemplate());
					}
					break;

				default :
					if ( cnt483 >= 1 ) break loop483;
					EarlyExitException eee = new EarlyExitException(483, input);
					throw eee;
				}
				cnt483++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2178:5: -> using_clause(using_elements=$using_elements)
			{
				retval.st = templateLib.getInstanceOf("using_clause",new STAttrMap().put("using_elements", list_using_elements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "using_clause"


	public static class using_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "using_element"
	// PLSQLPrinter.g:2181:1: using_element : ( ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? ) -> using_element_element(is_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullexpression=$expression.stalias=$alias.st)| ASTERISK -> using_element_asterisk();
	public final PLSQLPrinter.using_element_return using_element() throws RecognitionException {
		PLSQLPrinter.using_element_return retval = new PLSQLPrinter.using_element_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_IN406=null;
		CommonTree OUT_VK407=null;
		TreeRuleReturnScope expression408 =null;
		TreeRuleReturnScope alias409 =null;

		try {
			// PLSQLPrinter.g:2182:5: ( ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? ) -> using_element_element(is_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullexpression=$expression.stalias=$alias.st)| ASTERISK -> using_element_asterisk()
			int alt487=2;
			int LA487_0 = input.LA(1);
			if ( (LA487_0==ELEMENT) ) {
				alt487=1;
			}
			else if ( (LA487_0==ASTERISK) ) {
				alt487=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 487, 0, input);
				throw nvae;
			}

			switch (alt487) {
				case 1 :
					// PLSQLPrinter.g:2182:10: ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? )
					{
					match(input,ELEMENT,FOLLOW_ELEMENT_in_using_element23520); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2182:20: ( SQL92_RESERVED_IN )?
					int alt484=2;
					int LA484_0 = input.LA(1);
					if ( (LA484_0==SQL92_RESERVED_IN) ) {
						alt484=1;
					}
					switch (alt484) {
						case 1 :
							// PLSQLPrinter.g:2182:20: SQL92_RESERVED_IN
							{
							SQL92_RESERVED_IN406=(CommonTree)match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_using_element23522); 
							}
							break;

					}

					// PLSQLPrinter.g:2182:39: ( OUT_VK )?
					int alt485=2;
					int LA485_0 = input.LA(1);
					if ( (LA485_0==OUT_VK) ) {
						alt485=1;
					}
					switch (alt485) {
						case 1 :
							// PLSQLPrinter.g:2182:39: OUT_VK
							{
							OUT_VK407=(CommonTree)match(input,OUT_VK,FOLLOW_OUT_VK_in_using_element23525); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_using_element23528);
					expression408=expression();
					state._fsp--;

					// PLSQLPrinter.g:2182:58: ( alias )?
					int alt486=2;
					int LA486_0 = input.LA(1);
					if ( (LA486_0==COLUMN_ALIAS||LA486_0==TABLE_ALIAS) ) {
						alt486=1;
					}
					switch (alt486) {
						case 1 :
							// PLSQLPrinter.g:2182:58: alias
							{
							pushFollow(FOLLOW_alias_in_using_element23530);
							alias409=alias();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2183:5: -> using_element_element(is_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullexpression=$expression.stalias=$alias.st)
					{
						retval.st = templateLib.getInstanceOf("using_element_element",new STAttrMap().put("is_in", SQL92_RESERVED_IN406 != null).put("is_out", OUT_VK407 != null).put("expression", (expression408!=null?((StringTemplate)expression408.getTemplate()):null)).put("alias", (alias409!=null?((StringTemplate)alias409.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2186:10: ASTERISK
					{
					match(input,ASTERISK,FOLLOW_ASTERISK_in_using_element23594); 
					// TEMPLATE REWRITE
					// 2187:5: -> using_element_asterisk(
					{
						retval.st = templateLib.getInstanceOf("using_element_asterisk");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "using_element"


	public static class collect_order_by_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "collect_order_by_part"
	// PLSQLPrinter.g:2190:1: collect_order_by_part : ^( SQL92_RESERVED_ORDER expression ) -> template( \"not implemented: collect_order_by_part\";
	public final PLSQLPrinter.collect_order_by_part_return collect_order_by_part() throws RecognitionException {
		PLSQLPrinter.collect_order_by_part_return retval = new PLSQLPrinter.collect_order_by_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2191:5: ( ^( SQL92_RESERVED_ORDER expression ) -> template( \"not implemented: collect_order_by_part\")
			// PLSQLPrinter.g:2191:10: ^( SQL92_RESERVED_ORDER expression )
			{
			match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_collect_order_by_part23627); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_collect_order_by_part23629);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2192:5: -> template( \"not implemented: collect_order_by_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: collect_order_by_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "collect_order_by_part"


	public static class within_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "within_clause"
	// PLSQLPrinter.g:2195:1: within_clause : ^( WITHIN_VK order_by_clause ) -> within_clause(order_by_clause=$order_by_clause.st);
	public final PLSQLPrinter.within_clause_return within_clause() throws RecognitionException {
		PLSQLPrinter.within_clause_return retval = new PLSQLPrinter.within_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope order_by_clause410 =null;

		try {
			// PLSQLPrinter.g:2196:5: ( ^( WITHIN_VK order_by_clause ) -> within_clause(order_by_clause=$order_by_clause.st))
			// PLSQLPrinter.g:2196:10: ^( WITHIN_VK order_by_clause )
			{
			match(input,WITHIN_VK,FOLLOW_WITHIN_VK_in_within_clause23665); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_order_by_clause_in_within_clause23667);
			order_by_clause410=order_by_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2197:5: -> within_clause(order_by_clause=$order_by_clause.st)
			{
				retval.st = templateLib.getInstanceOf("within_clause",new STAttrMap().put("order_by_clause", (order_by_clause410!=null?((StringTemplate)order_by_clause410.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "within_clause"


	public static class cost_matrix_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cost_matrix_clause"
	// PLSQLPrinter.g:2200:1: cost_matrix_clause : ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) ) -> template( \"not implemented: cost_matrix_clause\";
	public final PLSQLPrinter.cost_matrix_clause_return cost_matrix_clause() throws RecognitionException {
		PLSQLPrinter.cost_matrix_clause_return retval = new PLSQLPrinter.cost_matrix_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2201:5: ( ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) ) -> template( \"not implemented: cost_matrix_clause\")
			// PLSQLPrinter.g:2201:10: ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) )
			{
			match(input,COST_VK,FOLLOW_COST_VK_in_cost_matrix_clause23704); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2202:13: ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list )
			int alt490=2;
			int LA490_0 = input.LA(1);
			if ( (LA490_0==PLSQL_NON_RESERVED_MODEL) ) {
				alt490=1;
			}
			else if ( (LA490_0==COST_CLASS_NAME) ) {
				alt490=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 490, 0, input);
				throw nvae;
			}

			switch (alt490) {
				case 1 :
					// PLSQLPrinter.g:2202:18: PLSQL_NON_RESERVED_MODEL ( AUTO_VK )?
					{
					match(input,PLSQL_NON_RESERVED_MODEL,FOLLOW_PLSQL_NON_RESERVED_MODEL_in_cost_matrix_clause23723); 
					// PLSQLPrinter.g:2202:43: ( AUTO_VK )?
					int alt488=2;
					int LA488_0 = input.LA(1);
					if ( (LA488_0==AUTO_VK) ) {
						alt488=1;
					}
					switch (alt488) {
						case 1 :
							// PLSQLPrinter.g:2202:43: AUTO_VK
							{
							match(input,AUTO_VK,FOLLOW_AUTO_VK_in_cost_matrix_clause23725); 
							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:2203:18: ( cost_class_name )+ expression_list
					{
					// PLSQLPrinter.g:2203:18: ( cost_class_name )+
					int cnt489=0;
					loop489:
					while (true) {
						int alt489=2;
						int LA489_0 = input.LA(1);
						if ( (LA489_0==COST_CLASS_NAME) ) {
							alt489=1;
						}

						switch (alt489) {
						case 1 :
							// PLSQLPrinter.g:2203:18: cost_class_name
							{
							pushFollow(FOLLOW_cost_class_name_in_cost_matrix_clause23745);
							cost_class_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt489 >= 1 ) break loop489;
							EarlyExitException eee = new EarlyExitException(489, input);
							throw eee;
						}
						cnt489++;
					}

					pushFollow(FOLLOW_expression_list_in_cost_matrix_clause23748);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2206:5: -> template( \"not implemented: cost_matrix_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: cost_matrix_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cost_matrix_clause"


	public static class xml_passing_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_passing_clause"
	// PLSQLPrinter.g:2209:1: xml_passing_clause : ^( PASSING_VK ( VALUE_VK )? exprs+= xml_passing_clause_expr ) -> xml_passing_clause(is_by_value=$VALUE_VK != nullxml_passing_clause_expressions=$exprs);
	public final PLSQLPrinter.xml_passing_clause_return xml_passing_clause() throws RecognitionException {
		PLSQLPrinter.xml_passing_clause_return retval = new PLSQLPrinter.xml_passing_clause_return();
		retval.start = input.LT(1);

		CommonTree VALUE_VK411=null;
		List<Object> list_exprs=null;
		RuleReturnScope exprs = null;
		try {
			// PLSQLPrinter.g:2210:5: ( ^( PASSING_VK ( VALUE_VK )? exprs+= xml_passing_clause_expr ) -> xml_passing_clause(is_by_value=$VALUE_VK != nullxml_passing_clause_expressions=$exprs))
			// PLSQLPrinter.g:2210:10: ^( PASSING_VK ( VALUE_VK )? exprs+= xml_passing_clause_expr )
			{
			match(input,PASSING_VK,FOLLOW_PASSING_VK_in_xml_passing_clause23807); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2210:23: ( VALUE_VK )?
			int alt491=2;
			int LA491_0 = input.LA(1);
			if ( (LA491_0==VALUE_VK) ) {
				alt491=1;
			}
			switch (alt491) {
				case 1 :
					// PLSQLPrinter.g:2210:23: VALUE_VK
					{
					VALUE_VK411=(CommonTree)match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xml_passing_clause23809); 
					}
					break;

			}

			pushFollow(FOLLOW_xml_passing_clause_expr_in_xml_passing_clause23814);
			exprs=xml_passing_clause_expr();
			state._fsp--;

			if (list_exprs==null) list_exprs=new ArrayList<Object>();
			list_exprs.add(exprs.getTemplate());
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2211:5: -> xml_passing_clause(is_by_value=$VALUE_VK != nullxml_passing_clause_expressions=$exprs)
			{
				retval.st = templateLib.getInstanceOf("xml_passing_clause",new STAttrMap().put("is_by_value", VALUE_VK411 != null).put("xml_passing_clause_expressions", list_exprs));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_passing_clause"


	public static class xml_passing_clause_expr_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_passing_clause_expr"
	// PLSQLPrinter.g:2214:1: xml_passing_clause_expr : expression ( alias )? -> xml_passing_clause_expr(expression=$expression.stalias=$alias.st);
	public final PLSQLPrinter.xml_passing_clause_expr_return xml_passing_clause_expr() throws RecognitionException {
		PLSQLPrinter.xml_passing_clause_expr_return retval = new PLSQLPrinter.xml_passing_clause_expr_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression412 =null;
		TreeRuleReturnScope alias413 =null;

		try {
			// PLSQLPrinter.g:2215:5: ( expression ( alias )? -> xml_passing_clause_expr(expression=$expression.stalias=$alias.st))
			// PLSQLPrinter.g:2215:9: expression ( alias )?
			{
			pushFollow(FOLLOW_expression_in_xml_passing_clause_expr23858);
			expression412=expression();
			state._fsp--;

			// PLSQLPrinter.g:2215:20: ( alias )?
			int alt492=2;
			int LA492_0 = input.LA(1);
			if ( (LA492_0==COLUMN_ALIAS||LA492_0==TABLE_ALIAS) ) {
				alt492=1;
			}
			switch (alt492) {
				case 1 :
					// PLSQLPrinter.g:2215:20: alias
					{
					pushFollow(FOLLOW_alias_in_xml_passing_clause_expr23860);
					alias413=alias();
					state._fsp--;

					}
					break;

			}

			// TEMPLATE REWRITE
			// 2216:5: -> xml_passing_clause_expr(expression=$expression.stalias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("xml_passing_clause_expr",new STAttrMap().put("expression", (expression412!=null?((StringTemplate)expression412.getTemplate()):null)).put("alias", (alias413!=null?((StringTemplate)alias413.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_passing_clause_expr"


	public static class xml_attributes_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_attributes_clause"
	// PLSQLPrinter.g:2219:1: xml_attributes_clause : ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? (xml_multiuse_expression_elements+= xml_multiuse_expression_element )+ ) -> xml_attributes_clause(is_entity_escaping=$ENTITYESCAPING_VK != nullis_no_entity_escaping=$NOENTITYESCAPING_VK != nullis_schema_check=$SCHEMACHECK_VK != nullis_no_schema_check=$NOSCHEMACHECK_VK != nullxml_multiuse_expression_elements=$xml_multiuse_expression_elements);
	public final PLSQLPrinter.xml_attributes_clause_return xml_attributes_clause() throws RecognitionException {
		PLSQLPrinter.xml_attributes_clause_return retval = new PLSQLPrinter.xml_attributes_clause_return();
		retval.start = input.LT(1);

		CommonTree ENTITYESCAPING_VK414=null;
		CommonTree NOENTITYESCAPING_VK415=null;
		CommonTree SCHEMACHECK_VK416=null;
		CommonTree NOSCHEMACHECK_VK417=null;
		List<Object> list_xml_multiuse_expression_elements=null;
		RuleReturnScope xml_multiuse_expression_elements = null;
		try {
			// PLSQLPrinter.g:2220:5: ( ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? (xml_multiuse_expression_elements+= xml_multiuse_expression_element )+ ) -> xml_attributes_clause(is_entity_escaping=$ENTITYESCAPING_VK != nullis_no_entity_escaping=$NOENTITYESCAPING_VK != nullis_schema_check=$SCHEMACHECK_VK != nullis_no_schema_check=$NOSCHEMACHECK_VK != nullxml_multiuse_expression_elements=$xml_multiuse_expression_elements))
			// PLSQLPrinter.g:2220:10: ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? (xml_multiuse_expression_elements+= xml_multiuse_expression_element )+ )
			{
			match(input,XMLATTRIBUTES_VK,FOLLOW_XMLATTRIBUTES_VK_in_xml_attributes_clause23901); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2221:13: ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )?
			int alt493=3;
			int LA493_0 = input.LA(1);
			if ( (LA493_0==ENTITYESCAPING_VK) ) {
				alt493=1;
			}
			else if ( (LA493_0==NOENTITYESCAPING_VK) ) {
				alt493=2;
			}
			switch (alt493) {
				case 1 :
					// PLSQLPrinter.g:2221:14: ENTITYESCAPING_VK
					{
					ENTITYESCAPING_VK414=(CommonTree)match(input,ENTITYESCAPING_VK,FOLLOW_ENTITYESCAPING_VK_in_xml_attributes_clause23916); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2221:32: NOENTITYESCAPING_VK
					{
					NOENTITYESCAPING_VK415=(CommonTree)match(input,NOENTITYESCAPING_VK,FOLLOW_NOENTITYESCAPING_VK_in_xml_attributes_clause23918); 
					}
					break;

			}

			// PLSQLPrinter.g:2222:13: ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )?
			int alt494=3;
			int LA494_0 = input.LA(1);
			if ( (LA494_0==SCHEMACHECK_VK) ) {
				alt494=1;
			}
			else if ( (LA494_0==NOSCHEMACHECK_VK) ) {
				alt494=2;
			}
			switch (alt494) {
				case 1 :
					// PLSQLPrinter.g:2222:14: SCHEMACHECK_VK
					{
					SCHEMACHECK_VK416=(CommonTree)match(input,SCHEMACHECK_VK,FOLLOW_SCHEMACHECK_VK_in_xml_attributes_clause23935); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2222:29: NOSCHEMACHECK_VK
					{
					NOSCHEMACHECK_VK417=(CommonTree)match(input,NOSCHEMACHECK_VK,FOLLOW_NOSCHEMACHECK_VK_in_xml_attributes_clause23937); 
					}
					break;

			}

			// PLSQLPrinter.g:2223:45: (xml_multiuse_expression_elements+= xml_multiuse_expression_element )+
			int cnt495=0;
			loop495:
			while (true) {
				int alt495=2;
				int LA495_0 = input.LA(1);
				if ( (LA495_0==XML_ELEMENT) ) {
					alt495=1;
				}

				switch (alt495) {
				case 1 :
					// PLSQLPrinter.g:2223:45: xml_multiuse_expression_elements+= xml_multiuse_expression_element
					{
					pushFollow(FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause23955);
					xml_multiuse_expression_elements=xml_multiuse_expression_element();
					state._fsp--;

					if (list_xml_multiuse_expression_elements==null) list_xml_multiuse_expression_elements=new ArrayList<Object>();
					list_xml_multiuse_expression_elements.add(xml_multiuse_expression_elements.getTemplate());
					}
					break;

				default :
					if ( cnt495 >= 1 ) break loop495;
					EarlyExitException eee = new EarlyExitException(495, input);
					throw eee;
				}
				cnt495++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2225:5: -> xml_attributes_clause(is_entity_escaping=$ENTITYESCAPING_VK != nullis_no_entity_escaping=$NOENTITYESCAPING_VK != nullis_schema_check=$SCHEMACHECK_VK != nullis_no_schema_check=$NOSCHEMACHECK_VK != nullxml_multiuse_expression_elements=$xml_multiuse_expression_elements)
			{
				retval.st = templateLib.getInstanceOf("xml_attributes_clause",new STAttrMap().put("is_entity_escaping", ENTITYESCAPING_VK414 != null).put("is_no_entity_escaping", NOENTITYESCAPING_VK415 != null).put("is_schema_check", SCHEMACHECK_VK416 != null).put("is_no_schema_check", NOSCHEMACHECK_VK417 != null).put("xml_multiuse_expression_elements", list_xml_multiuse_expression_elements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_attributes_clause"


	public static class xml_namespaces_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_namespaces_clause"
	// PLSQLPrinter.g:2231:1: xml_namespaces_clause : ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? ) -> template( \"not implemented: xml_namespaces_clause\";
	public final PLSQLPrinter.xml_namespaces_clause_return xml_namespaces_clause() throws RecognitionException {
		PLSQLPrinter.xml_namespaces_clause_return retval = new PLSQLPrinter.xml_namespaces_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2232:5: ( ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? ) -> template( \"not implemented: xml_namespaces_clause\")
			// PLSQLPrinter.g:2232:10: ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? )
			{
			match(input,XMLNAMESPACES_VK,FOLLOW_XMLNAMESPACES_VK_in_xml_namespaces_clause24053); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:2233:13: ( expression ( alias )? )*
				loop497:
				while (true) {
					int alt497=2;
					int LA497_0 = input.LA(1);
					if ( (LA497_0==EXPR||LA497_0==LOGIC_EXPR) ) {
						alt497=1;
					}

					switch (alt497) {
					case 1 :
						// PLSQLPrinter.g:2233:14: expression ( alias )?
						{
						pushFollow(FOLLOW_expression_in_xml_namespaces_clause24068);
						expression();
						state._fsp--;

						// PLSQLPrinter.g:2233:25: ( alias )?
						int alt496=2;
						int LA496_0 = input.LA(1);
						if ( (LA496_0==COLUMN_ALIAS||LA496_0==TABLE_ALIAS) ) {
							alt496=1;
						}
						switch (alt496) {
							case 1 :
								// PLSQLPrinter.g:2233:25: alias
								{
								pushFollow(FOLLOW_alias_in_xml_namespaces_clause24070);
								alias();
								state._fsp--;

								}
								break;

						}

						}
						break;

					default :
						break loop497;
					}
				}

				// PLSQLPrinter.g:2233:34: ( xml_general_default_part )?
				int alt498=2;
				int LA498_0 = input.LA(1);
				if ( (LA498_0==SQL92_RESERVED_DEFAULT) ) {
					alt498=1;
				}
				switch (alt498) {
					case 1 :
						// PLSQLPrinter.g:2233:34: xml_general_default_part
						{
						pushFollow(FOLLOW_xml_general_default_part_in_xml_namespaces_clause24075);
						xml_general_default_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 2235:5: -> template( \"not implemented: xml_namespaces_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_namespaces_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_namespaces_clause"


	public static class xml_table_column_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_table_column"
	// PLSQLPrinter.g:2238:1: xml_table_column : ^( XML_COLUMN xml_column_name ( ORDINALITY_VK -> xml_table_column_ordinality(name=$xml_column_name.st)| type_spec ( expression )? ( xml_general_default_part )? -> xml_table_column_typespec(name=$xml_column_name.sttype_spec=$type_spec.stpath_expr=$expression.stxml_general_default_part=$xml_general_default_part.st)) ) ;
	public final PLSQLPrinter.xml_table_column_return xml_table_column() throws RecognitionException {
		PLSQLPrinter.xml_table_column_return retval = new PLSQLPrinter.xml_table_column_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope xml_column_name418 =null;
		TreeRuleReturnScope type_spec419 =null;
		TreeRuleReturnScope expression420 =null;
		TreeRuleReturnScope xml_general_default_part421 =null;

		try {
			// PLSQLPrinter.g:2239:5: ( ^( XML_COLUMN xml_column_name ( ORDINALITY_VK -> xml_table_column_ordinality(name=$xml_column_name.st)| type_spec ( expression )? ( xml_general_default_part )? -> xml_table_column_typespec(name=$xml_column_name.sttype_spec=$type_spec.stpath_expr=$expression.stxml_general_default_part=$xml_general_default_part.st)) ) )
			// PLSQLPrinter.g:2239:10: ^( XML_COLUMN xml_column_name ( ORDINALITY_VK -> xml_table_column_ordinality(name=$xml_column_name.st)| type_spec ( expression )? ( xml_general_default_part )? -> xml_table_column_typespec(name=$xml_column_name.sttype_spec=$type_spec.stpath_expr=$expression.stxml_general_default_part=$xml_general_default_part.st)) )
			{
			match(input,XML_COLUMN,FOLLOW_XML_COLUMN_in_xml_table_column24121); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_xml_column_name_in_xml_table_column24123);
			xml_column_name418=xml_column_name();
			state._fsp--;

			// PLSQLPrinter.g:2240:13: ( ORDINALITY_VK -> xml_table_column_ordinality(name=$xml_column_name.st)| type_spec ( expression )? ( xml_general_default_part )? -> xml_table_column_typespec(name=$xml_column_name.sttype_spec=$type_spec.stpath_expr=$expression.stxml_general_default_part=$xml_general_default_part.st))
			int alt501=2;
			int LA501_0 = input.LA(1);
			if ( (LA501_0==ORDINALITY_VK) ) {
				alt501=1;
			}
			else if ( (LA501_0==CUSTOM_TYPE||LA501_0==INTERVAL_DATATYPE||LA501_0==NATIVE_DATATYPE) ) {
				alt501=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 501, 0, input);
				throw nvae;
			}

			switch (alt501) {
				case 1 :
					// PLSQLPrinter.g:2241:15: ORDINALITY_VK
					{
					match(input,ORDINALITY_VK,FOLLOW_ORDINALITY_VK_in_xml_table_column24153); 
					// TEMPLATE REWRITE
					// 2241:29: -> xml_table_column_ordinality(name=$xml_column_name.st)
					{
						retval.st = templateLib.getInstanceOf("xml_table_column_ordinality",new STAttrMap().put("name", (xml_column_name418!=null?((StringTemplate)xml_column_name418.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2242:17: type_spec ( expression )? ( xml_general_default_part )?
					{
					pushFollow(FOLLOW_type_spec_in_xml_table_column24180);
					type_spec419=type_spec();
					state._fsp--;

					// PLSQLPrinter.g:2242:27: ( expression )?
					int alt499=2;
					int LA499_0 = input.LA(1);
					if ( (LA499_0==EXPR||LA499_0==LOGIC_EXPR) ) {
						alt499=1;
					}
					switch (alt499) {
						case 1 :
							// PLSQLPrinter.g:2242:27: expression
							{
							pushFollow(FOLLOW_expression_in_xml_table_column24182);
							expression420=expression();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:2242:39: ( xml_general_default_part )?
					int alt500=2;
					int LA500_0 = input.LA(1);
					if ( (LA500_0==SQL92_RESERVED_DEFAULT) ) {
						alt500=1;
					}
					switch (alt500) {
						case 1 :
							// PLSQLPrinter.g:2242:39: xml_general_default_part
							{
							pushFollow(FOLLOW_xml_general_default_part_in_xml_table_column24185);
							xml_general_default_part421=xml_general_default_part();
							state._fsp--;

							}
							break;

					}

					// TEMPLATE REWRITE
					// 2243:15: -> xml_table_column_typespec(name=$xml_column_name.sttype_spec=$type_spec.stpath_expr=$expression.stxml_general_default_part=$xml_general_default_part.st)
					{
						retval.st = templateLib.getInstanceOf("xml_table_column_typespec",new STAttrMap().put("name", (xml_column_name418!=null?((StringTemplate)xml_column_name418.getTemplate()):null)).put("type_spec", (type_spec419!=null?((StringTemplate)type_spec419.getTemplate()):null)).put("path_expr", (expression420!=null?((StringTemplate)expression420.getTemplate()):null)).put("xml_general_default_part", (xml_general_default_part421!=null?((StringTemplate)xml_general_default_part421.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_table_column"


	public static class xml_general_default_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_general_default_part"
	// PLSQLPrinter.g:2250:1: xml_general_default_part : ^( SQL92_RESERVED_DEFAULT expression ) -> xml_general_default_part(expression=$expression.st);
	public final PLSQLPrinter.xml_general_default_part_return xml_general_default_part() throws RecognitionException {
		PLSQLPrinter.xml_general_default_part_return retval = new PLSQLPrinter.xml_general_default_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression422 =null;

		try {
			// PLSQLPrinter.g:2251:5: ( ^( SQL92_RESERVED_DEFAULT expression ) -> xml_general_default_part(expression=$expression.st))
			// PLSQLPrinter.g:2251:10: ^( SQL92_RESERVED_DEFAULT expression )
			{
			match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_xml_general_default_part24308); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xml_general_default_part24310);
			expression422=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2252:5: -> xml_general_default_part(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("xml_general_default_part",new STAttrMap().put("expression", (expression422!=null?((StringTemplate)expression422.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_general_default_part"


	public static class xml_multiuse_expression_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_multiuse_expression_element"
	// PLSQLPrinter.g:2255:1: xml_multiuse_expression_element : ^( XML_ELEMENT expression ( xml_alias )? ) -> xml_multiuse_expression_element(expression=$expression.stxml_alias=$xml_alias.st);
	public final PLSQLPrinter.xml_multiuse_expression_element_return xml_multiuse_expression_element() throws RecognitionException {
		PLSQLPrinter.xml_multiuse_expression_element_return retval = new PLSQLPrinter.xml_multiuse_expression_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression423 =null;
		TreeRuleReturnScope xml_alias424 =null;

		try {
			// PLSQLPrinter.g:2256:5: ( ^( XML_ELEMENT expression ( xml_alias )? ) -> xml_multiuse_expression_element(expression=$expression.stxml_alias=$xml_alias.st))
			// PLSQLPrinter.g:2256:10: ^( XML_ELEMENT expression ( xml_alias )? )
			{
			match(input,XML_ELEMENT,FOLLOW_XML_ELEMENT_in_xml_multiuse_expression_element24347); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xml_multiuse_expression_element24349);
			expression423=expression();
			state._fsp--;

			// PLSQLPrinter.g:2256:35: ( xml_alias )?
			int alt502=2;
			int LA502_0 = input.LA(1);
			if ( (LA502_0==XML_ALIAS) ) {
				alt502=1;
			}
			switch (alt502) {
				case 1 :
					// PLSQLPrinter.g:2256:35: xml_alias
					{
					pushFollow(FOLLOW_xml_alias_in_xml_multiuse_expression_element24351);
					xml_alias424=xml_alias();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2257:5: -> xml_multiuse_expression_element(expression=$expression.stxml_alias=$xml_alias.st)
			{
				retval.st = templateLib.getInstanceOf("xml_multiuse_expression_element",new STAttrMap().put("expression", (expression423!=null?((StringTemplate)expression423.getTemplate()):null)).put("xml_alias", (xml_alias424!=null?((StringTemplate)xml_alias424.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_multiuse_expression_element"


	public static class xml_alias_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_alias"
	// PLSQLPrinter.g:2260:1: xml_alias : ( ^( XML_ALIAS ID ) -> xml_alias_id(id=$ID.text)| ^( XML_ALIAS ^( EVALNAME_VK expression ) ) -> xml_alias_evalname(expression=$expression.st));
	public final PLSQLPrinter.xml_alias_return xml_alias() throws RecognitionException {
		PLSQLPrinter.xml_alias_return retval = new PLSQLPrinter.xml_alias_return();
		retval.start = input.LT(1);

		CommonTree ID425=null;
		TreeRuleReturnScope expression426 =null;

		try {
			// PLSQLPrinter.g:2261:5: ( ^( XML_ALIAS ID ) -> xml_alias_id(id=$ID.text)| ^( XML_ALIAS ^( EVALNAME_VK expression ) ) -> xml_alias_evalname(expression=$expression.st))
			int alt503=2;
			int LA503_0 = input.LA(1);
			if ( (LA503_0==XML_ALIAS) ) {
				int LA503_1 = input.LA(2);
				if ( (LA503_1==DOWN) ) {
					int LA503_2 = input.LA(3);
					if ( (LA503_2==ID) ) {
						alt503=1;
					}
					else if ( (LA503_2==EVALNAME_VK) ) {
						alt503=2;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 503, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 503, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 503, 0, input);
				throw nvae;
			}

			switch (alt503) {
				case 1 :
					// PLSQLPrinter.g:2261:10: ^( XML_ALIAS ID )
					{
					match(input,XML_ALIAS,FOLLOW_XML_ALIAS_in_xml_alias24394); 
					match(input, Token.DOWN, null); 
					ID425=(CommonTree)match(input,ID,FOLLOW_ID_in_xml_alias24396); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2261:26: -> xml_alias_id(id=$ID.text)
					{
						retval.st = templateLib.getInstanceOf("xml_alias_id",new STAttrMap().put("id", (ID425!=null?ID425.getText():null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2262:10: ^( XML_ALIAS ^( EVALNAME_VK expression ) )
					{
					match(input,XML_ALIAS,FOLLOW_XML_ALIAS_in_xml_alias24418); 
					match(input, Token.DOWN, null); 
					match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_xml_alias24421); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_xml_alias24423);
					expression426=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2263:5: -> xml_alias_evalname(expression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("xml_alias_evalname",new STAttrMap().put("expression", (expression426!=null?((StringTemplate)expression426.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_alias"


	public static class xml_param_version_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_param_version_part"
	// PLSQLPrinter.g:2266:1: xml_param_version_part : ^( VERSION_VK ( NO_VK VALUE_VK -> xml_param_version_part_novalue(| expression -> {$expression.st}) ) ;
	public final PLSQLPrinter.xml_param_version_part_return xml_param_version_part() throws RecognitionException {
		PLSQLPrinter.xml_param_version_part_return retval = new PLSQLPrinter.xml_param_version_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression427 =null;

		try {
			// PLSQLPrinter.g:2267:5: ( ^( VERSION_VK ( NO_VK VALUE_VK -> xml_param_version_part_novalue(| expression -> {$expression.st}) ) )
			// PLSQLPrinter.g:2267:10: ^( VERSION_VK ( NO_VK VALUE_VK -> xml_param_version_part_novalue(| expression -> {$expression.st}) )
			{
			match(input,VERSION_VK,FOLLOW_VERSION_VK_in_xml_param_version_part24461); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2268:13: ( NO_VK VALUE_VK -> xml_param_version_part_novalue(| expression -> {$expression.st})
			int alt504=2;
			int LA504_0 = input.LA(1);
			if ( (LA504_0==NO_VK) ) {
				alt504=1;
			}
			else if ( (LA504_0==EXPR||LA504_0==LOGIC_EXPR) ) {
				alt504=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 504, 0, input);
				throw nvae;
			}

			switch (alt504) {
				case 1 :
					// PLSQLPrinter.g:2269:15: NO_VK VALUE_VK
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xml_param_version_part24491); 
					match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xml_param_version_part24493); 
					// TEMPLATE REWRITE
					// 2269:30: -> xml_param_version_part_novalue(
					{
						retval.st = templateLib.getInstanceOf("xml_param_version_part_novalue");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2270:17: expression
					{
					pushFollow(FOLLOW_expression_in_xml_param_version_part24517);
					expression427=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 2270:28: -> {$expression.st}
					{
						retval.st = (expression427!=null?((StringTemplate)expression427.getTemplate()):null);
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_param_version_part"


	public static class xmlroot_param_standalone_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlroot_param_standalone_part"
	// PLSQLPrinter.g:2275:1: xmlroot_param_standalone_part : ^( STANDALONE_VK ( YES_VK -> xmlroot_param_standalone_part_yes(| NO_VK ( VALUE_VK -> xmlroot_param_standalone_part_no_value(| -> xmlroot_param_standalone_part_no() ) ) ;
	public final PLSQLPrinter.xmlroot_param_standalone_part_return xmlroot_param_standalone_part() throws RecognitionException {
		PLSQLPrinter.xmlroot_param_standalone_part_return retval = new PLSQLPrinter.xmlroot_param_standalone_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2276:5: ( ^( STANDALONE_VK ( YES_VK -> xmlroot_param_standalone_part_yes(| NO_VK ( VALUE_VK -> xmlroot_param_standalone_part_no_value(| -> xmlroot_param_standalone_part_no() ) ) )
			// PLSQLPrinter.g:2276:10: ^( STANDALONE_VK ( YES_VK -> xmlroot_param_standalone_part_yes(| NO_VK ( VALUE_VK -> xmlroot_param_standalone_part_no_value(| -> xmlroot_param_standalone_part_no() ) )
			{
			match(input,STANDALONE_VK,FOLLOW_STANDALONE_VK_in_xmlroot_param_standalone_part24568); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2277:13: ( YES_VK -> xmlroot_param_standalone_part_yes(| NO_VK ( VALUE_VK -> xmlroot_param_standalone_part_no_value(| -> xmlroot_param_standalone_part_no() )
			int alt506=2;
			int LA506_0 = input.LA(1);
			if ( (LA506_0==YES_VK) ) {
				alt506=1;
			}
			else if ( (LA506_0==NO_VK) ) {
				alt506=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 506, 0, input);
				throw nvae;
			}

			switch (alt506) {
				case 1 :
					// PLSQLPrinter.g:2278:15: YES_VK
					{
					match(input,YES_VK,FOLLOW_YES_VK_in_xmlroot_param_standalone_part24598); 
					// TEMPLATE REWRITE
					// 2278:22: -> xmlroot_param_standalone_part_yes(
					{
						retval.st = templateLib.getInstanceOf("xmlroot_param_standalone_part_yes");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2279:17: NO_VK ( VALUE_VK -> xmlroot_param_standalone_part_no_value(| -> xmlroot_param_standalone_part_no()
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xmlroot_param_standalone_part24622); 
					// PLSQLPrinter.g:2280:17: ( VALUE_VK -> xmlroot_param_standalone_part_no_value(| -> xmlroot_param_standalone_part_no()
					int alt505=2;
					int LA505_0 = input.LA(1);
					if ( (LA505_0==VALUE_VK) ) {
						alt505=1;
					}
					else if ( (LA505_0==UP) ) {
						alt505=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 505, 0, input);
						throw nvae;
					}

					switch (alt505) {
						case 1 :
							// PLSQLPrinter.g:2281:19: VALUE_VK
							{
							match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xmlroot_param_standalone_part24660); 
							// TEMPLATE REWRITE
							// 2281:28: -> xmlroot_param_standalone_part_no_value(
							{
								retval.st = templateLib.getInstanceOf("xmlroot_param_standalone_part_no_value");
							}



							}
							break;
						case 2 :
							// PLSQLPrinter.g:2282:22: 
							{
							// TEMPLATE REWRITE
							// 2282:22: -> xmlroot_param_standalone_part_no(
							{
								retval.st = templateLib.getInstanceOf("xmlroot_param_standalone_part_no");
							}



							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlroot_param_standalone_part"


	public static class xmlserialize_param_enconding_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlserialize_param_enconding_part"
	// PLSQLPrinter.g:2288:1: xmlserialize_param_enconding_part : ^( ENCODING_VK expression ) -> template( \"not implemented: xmlserialize_param_enconding_part\";
	public final PLSQLPrinter.xmlserialize_param_enconding_part_return xmlserialize_param_enconding_part() throws RecognitionException {
		PLSQLPrinter.xmlserialize_param_enconding_part_return retval = new PLSQLPrinter.xmlserialize_param_enconding_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2289:5: ( ^( ENCODING_VK expression ) -> template( \"not implemented: xmlserialize_param_enconding_part\")
			// PLSQLPrinter.g:2289:10: ^( ENCODING_VK expression )
			{
			match(input,ENCODING_VK,FOLLOW_ENCODING_VK_in_xmlserialize_param_enconding_part24758); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xmlserialize_param_enconding_part24760);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2290:5: -> template( \"not implemented: xmlserialize_param_enconding_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xmlserialize_param_enconding_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlserialize_param_enconding_part"


	public static class xmlserialize_param_ident_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlserialize_param_ident_part"
	// PLSQLPrinter.g:2293:1: xmlserialize_param_ident_part : ( NO_VK INDENT_VK -> template( \"not implemented: xmlserialize_param_ident_part\"| ^( INDENT_VK ( expression )? ) -> template( \"not implemented: xmlserialize_param_ident_part\");
	public final PLSQLPrinter.xmlserialize_param_ident_part_return xmlserialize_param_ident_part() throws RecognitionException {
		PLSQLPrinter.xmlserialize_param_ident_part_return retval = new PLSQLPrinter.xmlserialize_param_ident_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2294:5: ( NO_VK INDENT_VK -> template( \"not implemented: xmlserialize_param_ident_part\"| ^( INDENT_VK ( expression )? ) -> template( \"not implemented: xmlserialize_param_ident_part\")
			int alt508=2;
			int LA508_0 = input.LA(1);
			if ( (LA508_0==NO_VK) ) {
				alt508=1;
			}
			else if ( (LA508_0==INDENT_VK) ) {
				alt508=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 508, 0, input);
				throw nvae;
			}

			switch (alt508) {
				case 1 :
					// PLSQLPrinter.g:2294:10: NO_VK INDENT_VK
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xmlserialize_param_ident_part24795); 
					match(input,INDENT_VK,FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part24797); 
					// TEMPLATE REWRITE
					// 2295:5: -> template( \"not implemented: xmlserialize_param_ident_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: xmlserialize_param_ident_part");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2296:10: ^( INDENT_VK ( expression )? )
					{
					match(input,INDENT_VK,FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part24823); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:2296:22: ( expression )?
						int alt507=2;
						int LA507_0 = input.LA(1);
						if ( (LA507_0==EXPR||LA507_0==LOGIC_EXPR) ) {
							alt507=1;
						}
						switch (alt507) {
							case 1 :
								// PLSQLPrinter.g:2296:22: expression
								{
								pushFollow(FOLLOW_expression_in_xmlserialize_param_ident_part24825);
								expression();
								state._fsp--;

								}
								break;

						}

						match(input, Token.UP, null); 
					}

					// TEMPLATE REWRITE
					// 2297:5: -> template( \"not implemented: xmlserialize_param_ident_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: xmlserialize_param_ident_part");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlserialize_param_ident_part"


	public static class partition_extension_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "partition_extension_clause"
	// PLSQLPrinter.g:2304:1: partition_extension_clause : ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list ) -> template( \"not implemented: partition_extension_clause\";
	public final PLSQLPrinter.partition_extension_clause_return partition_extension_clause() throws RecognitionException {
		PLSQLPrinter.partition_extension_clause_return retval = new PLSQLPrinter.partition_extension_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2305:5: ( ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list ) -> template( \"not implemented: partition_extension_clause\")
			// PLSQLPrinter.g:2305:10: ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list )
			{
			// PLSQLPrinter.g:2305:12: ( SUBPARTITION_VK | PARTITION_VK )
			int alt509=2;
			int LA509_0 = input.LA(1);
			if ( (LA509_0==SUBPARTITION_VK) ) {
				alt509=1;
			}
			else if ( (LA509_0==PARTITION_VK) ) {
				alt509=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 509, 0, input);
				throw nvae;
			}

			switch (alt509) {
				case 1 :
					// PLSQLPrinter.g:2305:13: SUBPARTITION_VK
					{
					match(input,SUBPARTITION_VK,FOLLOW_SUBPARTITION_VK_in_partition_extension_clause24867); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2305:29: PARTITION_VK
					{
					match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_partition_extension_clause24869); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_list_in_partition_extension_clause24872);
			expression_list();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2306:5: -> template( \"not implemented: partition_extension_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: partition_extension_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_extension_clause"


	public static class alias_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alias"
	// PLSQLPrinter.g:2309:1: alias : ( ^( COLUMN_ALIAS ( char_set_name )? ID ) -> column_alias(name=$ID.text)| ^( TABLE_ALIAS ( char_set_name )? ID ) -> table_alias(name=$ID.text));
	public final PLSQLPrinter.alias_return alias() throws RecognitionException {
		PLSQLPrinter.alias_return retval = new PLSQLPrinter.alias_return();
		retval.start = input.LT(1);

		CommonTree ID428=null;
		CommonTree ID429=null;

		try {
			// PLSQLPrinter.g:2310:5: ( ^( COLUMN_ALIAS ( char_set_name )? ID ) -> column_alias(name=$ID.text)| ^( TABLE_ALIAS ( char_set_name )? ID ) -> table_alias(name=$ID.text))
			int alt512=2;
			int LA512_0 = input.LA(1);
			if ( (LA512_0==COLUMN_ALIAS) ) {
				alt512=1;
			}
			else if ( (LA512_0==TABLE_ALIAS) ) {
				alt512=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 512, 0, input);
				throw nvae;
			}

			switch (alt512) {
				case 1 :
					// PLSQLPrinter.g:2310:10: ^( COLUMN_ALIAS ( char_set_name )? ID )
					{
					match(input,COLUMN_ALIAS,FOLLOW_COLUMN_ALIAS_in_alias24908); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2310:25: ( char_set_name )?
					int alt510=2;
					int LA510_0 = input.LA(1);
					if ( (LA510_0==CHAR_SET_NAME) ) {
						alt510=1;
					}
					switch (alt510) {
						case 1 :
							// PLSQLPrinter.g:2310:25: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_alias24910);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					ID428=(CommonTree)match(input,ID,FOLLOW_ID_in_alias24913); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2311:5: -> column_alias(name=$ID.text)
					{
						retval.st = templateLib.getInstanceOf("column_alias",new STAttrMap().put("name", (ID428!=null?ID428.getText():null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2312:10: ^( TABLE_ALIAS ( char_set_name )? ID )
					{
					match(input,TABLE_ALIAS,FOLLOW_TABLE_ALIAS_in_alias24941); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2312:24: ( char_set_name )?
					int alt511=2;
					int LA511_0 = input.LA(1);
					if ( (LA511_0==CHAR_SET_NAME) ) {
						alt511=1;
					}
					switch (alt511) {
						case 1 :
							// PLSQLPrinter.g:2312:24: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_alias24943);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					ID429=(CommonTree)match(input,ID,FOLLOW_ID_in_alias24946); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2313:5: -> table_alias(name=$ID.text)
					{
						retval.st = templateLib.getInstanceOf("table_alias",new STAttrMap().put("name", (ID429!=null?ID429.getText():null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alias"


	public static class where_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "where_clause"
	// PLSQLPrinter.g:2316:1: where_clause : ^( SQL92_RESERVED_WHERE expression ) -> where_clause(expression=$expression.st);
	public final PLSQLPrinter.where_clause_return where_clause() throws RecognitionException {
		PLSQLPrinter.where_clause_return retval = new PLSQLPrinter.where_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression430 =null;

		try {
			// PLSQLPrinter.g:2317:5: ( ^( SQL92_RESERVED_WHERE expression ) -> where_clause(expression=$expression.st))
			// PLSQLPrinter.g:2317:10: ^( SQL92_RESERVED_WHERE expression )
			{
			match(input,SQL92_RESERVED_WHERE,FOLLOW_SQL92_RESERVED_WHERE_in_where_clause24983); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_where_clause24985);
			expression430=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2318:5: -> where_clause(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("where_clause",new STAttrMap().put("expression", (expression430!=null?((StringTemplate)expression430.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "where_clause"


	public static class into_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "into_clause"
	// PLSQLPrinter.g:2321:1: into_clause : ( ^( SQL92_RESERVED_INTO (elements+= general_element )+ ) -> into_clause(is_bulk_collect=falsegeneral_elements=$elements)| ^( BULK_VK (elements+= general_element )+ ) -> into_clause(is_bulk_collect=truegeneral_elements=$elements));
	public final PLSQLPrinter.into_clause_return into_clause() throws RecognitionException {
		PLSQLPrinter.into_clause_return retval = new PLSQLPrinter.into_clause_return();
		retval.start = input.LT(1);

		List<Object> list_elements=null;
		RuleReturnScope elements = null;
		try {
			// PLSQLPrinter.g:2322:5: ( ^( SQL92_RESERVED_INTO (elements+= general_element )+ ) -> into_clause(is_bulk_collect=falsegeneral_elements=$elements)| ^( BULK_VK (elements+= general_element )+ ) -> into_clause(is_bulk_collect=truegeneral_elements=$elements))
			int alt515=2;
			int LA515_0 = input.LA(1);
			if ( (LA515_0==SQL92_RESERVED_INTO) ) {
				alt515=1;
			}
			else if ( (LA515_0==BULK_VK) ) {
				alt515=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 515, 0, input);
				throw nvae;
			}

			switch (alt515) {
				case 1 :
					// PLSQLPrinter.g:2322:10: ^( SQL92_RESERVED_INTO (elements+= general_element )+ )
					{
					match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_into_clause25022); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2322:40: (elements+= general_element )+
					int cnt513=0;
					loop513:
					while (true) {
						int alt513=2;
						int LA513_0 = input.LA(1);
						if ( (LA513_0==CASCATED_ELEMENT) ) {
							alt513=1;
						}

						switch (alt513) {
						case 1 :
							// PLSQLPrinter.g:2322:40: elements+= general_element
							{
							pushFollow(FOLLOW_general_element_in_into_clause25026);
							elements=general_element();
							state._fsp--;

							if (list_elements==null) list_elements=new ArrayList<Object>();
							list_elements.add(elements.getTemplate());
							}
							break;

						default :
							if ( cnt513 >= 1 ) break loop513;
							EarlyExitException eee = new EarlyExitException(513, input);
							throw eee;
						}
						cnt513++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2323:5: -> into_clause(is_bulk_collect=falsegeneral_elements=$elements)
					{
						retval.st = templateLib.getInstanceOf("into_clause",new STAttrMap().put("is_bulk_collect", false).put("general_elements", list_elements));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2324:10: ^( BULK_VK (elements+= general_element )+ )
					{
					match(input,BULK_VK,FOLLOW_BULK_VK_in_into_clause25061); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:2324:28: (elements+= general_element )+
					int cnt514=0;
					loop514:
					while (true) {
						int alt514=2;
						int LA514_0 = input.LA(1);
						if ( (LA514_0==CASCATED_ELEMENT) ) {
							alt514=1;
						}

						switch (alt514) {
						case 1 :
							// PLSQLPrinter.g:2324:28: elements+= general_element
							{
							pushFollow(FOLLOW_general_element_in_into_clause25065);
							elements=general_element();
							state._fsp--;

							if (list_elements==null) list_elements=new ArrayList<Object>();
							list_elements.add(elements.getTemplate());
							}
							break;

						default :
							if ( cnt514 >= 1 ) break loop514;
							EarlyExitException eee = new EarlyExitException(514, input);
							throw eee;
						}
						cnt514++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2325:5: -> into_clause(is_bulk_collect=truegeneral_elements=$elements)
					{
						retval.st = templateLib.getInstanceOf("into_clause",new STAttrMap().put("is_bulk_collect", true).put("general_elements", list_elements));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "into_clause"


	public static class xml_column_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_column_name"
	// PLSQLPrinter.g:2332:1: xml_column_name : ^( XML_COLUMN_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.xml_column_name_return xml_column_name() throws RecognitionException {
		PLSQLPrinter.xml_column_name_return retval = new PLSQLPrinter.xml_column_name_return();
		retval.start = input.LT(1);

		CommonTree ID431=null;

		try {
			// PLSQLPrinter.g:2333:5: ( ^( XML_COLUMN_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2333:10: ^( XML_COLUMN_NAME ( char_set_name )? ID )
			{
			match(input,XML_COLUMN_NAME,FOLLOW_XML_COLUMN_NAME_in_xml_column_name25113); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2333:28: ( char_set_name )?
			int alt516=2;
			int LA516_0 = input.LA(1);
			if ( (LA516_0==CHAR_SET_NAME) ) {
				alt516=1;
			}
			switch (alt516) {
				case 1 :
					// PLSQLPrinter.g:2333:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_xml_column_name25115);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID431=(CommonTree)match(input,ID,FOLLOW_ID_in_xml_column_name25118); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2333:47: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID431!=null?ID431.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_column_name"


	public static class cost_class_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cost_class_name"
	// PLSQLPrinter.g:2336:1: cost_class_name : ^( COST_CLASS_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.cost_class_name_return cost_class_name() throws RecognitionException {
		PLSQLPrinter.cost_class_name_return retval = new PLSQLPrinter.cost_class_name_return();
		retval.start = input.LT(1);

		CommonTree ID432=null;

		try {
			// PLSQLPrinter.g:2337:5: ( ^( COST_CLASS_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2337:10: ^( COST_CLASS_NAME ( char_set_name )? ID )
			{
			match(input,COST_CLASS_NAME,FOLLOW_COST_CLASS_NAME_in_cost_class_name25149); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2337:28: ( char_set_name )?
			int alt517=2;
			int LA517_0 = input.LA(1);
			if ( (LA517_0==CHAR_SET_NAME) ) {
				alt517=1;
			}
			switch (alt517) {
				case 1 :
					// PLSQLPrinter.g:2337:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_cost_class_name25151);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID432=(CommonTree)match(input,ID,FOLLOW_ID_in_cost_class_name25154); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2337:47: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID432!=null?ID432.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cost_class_name"


	public static class attribute_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "attribute_name"
	// PLSQLPrinter.g:2340:1: attribute_name : ^( ATTRIBUTE_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.attribute_name_return attribute_name() throws RecognitionException {
		PLSQLPrinter.attribute_name_return retval = new PLSQLPrinter.attribute_name_return();
		retval.start = input.LT(1);

		CommonTree ID433=null;

		try {
			// PLSQLPrinter.g:2341:5: ( ^( ATTRIBUTE_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2341:10: ^( ATTRIBUTE_NAME ( char_set_name )? ID )
			{
			match(input,ATTRIBUTE_NAME,FOLLOW_ATTRIBUTE_NAME_in_attribute_name25185); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2341:27: ( char_set_name )?
			int alt518=2;
			int LA518_0 = input.LA(1);
			if ( (LA518_0==CHAR_SET_NAME) ) {
				alt518=1;
			}
			switch (alt518) {
				case 1 :
					// PLSQLPrinter.g:2341:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_attribute_name25187);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID433=(CommonTree)match(input,ID,FOLLOW_ID_in_attribute_name25190); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2341:46: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID433!=null?ID433.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "attribute_name"


	public static class savepoint_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "savepoint_name"
	// PLSQLPrinter.g:2344:1: savepoint_name : ^( SAVEPOINT_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.savepoint_name_return savepoint_name() throws RecognitionException {
		PLSQLPrinter.savepoint_name_return retval = new PLSQLPrinter.savepoint_name_return();
		retval.start = input.LT(1);

		CommonTree ID434=null;

		try {
			// PLSQLPrinter.g:2345:5: ( ^( SAVEPOINT_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2345:10: ^( SAVEPOINT_NAME ( char_set_name )? ID )
			{
			match(input,SAVEPOINT_NAME,FOLLOW_SAVEPOINT_NAME_in_savepoint_name25221); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2345:27: ( char_set_name )?
			int alt519=2;
			int LA519_0 = input.LA(1);
			if ( (LA519_0==CHAR_SET_NAME) ) {
				alt519=1;
			}
			switch (alt519) {
				case 1 :
					// PLSQLPrinter.g:2345:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_savepoint_name25223);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID434=(CommonTree)match(input,ID,FOLLOW_ID_in_savepoint_name25226); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2345:46: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID434!=null?ID434.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "savepoint_name"


	public static class rollback_segment_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "rollback_segment_name"
	// PLSQLPrinter.g:2348:1: rollback_segment_name : ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.rollback_segment_name_return rollback_segment_name() throws RecognitionException {
		PLSQLPrinter.rollback_segment_name_return retval = new PLSQLPrinter.rollback_segment_name_return();
		retval.start = input.LT(1);

		CommonTree ID435=null;

		try {
			// PLSQLPrinter.g:2349:5: ( ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2349:10: ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID )
			{
			match(input,ROLLBACK_SEGMENT_NAME,FOLLOW_ROLLBACK_SEGMENT_NAME_in_rollback_segment_name25257); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2349:34: ( char_set_name )?
			int alt520=2;
			int LA520_0 = input.LA(1);
			if ( (LA520_0==CHAR_SET_NAME) ) {
				alt520=1;
			}
			switch (alt520) {
				case 1 :
					// PLSQLPrinter.g:2349:34: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_rollback_segment_name25259);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID435=(CommonTree)match(input,ID,FOLLOW_ID_in_rollback_segment_name25262); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2349:53: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID435!=null?ID435.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rollback_segment_name"


	public static class table_var_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_var_name"
	// PLSQLPrinter.g:2353:1: table_var_name : ^( TABLE_VAR_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.table_var_name_return table_var_name() throws RecognitionException {
		PLSQLPrinter.table_var_name_return retval = new PLSQLPrinter.table_var_name_return();
		retval.start = input.LT(1);

		CommonTree ID436=null;

		try {
			// PLSQLPrinter.g:2354:5: ( ^( TABLE_VAR_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2354:10: ^( TABLE_VAR_NAME ( char_set_name )? ID )
			{
			match(input,TABLE_VAR_NAME,FOLLOW_TABLE_VAR_NAME_in_table_var_name25294); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2354:27: ( char_set_name )?
			int alt521=2;
			int LA521_0 = input.LA(1);
			if ( (LA521_0==CHAR_SET_NAME) ) {
				alt521=1;
			}
			switch (alt521) {
				case 1 :
					// PLSQLPrinter.g:2354:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_table_var_name25296);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID436=(CommonTree)match(input,ID,FOLLOW_ID_in_table_var_name25299); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2354:46: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID436!=null?ID436.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_var_name"


	public static class schema_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "schema_name"
	// PLSQLPrinter.g:2357:1: schema_name : ^( SCHEMA_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.schema_name_return schema_name() throws RecognitionException {
		PLSQLPrinter.schema_name_return retval = new PLSQLPrinter.schema_name_return();
		retval.start = input.LT(1);

		CommonTree ID437=null;

		try {
			// PLSQLPrinter.g:2358:5: ( ^( SCHEMA_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2358:10: ^( SCHEMA_NAME ( char_set_name )? ID )
			{
			match(input,SCHEMA_NAME,FOLLOW_SCHEMA_NAME_in_schema_name25330); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2358:24: ( char_set_name )?
			int alt522=2;
			int LA522_0 = input.LA(1);
			if ( (LA522_0==CHAR_SET_NAME) ) {
				alt522=1;
			}
			switch (alt522) {
				case 1 :
					// PLSQLPrinter.g:2358:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_schema_name25332);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID437=(CommonTree)match(input,ID,FOLLOW_ID_in_schema_name25335); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2358:43: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID437!=null?ID437.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "schema_name"


	public static class routine_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "routine_name"
	// PLSQLPrinter.g:2361:1: routine_name : ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? ) -> template( \"not implemented: routine_name\";
	public final PLSQLPrinter.routine_name_return routine_name() throws RecognitionException {
		PLSQLPrinter.routine_name_return retval = new PLSQLPrinter.routine_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2362:5: ( ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? ) -> template( \"not implemented: routine_name\")
			// PLSQLPrinter.g:2362:10: ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? )
			{
			match(input,ROUTINE_NAME,FOLLOW_ROUTINE_NAME_in_routine_name25366); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2362:25: ( char_set_name )?
			int alt523=2;
			int LA523_0 = input.LA(1);
			if ( (LA523_0==CHAR_SET_NAME) ) {
				alt523=1;
			}
			switch (alt523) {
				case 1 :
					// PLSQLPrinter.g:2362:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_routine_name25368);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2362:40: ( ID )+
			int cnt524=0;
			loop524:
			while (true) {
				int alt524=2;
				int LA524_0 = input.LA(1);
				if ( (LA524_0==ID) ) {
					alt524=1;
				}

				switch (alt524) {
				case 1 :
					// PLSQLPrinter.g:2362:40: ID
					{
					match(input,ID,FOLLOW_ID_in_routine_name25371); 
					}
					break;

				default :
					if ( cnt524 >= 1 ) break loop524;
					EarlyExitException eee = new EarlyExitException(524, input);
					throw eee;
				}
				cnt524++;
			}

			// PLSQLPrinter.g:2362:44: ( link_name )?
			int alt525=2;
			int LA525_0 = input.LA(1);
			if ( (LA525_0==LINK_NAME) ) {
				alt525=1;
			}
			switch (alt525) {
				case 1 :
					// PLSQLPrinter.g:2362:44: link_name
					{
					pushFollow(FOLLOW_link_name_in_routine_name25374);
					link_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2363:5: -> template( \"not implemented: routine_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: routine_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "routine_name"


	public static class package_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "package_name"
	// PLSQLPrinter.g:2366:1: package_name : ^( PACKAGE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.package_name_return package_name() throws RecognitionException {
		PLSQLPrinter.package_name_return retval = new PLSQLPrinter.package_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2367:5: ( ^( PACKAGE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2367:10: ^( PACKAGE_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,PACKAGE_NAME,FOLLOW_PACKAGE_NAME_in_package_name25411); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2367:25: ( char_set_name )?
			int alt526=2;
			int LA526_0 = input.LA(1);
			if ( (LA526_0==CHAR_SET_NAME) ) {
				alt526=1;
			}
			switch (alt526) {
				case 1 :
					// PLSQLPrinter.g:2367:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_package_name25413);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2367:43: (ids+= ID )+
			int cnt527=0;
			loop527:
			while (true) {
				int alt527=2;
				int LA527_0 = input.LA(1);
				if ( (LA527_0==ID) ) {
					alt527=1;
				}

				switch (alt527) {
				case 1 :
					// PLSQLPrinter.g:2367:43: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_package_name25418); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt527 >= 1 ) break loop527;
					EarlyExitException eee = new EarlyExitException(527, input);
					throw eee;
				}
				cnt527++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2368:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_name"


	public static class implementation_type_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "implementation_type_name"
	// PLSQLPrinter.g:2371:1: implementation_type_name : ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.implementation_type_name_return implementation_type_name() throws RecognitionException {
		PLSQLPrinter.implementation_type_name_return retval = new PLSQLPrinter.implementation_type_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2372:5: ( ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2372:10: ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,IMPLEMENTATION_TYPE_NAME,FOLLOW_IMPLEMENTATION_TYPE_NAME_in_implementation_type_name25456); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2372:37: ( char_set_name )?
			int alt528=2;
			int LA528_0 = input.LA(1);
			if ( (LA528_0==CHAR_SET_NAME) ) {
				alt528=1;
			}
			switch (alt528) {
				case 1 :
					// PLSQLPrinter.g:2372:37: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_implementation_type_name25458);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2372:55: (ids+= ID )+
			int cnt529=0;
			loop529:
			while (true) {
				int alt529=2;
				int LA529_0 = input.LA(1);
				if ( (LA529_0==ID) ) {
					alt529=1;
				}

				switch (alt529) {
				case 1 :
					// PLSQLPrinter.g:2372:55: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_implementation_type_name25463); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt529 >= 1 ) break loop529;
					EarlyExitException eee = new EarlyExitException(529, input);
					throw eee;
				}
				cnt529++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2373:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "implementation_type_name"


	public static class parameter_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parameter_name"
	// PLSQLPrinter.g:2376:1: parameter_name : ^( PARAMETER_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.parameter_name_return parameter_name() throws RecognitionException {
		PLSQLPrinter.parameter_name_return retval = new PLSQLPrinter.parameter_name_return();
		retval.start = input.LT(1);

		CommonTree ID438=null;

		try {
			// PLSQLPrinter.g:2377:5: ( ^( PARAMETER_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2377:10: ^( PARAMETER_NAME ( char_set_name )? ID )
			{
			match(input,PARAMETER_NAME,FOLLOW_PARAMETER_NAME_in_parameter_name25501); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2377:27: ( char_set_name )?
			int alt530=2;
			int LA530_0 = input.LA(1);
			if ( (LA530_0==CHAR_SET_NAME) ) {
				alt530=1;
			}
			switch (alt530) {
				case 1 :
					// PLSQLPrinter.g:2377:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_parameter_name25503);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID438=(CommonTree)match(input,ID,FOLLOW_ID_in_parameter_name25506); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2378:5: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID438!=null?ID438.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter_name"


	public static class reference_model_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "reference_model_name"
	// PLSQLPrinter.g:2381:1: reference_model_name : ^( REFERENCE_MODEL_NAME ( char_set_name )? ID ) -> template( \"not implemented: reference_model_name\";
	public final PLSQLPrinter.reference_model_name_return reference_model_name() throws RecognitionException {
		PLSQLPrinter.reference_model_name_return retval = new PLSQLPrinter.reference_model_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2382:5: ( ^( REFERENCE_MODEL_NAME ( char_set_name )? ID ) -> template( \"not implemented: reference_model_name\")
			// PLSQLPrinter.g:2382:10: ^( REFERENCE_MODEL_NAME ( char_set_name )? ID )
			{
			match(input,REFERENCE_MODEL_NAME,FOLLOW_REFERENCE_MODEL_NAME_in_reference_model_name25543); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2382:33: ( char_set_name )?
			int alt531=2;
			int LA531_0 = input.LA(1);
			if ( (LA531_0==CHAR_SET_NAME) ) {
				alt531=1;
			}
			switch (alt531) {
				case 1 :
					// PLSQLPrinter.g:2382:33: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_reference_model_name25545);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_reference_model_name25548); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2383:5: -> template( \"not implemented: reference_model_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: reference_model_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reference_model_name"


	public static class main_model_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "main_model_name"
	// PLSQLPrinter.g:2386:1: main_model_name : ^( MAIN_MODEL_NAME ( char_set_name )? ID ) -> template( \"not implemented: main_model_name\";
	public final PLSQLPrinter.main_model_name_return main_model_name() throws RecognitionException {
		PLSQLPrinter.main_model_name_return retval = new PLSQLPrinter.main_model_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2387:5: ( ^( MAIN_MODEL_NAME ( char_set_name )? ID ) -> template( \"not implemented: main_model_name\")
			// PLSQLPrinter.g:2387:10: ^( MAIN_MODEL_NAME ( char_set_name )? ID )
			{
			match(input,MAIN_MODEL_NAME,FOLLOW_MAIN_MODEL_NAME_in_main_model_name25584); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2387:28: ( char_set_name )?
			int alt532=2;
			int LA532_0 = input.LA(1);
			if ( (LA532_0==CHAR_SET_NAME) ) {
				alt532=1;
			}
			switch (alt532) {
				case 1 :
					// PLSQLPrinter.g:2387:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_main_model_name25586);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_main_model_name25589); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2388:5: -> template( \"not implemented: main_model_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: main_model_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "main_model_name"


	public static class query_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_name"
	// PLSQLPrinter.g:2391:1: query_name : ^( QUERY_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.query_name_return query_name() throws RecognitionException {
		PLSQLPrinter.query_name_return retval = new PLSQLPrinter.query_name_return();
		retval.start = input.LT(1);

		CommonTree ID439=null;

		try {
			// PLSQLPrinter.g:2392:5: ( ^( QUERY_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2392:10: ^( QUERY_NAME ( char_set_name )? ID )
			{
			match(input,QUERY_NAME,FOLLOW_QUERY_NAME_in_query_name25625); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2392:23: ( char_set_name )?
			int alt533=2;
			int LA533_0 = input.LA(1);
			if ( (LA533_0==CHAR_SET_NAME) ) {
				alt533=1;
			}
			switch (alt533) {
				case 1 :
					// PLSQLPrinter.g:2392:23: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_query_name25627);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID439=(CommonTree)match(input,ID,FOLLOW_ID_in_query_name25630); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2392:42: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID439!=null?ID439.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_name"


	public static class constraint_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constraint_name"
	// PLSQLPrinter.g:2395:1: constraint_name : ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? ) -> template( \"not implemented: constraint_name\";
	public final PLSQLPrinter.constraint_name_return constraint_name() throws RecognitionException {
		PLSQLPrinter.constraint_name_return retval = new PLSQLPrinter.constraint_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2396:5: ( ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? ) -> template( \"not implemented: constraint_name\")
			// PLSQLPrinter.g:2396:10: ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? )
			{
			match(input,CONSTRAINT_NAME,FOLLOW_CONSTRAINT_NAME_in_constraint_name25661); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2396:28: ( char_set_name )?
			int alt534=2;
			int LA534_0 = input.LA(1);
			if ( (LA534_0==CHAR_SET_NAME) ) {
				alt534=1;
			}
			switch (alt534) {
				case 1 :
					// PLSQLPrinter.g:2396:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_constraint_name25663);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2396:43: ( ID )+
			int cnt535=0;
			loop535:
			while (true) {
				int alt535=2;
				int LA535_0 = input.LA(1);
				if ( (LA535_0==ID) ) {
					alt535=1;
				}

				switch (alt535) {
				case 1 :
					// PLSQLPrinter.g:2396:43: ID
					{
					match(input,ID,FOLLOW_ID_in_constraint_name25666); 
					}
					break;

				default :
					if ( cnt535 >= 1 ) break loop535;
					EarlyExitException eee = new EarlyExitException(535, input);
					throw eee;
				}
				cnt535++;
			}

			// PLSQLPrinter.g:2396:47: ( link_name )?
			int alt536=2;
			int LA536_0 = input.LA(1);
			if ( (LA536_0==LINK_NAME) ) {
				alt536=1;
			}
			switch (alt536) {
				case 1 :
					// PLSQLPrinter.g:2396:47: link_name
					{
					pushFollow(FOLLOW_link_name_in_constraint_name25669);
					link_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2397:5: -> template( \"not implemented: constraint_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: constraint_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constraint_name"


	public static class label_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "label_name"
	// PLSQLPrinter.g:2400:1: label_name : ^( LABEL_NAME ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.label_name_return label_name() throws RecognitionException {
		PLSQLPrinter.label_name_return retval = new PLSQLPrinter.label_name_return();
		retval.start = input.LT(1);

		CommonTree ID440=null;

		try {
			// PLSQLPrinter.g:2401:5: ( ^( LABEL_NAME ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2401:10: ^( LABEL_NAME ID )
			{
			match(input,LABEL_NAME,FOLLOW_LABEL_NAME_in_label_name25706); 
			match(input, Token.DOWN, null); 
			ID440=(CommonTree)match(input,ID,FOLLOW_ID_in_label_name25708); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2401:27: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID440!=null?ID440.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "label_name"


	public static class type_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_name"
	// PLSQLPrinter.g:2404:1: type_name : ^( TYPE_NAME (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.type_name_return type_name() throws RecognitionException {
		PLSQLPrinter.type_name_return retval = new PLSQLPrinter.type_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2405:5: ( ^( TYPE_NAME (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2405:10: ^( TYPE_NAME (ids+= ID )+ )
			{
			match(input,TYPE_NAME,FOLLOW_TYPE_NAME_in_type_name25739); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2405:25: (ids+= ID )+
			int cnt537=0;
			loop537:
			while (true) {
				int alt537=2;
				int LA537_0 = input.LA(1);
				if ( (LA537_0==ID) ) {
					alt537=1;
				}

				switch (alt537) {
				case 1 :
					// PLSQLPrinter.g:2405:25: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_type_name25743); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt537 >= 1 ) break loop537;
					EarlyExitException eee = new EarlyExitException(537, input);
					throw eee;
				}
				cnt537++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2406:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_name"


	public static class sequence_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sequence_name"
	// PLSQLPrinter.g:2409:1: sequence_name : ^( SEQUENCE_NAME ( ID )+ ) -> template( \"not implemented: sequence_name\";
	public final PLSQLPrinter.sequence_name_return sequence_name() throws RecognitionException {
		PLSQLPrinter.sequence_name_return retval = new PLSQLPrinter.sequence_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2410:5: ( ^( SEQUENCE_NAME ( ID )+ ) -> template( \"not implemented: sequence_name\")
			// PLSQLPrinter.g:2410:10: ^( SEQUENCE_NAME ( ID )+ )
			{
			match(input,SEQUENCE_NAME,FOLLOW_SEQUENCE_NAME_in_sequence_name25781); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2410:26: ( ID )+
			int cnt538=0;
			loop538:
			while (true) {
				int alt538=2;
				int LA538_0 = input.LA(1);
				if ( (LA538_0==ID) ) {
					alt538=1;
				}

				switch (alt538) {
				case 1 :
					// PLSQLPrinter.g:2410:26: ID
					{
					match(input,ID,FOLLOW_ID_in_sequence_name25783); 
					}
					break;

				default :
					if ( cnt538 >= 1 ) break loop538;
					EarlyExitException eee = new EarlyExitException(538, input);
					throw eee;
				}
				cnt538++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2411:5: -> template( \"not implemented: sequence_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: sequence_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sequence_name"


	public static class exception_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_name"
	// PLSQLPrinter.g:2414:1: exception_name : ^( EXCEPTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.exception_name_return exception_name() throws RecognitionException {
		PLSQLPrinter.exception_name_return retval = new PLSQLPrinter.exception_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2415:5: ( ^( EXCEPTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2415:10: ^( EXCEPTION_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,EXCEPTION_NAME,FOLLOW_EXCEPTION_NAME_in_exception_name25820); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2415:27: ( char_set_name )?
			int alt539=2;
			int LA539_0 = input.LA(1);
			if ( (LA539_0==CHAR_SET_NAME) ) {
				alt539=1;
			}
			switch (alt539) {
				case 1 :
					// PLSQLPrinter.g:2415:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_exception_name25822);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2415:45: (ids+= ID )+
			int cnt540=0;
			loop540:
			while (true) {
				int alt540=2;
				int LA540_0 = input.LA(1);
				if ( (LA540_0==ID) ) {
					alt540=1;
				}

				switch (alt540) {
				case 1 :
					// PLSQLPrinter.g:2415:45: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_exception_name25827); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt540 >= 1 ) break loop540;
					EarlyExitException eee = new EarlyExitException(540, input);
					throw eee;
				}
				cnt540++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2416:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_name"


	public static class function_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "function_name"
	// PLSQLPrinter.g:2419:1: function_name : ^( FUNCTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.function_name_return function_name() throws RecognitionException {
		PLSQLPrinter.function_name_return retval = new PLSQLPrinter.function_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2420:5: ( ^( FUNCTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2420:10: ^( FUNCTION_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,FUNCTION_NAME,FOLLOW_FUNCTION_NAME_in_function_name25865); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2420:26: ( char_set_name )?
			int alt541=2;
			int LA541_0 = input.LA(1);
			if ( (LA541_0==CHAR_SET_NAME) ) {
				alt541=1;
			}
			switch (alt541) {
				case 1 :
					// PLSQLPrinter.g:2420:26: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_function_name25867);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2420:44: (ids+= ID )+
			int cnt542=0;
			loop542:
			while (true) {
				int alt542=2;
				int LA542_0 = input.LA(1);
				if ( (LA542_0==ID) ) {
					alt542=1;
				}

				switch (alt542) {
				case 1 :
					// PLSQLPrinter.g:2420:44: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_function_name25872); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt542 >= 1 ) break loop542;
					EarlyExitException eee = new EarlyExitException(542, input);
					throw eee;
				}
				cnt542++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2421:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_name"


	public static class procedure_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "procedure_name"
	// PLSQLPrinter.g:2424:1: procedure_name : ^( PROCEDURE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.procedure_name_return procedure_name() throws RecognitionException {
		PLSQLPrinter.procedure_name_return retval = new PLSQLPrinter.procedure_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2425:5: ( ^( PROCEDURE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2425:10: ^( PROCEDURE_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,PROCEDURE_NAME,FOLLOW_PROCEDURE_NAME_in_procedure_name25910); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2425:27: ( char_set_name )?
			int alt543=2;
			int LA543_0 = input.LA(1);
			if ( (LA543_0==CHAR_SET_NAME) ) {
				alt543=1;
			}
			switch (alt543) {
				case 1 :
					// PLSQLPrinter.g:2425:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_procedure_name25912);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2425:45: (ids+= ID )+
			int cnt544=0;
			loop544:
			while (true) {
				int alt544=2;
				int LA544_0 = input.LA(1);
				if ( (LA544_0==ID) ) {
					alt544=1;
				}

				switch (alt544) {
				case 1 :
					// PLSQLPrinter.g:2425:45: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_procedure_name25917); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt544 >= 1 ) break loop544;
					EarlyExitException eee = new EarlyExitException(544, input);
					throw eee;
				}
				cnt544++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2426:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "procedure_name"


	public static class trigger_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_name"
	// PLSQLPrinter.g:2429:1: trigger_name : ^( TRIGGER_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.trigger_name_return trigger_name() throws RecognitionException {
		PLSQLPrinter.trigger_name_return retval = new PLSQLPrinter.trigger_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2430:5: ( ^( TRIGGER_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2430:10: ^( TRIGGER_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,TRIGGER_NAME,FOLLOW_TRIGGER_NAME_in_trigger_name25955); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2430:25: ( char_set_name )?
			int alt545=2;
			int LA545_0 = input.LA(1);
			if ( (LA545_0==CHAR_SET_NAME) ) {
				alt545=1;
			}
			switch (alt545) {
				case 1 :
					// PLSQLPrinter.g:2430:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_trigger_name25957);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2430:43: (ids+= ID )+
			int cnt546=0;
			loop546:
			while (true) {
				int alt546=2;
				int LA546_0 = input.LA(1);
				if ( (LA546_0==ID) ) {
					alt546=1;
				}

				switch (alt546) {
				case 1 :
					// PLSQLPrinter.g:2430:43: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_trigger_name25962); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt546 >= 1 ) break loop546;
					EarlyExitException eee = new EarlyExitException(546, input);
					throw eee;
				}
				cnt546++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2431:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_name"


	public static class hosted_variable_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "hosted_variable_name"
	// PLSQLPrinter.g:2434:1: hosted_variable_name : ^( HOSTED_VARIABLE_NAME ( BINDVAR -> string_literal(val=$BINDVAR.text)| UNSIGNED_INTEGER -> string_literal(val= \":\" + $UNSIGNED_INTEGER.text)) ) ;
	public final PLSQLPrinter.hosted_variable_name_return hosted_variable_name() throws RecognitionException {
		PLSQLPrinter.hosted_variable_name_return retval = new PLSQLPrinter.hosted_variable_name_return();
		retval.start = input.LT(1);

		CommonTree BINDVAR441=null;
		CommonTree UNSIGNED_INTEGER442=null;

		try {
			// PLSQLPrinter.g:2435:5: ( ^( HOSTED_VARIABLE_NAME ( BINDVAR -> string_literal(val=$BINDVAR.text)| UNSIGNED_INTEGER -> string_literal(val= \":\" + $UNSIGNED_INTEGER.text)) ) )
			// PLSQLPrinter.g:2435:10: ^( HOSTED_VARIABLE_NAME ( BINDVAR -> string_literal(val=$BINDVAR.text)| UNSIGNED_INTEGER -> string_literal(val= \":\" + $UNSIGNED_INTEGER.text)) )
			{
			match(input,HOSTED_VARIABLE_NAME,FOLLOW_HOSTED_VARIABLE_NAME_in_hosted_variable_name26004); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2436:13: ( BINDVAR -> string_literal(val=$BINDVAR.text)| UNSIGNED_INTEGER -> string_literal(val= \":\" + $UNSIGNED_INTEGER.text))
			int alt547=2;
			int LA547_0 = input.LA(1);
			if ( (LA547_0==BINDVAR) ) {
				alt547=1;
			}
			else if ( (LA547_0==UNSIGNED_INTEGER) ) {
				alt547=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 547, 0, input);
				throw nvae;
			}

			switch (alt547) {
				case 1 :
					// PLSQLPrinter.g:2437:15: BINDVAR
					{
					BINDVAR441=(CommonTree)match(input,BINDVAR,FOLLOW_BINDVAR_in_hosted_variable_name26034); 
					// TEMPLATE REWRITE
					// 2437:23: -> string_literal(val=$BINDVAR.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (BINDVAR441!=null?BINDVAR441.getText():null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2438:16: UNSIGNED_INTEGER
					{
					UNSIGNED_INTEGER442=(CommonTree)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_hosted_variable_name26060); 
					// TEMPLATE REWRITE
					// 2438:33: -> string_literal(val= \":\" + $UNSIGNED_INTEGER.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val",  ":" + (UNSIGNED_INTEGER442!=null?UNSIGNED_INTEGER442.getText():null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "hosted_variable_name"


	public static class variable_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "variable_name"
	// PLSQLPrinter.g:2443:1: variable_name : ^( VARIABLE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.variable_name_return variable_name() throws RecognitionException {
		PLSQLPrinter.variable_name_return retval = new PLSQLPrinter.variable_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2444:5: ( ^( VARIABLE_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2444:10: ^( VARIABLE_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,VARIABLE_NAME,FOLLOW_VARIABLE_NAME_in_variable_name26116); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2444:26: ( char_set_name )?
			int alt548=2;
			int LA548_0 = input.LA(1);
			if ( (LA548_0==CHAR_SET_NAME) ) {
				alt548=1;
			}
			switch (alt548) {
				case 1 :
					// PLSQLPrinter.g:2444:26: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_variable_name26118);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2444:44: (ids+= ID )+
			int cnt549=0;
			loop549:
			while (true) {
				int alt549=2;
				int LA549_0 = input.LA(1);
				if ( (LA549_0==ID) ) {
					alt549=1;
				}

				switch (alt549) {
				case 1 :
					// PLSQLPrinter.g:2444:44: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_variable_name26123); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt549 >= 1 ) break loop549;
					EarlyExitException eee = new EarlyExitException(549, input);
					throw eee;
				}
				cnt549++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2445:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "variable_name"


	public static class index_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "index_name"
	// PLSQLPrinter.g:2448:1: index_name : ^( INDEX_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.index_name_return index_name() throws RecognitionException {
		PLSQLPrinter.index_name_return retval = new PLSQLPrinter.index_name_return();
		retval.start = input.LT(1);

		CommonTree ID443=null;

		try {
			// PLSQLPrinter.g:2449:5: ( ^( INDEX_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2449:10: ^( INDEX_NAME ( char_set_name )? ID )
			{
			match(input,INDEX_NAME,FOLLOW_INDEX_NAME_in_index_name26161); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2449:23: ( char_set_name )?
			int alt550=2;
			int LA550_0 = input.LA(1);
			if ( (LA550_0==CHAR_SET_NAME) ) {
				alt550=1;
			}
			switch (alt550) {
				case 1 :
					// PLSQLPrinter.g:2449:23: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_index_name26163);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID443=(CommonTree)match(input,ID,FOLLOW_ID_in_index_name26166); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2449:42: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID443!=null?ID443.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_name"


	public static class cursor_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_name"
	// PLSQLPrinter.g:2452:1: cursor_name : ^( CURSOR_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.cursor_name_return cursor_name() throws RecognitionException {
		PLSQLPrinter.cursor_name_return retval = new PLSQLPrinter.cursor_name_return();
		retval.start = input.LT(1);

		CommonTree ID444=null;

		try {
			// PLSQLPrinter.g:2453:5: ( ^( CURSOR_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2453:10: ^( CURSOR_NAME ( char_set_name )? ID )
			{
			match(input,CURSOR_NAME,FOLLOW_CURSOR_NAME_in_cursor_name26197); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2453:24: ( char_set_name )?
			int alt551=2;
			int LA551_0 = input.LA(1);
			if ( (LA551_0==CHAR_SET_NAME) ) {
				alt551=1;
			}
			switch (alt551) {
				case 1 :
					// PLSQLPrinter.g:2453:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_cursor_name26199);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID444=(CommonTree)match(input,ID,FOLLOW_ID_in_cursor_name26202); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2453:43: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID444!=null?ID444.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_name"


	public static class record_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_name"
	// PLSQLPrinter.g:2456:1: record_name : ^( RECORD_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.record_name_return record_name() throws RecognitionException {
		PLSQLPrinter.record_name_return retval = new PLSQLPrinter.record_name_return();
		retval.start = input.LT(1);

		CommonTree ID445=null;

		try {
			// PLSQLPrinter.g:2457:5: ( ^( RECORD_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2457:10: ^( RECORD_NAME ( char_set_name )? ID )
			{
			match(input,RECORD_NAME,FOLLOW_RECORD_NAME_in_record_name26233); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2457:24: ( char_set_name )?
			int alt552=2;
			int LA552_0 = input.LA(1);
			if ( (LA552_0==CHAR_SET_NAME) ) {
				alt552=1;
			}
			switch (alt552) {
				case 1 :
					// PLSQLPrinter.g:2457:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_record_name26235);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID445=(CommonTree)match(input,ID,FOLLOW_ID_in_record_name26238); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2457:43: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID445!=null?ID445.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_name"


	public static class collection_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "collection_name"
	// PLSQLPrinter.g:2460:1: collection_name : ^( COLLECTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.collection_name_return collection_name() throws RecognitionException {
		PLSQLPrinter.collection_name_return retval = new PLSQLPrinter.collection_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2461:5: ( ^( COLLECTION_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2461:10: ^( COLLECTION_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,COLLECTION_NAME,FOLLOW_COLLECTION_NAME_in_collection_name26269); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2461:28: ( char_set_name )?
			int alt553=2;
			int LA553_0 = input.LA(1);
			if ( (LA553_0==CHAR_SET_NAME) ) {
				alt553=1;
			}
			switch (alt553) {
				case 1 :
					// PLSQLPrinter.g:2461:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_collection_name26271);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2461:46: (ids+= ID )+
			int cnt554=0;
			loop554:
			while (true) {
				int alt554=2;
				int LA554_0 = input.LA(1);
				if ( (LA554_0==ID) ) {
					alt554=1;
				}

				switch (alt554) {
				case 1 :
					// PLSQLPrinter.g:2461:46: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_collection_name26276); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt554 >= 1 ) break loop554;
					EarlyExitException eee = new EarlyExitException(554, input);
					throw eee;
				}
				cnt554++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2462:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "collection_name"


	public static class link_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "link_name"
	// PLSQLPrinter.g:2465:1: link_name : ^( LINK_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.link_name_return link_name() throws RecognitionException {
		PLSQLPrinter.link_name_return retval = new PLSQLPrinter.link_name_return();
		retval.start = input.LT(1);

		CommonTree ID446=null;

		try {
			// PLSQLPrinter.g:2466:5: ( ^( LINK_NAME ( char_set_name )? ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2466:10: ^( LINK_NAME ( char_set_name )? ID )
			{
			match(input,LINK_NAME,FOLLOW_LINK_NAME_in_link_name26314); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2466:22: ( char_set_name )?
			int alt555=2;
			int LA555_0 = input.LA(1);
			if ( (LA555_0==CHAR_SET_NAME) ) {
				alt555=1;
			}
			switch (alt555) {
				case 1 :
					// PLSQLPrinter.g:2466:22: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_link_name26316);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID446=(CommonTree)match(input,ID,FOLLOW_ID_in_link_name26319); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2466:41: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID446!=null?ID446.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "link_name"


	public static class column_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "column_name"
	// PLSQLPrinter.g:2469:1: column_name : ^( COLUMN_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.column_name_return column_name() throws RecognitionException {
		PLSQLPrinter.column_name_return retval = new PLSQLPrinter.column_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2470:5: ( ^( COLUMN_NAME ( char_set_name )? (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2470:10: ^( COLUMN_NAME ( char_set_name )? (ids+= ID )+ )
			{
			match(input,COLUMN_NAME,FOLLOW_COLUMN_NAME_in_column_name26350); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2470:24: ( char_set_name )?
			int alt556=2;
			int LA556_0 = input.LA(1);
			if ( (LA556_0==CHAR_SET_NAME) ) {
				alt556=1;
			}
			switch (alt556) {
				case 1 :
					// PLSQLPrinter.g:2470:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_column_name26352);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2470:42: (ids+= ID )+
			int cnt557=0;
			loop557:
			while (true) {
				int alt557=2;
				int LA557_0 = input.LA(1);
				if ( (LA557_0==ID) ) {
					alt557=1;
				}

				switch (alt557) {
				case 1 :
					// PLSQLPrinter.g:2470:42: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_column_name26357); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt557 >= 1 ) break loop557;
					EarlyExitException eee = new EarlyExitException(557, input);
					throw eee;
				}
				cnt557++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2471:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_name"


	public static class tableview_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "tableview_name"
	// PLSQLPrinter.g:2474:1: tableview_name : ^( TABLEVIEW_NAME ( char_set_name )? (ids+= ID )+ ( link_name )? ( partition_extension_clause )? ) -> tableview_name(ids=$idslink_name=$link_name.stpartition_extension_clause=$partition_extension_clause.st);
	public final PLSQLPrinter.tableview_name_return tableview_name() throws RecognitionException {
		PLSQLPrinter.tableview_name_return retval = new PLSQLPrinter.tableview_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;
		TreeRuleReturnScope link_name447 =null;
		TreeRuleReturnScope partition_extension_clause448 =null;

		try {
			// PLSQLPrinter.g:2475:5: ( ^( TABLEVIEW_NAME ( char_set_name )? (ids+= ID )+ ( link_name )? ( partition_extension_clause )? ) -> tableview_name(ids=$idslink_name=$link_name.stpartition_extension_clause=$partition_extension_clause.st))
			// PLSQLPrinter.g:2475:10: ^( TABLEVIEW_NAME ( char_set_name )? (ids+= ID )+ ( link_name )? ( partition_extension_clause )? )
			{
			match(input,TABLEVIEW_NAME,FOLLOW_TABLEVIEW_NAME_in_tableview_name26395); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2475:27: ( char_set_name )?
			int alt558=2;
			int LA558_0 = input.LA(1);
			if ( (LA558_0==CHAR_SET_NAME) ) {
				alt558=1;
			}
			switch (alt558) {
				case 1 :
					// PLSQLPrinter.g:2475:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_tableview_name26397);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2475:45: (ids+= ID )+
			int cnt559=0;
			loop559:
			while (true) {
				int alt559=2;
				int LA559_0 = input.LA(1);
				if ( (LA559_0==ID) ) {
					alt559=1;
				}

				switch (alt559) {
				case 1 :
					// PLSQLPrinter.g:2475:45: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_tableview_name26402); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt559 >= 1 ) break loop559;
					EarlyExitException eee = new EarlyExitException(559, input);
					throw eee;
				}
				cnt559++;
			}

			// PLSQLPrinter.g:2475:51: ( link_name )?
			int alt560=2;
			int LA560_0 = input.LA(1);
			if ( (LA560_0==LINK_NAME) ) {
				alt560=1;
			}
			switch (alt560) {
				case 1 :
					// PLSQLPrinter.g:2475:51: link_name
					{
					pushFollow(FOLLOW_link_name_in_tableview_name26405);
					link_name447=link_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2475:62: ( partition_extension_clause )?
			int alt561=2;
			int LA561_0 = input.LA(1);
			if ( (LA561_0==PARTITION_VK||LA561_0==SUBPARTITION_VK) ) {
				alt561=1;
			}
			switch (alt561) {
				case 1 :
					// PLSQLPrinter.g:2475:62: partition_extension_clause
					{
					pushFollow(FOLLOW_partition_extension_clause_in_tableview_name26408);
					partition_extension_clause448=partition_extension_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2476:5: -> tableview_name(ids=$idslink_name=$link_name.stpartition_extension_clause=$partition_extension_clause.st)
			{
				retval.st = templateLib.getInstanceOf("tableview_name",new STAttrMap().put("ids", list_ids).put("link_name", (link_name447!=null?((StringTemplate)link_name447.getTemplate()):null)).put("partition_extension_clause", (partition_extension_clause448!=null?((StringTemplate)partition_extension_clause448.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableview_name"


	public static class char_set_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "char_set_name"
	// PLSQLPrinter.g:2479:1: char_set_name : ^( CHAR_SET_NAME (ids+= ID )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.char_set_name_return char_set_name() throws RecognitionException {
		PLSQLPrinter.char_set_name_return retval = new PLSQLPrinter.char_set_name_return();
		retval.start = input.LT(1);

		CommonTree ids=null;
		List<Object> list_ids=null;

		try {
			// PLSQLPrinter.g:2480:5: ( ^( CHAR_SET_NAME (ids+= ID )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2480:10: ^( CHAR_SET_NAME (ids+= ID )+ )
			{
			match(input,CHAR_SET_NAME,FOLLOW_CHAR_SET_NAME_in_char_set_name26456); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2480:29: (ids+= ID )+
			int cnt562=0;
			loop562:
			while (true) {
				int alt562=2;
				int LA562_0 = input.LA(1);
				if ( (LA562_0==ID) ) {
					alt562=1;
				}

				switch (alt562) {
				case 1 :
					// PLSQLPrinter.g:2480:29: ids+= ID
					{
					ids=(CommonTree)match(input,ID,FOLLOW_ID_in_char_set_name26460); 
					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids);
					}
					break;

				default :
					if ( cnt562 >= 1 ) break loop562;
					EarlyExitException eee = new EarlyExitException(562, input);
					throw eee;
				}
				cnt562++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2481:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "char_set_name"


	public static class function_argument_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "function_argument"
	// PLSQLPrinter.g:2488:1: function_argument : ^( ARGUMENTS (args+= argument )* ) -> function_arguments(arguments=$args);
	public final PLSQLPrinter.function_argument_return function_argument() throws RecognitionException {
		PLSQLPrinter.function_argument_return retval = new PLSQLPrinter.function_argument_return();
		retval.start = input.LT(1);

		List<Object> list_args=null;
		RuleReturnScope args = null;
		try {
			// PLSQLPrinter.g:2489:5: ( ^( ARGUMENTS (args+= argument )* ) -> function_arguments(arguments=$args))
			// PLSQLPrinter.g:2489:10: ^( ARGUMENTS (args+= argument )* )
			{
			match(input,ARGUMENTS,FOLLOW_ARGUMENTS_in_function_argument26502); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:2489:26: (args+= argument )*
				loop563:
				while (true) {
					int alt563=2;
					int LA563_0 = input.LA(1);
					if ( (LA563_0==ARGUMENT) ) {
						alt563=1;
					}

					switch (alt563) {
					case 1 :
						// PLSQLPrinter.g:2489:26: args+= argument
						{
						pushFollow(FOLLOW_argument_in_function_argument26506);
						args=argument();
						state._fsp--;

						if (list_args==null) list_args=new ArrayList<Object>();
						list_args.add(args.getTemplate());
						}
						break;

					default :
						break loop563;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 2490:5: -> function_arguments(arguments=$args)
			{
				retval.st = templateLib.getInstanceOf("function_arguments",new STAttrMap().put("arguments", list_args));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_argument"


	public static class argument_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "argument"
	// PLSQLPrinter.g:2493:1: argument : ^( ARGUMENT expression ( parameter_name )? ) -> function_argument(valueExpr=$expression.stname=$parameter_name.st);
	public final PLSQLPrinter.argument_return argument() throws RecognitionException {
		PLSQLPrinter.argument_return retval = new PLSQLPrinter.argument_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression449 =null;
		TreeRuleReturnScope parameter_name450 =null;

		try {
			// PLSQLPrinter.g:2494:5: ( ^( ARGUMENT expression ( parameter_name )? ) -> function_argument(valueExpr=$expression.stname=$parameter_name.st))
			// PLSQLPrinter.g:2494:10: ^( ARGUMENT expression ( parameter_name )? )
			{
			match(input,ARGUMENT,FOLLOW_ARGUMENT_in_argument26544); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_argument26546);
			expression449=expression();
			state._fsp--;

			// PLSQLPrinter.g:2494:32: ( parameter_name )?
			int alt564=2;
			int LA564_0 = input.LA(1);
			if ( (LA564_0==PARAMETER_NAME) ) {
				alt564=1;
			}
			switch (alt564) {
				case 1 :
					// PLSQLPrinter.g:2494:32: parameter_name
					{
					pushFollow(FOLLOW_parameter_name_in_argument26548);
					parameter_name450=parameter_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2495:5: -> function_argument(valueExpr=$expression.stname=$parameter_name.st)
			{
				retval.st = templateLib.getInstanceOf("function_argument",new STAttrMap().put("valueExpr", (expression449!=null?((StringTemplate)expression449.getTemplate()):null)).put("name", (parameter_name450!=null?((StringTemplate)parameter_name450.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "argument"


	public static class type_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_spec"
	// PLSQLPrinter.g:2498:1: type_spec : ( ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? ) -> typespec_custom(name=$type_name.stis_ref=$REF_VK != nullis_percent_rowtype=$PERCENT_ROWTYPE_VK != nullis_percent_type=$PERCENT_TYPE_VK != null)| native_datatype_spec -> { $native_datatype_spec.st; }| ^( INTERVAL_DATATYPE interval_type_spec_first interval_type_spec_second ) -> interval_type_spec(left_side=$interval_type_spec_first.stright_side=$interval_type_spec_second.st));
	public final PLSQLPrinter.type_spec_return type_spec() throws RecognitionException {
		PLSQLPrinter.type_spec_return retval = new PLSQLPrinter.type_spec_return();
		retval.start = input.LT(1);

		CommonTree REF_VK452=null;
		CommonTree PERCENT_ROWTYPE_VK453=null;
		CommonTree PERCENT_TYPE_VK454=null;
		TreeRuleReturnScope type_name451 =null;
		TreeRuleReturnScope native_datatype_spec455 =null;
		TreeRuleReturnScope interval_type_spec_first456 =null;
		TreeRuleReturnScope interval_type_spec_second457 =null;

		try {
			// PLSQLPrinter.g:2499:5: ( ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? ) -> typespec_custom(name=$type_name.stis_ref=$REF_VK != nullis_percent_rowtype=$PERCENT_ROWTYPE_VK != nullis_percent_type=$PERCENT_TYPE_VK != null)| native_datatype_spec -> { $native_datatype_spec.st; }| ^( INTERVAL_DATATYPE interval_type_spec_first interval_type_spec_second ) -> interval_type_spec(left_side=$interval_type_spec_first.stright_side=$interval_type_spec_second.st))
			int alt567=3;
			switch ( input.LA(1) ) {
			case CUSTOM_TYPE:
				{
				alt567=1;
				}
				break;
			case NATIVE_DATATYPE:
				{
				alt567=2;
				}
				break;
			case INTERVAL_DATATYPE:
				{
				alt567=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 567, 0, input);
				throw nvae;
			}
			switch (alt567) {
				case 1 :
					// PLSQLPrinter.g:2499:11: ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? )
					{
					match(input,CUSTOM_TYPE,FOLLOW_CUSTOM_TYPE_in_type_spec26592); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_type_name_in_type_spec26594);
					type_name451=type_name();
					state._fsp--;

					// PLSQLPrinter.g:2499:35: ( REF_VK )?
					int alt565=2;
					int LA565_0 = input.LA(1);
					if ( (LA565_0==REF_VK) ) {
						alt565=1;
					}
					switch (alt565) {
						case 1 :
							// PLSQLPrinter.g:2499:35: REF_VK
							{
							REF_VK452=(CommonTree)match(input,REF_VK,FOLLOW_REF_VK_in_type_spec26596); 
							}
							break;

					}

					// PLSQLPrinter.g:2499:43: ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )?
					int alt566=3;
					int LA566_0 = input.LA(1);
					if ( (LA566_0==PERCENT_ROWTYPE_VK) ) {
						alt566=1;
					}
					else if ( (LA566_0==PERCENT_TYPE_VK) ) {
						alt566=2;
					}
					switch (alt566) {
						case 1 :
							// PLSQLPrinter.g:2499:44: PERCENT_ROWTYPE_VK
							{
							PERCENT_ROWTYPE_VK453=(CommonTree)match(input,PERCENT_ROWTYPE_VK,FOLLOW_PERCENT_ROWTYPE_VK_in_type_spec26600); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2499:63: PERCENT_TYPE_VK
							{
							PERCENT_TYPE_VK454=(CommonTree)match(input,PERCENT_TYPE_VK,FOLLOW_PERCENT_TYPE_VK_in_type_spec26602); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2500:5: -> typespec_custom(name=$type_name.stis_ref=$REF_VK != nullis_percent_rowtype=$PERCENT_ROWTYPE_VK != nullis_percent_type=$PERCENT_TYPE_VK != null)
					{
						retval.st = templateLib.getInstanceOf("typespec_custom",new STAttrMap().put("name", (type_name451!=null?((StringTemplate)type_name451.getTemplate()):null)).put("is_ref", REF_VK452 != null).put("is_percent_rowtype", PERCENT_ROWTYPE_VK453 != null).put("is_percent_type", PERCENT_TYPE_VK454 != null));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2503:10: native_datatype_spec
					{
					pushFollow(FOLLOW_native_datatype_spec_in_type_spec26671);
					native_datatype_spec455=native_datatype_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 2503:31: -> { $native_datatype_spec.st; }
					{
						retval.st =  (native_datatype_spec455!=null?((StringTemplate)native_datatype_spec455.getTemplate()):null); ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:2504:10: ^( INTERVAL_DATATYPE interval_type_spec_first interval_type_spec_second )
					{
					match(input,INTERVAL_DATATYPE,FOLLOW_INTERVAL_DATATYPE_in_type_spec26687); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_interval_type_spec_first_in_type_spec26689);
					interval_type_spec_first456=interval_type_spec_first();
					state._fsp--;

					pushFollow(FOLLOW_interval_type_spec_second_in_type_spec26691);
					interval_type_spec_second457=interval_type_spec_second();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2505:5: -> interval_type_spec(left_side=$interval_type_spec_first.stright_side=$interval_type_spec_second.st)
					{
						retval.st = templateLib.getInstanceOf("interval_type_spec",new STAttrMap().put("left_side", (interval_type_spec_first456!=null?((StringTemplate)interval_type_spec_first456.getTemplate()):null)).put("right_side", (interval_type_spec_second457!=null?((StringTemplate)interval_type_spec_second457.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_spec"


	public static class interval_type_spec_first_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "interval_type_spec_first"
	// PLSQLPrinter.g:2508:1: interval_type_spec_first : ^( ( YEAR_VK | DAY_VK ) ( expression )? ) -> interval_type_spec_first(is_year=$YEAR_VK != nullis_day=$DAY_VK != nullexpression=$expression.st);
	public final PLSQLPrinter.interval_type_spec_first_return interval_type_spec_first() throws RecognitionException {
		PLSQLPrinter.interval_type_spec_first_return retval = new PLSQLPrinter.interval_type_spec_first_return();
		retval.start = input.LT(1);

		CommonTree YEAR_VK458=null;
		CommonTree DAY_VK459=null;
		TreeRuleReturnScope expression460 =null;

		try {
			// PLSQLPrinter.g:2509:5: ( ^( ( YEAR_VK | DAY_VK ) ( expression )? ) -> interval_type_spec_first(is_year=$YEAR_VK != nullis_day=$DAY_VK != nullexpression=$expression.st))
			// PLSQLPrinter.g:2509:9: ^( ( YEAR_VK | DAY_VK ) ( expression )? )
			{
			// PLSQLPrinter.g:2510:11: ( YEAR_VK | DAY_VK )
			int alt568=2;
			int LA568_0 = input.LA(1);
			if ( (LA568_0==YEAR_VK) ) {
				alt568=1;
			}
			else if ( (LA568_0==DAY_VK) ) {
				alt568=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 568, 0, input);
				throw nvae;
			}

			switch (alt568) {
				case 1 :
					// PLSQLPrinter.g:2510:12: YEAR_VK
					{
					YEAR_VK458=(CommonTree)match(input,YEAR_VK,FOLLOW_YEAR_VK_in_interval_type_spec_first26744); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2510:20: DAY_VK
					{
					DAY_VK459=(CommonTree)match(input,DAY_VK,FOLLOW_DAY_VK_in_interval_type_spec_first26746); 
					}
					break;

			}

			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:2511:11: ( expression )?
				int alt569=2;
				int LA569_0 = input.LA(1);
				if ( (LA569_0==EXPR||LA569_0==LOGIC_EXPR) ) {
					alt569=1;
				}
				switch (alt569) {
					case 1 :
						// PLSQLPrinter.g:2511:11: expression
						{
						pushFollow(FOLLOW_expression_in_interval_type_spec_first26759);
						expression460=expression();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 2513:9: -> interval_type_spec_first(is_year=$YEAR_VK != nullis_day=$DAY_VK != nullexpression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("interval_type_spec_first",new STAttrMap().put("is_year", YEAR_VK458 != null).put("is_day", DAY_VK459 != null).put("expression", (expression460!=null?((StringTemplate)expression460.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "interval_type_spec_first"


	public static class interval_type_spec_second_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "interval_type_spec_second"
	// PLSQLPrinter.g:2516:1: interval_type_spec_second : ^( ( MONTH_VK | SECOND_VK ) ( expression )? ) -> interval_type_spec_second(is_month=$MONTH_VK != nullis_second=$SECOND_VK != nullexpression=$expression.st);
	public final PLSQLPrinter.interval_type_spec_second_return interval_type_spec_second() throws RecognitionException {
		PLSQLPrinter.interval_type_spec_second_return retval = new PLSQLPrinter.interval_type_spec_second_return();
		retval.start = input.LT(1);

		CommonTree MONTH_VK461=null;
		CommonTree SECOND_VK462=null;
		TreeRuleReturnScope expression463 =null;

		try {
			// PLSQLPrinter.g:2517:5: ( ^( ( MONTH_VK | SECOND_VK ) ( expression )? ) -> interval_type_spec_second(is_month=$MONTH_VK != nullis_second=$SECOND_VK != nullexpression=$expression.st))
			// PLSQLPrinter.g:2517:9: ^( ( MONTH_VK | SECOND_VK ) ( expression )? )
			{
			// PLSQLPrinter.g:2518:11: ( MONTH_VK | SECOND_VK )
			int alt570=2;
			int LA570_0 = input.LA(1);
			if ( (LA570_0==MONTH_VK) ) {
				alt570=1;
			}
			else if ( (LA570_0==SECOND_VK) ) {
				alt570=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 570, 0, input);
				throw nvae;
			}

			switch (alt570) {
				case 1 :
					// PLSQLPrinter.g:2518:12: MONTH_VK
					{
					MONTH_VK461=(CommonTree)match(input,MONTH_VK,FOLLOW_MONTH_VK_in_interval_type_spec_second26829); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2518:21: SECOND_VK
					{
					SECOND_VK462=(CommonTree)match(input,SECOND_VK,FOLLOW_SECOND_VK_in_interval_type_spec_second26831); 
					}
					break;

			}

			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:2519:11: ( expression )?
				int alt571=2;
				int LA571_0 = input.LA(1);
				if ( (LA571_0==EXPR||LA571_0==LOGIC_EXPR) ) {
					alt571=1;
				}
				switch (alt571) {
					case 1 :
						// PLSQLPrinter.g:2519:11: expression
						{
						pushFollow(FOLLOW_expression_in_interval_type_spec_second26844);
						expression463=expression();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 2521:9: -> interval_type_spec_second(is_month=$MONTH_VK != nullis_second=$SECOND_VK != nullexpression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("interval_type_spec_second",new STAttrMap().put("is_month", MONTH_VK461 != null).put("is_second", SECOND_VK462 != null).put("expression", (expression463!=null?((StringTemplate)expression463.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "interval_type_spec_second"


	public static class type_precision_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_precision"
	// PLSQLPrinter.g:2524:1: type_precision : ^( PRECISION size1= constant (size2= constant )? (precision_char= CHAR_VK |precision_byte= BYTE_VK )? ) -> base_type_spec_precision(size1=$size1.stsize2=$size2.stis_byte=$precision_byte != nullis_char=$precision_char != null);
	public final PLSQLPrinter.type_precision_return type_precision() throws RecognitionException {
		PLSQLPrinter.type_precision_return retval = new PLSQLPrinter.type_precision_return();
		retval.start = input.LT(1);

		CommonTree precision_char=null;
		CommonTree precision_byte=null;
		TreeRuleReturnScope size1 =null;
		TreeRuleReturnScope size2 =null;

		try {
			// PLSQLPrinter.g:2525:5: ( ^( PRECISION size1= constant (size2= constant )? (precision_char= CHAR_VK |precision_byte= BYTE_VK )? ) -> base_type_spec_precision(size1=$size1.stsize2=$size2.stis_byte=$precision_byte != nullis_char=$precision_char != null))
			// PLSQLPrinter.g:2525:10: ^( PRECISION size1= constant (size2= constant )? (precision_char= CHAR_VK |precision_byte= BYTE_VK )? )
			{
			match(input,PRECISION,FOLLOW_PRECISION_in_type_precision26903); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_constant_in_type_precision26907);
			size1=constant();
			state._fsp--;

			// PLSQLPrinter.g:2525:42: (size2= constant )?
			int alt572=2;
			int LA572_0 = input.LA(1);
			if ( (LA572_0==APPROXIMATE_NUM_LIT||LA572_0==CHAR_STRING||LA572_0==EXACT_NUM_LIT||LA572_0==SQL92_RESERVED_DEFAULT||LA572_0==SQL92_RESERVED_FALSE||LA572_0==SQL92_RESERVED_NULL||LA572_0==SQL92_RESERVED_TRUE||LA572_0==UNSIGNED_INTEGER||LA572_0==CONSTANT_NEGATED||LA572_0==DBTIMEZONE_VK||LA572_0==MAXVALUE_VK||LA572_0==MINVALUE_VK||LA572_0==SESSIONTIMEZONE_VK) ) {
				alt572=1;
			}
			switch (alt572) {
				case 1 :
					// PLSQLPrinter.g:2525:42: size2= constant
					{
					pushFollow(FOLLOW_constant_in_type_precision26911);
					size2=constant();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2525:53: (precision_char= CHAR_VK |precision_byte= BYTE_VK )?
			int alt573=3;
			int LA573_0 = input.LA(1);
			if ( (LA573_0==CHAR_VK) ) {
				alt573=1;
			}
			else if ( (LA573_0==BYTE_VK) ) {
				alt573=2;
			}
			switch (alt573) {
				case 1 :
					// PLSQLPrinter.g:2525:54: precision_char= CHAR_VK
					{
					precision_char=(CommonTree)match(input,CHAR_VK,FOLLOW_CHAR_VK_in_type_precision26917); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2525:77: precision_byte= BYTE_VK
					{
					precision_byte=(CommonTree)match(input,BYTE_VK,FOLLOW_BYTE_VK_in_type_precision26921); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2526:5: -> base_type_spec_precision(size1=$size1.stsize2=$size2.stis_byte=$precision_byte != nullis_char=$precision_char != null)
			{
				retval.st = templateLib.getInstanceOf("base_type_spec_precision",new STAttrMap().put("size1", (size1!=null?((StringTemplate)size1.getTemplate()):null)).put("size2", (size2!=null?((StringTemplate)size2.getTemplate()):null)).put("is_byte", precision_byte != null).put("is_char", precision_char != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_precision"


	public static class native_datatype_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "native_datatype_spec"
	// PLSQLPrinter.g:2531:1: native_datatype_spec : ^( NATIVE_DATATYPE ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_RAW | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK ) (prec= type_precision )? (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )? ) -> base_type_spec(baseName=typeBaseNameprecision=$prec.stis_with_time_zone=$is_tz != nullis_time_zone_local=$is_tz_local != null);
	public final PLSQLPrinter.native_datatype_spec_return native_datatype_spec() throws RecognitionException {
		PLSQLPrinter.native_datatype_spec_return retval = new PLSQLPrinter.native_datatype_spec_return();
		retval.start = input.LT(1);

		CommonTree is_tz=null;
		CommonTree is_tz_local=null;
		TreeRuleReturnScope prec =null;

		 String typeBaseName = null; 
		try {
			// PLSQLPrinter.g:2533:5: ( ^( NATIVE_DATATYPE ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_RAW | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK ) (prec= type_precision )? (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )? ) -> base_type_spec(baseName=typeBaseNameprecision=$prec.stis_with_time_zone=$is_tz != nullis_time_zone_local=$is_tz_local != null))
			// PLSQLPrinter.g:2533:10: ^( NATIVE_DATATYPE ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_RAW | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK ) (prec= type_precision )? (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )? )
			{
			match(input,NATIVE_DATATYPE,FOLLOW_NATIVE_DATATYPE_in_native_datatype_spec26984); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2534:5: ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_RAW | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK )
			int alt574=54;
			switch ( input.LA(1) ) {
			case BFILE_VK:
				{
				alt574=1;
				}
				break;
			case BINARY_FLOAT_VK:
				{
				alt574=2;
				}
				break;
			case BINARY_INTEGER_VK:
				{
				alt574=3;
				}
				break;
			case BLOB_VK:
				{
				alt574=4;
				}
				break;
			case BOOLEAN_VK:
				{
				alt574=5;
				}
				break;
			case CHARACTER_VK:
				{
				alt574=6;
				}
				break;
			case CHAR_VK:
				{
				alt574=7;
				}
				break;
			case CLOB_VK:
				{
				alt574=8;
				}
				break;
			case SQL92_RESERVED_DATE:
				{
				alt574=9;
				}
				break;
			case DAY_VK:
				{
				alt574=10;
				}
				break;
			case DECIMAL_VK:
				{
				alt574=11;
				}
				break;
			case DEC_VK:
				{
				alt574=12;
				}
				break;
			case DOUBLE_VK:
				{
				alt574=13;
				}
				break;
			case DSINTERVAL_UNCONSTRAINED_VK:
				{
				alt574=14;
				}
				break;
			case FLOAT_VK:
				{
				alt574=15;
				}
				break;
			case HOUR_VK:
				{
				alt574=16;
				}
				break;
			case INTEGER_VK:
				{
				alt574=17;
				}
				break;
			case INT_VK:
				{
				alt574=18;
				}
				break;
			case LONG_VK:
				{
				alt574=19;
				}
				break;
			case LONG_RAW:
				{
				alt574=20;
				}
				break;
			case MINUTE_VK:
				{
				alt574=21;
				}
				break;
			case MLSLABEL_VK:
				{
				alt574=22;
				}
				break;
			case MONTH_VK:
				{
				alt574=23;
				}
				break;
			case NATURALN_VK:
				{
				alt574=24;
				}
				break;
			case NATURAL_VK:
				{
				alt574=25;
				}
				break;
			case NCHAR_VK:
				{
				alt574=26;
				}
				break;
			case NCLOB_VK:
				{
				alt574=27;
				}
				break;
			case NUMBER_VK:
				{
				alt574=28;
				}
				break;
			case NUMERIC_VK:
				{
				alt574=29;
				}
				break;
			case NVARCHAR2_VK:
				{
				alt574=30;
				}
				break;
			case PLS_INTEGER_VK:
				{
				alt574=31;
				}
				break;
			case POSITIVEN_VK:
				{
				alt574=32;
				}
				break;
			case POSITIVE_VK:
				{
				alt574=33;
				}
				break;
			case RAW_VK:
				{
				alt574=34;
				}
				break;
			case REAL_VK:
				{
				alt574=35;
				}
				break;
			case ROWID_VK:
				{
				alt574=36;
				}
				break;
			case SECOND_VK:
				{
				alt574=37;
				}
				break;
			case SIGNTYPE_VK:
				{
				alt574=38;
				}
				break;
			case SIMPLE_INTEGER_VK:
				{
				alt574=39;
				}
				break;
			case SMALLINT_VK:
				{
				alt574=40;
				}
				break;
			case STRING_VK:
				{
				alt574=41;
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED_VK:
				{
				alt574=42;
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED_VK:
				{
				alt574=43;
				}
				break;
			case TIMESTAMP_UNCONSTRAINED_VK:
				{
				alt574=44;
				}
				break;
			case TIMESTAMP_VK:
				{
				alt574=45;
				}
				break;
			case TIMEZONE_ABBR_VK:
				{
				alt574=46;
				}
				break;
			case TIMEZONE_HOUR_VK:
				{
				alt574=47;
				}
				break;
			case TIMEZONE_MINUTE_VK:
				{
				alt574=48;
				}
				break;
			case TIMEZONE_REGION_VK:
				{
				alt574=49;
				}
				break;
			case UROWID_VK:
				{
				alt574=50;
				}
				break;
			case VARCHAR2_VK:
				{
				alt574=51;
				}
				break;
			case VARCHAR_VK:
				{
				alt574=52;
				}
				break;
			case YEAR_VK:
				{
				alt574=53;
				}
				break;
			case YMINTERVAL_UNCONSTRAINED_VK:
				{
				alt574=54;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 574, 0, input);
				throw nvae;
			}
			switch (alt574) {
				case 1 :
					// PLSQLPrinter.g:2534:10: BFILE_VK
					{
					match(input,BFILE_VK,FOLLOW_BFILE_VK_in_native_datatype_spec26995); 
					 typeBaseName = "bfile"; 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2535:10: BINARY_FLOAT_VK
					{
					match(input,BINARY_FLOAT_VK,FOLLOW_BINARY_FLOAT_VK_in_native_datatype_spec27008); 
					 typeBaseName = "binary_float"; 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:2536:10: BINARY_INTEGER_VK
					{
					match(input,BINARY_INTEGER_VK,FOLLOW_BINARY_INTEGER_VK_in_native_datatype_spec27021); 
					 typeBaseName = "binary_integer"; 
					}
					break;
				case 4 :
					// PLSQLPrinter.g:2537:10: BLOB_VK
					{
					match(input,BLOB_VK,FOLLOW_BLOB_VK_in_native_datatype_spec27034); 
					 typeBaseName = "blob"; 
					}
					break;
				case 5 :
					// PLSQLPrinter.g:2538:10: BOOLEAN_VK
					{
					match(input,BOOLEAN_VK,FOLLOW_BOOLEAN_VK_in_native_datatype_spec27047); 
					 typeBaseName = "boolean"; 
					}
					break;
				case 6 :
					// PLSQLPrinter.g:2539:10: CHARACTER_VK
					{
					match(input,CHARACTER_VK,FOLLOW_CHARACTER_VK_in_native_datatype_spec27060); 
					 typeBaseName = "character"; 
					}
					break;
				case 7 :
					// PLSQLPrinter.g:2540:10: CHAR_VK
					{
					match(input,CHAR_VK,FOLLOW_CHAR_VK_in_native_datatype_spec27074); 
					 typeBaseName = "char"; 
					}
					break;
				case 8 :
					// PLSQLPrinter.g:2541:10: CLOB_VK
					{
					match(input,CLOB_VK,FOLLOW_CLOB_VK_in_native_datatype_spec27087); 
					 typeBaseName = "clob"; 
					}
					break;
				case 9 :
					// PLSQLPrinter.g:2542:10: SQL92_RESERVED_DATE
					{
					match(input,SQL92_RESERVED_DATE,FOLLOW_SQL92_RESERVED_DATE_in_native_datatype_spec27100); 
					 typeBaseName = "date"; 
					}
					break;
				case 10 :
					// PLSQLPrinter.g:2543:10: DAY_VK
					{
					match(input,DAY_VK,FOLLOW_DAY_VK_in_native_datatype_spec27113); 
					}
					break;
				case 11 :
					// PLSQLPrinter.g:2544:10: DECIMAL_VK
					{
					match(input,DECIMAL_VK,FOLLOW_DECIMAL_VK_in_native_datatype_spec27124); 
					 typeBaseName = "decimal"; 
					}
					break;
				case 12 :
					// PLSQLPrinter.g:2545:10: DEC_VK
					{
					match(input,DEC_VK,FOLLOW_DEC_VK_in_native_datatype_spec27138); 
					 typeBaseName = "dec"; 
					}
					break;
				case 13 :
					// PLSQLPrinter.g:2546:10: DOUBLE_VK
					{
					match(input,DOUBLE_VK,FOLLOW_DOUBLE_VK_in_native_datatype_spec27151); 
					 typeBaseName = "double"; 
					}
					break;
				case 14 :
					// PLSQLPrinter.g:2547:10: DSINTERVAL_UNCONSTRAINED_VK
					{
					match(input,DSINTERVAL_UNCONSTRAINED_VK,FOLLOW_DSINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec27164); 
					}
					break;
				case 15 :
					// PLSQLPrinter.g:2548:10: FLOAT_VK
					{
					match(input,FLOAT_VK,FOLLOW_FLOAT_VK_in_native_datatype_spec27175); 
					 typeBaseName = "float"; 
					}
					break;
				case 16 :
					// PLSQLPrinter.g:2549:10: HOUR_VK
					{
					match(input,HOUR_VK,FOLLOW_HOUR_VK_in_native_datatype_spec27188); 
					}
					break;
				case 17 :
					// PLSQLPrinter.g:2550:10: INTEGER_VK
					{
					match(input,INTEGER_VK,FOLLOW_INTEGER_VK_in_native_datatype_spec27199); 
					 typeBaseName = "integer"; 
					}
					break;
				case 18 :
					// PLSQLPrinter.g:2551:10: INT_VK
					{
					match(input,INT_VK,FOLLOW_INT_VK_in_native_datatype_spec27212); 
					 typeBaseName = "int"; 
					}
					break;
				case 19 :
					// PLSQLPrinter.g:2552:10: LONG_VK
					{
					match(input,LONG_VK,FOLLOW_LONG_VK_in_native_datatype_spec27225); 
					 typeBaseName = "long"; 
					}
					break;
				case 20 :
					// PLSQLPrinter.g:2553:10: LONG_RAW
					{
					match(input,LONG_RAW,FOLLOW_LONG_RAW_in_native_datatype_spec27238); 
					 typeBaseName = "long raw"; 
					}
					break;
				case 21 :
					// PLSQLPrinter.g:2554:10: MINUTE_VK
					{
					match(input,MINUTE_VK,FOLLOW_MINUTE_VK_in_native_datatype_spec27251); 
					}
					break;
				case 22 :
					// PLSQLPrinter.g:2555:10: MLSLABEL_VK
					{
					match(input,MLSLABEL_VK,FOLLOW_MLSLABEL_VK_in_native_datatype_spec27262); 
					}
					break;
				case 23 :
					// PLSQLPrinter.g:2556:10: MONTH_VK
					{
					match(input,MONTH_VK,FOLLOW_MONTH_VK_in_native_datatype_spec27273); 
					}
					break;
				case 24 :
					// PLSQLPrinter.g:2557:10: NATURALN_VK
					{
					match(input,NATURALN_VK,FOLLOW_NATURALN_VK_in_native_datatype_spec27284); 
					}
					break;
				case 25 :
					// PLSQLPrinter.g:2558:10: NATURAL_VK
					{
					match(input,NATURAL_VK,FOLLOW_NATURAL_VK_in_native_datatype_spec27295); 
					}
					break;
				case 26 :
					// PLSQLPrinter.g:2559:10: NCHAR_VK
					{
					match(input,NCHAR_VK,FOLLOW_NCHAR_VK_in_native_datatype_spec27306); 
					 typeBaseName = "nchar"; 
					}
					break;
				case 27 :
					// PLSQLPrinter.g:2560:10: NCLOB_VK
					{
					match(input,NCLOB_VK,FOLLOW_NCLOB_VK_in_native_datatype_spec27319); 
					 typeBaseName = "nclob"; 
					}
					break;
				case 28 :
					// PLSQLPrinter.g:2561:10: NUMBER_VK
					{
					match(input,NUMBER_VK,FOLLOW_NUMBER_VK_in_native_datatype_spec27332); 
					 typeBaseName = "number"; 
					}
					break;
				case 29 :
					// PLSQLPrinter.g:2562:10: NUMERIC_VK
					{
					match(input,NUMERIC_VK,FOLLOW_NUMERIC_VK_in_native_datatype_spec27345); 
					 typeBaseName = "numeric"; 
					}
					break;
				case 30 :
					// PLSQLPrinter.g:2563:10: NVARCHAR2_VK
					{
					match(input,NVARCHAR2_VK,FOLLOW_NVARCHAR2_VK_in_native_datatype_spec27358); 
					 typeBaseName = "nvarchar2"; 
					}
					break;
				case 31 :
					// PLSQLPrinter.g:2564:10: PLS_INTEGER_VK
					{
					match(input,PLS_INTEGER_VK,FOLLOW_PLS_INTEGER_VK_in_native_datatype_spec27371); 
					 typeBaseName = "pls_integer"; 
					}
					break;
				case 32 :
					// PLSQLPrinter.g:2565:10: POSITIVEN_VK
					{
					match(input,POSITIVEN_VK,FOLLOW_POSITIVEN_VK_in_native_datatype_spec27384); 
					}
					break;
				case 33 :
					// PLSQLPrinter.g:2566:10: POSITIVE_VK
					{
					match(input,POSITIVE_VK,FOLLOW_POSITIVE_VK_in_native_datatype_spec27395); 
					}
					break;
				case 34 :
					// PLSQLPrinter.g:2567:10: RAW_VK
					{
					match(input,RAW_VK,FOLLOW_RAW_VK_in_native_datatype_spec27406); 
					 typeBaseName = "raw"; 
					}
					break;
				case 35 :
					// PLSQLPrinter.g:2568:10: REAL_VK
					{
					match(input,REAL_VK,FOLLOW_REAL_VK_in_native_datatype_spec27419); 
					}
					break;
				case 36 :
					// PLSQLPrinter.g:2569:10: ROWID_VK
					{
					match(input,ROWID_VK,FOLLOW_ROWID_VK_in_native_datatype_spec27430); 
					 typeBaseName = "rowid"; 
					}
					break;
				case 37 :
					// PLSQLPrinter.g:2570:10: SECOND_VK
					{
					match(input,SECOND_VK,FOLLOW_SECOND_VK_in_native_datatype_spec27443); 
					}
					break;
				case 38 :
					// PLSQLPrinter.g:2571:10: SIGNTYPE_VK
					{
					match(input,SIGNTYPE_VK,FOLLOW_SIGNTYPE_VK_in_native_datatype_spec27454); 
					}
					break;
				case 39 :
					// PLSQLPrinter.g:2572:10: SIMPLE_INTEGER_VK
					{
					match(input,SIMPLE_INTEGER_VK,FOLLOW_SIMPLE_INTEGER_VK_in_native_datatype_spec27465); 
					}
					break;
				case 40 :
					// PLSQLPrinter.g:2573:10: SMALLINT_VK
					{
					match(input,SMALLINT_VK,FOLLOW_SMALLINT_VK_in_native_datatype_spec27476); 
					 typeBaseName = "smallint"; 
					}
					break;
				case 41 :
					// PLSQLPrinter.g:2574:10: STRING_VK
					{
					match(input,STRING_VK,FOLLOW_STRING_VK_in_native_datatype_spec27489); 
					}
					break;
				case 42 :
					// PLSQLPrinter.g:2575:10: TIMESTAMP_LTZ_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_LTZ_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_LTZ_UNCONSTRAINED_VK_in_native_datatype_spec27500); 
					}
					break;
				case 43 :
					// PLSQLPrinter.g:2576:10: TIMESTAMP_TZ_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_TZ_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_TZ_UNCONSTRAINED_VK_in_native_datatype_spec27511); 
					}
					break;
				case 44 :
					// PLSQLPrinter.g:2577:10: TIMESTAMP_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_UNCONSTRAINED_VK_in_native_datatype_spec27522); 
					}
					break;
				case 45 :
					// PLSQLPrinter.g:2578:10: TIMESTAMP_VK
					{
					match(input,TIMESTAMP_VK,FOLLOW_TIMESTAMP_VK_in_native_datatype_spec27533); 
					 typeBaseName = "timestamp"; 
					}
					break;
				case 46 :
					// PLSQLPrinter.g:2579:10: TIMEZONE_ABBR_VK
					{
					match(input,TIMEZONE_ABBR_VK,FOLLOW_TIMEZONE_ABBR_VK_in_native_datatype_spec27546); 
					}
					break;
				case 47 :
					// PLSQLPrinter.g:2580:10: TIMEZONE_HOUR_VK
					{
					match(input,TIMEZONE_HOUR_VK,FOLLOW_TIMEZONE_HOUR_VK_in_native_datatype_spec27557); 
					}
					break;
				case 48 :
					// PLSQLPrinter.g:2581:10: TIMEZONE_MINUTE_VK
					{
					match(input,TIMEZONE_MINUTE_VK,FOLLOW_TIMEZONE_MINUTE_VK_in_native_datatype_spec27568); 
					}
					break;
				case 49 :
					// PLSQLPrinter.g:2582:10: TIMEZONE_REGION_VK
					{
					match(input,TIMEZONE_REGION_VK,FOLLOW_TIMEZONE_REGION_VK_in_native_datatype_spec27579); 
					}
					break;
				case 50 :
					// PLSQLPrinter.g:2583:10: UROWID_VK
					{
					match(input,UROWID_VK,FOLLOW_UROWID_VK_in_native_datatype_spec27590); 
					 typeBaseName = "urowid"; 
					}
					break;
				case 51 :
					// PLSQLPrinter.g:2584:10: VARCHAR2_VK
					{
					match(input,VARCHAR2_VK,FOLLOW_VARCHAR2_VK_in_native_datatype_spec27603); 
					 typeBaseName = "varchar2"; 
					}
					break;
				case 52 :
					// PLSQLPrinter.g:2585:10: VARCHAR_VK
					{
					match(input,VARCHAR_VK,FOLLOW_VARCHAR_VK_in_native_datatype_spec27616); 
					 typeBaseName = "varchar"; 
					}
					break;
				case 53 :
					// PLSQLPrinter.g:2586:10: YEAR_VK
					{
					match(input,YEAR_VK,FOLLOW_YEAR_VK_in_native_datatype_spec27629); 
					}
					break;
				case 54 :
					// PLSQLPrinter.g:2587:10: YMINTERVAL_UNCONSTRAINED_VK
					{
					match(input,YMINTERVAL_UNCONSTRAINED_VK,FOLLOW_YMINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec27640); 
					}
					break;

			}

			// PLSQLPrinter.g:2588:9: (prec= type_precision )?
			int alt575=2;
			int LA575_0 = input.LA(1);
			if ( (LA575_0==PRECISION) ) {
				alt575=1;
			}
			switch (alt575) {
				case 1 :
					// PLSQLPrinter.g:2588:9: prec= type_precision
					{
					pushFollow(FOLLOW_type_precision_in_native_datatype_spec27649);
					prec=type_precision();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2589:5: (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )?
			int alt577=2;
			int LA577_0 = input.LA(1);
			if ( (LA577_0==TIME_VK) ) {
				alt577=1;
			}
			switch (alt577) {
				case 1 :
					// PLSQLPrinter.g:2589:6: is_tz= TIME_VK (is_tz_local= LOCAL_VK )?
					{
					is_tz=(CommonTree)match(input,TIME_VK,FOLLOW_TIME_VK_in_native_datatype_spec27659); 
					// PLSQLPrinter.g:2589:31: (is_tz_local= LOCAL_VK )?
					int alt576=2;
					int LA576_0 = input.LA(1);
					if ( (LA576_0==LOCAL_VK) ) {
						alt576=1;
					}
					switch (alt576) {
						case 1 :
							// PLSQLPrinter.g:2589:31: is_tz_local= LOCAL_VK
							{
							is_tz_local=(CommonTree)match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_native_datatype_spec27663); 
							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			 if (typeBaseName == null) { typeBaseName = "Unsupported datatype"; } 
			// TEMPLATE REWRITE
			// 2592:5: -> base_type_spec(baseName=typeBaseNameprecision=$prec.stis_with_time_zone=$is_tz != nullis_time_zone_local=$is_tz_local != null)
			{
				retval.st = templateLib.getInstanceOf("base_type_spec",new STAttrMap().put("baseName", typeBaseName).put("precision", (prec!=null?((StringTemplate)prec.getTemplate()):null)).put("is_with_time_zone", is_tz != null).put("is_time_zone_local", is_tz_local != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "native_datatype_spec"


	public static class general_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_element"
	// PLSQLPrinter.g:2598:1: general_element : ^( CASCATED_ELEMENT ( general_element_id | function_argument )+ ) -> general_element(parts=parts);
	public final PLSQLPrinter.general_element_return general_element() throws RecognitionException {
		PLSQLPrinter.general_element_return retval = new PLSQLPrinter.general_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope general_element_id464 =null;
		TreeRuleReturnScope function_argument465 =null;


		    List<StringTemplate> parts = new ArrayList<StringTemplate>();

		try {
			// PLSQLPrinter.g:2602:5: ( ^( CASCATED_ELEMENT ( general_element_id | function_argument )+ ) -> general_element(parts=parts))
			// PLSQLPrinter.g:2602:10: ^( CASCATED_ELEMENT ( general_element_id | function_argument )+ )
			{
			match(input,CASCATED_ELEMENT,FOLLOW_CASCATED_ELEMENT_in_general_element27738); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2603:13: ( general_element_id | function_argument )+
			int cnt578=0;
			loop578:
			while (true) {
				int alt578=3;
				int LA578_0 = input.LA(1);
				if ( (LA578_0==ANY_ELEMENT) ) {
					alt578=1;
				}
				else if ( (LA578_0==ARGUMENTS) ) {
					alt578=2;
				}

				switch (alt578) {
				case 1 :
					// PLSQLPrinter.g:2604:15: general_element_id
					{
					pushFollow(FOLLOW_general_element_id_in_general_element27768);
					general_element_id464=general_element_id();
					state._fsp--;


					                if (parts.size() > 0) {
					                   parts.add(templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", ".")));
					                }
					                parts.add((general_element_id464!=null?((StringTemplate)general_element_id464.getTemplate()):null));
					              
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2610:17: function_argument
					{
					pushFollow(FOLLOW_function_argument_in_general_element27788);
					function_argument465=function_argument();
					state._fsp--;

					 parts.add((function_argument465!=null?((StringTemplate)function_argument465.getTemplate()):null)); 
					}
					break;

				default :
					if ( cnt578 >= 1 ) break loop578;
					EarlyExitException eee = new EarlyExitException(578, input);
					throw eee;
				}
				cnt578++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2613:5: -> general_element(parts=parts)
			{
				retval.st = templateLib.getInstanceOf("general_element",new STAttrMap().put("parts", parts));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_element"


	public static class general_element_id_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_element_id"
	// PLSQLPrinter.g:2616:1: general_element_id : ^( ANY_ELEMENT ID ) -> string_literal(val=$ID.text);
	public final PLSQLPrinter.general_element_id_return general_element_id() throws RecognitionException {
		PLSQLPrinter.general_element_id_return retval = new PLSQLPrinter.general_element_id_return();
		retval.start = input.LT(1);

		CommonTree ID466=null;

		try {
			// PLSQLPrinter.g:2617:5: ( ^( ANY_ELEMENT ID ) -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2617:7: ^( ANY_ELEMENT ID )
			{
			match(input,ANY_ELEMENT,FOLLOW_ANY_ELEMENT_in_general_element_id27851); 
			match(input, Token.DOWN, null); 
			ID466=(CommonTree)match(input,ID,FOLLOW_ID_in_general_element_id27853); 
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2617:25: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID466!=null?ID466.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_element_id"


	public static class constant_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constant"
	// PLSQLPrinter.g:2624:1: constant : (v1= UNSIGNED_INTEGER -> string_literal(val=$v1.text)| ^( CONSTANT_NEGATED v2= UNSIGNED_INTEGER ) -> string_literal(val=\"-\" + $v2.text)| EXACT_NUM_LIT -> string_literal(val=$EXACT_NUM_LIT.text)| APPROXIMATE_NUM_LIT -> string_literal(val=$APPROXIMATE_NUM_LIT.text)| CHAR_STRING -> string_literal(val=$CHAR_STRING.text)| SQL92_RESERVED_NULL -> string_literal(val=\"null\")| SQL92_RESERVED_TRUE -> string_literal(val=\"true\")| SQL92_RESERVED_FALSE -> string_literal(val=\"false\")| DBTIMEZONE_VK -> string_literal(val=\"dbtimezone\")| SESSIONTIMEZONE_VK -> string_literal(val=\"sessiontimezone\")| MINVALUE_VK -> string_literal(val=\"minvalue\")| MAXVALUE_VK -> string_literal(val=\"maxvalue\")| SQL92_RESERVED_DEFAULT -> string_literal(val=\"default\"));
	public final PLSQLPrinter.constant_return constant() throws RecognitionException {
		PLSQLPrinter.constant_return retval = new PLSQLPrinter.constant_return();
		retval.start = input.LT(1);

		CommonTree v1=null;
		CommonTree v2=null;
		CommonTree EXACT_NUM_LIT467=null;
		CommonTree APPROXIMATE_NUM_LIT468=null;
		CommonTree CHAR_STRING469=null;

		try {
			// PLSQLPrinter.g:2625:5: (v1= UNSIGNED_INTEGER -> string_literal(val=$v1.text)| ^( CONSTANT_NEGATED v2= UNSIGNED_INTEGER ) -> string_literal(val=\"-\" + $v2.text)| EXACT_NUM_LIT -> string_literal(val=$EXACT_NUM_LIT.text)| APPROXIMATE_NUM_LIT -> string_literal(val=$APPROXIMATE_NUM_LIT.text)| CHAR_STRING -> string_literal(val=$CHAR_STRING.text)| SQL92_RESERVED_NULL -> string_literal(val=\"null\")| SQL92_RESERVED_TRUE -> string_literal(val=\"true\")| SQL92_RESERVED_FALSE -> string_literal(val=\"false\")| DBTIMEZONE_VK -> string_literal(val=\"dbtimezone\")| SESSIONTIMEZONE_VK -> string_literal(val=\"sessiontimezone\")| MINVALUE_VK -> string_literal(val=\"minvalue\")| MAXVALUE_VK -> string_literal(val=\"maxvalue\")| SQL92_RESERVED_DEFAULT -> string_literal(val=\"default\"))
			int alt579=13;
			switch ( input.LA(1) ) {
			case UNSIGNED_INTEGER:
				{
				alt579=1;
				}
				break;
			case CONSTANT_NEGATED:
				{
				alt579=2;
				}
				break;
			case EXACT_NUM_LIT:
				{
				alt579=3;
				}
				break;
			case APPROXIMATE_NUM_LIT:
				{
				alt579=4;
				}
				break;
			case CHAR_STRING:
				{
				alt579=5;
				}
				break;
			case SQL92_RESERVED_NULL:
				{
				alt579=6;
				}
				break;
			case SQL92_RESERVED_TRUE:
				{
				alt579=7;
				}
				break;
			case SQL92_RESERVED_FALSE:
				{
				alt579=8;
				}
				break;
			case DBTIMEZONE_VK:
				{
				alt579=9;
				}
				break;
			case SESSIONTIMEZONE_VK:
				{
				alt579=10;
				}
				break;
			case MINVALUE_VK:
				{
				alt579=11;
				}
				break;
			case MAXVALUE_VK:
				{
				alt579=12;
				}
				break;
			case SQL92_RESERVED_DEFAULT:
				{
				alt579=13;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 579, 0, input);
				throw nvae;
			}
			switch (alt579) {
				case 1 :
					// PLSQLPrinter.g:2625:10: v1= UNSIGNED_INTEGER
					{
					v1=(CommonTree)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_constant27889); 
					// TEMPLATE REWRITE
					// 2625:30: -> string_literal(val=$v1.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (v1!=null?v1.getText():null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2626:10: ^( CONSTANT_NEGATED v2= UNSIGNED_INTEGER )
					{
					match(input,CONSTANT_NEGATED,FOLLOW_CONSTANT_NEGATED_in_constant27910); 
					match(input, Token.DOWN, null); 
					v2=(CommonTree)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_constant27914); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2626:50: -> string_literal(val=\"-\" + $v2.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "-" + (v2!=null?v2.getText():null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:2627:10: EXACT_NUM_LIT
					{
					EXACT_NUM_LIT467=(CommonTree)match(input,EXACT_NUM_LIT,FOLLOW_EXACT_NUM_LIT_in_constant27935); 
					// TEMPLATE REWRITE
					// 2627:24: -> string_literal(val=$EXACT_NUM_LIT.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (EXACT_NUM_LIT467!=null?EXACT_NUM_LIT467.getText():null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:2628:10: APPROXIMATE_NUM_LIT
					{
					APPROXIMATE_NUM_LIT468=(CommonTree)match(input,APPROXIMATE_NUM_LIT,FOLLOW_APPROXIMATE_NUM_LIT_in_constant27955); 
					// TEMPLATE REWRITE
					// 2628:30: -> string_literal(val=$APPROXIMATE_NUM_LIT.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (APPROXIMATE_NUM_LIT468!=null?APPROXIMATE_NUM_LIT468.getText():null)));
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:2629:10: CHAR_STRING
					{
					CHAR_STRING469=(CommonTree)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_constant27975); 
					// TEMPLATE REWRITE
					// 2629:22: -> string_literal(val=$CHAR_STRING.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (CHAR_STRING469!=null?CHAR_STRING469.getText():null)));
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:2630:10: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_constant27995); 
					// TEMPLATE REWRITE
					// 2630:30: -> string_literal(val=\"null\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "null"));
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:2631:10: SQL92_RESERVED_TRUE
					{
					match(input,SQL92_RESERVED_TRUE,FOLLOW_SQL92_RESERVED_TRUE_in_constant28015); 
					// TEMPLATE REWRITE
					// 2631:30: -> string_literal(val=\"true\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "true"));
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:2632:10: SQL92_RESERVED_FALSE
					{
					match(input,SQL92_RESERVED_FALSE,FOLLOW_SQL92_RESERVED_FALSE_in_constant28035); 
					// TEMPLATE REWRITE
					// 2632:31: -> string_literal(val=\"false\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "false"));
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:2633:10: DBTIMEZONE_VK
					{
					match(input,DBTIMEZONE_VK,FOLLOW_DBTIMEZONE_VK_in_constant28055); 
					// TEMPLATE REWRITE
					// 2633:25: -> string_literal(val=\"dbtimezone\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "dbtimezone"));
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:2634:10: SESSIONTIMEZONE_VK
					{
					match(input,SESSIONTIMEZONE_VK,FOLLOW_SESSIONTIMEZONE_VK_in_constant28076); 
					// TEMPLATE REWRITE
					// 2634:29: -> string_literal(val=\"sessiontimezone\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "sessiontimezone"));
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:2635:10: MINVALUE_VK
					{
					match(input,MINVALUE_VK,FOLLOW_MINVALUE_VK_in_constant28096); 
					// TEMPLATE REWRITE
					// 2635:22: -> string_literal(val=\"minvalue\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "minvalue"));
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:2636:10: MAXVALUE_VK
					{
					match(input,MAXVALUE_VK,FOLLOW_MAXVALUE_VK_in_constant28116); 
					// TEMPLATE REWRITE
					// 2636:22: -> string_literal(val=\"maxvalue\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "maxvalue"));
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:2637:10: SQL92_RESERVED_DEFAULT
					{
					match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_constant28136); 
					// TEMPLATE REWRITE
					// 2637:33: -> string_literal(val=\"default\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "default"));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constant"


	public static class id_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "id"
	// PLSQLPrinter.g:2642:1: id : ( char_set_name )? ID -> string_literal(val=$ID.text);
	public final PLSQLPrinter.id_return id() throws RecognitionException {
		PLSQLPrinter.id_return retval = new PLSQLPrinter.id_return();
		retval.start = input.LT(1);

		CommonTree ID470=null;

		try {
			// PLSQLPrinter.g:2643:5: ( ( char_set_name )? ID -> string_literal(val=$ID.text))
			// PLSQLPrinter.g:2643:10: ( char_set_name )? ID
			{
			// PLSQLPrinter.g:2643:10: ( char_set_name )?
			int alt580=2;
			int LA580_0 = input.LA(1);
			if ( (LA580_0==CHAR_SET_NAME) ) {
				alt580=1;
			}
			switch (alt580) {
				case 1 :
					// PLSQLPrinter.g:2643:10: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_id28171);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			ID470=(CommonTree)match(input,ID,FOLLOW_ID_in_id28174); 
			// TEMPLATE REWRITE
			// 2644:5: -> string_literal(val=$ID.text)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (ID470!=null?ID470.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "id"

	// Delegated rules


	protected DFA322 dfa322 = new DFA322(this);
	static final String DFA322_eotS =
		"\16\uffff";
	static final String DFA322_eofS =
		"\16\uffff";
	static final String DFA322_minS =
		"\1\u00c9\1\2\1\uffff\1\u0103\1\2\1\u00f5\1\2\1\3\1\u0190\1\u0103\1\3\2"+
		"\uffff\1\u0190";
	static final String DFA322_maxS =
		"\1\u0321\1\2\1\uffff\1\u0103\1\2\1\u0190\1\2\2\u0190\1\u02f2\1\u0190\2"+
		"\uffff\1\u0190";
	static final String DFA322_acceptS =
		"\2\uffff\1\3\10\uffff\1\1\1\2\1\uffff";
	static final String DFA322_specialS =
		"\16\uffff}>";
	static final String[] DFA322_transitionS = {
			"\1\1\u0257\uffff\1\2",
			"\1\3",
			"",
			"\1\4",
			"\1\5",
			"\1\6\u009a\uffff\1\7",
			"\1\10",
			"\1\11\u018c\uffff\1\7",
			"\1\12",
			"\1\14\145\uffff\1\13\142\uffff\1\13\u0125\uffff\1\14",
			"\1\15\u018c\uffff\1\12",
			"",
			"",
			"\1\7"
	};

	static final short[] DFA322_eot = DFA.unpackEncodedString(DFA322_eotS);
	static final short[] DFA322_eof = DFA.unpackEncodedString(DFA322_eofS);
	static final char[] DFA322_min = DFA.unpackEncodedStringToUnsignedChars(DFA322_minS);
	static final char[] DFA322_max = DFA.unpackEncodedStringToUnsignedChars(DFA322_maxS);
	static final short[] DFA322_accept = DFA.unpackEncodedString(DFA322_acceptS);
	static final short[] DFA322_special = DFA.unpackEncodedString(DFA322_specialS);
	static final short[][] DFA322_transition;

	static {
		int numStates = DFA322_transitionS.length;
		DFA322_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA322_transition[i] = DFA.unpackEncodedString(DFA322_transitionS[i]);
		}
	}

	protected class DFA322 extends DFA {

		public DFA322(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 322;
			this.eot = DFA322_eot;
			this.eof = DFA322_eof;
			this.min = DFA322_min;
			this.max = DFA322_max;
			this.accept = DFA322_accept;
			this.special = DFA322_special;
			this.transition = DFA322_transition;
		}
		@Override
		public String getDescription() {
			return "1473:1: update_set_elements : ( ^( ASSIGN column_name expression ) -> update_set_element_column_expr(column_name=$column_name.stexpression=$expression.st)| ^( ASSIGN (names+= column_name )+ subquery ) -> update_set_element_columns_subquery(column_names=$namessubquery=$subquery.st)| ^( VALUE_VK ( char_set_name )? ID expression ) -> update_set_element_column_value(column_name=$ID.textexpression=$expression.st));";
		}
	}

	public static final BitSet FOLLOW_COMPILATION_UNIT_in_compilation_unit81 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unit_statement_in_compilation_unit85 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0xC800000000000000L,0x0000000000000007L,0x0000003FC0000000L,0x00000000001F8000L});
	public static final BitSet FOLLOW_SQL_SCRIPT_in_sql_script124 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unit_statement_in_sql_script129 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L,0xC800000000000000L,0x0000000000000007L,0x0000003FC0000000L,0x00000080001F8000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_sql_plus_command_in_sql_script133 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L,0xC800000000000000L,0x0000000000000007L,0x0000003FC0000000L,0x00000080001F8000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_whenever_command_in_sql_plus_command177 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exit_command_in_sql_plus_command187 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_prompt_command_in_sql_plus_command197 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_command_in_sql_plus_command207 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WHENEVER_VK_in_whenever_command227 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_whenever_command239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000008000000000L});
	public static final BitSet FOLLOW_EXIT_VK_in_whenever_command269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_set_in_whenever_command283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_set_in_whenever_command303 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONTINUE_VK_in_whenever_command323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_set_in_whenever_command325 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SET_VK_in_set_command374 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REGULAR_ID_in_set_command388 = new BitSet(new long[]{0x0000000008008000L,0x0000000008000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_in_set_command402 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXIT_VK_in_exit_command444 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROMPT_in_prompt_command465 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_function_in_unit_statement485 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_package_in_unit_statement500 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_procedure_in_unit_statement515 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_sequence_in_unit_statement530 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_trigger_in_unit_statement545 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_type_in_unit_statement560 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_unit_statement575 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_unit_statement590 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_package_in_unit_statement605 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_sequence_in_unit_statement620 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_trigger_in_unit_statement635 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_unit_statement650 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_function_in_unit_statement665 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_package_in_unit_statement680 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_procedure_in_unit_statement695 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_sequence_in_unit_statement710 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_trigger_in_unit_statement725 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_type_in_unit_statement740 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_FUNCTION_in_drop_function769 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_name_in_drop_function771 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_FUNCTION_in_alter_function807 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_name_in_alter_function809 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_function811 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_function814 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_function817 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_FUNCTION_in_create_function_body854 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_create_function_body856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_function_body859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_FUNCTION_NAME_in_create_function_body863 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_create_function_body867 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_type_spec_in_create_function_body873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_create_function_body876 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_create_function_body880 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_function_body898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101000040000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000400040000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_parallel_enable_clause_in_create_function_body903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000400040000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_result_cache_clause_in_create_function_body908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_DETERMINISTIC_VK_in_create_function_body911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_PIPELINED_VK_in_create_function_body914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_USING_MODE_in_create_function_body935 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_AGGREGATE_VK_in_create_function_body937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_implementation_type_name_in_create_function_body940 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CALL_MODE_in_create_function_body975 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_create_function_body977 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_create_function_body1012 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_create_function_body1014 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARALLEL_ENABLE_VK_in_parallel_enable_clause1185 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_partition_by_clause_in_parallel_enable_clause1187 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARTITION_VK_in_partition_by_clause1224 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_partition_by_clause1226 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_partition_by_clause1246 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_HASH_VK_in_partition_by_clause1266 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_partition_by_clause1269 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_partition_by_clause1271 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_RANGE_VK_in_partition_by_clause1294 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_partition_by_clause1297 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_partition_by_clause1299 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_streaming_clause_in_partition_by_clause1331 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RESULT_CACHE_VK_in_result_cache_clause1377 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_relies_on_part_in_result_cache_clause1379 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RELIES_ON_VK_in_relies_on_part1416 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_relies_on_part1418 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_STREAMING_CLAUSE_in_streaming_clause1455 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_streaming_clause1458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_CLUSTER_VK_in_streaming_clause1460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_streaming_clause1463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_COLUMNS_in_streaming_clause1466 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_streaming_clause1468 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_PACKAGE_in_drop_package1511 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_package_name_in_drop_package1513 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_BODY_VK_in_drop_package1515 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_PACKAGE_in_alter_package1552 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_package_name_in_alter_package1554 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0080000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000020000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_package1556 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000020000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_package1559 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_PACKAGE_VK_in_alter_package1580 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_BODY_VK_in_alter_package1582 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_SPECIFICATION_VK_in_alter_package1584 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_package1588 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_PACKAGE_SPEC_in_create_package1625 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_package1627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_package_name_in_create_package1630 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L,0x0000080000000000L,0x0000000200000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000007004080L,0x0000000000000000L,0x3008000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_package1632 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000200000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000007004080L,0x0000000000000000L,0x3008000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_package_obj_spec_in_create_package1637 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000200000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000007004080L,0x0000000000000000L,0x3008000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_CREATE_PACKAGE_BODY_in_create_package1705 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_package1707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_package_name_in_create_package1710 = new BitSet(new long[]{0x0000000000000008L,0x1000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000083240000000L,0x0000000200000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000007004000L,0x0000000000000000L,0x3008040000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_package_obj_body_in_create_package1714 = new BitSet(new long[]{0x0000000000000008L,0x1000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000083240000000L,0x0000000200000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000007004000L,0x0000000000000000L,0x3008040000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_create_package1717 = new BitSet(new long[]{0x0000000000000008L,0x1000000000000000L});
	public static final BitSet FOLLOW_exception_clause_in_create_package1720 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_variable_declaration_in_package_obj_spec1813 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_package_obj_spec1829 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_package_obj_spec1845 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_package_obj_spec1861 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_package_obj_spec1877 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_package_obj_spec1893 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedure_spec_in_package_obj_spec1909 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_spec_in_package_obj_spec1925 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pragma_declaration_in_package_obj_spec1941 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_SPEC_in_procedure_spec1967 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_name_in_procedure_spec1969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_procedure_spec1972 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_procedure_spec1976 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_CALL_MODE_in_procedure_spec1994 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_procedure_spec1996 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_SPEC_in_function_spec2046 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_name_in_function_spec2048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_type_spec_in_function_spec2050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_function_spec2053 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_function_spec2057 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_PIPELINED_VK_in_function_spec2073 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RESULT_CACHE_VK_in_function_spec2076 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_DETERMINISTIC_VK_in_function_spec2079 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_procedure_spec_in_package_obj_body2174 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_spec_in_package_obj_body2190 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variable_declaration_in_package_obj_body2206 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_package_obj_body2222 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_package_obj_body2238 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_package_obj_body2254 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_package_obj_body2270 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_package_obj_body2286 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_package_obj_body2302 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_package_obj_body2318 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_package_obj_body2334 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_PROCEDURE_in_drop_procedure2365 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_name_in_drop_procedure2367 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_PROCEDURE_in_alter_procedure2403 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_name_in_alter_procedure2405 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_procedure2407 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_procedure2410 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_procedure2413 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_PROCEDURE_in_create_procedure_body2450 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_create_procedure_body2452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000002000L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_procedure_body2455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_procedure_name_in_create_procedure_body2458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_create_procedure_body2461 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_create_procedure_body2465 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_procedure_body2469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_create_procedure_body_impl_in_create_procedure_body2483 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXTERNAL_VK_in_create_procedure_body_impl2577 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CALL_MODE_in_create_procedure_body_impl2599 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_create_procedure_body_impl2601 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_create_procedure_body_impl2622 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_create_procedure_body_impl2624 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_TRIGGER_in_drop_trigger2654 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_drop_trigger2656 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_TRIGGER_in_alter_trigger2692 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_alter_trigger2694 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000400L,0x0000000004000080L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020800000000L});
	public static final BitSet FOLLOW_ENABLE_VK_in_alter_trigger2715 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DISABLE_VK_in_alter_trigger2717 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RENAME_VK_in_alter_trigger2738 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_alter_trigger2740 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_trigger2760 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_trigger2763 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_trigger2766 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_CREATE_TRIGGER_in_create_trigger2826 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_trigger2828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_trigger_name_in_create_trigger2831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000003000L,0x0080000004000080L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_simple_dml_trigger_in_create_trigger2847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000003000L,0x0080000004000080L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_compound_dml_trigger_in_create_trigger2850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000002000L,0x0080000004000080L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_non_dml_trigger_in_create_trigger2853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000002000L,0x0080000004000080L});
	public static final BitSet FOLLOW_trigger_follows_clause_in_create_trigger2868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000002000L,0x0000000004000080L});
	public static final BitSet FOLLOW_ENABLE_VK_in_create_trigger2872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_DISABLE_VK_in_create_trigger2874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000201000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_trigger_when_clause_in_create_trigger2878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000201000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_trigger_body_in_create_trigger2881 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOLLOWS_VK_in_trigger_follows_clause2917 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_trigger_follows_clause2919 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_trigger_when_clause2956 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_trigger_when_clause2958 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_DML_in_simple_dml_trigger2995 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BEFORE_VK_in_simple_dml_trigger2998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_AFTER_VK_in_simple_dml_trigger3000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_INSTEAD_VK_in_simple_dml_trigger3002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_FOR_EACH_ROW_in_simple_dml_trigger3005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_referencing_clause_in_simple_dml_trigger3008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_dml_event_clause_in_simple_dml_trigger3011 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPOUND_DML_in_compound_dml_trigger3047 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_referencing_clause_in_compound_dml_trigger3049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_dml_event_clause_in_compound_dml_trigger3052 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NON_DML_in_non_dml_trigger3088 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BEFORE_VK_in_non_dml_trigger3091 = new BitSet(new long[]{0x0000000000000000L,0x0201002000000000L,0x0000000000800008L,0x0000000000020408L,0x0062000000000020L,0x0080000000000100L,0x0000000000000000L,0x0040000000006000L,0x0000000000000000L,0x1000000800000000L,0x0000000000408000L,0x0020020000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_AFTER_VK_in_non_dml_trigger3093 = new BitSet(new long[]{0x0000000000000000L,0x0201002000000000L,0x0000000000800008L,0x0000000000020408L,0x0062000000000020L,0x0080000000000100L,0x0000000000000000L,0x0040000000006000L,0x0000000000000000L,0x1000000800000000L,0x0000000000408000L,0x0020020000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_non_dml_event_in_non_dml_trigger3096 = new BitSet(new long[]{0x0000000000000000L,0x0201002000000000L,0x0000000000800008L,0x0000000000020408L,0x0062000000000020L,0x0080000000000100L,0x0000000000000000L,0x0040000000006000L,0x0000000000000000L,0x1800000800000000L,0x0000000000408000L,0x0020020000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_DATABASE_VK_in_non_dml_trigger3100 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_schema_name_in_non_dml_trigger3102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SCHEMA_VK_in_non_dml_trigger3105 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPOUND_VK_in_trigger_body3142 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_trigger_body3144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0030000000000000L,0x0000000001800000L,0x0000083240000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000007000080L,0x0000000000000000L,0x3008000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_declare_spec_in_trigger_body3146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0030000000000000L,0x0000000001800000L,0x0000083240000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000007000080L,0x0000000000000000L,0x3008000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_timing_point_section_in_trigger_body3149 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0030000000000000L,0x0000000001800000L});
	public static final BitSet FOLLOW_CALL_VK_in_trigger_body3177 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_routine_name_in_trigger_body3179 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_function_argument_in_trigger_body3181 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_trigger_body3210 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_trigger_body3212 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BEFORE_STATEMENT_in_timing_point_section3248 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section3250 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BEFORE_EACH_ROW_in_timing_point_section3277 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section3279 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AFTER_STATEMENT_in_timing_point_section3306 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section3308 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AFTER_EACH_ROW_in_timing_point_section3335 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section3337 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALTER_in_non_dml_event3372 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANALYZE_VK_in_non_dml_event3397 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASSOCIATE_VK_in_non_dml_event3422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_STATISTICS_VK_in_non_dml_event3424 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUDIT_VK_in_non_dml_event3449 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMENT_VK_in_non_dml_event3474 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_non_dml_event3499 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DISASSOCIATE_VK_in_non_dml_event3524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_STATISTICS_VK_in_non_dml_event3526 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DROP_in_non_dml_event3551 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GRANT_in_non_dml_event3576 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOAUDIT_VK_in_non_dml_event3601 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RENAME_VK_in_non_dml_event3626 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_REVOKE_in_non_dml_event3651 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUNCATE_VK_in_non_dml_event3676 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DDL_VK_in_non_dml_event3701 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STARTUP_VK_in_non_dml_event3726 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SHUTDOWN_VK_in_non_dml_event3751 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DB_ROLE_CHANGE_VK_in_non_dml_event3776 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOGON_VK_in_non_dml_event3801 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOGOFF_VK_in_non_dml_event3826 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SERVERERROR_VK_in_non_dml_event3851 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SUSPEND_VK_in_non_dml_event3876 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATABASE_VK_in_non_dml_event3901 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SCHEMA_VK_in_non_dml_event3926 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOLLOWS_VK_in_non_dml_event3951 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DML_EVENT_in_dml_event_clause3986 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_dml_event_element_in_dml_event_clause3988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_dml_event_clause3992 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_event_clause3994 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_dml_event_nested_clause_in_dml_event_clause3996 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DML_EVENT_ELEMENT_in_dml_event_element4036 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_dml_event_element4039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INSERT_in_dml_event_element4041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_dml_event_element4043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_COLUMNS_in_dml_event_element4047 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_dml_event_element4049 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_NESTED_VK_in_dml_event_nested_clause4087 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_event_nested_clause4089 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCING_VK_in_referencing_clause4125 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_referencing_element_in_referencing_clause4127 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000800008000L});
	public static final BitSet FOLLOW_NEW_VK_in_referencing_element4165 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_OLD_VK_in_referencing_element4167 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PARENT_VK_in_referencing_element4169 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_referencing_element4172 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_TYPE_in_drop_type4213 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_drop_type4215 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_BODY_VK_in_drop_type4217 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_FORCE_VK_in_drop_type4220 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_VALIDATE_VK_in_drop_type4223 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_TYPE_in_alter_type4260 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_alter_type4262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1600000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_REPLACE_VK_in_alter_type4283 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_OBJECT_MEMBERS_in_alter_type4286 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_element_spec_in_alter_type4288 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_alter_type4292 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_ATTRIBUTE_in_alter_type4314 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ADD_VK_in_alter_type4317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_MODIFY_VK_in_alter_type4319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DROP_in_alter_type4321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_ATTRIBUTES_in_alter_type4325 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_attribute_definition_in_alter_type4327 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_ALTER_METHOD_in_alter_type4350 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alter_method_element_in_alter_type4352 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_alter_collection_clauses_in_alter_type4373 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_modifier_clause_in_alter_type4392 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_COMPILE_VK_in_alter_type4412 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SPECIFICATION_VK_in_alter_type4415 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_BODY_VK_in_alter_type4417 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_type4421 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_type4424 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_type4427 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_dependent_handling_clause_in_alter_type4458 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_METHOD_ELEMENT_in_alter_method_element4506 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ADD_VK_in_alter_method_element4509 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DROP_in_alter_method_element4511 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_map_order_function_spec_in_alter_method_element4514 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_subprogram_spec_in_alter_method_element4517 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ATTRIBUTE_in_attribute_definition4554 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_attribute_name_in_attribute_definition4556 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_type_spec_in_attribute_definition4558 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_COLLECTION_in_alter_collection_clauses4595 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_TYPE_VK_in_alter_collection_clauses4616 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_alter_collection_clauses4618 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LIMIT_VK_in_alter_collection_clauses4639 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_alter_collection_clauses4641 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEPENDENT_HANDLING_in_dependent_handling_clause4702 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_INVALIDATE_VK_in_dependent_handling_clause4722 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CASCADE_VK_in_dependent_handling_clause4742 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CONVERT_VK_in_dependent_handling_clause4770 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_dependent_handling_clause4797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_INCLUDING_VK_in_dependent_handling_clause4800 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXCEPTIONS_VK_in_dependent_exceptions_part4900 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_FORCE_VK_in_dependent_exceptions_part4902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_tableview_name_in_dependent_exceptions_part4905 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CREATE_TYPE_BODY_in_create_type4943 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_create_type4945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_type4948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_type_name_in_create_type4951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_TYPE_BODY_ELEMENTS_in_create_type4954 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_body_elements_in_create_type4956 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_CREATE_TYPE_SPEC_in_create_type4985 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_create_type4987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_type4990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_type_name_in_create_type4993 = new BitSet(new long[]{0x0000000000008008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_CHAR_STRING_in_create_type4995 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_object_type_def_in_create_type4998 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OBJECT_TYPE_DEF_in_object_type_def5035 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_object_as_part_in_object_type_def5038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000002000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_object_under_part_in_object_type_def5040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000002000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_object_type_def5043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000002000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_sqlj_object_type_in_object_type_def5059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_modifier_clause_in_object_type_def5062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_OBJECT_MEMBERS_in_object_type_def5066 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_element_spec_in_object_type_def5068 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_OBJECT_AS_in_object_as_part5108 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_OBJECT_VK_in_object_as_part5111 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_varray_type_def_in_object_as_part5113 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_nested_table_type_def_in_object_as_part5115 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNDER_VK_in_object_under_part5152 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_object_under_part5154 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NESTED_TABLE_TYPE_DEF_in_nested_table_type_def5190 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_nested_table_type_def5192 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_nested_table_type_def5194 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_table_indexed_by_part_in_nested_table_type_def5197 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_JAVA_VK_in_sqlj_object_type5275 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_sqlj_object_type5277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SQLDATA_VK_in_sqlj_object_type5280 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CUSTOMDATUM_VK_in_sqlj_object_type5282 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ORADATA_VK_in_sqlj_object_type5284 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_map_order_func_declaration_in_type_body_elements5320 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subprog_decl_in_type_in_type_body_elements5345 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MAP_VK_in_map_order_func_declaration5381 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_map_order_func_declaration5383 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_create_function_body_in_map_order_func_declaration5386 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MEMBER_VK_in_subprog_decl_in_type5423 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_STATIC_VK_in_subprog_decl_in_type5425 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_create_procedure_body_in_subprog_decl_in_type5445 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_create_function_body_in_subprog_decl_in_type5464 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_constructor_declaration_in_subprog_decl_in_type5483 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRUCTOR_VK_in_constructor_declaration5542 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_constructor_declaration5544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_FINAL_VK_in_constructor_declaration5546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_INSTANTIABLE_VK_in_constructor_declaration5549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_constructor_declaration5553 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_elements_parameter_in_constructor_declaration5555 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_CALL_MODE_in_constructor_declaration5578 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_constructor_declaration5580 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_constructor_declaration5601 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_constructor_declaration5603 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODIFIER_in_modifier_clause5667 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_modifier_clause5669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_INSTANTIABLE_VK_in_modifier_clause5673 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FINAL_VK_in_modifier_clause5675 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OVERRIDING_VK_in_modifier_clause5677 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXTERNAL_VK_in_sqlj_object_type_attr5714 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_sqlj_object_type_attr5716 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ELEMENT_SPEC_in_element_spec5752 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_element_spec_options_in_element_spec5754 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000080000L,0x0002000000000000L,0x0000000000000000L,0x0000002001200000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_modifier_clause_in_element_spec5757 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_pragma_clause_in_element_spec5760 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_subprogram_spec_in_element_spec_options5796 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constructor_spec_in_element_spec_options5821 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_map_order_function_spec_in_element_spec_options5846 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FIELD_SPEC_in_element_spec_options5872 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_element_spec_options5874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_type_spec_in_element_spec_options5876 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_sqlj_object_type_attr_in_element_spec_options5878 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MEMBER_VK_in_subprogram_spec5916 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_STATIC_VK_in_subprogram_spec5918 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_spec_in_subprogram_spec5938 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_function_spec_in_subprogram_spec5957 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRUCTOR_SPEC_in_constructor_spec6016 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_constructor_spec6018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_FINAL_VK_in_constructor_spec6020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_INSTANTIABLE_VK_in_constructor_spec6023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_constructor_spec6027 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_elements_parameter_in_constructor_spec6029 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_constructor_call_mode_in_constructor_spec6033 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CALL_MODE_in_constructor_call_mode6070 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_constructor_call_mode6072 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MAP_VK_in_map_order_function_spec6109 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_map_order_function_spec6111 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_spec_in_map_order_function_spec6114 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRAGMA_VK_in_pragma_clause6150 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pragma_elements_in_pragma_clause6152 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_id_in_pragma_elements6188 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_elements6213 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PARAMETER_in_type_elements_parameter6248 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_type_elements_parameter6250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_type_spec_in_type_elements_parameter6252 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_SEQUENCE_in_drop_sequence6293 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_sequence_name_in_drop_sequence6295 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_SEQUENCE_in_alter_sequence6331 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_sequence_name_in_alter_sequence6333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000000040000L,0x0000080000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000400000L,0x9A80000040400000L});
	public static final BitSet FOLLOW_sequence_spec_in_alter_sequence6335 = new BitSet(new long[]{0x0000000000000008L,0x0000000000001000L,0x0000000000040000L,0x0000080000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000400000L,0x9A80000040400000L});
	public static final BitSet FOLLOW_CREATE_SEQUENCE_in_create_sequence6372 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_sequence_name_in_create_sequence6374 = new BitSet(new long[]{0x0000000000000008L,0x0000000000001000L,0x0000000000040000L,0x0000080000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000400000L,0x9A80000040400000L});
	public static final BitSet FOLLOW_sequence_spec_in_create_sequence6376 = new BitSet(new long[]{0x0000000000000008L,0x0000000000001000L,0x0000000000040000L,0x0000080000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000400000L,0x9A80000040400000L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_START_in_sequence_spec6415 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6417 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INCREMENT_VK_in_sequence_spec6444 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6446 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MAXVALUE_VK_in_sequence_spec6473 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6475 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MINVALUE_VK_in_sequence_spec6502 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6504 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CACHE_VK_in_sequence_spec6531 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec6533 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOMAXVALUE_VK_in_sequence_spec6559 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOMINVALUE_VK_in_sequence_spec6584 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CYCLE_VK_in_sequence_spec6609 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOCYCLE_VK_in_sequence_spec6634 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOCACHE_VK_in_sequence_spec6659 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_sequence_spec6684 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOORDER_VK_in_sequence_spec6709 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTHID_VK_in_invoker_rights_clause6750 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CURRENT_USER_VK_in_invoker_rights_clause6753 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEFINER_VK_in_invoker_rights_clause6755 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPILER_PARAMETER_in_compiler_parameters_clause6792 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASSIGN_in_compiler_parameters_clause6795 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_compiler_parameters_clause6797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_compiler_parameters_clause6799 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LANGUAGE_VK_in_call_spec6836 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_java_spec_in_call_spec6842 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_c_spec_in_call_spec6848 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_JAVA_VK_in_java_spec6889 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_java_spec6891 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_C_VK_in_c_spec6928 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_c_spec6930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_CONTEXT_VK_in_c_spec6933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_LIBRARY_VK_in_c_spec6937 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_c_spec6939 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_c_agent_in_clause_in_c_spec6942 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_c_parameters_clause_in_c_spec6945 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AGENT_VK_in_c_agent_in_clause6982 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_c_agent_in_clause6984 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_PARAMETERS_VK_in_c_parameters_clause7021 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_THREE_DOTS_in_c_parameters_clause7024 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_c_parameters_clause7026 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_PARAMETER_in_parameter7066 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_parameter7068 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x2000400000000000L,0x0000000000000000L,0x0000000440000000L,0x0000100000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_parameter7071 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x2000400000000000L,0x0000000000000000L,0x0000000440000000L,0x0000100000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_OUT_VK_in_parameter7073 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x2000400000000000L,0x0000000000000000L,0x0000000440000000L,0x0000100000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_INOUT_VK_in_parameter7075 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x2000400000000000L,0x0000000000000000L,0x0000000440000000L,0x0000100000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_type_spec_in_parameter7079 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_parameter7082 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEFAULT_VALUE_in_default_value_part7172 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_default_value_part7174 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_variable_declaration_in_declare_spec7216 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_declare_spec7232 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_declare_spec7248 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_declare_spec7264 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pragma_declaration_in_declare_spec7280 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_declare_spec7296 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_declare_spec7312 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_declare_spec7328 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_declare_spec7344 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_declare_spec7360 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIABLE_DECLARE_in_variable_declaration7386 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_variable_declaration7388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_type_spec_in_variable_declaration7390 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x2000000000020000L});
	public static final BitSet FOLLOW_CONSTANT_VK_in_variable_declaration7392 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_variable_declaration7395 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_variable_declaration7398 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBTYPE_DECLARE_in_subtype_declaration7483 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_subtype_declaration7485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_type_spec_in_subtype_declaration7487 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_subtype_declaration7489 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_subtype_range_in_subtype_declaration7492 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RANGE_VK_in_subtype_range7570 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_subtype_range7574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_subtype_range7578 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_DECLARE_in_cursor_declaration7621 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_cursor_declaration7623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_type_spec_in_cursor_declaration7625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_select_statement_in_cursor_declaration7628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_cursor_declaration7632 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_spec_in_cursor_declaration7636 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_PARAMETER_in_parameter_spec7712 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_parameter_spec7714 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_type_spec_in_parameter_spec7716 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_parameter_spec7719 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXCEPTION_DECLARE_in_exception_declaration7789 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_exception_declaration7791 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRAGMA_DECLARE_in_pragma_declaration7841 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pragma_declaration_impl_in_pragma_declaration7843 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SERIALLY_REUSABLE_VK_in_pragma_declaration_impl7888 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTONOMOUS_TRANSACTION_VK_in_pragma_declaration_impl7911 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXCEPTION_INIT_VK_in_pragma_declaration_impl7934 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_pragma_declaration_impl7936 = new BitSet(new long[]{0x0000000008008040L,0x4020000000000000L,0x0000080040002000L,0x0000000000000000L,0x0010000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000040400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_constant_in_pragma_declaration_impl7938 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INLINE_VK_in_pragma_declaration_impl7981 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_pragma_declaration_impl7983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_pragma_declaration_impl7985 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RESTRICT_REFERENCES_VK_in_pragma_declaration_impl8028 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_declaration_impl8066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_id_in_pragma_declaration_impl8092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_id_in_pragma_declaration_impl8132 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_record_type_dec_in_record_declaration8198 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_var_dec_in_record_declaration8213 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_type_dec_record_in_record_type_dec8240 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_type_dec_refcursor_in_record_type_dec8255 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_TYPE_DECLARE_FIELDS_in_record_type_dec_record8284 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_record_type_dec_record8286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_field_spec_in_record_type_dec_record8290 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_RECORD_TYPE_DECLARE_REFCURSOR_in_record_type_dec_refcursor8337 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_record_type_dec_refcursor8339 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_type_spec_in_record_type_dec_refcursor8341 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FIELD_SPEC_in_field_spec8384 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_field_spec8386 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x2000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_type_spec_in_field_spec8388 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_field_spec8391 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_field_spec8394 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RECORD_VAR_DECLARE_in_record_var_dec8467 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_record_var_dec8469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_type_name_in_record_var_dec8471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000180000000000L});
	public static final BitSet FOLLOW_PERCENT_ROWTYPE_VK_in_record_var_dec8474 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PERCENT_TYPE_VK_in_record_var_dec8476 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_type_dec_in_table_declaration8514 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_var_dec_in_table_declaration8529 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_TYPE_DECLARE_in_table_type_dec8554 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_table_type_dec8556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_table_type_dec_impl_in_table_type_dec8558 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_type_dec_table_of_in_table_type_dec_impl8604 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varray_type_def_in_table_type_dec_impl8620 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_table_type_dec_table_of8648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TABLE_in_table_type_dec_table_of8652 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_table_type_dec_table_of8654 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_table_indexed_by_part_in_table_type_dec_table_of8656 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDEXED_BY_in_table_indexed_by_part8717 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_table_indexed_by_part8719 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_varray_type_def8755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_VARR_ARRAY_DEF_in_varray_type_def8759 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_varray_type_def8761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_type_spec_in_varray_type_def8763 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_VAR_DECLARE_in_table_var_dec8810 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_var_name_in_table_var_dec8812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_type_spec_in_table_var_dec8814 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STATEMENTS_in_seq_of_statements8855 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_statement_in_seq_of_statements8860 = new BitSet(new long[]{0x0000000000000008L,0x8040000000000024L,0x0000000200002084L,0x0802000A00000200L,0x0000000000800080L,0x090000C000000000L,0x0200000000000000L,0x0000000008040000L,0x0000800000060000L,0x4200810000040000L,0x00000000040A0080L,0x0000000000000000L,0x0000800000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_labeled_statement_in_seq_of_statements8864 = new BitSet(new long[]{0x0000000000000008L,0x8040000000000024L,0x0000000200002084L,0x0802000A00000200L,0x0000000000800080L,0x090000C000000000L,0x0200000000000000L,0x0000000008040000L,0x0000800000060000L,0x4200810000040000L,0x00000000040A0080L,0x0000000000000000L,0x0000800000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LABEL_DECLARE_in_labeled_statement8905 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_labeled_statement8907 = new BitSet(new long[]{0x0000000000000000L,0x8040000000000024L,0x0000000200002084L,0x0802000A00000200L,0x0000000000800080L,0x090000C000000000L,0x0000000000000000L,0x0000000008040000L,0x0000800000060000L,0x4200810000040000L,0x00000000040A0080L,0x0000000000000000L,0x0000800000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_statement_in_labeled_statement8909 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_assignment_statement_in_statement8944 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_continue_statement_in_statement8959 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exit_statement_in_statement8974 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_goto_statement_in_statement8989 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_if_statement_in_statement9004 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_loop_statement_in_statement9019 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_forall_statement_in_statement9034 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_null_statement_in_statement9049 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_raise_statement_in_statement9064 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_return_statement_in_statement9079 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pipe_row_statement_in_statement9094 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_statement_in_statement9109 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sql_statement_in_statement9124 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_perform_statement_in_statement9139 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_general_element_in_statement9154 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_body_in_statement9169 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_statement9184 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASSIGN_in_assignment_statement9210 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_assignment_statement9215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_hosted_variable_name_in_assignment_statement9219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_assignment_statement9222 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONTINUE_VK_in_continue_statement9264 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_continue_statement9266 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_general_when_in_continue_statement9269 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_general_when9312 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_general_when9314 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXIT_VK_in_exit_statement9351 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_exit_statement9353 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_general_when_in_exit_statement9356 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GOTO_in_goto_statement9399 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_goto_statement9401 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_IF_in_if_statement9438 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_if_statement9440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_if_statement9442 = new BitSet(new long[]{0x0080000000000008L,0x0400000000000000L});
	public static final BitSet FOLLOW_elsif_part_in_if_statement9446 = new BitSet(new long[]{0x0080000000000008L,0x0400000000000000L});
	public static final BitSet FOLLOW_else_part_in_if_statement9449 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_part9523 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_elsif_part9525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_elsif_part9527 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_else_part9569 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_else_part9571 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WHILE_LOOP_in_loop_statement9608 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_loop_statement9610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement9612 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOR_LOOP_in_loop_statement9645 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_loop_param_in_loop_statement9647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement9649 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LOOP_VK_in_loop_statement9682 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement9684 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDEXED_FOR_in_cursor_loop_param9723 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_cursor_loop_param9725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_REVERSE_VK_in_cursor_loop_param9727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_SIMPLE_BOUND_in_cursor_loop_param9731 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_cursor_loop_param9735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_cursor_loop_param9739 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_BASED_FOR_in_cursor_loop_param9783 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_cursor_loop_param9785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_general_element_in_cursor_loop_param9787 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_BASED_FOR_in_cursor_loop_param9820 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_cursor_loop_param9822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_select_statement_in_cursor_loop_param9824 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FORALL_VK_in_forall_statement9868 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_forall_statement9870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_bounds_clause_in_forall_statement9872 = new BitSet(new long[]{0x0000000000000000L,0x8040000000000020L,0x0000000200000080L,0x0800000000000000L,0x0000000000000080L,0x0000004000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000060000L,0x0200800000000000L,0x00000000000A0080L});
	public static final BitSet FOLLOW_sql_statement_in_forall_statement9874 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_EXCEPTIONS_VK_in_forall_statement9876 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_BOUND_in_bounds_clause9913 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_bounds_clause9915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_bounds_clause9917 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDICES_BOUND_in_bounds_clause9944 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_collection_name_in_bounds_clause9946 = new BitSet(new long[]{0x0000000000000008L,0x0000080000000000L});
	public static final BitSet FOLLOW_between_bound_in_bounds_clause9948 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VALUES_BOUND_in_bounds_clause9976 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_bounds_clause9978 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_between_bound10015 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_between_bound10017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_between_bound10019 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_null_statement10054 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RAISE_VK_in_raise_statement10087 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_raise_statement10089 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RETURN_VK_in_return_statement10127 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_return_statement10129 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_in_body10161 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_body10163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_body10166 = new BitSet(new long[]{0x0000000000000008L,0x1000000000000000L});
	public static final BitSet FOLLOW_exception_clause_in_body10168 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_clause10219 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_handler_in_exception_clause10223 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_exception_handler10261 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_exception_handler10265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_exception_handler10268 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BLOCK_in_block10312 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_declare_spec_in_block10316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000083240000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000007000080L,0x0000000000000000L,0x3008000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_body_in_block10319 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PGSQL_PERFORM_in_perform_statement10362 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_perform_statement10367 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_data_manipulation_language_statements_in_perform_statement10371 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_execute_immediate_in_sql_statement10405 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_data_manipulation_language_statements_in_sql_statement10420 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_manipulation_statements_in_sql_statement10435 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_transaction_control_statements_in_sql_statement10450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXECUTE_VK_in_execute_immediate10475 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_execute_immediate10477 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000000200L,0x0000020000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_into_clause_in_execute_immediate10496 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_execute_immediate10500 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_using_clause_in_execute_immediate10520 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_dynamic_returning_clause_in_execute_immediate10524 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_dynamic_returning_clause_in_execute_immediate10544 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DYNAMIC_RETURN_in_dynamic_returning_clause10640 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_into_clause_in_dynamic_returning_clause10642 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_merge_statement_in_data_manipulation_language_statements10682 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lock_table_statement_in_data_manipulation_language_statements10697 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_select_statement_in_data_manipulation_language_statements10712 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_update_statement_in_data_manipulation_language_statements10727 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delete_statement_in_data_manipulation_language_statements10742 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statement_in_data_manipulation_language_statements10757 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SELECT_STATEMENT_in_select_statement10782 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_factoring_clause_in_select_statement10784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_subquery_in_select_statement10787 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040001L});
	public static final BitSet FOLLOW_order_by_clause_in_select_statement10789 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_for_update_clause_in_select_statement10792 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WITH_in_subquery_factoring_clause10895 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_RECURSIVE_VK_in_subquery_factoring_clause10897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_factoring_element_in_subquery_factoring_clause10902 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_FACTORING_in_factoring_element10945 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_name_in_factoring_element10947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_column_name_in_factoring_element10951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_subquery_in_factoring_element10954 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_factoring_element10956 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBQUERY_in_subquery11036 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_basic_elements_in_subquery11038 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000040L,0x0000000080000100L});
	public static final BitSet FOLLOW_subquery_operation_part_in_subquery11042 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000040L,0x0000000080000100L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNION_in_subquery_operation_part11119 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTERSECT_in_subquery_operation_part11138 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_MINUS_in_subquery_operation_part11157 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_subquery_operation_part11187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_subquery_basic_elements_in_subquery_operation_part11190 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_query_block_in_subquery_basic_elements11247 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_subquery_basic_elements11262 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_SELECT_in_query_block11298 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_from_clause_in_query_block11313 = new BitSet(new long[]{0x0000000000000100L,0x0100001000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_query_block11329 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_query_block11331 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_query_block11333 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_ASTERISK_in_query_block11355 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000002000000210L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_SELECT_LIST_in_query_block11375 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_selected_element_in_query_block11379 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_into_clause_in_query_block11409 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000002000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_where_clause_in_query_block11412 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_hierarchical_query_clause_in_query_block11415 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_group_by_clause_in_query_block11431 = new BitSet(new long[]{0x0100000000000008L});
	public static final BitSet FOLLOW_model_clause_in_query_block11434 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_ITEM_in_selected_element11663 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_selected_element11665 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_alias_in_selected_element11667 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FROM_in_from_clause11710 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_ref_in_from_clause11714 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_TABLE_REF_in_table_ref11752 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_ref_aux_in_table_ref11754 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_join_clause_in_table_ref11758 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_TABLE_REF_ELEMENT_in_table_ref_aux11801 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_table_ref_aux11803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0600000000000000L});
	public static final BitSet FOLLOW_dml_table_expression_clause_in_table_ref_aux11806 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010001000000L});
	public static final BitSet FOLLOW_ONLY_VK_in_table_ref_aux11809 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_pivot_clause_in_table_ref_aux11811 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_unpivot_clause_in_table_ref_aux11813 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_flashback_query_clause_in_table_ref_aux11817 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_JOIN_DEF_in_join_clause11914 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_partition_clause_in_join_clause11930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x4000000000000000L,0x0000000020000000L,0x0000400000000002L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_CROSS_VK_in_join_clause11946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000020000000L,0x0000000000000002L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_NATURAL_VK_in_join_clause11948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000020000000L,0x0000000000000002L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_INNER_VK_in_join_clause11953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_FULL_VK_in_join_clause11955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LEFT_VK_in_join_clause11957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_RIGHT_VK_in_join_clause11959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_table_ref_aux_in_join_clause11963 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_query_partition_clause_in_join_clause11979 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_join_on_part_in_join_clause11995 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_join_using_part_in_join_clause11997 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_join_on_part12123 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_join_on_part12125 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_join_using_part12162 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_join_using_part12164 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_PARTITION_VK_in_query_partition_clause12201 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_partition_clause_impl_in_query_partition_clause12203 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_subquery_in_query_partition_clause_impl12242 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_query_partition_clause_impl12263 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS_in_query_partition_clause_impl12280 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_query_partition_clause_impl12284 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_VERSIONS_VK_in_flashback_query_clause12327 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_AS_in_flashback_query_clause12329 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SCN_VK_in_flashback_query_clause12333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_TIMESTAMP_VK_in_flashback_query_clause12335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_flashback_query_clause12339 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIVOT_VK_in_pivot_clause12376 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_XML_VK_in_pivot_clause12378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_pivot_element_in_pivot_clause12381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_pivot_for_clause_in_pivot_clause12384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_pivot_in_clause_in_pivot_clause12386 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIVOT_ELEMENT_in_pivot_element12422 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_pivot_element12424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_pivot_element12427 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FOR_in_pivot_for_clause12463 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_pivot_for_clause12465 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_pivot_in_clause12502 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_pivot_in_clause12518 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ANY_MODE_in_pivot_in_clause12534 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_pivot_in_clause12536 = new BitSet(new long[]{0x0000000000000008L,0x0000008000000000L});
	public static final BitSet FOLLOW_ELEMENTS_MODE_in_pivot_in_clause12554 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pivot_in_clause_element_in_pivot_in_clause12556 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_PIVOT_IN_ELEMENT_in_pivot_in_clause_element12613 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_pivot_in_clause_element12615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000060000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_pivot_in_clause_element12619 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_pivot_in_clause_element12621 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNPIVOT_VK_in_unpivot_clause12658 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_INCLUDE_VK_in_unpivot_clause12662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_EXCLUDE_VK_in_unpivot_clause12664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_NULLS_VK_in_unpivot_clause12667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_column_name_in_unpivot_clause12672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_pivot_for_clause_in_unpivot_clause12675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_unpivot_in_clause_in_unpivot_clause12677 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_unpivot_in_clause12713 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unpivot_in_element_in_unpivot_in_clause12715 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_UNPIVOT_IN_ELEMENT_in_unpivot_in_element12752 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_unpivot_in_element12754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_PIVOT_ALIAS_in_unpivot_in_element12758 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_unpivot_in_element12761 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_unpivot_in_element12763 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_HIERARCHICAL_in_hierarchical_query_clause12801 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_start_part_in_hierarchical_query_clause12803 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CONNECT_in_hierarchical_query_clause12807 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NOCYCLE_VK_in_hierarchical_query_clause12809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_hierarchical_query_clause12812 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_START_in_start_part12860 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_start_part12862 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GROUP_in_group_by_clause12899 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_group_by_element_in_group_by_clause12903 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_having_clause_in_group_by_clause12906 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_GROUP_BY_ELEMENT_in_group_by_element12949 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_group_by_elements_in_group_by_element12951 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_GROUPING_VK_in_group_by_elements12977 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_groupin_set_in_group_by_elements12979 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_grouping_element_in_group_by_elements13006 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GROUPIN_SET_in_groupin_set13031 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_grouping_element_in_groupin_set13033 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLUP_VK_in_grouping_element13069 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_grouping_element_in_grouping_element13073 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000060000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_CUBE_VK_in_grouping_element13102 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_grouping_element_in_grouping_element13106 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000060000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_expression_list_in_grouping_element13134 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_grouping_element13149 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_HAVING_in_having_clause13174 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_having_clause13176 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_clause13213 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_main_model_in_model_clause13215 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000010020000000L});
	public static final BitSet FOLLOW_cell_reference_options_in_model_clause13217 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000010020000000L});
	public static final BitSet FOLLOW_return_rows_clause_in_model_clause13220 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_reference_model_in_model_clause13223 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_set_in_cell_reference_options13260 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NAV_VK_in_cell_reference_options13266 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_cell_reference_options13279 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DIMENSION_VK_in_cell_reference_options13282 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SINGLE_VK_in_cell_reference_options13284 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RETURN_VK_in_return_rows_clause13321 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UPDATED_VK_in_return_rows_clause13324 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_return_rows_clause13326 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCE_VK_in_reference_model13363 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_reference_model_name_in_reference_model13365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_subquery_in_reference_model13367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_model_column_clauses_in_reference_model13369 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000020000L});
	public static final BitSet FOLLOW_cell_reference_options_in_reference_model13371 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000020000L});
	public static final BitSet FOLLOW_MAIN_MODEL_in_main_model13408 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_main_model_name_in_main_model13410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_model_column_clauses_in_main_model13413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_model_rules_clause_in_main_model13415 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000020000L});
	public static final BitSet FOLLOW_cell_reference_options_in_main_model13417 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000020000L});
	public static final BitSet FOLLOW_MODEL_COLUMN_in_model_column_clauses13454 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DIMENSION_VK_in_model_column_clauses13457 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_clauses13459 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MEASURES_VK_in_model_column_clauses13463 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_clauses13465 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_model_column_partition_part_in_model_column_clauses13468 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARTITION_VK_in_model_column_partition_part13505 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_partition_part13507 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_COLUMNS_in_model_column_list13543 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_in_model_column_list13545 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_MODEL_COLUMN_in_model_column13582 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_model_column13584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_model_column13587 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_RULES_in_model_rules_clause13624 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_rules_element_in_model_rules_clause13626 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_model_rules_part_in_model_rules_clause13629 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RULES_VK_in_model_rules_part13666 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_part13682 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_UPSERT_VK_in_model_rules_part13684 = new BitSet(new long[]{0x0000000000000008L,0x0000001000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_model_rules_part13686 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_AUTOMATIC_VK_in_model_rules_part13705 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_SEQUENTIAL_VK_in_model_rules_part13707 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_model_iterate_clause_in_model_rules_part13724 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_RULE_in_model_rules_element13770 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASSIGN_in_model_rules_element13786 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_expression_in_model_rules_element13788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_model_rules_element13790 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_element13807 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_UPSERT_VK_in_model_rules_element13809 = new BitSet(new long[]{0x0000000000000008L,0x0000001000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_model_rules_element13811 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_model_rules_element13829 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ITERATE_VK_in_model_iterate_clause13875 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_model_iterate_clause13877 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_until_part_in_model_iterate_clause13879 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNTIL_VK_in_until_part13916 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_until_part13918 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_order_by_clause13954 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SIBLINGS_VK_in_order_by_clause13956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_ORDER_BY_ELEMENTS_in_order_by_clause13960 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_order_by_elements_in_order_by_clause13964 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ORDER_BY_ELEMENT_in_order_by_elements14008 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_order_by_elements14010 = new BitSet(new long[]{0x0000000000000008L,0x0080020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ASC_in_order_by_elements14013 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DESC_in_order_by_elements14015 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_NULLS_VK_in_order_by_elements14020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_FIRST_VK_in_order_by_elements14023 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LAST_VK_in_order_by_elements14025 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FOR_in_for_update_clause14106 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_for_update_of_part_in_for_update_clause14108 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_for_update_options_in_for_update_clause14111 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_OF_in_for_update_of_part14154 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_for_update_of_part14158 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SKIP_VK_in_for_update_options14195 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_for_update_options14212 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WAIT_VK_in_for_update_options14230 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_update_options14232 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_update_statement14265 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_update_statement14267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_SET_VK_in_update_statement14282 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_update_set_elements_in_update_statement14286 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_where_clause_in_update_statement14302 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_static_returning_clause_in_update_statement14305 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_error_logging_clause_in_update_statement14308 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_update_set_elements14414 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_update_set_elements14416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_update_set_elements14418 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_update_set_elements14451 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_update_set_elements14455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_subquery_in_update_set_elements14458 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VALUE_VK_in_update_set_elements14491 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_update_set_elements14493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_update_set_elements14496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_update_set_elements14498 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_delete_statement14542 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_delete_statement14544 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_where_clause_in_delete_statement14558 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_static_returning_clause_in_delete_statement14561 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_error_logging_clause_in_delete_statement14564 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INSERT_in_insert_statement14642 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_single_table_insert_in_insert_statement14672 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_multi_table_insert_in_insert_statement14697 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SINGLE_TABLE_MODE_in_single_table_insert14750 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_insert_into_clause_in_single_table_insert14752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_values_clause_in_single_table_insert14755 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_static_returning_clause_in_single_table_insert14757 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_select_statement_in_single_table_insert14761 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_error_logging_clause_in_single_table_insert14764 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MULTI_TABLE_MODE_in_multi_table_insert14859 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_select_statement_in_multi_table_insert14861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_conditional_insert_clause_in_multi_table_insert14864 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_multi_table_element_in_multi_table_insert14866 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_TABLE_ELEMENT_in_multi_table_element14904 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_insert_into_clause_in_multi_table_element14906 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_values_clause_in_multi_table_element14908 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_error_logging_clause_in_multi_table_element14911 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONDITIONAL_INSERT_in_conditional_insert_clause14948 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_conditional_insert_clause14951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_FIRST_VK_in_conditional_insert_clause14953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_conditional_insert_when_part_in_conditional_insert_clause14957 = new BitSet(new long[]{0x0000000000000008L,0x0400000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_conditional_insert_else_part_in_conditional_insert_clause14960 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_conditional_insert_when_part14998 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_conditional_insert_when_part15000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_when_part15002 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_conditional_insert_else_part15039 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_else_part15041 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_insert_into_clause15078 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_insert_into_clause15080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_COLUMNS_in_insert_into_clause15083 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_insert_into_clause15087 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_VALUES_in_values_clause15131 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_values_clause15136 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_values_clause15140 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_VK_in_merge_statement15179 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_merge_statement15181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_tableview_name_in_merge_statement15184 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_merge_statement15200 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_selected_tableview_in_merge_statement15202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_merge_statement15204 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_merge_update_clause_in_merge_statement15220 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002008000L});
	public static final BitSet FOLLOW_merge_insert_clause_in_merge_statement15223 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_error_logging_clause_in_merge_statement15226 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_UPDATE_in_merge_update_clause15327 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_merge_element_in_merge_update_clause15331 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000002000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_where_clause_in_merge_update_clause15334 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L});
	public static final BitSet FOLLOW_merge_update_delete_part_in_merge_update_clause15337 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_merge_element15406 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_merge_element15408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_merge_element15410 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_merge_update_delete_part15452 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_where_clause_in_merge_update_delete_part15454 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_INSERT_in_merge_insert_clause15491 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_merge_insert_clause15494 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_merge_insert_clause15498 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_merge_insert_clause15502 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_where_clause_in_merge_insert_clause15504 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECTED_TABLEVIEW_in_selected_tableview15553 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_selected_tableview15567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0040000000000000L});
	public static final BitSet FOLLOW_tableview_name_in_selected_tableview15598 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_select_statement_in_selected_tableview15646 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_LOCK_in_lock_table_statement15725 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_lock_table_element_in_lock_table_statement15727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000801L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_lock_mode_in_lock_table_statement15730 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_wait_nowait_part_in_lock_table_statement15732 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WAIT_VK_in_wait_nowait_part15769 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_wait_nowait_part15771 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_wait_nowait_part15797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCK_TABLE_ELEMENT_in_lock_table_element15834 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_lock_table_element15836 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_partition_extension_clause_in_lock_table_element15838 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode15874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode15876 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode15901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode15903 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode15928 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_lock_mode15930 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode15956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode15958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode15960 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode15985 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_REF_in_general_table_ref16023 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_general_table_ref16025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0600000000000000L});
	public static final BitSet FOLLOW_dml_table_expression_clause_in_general_table_ref16028 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ONLY_VK_in_general_table_ref16030 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STATIC_RETURNING_in_static_returning_clause16115 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_static_returning_clause16119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000020000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_into_clause_in_static_returning_clause16122 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LOG_VK_in_error_logging_clause16164 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_error_logging_into_part_in_error_logging_clause16166 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_expression_in_error_logging_clause16169 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_error_logging_reject_part_in_error_logging_clause16172 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_error_logging_into_part16209 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_error_logging_into_part16211 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REJECT_VK_in_error_logging_reject_part16247 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNLIMITED_VK_in_error_logging_reject_part16250 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_error_logging_reject_part16252 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_EXPRESSION_in_dml_table_expression_clause16289 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLLECTION_MODE_in_dml_table_expression_clause16306 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_collection_expression_in_dml_table_expression_clause16308 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_MODE_in_dml_table_expression_clause16329 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_select_statement_in_dml_table_expression_clause16331 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause16333 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DIRECT_MODE_in_dml_table_expression_clause16422 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_table_expression_clause16424 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_sample_clause_in_dml_table_expression_clause16426 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_general_element_in_dml_table_expression_clause16471 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_standard_function_in_dml_table_expression_clause16490 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_ref_in_dml_table_expression_clause16529 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_table_collection_expression16557 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_table_collection_expression16586 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OUTER_JOIN_SIGN_in_table_collection_expression16616 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_table_collection_expression16618 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OUTER_JOIN_SIGN_in_table_collection_expression16649 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_table_collection_expression16651 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WITH_in_subquery_restriction_clause16692 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_READ_VK_in_subquery_restriction_clause16695 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CHECK_in_subquery_restriction_clause16697 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_constraint_name_in_subquery_restriction_clause16699 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAMPLE_VK_in_sample_clause16737 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BLOCK_VK_in_sample_clause16739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_sample_clause16742 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_seed_part_in_sample_clause16744 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SEED_VK_in_seed_part16782 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_seed_part16784 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_close_statement_in_cursor_manipulation_statements16825 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_open_statement_in_cursor_manipulation_statements16840 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fetch_statement_in_cursor_manipulation_statements16855 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_open_for_statement_in_cursor_manipulation_statements16870 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLOSE_VK_in_close_statement16896 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_close_statement16898 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OPEN_VK_in_open_statement16936 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_open_statement16938 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_expression_list_in_open_statement16940 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FETCH_in_fetch_statement16983 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_fetch_statement16985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000020000000000L});
	public static final BitSet FOLLOW_into_clause_in_fetch_statement16987 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OPEN_FOR_in_open_for_statement17029 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_open_for_statement17031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_expression_in_open_for_statement17036 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_select_statement_in_open_for_statement17040 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_open_for_statement17043 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_transaction_command_in_transaction_control_statements17094 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_constraint_command_in_transaction_control_statements17109 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_commit_statement_in_transaction_control_statements17124 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rollback_statement_in_transaction_control_statements17139 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_savepoint_statement_in_transaction_control_statements17154 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_TRANSACTION_in_set_transaction_command17179 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_set_transaction_command17181 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000200000L});
	public static final BitSet FOLLOW_READ_VK_in_set_transaction_command17202 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ONLY_VK_in_set_transaction_command17205 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WRITE_VK_in_set_transaction_command17207 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ISOLATION_VK_in_set_transaction_command17229 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SERIALIZABLE_VK_in_set_transaction_command17232 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMMITTED_VK_in_set_transaction_command17234 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_VK_in_set_transaction_command17256 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_rollback_segment_name_in_set_transaction_command17258 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SET_CONSTRAINT_in_set_constraint_command17319 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_set_constraint_command17322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_constraint_name_in_set_constraint_command17324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000040000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_IMMEDIATE_VK_in_set_constraint_command17329 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEFERRED_VK_in_set_constraint_command17331 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMMIT_VK_in_commit_statement17369 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WORK_VK_in_commit_statement17371 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L,0x0200000000000000L});
	public static final BitSet FOLLOW_commit_comment_in_commit_statement17404 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_commit_force_in_commit_statement17424 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMMENT_VK_in_commit_comment17515 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_commit_comment17519 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_write_clause_in_commit_comment17522 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FORCE_VK_in_commit_force17566 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CORRUPT_XID_VK_in_commit_force17592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_commit_force17596 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CORRUPT_XID_ALL_VK_in_commit_force17621 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_commit_force17645 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_commit_force17649 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WRITE_VK_in_write_clause17707 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WAIT_VK_in_write_clause17710 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_write_clause17712 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_IMMEDIATE_VK_in_write_clause17717 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BATCH_VK_in_write_clause17719 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_VK_in_rollback_statement17795 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WORK_VK_in_rollback_statement17797 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TO_in_rollback_statement17821 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_savepoint_name_in_rollback_statement17823 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FORCE_VK_in_rollback_statement17846 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_rollback_statement17848 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAVEPOINT_VK_in_savepoint_statement17963 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_savepoint_name_in_savepoint_statement17965 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIPE_ROW_in_pipe_row_statement18007 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_pipe_row_statement18009 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXPR_LIST_in_expression_list18050 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_expression_list18054 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LOGIC_EXPR_in_expression18092 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression18094 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXPR_in_expression18111 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression18113 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_OR_in_expression_element18170 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_AND_in_expression_element18188 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_EQUALS_OP_in_expression_element18206 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NOT_EQUAL_OP_in_expression_element18224 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LESS_THAN_OP_in_expression_element18242 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_GREATER_THAN_OP_in_expression_element18260 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LESS_THAN_OR_EQUALS_OP_in_expression_element18278 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_GREATER_THAN_OR_EQUALS_OP_in_expression_element18296 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CONCATENATION_OP_in_expression_element18314 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PLUS_SIGN_in_expression_element18332 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_MINUS_SIGN_in_expression_element18350 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASTERISK_in_expression_element18368 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SOLIDUS_in_expression_element18386 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_in_expression_element18404 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_MOD_VK_in_expression_element18422 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DIV_VK_in_expression_element18440 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18468 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x0014000000010000L,0x0000000000002200L,0x011FFF8000002000L,0x00200084414000E0L,0x000107800100001AL,0x4000000000000000L,0x0000000404010000L,0x0005010000000000L,0x00000080000C0000L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18472 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_expression_element18520 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18524 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_NULL_in_expression_element18581 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NULL_in_expression_element18601 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_NAN_in_expression_element18621 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NAN_in_expression_element18641 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_PRESENT_in_expression_element18661 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_PRESENT_in_expression_element18681 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_INFINITE_in_expression_element18701 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_INFINITE_in_expression_element18721 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_A_SET_in_expression_element18741 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_A_SET_in_expression_element18761 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_EMPTY_in_expression_element18781 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_EMPTY_in_expression_element18801 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18833 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_OF_TYPE_in_expression_element18877 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_type_spec_in_expression_element18881 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_IS_OF_TYPE_in_expression_element18909 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_type_spec_in_expression_element18913 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_MEMBER_VK_in_expression_element18943 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SUBMULTISET_VK_in_expression_element18945 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18948 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x0014000000010000L,0x0000000000002200L,0x011FFF8000002000L,0x00200084414000E0L,0x000107800100001AL,0x4000000000000000L,0x0000000404010000L,0x0005010000000000L,0x00000080000C0000L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18950 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOT_IN_in_expression_element18978 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element18982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000060000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_in_elements_in_expression_element18984 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_expression_element19017 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000060000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_in_elements_in_expression_element19023 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOT_BETWEEN_in_expression_element19056 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19060 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x0014000000010000L,0x0000000000002200L,0x011FFF8000002000L,0x00200084414000E0L,0x000107800100001AL,0x4000000000000000L,0x0000000404010000L,0x0005010000000000L,0x00000080000C0000L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19064 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x0014000000010000L,0x0000000000002200L,0x011FFF8000002000L,0x00200084414000E0L,0x000107800100001AL,0x4000000000000000L,0x0000000404010000L,0x0005010000000000L,0x00000080000C0000L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19068 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_expression_element19111 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19115 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x0014000000010000L,0x0000000000002200L,0x011FFF8000002000L,0x00200084414000E0L,0x000107800100001AL,0x4000000000000000L,0x0000000404010000L,0x0005010000000000L,0x00000080000C0000L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19119 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x0014000000010000L,0x0000000000002200L,0x011FFF8000002000L,0x00200084414000E0L,0x000107800100001AL,0x4000000000000000L,0x0000000404010000L,0x0005010000000000L,0x00000080000C0000L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19123 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_LIKE_in_expression_element19195 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LIKEC_VK_in_expression_element19215 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LIKE2_VK_in_expression_element19235 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LIKE4_VK_in_expression_element19255 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NOT_LIKE_in_expression_element19275 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19307 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x0014000000010000L,0x0000000000002200L,0x011FFF8000002000L,0x00200084414000E0L,0x000107800100001AL,0x4000000000000000L,0x0000000404010000L,0x0005010000000000L,0x00000080000C0000L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19323 = new BitSet(new long[]{0x00122C018C108148L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x0014000000010000L,0x0000000000002200L,0x011FFF8000002000L,0x00200084414000E0L,0x000107800100001AL,0x4000000000000000L,0x0000000404010000L,0x0005010000000000L,0x00000080000C0000L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19339 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIPE_VK_in_expression_element19399 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19401 = new BitSet(new long[]{0x00122C018C108140L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x0014000000010000L,0x0000000000002200L,0x011FFF8000002000L,0x00200084414000E0L,0x000107800100001AL,0x4000000000000000L,0x0000000404010000L,0x0005010000000000L,0x00000080000C0000L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19403 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNARY_PLUS_in_expression_element19431 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19435 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNARY_MINUS_in_expression_element19473 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19477 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_PRIOR_in_expression_element19515 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19519 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NEW_VK_in_expression_element19547 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_expression_element19549 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_expression_element19576 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19578 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STANDARD_FUNCTION_in_expression_element19605 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_standard_function_in_expression_element19607 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SOME_VK_in_expression_element19625 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_EXISTS_in_expression_element19627 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_expression_element19629 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_expression_element19631 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_expression_element19637 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_expression_element19641 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VECTOR_EXPR_in_expression_element19711 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19713 = new BitSet(new long[]{0x00122C018C108148L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x0014000000010000L,0x0000000000002200L,0x011FFF8000002000L,0x00200084414000E0L,0x000107800100001AL,0x4000000000000000L,0x0000000404010000L,0x0005010000000000L,0x00000080000C0000L});
	public static final BitSet FOLLOW_DATETIME_OP_in_expression_element19742 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_datetime_element_in_expression_element19746 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_model_expression_in_expression_element19772 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KEEP_VK_in_expression_element19798 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element19800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_DENSE_RANK_VK_in_expression_element19802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_FIRST_VK_in_expression_element19805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_LAST_VK_in_expression_element19807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_expression_element19810 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_over_clause_in_expression_element19812 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DOT_ASTERISK_in_expression_element19841 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_expression_element19843 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PERCENT_FOUND_VK_in_expression_element19900 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_NOTFOUND_VK_in_expression_element19919 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_ROWCOUNT_VK_in_expression_element19938 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_ISOPEN_VK_in_expression_element19957 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_expression_element19987 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OUTER_JOIN_SIGN_in_expression_element20031 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element20035 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_case_statement_in_expression_element20063 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constant_in_expression_element20078 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_general_element_in_expression_element20093 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hosted_variable_name_in_expression_element20108 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_expression_element20123 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_in_elements20152 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_in_elements20172 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_in_elements20187 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_VK_in_datetime_element20212 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_datetime_element20214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LOCAL_VK_in_datetime_element20217 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TIME_VK_in_datetime_element20219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_datetime_element20221 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DAY_VK_in_datetime_element20249 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SECOND_VK_in_datetime_element20251 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_datetime_element20253 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_YEAR_VK_in_datetime_element20281 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_MONTH_VK_in_datetime_element20283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_datetime_element20285 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_EXPRESSION_in_model_expression20321 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_model_expression20323 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_model_expression_element_in_model_expression20325 = new BitSet(new long[]{0x0000000000000008L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_model_expression_element20361 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_model_expression_element20386 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_SINGLE_COLUMN_in_model_expression_element20412 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_model_expression_element20414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000042L,0x0000000000000000L,0x0400000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_for_single_column_element_in_model_expression_element20416 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_for_like_part_in_model_expression_element20418 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOR_MULTI_COLUMN_in_model_expression_element20446 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_model_expression_element20448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_model_expression_element20452 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_model_expression_element20455 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_model_expression_element20457 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_for_single_column_element20496 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_for_single_column_element20498 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FROM_in_for_single_column_element20525 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element20527 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TO_in_for_single_column_element20555 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element20557 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INCREMENT_VK_in_for_single_column_element20586 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DECREMENT_VK_in_for_single_column_element20588 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element20591 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_LIKE_in_for_like_part20628 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_like_part20630 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_CASE_in_case_statement20666 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_case_statement20668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_case_when_part_in_case_statement20672 = new BitSet(new long[]{0x0000000000000008L,0x0400000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_case_else_part_in_case_statement20675 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SEARCHED_CASE_in_case_statement20716 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_case_when_part_in_case_statement20720 = new BitSet(new long[]{0x0000000000000008L,0x0400000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_case_else_part_in_case_statement20723 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_case_when_part20769 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_case_when_part20773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_case_when_part20803 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_case_when_part20837 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_case_else_part20898 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_case_else_part20928 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_case_else_part20955 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_OVER_in_standard_function21017 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function21019 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function21021 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_USING_in_standard_function21071 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function21073 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_standard_function21075 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COUNT_VK_in_standard_function21103 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function21106 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function21108 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_standard_function21110 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_ASTERISK_in_standard_function21116 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_expression_in_standard_function21120 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function21124 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLCAST_VK_in_standard_function21215 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function21217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function21219 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CAST_VK_in_standard_function21252 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_standard_function21257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_expression_in_standard_function21261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function21264 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CHR_VK_in_standard_function21297 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function21299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_NCHAR_CS_VK_in_standard_function21301 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLLECT_VK_in_standard_function21328 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function21331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function21333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_column_name_in_standard_function21337 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_collect_order_by_part_in_standard_function21339 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_WITHIN_OR_OVER_in_standard_function21367 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function21381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_within_clause_in_standard_function21411 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_over_clause_in_standard_function21499 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DECOMPOSE_VK_in_standard_function21608 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function21610 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_CANONICAL_VK_in_standard_function21613 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPATIBILITY_VK_in_standard_function21615 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXTRACT_VK_in_standard_function21645 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_extract_part_in_standard_function21647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_standard_function21649 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FIRST_VALUE_VK_in_standard_function21683 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LAST_VALUE_VK_in_standard_function21685 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function21688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000040L});
	public static final BitSet FOLLOW_NULLS_VK_in_standard_function21690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function21693 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PREDICTION_FUNCTION_in_standard_function21721 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function21723 = new BitSet(new long[]{0x0800000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_cost_matrix_clause_in_standard_function21726 = new BitSet(new long[]{0x0800000000000008L});
	public static final BitSet FOLLOW_using_clause_in_standard_function21729 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TRANSLATE_VK_in_standard_function21757 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function21763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_standard_function21767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_standard_function21771 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TREAT_VK_in_standard_function21809 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function21811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_REF_VK_in_standard_function21813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function21816 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TRIM_VK_in_standard_function21843 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_standard_function21859 = new BitSet(new long[]{0x00122C018C108148L,0x612008D400008000L,0x0000080040123840L,0x0002000000000000L,0x0014000000010000L,0x0000000000002200L,0x011FFF8000002000L,0x00200084414000E0L,0x000107800100001AL,0x4000000000000000L,0x0000000404010000L,0x0005010000000000L,0x00000080000C0000L});
	public static final BitSet FOLLOW_expression_element_in_standard_function21891 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LEADING_VK_in_standard_function21925 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TRAILING_VK_in_standard_function21947 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BOTH_VK_in_standard_function21969 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLAGG_VK_in_standard_function22054 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function22056 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_standard_function22058 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLCOLATTVAL_VK_in_standard_function22093 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_XMLFOREST_VK_in_standard_function22095 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_multiuse_expression_element_in_standard_function22098 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_XMLEXISTS_VK_in_standard_function22126 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function22128 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function22130 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLPARSE_VK_in_standard_function22158 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DOCUMENT_VK_in_standard_function22161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_CONTENT_VK_in_standard_function22163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_standard_function22166 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_WELLFORMED_VK_in_standard_function22168 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLQUERY_VK_in_standard_function22233 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function22235 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function22237 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_standard_function22240 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLROOT_VK_in_standard_function22268 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function22270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_xml_param_version_part_in_standard_function22272 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_xmlroot_param_standalone_part_in_standard_function22274 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLTABLE_VK_in_standard_function22334 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_namespaces_clause_in_standard_function22336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_standard_function22341 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function22343 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_xml_table_column_in_standard_function22348 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_XMLELEMENT_VK_in_standard_function22413 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ENTITYESCAPING_VK_in_standard_function22428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020040000000L,0x0000000000000000L,0x0000040000001000L});
	public static final BitSet FOLLOW_NOENTITYESCAPING_VK_in_standard_function22430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020040000000L,0x0000000000000000L,0x0000040000001000L});
	public static final BitSet FOLLOW_NAME_VK_in_standard_function22447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_standard_function22449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_standard_function22453 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_xml_attributes_clause_in_standard_function22467 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_xmlelement_value_expr_in_standard_function22472 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_XMLPI_VK_in_standard_function22571 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NAME_VK_in_standard_function22594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_char_set_name_in_standard_function22596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_standard_function22599 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_standard_function22622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_standard_function22624 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_standard_function22660 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLSERIALIZE_VK_in_standard_function22697 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DOCUMENT_VK_in_standard_function22716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_CONTENT_VK_in_standard_function22718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_standard_function22737 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000008000000L,0x0000000400800400L,0x0000100000000000L,0x0000000000000020L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function22739 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000800400L,0x0000000000000000L,0x0000000000000020L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_xmlserialize_param_enconding_part_in_standard_function22758 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800400L,0x0000000000000000L,0x0000000000000020L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_xml_param_version_part_in_standard_function22777 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800400L,0x0000000000000000L,0x0000000000000020L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_xmlserialize_param_ident_part_in_standard_function22796 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_HIDE_VK_in_standard_function22817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SHOW_VK_in_standard_function22819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_DEFAULTS_VK_in_standard_function22822 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_YEAR_VK_in_extract_part22877 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MONTH_VK_in_extract_part22898 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DAY_VK_in_extract_part22919 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HOUR_VK_in_extract_part22940 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUTE_VK_in_extract_part22961 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SECOND_VK_in_extract_part22982 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_HOUR_VK_in_extract_part23003 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_MINUTE_VK_in_extract_part23024 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_ABBR_VK_in_extract_part23045 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_REGION_VK_in_extract_part23066 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_xmlelement_value_expr23098 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_alias_in_xmlelement_value_expr23100 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OVER_VK_in_over_clause23141 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_partition_clause_in_over_clause23143 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_order_by_clause_in_over_clause23147 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000080000L});
	public static final BitSet FOLLOW_windowing_clause_in_over_clause23149 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROWS_VK_in_windowing_clause23221 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_RANGE_VK_in_windowing_clause23223 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_windowing_clause23244 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause23248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause23252 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause23274 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNBOUNDED_VK_in_windowing_elements23375 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PRECEDING_VK_in_windowing_elements23377 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURRENT_VK_in_windowing_elements23396 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ROW_VK_in_windowing_elements23398 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRECEDING_VK_in_windowing_elements23417 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_windowing_elements23421 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOLLOWING_VK_in_windowing_elements23443 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_windowing_elements23447 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_using_clause23478 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_using_element_in_using_clause23482 = new BitSet(new long[]{0x0000000000000108L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ELEMENT_in_using_element23520 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_using_element23522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000002000000L});
	public static final BitSet FOLLOW_OUT_VK_in_using_element23525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_using_element23528 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_alias_in_using_element23530 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASTERISK_in_using_element23594 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_collect_order_by_part23627 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_collect_order_by_part23629 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WITHIN_VK_in_within_clause23665 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_order_by_clause_in_within_clause23667 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COST_VK_in_cost_matrix_clause23704 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_MODEL_in_cost_matrix_clause23723 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_AUTO_VK_in_cost_matrix_clause23725 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_cost_class_name_in_cost_matrix_clause23745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_expression_list_in_cost_matrix_clause23748 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PASSING_VK_in_xml_passing_clause23807 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_VALUE_VK_in_xml_passing_clause23809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_xml_passing_clause_expr_in_xml_passing_clause23814 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_xml_passing_clause_expr23858 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_alias_in_xml_passing_clause_expr23860 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_XMLATTRIBUTES_VK_in_xml_attributes_clause23901 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ENTITYESCAPING_VK_in_xml_attributes_clause23916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0400000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOENTITYESCAPING_VK_in_xml_attributes_clause23918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0400000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_SCHEMACHECK_VK_in_xml_attributes_clause23935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOSCHEMACHECK_VK_in_xml_attributes_clause23937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause23955 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_XMLNAMESPACES_VK_in_xml_namespaces_clause24053 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_namespaces_clause24068 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_alias_in_xml_namespaces_clause24070 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_xml_general_default_part_in_xml_namespaces_clause24075 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_COLUMN_in_xml_table_column24121 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_column_name_in_xml_table_column24123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000400000000L,0x0000100000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_ORDINALITY_VK_in_xml_table_column24153 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_type_spec_in_xml_table_column24180 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_expression_in_xml_table_column24182 = new BitSet(new long[]{0x0000000000000008L,0x0020000000000000L});
	public static final BitSet FOLLOW_xml_general_default_part_in_xml_table_column24185 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_xml_general_default_part24308 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_general_default_part24310 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ELEMENT_in_xml_multiuse_expression_element24347 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_multiuse_expression_element24349 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_xml_alias_in_xml_multiuse_expression_element24351 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ALIAS_in_xml_alias24394 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_xml_alias24396 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ALIAS_in_xml_alias24418 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_xml_alias24421 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_alias24423 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VERSION_VK_in_xml_param_version_part24461 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NO_VK_in_xml_param_version_part24491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_VALUE_VK_in_xml_param_version_part24493 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_xml_param_version_part24517 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STANDALONE_VK_in_xmlroot_param_standalone_part24568 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_YES_VK_in_xmlroot_param_standalone_part24598 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NO_VK_in_xmlroot_param_standalone_part24622 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_VALUE_VK_in_xmlroot_param_standalone_part24660 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ENCODING_VK_in_xmlserialize_param_enconding_part24758 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xmlserialize_param_enconding_part24760 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NO_VK_in_xmlserialize_param_ident_part24795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part24797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part24823 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xmlserialize_param_ident_part24825 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBPARTITION_VK_in_partition_extension_clause24867 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PARTITION_VK_in_partition_extension_clause24869 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_partition_extension_clause24872 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLUMN_ALIAS_in_alias24908 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_alias24910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_alias24913 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_ALIAS_in_alias24941 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_alias24943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_alias24946 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHERE_in_where_clause24983 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_where_clause24985 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_into_clause25022 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_into_clause25026 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_BULK_VK_in_into_clause25061 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_into_clause25065 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_XML_COLUMN_NAME_in_xml_column_name25113 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_xml_column_name25115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_xml_column_name25118 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COST_CLASS_NAME_in_cost_class_name25149 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_cost_class_name25151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_cost_class_name25154 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ATTRIBUTE_NAME_in_attribute_name25185 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_attribute_name25187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_attribute_name25190 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAVEPOINT_NAME_in_savepoint_name25221 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_savepoint_name25223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_savepoint_name25226 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_SEGMENT_NAME_in_rollback_segment_name25257 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_rollback_segment_name25259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_rollback_segment_name25262 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_VAR_NAME_in_table_var_name25294 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_table_var_name25296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_table_var_name25299 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SCHEMA_NAME_in_schema_name25330 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_schema_name25332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_schema_name25335 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROUTINE_NAME_in_routine_name25366 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_routine_name25368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_routine_name25371 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000200L});
	public static final BitSet FOLLOW_link_name_in_routine_name25374 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PACKAGE_NAME_in_package_name25411 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_package_name25413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_package_name25418 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_IMPLEMENTATION_TYPE_NAME_in_implementation_type_name25456 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_implementation_type_name25458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_implementation_type_name25463 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_PARAMETER_NAME_in_parameter_name25501 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_parameter_name25503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_parameter_name25506 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCE_MODEL_NAME_in_reference_model_name25543 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_reference_model_name25545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_reference_model_name25548 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MAIN_MODEL_NAME_in_main_model_name25584 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_main_model_name25586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_main_model_name25589 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_QUERY_NAME_in_query_name25625 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_query_name25627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_query_name25630 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRAINT_NAME_in_constraint_name25661 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_constraint_name25663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_constraint_name25666 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000200L});
	public static final BitSet FOLLOW_link_name_in_constraint_name25669 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LABEL_NAME_in_label_name25706 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_label_name25708 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TYPE_NAME_in_type_name25739 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_type_name25743 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_SEQUENCE_NAME_in_sequence_name25781 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_sequence_name25783 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_EXCEPTION_NAME_in_exception_name25820 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_exception_name25822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_exception_name25827 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_FUNCTION_NAME_in_function_name25865 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_function_name25867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_function_name25872 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_PROCEDURE_NAME_in_procedure_name25910 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_procedure_name25912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_procedure_name25917 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_TRIGGER_NAME_in_trigger_name25955 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_trigger_name25957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_trigger_name25962 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_HOSTED_VARIABLE_NAME_in_hosted_variable_name26004 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BINDVAR_in_hosted_variable_name26034 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_hosted_variable_name26060 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VARIABLE_NAME_in_variable_name26116 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_variable_name26118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_variable_name26123 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_INDEX_NAME_in_index_name26161 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_index_name26163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_index_name26166 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_NAME_in_cursor_name26197 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_cursor_name26199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_cursor_name26202 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RECORD_NAME_in_record_name26233 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_record_name26235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_record_name26238 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLLECTION_NAME_in_collection_name26269 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_collection_name26271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_collection_name26276 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_LINK_NAME_in_link_name26314 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_link_name26316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_link_name26319 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLUMN_NAME_in_column_name26350 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_column_name26352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_column_name26357 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_TABLEVIEW_NAME_in_tableview_name26395 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_tableview_name26397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_tableview_name26402 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000200L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_link_name_in_tableview_name26405 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_partition_extension_clause_in_tableview_name26408 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CHAR_SET_NAME_in_char_set_name26456 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_char_set_name26460 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ARGUMENTS_in_function_argument26502 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_argument_in_function_argument26506 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_ARGUMENT_in_argument26544 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_argument26546 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_parameter_name_in_argument26548 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CUSTOM_TYPE_in_type_spec26592 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_type_spec26594 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000180000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_REF_VK_in_type_spec26596 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000180000000000L});
	public static final BitSet FOLLOW_PERCENT_ROWTYPE_VK_in_type_spec26600 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PERCENT_TYPE_VK_in_type_spec26602 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_native_datatype_spec_in_type_spec26671 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTERVAL_DATATYPE_in_type_spec26687 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_interval_type_spec_first_in_type_spec26689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_interval_type_spec_second_in_type_spec26691 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_YEAR_VK_in_interval_type_spec_first26744 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DAY_VK_in_interval_type_spec_first26746 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_interval_type_spec_first26759 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MONTH_VK_in_interval_type_spec_second26829 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SECOND_VK_in_interval_type_spec_second26831 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_interval_type_spec_second26844 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRECISION_in_type_precision26903 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_constant_in_type_precision26907 = new BitSet(new long[]{0x0000000008008048L,0x4020000000000000L,0x0000080040002000L,0x0100040000000000L,0x0010000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000040400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_constant_in_type_precision26911 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0100040000000000L});
	public static final BitSet FOLLOW_CHAR_VK_in_type_precision26917 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BYTE_VK_in_type_precision26921 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NATIVE_DATATYPE_in_native_datatype_spec26984 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BFILE_VK_in_native_datatype_spec26995 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_BINARY_FLOAT_VK_in_native_datatype_spec27008 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_BINARY_INTEGER_VK_in_native_datatype_spec27021 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_BLOB_VK_in_native_datatype_spec27034 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_BOOLEAN_VK_in_native_datatype_spec27047 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_CHARACTER_VK_in_native_datatype_spec27060 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_CHAR_VK_in_native_datatype_spec27074 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_CLOB_VK_in_native_datatype_spec27087 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DATE_in_native_datatype_spec27100 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_DAY_VK_in_native_datatype_spec27113 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_DECIMAL_VK_in_native_datatype_spec27124 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_DEC_VK_in_native_datatype_spec27138 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_DOUBLE_VK_in_native_datatype_spec27151 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_DSINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec27164 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_FLOAT_VK_in_native_datatype_spec27175 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_HOUR_VK_in_native_datatype_spec27188 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_INTEGER_VK_in_native_datatype_spec27199 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_INT_VK_in_native_datatype_spec27212 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LONG_VK_in_native_datatype_spec27225 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LONG_RAW_in_native_datatype_spec27238 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_MINUTE_VK_in_native_datatype_spec27251 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_MLSLABEL_VK_in_native_datatype_spec27262 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_MONTH_VK_in_native_datatype_spec27273 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_NATURALN_VK_in_native_datatype_spec27284 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_NATURAL_VK_in_native_datatype_spec27295 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_NCHAR_VK_in_native_datatype_spec27306 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_NCLOB_VK_in_native_datatype_spec27319 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_NUMBER_VK_in_native_datatype_spec27332 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_NUMERIC_VK_in_native_datatype_spec27345 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_NVARCHAR2_VK_in_native_datatype_spec27358 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_PLS_INTEGER_VK_in_native_datatype_spec27371 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_POSITIVEN_VK_in_native_datatype_spec27384 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_POSITIVE_VK_in_native_datatype_spec27395 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_RAW_VK_in_native_datatype_spec27406 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_REAL_VK_in_native_datatype_spec27419 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ROWID_VK_in_native_datatype_spec27430 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_SECOND_VK_in_native_datatype_spec27443 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_SIGNTYPE_VK_in_native_datatype_spec27454 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_SIMPLE_INTEGER_VK_in_native_datatype_spec27465 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_SMALLINT_VK_in_native_datatype_spec27476 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_STRING_VK_in_native_datatype_spec27489 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_TIMESTAMP_LTZ_UNCONSTRAINED_VK_in_native_datatype_spec27500 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_TIMESTAMP_TZ_UNCONSTRAINED_VK_in_native_datatype_spec27511 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_TIMESTAMP_UNCONSTRAINED_VK_in_native_datatype_spec27522 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_TIMESTAMP_VK_in_native_datatype_spec27533 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_TIMEZONE_ABBR_VK_in_native_datatype_spec27546 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_TIMEZONE_HOUR_VK_in_native_datatype_spec27557 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_TIMEZONE_MINUTE_VK_in_native_datatype_spec27568 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_TIMEZONE_REGION_VK_in_native_datatype_spec27579 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_UROWID_VK_in_native_datatype_spec27590 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_VARCHAR2_VK_in_native_datatype_spec27603 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_VARCHAR_VK_in_native_datatype_spec27616 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_YEAR_VK_in_native_datatype_spec27629 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_YMINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec27640 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_type_precision_in_native_datatype_spec27649 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_TIME_VK_in_native_datatype_spec27659 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_LOCAL_VK_in_native_datatype_spec27663 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CASCATED_ELEMENT_in_general_element27738 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_id_in_general_element27768 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000110L});
	public static final BitSet FOLLOW_function_argument_in_general_element27788 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000110L});
	public static final BitSet FOLLOW_ANY_ELEMENT_in_general_element_id27851 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_general_element_id27853 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_constant27889 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONSTANT_NEGATED_in_constant27910 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_constant27914 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXACT_NUM_LIT_in_constant27935 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_APPROXIMATE_NUM_LIT_in_constant27955 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHAR_STRING_in_constant27975 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_constant27995 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TRUE_in_constant28015 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FALSE_in_constant28035 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DBTIMEZONE_VK_in_constant28055 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SESSIONTIMEZONE_VK_in_constant28076 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINVALUE_VK_in_constant28096 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MAXVALUE_VK_in_constant28116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_constant28136 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_char_set_name_in_id28171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ID_in_id28174 = new BitSet(new long[]{0x0000000000000002L});
}
